/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/sapMonitorsMappers";
import * as Parameters from "../models/parameters";
/** Class representing a SapMonitors. */
var SapMonitors = /** @class */ (function () {
    /**
     * Create a SapMonitors.
     * @param {HanaManagementClientContext} client Reference to the service client.
     */
    function SapMonitors(client) {
        this.client = client;
    }
    SapMonitors.prototype.list = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, listOperationSpec, callback);
    };
    SapMonitors.prototype.get = function (resourceGroupName, sapMonitorName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            sapMonitorName: sapMonitorName,
            options: options
        }, getOperationSpec, callback);
    };
    /**
     * Creates a SAP monitor for the specified subscription, resource group, and resource name.
     * @summary Creates a SAP monitor.
     * @param resourceGroupName Name of the resource group.
     * @param sapMonitorName Name of the SAP monitor resource.
     * @param sapMonitorParameter Request body representing a SAP Monitor
     * @param [options] The optional parameters
     * @returns Promise<Models.SapMonitorsCreateResponse>
     */
    SapMonitors.prototype.create = function (resourceGroupName, sapMonitorName, sapMonitorParameter, options) {
        return this.beginCreate(resourceGroupName, sapMonitorName, sapMonitorParameter, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Deletes a SAP monitor with the specified subscription, resource group, and monitor name.
     * @summary Deletes a SAP monitor.
     * @param resourceGroupName Name of the resource group.
     * @param sapMonitorName Name of the SAP monitor resource.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    SapMonitors.prototype.deleteMethod = function (resourceGroupName, sapMonitorName, options) {
        return this.beginDeleteMethod(resourceGroupName, sapMonitorName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    SapMonitors.prototype.update = function (resourceGroupName, sapMonitorName, tagsParameter, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            sapMonitorName: sapMonitorName,
            tagsParameter: tagsParameter,
            options: options
        }, updateOperationSpec, callback);
    };
    /**
     * Creates a SAP monitor for the specified subscription, resource group, and resource name.
     * @summary Creates a SAP monitor.
     * @param resourceGroupName Name of the resource group.
     * @param sapMonitorName Name of the SAP monitor resource.
     * @param sapMonitorParameter Request body representing a SAP Monitor
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    SapMonitors.prototype.beginCreate = function (resourceGroupName, sapMonitorName, sapMonitorParameter, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            sapMonitorName: sapMonitorName,
            sapMonitorParameter: sapMonitorParameter,
            options: options
        }, beginCreateOperationSpec, options);
    };
    /**
     * Deletes a SAP monitor with the specified subscription, resource group, and monitor name.
     * @summary Deletes a SAP monitor.
     * @param resourceGroupName Name of the resource group.
     * @param sapMonitorName Name of the SAP monitor resource.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    SapMonitors.prototype.beginDeleteMethod = function (resourceGroupName, sapMonitorName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            sapMonitorName: sapMonitorName,
            options: options
        }, beginDeleteMethodOperationSpec, options);
    };
    SapMonitors.prototype.listNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listNextOperationSpec, callback);
    };
    return SapMonitors;
}());
export { SapMonitors };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var listOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.HanaOnAzure/sapMonitors",
    urlParameters: [
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SapMonitorListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/sapMonitors/{sapMonitorName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.sapMonitorName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SapMonitor
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var updateOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/sapMonitors/{sapMonitorName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.sapMonitorName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "tagsParameter",
        mapper: __assign(__assign({}, Mappers.Tags), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.SapMonitor
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var beginCreateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/sapMonitors/{sapMonitorName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.sapMonitorName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "sapMonitorParameter",
        mapper: __assign(__assign({}, Mappers.SapMonitor), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.SapMonitor
        },
        201: {
            bodyMapper: Mappers.SapMonitor
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var beginDeleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/sapMonitors/{sapMonitorName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.sapMonitorName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var listNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SapMonitorListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
//# sourceMappingURL=sapMonitors.js.map