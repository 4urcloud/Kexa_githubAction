import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import { HanaManagementClientContext } from "../hanaManagementClientContext";
/** Class representing a SapMonitors. */
export declare class SapMonitors {
    private readonly client;
    /**
     * Create a SapMonitors.
     * @param {HanaManagementClientContext} client Reference to the service client.
     */
    constructor(client: HanaManagementClientContext);
    /**
     * Gets a list of SAP monitors in the specified subscription. The operations returns various
     * properties of each SAP monitor.
     * @summary Gets a list of SAP monitors in the specified subscription.
     * @param [options] The optional parameters
     * @returns Promise<Models.SapMonitorsListResponse>
     */
    list(options?: msRest.RequestOptionsBase): Promise<Models.SapMonitorsListResponse>;
    /**
     * @param callback The callback
     */
    list(callback: msRest.ServiceCallback<Models.SapMonitorListResult>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    list(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SapMonitorListResult>): void;
    /**
     * Gets properties of a SAP monitor for the specified subscription, resource group, and resource
     * name.
     * @summary Gets properties of a SAP monitor.
     * @param resourceGroupName Name of the resource group.
     * @param sapMonitorName Name of the SAP monitor resource.
     * @param [options] The optional parameters
     * @returns Promise<Models.SapMonitorsGetResponse>
     */
    get(resourceGroupName: string, sapMonitorName: string, options?: msRest.RequestOptionsBase): Promise<Models.SapMonitorsGetResponse>;
    /**
     * @param resourceGroupName Name of the resource group.
     * @param sapMonitorName Name of the SAP monitor resource.
     * @param callback The callback
     */
    get(resourceGroupName: string, sapMonitorName: string, callback: msRest.ServiceCallback<Models.SapMonitor>): void;
    /**
     * @param resourceGroupName Name of the resource group.
     * @param sapMonitorName Name of the SAP monitor resource.
     * @param options The optional parameters
     * @param callback The callback
     */
    get(resourceGroupName: string, sapMonitorName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SapMonitor>): void;
    /**
     * Creates a SAP monitor for the specified subscription, resource group, and resource name.
     * @summary Creates a SAP monitor.
     * @param resourceGroupName Name of the resource group.
     * @param sapMonitorName Name of the SAP monitor resource.
     * @param sapMonitorParameter Request body representing a SAP Monitor
     * @param [options] The optional parameters
     * @returns Promise<Models.SapMonitorsCreateResponse>
     */
    create(resourceGroupName: string, sapMonitorName: string, sapMonitorParameter: Models.SapMonitor, options?: msRest.RequestOptionsBase): Promise<Models.SapMonitorsCreateResponse>;
    /**
     * Deletes a SAP monitor with the specified subscription, resource group, and monitor name.
     * @summary Deletes a SAP monitor.
     * @param resourceGroupName Name of the resource group.
     * @param sapMonitorName Name of the SAP monitor resource.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteMethod(resourceGroupName: string, sapMonitorName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * Patches the Tags field of a SAP monitor for the specified subscription, resource group, and
     * monitor name.
     * @summary Patches the Tags field of a SAP monitor.
     * @param resourceGroupName Name of the resource group.
     * @param sapMonitorName Name of the SAP monitor resource.
     * @param tagsParameter Request body that only contains the new Tags field
     * @param [options] The optional parameters
     * @returns Promise<Models.SapMonitorsUpdateResponse>
     */
    update(resourceGroupName: string, sapMonitorName: string, tagsParameter: Models.Tags, options?: msRest.RequestOptionsBase): Promise<Models.SapMonitorsUpdateResponse>;
    /**
     * @param resourceGroupName Name of the resource group.
     * @param sapMonitorName Name of the SAP monitor resource.
     * @param tagsParameter Request body that only contains the new Tags field
     * @param callback The callback
     */
    update(resourceGroupName: string, sapMonitorName: string, tagsParameter: Models.Tags, callback: msRest.ServiceCallback<Models.SapMonitor>): void;
    /**
     * @param resourceGroupName Name of the resource group.
     * @param sapMonitorName Name of the SAP monitor resource.
     * @param tagsParameter Request body that only contains the new Tags field
     * @param options The optional parameters
     * @param callback The callback
     */
    update(resourceGroupName: string, sapMonitorName: string, tagsParameter: Models.Tags, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SapMonitor>): void;
    /**
     * Creates a SAP monitor for the specified subscription, resource group, and resource name.
     * @summary Creates a SAP monitor.
     * @param resourceGroupName Name of the resource group.
     * @param sapMonitorName Name of the SAP monitor resource.
     * @param sapMonitorParameter Request body representing a SAP Monitor
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginCreate(resourceGroupName: string, sapMonitorName: string, sapMonitorParameter: Models.SapMonitor, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Deletes a SAP monitor with the specified subscription, resource group, and monitor name.
     * @summary Deletes a SAP monitor.
     * @param resourceGroupName Name of the resource group.
     * @param sapMonitorName Name of the SAP monitor resource.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginDeleteMethod(resourceGroupName: string, sapMonitorName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Gets a list of SAP monitors in the specified subscription. The operations returns various
     * properties of each SAP monitor.
     * @summary Gets a list of SAP monitors in the specified subscription.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.SapMonitorsListNextResponse>
     */
    listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.SapMonitorsListNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SapMonitorListResult>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SapMonitorListResult>): void;
}
//# sourceMappingURL=sapMonitors.d.ts.map