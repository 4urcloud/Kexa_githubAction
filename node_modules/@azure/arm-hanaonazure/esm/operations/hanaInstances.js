/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/hanaInstancesMappers";
import * as Parameters from "../models/parameters";
/** Class representing a HanaInstances. */
var HanaInstances = /** @class */ (function () {
    /**
     * Create a HanaInstances.
     * @param {HanaManagementClientContext} client Reference to the service client.
     */
    function HanaInstances(client) {
        this.client = client;
    }
    HanaInstances.prototype.list = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, listOperationSpec, callback);
    };
    HanaInstances.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            options: options
        }, listByResourceGroupOperationSpec, callback);
    };
    HanaInstances.prototype.get = function (resourceGroupName, hanaInstanceName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            hanaInstanceName: hanaInstanceName,
            options: options
        }, getOperationSpec, callback);
    };
    /**
     * Creates a SAP HANA instance for the specified subscription, resource group, and instance name.
     * @summary Creates a SAP HANA instance.
     * @param resourceGroupName Name of the resource group.
     * @param hanaInstanceName Name of the SAP HANA on Azure instance.
     * @param hanaInstanceParameter Request body representing a HanaInstance
     * @param [options] The optional parameters
     * @returns Promise<Models.HanaInstancesCreateResponse>
     */
    HanaInstances.prototype.create = function (resourceGroupName, hanaInstanceName, hanaInstanceParameter, options) {
        return this.beginCreate(resourceGroupName, hanaInstanceName, hanaInstanceParameter, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Deletes a SAP HANA instance with the specified subscription, resource group, and instance name.
     * @summary Deletes a SAP HANA instance.
     * @param resourceGroupName Name of the resource group.
     * @param hanaInstanceName Name of the SAP HANA on Azure instance.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    HanaInstances.prototype.deleteMethod = function (resourceGroupName, hanaInstanceName, options) {
        return this.beginDeleteMethod(resourceGroupName, hanaInstanceName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    HanaInstances.prototype.update = function (resourceGroupName, hanaInstanceName, tagsParameter, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            hanaInstanceName: hanaInstanceName,
            tagsParameter: tagsParameter,
            options: options
        }, updateOperationSpec, callback);
    };
    /**
     * The operation to restart a SAP HANA instance.
     * @param resourceGroupName Name of the resource group.
     * @param hanaInstanceName Name of the SAP HANA on Azure instance.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    HanaInstances.prototype.restart = function (resourceGroupName, hanaInstanceName, options) {
        return this.beginRestart(resourceGroupName, hanaInstanceName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * The operation to start a SAP HANA instance.
     * @param resourceGroupName Name of the resource group.
     * @param hanaInstanceName Name of the SAP HANA on Azure instance.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    HanaInstances.prototype.start = function (resourceGroupName, hanaInstanceName, options) {
        return this.beginStart(resourceGroupName, hanaInstanceName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * The operation to shutdown a SAP HANA instance.
     * @param resourceGroupName Name of the resource group.
     * @param hanaInstanceName Name of the SAP HANA on Azure instance.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    HanaInstances.prototype.shutdown = function (resourceGroupName, hanaInstanceName, options) {
        return this.beginShutdown(resourceGroupName, hanaInstanceName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Creates a SAP HANA instance for the specified subscription, resource group, and instance name.
     * @summary Creates a SAP HANA instance.
     * @param resourceGroupName Name of the resource group.
     * @param hanaInstanceName Name of the SAP HANA on Azure instance.
     * @param hanaInstanceParameter Request body representing a HanaInstance
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    HanaInstances.prototype.beginCreate = function (resourceGroupName, hanaInstanceName, hanaInstanceParameter, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            hanaInstanceName: hanaInstanceName,
            hanaInstanceParameter: hanaInstanceParameter,
            options: options
        }, beginCreateOperationSpec, options);
    };
    /**
     * Deletes a SAP HANA instance with the specified subscription, resource group, and instance name.
     * @summary Deletes a SAP HANA instance.
     * @param resourceGroupName Name of the resource group.
     * @param hanaInstanceName Name of the SAP HANA on Azure instance.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    HanaInstances.prototype.beginDeleteMethod = function (resourceGroupName, hanaInstanceName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            hanaInstanceName: hanaInstanceName,
            options: options
        }, beginDeleteMethodOperationSpec, options);
    };
    /**
     * The operation to restart a SAP HANA instance.
     * @param resourceGroupName Name of the resource group.
     * @param hanaInstanceName Name of the SAP HANA on Azure instance.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    HanaInstances.prototype.beginRestart = function (resourceGroupName, hanaInstanceName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            hanaInstanceName: hanaInstanceName,
            options: options
        }, beginRestartOperationSpec, options);
    };
    /**
     * The operation to start a SAP HANA instance.
     * @param resourceGroupName Name of the resource group.
     * @param hanaInstanceName Name of the SAP HANA on Azure instance.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    HanaInstances.prototype.beginStart = function (resourceGroupName, hanaInstanceName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            hanaInstanceName: hanaInstanceName,
            options: options
        }, beginStartOperationSpec, options);
    };
    /**
     * The operation to shutdown a SAP HANA instance.
     * @param resourceGroupName Name of the resource group.
     * @param hanaInstanceName Name of the SAP HANA on Azure instance.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    HanaInstances.prototype.beginShutdown = function (resourceGroupName, hanaInstanceName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            hanaInstanceName: hanaInstanceName,
            options: options
        }, beginShutdownOperationSpec, options);
    };
    HanaInstances.prototype.listNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listNextOperationSpec, callback);
    };
    HanaInstances.prototype.listByResourceGroupNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listByResourceGroupNextOperationSpec, callback);
    };
    return HanaInstances;
}());
export { HanaInstances };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var listOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.HanaOnAzure/hanaInstances",
    urlParameters: [
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.HanaInstancesListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var listByResourceGroupOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/hanaInstances",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.HanaInstancesListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/hanaInstances/{hanaInstanceName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.hanaInstanceName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.HanaInstance
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var updateOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/hanaInstances/{hanaInstanceName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.hanaInstanceName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "tagsParameter",
        mapper: __assign(__assign({}, Mappers.Tags), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.HanaInstance
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var beginCreateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/hanaInstances/{hanaInstanceName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.hanaInstanceName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "hanaInstanceParameter",
        mapper: __assign(__assign({}, Mappers.HanaInstance), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.HanaInstance
        },
        201: {
            bodyMapper: Mappers.HanaInstance
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var beginDeleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/hanaInstances/{hanaInstanceName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.hanaInstanceName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var beginRestartOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/hanaInstances/{hanaInstanceName}/restart",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.hanaInstanceName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var beginStartOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/hanaInstances/{hanaInstanceName}/start",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.hanaInstanceName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var beginShutdownOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/hanaInstances/{hanaInstanceName}/shutdown",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.hanaInstanceName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var listNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.HanaInstancesListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var listByResourceGroupNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.HanaInstancesListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
//# sourceMappingURL=hanaInstances.js.map