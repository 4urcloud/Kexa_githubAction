/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@azure/ms-rest-azure-js'), require('@azure/ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', '@azure/ms-rest-azure-js', '@azure/ms-rest-js'], factory) :
    (global = global || self, factory((global.Azure = global.Azure || {}, global.Azure.ArmHanaonazure = {}), global.msRestAzure, global.msRest));
}(this, (function (exports, msRestAzure, msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var index = /*#__PURE__*/Object.freeze({
        __proto__: null
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    readOnly: true,
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var HardwareProfile = {
        serializedName: "HardwareProfile",
        type: {
            name: "Composite",
            className: "HardwareProfile",
            modelProperties: {
                hardwareType: {
                    readOnly: true,
                    serializedName: "hardwareType",
                    type: {
                        name: "String"
                    }
                },
                hanaInstanceSize: {
                    readOnly: true,
                    serializedName: "hanaInstanceSize",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Disk = {
        serializedName: "Disk",
        type: {
            name: "Composite",
            className: "Disk",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                diskSizeGB: {
                    serializedName: "diskSizeGB",
                    type: {
                        name: "Number"
                    }
                },
                lun: {
                    readOnly: true,
                    serializedName: "lun",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var StorageProfile = {
        serializedName: "StorageProfile",
        type: {
            name: "Composite",
            className: "StorageProfile",
            modelProperties: {
                nfsIpAddress: {
                    readOnly: true,
                    serializedName: "nfsIpAddress",
                    type: {
                        name: "String"
                    }
                },
                osDisks: {
                    serializedName: "osDisks",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Disk"
                            }
                        }
                    }
                }
            }
        }
    };
    var OSProfile = {
        serializedName: "OSProfile",
        type: {
            name: "Composite",
            className: "OSProfile",
            modelProperties: {
                computerName: {
                    serializedName: "computerName",
                    type: {
                        name: "String"
                    }
                },
                osType: {
                    readOnly: true,
                    serializedName: "osType",
                    type: {
                        name: "String"
                    }
                },
                version: {
                    readOnly: true,
                    serializedName: "version",
                    type: {
                        name: "String"
                    }
                },
                sshPublicKey: {
                    serializedName: "sshPublicKey",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IpAddress = {
        serializedName: "IpAddress",
        type: {
            name: "Composite",
            className: "IpAddress",
            modelProperties: {
                ipAddress: {
                    serializedName: "ipAddress",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var NetworkProfile = {
        serializedName: "NetworkProfile",
        type: {
            name: "Composite",
            className: "NetworkProfile",
            modelProperties: {
                networkInterfaces: {
                    serializedName: "networkInterfaces",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "IpAddress"
                            }
                        }
                    }
                },
                circuitId: {
                    readOnly: true,
                    serializedName: "circuitId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var HanaInstance = {
        serializedName: "HanaInstance",
        type: {
            name: "Composite",
            className: "HanaInstance",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { hardwareProfile: {
                    serializedName: "properties.hardwareProfile",
                    type: {
                        name: "Composite",
                        className: "HardwareProfile"
                    }
                }, storageProfile: {
                    serializedName: "properties.storageProfile",
                    type: {
                        name: "Composite",
                        className: "StorageProfile"
                    }
                }, osProfile: {
                    serializedName: "properties.osProfile",
                    type: {
                        name: "Composite",
                        className: "OSProfile"
                    }
                }, networkProfile: {
                    serializedName: "properties.networkProfile",
                    type: {
                        name: "Composite",
                        className: "NetworkProfile"
                    }
                }, hanaInstanceId: {
                    readOnly: true,
                    serializedName: "properties.hanaInstanceId",
                    type: {
                        name: "String"
                    }
                }, powerState: {
                    readOnly: true,
                    serializedName: "properties.powerState",
                    type: {
                        name: "String"
                    }
                }, proximityPlacementGroup: {
                    readOnly: true,
                    serializedName: "properties.proximityPlacementGroup",
                    type: {
                        name: "String"
                    }
                }, hwRevision: {
                    readOnly: true,
                    serializedName: "properties.hwRevision",
                    type: {
                        name: "String"
                    }
                }, partnerNodeId: {
                    serializedName: "properties.partnerNodeId",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var Display = {
        serializedName: "Display",
        type: {
            name: "Composite",
            className: "Display",
            modelProperties: {
                provider: {
                    readOnly: true,
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    readOnly: true,
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    readOnly: true,
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    readOnly: true,
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                origin: {
                    readOnly: true,
                    serializedName: "origin",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Operation = {
        serializedName: "Operation",
        type: {
            name: "Composite",
            className: "Operation",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "Display"
                    }
                }
            }
        }
    };
    var ErrorResponse = {
        serializedName: "ErrorResponse",
        type: {
            name: "Composite",
            className: "ErrorResponse",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Tags = {
        serializedName: "Tags",
        type: {
            name: "Composite",
            className: "Tags",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var MonitoringDetails = {
        serializedName: "MonitoringDetails",
        type: {
            name: "Composite",
            className: "MonitoringDetails",
            modelProperties: {
                hanaSubnet: {
                    serializedName: "hanaSubnet",
                    type: {
                        name: "String"
                    }
                },
                hanaHostname: {
                    serializedName: "hanaHostname",
                    type: {
                        name: "String"
                    }
                },
                hanaDbName: {
                    serializedName: "hanaDbName",
                    type: {
                        name: "String"
                    }
                },
                hanaDbSqlPort: {
                    serializedName: "hanaDbSqlPort",
                    type: {
                        name: "Number"
                    }
                },
                hanaDbUsername: {
                    serializedName: "hanaDbUsername",
                    type: {
                        name: "String"
                    }
                },
                hanaDbPassword: {
                    serializedName: "hanaDbPassword",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SapMonitor = {
        serializedName: "SapMonitor",
        type: {
            name: "Composite",
            className: "SapMonitor",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { hanaSubnet: {
                    serializedName: "properties.hanaSubnet",
                    type: {
                        name: "String"
                    }
                }, hanaHostname: {
                    serializedName: "properties.hanaHostname",
                    type: {
                        name: "String"
                    }
                }, hanaDbName: {
                    serializedName: "properties.hanaDbName",
                    type: {
                        name: "String"
                    }
                }, hanaDbSqlPort: {
                    serializedName: "properties.hanaDbSqlPort",
                    type: {
                        name: "Number"
                    }
                }, hanaDbUsername: {
                    serializedName: "properties.hanaDbUsername",
                    type: {
                        name: "String"
                    }
                }, hanaDbPassword: {
                    serializedName: "properties.hanaDbPassword",
                    type: {
                        name: "String"
                    }
                }, hanaDbPasswordKeyVaultUrl: {
                    serializedName: "properties.hanaDbPasswordKeyVaultUrl",
                    type: {
                        name: "String"
                    }
                }, hanaDbCredentialsMsiId: {
                    serializedName: "properties.hanaDbCredentialsMsiId",
                    type: {
                        name: "String"
                    }
                }, keyVaultId: {
                    serializedName: "properties.keyVaultId",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, managedResourceGroupName: {
                    readOnly: true,
                    serializedName: "properties.managedResourceGroupName",
                    type: {
                        name: "String"
                    }
                }, logAnalyticsWorkspaceArmId: {
                    serializedName: "properties.logAnalyticsWorkspaceArmId",
                    type: {
                        name: "String"
                    }
                }, enableCustomerAnalytics: {
                    serializedName: "properties.enableCustomerAnalytics",
                    type: {
                        name: "Boolean"
                    }
                }, logAnalyticsWorkspaceId: {
                    serializedName: "properties.logAnalyticsWorkspaceId",
                    type: {
                        name: "String"
                    }
                }, logAnalyticsWorkspaceSharedKey: {
                    serializedName: "properties.logAnalyticsWorkspaceSharedKey",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var OperationList = {
        serializedName: "OperationList",
        type: {
            name: "Composite",
            className: "OperationList",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Operation"
                            }
                        }
                    }
                }
            }
        }
    };
    var HanaInstancesListResult = {
        serializedName: "HanaInstancesListResult",
        type: {
            name: "Composite",
            className: "HanaInstancesListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "HanaInstance"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SapMonitorListResult = {
        serializedName: "SapMonitorListResult",
        type: {
            name: "Composite",
            className: "SapMonitorListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SapMonitor"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        __proto__: null,
        CloudError: CloudError,
        BaseResource: BaseResource,
        Resource: Resource,
        HardwareProfile: HardwareProfile,
        Disk: Disk,
        StorageProfile: StorageProfile,
        OSProfile: OSProfile,
        IpAddress: IpAddress,
        NetworkProfile: NetworkProfile,
        HanaInstance: HanaInstance,
        Display: Display,
        Operation: Operation,
        ErrorResponse: ErrorResponse,
        Tags: Tags,
        MonitoringDetails: MonitoringDetails,
        SapMonitor: SapMonitor,
        OperationList: OperationList,
        HanaInstancesListResult: HanaInstancesListResult,
        SapMonitorListResult: SapMonitorListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        __proto__: null,
        Display: Display,
        ErrorResponse: ErrorResponse,
        Operation: Operation,
        OperationList: OperationList
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var hanaInstanceName = {
        parameterPath: "hanaInstanceName",
        mapper: {
            required: true,
            serializedName: "hanaInstanceName",
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            type: {
                name: "String"
            }
        }
    };
    var sapMonitorName = {
        parameterPath: "sapMonitorName",
        mapper: {
            required: true,
            serializedName: "sapMonitorName",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {HanaManagementClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var listOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.HanaOnAzure/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationList
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        BaseResource: BaseResource,
        Disk: Disk,
        ErrorResponse: ErrorResponse,
        HanaInstance: HanaInstance,
        HanaInstancesListResult: HanaInstancesListResult,
        HardwareProfile: HardwareProfile,
        IpAddress: IpAddress,
        NetworkProfile: NetworkProfile,
        OSProfile: OSProfile,
        Resource: Resource,
        SapMonitor: SapMonitor,
        StorageProfile: StorageProfile,
        Tags: Tags
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a HanaInstances. */
    var HanaInstances = /** @class */ (function () {
        /**
         * Create a HanaInstances.
         * @param {HanaManagementClientContext} client Reference to the service client.
         */
        function HanaInstances(client) {
            this.client = client;
        }
        HanaInstances.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$1, callback);
        };
        HanaInstances.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        HanaInstances.prototype.get = function (resourceGroupName, hanaInstanceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                hanaInstanceName: hanaInstanceName,
                options: options
            }, getOperationSpec, callback);
        };
        /**
         * Creates a SAP HANA instance for the specified subscription, resource group, and instance name.
         * @summary Creates a SAP HANA instance.
         * @param resourceGroupName Name of the resource group.
         * @param hanaInstanceName Name of the SAP HANA on Azure instance.
         * @param hanaInstanceParameter Request body representing a HanaInstance
         * @param [options] The optional parameters
         * @returns Promise<Models.HanaInstancesCreateResponse>
         */
        HanaInstances.prototype.create = function (resourceGroupName, hanaInstanceName, hanaInstanceParameter, options) {
            return this.beginCreate(resourceGroupName, hanaInstanceName, hanaInstanceParameter, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes a SAP HANA instance with the specified subscription, resource group, and instance name.
         * @summary Deletes a SAP HANA instance.
         * @param resourceGroupName Name of the resource group.
         * @param hanaInstanceName Name of the SAP HANA on Azure instance.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        HanaInstances.prototype.deleteMethod = function (resourceGroupName, hanaInstanceName, options) {
            return this.beginDeleteMethod(resourceGroupName, hanaInstanceName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        HanaInstances.prototype.update = function (resourceGroupName, hanaInstanceName, tagsParameter, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                hanaInstanceName: hanaInstanceName,
                tagsParameter: tagsParameter,
                options: options
            }, updateOperationSpec, callback);
        };
        /**
         * The operation to restart a SAP HANA instance.
         * @param resourceGroupName Name of the resource group.
         * @param hanaInstanceName Name of the SAP HANA on Azure instance.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        HanaInstances.prototype.restart = function (resourceGroupName, hanaInstanceName, options) {
            return this.beginRestart(resourceGroupName, hanaInstanceName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to start a SAP HANA instance.
         * @param resourceGroupName Name of the resource group.
         * @param hanaInstanceName Name of the SAP HANA on Azure instance.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        HanaInstances.prototype.start = function (resourceGroupName, hanaInstanceName, options) {
            return this.beginStart(resourceGroupName, hanaInstanceName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to shutdown a SAP HANA instance.
         * @param resourceGroupName Name of the resource group.
         * @param hanaInstanceName Name of the SAP HANA on Azure instance.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        HanaInstances.prototype.shutdown = function (resourceGroupName, hanaInstanceName, options) {
            return this.beginShutdown(resourceGroupName, hanaInstanceName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates a SAP HANA instance for the specified subscription, resource group, and instance name.
         * @summary Creates a SAP HANA instance.
         * @param resourceGroupName Name of the resource group.
         * @param hanaInstanceName Name of the SAP HANA on Azure instance.
         * @param hanaInstanceParameter Request body representing a HanaInstance
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        HanaInstances.prototype.beginCreate = function (resourceGroupName, hanaInstanceName, hanaInstanceParameter, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                hanaInstanceName: hanaInstanceName,
                hanaInstanceParameter: hanaInstanceParameter,
                options: options
            }, beginCreateOperationSpec, options);
        };
        /**
         * Deletes a SAP HANA instance with the specified subscription, resource group, and instance name.
         * @summary Deletes a SAP HANA instance.
         * @param resourceGroupName Name of the resource group.
         * @param hanaInstanceName Name of the SAP HANA on Azure instance.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        HanaInstances.prototype.beginDeleteMethod = function (resourceGroupName, hanaInstanceName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                hanaInstanceName: hanaInstanceName,
                options: options
            }, beginDeleteMethodOperationSpec, options);
        };
        /**
         * The operation to restart a SAP HANA instance.
         * @param resourceGroupName Name of the resource group.
         * @param hanaInstanceName Name of the SAP HANA on Azure instance.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        HanaInstances.prototype.beginRestart = function (resourceGroupName, hanaInstanceName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                hanaInstanceName: hanaInstanceName,
                options: options
            }, beginRestartOperationSpec, options);
        };
        /**
         * The operation to start a SAP HANA instance.
         * @param resourceGroupName Name of the resource group.
         * @param hanaInstanceName Name of the SAP HANA on Azure instance.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        HanaInstances.prototype.beginStart = function (resourceGroupName, hanaInstanceName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                hanaInstanceName: hanaInstanceName,
                options: options
            }, beginStartOperationSpec, options);
        };
        /**
         * The operation to shutdown a SAP HANA instance.
         * @param resourceGroupName Name of the resource group.
         * @param hanaInstanceName Name of the SAP HANA on Azure instance.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        HanaInstances.prototype.beginShutdown = function (resourceGroupName, hanaInstanceName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                hanaInstanceName: hanaInstanceName,
                options: options
            }, beginShutdownOperationSpec, options);
        };
        HanaInstances.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec, callback);
        };
        HanaInstances.prototype.listByResourceGroupNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByResourceGroupNextOperationSpec, callback);
        };
        return HanaInstances;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.HanaOnAzure/hanaInstances",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: HanaInstancesListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/hanaInstances",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: HanaInstancesListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/hanaInstances/{hanaInstanceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            hanaInstanceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: HanaInstance
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var updateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/hanaInstances/{hanaInstanceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            hanaInstanceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "tagsParameter",
            mapper: __assign(__assign({}, Tags), { required: true })
        },
        responses: {
            200: {
                bodyMapper: HanaInstance
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var beginCreateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/hanaInstances/{hanaInstanceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            hanaInstanceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "hanaInstanceParameter",
            mapper: __assign(__assign({}, HanaInstance), { required: true })
        },
        responses: {
            200: {
                bodyMapper: HanaInstance
            },
            201: {
                bodyMapper: HanaInstance
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var beginDeleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/hanaInstances/{hanaInstanceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            hanaInstanceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var beginRestartOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/hanaInstances/{hanaInstanceName}/restart",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            hanaInstanceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var beginStartOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/hanaInstances/{hanaInstanceName}/start",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            hanaInstanceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var beginShutdownOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/hanaInstances/{hanaInstanceName}/shutdown",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            hanaInstanceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: HanaInstancesListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listByResourceGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: HanaInstancesListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        BaseResource: BaseResource,
        Disk: Disk,
        ErrorResponse: ErrorResponse,
        HanaInstance: HanaInstance,
        HardwareProfile: HardwareProfile,
        IpAddress: IpAddress,
        NetworkProfile: NetworkProfile,
        OSProfile: OSProfile,
        Resource: Resource,
        SapMonitor: SapMonitor,
        SapMonitorListResult: SapMonitorListResult,
        StorageProfile: StorageProfile,
        Tags: Tags
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a SapMonitors. */
    var SapMonitors = /** @class */ (function () {
        /**
         * Create a SapMonitors.
         * @param {HanaManagementClientContext} client Reference to the service client.
         */
        function SapMonitors(client) {
            this.client = client;
        }
        SapMonitors.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$2, callback);
        };
        SapMonitors.prototype.get = function (resourceGroupName, sapMonitorName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                sapMonitorName: sapMonitorName,
                options: options
            }, getOperationSpec$1, callback);
        };
        /**
         * Creates a SAP monitor for the specified subscription, resource group, and resource name.
         * @summary Creates a SAP monitor.
         * @param resourceGroupName Name of the resource group.
         * @param sapMonitorName Name of the SAP monitor resource.
         * @param sapMonitorParameter Request body representing a SAP Monitor
         * @param [options] The optional parameters
         * @returns Promise<Models.SapMonitorsCreateResponse>
         */
        SapMonitors.prototype.create = function (resourceGroupName, sapMonitorName, sapMonitorParameter, options) {
            return this.beginCreate(resourceGroupName, sapMonitorName, sapMonitorParameter, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes a SAP monitor with the specified subscription, resource group, and monitor name.
         * @summary Deletes a SAP monitor.
         * @param resourceGroupName Name of the resource group.
         * @param sapMonitorName Name of the SAP monitor resource.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        SapMonitors.prototype.deleteMethod = function (resourceGroupName, sapMonitorName, options) {
            return this.beginDeleteMethod(resourceGroupName, sapMonitorName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        SapMonitors.prototype.update = function (resourceGroupName, sapMonitorName, tagsParameter, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                sapMonitorName: sapMonitorName,
                tagsParameter: tagsParameter,
                options: options
            }, updateOperationSpec$1, callback);
        };
        /**
         * Creates a SAP monitor for the specified subscription, resource group, and resource name.
         * @summary Creates a SAP monitor.
         * @param resourceGroupName Name of the resource group.
         * @param sapMonitorName Name of the SAP monitor resource.
         * @param sapMonitorParameter Request body representing a SAP Monitor
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        SapMonitors.prototype.beginCreate = function (resourceGroupName, sapMonitorName, sapMonitorParameter, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                sapMonitorName: sapMonitorName,
                sapMonitorParameter: sapMonitorParameter,
                options: options
            }, beginCreateOperationSpec$1, options);
        };
        /**
         * Deletes a SAP monitor with the specified subscription, resource group, and monitor name.
         * @summary Deletes a SAP monitor.
         * @param resourceGroupName Name of the resource group.
         * @param sapMonitorName Name of the SAP monitor resource.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        SapMonitors.prototype.beginDeleteMethod = function (resourceGroupName, sapMonitorName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                sapMonitorName: sapMonitorName,
                options: options
            }, beginDeleteMethodOperationSpec$1, options);
        };
        SapMonitors.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$1, callback);
        };
        return SapMonitors;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var listOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.HanaOnAzure/sapMonitors",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SapMonitorListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/sapMonitors/{sapMonitorName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            sapMonitorName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SapMonitor
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var updateOperationSpec$1 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/sapMonitors/{sapMonitorName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            sapMonitorName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "tagsParameter",
            mapper: __assign(__assign({}, Tags), { required: true })
        },
        responses: {
            200: {
                bodyMapper: SapMonitor
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var beginCreateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/sapMonitors/{sapMonitorName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            sapMonitorName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "sapMonitorParameter",
            mapper: __assign(__assign({}, SapMonitor), { required: true })
        },
        responses: {
            200: {
                bodyMapper: SapMonitor
            },
            201: {
                bodyMapper: SapMonitor
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var beginDeleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/sapMonitors/{sapMonitorName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            sapMonitorName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var listNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SapMonitorListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-hanaonazure";
    var packageVersion = "3.1.1";
    var HanaManagementClientContext = /** @class */ (function (_super) {
        __extends(HanaManagementClientContext, _super);
        /**
         * Initializes a new instance of the HanaManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure. Credentials
         * implementing the TokenCredential interface from the @azure/identity package are recommended. For
         * more information about these credentials, see
         * {@link https://www.npmjs.com/package/@azure/identity}. Credentials implementing the
         * ServiceClientCredentials interface from the older packages @azure/ms-rest-nodeauth and
         * @azure/ms-rest-browserauth are also supported.
         * @param subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The
         * subscription ID forms part of the URI for every service call.
         * @param [options] The parameter options
         */
        function HanaManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            if (!options.userAgent) {
                var defaultUserAgent = msRestAzure.getDefaultUserAgentValue();
                options.userAgent = packageName + "/" + packageVersion + " " + defaultUserAgent;
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2017-11-03-preview';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return HanaManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var HanaManagementClient = /** @class */ (function (_super) {
        __extends(HanaManagementClient, _super);
        /**
         * Initializes a new instance of the HanaManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure. Credentials
         * implementing the TokenCredential interface from the @azure/identity package are recommended. For
         * more information about these credentials, see
         * {@link https://www.npmjs.com/package/@azure/identity}. Credentials implementing the
         * ServiceClientCredentials interface from the older packages @azure/ms-rest-nodeauth and
         * @azure/ms-rest-browserauth are also supported.
         * @param subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The
         * subscription ID forms part of the URI for every service call.
         * @param [options] The parameter options
         */
        function HanaManagementClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.operations = new Operations(_this);
            _this.hanaInstances = new HanaInstances(_this);
            _this.sapMonitors = new SapMonitors(_this);
            return _this;
        }
        return HanaManagementClient;
    }(HanaManagementClientContext));

    exports.HanaInstances = HanaInstances;
    exports.HanaManagementClient = HanaManagementClient;
    exports.HanaManagementClientContext = HanaManagementClientContext;
    exports.HanaManagementMappers = mappers;
    exports.HanaManagementModels = index;
    exports.Operations = Operations;
    exports.SapMonitors = SapMonitors;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-hanaonazure.js.map
