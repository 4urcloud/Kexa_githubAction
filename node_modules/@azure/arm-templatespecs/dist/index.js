'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var coreClient = require('@azure/core-client');
var coreRestPipeline = require('@azure/core-rest-pipeline');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var coreClient__namespace = /*#__PURE__*/_interopNamespace(coreClient);
var coreRestPipeline__namespace = /*#__PURE__*/_interopNamespace(coreRestPipeline);

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const pageMap = new WeakMap();
/**
 * Given a result page from a pageable operation, returns a
 * continuation token that can be used to begin paging from
 * that point later.
 * @param page A result object from calling .byPage() on a paged operation.
 * @returns The continuation token that can be passed into byPage().
 */
function getContinuationToken(page) {
    var _a;
    if (typeof page !== "object" || page === null) {
        return undefined;
    }
    return (_a = pageMap.get(page)) === null || _a === void 0 ? void 0 : _a.continuationToken;
}
function setContinuationToken(page, continuationToken) {
    var _a;
    if (typeof page !== "object" || page === null || !continuationToken) {
        return;
    }
    const pageInfo = (_a = pageMap.get(page)) !== null && _a !== void 0 ? _a : {};
    pageInfo.continuationToken = continuationToken;
    pageMap.set(page, pageInfo);
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link CreatedByType} that the service accepts. */
exports.KnownCreatedByType = void 0;
(function (KnownCreatedByType) {
    /** User */
    KnownCreatedByType["User"] = "User";
    /** Application */
    KnownCreatedByType["Application"] = "Application";
    /** ManagedIdentity */
    KnownCreatedByType["ManagedIdentity"] = "ManagedIdentity";
    /** Key */
    KnownCreatedByType["Key"] = "Key";
})(exports.KnownCreatedByType || (exports.KnownCreatedByType = {}));
/** Known values of {@link TemplateSpecExpandKind} that the service accepts. */
exports.KnownTemplateSpecExpandKind = void 0;
(function (KnownTemplateSpecExpandKind) {
    /** Includes version information with the Template Spec. */
    KnownTemplateSpecExpandKind["Versions"] = "versions";
})(exports.KnownTemplateSpecExpandKind || (exports.KnownTemplateSpecExpandKind = {}));

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const TemplateSpecVersionInfo = {
    type: {
        name: "Composite",
        className: "TemplateSpecVersionInfo",
        modelProperties: {
            description: {
                serializedName: "description",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            timeCreated: {
                serializedName: "timeCreated",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            timeModified: {
                serializedName: "timeModified",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const AzureResourceBase = {
    type: {
        name: "Composite",
        className: "AzureResourceBase",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }
        }
    }
};
const SystemData = {
    type: {
        name: "Composite",
        className: "SystemData",
        modelProperties: {
            createdBy: {
                serializedName: "createdBy",
                type: {
                    name: "String"
                }
            },
            createdByType: {
                serializedName: "createdByType",
                type: {
                    name: "String"
                }
            },
            createdAt: {
                serializedName: "createdAt",
                type: {
                    name: "DateTime"
                }
            },
            lastModifiedBy: {
                serializedName: "lastModifiedBy",
                type: {
                    name: "String"
                }
            },
            lastModifiedByType: {
                serializedName: "lastModifiedByType",
                type: {
                    name: "String"
                }
            },
            lastModifiedAt: {
                serializedName: "lastModifiedAt",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const TemplateSpecsError = {
    type: {
        name: "Composite",
        className: "TemplateSpecsError",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorResponse"
                }
            }
        }
    }
};
const ErrorResponse = {
    type: {
        name: "Composite",
        className: "ErrorResponse",
        modelProperties: {
            code: {
                serializedName: "code",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorResponse"
                        }
                    }
                }
            },
            additionalInfo: {
                serializedName: "additionalInfo",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorAdditionalInfo"
                        }
                    }
                }
            }
        }
    }
};
const ErrorAdditionalInfo = {
    type: {
        name: "Composite",
        className: "ErrorAdditionalInfo",
        modelProperties: {
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            info: {
                serializedName: "info",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
const TemplateSpecsListResult = {
    type: {
        name: "Composite",
        className: "TemplateSpecsListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TemplateSpec"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const LinkedTemplateArtifact = {
    type: {
        name: "Composite",
        className: "LinkedTemplateArtifact",
        modelProperties: {
            path: {
                serializedName: "path",
                required: true,
                type: {
                    name: "String"
                }
            },
            template: {
                serializedName: "template",
                required: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
const TemplateSpecVersionsListResult = {
    type: {
        name: "Composite",
        className: "TemplateSpecVersionsListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TemplateSpecVersion"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TemplateSpec = {
    type: {
        name: "Composite",
        className: "TemplateSpec",
        modelProperties: Object.assign(Object.assign({}, AzureResourceBase.type.modelProperties), { location: {
                serializedName: "location",
                required: true,
                type: {
                    name: "String"
                }
            }, tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }, description: {
                constraints: {
                    MaxLength: 4096
                },
                serializedName: "properties.description",
                type: {
                    name: "String"
                }
            }, displayName: {
                constraints: {
                    MaxLength: 64
                },
                serializedName: "properties.displayName",
                type: {
                    name: "String"
                }
            }, metadata: {
                serializedName: "properties.metadata",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }, versions: {
                serializedName: "properties.versions",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Composite", className: "TemplateSpecVersionInfo" }
                    }
                }
            } })
    }
};
const TemplateSpecUpdateModel = {
    type: {
        name: "Composite",
        className: "TemplateSpecUpdateModel",
        modelProperties: Object.assign(Object.assign({}, AzureResourceBase.type.modelProperties), { tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            } })
    }
};
const TemplateSpecVersion = {
    type: {
        name: "Composite",
        className: "TemplateSpecVersion",
        modelProperties: Object.assign(Object.assign({}, AzureResourceBase.type.modelProperties), { location: {
                serializedName: "location",
                required: true,
                type: {
                    name: "String"
                }
            }, tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }, description: {
                constraints: {
                    MaxLength: 4096
                },
                serializedName: "properties.description",
                type: {
                    name: "String"
                }
            }, linkedTemplates: {
                serializedName: "properties.linkedTemplates",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LinkedTemplateArtifact"
                        }
                    }
                }
            }, metadata: {
                serializedName: "properties.metadata",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }, mainTemplate: {
                serializedName: "properties.mainTemplate",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }, uiFormDefinition: {
                serializedName: "properties.uiFormDefinition",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            } })
    }
};
const TemplateSpecVersionUpdateModel = {
    type: {
        name: "Composite",
        className: "TemplateSpecVersionUpdateModel",
        modelProperties: Object.assign(Object.assign({}, AzureResourceBase.type.modelProperties), { tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            } })
    }
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    TemplateSpecVersionInfo: TemplateSpecVersionInfo,
    AzureResourceBase: AzureResourceBase,
    SystemData: SystemData,
    TemplateSpecsError: TemplateSpecsError,
    ErrorResponse: ErrorResponse,
    ErrorAdditionalInfo: ErrorAdditionalInfo,
    TemplateSpecsListResult: TemplateSpecsListResult,
    LinkedTemplateArtifact: LinkedTemplateArtifact,
    TemplateSpecVersionsListResult: TemplateSpecVersionsListResult,
    TemplateSpec: TemplateSpec,
    TemplateSpecUpdateModel: TemplateSpecUpdateModel,
    TemplateSpecVersion: TemplateSpecVersion,
    TemplateSpecVersionUpdateModel: TemplateSpecVersionUpdateModel
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const templateSpec = {
    parameterPath: "templateSpec",
    mapper: TemplateSpec
};
const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[-\\w\\._\\(\\)]+$"),
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const templateSpecName = {
    parameterPath: "templateSpecName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[-\\w\\._\\(\\)]+$"),
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "templateSpecName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2021-05-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const templateSpec1 = {
    parameterPath: ["options", "templateSpec"],
    mapper: TemplateSpecUpdateModel
};
const expand = {
    parameterPath: ["options", "expand"],
    mapper: {
        serializedName: "$expand",
        type: {
            name: "String"
        }
    }
};
const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const templateSpecVersionModel = {
    parameterPath: "templateSpecVersionModel",
    mapper: TemplateSpecVersion
};
const templateSpecVersion = {
    parameterPath: "templateSpecVersion",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[-\\w\\._\\(\\)]+$"),
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "templateSpecVersion",
        required: true,
        type: {
            name: "String"
        }
    }
};
const templateSpecVersionUpdateModel = {
    parameterPath: ["options", "templateSpecVersionUpdateModel"],
    mapper: TemplateSpecVersionUpdateModel
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing TemplateSpecs operations. */
class TemplateSpecsImpl {
    /**
     * Initialize a new instance of the class TemplateSpecs class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all the Template Specs within the specified subscriptions.
     * @param options The options parameters.
     */
    listBySubscription(options) {
        const iter = this.listBySubscriptionPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listBySubscriptionPagingPage(options, settings);
            }
        };
    }
    listBySubscriptionPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listBySubscription(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listBySubscriptionNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listBySubscriptionPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listBySubscriptionPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists all the Template Specs within the specified resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName, options) {
        const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByResourceGroupPagingPage(resourceGroupName, options, settings);
            }
        };
    }
    listByResourceGroupPagingPage(resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByResourceGroup(resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByResourceGroupNext(resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByResourceGroupPagingAll(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByResourceGroupPagingPage(resourceGroupName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Creates or updates a Template Spec.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param templateSpecName Name of the Template Spec.
     * @param templateSpec Template Spec supplied to the operation.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, templateSpecName, templateSpec, options) {
        return this.client.sendOperationRequest({ resourceGroupName, templateSpecName, templateSpec, options }, createOrUpdateOperationSpec$1);
    }
    /**
     * Updates Template Spec tags with specified values.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param templateSpecName Name of the Template Spec.
     * @param options The options parameters.
     */
    update(resourceGroupName, templateSpecName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, templateSpecName, options }, updateOperationSpec$1);
    }
    /**
     * Gets a Template Spec with a given name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param templateSpecName Name of the Template Spec.
     * @param options The options parameters.
     */
    get(resourceGroupName, templateSpecName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, templateSpecName, options }, getOperationSpec$1);
    }
    /**
     * Deletes a Template Spec by name. When operation completes, status code 200 returned without content.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param templateSpecName Name of the Template Spec.
     * @param options The options parameters.
     */
    delete(resourceGroupName, templateSpecName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, templateSpecName, options }, deleteOperationSpec$1);
    }
    /**
     * Lists all the Template Specs within the specified subscriptions.
     * @param options The options parameters.
     */
    _listBySubscription(options) {
        return this.client.sendOperationRequest({ options }, listBySubscriptionOperationSpec);
    }
    /**
     * Lists all the Template Specs within the specified resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    _listByResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listByResourceGroupOperationSpec);
    }
    /**
     * ListBySubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
     * @param options The options parameters.
     */
    _listBySubscriptionNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listBySubscriptionNextOperationSpec);
    }
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    _listByResourceGroupNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, listByResourceGroupNextOperationSpec);
    }
}
// Operation Specifications
const serializer$1 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const createOrUpdateOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Resources/templateSpecs/{templateSpecName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: TemplateSpec
        },
        201: {
            bodyMapper: TemplateSpec
        },
        default: {
            bodyMapper: TemplateSpecsError
        }
    },
    requestBody: templateSpec,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        templateSpecName
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$1
};
const updateOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Resources/templateSpecs/{templateSpecName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: TemplateSpec
        },
        default: {
            bodyMapper: TemplateSpecsError
        }
    },
    requestBody: templateSpec1,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        templateSpecName
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$1
};
const getOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Resources/templateSpecs/{templateSpecName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: TemplateSpec
        },
        default: {
            bodyMapper: TemplateSpecsError
        }
    },
    queryParameters: [apiVersion, expand],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        templateSpecName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const deleteOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Resources/templateSpecs/{templateSpecName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: TemplateSpecsError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        templateSpecName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listBySubscriptionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/templateSpecs/",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: TemplateSpecsListResult
        },
        default: {
            bodyMapper: TemplateSpecsError
        }
    },
    queryParameters: [apiVersion, expand],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$1
};
const listByResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Resources/templateSpecs/",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: TemplateSpecsListResult
        },
        default: {
            bodyMapper: TemplateSpecsError
        }
    },
    queryParameters: [apiVersion, expand],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listBySubscriptionNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: TemplateSpecsListResult
        },
        default: {
            bodyMapper: TemplateSpecsError
        }
    },
    queryParameters: [apiVersion, expand],
    urlParameters: [
        $host,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listByResourceGroupNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: TemplateSpecsListResult
        },
        default: {
            bodyMapper: TemplateSpecsError
        }
    },
    queryParameters: [apiVersion, expand],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$1
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing TemplateSpecVersions operations. */
class TemplateSpecVersionsImpl {
    /**
     * Initialize a new instance of the class TemplateSpecVersions class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all the Template Spec versions in the specified Template Spec.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param templateSpecName Name of the Template Spec.
     * @param options The options parameters.
     */
    list(resourceGroupName, templateSpecName, options) {
        const iter = this.listPagingAll(resourceGroupName, templateSpecName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, templateSpecName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, templateSpecName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, templateSpecName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, templateSpecName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, templateSpecName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, templateSpecName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Creates or updates a Template Spec version.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param templateSpecName Name of the Template Spec.
     * @param templateSpecVersion The version of the Template Spec.
     * @param templateSpecVersionModel Template Spec Version supplied to the operation.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, templateSpecName, templateSpecVersion, templateSpecVersionModel, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            templateSpecName,
            templateSpecVersion,
            templateSpecVersionModel,
            options
        }, createOrUpdateOperationSpec);
    }
    /**
     * Updates Template Spec Version tags with specified values.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param templateSpecName Name of the Template Spec.
     * @param templateSpecVersion The version of the Template Spec.
     * @param options The options parameters.
     */
    update(resourceGroupName, templateSpecName, templateSpecVersion, options) {
        return this.client.sendOperationRequest({ resourceGroupName, templateSpecName, templateSpecVersion, options }, updateOperationSpec);
    }
    /**
     * Gets a Template Spec version from a specific Template Spec.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param templateSpecName Name of the Template Spec.
     * @param templateSpecVersion The version of the Template Spec.
     * @param options The options parameters.
     */
    get(resourceGroupName, templateSpecName, templateSpecVersion, options) {
        return this.client.sendOperationRequest({ resourceGroupName, templateSpecName, templateSpecVersion, options }, getOperationSpec);
    }
    /**
     * Deletes a specific version from a Template Spec. When operation completes, status code 200 returned
     * without content.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param templateSpecName Name of the Template Spec.
     * @param templateSpecVersion The version of the Template Spec.
     * @param options The options parameters.
     */
    delete(resourceGroupName, templateSpecName, templateSpecVersion, options) {
        return this.client.sendOperationRequest({ resourceGroupName, templateSpecName, templateSpecVersion, options }, deleteOperationSpec);
    }
    /**
     * Lists all the Template Spec versions in the specified Template Spec.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param templateSpecName Name of the Template Spec.
     * @param options The options parameters.
     */
    _list(resourceGroupName, templateSpecName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, templateSpecName, options }, listOperationSpec);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param templateSpecName Name of the Template Spec.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, templateSpecName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, templateSpecName, nextLink, options }, listNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Resources/templateSpecs/{templateSpecName}/versions/{templateSpecVersion}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: TemplateSpecVersion
        },
        201: {
            bodyMapper: TemplateSpecVersion
        },
        default: {
            bodyMapper: TemplateSpecsError
        }
    },
    requestBody: templateSpecVersionModel,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        templateSpecName,
        templateSpecVersion
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Resources/templateSpecs/{templateSpecName}/versions/{templateSpecVersion}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: TemplateSpecVersion
        },
        default: {
            bodyMapper: TemplateSpecsError
        }
    },
    requestBody: templateSpecVersionUpdateModel,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        templateSpecName,
        templateSpecVersion
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Resources/templateSpecs/{templateSpecName}/versions/{templateSpecVersion}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: TemplateSpecVersion
        },
        default: {
            bodyMapper: TemplateSpecsError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        templateSpecName,
        templateSpecVersion
    ],
    headerParameters: [accept],
    serializer
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Resources/templateSpecs/{templateSpecName}/versions/{templateSpecVersion}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: TemplateSpecsError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        templateSpecName,
        templateSpecVersion
    ],
    headerParameters: [accept],
    serializer
};
const listOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Resources/templateSpecs/{templateSpecName}/versions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: TemplateSpecVersionsListResult
        },
        default: {
            bodyMapper: TemplateSpecsError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        templateSpecName
    ],
    headerParameters: [accept],
    serializer
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: TemplateSpecVersionsListResult
        },
        default: {
            bodyMapper: TemplateSpecsError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        templateSpecName,
        nextLink
    ],
    headerParameters: [accept],
    serializer
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class TemplateSpecsClient extends coreClient__namespace.ServiceClient {
    /**
     * Initializes a new instance of the TemplateSpecsClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId Subscription Id which forms part of the URI for every service call.
     * @param options The parameter options
     */
    constructor(credentials, subscriptionId, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        if (subscriptionId === undefined) {
            throw new Error("'subscriptionId' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-templatespecs/2.1.0`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName
            });
            this.pipeline.addPolicy(coreRestPipeline__namespace.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient__namespace.authorizeRequestOnClaimChallenge
                }
            }));
        }
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.apiVersion = options.apiVersion || "2021-05-01";
        this.templateSpecs = new TemplateSpecsImpl(this);
        this.templateSpecVersions = new TemplateSpecVersionsImpl(this);
        this.addCustomApiVersionPolicy(options.apiVersion);
    }
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    addCustomApiVersionPolicy(apiVersion) {
        if (!apiVersion) {
            return;
        }
        const apiVersionPolicy = {
            name: "CustomApiVersionPolicy",
            sendRequest(request, next) {
                return tslib.__awaiter(this, void 0, void 0, function* () {
                    const param = request.url.split("?");
                    if (param.length > 1) {
                        const newParams = param[1].split("&").map((item) => {
                            if (item.indexOf("api-version") > -1) {
                                return "api-version=" + apiVersion;
                            }
                            else {
                                return item;
                            }
                        });
                        request.url = param[0] + "?" + newParams.join("&");
                    }
                    return next(request);
                });
            }
        };
        this.pipeline.addPolicy(apiVersionPolicy);
    }
}

exports.TemplateSpecsClient = TemplateSpecsClient;
exports.getContinuationToken = getContinuationToken;
//# sourceMappingURL=index.js.map
