'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var coreClient = require('@azure/core-client');
var coreRestPipeline = require('@azure/core-rest-pipeline');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var coreClient__namespace = /*#__PURE__*/_interopNamespace(coreClient);
var coreRestPipeline__namespace = /*#__PURE__*/_interopNamespace(coreRestPipeline);

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const pageMap = new WeakMap();
/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
function getContinuationToken(page) {
    var _a;
    if (typeof page !== "object" || page === null) {
        return undefined;
    }
    return (_a = pageMap.get(page)) === null || _a === void 0 ? void 0 : _a.continuationToken;
}
function setContinuationToken(page, continuationToken) {
    var _a;
    if (typeof page !== "object" || page === null || !continuationToken) {
        return;
    }
    const pageInfo = (_a = pageMap.get(page)) !== null && _a !== void 0 ? _a : {};
    pageInfo.continuationToken = continuationToken;
    pageMap.set(page, pageInfo);
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link Origin} that the service accepts. */
exports.KnownOrigin = void 0;
(function (KnownOrigin) {
    /** User */
    KnownOrigin["User"] = "user";
    /** System */
    KnownOrigin["System"] = "system";
    /** UserSystem */
    KnownOrigin["UserSystem"] = "user,system";
})(exports.KnownOrigin || (exports.KnownOrigin = {}));
/** Known values of {@link ActionType} that the service accepts. */
exports.KnownActionType = void 0;
(function (KnownActionType) {
    /** Internal */
    KnownActionType["Internal"] = "Internal";
})(exports.KnownActionType || (exports.KnownActionType = {}));
/** Known values of {@link GrantType} that the service accepts. */
exports.KnownGrantType = void 0;
(function (KnownGrantType) {
    /** Student */
    KnownGrantType["Student"] = "Student";
    /** Academic */
    KnownGrantType["Academic"] = "Academic";
})(exports.KnownGrantType || (exports.KnownGrantType = {}));
/** Known values of {@link GrantStatus} that the service accepts. */
exports.KnownGrantStatus = void 0;
(function (KnownGrantStatus) {
    /** Active */
    KnownGrantStatus["Active"] = "Active";
    /** Inactive */
    KnownGrantStatus["Inactive"] = "Inactive";
})(exports.KnownGrantStatus || (exports.KnownGrantStatus = {}));
/** Known values of {@link CreatedByType} that the service accepts. */
exports.KnownCreatedByType = void 0;
(function (KnownCreatedByType) {
    /** User */
    KnownCreatedByType["User"] = "User";
    /** Application */
    KnownCreatedByType["Application"] = "Application";
    /** ManagedIdentity */
    KnownCreatedByType["ManagedIdentity"] = "ManagedIdentity";
    /** Key */
    KnownCreatedByType["Key"] = "Key";
})(exports.KnownCreatedByType || (exports.KnownCreatedByType = {}));
/** Known values of {@link LabStatus} that the service accepts. */
exports.KnownLabStatus = void 0;
(function (KnownLabStatus) {
    /** Active */
    KnownLabStatus["Active"] = "Active";
    /** Deleted */
    KnownLabStatus["Deleted"] = "Deleted";
    /** Pending */
    KnownLabStatus["Pending"] = "Pending";
})(exports.KnownLabStatus || (exports.KnownLabStatus = {}));
/** Known values of {@link JoinRequestStatus} that the service accepts. */
exports.KnownJoinRequestStatus = void 0;
(function (KnownJoinRequestStatus) {
    /** Pending */
    KnownJoinRequestStatus["Pending"] = "Pending";
    /** Denied */
    KnownJoinRequestStatus["Denied"] = "Denied";
})(exports.KnownJoinRequestStatus || (exports.KnownJoinRequestStatus = {}));
/** Known values of {@link StudentRole} that the service accepts. */
exports.KnownStudentRole = void 0;
(function (KnownStudentRole) {
    /** Student */
    KnownStudentRole["Student"] = "Student";
    /** Admin */
    KnownStudentRole["Admin"] = "Admin";
})(exports.KnownStudentRole || (exports.KnownStudentRole = {}));
/** Known values of {@link StudentLabStatus} that the service accepts. */
exports.KnownStudentLabStatus = void 0;
(function (KnownStudentLabStatus) {
    /** Active */
    KnownStudentLabStatus["Active"] = "Active";
    /** Disabled */
    KnownStudentLabStatus["Disabled"] = "Disabled";
    /** Expired */
    KnownStudentLabStatus["Expired"] = "Expired";
    /** Pending */
    KnownStudentLabStatus["Pending"] = "Pending";
    /** Deleted */
    KnownStudentLabStatus["Deleted"] = "Deleted";
})(exports.KnownStudentLabStatus || (exports.KnownStudentLabStatus = {}));

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const OperationListResult = {
    type: {
        name: "Composite",
        className: "OperationListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Operation"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Operation = {
    type: {
        name: "Composite",
        className: "Operation",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            isDataAction: {
                serializedName: "isDataAction",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            display: {
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "OperationDisplay"
                }
            },
            origin: {
                serializedName: "origin",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            actionType: {
                serializedName: "actionType",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationDisplay = {
    type: {
        name: "Composite",
        className: "OperationDisplay",
        modelProperties: {
            provider: {
                serializedName: "provider",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "resource",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ErrorResponseBody = {
    type: {
        name: "Composite",
        className: "ErrorResponseBody",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorResponse"
                }
            }
        }
    }
};
const ErrorResponse = {
    type: {
        name: "Composite",
        className: "ErrorResponse",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const GrantListResponse = {
    type: {
        name: "Composite",
        className: "GrantListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "GrantDetails"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Amount = {
    type: {
        name: "Composite",
        className: "Amount",
        modelProperties: {
            currency: {
                serializedName: "currency",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const Resource = {
    type: {
        name: "Composite",
        className: "Resource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }
        }
    }
};
const SystemData = {
    type: {
        name: "Composite",
        className: "SystemData",
        modelProperties: {
            createdBy: {
                serializedName: "createdBy",
                type: {
                    name: "String"
                }
            },
            createdByType: {
                serializedName: "createdByType",
                type: {
                    name: "String"
                }
            },
            createdAt: {
                serializedName: "createdAt",
                type: {
                    name: "DateTime"
                }
            },
            lastModifiedBy: {
                serializedName: "lastModifiedBy",
                type: {
                    name: "String"
                }
            },
            lastModifiedByType: {
                serializedName: "lastModifiedByType",
                type: {
                    name: "String"
                }
            },
            lastModifiedAt: {
                serializedName: "lastModifiedAt",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const LabListResult = {
    type: {
        name: "Composite",
        className: "LabListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LabDetails"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const InviteCodeGenerateRequest = {
    type: {
        name: "Composite",
        className: "InviteCodeGenerateRequest",
        modelProperties: {
            maxStudentCount: {
                serializedName: "maxStudentCount",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const JoinRequestList = {
    type: {
        name: "Composite",
        className: "JoinRequestList",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "JoinRequestDetails"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RedeemRequest = {
    type: {
        name: "Composite",
        className: "RedeemRequest",
        modelProperties: {
            redeemCode: {
                serializedName: "redeemCode",
                required: true,
                type: {
                    name: "String"
                }
            },
            firstName: {
                serializedName: "firstName",
                required: true,
                type: {
                    name: "String"
                }
            },
            lastName: {
                serializedName: "lastName",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const StudentListResult = {
    type: {
        name: "Composite",
        className: "StudentListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "StudentDetails"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const StudentLabListResult = {
    type: {
        name: "Composite",
        className: "StudentLabListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "StudentLabDetails"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const GrantDetails = {
    type: {
        name: "Composite",
        className: "GrantDetails",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { offerCap: {
                serializedName: "properties.offerCap",
                type: {
                    name: "Composite",
                    className: "Amount"
                }
            }, effectiveDate: {
                serializedName: "properties.effectiveDate",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, offerType: {
                serializedName: "properties.offerType",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, expirationDate: {
                serializedName: "properties.expirationDate",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, status: {
                serializedName: "properties.status",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, allocatedBudget: {
                serializedName: "properties.allocatedBudget",
                type: {
                    name: "Composite",
                    className: "Amount"
                }
            } })
    }
};
const LabDetails = {
    type: {
        name: "Composite",
        className: "LabDetails",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { displayName: {
                serializedName: "properties.displayName",
                type: {
                    name: "String"
                }
            }, budgetPerStudent: {
                serializedName: "properties.budgetPerStudent",
                type: {
                    name: "Composite",
                    className: "Amount"
                }
            }, description: {
                serializedName: "properties.description",
                type: {
                    name: "String"
                }
            }, expirationDate: {
                serializedName: "properties.expirationDate",
                type: {
                    name: "DateTime"
                }
            }, effectiveDate: {
                serializedName: "properties.effectiveDate",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, status: {
                serializedName: "properties.status",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, maxStudentCount: {
                serializedName: "properties.maxStudentCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, invitationCode: {
                serializedName: "properties.invitationCode",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, currencyPropertiesTotalAllocatedBudgetCurrency: {
                serializedName: "properties.totalAllocatedBudget.currency",
                type: {
                    name: "String"
                }
            }, valuePropertiesTotalAllocatedBudgetValue: {
                serializedName: "properties.totalAllocatedBudget.value",
                type: {
                    name: "Number"
                }
            }, currencyPropertiesTotalBudgetCurrency: {
                serializedName: "properties.totalBudget.currency",
                type: {
                    name: "String"
                }
            }, valuePropertiesTotalBudgetValue: {
                serializedName: "properties.totalBudget.value",
                type: {
                    name: "Number"
                }
            } })
    }
};
const JoinRequestDetails = {
    type: {
        name: "Composite",
        className: "JoinRequestDetails",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { firstName: {
                serializedName: "properties.firstName",
                type: {
                    name: "String"
                }
            }, lastName: {
                serializedName: "properties.lastName",
                type: {
                    name: "String"
                }
            }, email: {
                serializedName: "properties.email",
                type: {
                    name: "String"
                }
            }, status: {
                serializedName: "properties.status",
                type: {
                    name: "String"
                }
            } })
    }
};
const StudentDetails = {
    type: {
        name: "Composite",
        className: "StudentDetails",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { firstName: {
                serializedName: "properties.firstName",
                type: {
                    name: "String"
                }
            }, lastName: {
                serializedName: "properties.lastName",
                type: {
                    name: "String"
                }
            }, email: {
                serializedName: "properties.email",
                type: {
                    name: "String"
                }
            }, role: {
                serializedName: "properties.role",
                type: {
                    name: "String"
                }
            }, budget: {
                serializedName: "properties.budget",
                type: {
                    name: "Composite",
                    className: "Amount"
                }
            }, subscriptionId: {
                serializedName: "properties.subscriptionId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, expirationDate: {
                serializedName: "properties.expirationDate",
                type: {
                    name: "DateTime"
                }
            }, status: {
                serializedName: "properties.status",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, effectiveDate: {
                serializedName: "properties.effectiveDate",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, subscriptionAlias: {
                serializedName: "properties.subscriptionAlias",
                type: {
                    name: "String"
                }
            }, subscriptionInviteLastSentDate: {
                serializedName: "properties.subscriptionInviteLastSentDate",
                type: {
                    name: "DateTime"
                }
            } })
    }
};
const StudentLabDetails = {
    type: {
        name: "Composite",
        className: "StudentLabDetails",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { displayName: {
                serializedName: "properties.displayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, description: {
                serializedName: "properties.description",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, expirationDate: {
                serializedName: "properties.expirationDate",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, role: {
                serializedName: "properties.role",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, budget: {
                serializedName: "properties.budget",
                type: {
                    name: "Composite",
                    className: "Amount"
                }
            }, subscriptionId: {
                serializedName: "properties.subscriptionId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, status: {
                serializedName: "properties.status",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, effectiveDate: {
                serializedName: "properties.effectiveDate",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, labScope: {
                serializedName: "properties.labScope",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    OperationListResult: OperationListResult,
    Operation: Operation,
    OperationDisplay: OperationDisplay,
    ErrorResponseBody: ErrorResponseBody,
    ErrorResponse: ErrorResponse,
    GrantListResponse: GrantListResponse,
    Amount: Amount,
    Resource: Resource,
    SystemData: SystemData,
    LabListResult: LabListResult,
    InviteCodeGenerateRequest: InviteCodeGenerateRequest,
    JoinRequestList: JoinRequestList,
    RedeemRequest: RedeemRequest,
    StudentListResult: StudentListResult,
    StudentLabListResult: StudentLabListResult,
    GrantDetails: GrantDetails,
    LabDetails: LabDetails,
    JoinRequestDetails: JoinRequestDetails,
    StudentDetails: StudentDetails,
    StudentLabDetails: StudentLabDetails
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2021-12-01-preview",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const includeAllocatedBudget = {
    parameterPath: ["options", "includeAllocatedBudget"],
    mapper: {
        serializedName: "includeAllocatedBudget",
        type: {
            name: "Boolean"
        }
    }
};
const billingAccountName = {
    parameterPath: "billingAccountName",
    mapper: {
        serializedName: "billingAccountName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const billingProfileName = {
    parameterPath: "billingProfileName",
    mapper: {
        serializedName: "billingProfileName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const includeBudget = {
    parameterPath: ["options", "includeBudget"],
    mapper: {
        serializedName: "includeBudget",
        type: {
            name: "Boolean"
        }
    }
};
const includeDeleted = {
    parameterPath: ["options", "includeDeleted"],
    mapper: {
        serializedName: "includeDeleted",
        type: {
            name: "Boolean"
        }
    }
};
const invoiceSectionName = {
    parameterPath: "invoiceSectionName",
    mapper: {
        serializedName: "invoiceSectionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const parameters = {
    parameterPath: "parameters",
    mapper: LabDetails
};
const parameters1 = {
    parameterPath: "parameters",
    mapper: InviteCodeGenerateRequest
};
const onlyUpdateStudentCountParameter = {
    parameterPath: ["options", "onlyUpdateStudentCountParameter"],
    mapper: {
        serializedName: "onlyUpdateStudentCountParameter",
        type: {
            name: "Boolean"
        }
    }
};
const includeDenied = {
    parameterPath: ["options", "includeDenied"],
    mapper: {
        serializedName: "includeDenied",
        type: {
            name: "Boolean"
        }
    }
};
const joinRequestName = {
    parameterPath: "joinRequestName",
    mapper: {
        serializedName: "joinRequestName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters2 = {
    parameterPath: "parameters",
    mapper: RedeemRequest
};
const studentAlias = {
    parameterPath: "studentAlias",
    mapper: {
        serializedName: "studentAlias",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters3 = {
    parameterPath: "parameters",
    mapper: StudentDetails
};
const studentLabName = {
    parameterPath: "studentLabName",
    mapper: {
        serializedName: "studentLabName",
        required: true,
        type: {
            name: "String"
        }
    }
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing Operations operations. */
class OperationsImpl {
    /**
     * Initialize a new instance of the class Operations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all of the available Microsoft.Education API operations.
     * @param options The options parameters.
     */
    list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$4);
    }
}
// Operation Specifications
const serializer$6 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$4 = {
    path: "/providers/Microsoft.Education/operations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationListResult
        },
        default: {
            bodyMapper: ErrorResponseBody
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer: serializer$6
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Grants operations. */
class GrantsImpl {
    /**
     * Initialize a new instance of the class Grants class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get a list of grants that Microsoft has provided.
     * @param options The options parameters.
     */
    listAll(options) {
        const iter = this.listAllPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listAllPagingPage(options, settings);
            }
        };
    }
    listAllPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listAllPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listAll(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listAllNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listAllPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listAllPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listAllPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get details for a specific grant linked to the provided billing account and billing profile.
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param options The options parameters.
     */
    list(billingAccountName, billingProfileName, options) {
        const iter = this.listPagingAll(billingAccountName, billingProfileName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(billingAccountName, billingProfileName, options, settings);
            }
        };
    }
    listPagingPage(billingAccountName, billingProfileName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(billingAccountName, billingProfileName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(billingAccountName, billingProfileName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(billingAccountName, billingProfileName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(billingAccountName, billingProfileName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Get a list of grants that Microsoft has provided.
     * @param options The options parameters.
     */
    _listAll(options) {
        return this.client.sendOperationRequest({ options }, listAllOperationSpec$2);
    }
    /**
     * Get details for a specific grant linked to the provided billing account and billing profile.
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param options The options parameters.
     */
    _list(billingAccountName, billingProfileName, options) {
        return this.client.sendOperationRequest({ billingAccountName, billingProfileName, options }, listOperationSpec$3);
    }
    /**
     * Get details for a specific grant linked to the provided billing account and billing profile.
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param options The options parameters.
     */
    get(billingAccountName, billingProfileName, options) {
        return this.client.sendOperationRequest({ billingAccountName, billingProfileName, options }, getOperationSpec$4);
    }
    /**
     * ListAllNext
     * @param nextLink The nextLink from the previous successful call to the ListAll method.
     * @param options The options parameters.
     */
    _listAllNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listAllNextOperationSpec$2);
    }
    /**
     * ListNext
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(billingAccountName, billingProfileName, nextLink, options) {
        return this.client.sendOperationRequest({ billingAccountName, billingProfileName, nextLink, options }, listNextOperationSpec$3);
    }
}
// Operation Specifications
const serializer$5 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listAllOperationSpec$2 = {
    path: "/providers/Microsoft.Education/grants",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: GrantListResponse
        },
        default: {
            bodyMapper: ErrorResponseBody
        }
    },
    queryParameters: [apiVersion, includeAllocatedBudget],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer: serializer$5
};
const listOperationSpec$3 = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/providers/Microsoft.Education/grants",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: GrantListResponse
        },
        default: {
            bodyMapper: ErrorResponseBody
        }
    },
    queryParameters: [apiVersion, includeAllocatedBudget],
    urlParameters: [
        $host,
        billingAccountName,
        billingProfileName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const getOperationSpec$4 = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/providers/Microsoft.Education/grants/default",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: GrantDetails
        },
        default: {
            bodyMapper: ErrorResponseBody
        }
    },
    queryParameters: [apiVersion, includeAllocatedBudget],
    urlParameters: [
        $host,
        billingAccountName,
        billingProfileName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const listAllNextOperationSpec$2 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: GrantListResponse
        },
        default: {
            bodyMapper: ErrorResponseBody
        }
    },
    urlParameters: [$host, nextLink],
    headerParameters: [accept],
    serializer: serializer$5
};
const listNextOperationSpec$3 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: GrantListResponse
        },
        default: {
            bodyMapper: ErrorResponseBody
        }
    },
    urlParameters: [
        $host,
        billingAccountName,
        billingProfileName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$5
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Labs operations. */
class LabsImpl {
    /**
     * Initialize a new instance of the class Labs class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get a list of labs associated with the provided billing account name and billing profile name.
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param options The options parameters.
     */
    listAll(billingAccountName, billingProfileName, options) {
        const iter = this.listAllPagingAll(billingAccountName, billingProfileName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listAllPagingPage(billingAccountName, billingProfileName, options, settings);
            }
        };
    }
    listAllPagingPage(billingAccountName, billingProfileName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listAllPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listAll(billingAccountName, billingProfileName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listAllNext(billingAccountName, billingProfileName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listAllPagingAll(billingAccountName, billingProfileName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listAllPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listAllPagingPage(billingAccountName, billingProfileName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get the details for a specific lab associated with the provided billing account name, billing
     * profile name, and invoice section name.
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param invoiceSectionName Invoice section name.
     * @param options The options parameters.
     */
    list(billingAccountName, billingProfileName, invoiceSectionName, options) {
        const iter = this.listPagingAll(billingAccountName, billingProfileName, invoiceSectionName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(billingAccountName, billingProfileName, invoiceSectionName, options, settings);
            }
        };
    }
    listPagingPage(billingAccountName, billingProfileName, invoiceSectionName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(billingAccountName, billingProfileName, invoiceSectionName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(billingAccountName, billingProfileName, invoiceSectionName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(billingAccountName, billingProfileName, invoiceSectionName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(billingAccountName, billingProfileName, invoiceSectionName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Get a list of labs associated with the provided billing account name and billing profile name.
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param options The options parameters.
     */
    _listAll(billingAccountName, billingProfileName, options) {
        return this.client.sendOperationRequest({ billingAccountName, billingProfileName, options }, listAllOperationSpec$1);
    }
    /**
     * Get the details for a specific lab associated with the provided billing account name, billing
     * profile name, and invoice section name.
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param invoiceSectionName Invoice section name.
     * @param options The options parameters.
     */
    _list(billingAccountName, billingProfileName, invoiceSectionName, options) {
        return this.client.sendOperationRequest({ billingAccountName, billingProfileName, invoiceSectionName, options }, listOperationSpec$2);
    }
    /**
     * Get the details for a specific lab associated with the provided billing account name, billing
     * profile name, and invoice section name.
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param invoiceSectionName Invoice section name.
     * @param options The options parameters.
     */
    get(billingAccountName, billingProfileName, invoiceSectionName, options) {
        return this.client.sendOperationRequest({ billingAccountName, billingProfileName, invoiceSectionName, options }, getOperationSpec$3);
    }
    /**
     * Delete a specific lab associated with the provided billing account name, billing profile name, and
     * invoice section name. Note all students must be removed from the lab in order to delete the lab.
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param invoiceSectionName Invoice section name.
     * @param options The options parameters.
     */
    delete(billingAccountName, billingProfileName, invoiceSectionName, options) {
        return this.client.sendOperationRequest({ billingAccountName, billingProfileName, invoiceSectionName, options }, deleteOperationSpec$1);
    }
    /**
     * Create a new lab or update a previously created lab.
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param invoiceSectionName Invoice section name.
     * @param parameters Request parameters that are provided to create lab resource.
     * @param options The options parameters.
     */
    createOrUpdate(billingAccountName, billingProfileName, invoiceSectionName, parameters, options) {
        return this.client.sendOperationRequest({
            billingAccountName,
            billingProfileName,
            invoiceSectionName,
            parameters,
            options
        }, createOrUpdateOperationSpec$1);
    }
    /**
     * Generate invite code for a lab
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param invoiceSectionName Invoice section name.
     * @param parameters Request parameters that are provided to generate invite code.
     * @param options The options parameters.
     */
    generateInviteCode(billingAccountName, billingProfileName, invoiceSectionName, parameters, options) {
        return this.client.sendOperationRequest({
            billingAccountName,
            billingProfileName,
            invoiceSectionName,
            parameters,
            options
        }, generateInviteCodeOperationSpec);
    }
    /**
     * ListAllNext
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param nextLink The nextLink from the previous successful call to the ListAll method.
     * @param options The options parameters.
     */
    _listAllNext(billingAccountName, billingProfileName, nextLink, options) {
        return this.client.sendOperationRequest({ billingAccountName, billingProfileName, nextLink, options }, listAllNextOperationSpec$1);
    }
    /**
     * ListNext
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param invoiceSectionName Invoice section name.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(billingAccountName, billingProfileName, invoiceSectionName, nextLink, options) {
        return this.client.sendOperationRequest({
            billingAccountName,
            billingProfileName,
            invoiceSectionName,
            nextLink,
            options
        }, listNextOperationSpec$2);
    }
}
// Operation Specifications
const serializer$4 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listAllOperationSpec$1 = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/providers/Microsoft.Education/labs",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: LabListResult
        },
        default: {
            bodyMapper: ErrorResponseBody
        }
    },
    queryParameters: [
        apiVersion,
        includeBudget,
        includeDeleted
    ],
    urlParameters: [
        $host,
        billingAccountName,
        billingProfileName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const listOperationSpec$2 = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/providers/Microsoft.Education/labs",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: LabListResult
        },
        default: {
            bodyMapper: ErrorResponseBody
        }
    },
    queryParameters: [apiVersion, includeBudget],
    urlParameters: [
        $host,
        billingAccountName,
        billingProfileName,
        invoiceSectionName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const getOperationSpec$3 = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/providers/Microsoft.Education/labs/default",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: LabDetails
        },
        default: {
            bodyMapper: ErrorResponseBody
        }
    },
    queryParameters: [apiVersion, includeBudget],
    urlParameters: [
        $host,
        billingAccountName,
        billingProfileName,
        invoiceSectionName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const deleteOperationSpec$1 = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/providers/Microsoft.Education/labs/default",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: ErrorResponseBody
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        billingProfileName,
        invoiceSectionName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const createOrUpdateOperationSpec$1 = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/providers/Microsoft.Education/labs/default",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: LabDetails
        },
        201: {
            bodyMapper: LabDetails
        },
        default: {
            bodyMapper: ErrorResponseBody
        }
    },
    requestBody: parameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        billingProfileName,
        invoiceSectionName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$4
};
const generateInviteCodeOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/providers/Microsoft.Education/labs/default/generateInviteCode",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: LabDetails
        },
        default: {
            bodyMapper: ErrorResponseBody
        }
    },
    requestBody: parameters1,
    queryParameters: [
        apiVersion,
        onlyUpdateStudentCountParameter
    ],
    urlParameters: [
        $host,
        billingAccountName,
        billingProfileName,
        invoiceSectionName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$4
};
const listAllNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: LabListResult
        },
        default: {
            bodyMapper: ErrorResponseBody
        }
    },
    urlParameters: [
        $host,
        billingAccountName,
        billingProfileName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const listNextOperationSpec$2 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: LabListResult
        },
        default: {
            bodyMapper: ErrorResponseBody
        }
    },
    urlParameters: [
        $host,
        billingAccountName,
        billingProfileName,
        nextLink,
        invoiceSectionName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing JoinRequests operations. */
class JoinRequestsImpl {
    /**
     * Initialize a new instance of the class JoinRequests class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * get student join requests
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param invoiceSectionName Invoice section name.
     * @param options The options parameters.
     */
    list(billingAccountName, billingProfileName, invoiceSectionName, options) {
        const iter = this.listPagingAll(billingAccountName, billingProfileName, invoiceSectionName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(billingAccountName, billingProfileName, invoiceSectionName, options, settings);
            }
        };
    }
    listPagingPage(billingAccountName, billingProfileName, invoiceSectionName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(billingAccountName, billingProfileName, invoiceSectionName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(billingAccountName, billingProfileName, invoiceSectionName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(billingAccountName, billingProfileName, invoiceSectionName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(billingAccountName, billingProfileName, invoiceSectionName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * get student join requests
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param invoiceSectionName Invoice section name.
     * @param options The options parameters.
     */
    _list(billingAccountName, billingProfileName, invoiceSectionName, options) {
        return this.client.sendOperationRequest({ billingAccountName, billingProfileName, invoiceSectionName, options }, listOperationSpec$1);
    }
    /**
     * get student join requests
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param invoiceSectionName Invoice section name.
     * @param joinRequestName Join name
     * @param options The options parameters.
     */
    get(billingAccountName, billingProfileName, invoiceSectionName, joinRequestName, options) {
        return this.client.sendOperationRequest({
            billingAccountName,
            billingProfileName,
            invoiceSectionName,
            joinRequestName,
            options
        }, getOperationSpec$2);
    }
    /**
     * Approve student joining the redeemable lab
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param invoiceSectionName Invoice section name.
     * @param joinRequestName Join name
     * @param options The options parameters.
     */
    approve(billingAccountName, billingProfileName, invoiceSectionName, joinRequestName, options) {
        return this.client.sendOperationRequest({
            billingAccountName,
            billingProfileName,
            invoiceSectionName,
            joinRequestName,
            options
        }, approveOperationSpec);
    }
    /**
     * Deny student joining the redeemable lab
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param invoiceSectionName Invoice section name.
     * @param joinRequestName Join name
     * @param options The options parameters.
     */
    deny(billingAccountName, billingProfileName, invoiceSectionName, joinRequestName, options) {
        return this.client.sendOperationRequest({
            billingAccountName,
            billingProfileName,
            invoiceSectionName,
            joinRequestName,
            options
        }, denyOperationSpec);
    }
    /**
     * ListNext
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param invoiceSectionName Invoice section name.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(billingAccountName, billingProfileName, invoiceSectionName, nextLink, options) {
        return this.client.sendOperationRequest({
            billingAccountName,
            billingProfileName,
            invoiceSectionName,
            nextLink,
            options
        }, listNextOperationSpec$1);
    }
}
// Operation Specifications
const serializer$3 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$1 = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/providers/Microsoft.Education/labs/default/joinRequests",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: JoinRequestList
        },
        default: {
            bodyMapper: ErrorResponseBody
        }
    },
    queryParameters: [apiVersion, includeDenied],
    urlParameters: [
        $host,
        billingAccountName,
        billingProfileName,
        invoiceSectionName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const getOperationSpec$2 = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/providers/Microsoft.Education/labs/default/joinRequests/{joinRequestName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: JoinRequestDetails
        },
        default: {
            bodyMapper: ErrorResponseBody
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        billingProfileName,
        invoiceSectionName,
        joinRequestName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const approveOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/providers/Microsoft.Education/labs/default/joinRequests/{joinRequestName}/approve",
    httpMethod: "POST",
    responses: {
        200: {},
        default: {
            bodyMapper: ErrorResponseBody
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        billingProfileName,
        invoiceSectionName,
        joinRequestName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const denyOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/providers/Microsoft.Education/labs/default/joinRequests/{joinRequestName}/deny",
    httpMethod: "POST",
    responses: {
        200: {},
        default: {
            bodyMapper: ErrorResponseBody
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        billingProfileName,
        invoiceSectionName,
        joinRequestName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const listNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: JoinRequestList
        },
        default: {
            bodyMapper: ErrorResponseBody
        }
    },
    urlParameters: [
        $host,
        billingAccountName,
        billingProfileName,
        nextLink,
        invoiceSectionName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Students operations. */
class StudentsImpl {
    /**
     * Initialize a new instance of the class Students class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get a list of details about students that are associated with the specified lab.
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param invoiceSectionName Invoice section name.
     * @param options The options parameters.
     */
    list(billingAccountName, billingProfileName, invoiceSectionName, options) {
        const iter = this.listPagingAll(billingAccountName, billingProfileName, invoiceSectionName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(billingAccountName, billingProfileName, invoiceSectionName, options, settings);
            }
        };
    }
    listPagingPage(billingAccountName, billingProfileName, invoiceSectionName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(billingAccountName, billingProfileName, invoiceSectionName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(billingAccountName, billingProfileName, invoiceSectionName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(billingAccountName, billingProfileName, invoiceSectionName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(billingAccountName, billingProfileName, invoiceSectionName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get a list of details about students that are associated with the specified lab.
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param invoiceSectionName Invoice section name.
     * @param options The options parameters.
     */
    _list(billingAccountName, billingProfileName, invoiceSectionName, options) {
        return this.client.sendOperationRequest({ billingAccountName, billingProfileName, invoiceSectionName, options }, listOperationSpec);
    }
    /**
     * Get the details for a specific student in the specified lab by student alias
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param invoiceSectionName Invoice section name.
     * @param studentAlias Student alias.
     * @param options The options parameters.
     */
    get(billingAccountName, billingProfileName, invoiceSectionName, studentAlias, options) {
        return this.client.sendOperationRequest({
            billingAccountName,
            billingProfileName,
            invoiceSectionName,
            studentAlias,
            options
        }, getOperationSpec$1);
    }
    /**
     * Delete the specified student based on the student alias.
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param invoiceSectionName Invoice section name.
     * @param studentAlias Student alias.
     * @param options The options parameters.
     */
    delete(billingAccountName, billingProfileName, invoiceSectionName, studentAlias, options) {
        return this.client.sendOperationRequest({
            billingAccountName,
            billingProfileName,
            invoiceSectionName,
            studentAlias,
            options
        }, deleteOperationSpec);
    }
    /**
     * Create and add a new student to the specified lab or update the details of an existing student in a
     * lab. Note the student must have a valid tenant to accept the lab after they have been added to lab.
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param invoiceSectionName Invoice section name.
     * @param studentAlias Student alias.
     * @param parameters Request parameters that are provided to update student properties.
     * @param options The options parameters.
     */
    createOrUpdate(billingAccountName, billingProfileName, invoiceSectionName, studentAlias, parameters, options) {
        return this.client.sendOperationRequest({
            billingAccountName,
            billingProfileName,
            invoiceSectionName,
            studentAlias,
            parameters,
            options
        }, createOrUpdateOperationSpec);
    }
    /**
     * ListNext
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param invoiceSectionName Invoice section name.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(billingAccountName, billingProfileName, invoiceSectionName, nextLink, options) {
        return this.client.sendOperationRequest({
            billingAccountName,
            billingProfileName,
            invoiceSectionName,
            nextLink,
            options
        }, listNextOperationSpec);
    }
}
// Operation Specifications
const serializer$2 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/providers/Microsoft.Education/labs/default/students",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: StudentListResult
        },
        default: {
            bodyMapper: ErrorResponseBody
        }
    },
    queryParameters: [apiVersion, includeDeleted],
    urlParameters: [
        $host,
        billingAccountName,
        billingProfileName,
        invoiceSectionName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const getOperationSpec$1 = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/providers/Microsoft.Education/labs/default/students/{studentAlias}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: StudentDetails
        },
        default: {
            bodyMapper: ErrorResponseBody
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        billingProfileName,
        invoiceSectionName,
        studentAlias
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const deleteOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/providers/Microsoft.Education/labs/default/students/{studentAlias}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: ErrorResponseBody
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        billingProfileName,
        invoiceSectionName,
        studentAlias
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const createOrUpdateOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/providers/Microsoft.Education/labs/default/students/{studentAlias}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: StudentDetails
        },
        201: {
            bodyMapper: StudentDetails
        },
        default: {
            bodyMapper: ErrorResponseBody
        }
    },
    requestBody: parameters3,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        billingProfileName,
        invoiceSectionName,
        studentAlias
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$2
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: StudentListResult
        },
        default: {
            bodyMapper: ErrorResponseBody
        }
    },
    urlParameters: [
        $host,
        billingAccountName,
        billingProfileName,
        nextLink,
        invoiceSectionName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing StudentLabs operations. */
class StudentLabsImpl {
    /**
     * Initialize a new instance of the class StudentLabs class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get a list of all labs associated with the caller of the API.
     * @param options The options parameters.
     */
    listAll(options) {
        const iter = this.listAllPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listAllPagingPage(options, settings);
            }
        };
    }
    listAllPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listAllPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listAll(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listAllNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listAllPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listAllPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listAllPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get a list of all labs associated with the caller of the API.
     * @param options The options parameters.
     */
    _listAll(options) {
        return this.client.sendOperationRequest({ options }, listAllOperationSpec);
    }
    /**
     * Get the details for a specified lab associated with the student lab.
     * @param studentLabName Student lab name.
     * @param options The options parameters.
     */
    get(studentLabName, options) {
        return this.client.sendOperationRequest({ studentLabName, options }, getOperationSpec);
    }
    /**
     * ListAllNext
     * @param nextLink The nextLink from the previous successful call to the ListAll method.
     * @param options The options parameters.
     */
    _listAllNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listAllNextOperationSpec);
    }
}
// Operation Specifications
const serializer$1 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listAllOperationSpec = {
    path: "/providers/Microsoft.Education/studentLabs",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: StudentLabListResult
        },
        default: {
            bodyMapper: ErrorResponseBody
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer: serializer$1
};
const getOperationSpec = {
    path: "/providers/Microsoft.Education/studentLabs/{studentLabName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: StudentLabDetails
        },
        default: {
            bodyMapper: ErrorResponseBody
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, studentLabName],
    headerParameters: [accept],
    serializer: serializer$1
};
const listAllNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: StudentLabListResult
        },
        default: {
            bodyMapper: ErrorResponseBody
        }
    },
    urlParameters: [$host, nextLink],
    headerParameters: [accept],
    serializer: serializer$1
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class EducationManagementClient extends coreClient__namespace.ServiceClient {
    /**
     * Initializes a new instance of the EducationManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param options The parameter options
     */
    constructor(credentials, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-education/1.0.0-beta.3`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName
            });
            this.pipeline.addPolicy(coreRestPipeline__namespace.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient__namespace.authorizeRequestOnClaimChallenge
                }
            }));
        }
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.apiVersion = options.apiVersion || "2021-12-01-preview";
        this.operations = new OperationsImpl(this);
        this.grants = new GrantsImpl(this);
        this.labs = new LabsImpl(this);
        this.joinRequests = new JoinRequestsImpl(this);
        this.students = new StudentsImpl(this);
        this.studentLabs = new StudentLabsImpl(this);
        this.addCustomApiVersionPolicy(options.apiVersion);
    }
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    addCustomApiVersionPolicy(apiVersion) {
        if (!apiVersion) {
            return;
        }
        const apiVersionPolicy = {
            name: "CustomApiVersionPolicy",
            sendRequest(request, next) {
                return tslib.__awaiter(this, void 0, void 0, function* () {
                    const param = request.url.split("?");
                    if (param.length > 1) {
                        const newParams = param[1].split("&").map((item) => {
                            if (item.indexOf("api-version") > -1) {
                                return "api-version=" + apiVersion;
                            }
                            else {
                                return item;
                            }
                        });
                        request.url = param[0] + "?" + newParams.join("&");
                    }
                    return next(request);
                });
            }
        };
        this.pipeline.addPolicy(apiVersionPolicy);
    }
    /**
     * Redeem invite code to join a redeemable lab
     * @param parameters Request parameters to provide redeem code.
     * @param options The options parameters.
     */
    redeemInvitationCode(parameters, options) {
        return this.sendOperationRequest({ parameters, options }, redeemInvitationCodeOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const redeemInvitationCodeOperationSpec = {
    path: "/providers/Microsoft.Education/redeemInvitationCode",
    httpMethod: "POST",
    responses: {
        200: {},
        default: {
            bodyMapper: ErrorResponseBody
        }
    },
    requestBody: parameters2,
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};

exports.EducationManagementClient = EducationManagementClient;
exports.getContinuationToken = getContinuationToken;
//# sourceMappingURL=index.js.map
