/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from "tslib";
import { setContinuationToken } from "../pagingHelper";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/// <reference lib="esnext.asynciterable" />
/** Class containing Labs operations. */
export class LabsImpl {
    /**
     * Initialize a new instance of the class Labs class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get a list of labs associated with the provided billing account name and billing profile name.
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param options The options parameters.
     */
    listAll(billingAccountName, billingProfileName, options) {
        const iter = this.listAllPagingAll(billingAccountName, billingProfileName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listAllPagingPage(billingAccountName, billingProfileName, options, settings);
            }
        };
    }
    listAllPagingPage(billingAccountName, billingProfileName, options, settings) {
        return __asyncGenerator(this, arguments, function* listAllPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listAll(billingAccountName, billingProfileName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listAllNext(billingAccountName, billingProfileName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listAllPagingAll(billingAccountName, billingProfileName, options) {
        return __asyncGenerator(this, arguments, function* listAllPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = __asyncValues(this.listAllPagingPage(billingAccountName, billingProfileName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get the details for a specific lab associated with the provided billing account name, billing
     * profile name, and invoice section name.
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param invoiceSectionName Invoice section name.
     * @param options The options parameters.
     */
    list(billingAccountName, billingProfileName, invoiceSectionName, options) {
        const iter = this.listPagingAll(billingAccountName, billingProfileName, invoiceSectionName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(billingAccountName, billingProfileName, invoiceSectionName, options, settings);
            }
        };
    }
    listPagingPage(billingAccountName, billingProfileName, invoiceSectionName, options, settings) {
        return __asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._list(billingAccountName, billingProfileName, invoiceSectionName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listNext(billingAccountName, billingProfileName, invoiceSectionName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listPagingAll(billingAccountName, billingProfileName, invoiceSectionName, options) {
        return __asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = __asyncValues(this.listPagingPage(billingAccountName, billingProfileName, invoiceSectionName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Get a list of labs associated with the provided billing account name and billing profile name.
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param options The options parameters.
     */
    _listAll(billingAccountName, billingProfileName, options) {
        return this.client.sendOperationRequest({ billingAccountName, billingProfileName, options }, listAllOperationSpec);
    }
    /**
     * Get the details for a specific lab associated with the provided billing account name, billing
     * profile name, and invoice section name.
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param invoiceSectionName Invoice section name.
     * @param options The options parameters.
     */
    _list(billingAccountName, billingProfileName, invoiceSectionName, options) {
        return this.client.sendOperationRequest({ billingAccountName, billingProfileName, invoiceSectionName, options }, listOperationSpec);
    }
    /**
     * Get the details for a specific lab associated with the provided billing account name, billing
     * profile name, and invoice section name.
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param invoiceSectionName Invoice section name.
     * @param options The options parameters.
     */
    get(billingAccountName, billingProfileName, invoiceSectionName, options) {
        return this.client.sendOperationRequest({ billingAccountName, billingProfileName, invoiceSectionName, options }, getOperationSpec);
    }
    /**
     * Delete a specific lab associated with the provided billing account name, billing profile name, and
     * invoice section name. Note all students must be removed from the lab in order to delete the lab.
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param invoiceSectionName Invoice section name.
     * @param options The options parameters.
     */
    delete(billingAccountName, billingProfileName, invoiceSectionName, options) {
        return this.client.sendOperationRequest({ billingAccountName, billingProfileName, invoiceSectionName, options }, deleteOperationSpec);
    }
    /**
     * Create a new lab or update a previously created lab.
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param invoiceSectionName Invoice section name.
     * @param parameters Request parameters that are provided to create lab resource.
     * @param options The options parameters.
     */
    createOrUpdate(billingAccountName, billingProfileName, invoiceSectionName, parameters, options) {
        return this.client.sendOperationRequest({
            billingAccountName,
            billingProfileName,
            invoiceSectionName,
            parameters,
            options
        }, createOrUpdateOperationSpec);
    }
    /**
     * Generate invite code for a lab
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param invoiceSectionName Invoice section name.
     * @param parameters Request parameters that are provided to generate invite code.
     * @param options The options parameters.
     */
    generateInviteCode(billingAccountName, billingProfileName, invoiceSectionName, parameters, options) {
        return this.client.sendOperationRequest({
            billingAccountName,
            billingProfileName,
            invoiceSectionName,
            parameters,
            options
        }, generateInviteCodeOperationSpec);
    }
    /**
     * ListAllNext
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param nextLink The nextLink from the previous successful call to the ListAll method.
     * @param options The options parameters.
     */
    _listAllNext(billingAccountName, billingProfileName, nextLink, options) {
        return this.client.sendOperationRequest({ billingAccountName, billingProfileName, nextLink, options }, listAllNextOperationSpec);
    }
    /**
     * ListNext
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param invoiceSectionName Invoice section name.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(billingAccountName, billingProfileName, invoiceSectionName, nextLink, options) {
        return this.client.sendOperationRequest({
            billingAccountName,
            billingProfileName,
            invoiceSectionName,
            nextLink,
            options
        }, listNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listAllOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/providers/Microsoft.Education/labs",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.LabListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponseBody
        }
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.includeBudget,
        Parameters.includeDeleted
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.billingAccountName,
        Parameters.billingProfileName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/providers/Microsoft.Education/labs",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.LabListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponseBody
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.includeBudget],
    urlParameters: [
        Parameters.$host,
        Parameters.billingAccountName,
        Parameters.billingProfileName,
        Parameters.invoiceSectionName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/providers/Microsoft.Education/labs/default",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.LabDetails
        },
        default: {
            bodyMapper: Mappers.ErrorResponseBody
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.includeBudget],
    urlParameters: [
        Parameters.$host,
        Parameters.billingAccountName,
        Parameters.billingProfileName,
        Parameters.invoiceSectionName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const deleteOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/providers/Microsoft.Education/labs/default",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.ErrorResponseBody
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.billingAccountName,
        Parameters.billingProfileName,
        Parameters.invoiceSectionName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const createOrUpdateOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/providers/Microsoft.Education/labs/default",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.LabDetails
        },
        201: {
            bodyMapper: Mappers.LabDetails
        },
        default: {
            bodyMapper: Mappers.ErrorResponseBody
        }
    },
    requestBody: Parameters.parameters,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.billingAccountName,
        Parameters.billingProfileName,
        Parameters.invoiceSectionName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const generateInviteCodeOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/providers/Microsoft.Education/labs/default/generateInviteCode",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.LabDetails
        },
        default: {
            bodyMapper: Mappers.ErrorResponseBody
        }
    },
    requestBody: Parameters.parameters1,
    queryParameters: [
        Parameters.apiVersion,
        Parameters.onlyUpdateStudentCountParameter
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.billingAccountName,
        Parameters.billingProfileName,
        Parameters.invoiceSectionName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const listAllNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.LabListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponseBody
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.billingAccountName,
        Parameters.billingProfileName,
        Parameters.nextLink
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.LabListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponseBody
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.billingAccountName,
        Parameters.billingProfileName,
        Parameters.nextLink,
        Parameters.invoiceSectionName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=labs.js.map