import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Students } from "../operationsInterfaces";
import { EducationManagementClient } from "../educationManagementClient";
import { StudentDetails, StudentsListOptionalParams, StudentsGetOptionalParams, StudentsGetResponse, StudentsDeleteOptionalParams, StudentsCreateOrUpdateOptionalParams, StudentsCreateOrUpdateResponse } from "../models";
/** Class containing Students operations. */
export declare class StudentsImpl implements Students {
    private readonly client;
    /**
     * Initialize a new instance of the class Students class.
     * @param client Reference to the service client
     */
    constructor(client: EducationManagementClient);
    /**
     * Get a list of details about students that are associated with the specified lab.
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param invoiceSectionName Invoice section name.
     * @param options The options parameters.
     */
    list(billingAccountName: string, billingProfileName: string, invoiceSectionName: string, options?: StudentsListOptionalParams): PagedAsyncIterableIterator<StudentDetails>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Get a list of details about students that are associated with the specified lab.
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param invoiceSectionName Invoice section name.
     * @param options The options parameters.
     */
    private _list;
    /**
     * Get the details for a specific student in the specified lab by student alias
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param invoiceSectionName Invoice section name.
     * @param studentAlias Student alias.
     * @param options The options parameters.
     */
    get(billingAccountName: string, billingProfileName: string, invoiceSectionName: string, studentAlias: string, options?: StudentsGetOptionalParams): Promise<StudentsGetResponse>;
    /**
     * Delete the specified student based on the student alias.
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param invoiceSectionName Invoice section name.
     * @param studentAlias Student alias.
     * @param options The options parameters.
     */
    delete(billingAccountName: string, billingProfileName: string, invoiceSectionName: string, studentAlias: string, options?: StudentsDeleteOptionalParams): Promise<void>;
    /**
     * Create and add a new student to the specified lab or update the details of an existing student in a
     * lab. Note the student must have a valid tenant to accept the lab after they have been added to lab.
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param invoiceSectionName Invoice section name.
     * @param studentAlias Student alias.
     * @param parameters Request parameters that are provided to update student properties.
     * @param options The options parameters.
     */
    createOrUpdate(billingAccountName: string, billingProfileName: string, invoiceSectionName: string, studentAlias: string, parameters: StudentDetails, options?: StudentsCreateOrUpdateOptionalParams): Promise<StudentsCreateOrUpdateResponse>;
    /**
     * ListNext
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param invoiceSectionName Invoice section name.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
}
//# sourceMappingURL=students.d.ts.map