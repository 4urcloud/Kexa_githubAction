import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { PollerLike } from '@azure/core-lro';
import { PollOperationState } from '@azure/core-lro';

/**
 * Defines values for ActionType. \
 * {@link KnownActionType} can be used interchangeably with ActionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Internal**
 */
export declare type ActionType = string;

/** The authentication info */
export declare interface AuthInfoBase {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    authType: "secret" | "userAssignedIdentity" | "systemAssignedIdentity" | "servicePrincipalSecret" | "servicePrincipalCertificate";
}

export declare type AuthInfoBaseUnion = AuthInfoBase | SecretAuthInfo | UserAssignedIdentityAuthInfo | SystemAssignedIdentityAuthInfo | ServicePrincipalSecretAuthInfo | ServicePrincipalCertificateAuthInfo;

/**
 * Defines values for AuthType. \
 * {@link KnownAuthType} can be used interchangeably with AuthType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **systemAssignedIdentity** \
 * **userAssignedIdentity** \
 * **servicePrincipalSecret** \
 * **servicePrincipalCertificate** \
 * **secret**
 */
export declare type AuthType = string;

/** The resource properties when type is Azure Key Vault */
export declare interface AzureKeyVaultProperties extends AzureResourcePropertiesBase {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "KeyVault";
    /** True if connect via Kubernetes CSI Driver. */
    connectAsKubernetesCsiDriver?: boolean;
}

/** The azure resource info when target service type is AzureResource */
export declare interface AzureResource extends TargetServiceBase {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureResource";
    /** The Id of azure resource. */
    id?: string;
    /** The azure resource connection related properties. */
    resourceProperties?: AzureResourcePropertiesBaseUnion;
}

/** The azure resource properties */
export declare interface AzureResourcePropertiesBase {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "KeyVault";
}

export declare type AzureResourcePropertiesBaseUnion = AzureResourcePropertiesBase | AzureKeyVaultProperties;

/**
 * Defines values for AzureResourceType. \
 * {@link KnownAzureResourceType} can be used interchangeably with AzureResourceType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **KeyVault**
 */
export declare type AzureResourceType = string;

/**
 * Defines values for ClientType. \
 * {@link KnownClientType} can be used interchangeably with ClientType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **none** \
 * **dotnet** \
 * **java** \
 * **python** \
 * **go** \
 * **php** \
 * **ruby** \
 * **django** \
 * **nodejs** \
 * **springBoot**
 */
export declare type ClientType = string;

/** The service properties when target service type is ConfluentBootstrapServer */
export declare interface ConfluentBootstrapServer extends TargetServiceBase {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "ConfluentBootstrapServer";
    /** The endpoint of service. */
    endpoint?: string;
}

/** The service properties when target service type is ConfluentSchemaRegistry */
export declare interface ConfluentSchemaRegistry extends TargetServiceBase {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "ConfluentSchemaRegistry";
    /** The endpoint of service. */
    endpoint?: string;
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export declare type CreatedByType = string;

/** The resource management error additional info. */
export declare interface ErrorAdditionalInfo {
    /**
     * The additional info type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The additional info.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly info?: Record<string, unknown>;
}

/** The error detail. */
export declare interface ErrorDetail {
    /**
     * The error code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * The error message.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
    /**
     * The error target.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly target?: string;
    /**
     * The error details.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly details?: ErrorDetail[];
    /**
     * The error additional info.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export declare interface ErrorResponse {
    /** The error object. */
    error?: ErrorDetail;
}

/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/** The secret info when type is keyVaultSecretReference. It's for scenario that user provides a secret stored in user's keyvault and source is Azure Kubernetes. The key Vault's resource id is linked to secretStore.keyVaultId. */
export declare interface KeyVaultSecretReferenceSecretInfo extends SecretInfoBase {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    secretType: "keyVaultSecretReference";
    /** Name of the Key Vault secret. */
    name?: string;
    /** Version of the Key Vault secret. */
    version?: string;
}

/** The secret info when type is keyVaultSecretUri. It's for scenario that user provides a secret stored in user's keyvault and source is Web App, Spring Cloud or Container App. */
export declare interface KeyVaultSecretUriSecretInfo extends SecretInfoBase {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    secretType: "keyVaultSecretUri";
    /** URI to the keyvault secret */
    value?: string;
}

/** Known values of {@link ActionType} that the service accepts. */
export declare enum KnownActionType {
    /** Internal */
    Internal = "Internal"
}

/** Known values of {@link AuthType} that the service accepts. */
export declare enum KnownAuthType {
    /** SystemAssignedIdentity */
    SystemAssignedIdentity = "systemAssignedIdentity",
    /** UserAssignedIdentity */
    UserAssignedIdentity = "userAssignedIdentity",
    /** ServicePrincipalSecret */
    ServicePrincipalSecret = "servicePrincipalSecret",
    /** ServicePrincipalCertificate */
    ServicePrincipalCertificate = "servicePrincipalCertificate",
    /** Secret */
    Secret = "secret"
}

/** Known values of {@link AzureResourceType} that the service accepts. */
export declare enum KnownAzureResourceType {
    /** KeyVault */
    KeyVault = "KeyVault"
}

/** Known values of {@link ClientType} that the service accepts. */
export declare enum KnownClientType {
    /** None */
    None = "none",
    /** Dotnet */
    Dotnet = "dotnet",
    /** Java */
    Java = "java",
    /** Python */
    Python = "python",
    /** Go */
    Go = "go",
    /** Php */
    Php = "php",
    /** Ruby */
    Ruby = "ruby",
    /** Django */
    Django = "django",
    /** Nodejs */
    Nodejs = "nodejs",
    /** SpringBoot */
    SpringBoot = "springBoot"
}

/** Known values of {@link CreatedByType} that the service accepts. */
export declare enum KnownCreatedByType {
    /** User */
    User = "User",
    /** Application */
    Application = "Application",
    /** ManagedIdentity */
    ManagedIdentity = "ManagedIdentity",
    /** Key */
    Key = "Key"
}

/** Known values of {@link Origin} that the service accepts. */
export declare enum KnownOrigin {
    /** User */
    User = "user",
    /** System */
    System = "system",
    /** UserSystem */
    UserSystem = "user,system"
}

/** Known values of {@link SecretType} that the service accepts. */
export declare enum KnownSecretType {
    /** RawValue */
    RawValue = "rawValue",
    /** KeyVaultSecretUri */
    KeyVaultSecretUri = "keyVaultSecretUri",
    /** KeyVaultSecretReference */
    KeyVaultSecretReference = "keyVaultSecretReference"
}

/** Known values of {@link TargetServiceType} that the service accepts. */
export declare enum KnownTargetServiceType {
    /** AzureResource */
    AzureResource = "AzureResource",
    /** ConfluentBootstrapServer */
    ConfluentBootstrapServer = "ConfluentBootstrapServer",
    /** ConfluentSchemaRegistry */
    ConfluentSchemaRegistry = "ConfluentSchemaRegistry"
}

/** Known values of {@link ValidationResultStatus} that the service accepts. */
export declare enum KnownValidationResultStatus {
    /** Success */
    Success = "success",
    /** Failure */
    Failure = "failure",
    /** Warning */
    Warning = "warning"
}

/** Known values of {@link VNetSolutionType} that the service accepts. */
export declare enum KnownVNetSolutionType {
    /** ServiceEndpoint */
    ServiceEndpoint = "serviceEndpoint",
    /** PrivateLink */
    PrivateLink = "privateLink"
}

/** Interface representing a Linker. */
export declare interface Linker {
    /**
     * Returns list of Linkers which connects to the resource.
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
     *                    connected.
     * @param options The options parameters.
     */
    list(resourceUri: string, options?: LinkerListOptionalParams): PagedAsyncIterableIterator<LinkerResource>;
    /**
     * Returns Linker resource for a given name.
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
     *                    connected.
     * @param linkerName The name Linker resource.
     * @param options The options parameters.
     */
    get(resourceUri: string, linkerName: string, options?: LinkerGetOptionalParams): Promise<LinkerGetResponse>;
    /**
     * Create or update linker resource.
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
     *                    connected.
     * @param linkerName The name Linker resource.
     * @param parameters Linker details.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceUri: string, linkerName: string, parameters: LinkerResource, options?: LinkerCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<LinkerCreateOrUpdateResponse>, LinkerCreateOrUpdateResponse>>;
    /**
     * Create or update linker resource.
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
     *                    connected.
     * @param linkerName The name Linker resource.
     * @param parameters Linker details.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceUri: string, linkerName: string, parameters: LinkerResource, options?: LinkerCreateOrUpdateOptionalParams): Promise<LinkerCreateOrUpdateResponse>;
    /**
     * Delete a link.
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
     *                    connected.
     * @param linkerName The name Linker resource.
     * @param options The options parameters.
     */
    beginDelete(resourceUri: string, linkerName: string, options?: LinkerDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Delete a link.
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
     *                    connected.
     * @param linkerName The name Linker resource.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceUri: string, linkerName: string, options?: LinkerDeleteOptionalParams): Promise<void>;
    /**
     * Operation to update an existing link.
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
     *                    connected.
     * @param linkerName The name Linker resource.
     * @param parameters Linker details.
     * @param options The options parameters.
     */
    beginUpdate(resourceUri: string, linkerName: string, parameters: LinkerPatch, options?: LinkerUpdateOptionalParams): Promise<PollerLike<PollOperationState<LinkerUpdateResponse>, LinkerUpdateResponse>>;
    /**
     * Operation to update an existing link.
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
     *                    connected.
     * @param linkerName The name Linker resource.
     * @param parameters Linker details.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceUri: string, linkerName: string, parameters: LinkerPatch, options?: LinkerUpdateOptionalParams): Promise<LinkerUpdateResponse>;
    /**
     * Validate a link.
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
     *                    connected.
     * @param linkerName The name Linker resource.
     * @param options The options parameters.
     */
    beginValidate(resourceUri: string, linkerName: string, options?: LinkerValidateOptionalParams): Promise<PollerLike<PollOperationState<LinkerValidateResponse>, LinkerValidateResponse>>;
    /**
     * Validate a link.
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
     *                    connected.
     * @param linkerName The name Linker resource.
     * @param options The options parameters.
     */
    beginValidateAndWait(resourceUri: string, linkerName: string, options?: LinkerValidateOptionalParams): Promise<LinkerValidateResponse>;
    /**
     * list source configurations for a linker.
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
     *                    connected.
     * @param linkerName The name Linker resource.
     * @param options The options parameters.
     */
    listConfigurations(resourceUri: string, linkerName: string, options?: LinkerListConfigurationsOptionalParams): Promise<LinkerListConfigurationsResponse>;
}

/** Optional parameters. */
export declare interface LinkerCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type LinkerCreateOrUpdateResponse = LinkerResource;

/** Optional parameters. */
export declare interface LinkerDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface LinkerGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type LinkerGetResponse = LinkerResource;

/** The list of Linker. */
export declare interface LinkerList {
    /** The link used to get the next page of Linker list. */
    nextLink?: string;
    /** The list of Linkers. */
    value?: LinkerResource[];
}

/** Optional parameters. */
export declare interface LinkerListConfigurationsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listConfigurations operation. */
export declare type LinkerListConfigurationsResponse = SourceConfigurationResult;

/** Optional parameters. */
export declare interface LinkerListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type LinkerListNextResponse = LinkerList;

/** Optional parameters. */
export declare interface LinkerListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type LinkerListResponse = LinkerList;

/** A linker to be updated. */
export declare interface LinkerPatch {
    /** The target service properties */
    targetService?: TargetServiceBaseUnion;
    /** The authentication type. */
    authInfo?: AuthInfoBaseUnion;
    /** The application client type */
    clientType?: ClientType;
    /**
     * The provisioning state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /** The VNet solution. */
    vNetSolution?: VNetSolution;
    /** An option to store secret value in secure place */
    secretStore?: SecretStore;
    /** connection scope in source service. */
    scope?: string;
}

/** Linker of source and target resource */
export declare interface LinkerResource extends ProxyResource {
    /**
     * The system data.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** The target service properties */
    targetService?: TargetServiceBaseUnion;
    /** The authentication type. */
    authInfo?: AuthInfoBaseUnion;
    /** The application client type */
    clientType?: ClientType;
    /**
     * The provisioning state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /** The VNet solution. */
    vNetSolution?: VNetSolution;
    /** An option to store secret value in secure place */
    secretStore?: SecretStore;
    /** connection scope in source service. */
    scope?: string;
}

/** Optional parameters. */
export declare interface LinkerUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type LinkerUpdateResponse = LinkerResource;

/** Optional parameters. */
export declare interface LinkerValidateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the validate operation. */
export declare type LinkerValidateResponse = ValidateOperationResult;

/** Details of a REST API operation, returned from the Resource Provider Operations API */
export declare interface Operation {
    /**
     * The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action"
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for ARM/control-plane operations.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isDataAction?: boolean;
    /** Localized display information for this particular operation. */
    display?: OperationDisplay;
    /**
     * The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default value is "user,system"
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly origin?: Origin;
    /**
     * Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly actionType?: ActionType;
}

/** Localized display information for this particular operation. */
export declare interface OperationDisplay {
    /**
     * The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft Compute".
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provider?: string;
    /**
     * The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job Schedule Collections".
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resource?: string;
    /**
     * The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly operation?: string;
    /**
     * The short, localized friendly description of the operation; suitable for tool tips and detailed views.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly description?: string;
}

/** A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to get the next set of results. */
export declare interface OperationListResult {
    /**
     * List of operations supported by the resource provider
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: Operation[];
    /**
     * URL to get the next set of operation list results (if there are any).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a Operations. */
export declare interface Operations {
    /**
     * Lists the available ServiceLinker REST API operations.
     * @param options The options parameters.
     */
    list(options?: OperationsListOptionalParams): PagedAsyncIterableIterator<Operation>;
}

/** Optional parameters. */
export declare interface OperationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export declare interface OperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OperationsListResponse = OperationListResult;

/**
 * Defines values for Origin. \
 * {@link KnownOrigin} can be used interchangeably with Origin,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **user** \
 * **system** \
 * **user,system**
 */
export declare type Origin = string;

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export declare interface ProxyResource extends Resource {
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export declare interface Resource {
    /**
     * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
}

/** The authentication info when authType is secret */
export declare interface SecretAuthInfo extends AuthInfoBase {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    authType: "secret";
    /** Username or account name for secret auth. */
    name?: string;
    /** Password or key vault secret for secret auth. */
    secretInfo?: SecretInfoBaseUnion;
}

/** The secret info */
export declare interface SecretInfoBase {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    secretType: "rawValue" | "keyVaultSecretReference" | "keyVaultSecretUri";
}

export declare type SecretInfoBaseUnion = SecretInfoBase | ValueSecretInfo | KeyVaultSecretReferenceSecretInfo | KeyVaultSecretUriSecretInfo;

/** An option to store secret value in secure place */
export declare interface SecretStore {
    /** The key vault id to store secret */
    keyVaultId?: string;
}

/**
 * Defines values for SecretType. \
 * {@link KnownSecretType} can be used interchangeably with SecretType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **rawValue** \
 * **keyVaultSecretUri** \
 * **keyVaultSecretReference**
 */
export declare type SecretType = string;

export declare class ServiceLinkerManagementClient extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    /**
     * Initializes a new instance of the ServiceLinkerManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, options?: ServiceLinkerManagementClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    linker: Linker;
    operations: Operations;
}

/** Optional parameters. */
export declare interface ServiceLinkerManagementClientOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** The authentication info when authType is servicePrincipal certificate */
export declare interface ServicePrincipalCertificateAuthInfo extends AuthInfoBase {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    authType: "servicePrincipalCertificate";
    /** Application clientId for servicePrincipal auth. */
    clientId: string;
    /** Principal Id for servicePrincipal auth. */
    principalId: string;
    /** ServicePrincipal certificate for servicePrincipal auth. */
    certificate: string;
}

/** The authentication info when authType is servicePrincipal secret */
export declare interface ServicePrincipalSecretAuthInfo extends AuthInfoBase {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    authType: "servicePrincipalSecret";
    /** ServicePrincipal application clientId for servicePrincipal auth. */
    clientId: string;
    /** Principal Id for servicePrincipal auth. */
    principalId: string;
    /** Secret for servicePrincipal auth. */
    secret: string;
}

/** A configuration item for source resource */
export declare interface SourceConfiguration {
    /** The name of setting. */
    name?: string;
    /** The value of setting */
    value?: string;
}

/** Configurations for source resource, include appSettings, connectionString and serviceBindings */
export declare interface SourceConfigurationResult {
    /** The configuration properties for source resource. */
    configurations?: SourceConfiguration[];
}

/** The authentication info when authType is systemAssignedIdentity */
export declare interface SystemAssignedIdentityAuthInfo extends AuthInfoBase {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    authType: "systemAssignedIdentity";
}

/** Metadata pertaining to creation and last modification of the resource. */
export declare interface SystemData {
    /** The identity that created the resource. */
    createdBy?: string;
    /** The type of identity that created the resource. */
    createdByType?: CreatedByType;
    /** The timestamp of resource creation (UTC). */
    createdAt?: Date;
    /** The identity that last modified the resource. */
    lastModifiedBy?: string;
    /** The type of identity that last modified the resource. */
    lastModifiedByType?: CreatedByType;
    /** The timestamp of resource last modification (UTC) */
    lastModifiedAt?: Date;
}

/** The target service properties */
export declare interface TargetServiceBase {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureResource" | "ConfluentBootstrapServer" | "ConfluentSchemaRegistry";
}

export declare type TargetServiceBaseUnion = TargetServiceBase | AzureResource | ConfluentBootstrapServer | ConfluentSchemaRegistry;

/**
 * Defines values for TargetServiceType. \
 * {@link KnownTargetServiceType} can be used interchangeably with TargetServiceType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AzureResource** \
 * **ConfluentBootstrapServer** \
 * **ConfluentSchemaRegistry**
 */
export declare type TargetServiceType = string;

/** The authentication info when authType is userAssignedIdentity */
export declare interface UserAssignedIdentityAuthInfo extends AuthInfoBase {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    authType: "userAssignedIdentity";
    /** Client Id for userAssignedIdentity. */
    clientId?: string;
    /** Subscription id for userAssignedIdentity. */
    subscriptionId?: string;
}

/** The validation operation result for a linker. */
export declare interface ValidateOperationResult {
    /** Validated linker id. */
    resourceId?: string;
    /** Validation operation status. */
    status?: string;
    /** The linker name. */
    linkerName?: string;
    /** A boolean value indicating whether the connection is available or not */
    isConnectionAvailable?: boolean;
    /** The start time of the validation report. */
    reportStartTimeUtc?: Date;
    /** The end time of the validation report. */
    reportEndTimeUtc?: Date;
    /** The resource id of the linker source application. */
    sourceId?: string;
    /** The resource Id of target service. */
    targetId?: string;
    /** The authentication type. */
    authType?: AuthType;
    /** The detail of validation result */
    validationDetail?: ValidationResultItem[];
}

/** The validation item for a linker. */
export declare interface ValidationResultItem {
    /** The validation item name. */
    name?: string;
    /** The display name of validation item */
    description?: string;
    /** The result of validation */
    result?: ValidationResultStatus;
    /** The error message of validation result */
    errorMessage?: string;
    /** The error code of validation result */
    errorCode?: string;
}

/**
 * Defines values for ValidationResultStatus. \
 * {@link KnownValidationResultStatus} can be used interchangeably with ValidationResultStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **success** \
 * **failure** \
 * **warning**
 */
export declare type ValidationResultStatus = string;

/** The secret info when type is rawValue. It's for scenarios that user input the secret. */
export declare interface ValueSecretInfo extends SecretInfoBase {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    secretType: "rawValue";
    /** The actual value of the secret. */
    value?: string;
}

/** The VNet solution for linker */
export declare interface VNetSolution {
    /** Type of VNet solution. */
    type?: VNetSolutionType;
}

/**
 * Defines values for VNetSolutionType. \
 * {@link KnownVNetSolutionType} can be used interchangeably with VNetSolutionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **serviceEndpoint** \
 * **privateLink**
 */
export declare type VNetSolutionType = string;

export { }
