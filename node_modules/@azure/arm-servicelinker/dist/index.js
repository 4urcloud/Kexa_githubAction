'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var coreClient = require('@azure/core-client');
var coreRestPipeline = require('@azure/core-rest-pipeline');
var coreLro = require('@azure/core-lro');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var coreClient__namespace = /*#__PURE__*/_interopNamespace(coreClient);
var coreRestPipeline__namespace = /*#__PURE__*/_interopNamespace(coreRestPipeline);

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const pageMap = new WeakMap();
/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
function getContinuationToken(page) {
    var _a;
    if (typeof page !== "object" || page === null) {
        return undefined;
    }
    return (_a = pageMap.get(page)) === null || _a === void 0 ? void 0 : _a.continuationToken;
}
function setContinuationToken(page, continuationToken) {
    var _a;
    if (typeof page !== "object" || page === null || !continuationToken) {
        return;
    }
    const pageInfo = (_a = pageMap.get(page)) !== null && _a !== void 0 ? _a : {};
    pageInfo.continuationToken = continuationToken;
    pageMap.set(page, pageInfo);
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link TargetServiceType} that the service accepts. */
exports.KnownTargetServiceType = void 0;
(function (KnownTargetServiceType) {
    /** AzureResource */
    KnownTargetServiceType["AzureResource"] = "AzureResource";
    /** ConfluentBootstrapServer */
    KnownTargetServiceType["ConfluentBootstrapServer"] = "ConfluentBootstrapServer";
    /** ConfluentSchemaRegistry */
    KnownTargetServiceType["ConfluentSchemaRegistry"] = "ConfluentSchemaRegistry";
})(exports.KnownTargetServiceType || (exports.KnownTargetServiceType = {}));
/** Known values of {@link AuthType} that the service accepts. */
exports.KnownAuthType = void 0;
(function (KnownAuthType) {
    /** SystemAssignedIdentity */
    KnownAuthType["SystemAssignedIdentity"] = "systemAssignedIdentity";
    /** UserAssignedIdentity */
    KnownAuthType["UserAssignedIdentity"] = "userAssignedIdentity";
    /** ServicePrincipalSecret */
    KnownAuthType["ServicePrincipalSecret"] = "servicePrincipalSecret";
    /** ServicePrincipalCertificate */
    KnownAuthType["ServicePrincipalCertificate"] = "servicePrincipalCertificate";
    /** Secret */
    KnownAuthType["Secret"] = "secret";
})(exports.KnownAuthType || (exports.KnownAuthType = {}));
/** Known values of {@link ClientType} that the service accepts. */
exports.KnownClientType = void 0;
(function (KnownClientType) {
    /** None */
    KnownClientType["None"] = "none";
    /** Dotnet */
    KnownClientType["Dotnet"] = "dotnet";
    /** Java */
    KnownClientType["Java"] = "java";
    /** Python */
    KnownClientType["Python"] = "python";
    /** Go */
    KnownClientType["Go"] = "go";
    /** Php */
    KnownClientType["Php"] = "php";
    /** Ruby */
    KnownClientType["Ruby"] = "ruby";
    /** Django */
    KnownClientType["Django"] = "django";
    /** Nodejs */
    KnownClientType["Nodejs"] = "nodejs";
    /** SpringBoot */
    KnownClientType["SpringBoot"] = "springBoot";
})(exports.KnownClientType || (exports.KnownClientType = {}));
/** Known values of {@link VNetSolutionType} that the service accepts. */
exports.KnownVNetSolutionType = void 0;
(function (KnownVNetSolutionType) {
    /** ServiceEndpoint */
    KnownVNetSolutionType["ServiceEndpoint"] = "serviceEndpoint";
    /** PrivateLink */
    KnownVNetSolutionType["PrivateLink"] = "privateLink";
})(exports.KnownVNetSolutionType || (exports.KnownVNetSolutionType = {}));
/** Known values of {@link CreatedByType} that the service accepts. */
exports.KnownCreatedByType = void 0;
(function (KnownCreatedByType) {
    /** User */
    KnownCreatedByType["User"] = "User";
    /** Application */
    KnownCreatedByType["Application"] = "Application";
    /** ManagedIdentity */
    KnownCreatedByType["ManagedIdentity"] = "ManagedIdentity";
    /** Key */
    KnownCreatedByType["Key"] = "Key";
})(exports.KnownCreatedByType || (exports.KnownCreatedByType = {}));
/** Known values of {@link ValidationResultStatus} that the service accepts. */
exports.KnownValidationResultStatus = void 0;
(function (KnownValidationResultStatus) {
    /** Success */
    KnownValidationResultStatus["Success"] = "success";
    /** Failure */
    KnownValidationResultStatus["Failure"] = "failure";
    /** Warning */
    KnownValidationResultStatus["Warning"] = "warning";
})(exports.KnownValidationResultStatus || (exports.KnownValidationResultStatus = {}));
/** Known values of {@link Origin} that the service accepts. */
exports.KnownOrigin = void 0;
(function (KnownOrigin) {
    /** User */
    KnownOrigin["User"] = "user";
    /** System */
    KnownOrigin["System"] = "system";
    /** UserSystem */
    KnownOrigin["UserSystem"] = "user,system";
})(exports.KnownOrigin || (exports.KnownOrigin = {}));
/** Known values of {@link ActionType} that the service accepts. */
exports.KnownActionType = void 0;
(function (KnownActionType) {
    /** Internal */
    KnownActionType["Internal"] = "Internal";
})(exports.KnownActionType || (exports.KnownActionType = {}));
/** Known values of {@link AzureResourceType} that the service accepts. */
exports.KnownAzureResourceType = void 0;
(function (KnownAzureResourceType) {
    /** KeyVault */
    KnownAzureResourceType["KeyVault"] = "KeyVault";
})(exports.KnownAzureResourceType || (exports.KnownAzureResourceType = {}));
/** Known values of {@link SecretType} that the service accepts. */
exports.KnownSecretType = void 0;
(function (KnownSecretType) {
    /** RawValue */
    KnownSecretType["RawValue"] = "rawValue";
    /** KeyVaultSecretUri */
    KnownSecretType["KeyVaultSecretUri"] = "keyVaultSecretUri";
    /** KeyVaultSecretReference */
    KnownSecretType["KeyVaultSecretReference"] = "keyVaultSecretReference";
})(exports.KnownSecretType || (exports.KnownSecretType = {}));

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const LinkerList = {
    type: {
        name: "Composite",
        className: "LinkerList",
        modelProperties: {
            nextLink: {
                serializedName: "nextLink",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LinkerResource"
                        }
                    }
                }
            }
        }
    }
};
const TargetServiceBase = {
    type: {
        name: "Composite",
        className: "TargetServiceBase",
        uberParent: "TargetServiceBase",
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AuthInfoBase = {
    type: {
        name: "Composite",
        className: "AuthInfoBase",
        uberParent: "AuthInfoBase",
        polymorphicDiscriminator: {
            serializedName: "authType",
            clientName: "authType"
        },
        modelProperties: {
            authType: {
                serializedName: "authType",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const VNetSolution = {
    type: {
        name: "Composite",
        className: "VNetSolution",
        modelProperties: {
            type: {
                serializedName: "type",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SecretStore = {
    type: {
        name: "Composite",
        className: "SecretStore",
        modelProperties: {
            keyVaultId: {
                serializedName: "keyVaultId",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SystemData = {
    type: {
        name: "Composite",
        className: "SystemData",
        modelProperties: {
            createdBy: {
                serializedName: "createdBy",
                type: {
                    name: "String"
                }
            },
            createdByType: {
                serializedName: "createdByType",
                type: {
                    name: "String"
                }
            },
            createdAt: {
                serializedName: "createdAt",
                type: {
                    name: "DateTime"
                }
            },
            lastModifiedBy: {
                serializedName: "lastModifiedBy",
                type: {
                    name: "String"
                }
            },
            lastModifiedByType: {
                serializedName: "lastModifiedByType",
                type: {
                    name: "String"
                }
            },
            lastModifiedAt: {
                serializedName: "lastModifiedAt",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const Resource = {
    type: {
        name: "Composite",
        className: "Resource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ErrorResponse = {
    type: {
        name: "Composite",
        className: "ErrorResponse",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorDetail"
                }
            }
        }
    }
};
const ErrorDetail = {
    type: {
        name: "Composite",
        className: "ErrorDetail",
        modelProperties: {
            code: {
                serializedName: "code",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorDetail"
                        }
                    }
                }
            },
            additionalInfo: {
                serializedName: "additionalInfo",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorAdditionalInfo"
                        }
                    }
                }
            }
        }
    }
};
const ErrorAdditionalInfo = {
    type: {
        name: "Composite",
        className: "ErrorAdditionalInfo",
        modelProperties: {
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            info: {
                serializedName: "info",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
const LinkerPatch = {
    type: {
        name: "Composite",
        className: "LinkerPatch",
        modelProperties: {
            targetService: {
                serializedName: "properties.targetService",
                type: {
                    name: "Composite",
                    className: "TargetServiceBase"
                }
            },
            authInfo: {
                serializedName: "properties.authInfo",
                type: {
                    name: "Composite",
                    className: "AuthInfoBase"
                }
            },
            clientType: {
                serializedName: "properties.clientType",
                type: {
                    name: "String"
                }
            },
            provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            vNetSolution: {
                serializedName: "properties.vNetSolution",
                type: {
                    name: "Composite",
                    className: "VNetSolution"
                }
            },
            secretStore: {
                serializedName: "properties.secretStore",
                type: {
                    name: "Composite",
                    className: "SecretStore"
                }
            },
            scope: {
                serializedName: "properties.scope",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ValidateOperationResult = {
    type: {
        name: "Composite",
        className: "ValidateOperationResult",
        modelProperties: {
            resourceId: {
                serializedName: "resourceId",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            linkerName: {
                serializedName: "properties.linkerName",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            isConnectionAvailable: {
                serializedName: "properties.isConnectionAvailable",
                nullable: true,
                type: {
                    name: "Boolean"
                }
            },
            reportStartTimeUtc: {
                serializedName: "properties.reportStartTimeUtc",
                nullable: true,
                type: {
                    name: "DateTime"
                }
            },
            reportEndTimeUtc: {
                serializedName: "properties.reportEndTimeUtc",
                nullable: true,
                type: {
                    name: "DateTime"
                }
            },
            sourceId: {
                serializedName: "properties.sourceId",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            targetId: {
                serializedName: "properties.targetId",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            authType: {
                serializedName: "properties.authType",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            validationDetail: {
                serializedName: "properties.validationDetail",
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ValidationResultItem"
                        }
                    }
                }
            }
        }
    }
};
const ValidationResultItem = {
    type: {
        name: "Composite",
        className: "ValidationResultItem",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            result: {
                serializedName: "result",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            errorMessage: {
                serializedName: "errorMessage",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            errorCode: {
                serializedName: "errorCode",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SourceConfigurationResult = {
    type: {
        name: "Composite",
        className: "SourceConfigurationResult",
        modelProperties: {
            configurations: {
                serializedName: "configurations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SourceConfiguration"
                        }
                    }
                }
            }
        }
    }
};
const SourceConfiguration = {
    type: {
        name: "Composite",
        className: "SourceConfiguration",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationListResult = {
    type: {
        name: "Composite",
        className: "OperationListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Operation"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Operation = {
    type: {
        name: "Composite",
        className: "Operation",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            isDataAction: {
                serializedName: "isDataAction",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            display: {
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "OperationDisplay"
                }
            },
            origin: {
                serializedName: "origin",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            actionType: {
                serializedName: "actionType",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationDisplay = {
    type: {
        name: "Composite",
        className: "OperationDisplay",
        modelProperties: {
            provider: {
                serializedName: "provider",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "resource",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AzureResourcePropertiesBase = {
    type: {
        name: "Composite",
        className: "AzureResourcePropertiesBase",
        uberParent: "AzureResourcePropertiesBase",
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SecretInfoBase = {
    type: {
        name: "Composite",
        className: "SecretInfoBase",
        uberParent: "SecretInfoBase",
        polymorphicDiscriminator: {
            serializedName: "secretType",
            clientName: "secretType"
        },
        modelProperties: {
            secretType: {
                serializedName: "secretType",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AzureResource = {
    serializedName: "AzureResource",
    type: {
        name: "Composite",
        className: "AzureResource",
        uberParent: "TargetServiceBase",
        polymorphicDiscriminator: TargetServiceBase.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TargetServiceBase.type.modelProperties), { id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            }, resourceProperties: {
                serializedName: "resourceProperties",
                type: {
                    name: "Composite",
                    className: "AzureResourcePropertiesBase"
                }
            } })
    }
};
const ConfluentBootstrapServer = {
    serializedName: "ConfluentBootstrapServer",
    type: {
        name: "Composite",
        className: "ConfluentBootstrapServer",
        uberParent: "TargetServiceBase",
        polymorphicDiscriminator: TargetServiceBase.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TargetServiceBase.type.modelProperties), { endpoint: {
                serializedName: "endpoint",
                type: {
                    name: "String"
                }
            } })
    }
};
const ConfluentSchemaRegistry = {
    serializedName: "ConfluentSchemaRegistry",
    type: {
        name: "Composite",
        className: "ConfluentSchemaRegistry",
        uberParent: "TargetServiceBase",
        polymorphicDiscriminator: TargetServiceBase.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TargetServiceBase.type.modelProperties), { endpoint: {
                serializedName: "endpoint",
                type: {
                    name: "String"
                }
            } })
    }
};
const SecretAuthInfo = {
    serializedName: "secret",
    type: {
        name: "Composite",
        className: "SecretAuthInfo",
        uberParent: "AuthInfoBase",
        polymorphicDiscriminator: AuthInfoBase.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AuthInfoBase.type.modelProperties), { name: {
                serializedName: "name",
                nullable: true,
                type: {
                    name: "String"
                }
            }, secretInfo: {
                serializedName: "secretInfo",
                type: {
                    name: "Composite",
                    className: "SecretInfoBase"
                }
            } })
    }
};
const UserAssignedIdentityAuthInfo = {
    serializedName: "userAssignedIdentity",
    type: {
        name: "Composite",
        className: "UserAssignedIdentityAuthInfo",
        uberParent: "AuthInfoBase",
        polymorphicDiscriminator: AuthInfoBase.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AuthInfoBase.type.modelProperties), { clientId: {
                serializedName: "clientId",
                type: {
                    name: "String"
                }
            }, subscriptionId: {
                serializedName: "subscriptionId",
                type: {
                    name: "String"
                }
            } })
    }
};
const SystemAssignedIdentityAuthInfo = {
    serializedName: "systemAssignedIdentity",
    type: {
        name: "Composite",
        className: "SystemAssignedIdentityAuthInfo",
        uberParent: "AuthInfoBase",
        polymorphicDiscriminator: AuthInfoBase.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, AuthInfoBase.type.modelProperties)
    }
};
const ServicePrincipalSecretAuthInfo = {
    serializedName: "servicePrincipalSecret",
    type: {
        name: "Composite",
        className: "ServicePrincipalSecretAuthInfo",
        uberParent: "AuthInfoBase",
        polymorphicDiscriminator: AuthInfoBase.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AuthInfoBase.type.modelProperties), { clientId: {
                serializedName: "clientId",
                required: true,
                type: {
                    name: "String"
                }
            }, principalId: {
                serializedName: "principalId",
                required: true,
                type: {
                    name: "String"
                }
            }, secret: {
                serializedName: "secret",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const ServicePrincipalCertificateAuthInfo = {
    serializedName: "servicePrincipalCertificate",
    type: {
        name: "Composite",
        className: "ServicePrincipalCertificateAuthInfo",
        uberParent: "AuthInfoBase",
        polymorphicDiscriminator: AuthInfoBase.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AuthInfoBase.type.modelProperties), { clientId: {
                serializedName: "clientId",
                required: true,
                type: {
                    name: "String"
                }
            }, principalId: {
                serializedName: "principalId",
                required: true,
                type: {
                    name: "String"
                }
            }, certificate: {
                serializedName: "certificate",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const ProxyResource = {
    type: {
        name: "Composite",
        className: "ProxyResource",
        modelProperties: Object.assign({}, Resource.type.modelProperties)
    }
};
const AzureKeyVaultProperties = {
    serializedName: "KeyVault",
    type: {
        name: "Composite",
        className: "AzureKeyVaultProperties",
        uberParent: "AzureResourcePropertiesBase",
        polymorphicDiscriminator: AzureResourcePropertiesBase.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AzureResourcePropertiesBase.type.modelProperties), { connectAsKubernetesCsiDriver: {
                serializedName: "connectAsKubernetesCsiDriver",
                nullable: true,
                type: {
                    name: "Boolean"
                }
            } })
    }
};
const ValueSecretInfo = {
    serializedName: "rawValue",
    type: {
        name: "Composite",
        className: "ValueSecretInfo",
        uberParent: "SecretInfoBase",
        polymorphicDiscriminator: SecretInfoBase.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, SecretInfoBase.type.modelProperties), { value: {
                serializedName: "value",
                nullable: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const KeyVaultSecretReferenceSecretInfo = {
    serializedName: "keyVaultSecretReference",
    type: {
        name: "Composite",
        className: "KeyVaultSecretReferenceSecretInfo",
        uberParent: "SecretInfoBase",
        polymorphicDiscriminator: SecretInfoBase.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, SecretInfoBase.type.modelProperties), { name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            }, version: {
                serializedName: "version",
                nullable: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const KeyVaultSecretUriSecretInfo = {
    serializedName: "keyVaultSecretUri",
    type: {
        name: "Composite",
        className: "KeyVaultSecretUriSecretInfo",
        uberParent: "SecretInfoBase",
        polymorphicDiscriminator: SecretInfoBase.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, SecretInfoBase.type.modelProperties), { value: {
                serializedName: "value",
                type: {
                    name: "String"
                }
            } })
    }
};
const LinkerResource = {
    type: {
        name: "Composite",
        className: "LinkerResource",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, targetService: {
                serializedName: "properties.targetService",
                type: {
                    name: "Composite",
                    className: "TargetServiceBase"
                }
            }, authInfo: {
                serializedName: "properties.authInfo",
                type: {
                    name: "Composite",
                    className: "AuthInfoBase"
                }
            }, clientType: {
                serializedName: "properties.clientType",
                type: {
                    name: "String"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, vNetSolution: {
                serializedName: "properties.vNetSolution",
                type: {
                    name: "Composite",
                    className: "VNetSolution"
                }
            }, secretStore: {
                serializedName: "properties.secretStore",
                type: {
                    name: "Composite",
                    className: "SecretStore"
                }
            }, scope: {
                serializedName: "properties.scope",
                nullable: true,
                type: {
                    name: "String"
                }
            } })
    }
};
let discriminators = {
    TargetServiceBase: TargetServiceBase,
    AuthInfoBase: AuthInfoBase,
    AzureResourcePropertiesBase: AzureResourcePropertiesBase,
    SecretInfoBase: SecretInfoBase,
    "TargetServiceBase.AzureResource": AzureResource,
    "TargetServiceBase.ConfluentBootstrapServer": ConfluentBootstrapServer,
    "TargetServiceBase.ConfluentSchemaRegistry": ConfluentSchemaRegistry,
    "AuthInfoBase.secret": SecretAuthInfo,
    "AuthInfoBase.userAssignedIdentity": UserAssignedIdentityAuthInfo,
    "AuthInfoBase.systemAssignedIdentity": SystemAssignedIdentityAuthInfo,
    "AuthInfoBase.servicePrincipalSecret": ServicePrincipalSecretAuthInfo,
    "AuthInfoBase.servicePrincipalCertificate": ServicePrincipalCertificateAuthInfo,
    "AzureResourcePropertiesBase.KeyVault": AzureKeyVaultProperties,
    "SecretInfoBase.rawValue": ValueSecretInfo,
    "SecretInfoBase.keyVaultSecretReference": KeyVaultSecretReferenceSecretInfo,
    "SecretInfoBase.keyVaultSecretUri": KeyVaultSecretUriSecretInfo
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    LinkerList: LinkerList,
    TargetServiceBase: TargetServiceBase,
    AuthInfoBase: AuthInfoBase,
    VNetSolution: VNetSolution,
    SecretStore: SecretStore,
    SystemData: SystemData,
    Resource: Resource,
    ErrorResponse: ErrorResponse,
    ErrorDetail: ErrorDetail,
    ErrorAdditionalInfo: ErrorAdditionalInfo,
    LinkerPatch: LinkerPatch,
    ValidateOperationResult: ValidateOperationResult,
    ValidationResultItem: ValidationResultItem,
    SourceConfigurationResult: SourceConfigurationResult,
    SourceConfiguration: SourceConfiguration,
    OperationListResult: OperationListResult,
    Operation: Operation,
    OperationDisplay: OperationDisplay,
    AzureResourcePropertiesBase: AzureResourcePropertiesBase,
    SecretInfoBase: SecretInfoBase,
    AzureResource: AzureResource,
    ConfluentBootstrapServer: ConfluentBootstrapServer,
    ConfluentSchemaRegistry: ConfluentSchemaRegistry,
    SecretAuthInfo: SecretAuthInfo,
    UserAssignedIdentityAuthInfo: UserAssignedIdentityAuthInfo,
    SystemAssignedIdentityAuthInfo: SystemAssignedIdentityAuthInfo,
    ServicePrincipalSecretAuthInfo: ServicePrincipalSecretAuthInfo,
    ServicePrincipalCertificateAuthInfo: ServicePrincipalCertificateAuthInfo,
    ProxyResource: ProxyResource,
    AzureKeyVaultProperties: AzureKeyVaultProperties,
    ValueSecretInfo: ValueSecretInfo,
    KeyVaultSecretReferenceSecretInfo: KeyVaultSecretReferenceSecretInfo,
    KeyVaultSecretUriSecretInfo: KeyVaultSecretUriSecretInfo,
    LinkerResource: LinkerResource,
    discriminators: discriminators
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const resourceUri = {
    parameterPath: "resourceUri",
    mapper: {
        serializedName: "resourceUri",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2022-05-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const linkerName = {
    parameterPath: "linkerName",
    mapper: {
        serializedName: "linkerName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const parameters = {
    parameterPath: "parameters",
    mapper: LinkerResource
};
const parameters1 = {
    parameterPath: "parameters",
    mapper: LinkerPatch
};
const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class LroImpl {
    constructor(sendOperationFn, args, spec, requestPath = spec.path, requestMethod = spec.httpMethod) {
        this.sendOperationFn = sendOperationFn;
        this.args = args;
        this.spec = spec;
        this.requestPath = requestPath;
        this.requestMethod = requestMethod;
    }
    sendInitialRequest() {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            return this.sendOperationFn(this.args, this.spec);
        });
    }
    sendPollRequest(path) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const _a = this.spec, restSpec = tslib.__rest(_a, ["requestBody"]);
            return this.sendOperationFn(this.args, Object.assign(Object.assign({}, restSpec), { path, httpMethod: "GET" }));
        });
    }
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Linker operations. */
class LinkerImpl {
    /**
     * Initialize a new instance of the class Linker class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Returns list of Linkers which connects to the resource.
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
     *                    connected.
     * @param options The options parameters.
     */
    list(resourceUri, options) {
        const iter = this.listPagingAll(resourceUri, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceUri, options, settings);
            }
        };
    }
    listPagingPage(resourceUri, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceUri, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceUri, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceUri, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceUri, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Returns list of Linkers which connects to the resource.
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
     *                    connected.
     * @param options The options parameters.
     */
    _list(resourceUri, options) {
        return this.client.sendOperationRequest({ resourceUri, options }, listOperationSpec$1);
    }
    /**
     * Returns Linker resource for a given name.
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
     *                    connected.
     * @param linkerName The name Linker resource.
     * @param options The options parameters.
     */
    get(resourceUri, linkerName, options) {
        return this.client.sendOperationRequest({ resourceUri, linkerName, options }, getOperationSpec);
    }
    /**
     * Create or update linker resource.
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
     *                    connected.
     * @param linkerName The name Linker resource.
     * @param parameters Linker details.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceUri, linkerName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceUri, linkerName, parameters, options }, createOrUpdateOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                lroResourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create or update linker resource.
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
     *                    connected.
     * @param linkerName The name Linker resource.
     * @param parameters Linker details.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceUri, linkerName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceUri, linkerName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Delete a link.
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
     *                    connected.
     * @param linkerName The name Linker resource.
     * @param options The options parameters.
     */
    beginDelete(resourceUri, linkerName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceUri, linkerName, options }, deleteOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                lroResourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Delete a link.
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
     *                    connected.
     * @param linkerName The name Linker resource.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceUri, linkerName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceUri, linkerName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Operation to update an existing link.
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
     *                    connected.
     * @param linkerName The name Linker resource.
     * @param parameters Linker details.
     * @param options The options parameters.
     */
    beginUpdate(resourceUri, linkerName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceUri, linkerName, parameters, options }, updateOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                lroResourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Operation to update an existing link.
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
     *                    connected.
     * @param linkerName The name Linker resource.
     * @param parameters Linker details.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceUri, linkerName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceUri, linkerName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Validate a link.
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
     *                    connected.
     * @param linkerName The name Linker resource.
     * @param options The options parameters.
     */
    beginValidate(resourceUri, linkerName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceUri, linkerName, options }, validateOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                lroResourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Validate a link.
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
     *                    connected.
     * @param linkerName The name Linker resource.
     * @param options The options parameters.
     */
    beginValidateAndWait(resourceUri, linkerName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginValidate(resourceUri, linkerName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * list source configurations for a linker.
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
     *                    connected.
     * @param linkerName The name Linker resource.
     * @param options The options parameters.
     */
    listConfigurations(resourceUri, linkerName, options) {
        return this.client.sendOperationRequest({ resourceUri, linkerName, options }, listConfigurationsOperationSpec);
    }
    /**
     * ListNext
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
     *                    connected.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceUri, nextLink, options) {
        return this.client.sendOperationRequest({ resourceUri, nextLink, options }, listNextOperationSpec$1);
    }
}
// Operation Specifications
const serializer$1 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$1 = {
    path: "/{resourceUri}/providers/Microsoft.ServiceLinker/linkers",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: LinkerList
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, resourceUri],
    headerParameters: [accept],
    serializer: serializer$1
};
const getOperationSpec = {
    path: "/{resourceUri}/providers/Microsoft.ServiceLinker/linkers/{linkerName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: LinkerResource
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceUri,
        linkerName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const createOrUpdateOperationSpec = {
    path: "/{resourceUri}/providers/Microsoft.ServiceLinker/linkers/{linkerName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: LinkerResource
        },
        201: {
            bodyMapper: LinkerResource
        },
        202: {
            bodyMapper: LinkerResource
        },
        204: {
            bodyMapper: LinkerResource
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceUri,
        linkerName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$1
};
const deleteOperationSpec = {
    path: "/{resourceUri}/providers/Microsoft.ServiceLinker/linkers/{linkerName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceUri,
        linkerName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const updateOperationSpec = {
    path: "/{resourceUri}/providers/Microsoft.ServiceLinker/linkers/{linkerName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: LinkerResource
        },
        201: {
            bodyMapper: LinkerResource
        },
        202: {
            bodyMapper: LinkerResource
        },
        204: {
            bodyMapper: LinkerResource
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters1,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceUri,
        linkerName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$1
};
const validateOperationSpec = {
    path: "/{resourceUri}/providers/Microsoft.ServiceLinker/linkers/{linkerName}/validateLinker",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ValidateOperationResult
        },
        201: {
            bodyMapper: ValidateOperationResult
        },
        202: {
            bodyMapper: ValidateOperationResult
        },
        204: {
            bodyMapper: ValidateOperationResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceUri,
        linkerName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listConfigurationsOperationSpec = {
    path: "/{resourceUri}/providers/Microsoft.ServiceLinker/linkers/{linkerName}/listConfigurations",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: SourceConfigurationResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceUri,
        linkerName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: LinkerList
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        resourceUri,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$1
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Operations operations. */
class OperationsImpl {
    /**
     * Initialize a new instance of the class Operations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the available ServiceLinker REST API operations.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists the available ServiceLinker REST API operations.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/providers/Microsoft.ServiceLinker/operations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [$host, nextLink],
    headerParameters: [accept],
    serializer
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class ServiceLinkerManagementClient extends coreClient__namespace.ServiceClient {
    /**
     * Initializes a new instance of the ServiceLinkerManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param options The parameter options
     */
    constructor(credentials, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-servicelinker/2.1.0`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName
            });
            this.pipeline.addPolicy(coreRestPipeline__namespace.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient__namespace.authorizeRequestOnClaimChallenge
                }
            }));
        }
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.apiVersion = options.apiVersion || "2022-05-01";
        this.linker = new LinkerImpl(this);
        this.operations = new OperationsImpl(this);
        this.addCustomApiVersionPolicy(options.apiVersion);
    }
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    addCustomApiVersionPolicy(apiVersion) {
        if (!apiVersion) {
            return;
        }
        const apiVersionPolicy = {
            name: "CustomApiVersionPolicy",
            sendRequest(request, next) {
                return tslib.__awaiter(this, void 0, void 0, function* () {
                    const param = request.url.split("?");
                    if (param.length > 1) {
                        const newParams = param[1].split("&").map((item) => {
                            if (item.indexOf("api-version") > -1) {
                                return "api-version=" + apiVersion;
                            }
                            else {
                                return item;
                            }
                        });
                        request.url = param[0] + "?" + newParams.join("&");
                    }
                    return next(request);
                });
            }
        };
        this.pipeline.addPolicy(apiVersionPolicy);
    }
}

exports.ServiceLinkerManagementClient = ServiceLinkerManagementClient;
exports.getContinuationToken = getContinuationToken;
//# sourceMappingURL=index.js.map
