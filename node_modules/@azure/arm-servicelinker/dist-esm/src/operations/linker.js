/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await, __awaiter } from "tslib";
import { setContinuationToken } from "../pagingHelper";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
/// <reference lib="esnext.asynciterable" />
/** Class containing Linker operations. */
export class LinkerImpl {
    /**
     * Initialize a new instance of the class Linker class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Returns list of Linkers which connects to the resource.
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
     *                    connected.
     * @param options The options parameters.
     */
    list(resourceUri, options) {
        const iter = this.listPagingAll(resourceUri, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceUri, options, settings);
            }
        };
    }
    listPagingPage(resourceUri, options, settings) {
        return __asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._list(resourceUri, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listNext(resourceUri, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listPagingAll(resourceUri, options) {
        return __asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = __asyncValues(this.listPagingPage(resourceUri, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Returns list of Linkers which connects to the resource.
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
     *                    connected.
     * @param options The options parameters.
     */
    _list(resourceUri, options) {
        return this.client.sendOperationRequest({ resourceUri, options }, listOperationSpec);
    }
    /**
     * Returns Linker resource for a given name.
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
     *                    connected.
     * @param linkerName The name Linker resource.
     * @param options The options parameters.
     */
    get(resourceUri, linkerName, options) {
        return this.client.sendOperationRequest({ resourceUri, linkerName, options }, getOperationSpec);
    }
    /**
     * Create or update linker resource.
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
     *                    connected.
     * @param linkerName The name Linker resource.
     * @param parameters Linker details.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceUri, linkerName, parameters, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceUri, linkerName, parameters, options }, createOrUpdateOperationSpec);
            const poller = new LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                lroResourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create or update linker resource.
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
     *                    connected.
     * @param linkerName The name Linker resource.
     * @param parameters Linker details.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceUri, linkerName, parameters, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceUri, linkerName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Delete a link.
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
     *                    connected.
     * @param linkerName The name Linker resource.
     * @param options The options parameters.
     */
    beginDelete(resourceUri, linkerName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceUri, linkerName, options }, deleteOperationSpec);
            const poller = new LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                lroResourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Delete a link.
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
     *                    connected.
     * @param linkerName The name Linker resource.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceUri, linkerName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceUri, linkerName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Operation to update an existing link.
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
     *                    connected.
     * @param linkerName The name Linker resource.
     * @param parameters Linker details.
     * @param options The options parameters.
     */
    beginUpdate(resourceUri, linkerName, parameters, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceUri, linkerName, parameters, options }, updateOperationSpec);
            const poller = new LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                lroResourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Operation to update an existing link.
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
     *                    connected.
     * @param linkerName The name Linker resource.
     * @param parameters Linker details.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceUri, linkerName, parameters, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceUri, linkerName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Validate a link.
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
     *                    connected.
     * @param linkerName The name Linker resource.
     * @param options The options parameters.
     */
    beginValidate(resourceUri, linkerName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceUri, linkerName, options }, validateOperationSpec);
            const poller = new LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                lroResourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Validate a link.
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
     *                    connected.
     * @param linkerName The name Linker resource.
     * @param options The options parameters.
     */
    beginValidateAndWait(resourceUri, linkerName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginValidate(resourceUri, linkerName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * list source configurations for a linker.
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
     *                    connected.
     * @param linkerName The name Linker resource.
     * @param options The options parameters.
     */
    listConfigurations(resourceUri, linkerName, options) {
        return this.client.sendOperationRequest({ resourceUri, linkerName, options }, listConfigurationsOperationSpec);
    }
    /**
     * ListNext
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
     *                    connected.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceUri, nextLink, options) {
        return this.client.sendOperationRequest({ resourceUri, nextLink, options }, listNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/{resourceUri}/providers/Microsoft.ServiceLinker/linkers",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.LinkerList
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.resourceUri],
    headerParameters: [Parameters.accept],
    serializer
};
const getOperationSpec = {
    path: "/{resourceUri}/providers/Microsoft.ServiceLinker/linkers/{linkerName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.LinkerResource
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceUri,
        Parameters.linkerName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const createOrUpdateOperationSpec = {
    path: "/{resourceUri}/providers/Microsoft.ServiceLinker/linkers/{linkerName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.LinkerResource
        },
        201: {
            bodyMapper: Mappers.LinkerResource
        },
        202: {
            bodyMapper: Mappers.LinkerResource
        },
        204: {
            bodyMapper: Mappers.LinkerResource
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.parameters,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceUri,
        Parameters.linkerName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const deleteOperationSpec = {
    path: "/{resourceUri}/providers/Microsoft.ServiceLinker/linkers/{linkerName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceUri,
        Parameters.linkerName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const updateOperationSpec = {
    path: "/{resourceUri}/providers/Microsoft.ServiceLinker/linkers/{linkerName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Mappers.LinkerResource
        },
        201: {
            bodyMapper: Mappers.LinkerResource
        },
        202: {
            bodyMapper: Mappers.LinkerResource
        },
        204: {
            bodyMapper: Mappers.LinkerResource
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.parameters1,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceUri,
        Parameters.linkerName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const validateOperationSpec = {
    path: "/{resourceUri}/providers/Microsoft.ServiceLinker/linkers/{linkerName}/validateLinker",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.ValidateOperationResult
        },
        201: {
            bodyMapper: Mappers.ValidateOperationResult
        },
        202: {
            bodyMapper: Mappers.ValidateOperationResult
        },
        204: {
            bodyMapper: Mappers.ValidateOperationResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceUri,
        Parameters.linkerName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listConfigurationsOperationSpec = {
    path: "/{resourceUri}/providers/Microsoft.ServiceLinker/linkers/{linkerName}/listConfigurations",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.SourceConfigurationResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceUri,
        Parameters.linkerName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.LinkerList
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.resourceUri,
        Parameters.nextLink
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=linker.js.map