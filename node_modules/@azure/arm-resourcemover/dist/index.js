'use strict';

var tslib = require('tslib');
var coreClient = require('@azure/core-client');
var coreRestPipeline = require('@azure/core-rest-pipeline');
var coreLro = require('@azure/core-lro');

function _interopNamespaceDefault(e) {
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n.default = e;
    return Object.freeze(n);
}

var coreClient__namespace = /*#__PURE__*/_interopNamespaceDefault(coreClient);
var coreRestPipeline__namespace = /*#__PURE__*/_interopNamespaceDefault(coreRestPipeline);

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const pageMap = new WeakMap();
/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
function getContinuationToken(page) {
    var _a;
    if (typeof page !== "object" || page === null) {
        return undefined;
    }
    return (_a = pageMap.get(page)) === null || _a === void 0 ? void 0 : _a.continuationToken;
}
function setContinuationToken(page, continuationToken) {
    var _a;
    if (typeof page !== "object" || page === null || !continuationToken) {
        return;
    }
    const pageInfo = (_a = pageMap.get(page)) !== null && _a !== void 0 ? _a : {};
    pageInfo.continuationToken = continuationToken;
    pageMap.set(page, pageInfo);
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link ResourceIdentityType} that the service accepts. */
exports.KnownResourceIdentityType = void 0;
(function (KnownResourceIdentityType) {
    /** None */
    KnownResourceIdentityType["None"] = "None";
    /** SystemAssigned */
    KnownResourceIdentityType["SystemAssigned"] = "SystemAssigned";
    /** UserAssigned */
    KnownResourceIdentityType["UserAssigned"] = "UserAssigned";
})(exports.KnownResourceIdentityType || (exports.KnownResourceIdentityType = {}));
/** Known values of {@link ProvisioningState} that the service accepts. */
exports.KnownProvisioningState = void 0;
(function (KnownProvisioningState) {
    /** Succeeded */
    KnownProvisioningState["Succeeded"] = "Succeeded";
    /** Updating */
    KnownProvisioningState["Updating"] = "Updating";
    /** Creating */
    KnownProvisioningState["Creating"] = "Creating";
    /** Failed */
    KnownProvisioningState["Failed"] = "Failed";
})(exports.KnownProvisioningState || (exports.KnownProvisioningState = {}));
/** Known values of {@link MoveType} that the service accepts. */
exports.KnownMoveType = void 0;
(function (KnownMoveType) {
    /** RegionToRegion */
    KnownMoveType["RegionToRegion"] = "RegionToRegion";
    /** RegionToZone */
    KnownMoveType["RegionToZone"] = "RegionToZone";
})(exports.KnownMoveType || (exports.KnownMoveType = {}));
/** Known values of {@link CreatedByType} that the service accepts. */
exports.KnownCreatedByType = void 0;
(function (KnownCreatedByType) {
    /** User */
    KnownCreatedByType["User"] = "User";
    /** Application */
    KnownCreatedByType["Application"] = "Application";
    /** ManagedIdentity */
    KnownCreatedByType["ManagedIdentity"] = "ManagedIdentity";
    /** Key */
    KnownCreatedByType["Key"] = "Key";
})(exports.KnownCreatedByType || (exports.KnownCreatedByType = {}));
/** Known values of {@link MoveResourceInputType} that the service accepts. */
exports.KnownMoveResourceInputType = void 0;
(function (KnownMoveResourceInputType) {
    /** MoveResourceId */
    KnownMoveResourceInputType["MoveResourceId"] = "MoveResourceId";
    /** MoveResourceSourceId */
    KnownMoveResourceInputType["MoveResourceSourceId"] = "MoveResourceSourceId";
})(exports.KnownMoveResourceInputType || (exports.KnownMoveResourceInputType = {}));
/** Known values of {@link MoveState} that the service accepts. */
exports.KnownMoveState = void 0;
(function (KnownMoveState) {
    /** AssignmentPending */
    KnownMoveState["AssignmentPending"] = "AssignmentPending";
    /** PreparePending */
    KnownMoveState["PreparePending"] = "PreparePending";
    /** PrepareInProgress */
    KnownMoveState["PrepareInProgress"] = "PrepareInProgress";
    /** PrepareFailed */
    KnownMoveState["PrepareFailed"] = "PrepareFailed";
    /** MovePending */
    KnownMoveState["MovePending"] = "MovePending";
    /** MoveInProgress */
    KnownMoveState["MoveInProgress"] = "MoveInProgress";
    /** MoveFailed */
    KnownMoveState["MoveFailed"] = "MoveFailed";
    /** DiscardInProgress */
    KnownMoveState["DiscardInProgress"] = "DiscardInProgress";
    /** DiscardFailed */
    KnownMoveState["DiscardFailed"] = "DiscardFailed";
    /** CommitPending */
    KnownMoveState["CommitPending"] = "CommitPending";
    /** CommitInProgress */
    KnownMoveState["CommitInProgress"] = "CommitInProgress";
    /** CommitFailed */
    KnownMoveState["CommitFailed"] = "CommitFailed";
    /** Committed */
    KnownMoveState["Committed"] = "Committed";
    /** DeleteSourcePending */
    KnownMoveState["DeleteSourcePending"] = "DeleteSourcePending";
    /** ResourceMoveCompleted */
    KnownMoveState["ResourceMoveCompleted"] = "ResourceMoveCompleted";
})(exports.KnownMoveState || (exports.KnownMoveState = {}));
/** Known values of {@link JobName} that the service accepts. */
exports.KnownJobName = void 0;
(function (KnownJobName) {
    /** InitialSync */
    KnownJobName["InitialSync"] = "InitialSync";
})(exports.KnownJobName || (exports.KnownJobName = {}));
/** Known values of {@link ResolutionType} that the service accepts. */
exports.KnownResolutionType = void 0;
(function (KnownResolutionType) {
    /** Manual */
    KnownResolutionType["Manual"] = "Manual";
    /** Automatic */
    KnownResolutionType["Automatic"] = "Automatic";
})(exports.KnownResolutionType || (exports.KnownResolutionType = {}));
/** Known values of {@link DependencyType} that the service accepts. */
exports.KnownDependencyType = void 0;
(function (KnownDependencyType) {
    /** RequiredForPrepare */
    KnownDependencyType["RequiredForPrepare"] = "RequiredForPrepare";
    /** RequiredForMove */
    KnownDependencyType["RequiredForMove"] = "RequiredForMove";
})(exports.KnownDependencyType || (exports.KnownDependencyType = {}));
/** Known values of {@link DependencyLevel} that the service accepts. */
exports.KnownDependencyLevel = void 0;
(function (KnownDependencyLevel) {
    /** Direct */
    KnownDependencyLevel["Direct"] = "Direct";
    /** Descendant */
    KnownDependencyLevel["Descendant"] = "Descendant";
})(exports.KnownDependencyLevel || (exports.KnownDependencyLevel = {}));
/** Known values of {@link TargetAvailabilityZone} that the service accepts. */
exports.KnownTargetAvailabilityZone = void 0;
(function (KnownTargetAvailabilityZone) {
    /** One */
    KnownTargetAvailabilityZone["One"] = "1";
    /** Two */
    KnownTargetAvailabilityZone["Two"] = "2";
    /** Three */
    KnownTargetAvailabilityZone["Three"] = "3";
    /** NA */
    KnownTargetAvailabilityZone["NA"] = "NA";
})(exports.KnownTargetAvailabilityZone || (exports.KnownTargetAvailabilityZone = {}));
/** Known values of {@link ZoneRedundant} that the service accepts. */
exports.KnownZoneRedundant = void 0;
(function (KnownZoneRedundant) {
    /** Enable */
    KnownZoneRedundant["Enable"] = "Enable";
    /** Disable */
    KnownZoneRedundant["Disable"] = "Disable";
})(exports.KnownZoneRedundant || (exports.KnownZoneRedundant = {}));

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const MoveCollection = {
    type: {
        name: "Composite",
        className: "MoveCollection",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            etag: {
                serializedName: "etag",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "Identity"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "MoveCollectionProperties"
                }
            },
            systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }
        }
    }
};
const Identity = {
    type: {
        name: "Composite",
        className: "Identity",
        modelProperties: {
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            principalId: {
                serializedName: "principalId",
                type: {
                    name: "String"
                }
            },
            tenantId: {
                serializedName: "tenantId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MoveCollectionProperties = {
    type: {
        name: "Composite",
        className: "MoveCollectionProperties",
        modelProperties: {
            sourceRegion: {
                serializedName: "sourceRegion",
                type: {
                    name: "String"
                }
            },
            targetRegion: {
                serializedName: "targetRegion",
                type: {
                    name: "String"
                }
            },
            moveRegion: {
                serializedName: "moveRegion",
                type: {
                    name: "String"
                }
            },
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "version",
                type: {
                    name: "String"
                }
            },
            moveType: {
                serializedName: "moveType",
                type: {
                    name: "String"
                }
            },
            errors: {
                serializedName: "errors",
                type: {
                    name: "Composite",
                    className: "MoveCollectionPropertiesErrors"
                }
            }
        }
    }
};
const MoveResourceError = {
    type: {
        name: "Composite",
        className: "MoveResourceError",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "MoveResourceErrorBody"
                }
            }
        }
    }
};
const MoveResourceErrorBody = {
    type: {
        name: "Composite",
        className: "MoveResourceErrorBody",
        modelProperties: {
            code: {
                serializedName: "code",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MoveResourceErrorBody"
                        }
                    }
                }
            }
        }
    }
};
const SystemData = {
    type: {
        name: "Composite",
        className: "SystemData",
        modelProperties: {
            createdBy: {
                serializedName: "createdBy",
                type: {
                    name: "String"
                }
            },
            createdByType: {
                serializedName: "createdByType",
                type: {
                    name: "String"
                }
            },
            createdAt: {
                serializedName: "createdAt",
                type: {
                    name: "DateTime"
                }
            },
            lastModifiedBy: {
                serializedName: "lastModifiedBy",
                type: {
                    name: "String"
                }
            },
            lastModifiedByType: {
                serializedName: "lastModifiedByType",
                type: {
                    name: "String"
                }
            },
            lastModifiedAt: {
                serializedName: "lastModifiedAt",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const CloudError = {
    type: {
        name: "Composite",
        className: "CloudError",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "CloudErrorBody"
                }
            }
        }
    }
};
const CloudErrorBody = {
    type: {
        name: "Composite",
        className: "CloudErrorBody",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CloudErrorBody"
                        }
                    }
                }
            }
        }
    }
};
const UpdateMoveCollectionRequest = {
    type: {
        name: "Composite",
        className: "UpdateMoveCollectionRequest",
        modelProperties: {
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "Identity"
                }
            }
        }
    }
};
const OperationStatus = {
    type: {
        name: "Composite",
        className: "OperationStatus",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            startTime: {
                serializedName: "startTime",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            endTime: {
                serializedName: "endTime",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "OperationStatusError"
                }
            },
            properties: {
                serializedName: "properties",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
const OperationStatusError = {
    type: {
        name: "Composite",
        className: "OperationStatusError",
        modelProperties: {
            code: {
                serializedName: "code",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "OperationStatusError"
                        }
                    }
                }
            },
            additionalInfo: {
                serializedName: "additionalInfo",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "OperationErrorAdditionalInfo"
                        }
                    }
                }
            }
        }
    }
};
const OperationErrorAdditionalInfo = {
    type: {
        name: "Composite",
        className: "OperationErrorAdditionalInfo",
        modelProperties: {
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            info: {
                serializedName: "info",
                type: {
                    name: "Composite",
                    className: "MoveErrorInfo"
                }
            }
        }
    }
};
const MoveErrorInfo = {
    type: {
        name: "Composite",
        className: "MoveErrorInfo",
        modelProperties: {
            moveResources: {
                serializedName: "moveResources",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AffectedMoveResource"
                        }
                    }
                }
            }
        }
    }
};
const AffectedMoveResource = {
    type: {
        name: "Composite",
        className: "AffectedMoveResource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            sourceId: {
                serializedName: "sourceId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            moveResources: {
                serializedName: "moveResources",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AffectedMoveResource"
                        }
                    }
                }
            }
        }
    }
};
const PrepareRequest = {
    type: {
        name: "Composite",
        className: "PrepareRequest",
        modelProperties: {
            validateOnly: {
                serializedName: "validateOnly",
                type: {
                    name: "Boolean"
                }
            },
            moveResources: {
                serializedName: "moveResources",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            moveResourceInputType: {
                serializedName: "moveResourceInputType",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ResourceMoveRequest = {
    type: {
        name: "Composite",
        className: "ResourceMoveRequest",
        modelProperties: {
            validateOnly: {
                serializedName: "validateOnly",
                type: {
                    name: "Boolean"
                }
            },
            moveResources: {
                serializedName: "moveResources",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            moveResourceInputType: {
                serializedName: "moveResourceInputType",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CommitRequest = {
    type: {
        name: "Composite",
        className: "CommitRequest",
        modelProperties: {
            validateOnly: {
                serializedName: "validateOnly",
                type: {
                    name: "Boolean"
                }
            },
            moveResources: {
                serializedName: "moveResources",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            moveResourceInputType: {
                serializedName: "moveResourceInputType",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DiscardRequest = {
    type: {
        name: "Composite",
        className: "DiscardRequest",
        modelProperties: {
            validateOnly: {
                serializedName: "validateOnly",
                type: {
                    name: "Boolean"
                }
            },
            moveResources: {
                serializedName: "moveResources",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            moveResourceInputType: {
                serializedName: "moveResourceInputType",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MoveResourceCollection = {
    type: {
        name: "Composite",
        className: "MoveResourceCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MoveResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            },
            summaryCollection: {
                serializedName: "summaryCollection",
                type: {
                    name: "Composite",
                    className: "SummaryCollection"
                }
            },
            totalCount: {
                serializedName: "totalCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const MoveResource = {
    type: {
        name: "Composite",
        className: "MoveResource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "MoveResourceProperties"
                }
            },
            systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }
        }
    }
};
const MoveResourceProperties = {
    type: {
        name: "Composite",
        className: "MoveResourceProperties",
        modelProperties: {
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            sourceId: {
                serializedName: "sourceId",
                required: true,
                type: {
                    name: "String"
                }
            },
            targetId: {
                serializedName: "targetId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            existingTargetId: {
                serializedName: "existingTargetId",
                type: {
                    name: "String"
                }
            },
            resourceSettings: {
                serializedName: "resourceSettings",
                type: {
                    name: "Composite",
                    className: "ResourceSettings"
                }
            },
            sourceResourceSettings: {
                serializedName: "sourceResourceSettings",
                type: {
                    name: "Composite",
                    className: "ResourceSettings"
                }
            },
            moveStatus: {
                serializedName: "moveStatus",
                type: {
                    name: "Composite",
                    className: "MoveResourcePropertiesMoveStatus"
                }
            },
            dependsOn: {
                serializedName: "dependsOn",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MoveResourceDependency"
                        }
                    }
                }
            },
            dependsOnOverrides: {
                serializedName: "dependsOnOverrides",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MoveResourceDependencyOverride"
                        }
                    }
                }
            },
            isResolveRequired: {
                serializedName: "isResolveRequired",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            errors: {
                serializedName: "errors",
                type: {
                    name: "Composite",
                    className: "MoveResourcePropertiesErrors"
                }
            }
        }
    }
};
const ResourceSettings = {
    type: {
        name: "Composite",
        className: "ResourceSettings",
        uberParent: "ResourceSettings",
        polymorphicDiscriminator: {
            serializedName: "resourceType",
            clientName: "resourceType"
        },
        modelProperties: {
            resourceType: {
                serializedName: "resourceType",
                required: true,
                type: {
                    name: "String"
                }
            },
            targetResourceName: {
                serializedName: "targetResourceName",
                type: {
                    name: "String"
                }
            },
            targetResourceGroupName: {
                serializedName: "targetResourceGroupName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MoveResourceStatus = {
    type: {
        name: "Composite",
        className: "MoveResourceStatus",
        modelProperties: {
            moveState: {
                serializedName: "moveState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            jobStatus: {
                serializedName: "jobStatus",
                type: {
                    name: "Composite",
                    className: "JobStatus"
                }
            },
            errors: {
                serializedName: "errors",
                type: {
                    name: "Composite",
                    className: "MoveResourceError"
                }
            }
        }
    }
};
const JobStatus = {
    type: {
        name: "Composite",
        className: "JobStatus",
        modelProperties: {
            jobName: {
                serializedName: "jobName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            jobProgress: {
                serializedName: "jobProgress",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MoveResourceDependency = {
    type: {
        name: "Composite",
        className: "MoveResourceDependency",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            resolutionStatus: {
                serializedName: "resolutionStatus",
                type: {
                    name: "String"
                }
            },
            resolutionType: {
                serializedName: "resolutionType",
                type: {
                    name: "String"
                }
            },
            dependencyType: {
                serializedName: "dependencyType",
                type: {
                    name: "String"
                }
            },
            manualResolution: {
                serializedName: "manualResolution",
                type: {
                    name: "Composite",
                    className: "ManualResolutionProperties"
                }
            },
            automaticResolution: {
                serializedName: "automaticResolution",
                type: {
                    name: "Composite",
                    className: "AutomaticResolutionProperties"
                }
            },
            isOptional: {
                serializedName: "isOptional",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ManualResolutionProperties = {
    type: {
        name: "Composite",
        className: "ManualResolutionProperties",
        modelProperties: {
            targetId: {
                serializedName: "targetId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AutomaticResolutionProperties = {
    type: {
        name: "Composite",
        className: "AutomaticResolutionProperties",
        modelProperties: {
            moveResourceId: {
                serializedName: "moveResourceId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MoveResourceDependencyOverride = {
    type: {
        name: "Composite",
        className: "MoveResourceDependencyOverride",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            targetId: {
                serializedName: "targetId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SummaryCollection = {
    type: {
        name: "Composite",
        className: "SummaryCollection",
        modelProperties: {
            fieldName: {
                serializedName: "fieldName",
                type: {
                    name: "String"
                }
            },
            summary: {
                serializedName: "summary",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Summary"
                        }
                    }
                }
            }
        }
    }
};
const Summary = {
    type: {
        name: "Composite",
        className: "Summary",
        modelProperties: {
            count: {
                serializedName: "count",
                type: {
                    name: "Number"
                }
            },
            item: {
                serializedName: "item",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const UnresolvedDependencyCollection = {
    type: {
        name: "Composite",
        className: "UnresolvedDependencyCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "UnresolvedDependency"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            },
            summaryCollection: {
                serializedName: "summaryCollection",
                type: {
                    name: "Composite",
                    className: "SummaryCollection"
                }
            },
            totalCount: {
                serializedName: "totalCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const UnresolvedDependency = {
    type: {
        name: "Composite",
        className: "UnresolvedDependency",
        modelProperties: {
            count: {
                serializedName: "count",
                type: {
                    name: "Number"
                }
            },
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BulkRemoveRequest = {
    type: {
        name: "Composite",
        className: "BulkRemoveRequest",
        modelProperties: {
            validateOnly: {
                serializedName: "validateOnly",
                type: {
                    name: "Boolean"
                }
            },
            moveResources: {
                serializedName: "moveResources",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            moveResourceInputType: {
                serializedName: "moveResourceInputType",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationsDiscoveryCollection = {
    type: {
        name: "Composite",
        className: "OperationsDiscoveryCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "OperationsDiscovery"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationsDiscovery = {
    type: {
        name: "Composite",
        className: "OperationsDiscovery",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            isDataAction: {
                serializedName: "isDataAction",
                type: {
                    name: "Boolean"
                }
            },
            display: {
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "Display"
                }
            },
            origin: {
                serializedName: "origin",
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
const Display = {
    type: {
        name: "Composite",
        className: "Display",
        modelProperties: {
            provider: {
                serializedName: "provider",
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "resource",
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MoveCollectionResultList = {
    type: {
        name: "Composite",
        className: "MoveCollectionResultList",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MoveCollection"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RequiredForResourcesCollection = {
    type: {
        name: "Composite",
        className: "RequiredForResourcesCollection",
        modelProperties: {
            sourceIds: {
                serializedName: "sourceIds",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const MoveResourceFilter = {
    type: {
        name: "Composite",
        className: "MoveResourceFilter",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "MoveResourceFilterProperties"
                }
            }
        }
    }
};
const MoveResourceFilterProperties = {
    type: {
        name: "Composite",
        className: "MoveResourceFilterProperties",
        modelProperties: {
            provisioningState: {
                serializedName: "provisioningState",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const UnresolvedDependenciesFilter = {
    type: {
        name: "Composite",
        className: "UnresolvedDependenciesFilter",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "UnresolvedDependenciesFilterProperties"
                }
            }
        }
    }
};
const UnresolvedDependenciesFilterProperties = {
    type: {
        name: "Composite",
        className: "UnresolvedDependenciesFilterProperties",
        modelProperties: {
            count: {
                serializedName: "count",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const SubnetResourceSettings = {
    type: {
        name: "Composite",
        className: "SubnetResourceSettings",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            addressPrefix: {
                serializedName: "addressPrefix",
                type: {
                    name: "String"
                }
            },
            networkSecurityGroup: {
                serializedName: "networkSecurityGroup",
                type: {
                    name: "Composite",
                    className: "NsgReference"
                }
            }
        }
    }
};
const AzureResourceReference = {
    type: {
        name: "Composite",
        className: "AzureResourceReference",
        modelProperties: {
            sourceArmResourceId: {
                serializedName: "sourceArmResourceId",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const NicIpConfigurationResourceSettings = {
    type: {
        name: "Composite",
        className: "NicIpConfigurationResourceSettings",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            privateIpAddress: {
                serializedName: "privateIpAddress",
                type: {
                    name: "String"
                }
            },
            privateIpAllocationMethod: {
                serializedName: "privateIpAllocationMethod",
                type: {
                    name: "String"
                }
            },
            subnet: {
                serializedName: "subnet",
                type: {
                    name: "Composite",
                    className: "SubnetReference"
                }
            },
            primary: {
                serializedName: "primary",
                type: {
                    name: "Boolean"
                }
            },
            loadBalancerBackendAddressPools: {
                serializedName: "loadBalancerBackendAddressPools",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LoadBalancerBackendAddressPoolReference"
                        }
                    }
                }
            },
            loadBalancerNatRules: {
                serializedName: "loadBalancerNatRules",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LoadBalancerNatRuleReference"
                        }
                    }
                }
            },
            publicIp: {
                serializedName: "publicIp",
                type: {
                    name: "Composite",
                    className: "PublicIpReference"
                }
            }
        }
    }
};
const NsgSecurityRule = {
    type: {
        name: "Composite",
        className: "NsgSecurityRule",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            access: {
                serializedName: "access",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            destinationAddressPrefix: {
                serializedName: "destinationAddressPrefix",
                type: {
                    name: "String"
                }
            },
            destinationPortRange: {
                serializedName: "destinationPortRange",
                type: {
                    name: "String"
                }
            },
            direction: {
                serializedName: "direction",
                type: {
                    name: "String"
                }
            },
            priority: {
                serializedName: "priority",
                type: {
                    name: "Number"
                }
            },
            protocol: {
                serializedName: "protocol",
                type: {
                    name: "String"
                }
            },
            sourceAddressPrefix: {
                serializedName: "sourceAddressPrefix",
                type: {
                    name: "String"
                }
            },
            sourcePortRange: {
                serializedName: "sourcePortRange",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const LBFrontendIPConfigurationResourceSettings = {
    type: {
        name: "Composite",
        className: "LBFrontendIPConfigurationResourceSettings",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            privateIpAddress: {
                serializedName: "privateIpAddress",
                type: {
                    name: "String"
                }
            },
            privateIpAllocationMethod: {
                serializedName: "privateIpAllocationMethod",
                type: {
                    name: "String"
                }
            },
            subnet: {
                serializedName: "subnet",
                type: {
                    name: "Composite",
                    className: "SubnetReference"
                }
            },
            zones: {
                serializedName: "zones",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const LBBackendAddressPoolResourceSettings = {
    type: {
        name: "Composite",
        className: "LBBackendAddressPoolResourceSettings",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MoveCollectionPropertiesErrors = {
    type: {
        name: "Composite",
        className: "MoveCollectionPropertiesErrors",
        modelProperties: Object.assign({}, MoveResourceError.type.modelProperties)
    }
};
const MoveResourcePropertiesErrors = {
    type: {
        name: "Composite",
        className: "MoveResourcePropertiesErrors",
        modelProperties: Object.assign({}, MoveResourceError.type.modelProperties)
    }
};
const VirtualMachineResourceSettings = {
    serializedName: "Microsoft.Compute/virtualMachines",
    type: {
        name: "Composite",
        className: "VirtualMachineResourceSettings",
        uberParent: "ResourceSettings",
        polymorphicDiscriminator: ResourceSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ResourceSettings.type.modelProperties), { tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }, userManagedIdentities: {
                serializedName: "userManagedIdentities",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, targetAvailabilityZone: {
                serializedName: "targetAvailabilityZone",
                type: {
                    name: "String"
                }
            }, targetVmSize: {
                serializedName: "targetVmSize",
                type: {
                    name: "String"
                }
            }, targetAvailabilitySetId: {
                serializedName: "targetAvailabilitySetId",
                type: {
                    name: "String"
                }
            } })
    }
};
const AvailabilitySetResourceSettings = {
    serializedName: "Microsoft.Compute/availabilitySets",
    type: {
        name: "Composite",
        className: "AvailabilitySetResourceSettings",
        uberParent: "ResourceSettings",
        polymorphicDiscriminator: ResourceSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ResourceSettings.type.modelProperties), { tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }, faultDomain: {
                constraints: {
                    InclusiveMinimum: 1
                },
                serializedName: "faultDomain",
                nullable: true,
                type: {
                    name: "Number"
                }
            }, updateDomain: {
                constraints: {
                    InclusiveMaximum: 20,
                    InclusiveMinimum: 1
                },
                serializedName: "updateDomain",
                nullable: true,
                type: {
                    name: "Number"
                }
            } })
    }
};
const VirtualNetworkResourceSettings = {
    serializedName: "Microsoft.Network/virtualNetworks",
    type: {
        name: "Composite",
        className: "VirtualNetworkResourceSettings",
        uberParent: "ResourceSettings",
        polymorphicDiscriminator: ResourceSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ResourceSettings.type.modelProperties), { tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }, enableDdosProtection: {
                serializedName: "enableDdosProtection",
                nullable: true,
                type: {
                    name: "Boolean"
                }
            }, addressSpace: {
                serializedName: "addressSpace",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, dnsServers: {
                serializedName: "dnsServers",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, subnets: {
                serializedName: "subnets",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SubnetResourceSettings"
                        }
                    }
                }
            } })
    }
};
const NetworkInterfaceResourceSettings = {
    serializedName: "Microsoft.Network/networkInterfaces",
    type: {
        name: "Composite",
        className: "NetworkInterfaceResourceSettings",
        uberParent: "ResourceSettings",
        polymorphicDiscriminator: ResourceSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ResourceSettings.type.modelProperties), { tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }, ipConfigurations: {
                serializedName: "ipConfigurations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "NicIpConfigurationResourceSettings"
                        }
                    }
                }
            }, enableAcceleratedNetworking: {
                serializedName: "enableAcceleratedNetworking",
                nullable: true,
                type: {
                    name: "Boolean"
                }
            } })
    }
};
const NetworkSecurityGroupResourceSettings = {
    serializedName: "Microsoft.Network/networkSecurityGroups",
    type: {
        name: "Composite",
        className: "NetworkSecurityGroupResourceSettings",
        uberParent: "ResourceSettings",
        polymorphicDiscriminator: ResourceSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ResourceSettings.type.modelProperties), { tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }, securityRules: {
                serializedName: "securityRules",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "NsgSecurityRule"
                        }
                    }
                }
            } })
    }
};
const LoadBalancerResourceSettings = {
    serializedName: "Microsoft.Network/loadBalancers",
    type: {
        name: "Composite",
        className: "LoadBalancerResourceSettings",
        uberParent: "ResourceSettings",
        polymorphicDiscriminator: ResourceSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ResourceSettings.type.modelProperties), { tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }, sku: {
                serializedName: "sku",
                type: {
                    name: "String"
                }
            }, frontendIPConfigurations: {
                serializedName: "frontendIPConfigurations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LBFrontendIPConfigurationResourceSettings"
                        }
                    }
                }
            }, backendAddressPools: {
                serializedName: "backendAddressPools",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LBBackendAddressPoolResourceSettings"
                        }
                    }
                }
            }, zones: {
                serializedName: "zones",
                type: {
                    name: "String"
                }
            } })
    }
};
const SqlServerResourceSettings = {
    serializedName: "Microsoft.Sql/servers",
    type: {
        name: "Composite",
        className: "SqlServerResourceSettings",
        uberParent: "ResourceSettings",
        polymorphicDiscriminator: ResourceSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, ResourceSettings.type.modelProperties)
    }
};
const SqlElasticPoolResourceSettings = {
    serializedName: "Microsoft.Sql/servers/elasticPools",
    type: {
        name: "Composite",
        className: "SqlElasticPoolResourceSettings",
        uberParent: "ResourceSettings",
        polymorphicDiscriminator: ResourceSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ResourceSettings.type.modelProperties), { tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }, zoneRedundant: {
                serializedName: "zoneRedundant",
                type: {
                    name: "String"
                }
            } })
    }
};
const SqlDatabaseResourceSettings = {
    serializedName: "Microsoft.Sql/servers/databases",
    type: {
        name: "Composite",
        className: "SqlDatabaseResourceSettings",
        uberParent: "ResourceSettings",
        polymorphicDiscriminator: ResourceSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ResourceSettings.type.modelProperties), { tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }, zoneRedundant: {
                serializedName: "zoneRedundant",
                type: {
                    name: "String"
                }
            } })
    }
};
const ResourceGroupResourceSettings = {
    serializedName: "resourceGroups",
    type: {
        name: "Composite",
        className: "ResourceGroupResourceSettings",
        uberParent: "ResourceSettings",
        polymorphicDiscriminator: ResourceSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, ResourceSettings.type.modelProperties)
    }
};
const PublicIPAddressResourceSettings = {
    serializedName: "Microsoft.Network/publicIPAddresses",
    type: {
        name: "Composite",
        className: "PublicIPAddressResourceSettings",
        uberParent: "ResourceSettings",
        polymorphicDiscriminator: ResourceSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ResourceSettings.type.modelProperties), { tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }, domainNameLabel: {
                serializedName: "domainNameLabel",
                type: {
                    name: "String"
                }
            }, fqdn: {
                serializedName: "fqdn",
                type: {
                    name: "String"
                }
            }, publicIpAllocationMethod: {
                serializedName: "publicIpAllocationMethod",
                type: {
                    name: "String"
                }
            }, sku: {
                serializedName: "sku",
                type: {
                    name: "String"
                }
            }, zones: {
                serializedName: "zones",
                type: {
                    name: "String"
                }
            } })
    }
};
const KeyVaultResourceSettings = {
    serializedName: "Microsoft.KeyVault/vaults",
    type: {
        name: "Composite",
        className: "KeyVaultResourceSettings",
        uberParent: "ResourceSettings",
        polymorphicDiscriminator: ResourceSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, ResourceSettings.type.modelProperties)
    }
};
const DiskEncryptionSetResourceSettings = {
    serializedName: "Microsoft.Compute/diskEncryptionSets",
    type: {
        name: "Composite",
        className: "DiskEncryptionSetResourceSettings",
        uberParent: "ResourceSettings",
        polymorphicDiscriminator: ResourceSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, ResourceSettings.type.modelProperties)
    }
};
const MoveResourcePropertiesMoveStatus = {
    type: {
        name: "Composite",
        className: "MoveResourcePropertiesMoveStatus",
        modelProperties: Object.assign({}, MoveResourceStatus.type.modelProperties)
    }
};
const NsgReference = {
    type: {
        name: "Composite",
        className: "NsgReference",
        modelProperties: Object.assign({}, AzureResourceReference.type.modelProperties)
    }
};
const ProxyResourceReference = {
    type: {
        name: "Composite",
        className: "ProxyResourceReference",
        modelProperties: Object.assign(Object.assign({}, AzureResourceReference.type.modelProperties), { name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            } })
    }
};
const PublicIpReference = {
    type: {
        name: "Composite",
        className: "PublicIpReference",
        modelProperties: Object.assign({}, AzureResourceReference.type.modelProperties)
    }
};
const SubnetReference = {
    type: {
        name: "Composite",
        className: "SubnetReference",
        modelProperties: Object.assign({}, ProxyResourceReference.type.modelProperties)
    }
};
const LoadBalancerBackendAddressPoolReference = {
    type: {
        name: "Composite",
        className: "LoadBalancerBackendAddressPoolReference",
        modelProperties: Object.assign({}, ProxyResourceReference.type.modelProperties)
    }
};
const LoadBalancerNatRuleReference = {
    type: {
        name: "Composite",
        className: "LoadBalancerNatRuleReference",
        modelProperties: Object.assign({}, ProxyResourceReference.type.modelProperties)
    }
};
let discriminators = {
    ResourceSettings: ResourceSettings,
    "ResourceSettings.Microsoft.Compute/virtualMachines": VirtualMachineResourceSettings,
    "ResourceSettings.Microsoft.Compute/availabilitySets": AvailabilitySetResourceSettings,
    "ResourceSettings.Microsoft.Network/virtualNetworks": VirtualNetworkResourceSettings,
    "ResourceSettings.Microsoft.Network/networkInterfaces": NetworkInterfaceResourceSettings,
    "ResourceSettings.Microsoft.Network/networkSecurityGroups": NetworkSecurityGroupResourceSettings,
    "ResourceSettings.Microsoft.Network/loadBalancers": LoadBalancerResourceSettings,
    "ResourceSettings.Microsoft.Sql/servers": SqlServerResourceSettings,
    "ResourceSettings.Microsoft.Sql/servers/elasticPools": SqlElasticPoolResourceSettings,
    "ResourceSettings.Microsoft.Sql/servers/databases": SqlDatabaseResourceSettings,
    "ResourceSettings.resourceGroups": ResourceGroupResourceSettings,
    "ResourceSettings.Microsoft.Network/publicIPAddresses": PublicIPAddressResourceSettings,
    "ResourceSettings.Microsoft.KeyVault/vaults": KeyVaultResourceSettings,
    "ResourceSettings.Microsoft.Compute/diskEncryptionSets": DiskEncryptionSetResourceSettings
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    AffectedMoveResource: AffectedMoveResource,
    AutomaticResolutionProperties: AutomaticResolutionProperties,
    AvailabilitySetResourceSettings: AvailabilitySetResourceSettings,
    AzureResourceReference: AzureResourceReference,
    BulkRemoveRequest: BulkRemoveRequest,
    CloudError: CloudError,
    CloudErrorBody: CloudErrorBody,
    CommitRequest: CommitRequest,
    DiscardRequest: DiscardRequest,
    DiskEncryptionSetResourceSettings: DiskEncryptionSetResourceSettings,
    Display: Display,
    Identity: Identity,
    JobStatus: JobStatus,
    KeyVaultResourceSettings: KeyVaultResourceSettings,
    LBBackendAddressPoolResourceSettings: LBBackendAddressPoolResourceSettings,
    LBFrontendIPConfigurationResourceSettings: LBFrontendIPConfigurationResourceSettings,
    LoadBalancerBackendAddressPoolReference: LoadBalancerBackendAddressPoolReference,
    LoadBalancerNatRuleReference: LoadBalancerNatRuleReference,
    LoadBalancerResourceSettings: LoadBalancerResourceSettings,
    ManualResolutionProperties: ManualResolutionProperties,
    MoveCollection: MoveCollection,
    MoveCollectionProperties: MoveCollectionProperties,
    MoveCollectionPropertiesErrors: MoveCollectionPropertiesErrors,
    MoveCollectionResultList: MoveCollectionResultList,
    MoveErrorInfo: MoveErrorInfo,
    MoveResource: MoveResource,
    MoveResourceCollection: MoveResourceCollection,
    MoveResourceDependency: MoveResourceDependency,
    MoveResourceDependencyOverride: MoveResourceDependencyOverride,
    MoveResourceError: MoveResourceError,
    MoveResourceErrorBody: MoveResourceErrorBody,
    MoveResourceFilter: MoveResourceFilter,
    MoveResourceFilterProperties: MoveResourceFilterProperties,
    MoveResourceProperties: MoveResourceProperties,
    MoveResourcePropertiesErrors: MoveResourcePropertiesErrors,
    MoveResourcePropertiesMoveStatus: MoveResourcePropertiesMoveStatus,
    MoveResourceStatus: MoveResourceStatus,
    NetworkInterfaceResourceSettings: NetworkInterfaceResourceSettings,
    NetworkSecurityGroupResourceSettings: NetworkSecurityGroupResourceSettings,
    NicIpConfigurationResourceSettings: NicIpConfigurationResourceSettings,
    NsgReference: NsgReference,
    NsgSecurityRule: NsgSecurityRule,
    OperationErrorAdditionalInfo: OperationErrorAdditionalInfo,
    OperationStatus: OperationStatus,
    OperationStatusError: OperationStatusError,
    OperationsDiscovery: OperationsDiscovery,
    OperationsDiscoveryCollection: OperationsDiscoveryCollection,
    PrepareRequest: PrepareRequest,
    ProxyResourceReference: ProxyResourceReference,
    PublicIPAddressResourceSettings: PublicIPAddressResourceSettings,
    PublicIpReference: PublicIpReference,
    RequiredForResourcesCollection: RequiredForResourcesCollection,
    ResourceGroupResourceSettings: ResourceGroupResourceSettings,
    ResourceMoveRequest: ResourceMoveRequest,
    ResourceSettings: ResourceSettings,
    SqlDatabaseResourceSettings: SqlDatabaseResourceSettings,
    SqlElasticPoolResourceSettings: SqlElasticPoolResourceSettings,
    SqlServerResourceSettings: SqlServerResourceSettings,
    SubnetReference: SubnetReference,
    SubnetResourceSettings: SubnetResourceSettings,
    Summary: Summary,
    SummaryCollection: SummaryCollection,
    SystemData: SystemData,
    UnresolvedDependenciesFilter: UnresolvedDependenciesFilter,
    UnresolvedDependenciesFilterProperties: UnresolvedDependenciesFilterProperties,
    UnresolvedDependency: UnresolvedDependency,
    UnresolvedDependencyCollection: UnresolvedDependencyCollection,
    UpdateMoveCollectionRequest: UpdateMoveCollectionRequest,
    VirtualMachineResourceSettings: VirtualMachineResourceSettings,
    VirtualNetworkResourceSettings: VirtualNetworkResourceSettings,
    discriminators: discriminators
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const body = {
    parameterPath: ["options", "body"],
    mapper: MoveCollection
};
const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const moveCollectionName = {
    parameterPath: "moveCollectionName",
    mapper: {
        serializedName: "moveCollectionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2023-08-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const body1 = {
    parameterPath: ["options", "body"],
    mapper: UpdateMoveCollectionRequest
};
const body2 = {
    parameterPath: ["options", "body"],
    mapper: PrepareRequest
};
const body3 = {
    parameterPath: ["options", "body"],
    mapper: ResourceMoveRequest
};
const body4 = {
    parameterPath: ["options", "body"],
    mapper: CommitRequest
};
const body5 = {
    parameterPath: ["options", "body"],
    mapper: DiscardRequest
};
const body6 = {
    parameterPath: ["options", "body"],
    mapper: BulkRemoveRequest
};
const sourceId = {
    parameterPath: "sourceId",
    mapper: {
        serializedName: "sourceId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const filter = {
    parameterPath: ["options", "filter"],
    mapper: {
        serializedName: "$filter",
        type: {
            name: "String"
        }
    }
};
const body7 = {
    parameterPath: ["options", "body"],
    mapper: MoveResource
};
const moveResourceName = {
    parameterPath: "moveResourceName",
    mapper: {
        serializedName: "moveResourceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const dependencyLevel = {
    parameterPath: ["options", "dependencyLevel"],
    mapper: {
        serializedName: "dependencyLevel",
        type: {
            name: "String"
        }
    }
};
const orderby = {
    parameterPath: ["options", "orderby"],
    mapper: {
        serializedName: "$orderby",
        type: {
            name: "String"
        }
    }
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
function createLroSpec(inputs) {
    const { args, spec, sendOperationFn } = inputs;
    return {
        requestMethod: spec.httpMethod,
        requestPath: spec.path,
        sendInitialRequest: () => sendOperationFn(args, spec),
        sendPollRequest: (path, options) => {
            const restSpec = tslib.__rest(spec, ["requestBody"]);
            return sendOperationFn(args, Object.assign(Object.assign({}, restSpec), { httpMethod: "GET", path, abortSignal: options === null || options === void 0 ? void 0 : options.abortSignal }));
        }
    };
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing MoveCollections operations. */
class MoveCollectionsImpl {
    /**
     * Initialize a new instance of the class MoveCollections class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get all the Move Collections in the subscription.
     * @param options The options parameters.
     */
    listMoveCollectionsBySubscription(options) {
        const iter = this.listMoveCollectionsBySubscriptionPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listMoveCollectionsBySubscriptionPagingPage(options, settings);
            }
        };
    }
    listMoveCollectionsBySubscriptionPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listMoveCollectionsBySubscriptionPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listMoveCollectionsBySubscription(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listMoveCollectionsBySubscriptionNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listMoveCollectionsBySubscriptionPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listMoveCollectionsBySubscriptionPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listMoveCollectionsBySubscriptionPagingPage(options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get all the Move Collections in the resource group.
     * @param resourceGroupName The Resource Group Name.
     * @param options The options parameters.
     */
    listMoveCollectionsByResourceGroup(resourceGroupName, options) {
        const iter = this.listMoveCollectionsByResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listMoveCollectionsByResourceGroupPagingPage(resourceGroupName, options, settings);
            }
        };
    }
    listMoveCollectionsByResourceGroupPagingPage(resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listMoveCollectionsByResourceGroupPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listMoveCollectionsByResourceGroup(resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listMoveCollectionsByResourceGroupNext(resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listMoveCollectionsByResourceGroupPagingAll(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listMoveCollectionsByResourceGroupPagingAll_1() {
            var _a, e_2, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listMoveCollectionsByResourceGroupPagingPage(resourceGroupName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Creates or updates a move collection.
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param options The options parameters.
     */
    create(resourceGroupName, moveCollectionName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, moveCollectionName, options }, createOperationSpec$1);
    }
    /**
     * Updates a move collection.
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param options The options parameters.
     */
    update(resourceGroupName, moveCollectionName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, moveCollectionName, options }, updateOperationSpec);
    }
    /**
     * Deletes a move collection.
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, moveCollectionName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, moveCollectionName, options },
                spec: deleteOperationSpec$1
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes a move collection.
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, moveCollectionName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, moveCollectionName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Gets the move collection.
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param options The options parameters.
     */
    get(resourceGroupName, moveCollectionName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, moveCollectionName, options }, getOperationSpec$3);
    }
    /**
     * Initiates prepare for the set of resources included in the request body. The prepare operation is on
     * the moveResources that are in the moveState 'PreparePending' or 'PrepareFailed', on a successful
     * completion the moveResource moveState do a transition to MovePending. To aid the user to
     * prerequisite the operation the client can call operation with validateOnly property set to true.
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param options The options parameters.
     */
    beginPrepare(resourceGroupName, moveCollectionName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, moveCollectionName, options },
                spec: prepareOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Initiates prepare for the set of resources included in the request body. The prepare operation is on
     * the moveResources that are in the moveState 'PreparePending' or 'PrepareFailed', on a successful
     * completion the moveResource moveState do a transition to MovePending. To aid the user to
     * prerequisite the operation the client can call operation with validateOnly property set to true.
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param options The options parameters.
     */
    beginPrepareAndWait(resourceGroupName, moveCollectionName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginPrepare(resourceGroupName, moveCollectionName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Moves the set of resources included in the request body. The move operation is triggered after the
     * moveResources are in the moveState 'MovePending' or 'MoveFailed', on a successful completion the
     * moveResource moveState do a transition to CommitPending. To aid the user to prerequisite the
     * operation the client can call operation with validateOnly property set to true.
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param options The options parameters.
     */
    beginInitiateMove(resourceGroupName, moveCollectionName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, moveCollectionName, options },
                spec: initiateMoveOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Moves the set of resources included in the request body. The move operation is triggered after the
     * moveResources are in the moveState 'MovePending' or 'MoveFailed', on a successful completion the
     * moveResource moveState do a transition to CommitPending. To aid the user to prerequisite the
     * operation the client can call operation with validateOnly property set to true.
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param options The options parameters.
     */
    beginInitiateMoveAndWait(resourceGroupName, moveCollectionName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginInitiateMove(resourceGroupName, moveCollectionName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Commits the set of resources included in the request body. The commit operation is triggered on the
     * moveResources in the moveState 'CommitPending' or 'CommitFailed', on a successful completion the
     * moveResource moveState do a transition to Committed. To aid the user to prerequisite the operation
     * the client can call operation with validateOnly property set to true.
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param options The options parameters.
     */
    beginCommit(resourceGroupName, moveCollectionName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, moveCollectionName, options },
                spec: commitOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Commits the set of resources included in the request body. The commit operation is triggered on the
     * moveResources in the moveState 'CommitPending' or 'CommitFailed', on a successful completion the
     * moveResource moveState do a transition to Committed. To aid the user to prerequisite the operation
     * the client can call operation with validateOnly property set to true.
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param options The options parameters.
     */
    beginCommitAndWait(resourceGroupName, moveCollectionName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCommit(resourceGroupName, moveCollectionName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Discards the set of resources included in the request body. The discard operation is triggered on
     * the moveResources in the moveState 'CommitPending' or 'DiscardFailed', on a successful completion
     * the moveResource moveState do a transition to MovePending. To aid the user to prerequisite the
     * operation the client can call operation with validateOnly property set to true.
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param options The options parameters.
     */
    beginDiscard(resourceGroupName, moveCollectionName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, moveCollectionName, options },
                spec: discardOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Discards the set of resources included in the request body. The discard operation is triggered on
     * the moveResources in the moveState 'CommitPending' or 'DiscardFailed', on a successful completion
     * the moveResource moveState do a transition to MovePending. To aid the user to prerequisite the
     * operation the client can call operation with validateOnly property set to true.
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param options The options parameters.
     */
    beginDiscardAndWait(resourceGroupName, moveCollectionName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDiscard(resourceGroupName, moveCollectionName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Computes, resolves and validate the dependencies of the moveResources in the move collection.
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param options The options parameters.
     */
    beginResolveDependencies(resourceGroupName, moveCollectionName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, moveCollectionName, options },
                spec: resolveDependenciesOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Computes, resolves and validate the dependencies of the moveResources in the move collection.
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param options The options parameters.
     */
    beginResolveDependenciesAndWait(resourceGroupName, moveCollectionName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginResolveDependencies(resourceGroupName, moveCollectionName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Removes the set of move resources included in the request body from move collection. The
     * orchestration is done by service. To aid the user to prerequisite the operation the client can call
     * operation with validateOnly property set to true.
     * @param resourceGroupName
     * @param moveCollectionName
     * @param options The options parameters.
     */
    beginBulkRemove(resourceGroupName, moveCollectionName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, moveCollectionName, options },
                spec: bulkRemoveOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Removes the set of move resources included in the request body from move collection. The
     * orchestration is done by service. To aid the user to prerequisite the operation the client can call
     * operation with validateOnly property set to true.
     * @param resourceGroupName
     * @param moveCollectionName
     * @param options The options parameters.
     */
    beginBulkRemoveAndWait(resourceGroupName, moveCollectionName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginBulkRemove(resourceGroupName, moveCollectionName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Get all the Move Collections in the subscription.
     * @param options The options parameters.
     */
    _listMoveCollectionsBySubscription(options) {
        return this.client.sendOperationRequest({ options }, listMoveCollectionsBySubscriptionOperationSpec);
    }
    /**
     * Get all the Move Collections in the resource group.
     * @param resourceGroupName The Resource Group Name.
     * @param options The options parameters.
     */
    _listMoveCollectionsByResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listMoveCollectionsByResourceGroupOperationSpec);
    }
    /**
     * List of the move resources for which an arm resource is required for.
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param sourceId The sourceId for which the api is invoked.
     * @param options The options parameters.
     */
    listRequiredFor(resourceGroupName, moveCollectionName, sourceId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, moveCollectionName, sourceId, options }, listRequiredForOperationSpec);
    }
    /**
     * ListMoveCollectionsBySubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the
     *                 ListMoveCollectionsBySubscription method.
     * @param options The options parameters.
     */
    _listMoveCollectionsBySubscriptionNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listMoveCollectionsBySubscriptionNextOperationSpec);
    }
    /**
     * ListMoveCollectionsByResourceGroupNext
     * @param resourceGroupName The Resource Group Name.
     * @param nextLink The nextLink from the previous successful call to the
     *                 ListMoveCollectionsByResourceGroup method.
     * @param options The options parameters.
     */
    _listMoveCollectionsByResourceGroupNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, listMoveCollectionsByResourceGroupNextOperationSpec);
    }
}
// Operation Specifications
const serializer$3 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const createOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections/{moveCollectionName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: MoveCollection
        },
        201: {
            bodyMapper: MoveCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: body,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        moveCollectionName
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$3
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections/{moveCollectionName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: MoveCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: body1,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        moveCollectionName
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$3
};
const deleteOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections/{moveCollectionName}",
    httpMethod: "DELETE",
    responses: {
        200: {
            bodyMapper: OperationStatus
        },
        201: {
            bodyMapper: OperationStatus
        },
        202: {
            bodyMapper: OperationStatus
        },
        204: {
            bodyMapper: OperationStatus
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        moveCollectionName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const getOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections/{moveCollectionName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: MoveCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        moveCollectionName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const prepareOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections/{moveCollectionName}/prepare",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: OperationStatus
        },
        201: {
            bodyMapper: OperationStatus
        },
        202: {
            bodyMapper: OperationStatus
        },
        204: {
            bodyMapper: OperationStatus
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: body2,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        moveCollectionName
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$3
};
const initiateMoveOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections/{moveCollectionName}/initiateMove",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: OperationStatus
        },
        201: {
            bodyMapper: OperationStatus
        },
        202: {
            bodyMapper: OperationStatus
        },
        204: {
            bodyMapper: OperationStatus
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: body3,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        moveCollectionName
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$3
};
const commitOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections/{moveCollectionName}/commit",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: OperationStatus
        },
        201: {
            bodyMapper: OperationStatus
        },
        202: {
            bodyMapper: OperationStatus
        },
        204: {
            bodyMapper: OperationStatus
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: body4,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        moveCollectionName
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$3
};
const discardOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections/{moveCollectionName}/discard",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: OperationStatus
        },
        201: {
            bodyMapper: OperationStatus
        },
        202: {
            bodyMapper: OperationStatus
        },
        204: {
            bodyMapper: OperationStatus
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: body5,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        moveCollectionName
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$3
};
const resolveDependenciesOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections/{moveCollectionName}/resolveDependencies",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: OperationStatus
        },
        201: {
            bodyMapper: OperationStatus
        },
        202: {
            bodyMapper: OperationStatus
        },
        204: {
            bodyMapper: OperationStatus
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        moveCollectionName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const bulkRemoveOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections/{moveCollectionName}/bulkRemove",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: OperationStatus
        },
        201: {
            bodyMapper: OperationStatus
        },
        202: {
            bodyMapper: OperationStatus
        },
        204: {
            bodyMapper: OperationStatus
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: body6,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        moveCollectionName
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$3
};
const listMoveCollectionsBySubscriptionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Migrate/moveCollections",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: MoveCollectionResultList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$3
};
const listMoveCollectionsByResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: MoveCollectionResultList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const listRequiredForOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections/{moveCollectionName}/requiredFor",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: RequiredForResourcesCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion, sourceId],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        moveCollectionName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const listMoveCollectionsBySubscriptionNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: MoveCollectionResultList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const listMoveCollectionsByResourceGroupNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: MoveCollectionResultList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$3
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing MoveResources operations. */
class MoveResourcesImpl {
    /**
     * Initialize a new instance of the class MoveResources class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the Move Resources in the move collection.
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param options The options parameters.
     */
    list(resourceGroupName, moveCollectionName, options) {
        const iter = this.listPagingAll(resourceGroupName, moveCollectionName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, moveCollectionName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, moveCollectionName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, moveCollectionName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, moveCollectionName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, moveCollectionName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(resourceGroupName, moveCollectionName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists the Move Resources in the move collection.
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param options The options parameters.
     */
    _list(resourceGroupName, moveCollectionName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, moveCollectionName, options }, listOperationSpec);
    }
    /**
     * Creates or updates a Move Resource in the move collection.
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param moveResourceName The Move Resource Name.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName, moveCollectionName, moveResourceName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    moveCollectionName,
                    moveResourceName,
                    options
                },
                spec: createOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Creates or updates a Move Resource in the move collection.
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param moveResourceName The Move Resource Name.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName, moveCollectionName, moveResourceName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreate(resourceGroupName, moveCollectionName, moveResourceName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Deletes a Move Resource from the move collection.
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param moveResourceName The Move Resource Name.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, moveCollectionName, moveResourceName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    moveCollectionName,
                    moveResourceName,
                    options
                },
                spec: deleteOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes a Move Resource from the move collection.
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param moveResourceName The Move Resource Name.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, moveCollectionName, moveResourceName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, moveCollectionName, moveResourceName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Gets the Move Resource.
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param moveResourceName The Move Resource Name.
     * @param options The options parameters.
     */
    get(resourceGroupName, moveCollectionName, moveResourceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, moveCollectionName, moveResourceName, options }, getOperationSpec$2);
    }
    /**
     * ListNext
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, moveCollectionName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, moveCollectionName, nextLink, options }, listNextOperationSpec);
    }
}
// Operation Specifications
const serializer$2 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections/{moveCollectionName}/moveResources",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: MoveResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion, filter],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        moveCollectionName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const createOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections/{moveCollectionName}/moveResources/{moveResourceName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: MoveResource
        },
        201: {
            bodyMapper: MoveResource
        },
        202: {
            bodyMapper: MoveResource
        },
        204: {
            bodyMapper: MoveResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: body7,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        moveCollectionName,
        moveResourceName
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$2
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections/{moveCollectionName}/moveResources/{moveResourceName}",
    httpMethod: "DELETE",
    responses: {
        200: {
            bodyMapper: OperationStatus
        },
        201: {
            bodyMapper: OperationStatus
        },
        202: {
            bodyMapper: OperationStatus
        },
        204: {
            bodyMapper: OperationStatus
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        moveCollectionName,
        moveResourceName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const getOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections/{moveCollectionName}/moveResources/{moveResourceName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: MoveResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        moveCollectionName,
        moveResourceName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: MoveResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        moveCollectionName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$2
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing UnresolvedDependencies operations. */
class UnresolvedDependenciesImpl {
    /**
     * Initialize a new instance of the class UnresolvedDependencies class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets a list of unresolved dependencies.
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param options The options parameters.
     */
    list(resourceGroupName, moveCollectionName, options) {
        const iter = this.getPagingAll(resourceGroupName, moveCollectionName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.getPagingPage(resourceGroupName, moveCollectionName, options, settings);
            }
        };
    }
    getPagingPage(resourceGroupName, moveCollectionName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* getPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._get(resourceGroupName, moveCollectionName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._getNext(resourceGroupName, moveCollectionName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    getPagingAll(resourceGroupName, moveCollectionName, options) {
        return tslib.__asyncGenerator(this, arguments, function* getPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.getPagingPage(resourceGroupName, moveCollectionName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets a list of unresolved dependencies.
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param options The options parameters.
     */
    _get(resourceGroupName, moveCollectionName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, moveCollectionName, options }, getOperationSpec$1);
    }
    /**
     * GetNext
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param nextLink The nextLink from the previous successful call to the Get method.
     * @param options The options parameters.
     */
    _getNext(resourceGroupName, moveCollectionName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, moveCollectionName, nextLink, options }, getNextOperationSpec);
    }
}
// Operation Specifications
const serializer$1 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections/{moveCollectionName}/unresolvedDependencies",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: UnresolvedDependencyCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [
        apiVersion,
        filter,
        dependencyLevel,
        orderby
    ],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        moveCollectionName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const getNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: UnresolvedDependencyCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        moveCollectionName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$1
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing OperationsDiscoveryOperations operations. */
class OperationsDiscoveryOperationsImpl {
    /**
     * Initialize a new instance of the class OperationsDiscoveryOperations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /** @param options The options parameters. */
    get(options) {
        return this.client.sendOperationRequest({ options }, getOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec = {
    path: "/providers/Microsoft.Migrate/operations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationsDiscoveryCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class ResourceMoverServiceAPI extends coreClient__namespace.ServiceClient {
    constructor(credentials, subscriptionIdOrOptions, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        let subscriptionId;
        if (typeof subscriptionIdOrOptions === "string") {
            subscriptionId = subscriptionIdOrOptions;
        }
        else if (typeof subscriptionIdOrOptions === "object") {
            options = subscriptionIdOrOptions;
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-resourcemover/2.2.0`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName
            });
            this.pipeline.addPolicy(coreRestPipeline__namespace.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient__namespace.authorizeRequestOnClaimChallenge
                }
            }));
        }
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.apiVersion = options.apiVersion || "2023-08-01";
        this.moveCollections = new MoveCollectionsImpl(this);
        this.moveResources = new MoveResourcesImpl(this);
        this.unresolvedDependencies = new UnresolvedDependenciesImpl(this);
        this.operationsDiscoveryOperations = new OperationsDiscoveryOperationsImpl(this);
        this.addCustomApiVersionPolicy(options.apiVersion);
    }
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    addCustomApiVersionPolicy(apiVersion) {
        if (!apiVersion) {
            return;
        }
        const apiVersionPolicy = {
            name: "CustomApiVersionPolicy",
            sendRequest(request, next) {
                return tslib.__awaiter(this, void 0, void 0, function* () {
                    const param = request.url.split("?");
                    if (param.length > 1) {
                        const newParams = param[1].split("&").map((item) => {
                            if (item.indexOf("api-version") > -1) {
                                return "api-version=" + apiVersion;
                            }
                            else {
                                return item;
                            }
                        });
                        request.url = param[0] + "?" + newParams.join("&");
                    }
                    return next(request);
                });
            }
        };
        this.pipeline.addPolicy(apiVersionPolicy);
    }
}

exports.ResourceMoverServiceAPI = ResourceMoverServiceAPI;
exports.getContinuationToken = getContinuationToken;
//# sourceMappingURL=index.js.map
