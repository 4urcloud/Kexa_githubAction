/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { ResourceMoverServiceAPI } from "@azure/arm-resourcemover";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to Initiates prepare for the set of resources included in the request body. The prepare operation is on the moveResources that are in the moveState 'PreparePending' or 'PrepareFailed', on a successful completion the moveResource moveState do a transition to MovePending. To aid the user to prerequisite the operation the client can call operation with validateOnly property set to true.
 *
 * @summary Initiates prepare for the set of resources included in the request body. The prepare operation is on the moveResources that are in the moveState 'PreparePending' or 'PrepareFailed', on a successful completion the moveResource moveState do a transition to MovePending. To aid the user to prerequisite the operation the client can call operation with validateOnly property set to true.
 * x-ms-original-file: specification/resourcemover/resource-manager/Microsoft.Migrate/stable/2023-08-01/examples/MoveCollections_Prepare.json
 */
function moveCollectionsPrepare() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["RESOURCEMOVER_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["RESOURCEMOVER_RESOURCE_GROUP"] || "rg1";
        const moveCollectionName = "movecollection1";
        const body = {
            moveResources: [
                "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Migrate/MoveCollections/movecollection1/MoveResources/moveresource1"
            ],
            validateOnly: false
        };
        const options = { body };
        const credential = new DefaultAzureCredential();
        const client = new ResourceMoverServiceAPI(credential, subscriptionId);
        const result = yield client.moveCollections.beginPrepareAndWait(resourceGroupName, moveCollectionName, options);
        console.log(result);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        moveCollectionsPrepare();
    });
}
main().catch(console.error);
//# sourceMappingURL=moveCollectionsPrepareSample.js.map