/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await, __awaiter } from "tslib";
import { setContinuationToken } from "../pagingHelper";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { createHttpPoller } from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
/// <reference lib="esnext.asynciterable" />
/** Class containing MoveCollections operations. */
export class MoveCollectionsImpl {
    /**
     * Initialize a new instance of the class MoveCollections class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get all the Move Collections in the subscription.
     * @param options The options parameters.
     */
    listMoveCollectionsBySubscription(options) {
        const iter = this.listMoveCollectionsBySubscriptionPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listMoveCollectionsBySubscriptionPagingPage(options, settings);
            }
        };
    }
    listMoveCollectionsBySubscriptionPagingPage(options, settings) {
        return __asyncGenerator(this, arguments, function* listMoveCollectionsBySubscriptionPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listMoveCollectionsBySubscription(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listMoveCollectionsBySubscriptionNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listMoveCollectionsBySubscriptionPagingAll(options) {
        return __asyncGenerator(this, arguments, function* listMoveCollectionsBySubscriptionPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.listMoveCollectionsBySubscriptionPagingPage(options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get all the Move Collections in the resource group.
     * @param resourceGroupName The Resource Group Name.
     * @param options The options parameters.
     */
    listMoveCollectionsByResourceGroup(resourceGroupName, options) {
        const iter = this.listMoveCollectionsByResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listMoveCollectionsByResourceGroupPagingPage(resourceGroupName, options, settings);
            }
        };
    }
    listMoveCollectionsByResourceGroupPagingPage(resourceGroupName, options, settings) {
        return __asyncGenerator(this, arguments, function* listMoveCollectionsByResourceGroupPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listMoveCollectionsByResourceGroup(resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listMoveCollectionsByResourceGroupNext(resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listMoveCollectionsByResourceGroupPagingAll(resourceGroupName, options) {
        return __asyncGenerator(this, arguments, function* listMoveCollectionsByResourceGroupPagingAll_1() {
            var _a, e_2, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.listMoveCollectionsByResourceGroupPagingPage(resourceGroupName, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Creates or updates a move collection.
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param options The options parameters.
     */
    create(resourceGroupName, moveCollectionName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, moveCollectionName, options }, createOperationSpec);
    }
    /**
     * Updates a move collection.
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param options The options parameters.
     */
    update(resourceGroupName, moveCollectionName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, moveCollectionName, options }, updateOperationSpec);
    }
    /**
     * Deletes a move collection.
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, moveCollectionName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, moveCollectionName, options },
                spec: deleteOperationSpec
            });
            const poller = yield createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes a move collection.
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, moveCollectionName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, moveCollectionName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Gets the move collection.
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param options The options parameters.
     */
    get(resourceGroupName, moveCollectionName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, moveCollectionName, options }, getOperationSpec);
    }
    /**
     * Initiates prepare for the set of resources included in the request body. The prepare operation is on
     * the moveResources that are in the moveState 'PreparePending' or 'PrepareFailed', on a successful
     * completion the moveResource moveState do a transition to MovePending. To aid the user to
     * prerequisite the operation the client can call operation with validateOnly property set to true.
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param options The options parameters.
     */
    beginPrepare(resourceGroupName, moveCollectionName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, moveCollectionName, options },
                spec: prepareOperationSpec
            });
            const poller = yield createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Initiates prepare for the set of resources included in the request body. The prepare operation is on
     * the moveResources that are in the moveState 'PreparePending' or 'PrepareFailed', on a successful
     * completion the moveResource moveState do a transition to MovePending. To aid the user to
     * prerequisite the operation the client can call operation with validateOnly property set to true.
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param options The options parameters.
     */
    beginPrepareAndWait(resourceGroupName, moveCollectionName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginPrepare(resourceGroupName, moveCollectionName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Moves the set of resources included in the request body. The move operation is triggered after the
     * moveResources are in the moveState 'MovePending' or 'MoveFailed', on a successful completion the
     * moveResource moveState do a transition to CommitPending. To aid the user to prerequisite the
     * operation the client can call operation with validateOnly property set to true.
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param options The options parameters.
     */
    beginInitiateMove(resourceGroupName, moveCollectionName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, moveCollectionName, options },
                spec: initiateMoveOperationSpec
            });
            const poller = yield createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Moves the set of resources included in the request body. The move operation is triggered after the
     * moveResources are in the moveState 'MovePending' or 'MoveFailed', on a successful completion the
     * moveResource moveState do a transition to CommitPending. To aid the user to prerequisite the
     * operation the client can call operation with validateOnly property set to true.
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param options The options parameters.
     */
    beginInitiateMoveAndWait(resourceGroupName, moveCollectionName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginInitiateMove(resourceGroupName, moveCollectionName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Commits the set of resources included in the request body. The commit operation is triggered on the
     * moveResources in the moveState 'CommitPending' or 'CommitFailed', on a successful completion the
     * moveResource moveState do a transition to Committed. To aid the user to prerequisite the operation
     * the client can call operation with validateOnly property set to true.
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param options The options parameters.
     */
    beginCommit(resourceGroupName, moveCollectionName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, moveCollectionName, options },
                spec: commitOperationSpec
            });
            const poller = yield createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Commits the set of resources included in the request body. The commit operation is triggered on the
     * moveResources in the moveState 'CommitPending' or 'CommitFailed', on a successful completion the
     * moveResource moveState do a transition to Committed. To aid the user to prerequisite the operation
     * the client can call operation with validateOnly property set to true.
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param options The options parameters.
     */
    beginCommitAndWait(resourceGroupName, moveCollectionName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCommit(resourceGroupName, moveCollectionName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Discards the set of resources included in the request body. The discard operation is triggered on
     * the moveResources in the moveState 'CommitPending' or 'DiscardFailed', on a successful completion
     * the moveResource moveState do a transition to MovePending. To aid the user to prerequisite the
     * operation the client can call operation with validateOnly property set to true.
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param options The options parameters.
     */
    beginDiscard(resourceGroupName, moveCollectionName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, moveCollectionName, options },
                spec: discardOperationSpec
            });
            const poller = yield createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Discards the set of resources included in the request body. The discard operation is triggered on
     * the moveResources in the moveState 'CommitPending' or 'DiscardFailed', on a successful completion
     * the moveResource moveState do a transition to MovePending. To aid the user to prerequisite the
     * operation the client can call operation with validateOnly property set to true.
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param options The options parameters.
     */
    beginDiscardAndWait(resourceGroupName, moveCollectionName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDiscard(resourceGroupName, moveCollectionName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Computes, resolves and validate the dependencies of the moveResources in the move collection.
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param options The options parameters.
     */
    beginResolveDependencies(resourceGroupName, moveCollectionName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, moveCollectionName, options },
                spec: resolveDependenciesOperationSpec
            });
            const poller = yield createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Computes, resolves and validate the dependencies of the moveResources in the move collection.
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param options The options parameters.
     */
    beginResolveDependenciesAndWait(resourceGroupName, moveCollectionName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginResolveDependencies(resourceGroupName, moveCollectionName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Removes the set of move resources included in the request body from move collection. The
     * orchestration is done by service. To aid the user to prerequisite the operation the client can call
     * operation with validateOnly property set to true.
     * @param resourceGroupName
     * @param moveCollectionName
     * @param options The options parameters.
     */
    beginBulkRemove(resourceGroupName, moveCollectionName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, moveCollectionName, options },
                spec: bulkRemoveOperationSpec
            });
            const poller = yield createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Removes the set of move resources included in the request body from move collection. The
     * orchestration is done by service. To aid the user to prerequisite the operation the client can call
     * operation with validateOnly property set to true.
     * @param resourceGroupName
     * @param moveCollectionName
     * @param options The options parameters.
     */
    beginBulkRemoveAndWait(resourceGroupName, moveCollectionName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginBulkRemove(resourceGroupName, moveCollectionName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Get all the Move Collections in the subscription.
     * @param options The options parameters.
     */
    _listMoveCollectionsBySubscription(options) {
        return this.client.sendOperationRequest({ options }, listMoveCollectionsBySubscriptionOperationSpec);
    }
    /**
     * Get all the Move Collections in the resource group.
     * @param resourceGroupName The Resource Group Name.
     * @param options The options parameters.
     */
    _listMoveCollectionsByResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listMoveCollectionsByResourceGroupOperationSpec);
    }
    /**
     * List of the move resources for which an arm resource is required for.
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param sourceId The sourceId for which the api is invoked.
     * @param options The options parameters.
     */
    listRequiredFor(resourceGroupName, moveCollectionName, sourceId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, moveCollectionName, sourceId, options }, listRequiredForOperationSpec);
    }
    /**
     * ListMoveCollectionsBySubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the
     *                 ListMoveCollectionsBySubscription method.
     * @param options The options parameters.
     */
    _listMoveCollectionsBySubscriptionNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listMoveCollectionsBySubscriptionNextOperationSpec);
    }
    /**
     * ListMoveCollectionsByResourceGroupNext
     * @param resourceGroupName The Resource Group Name.
     * @param nextLink The nextLink from the previous successful call to the
     *                 ListMoveCollectionsByResourceGroup method.
     * @param options The options parameters.
     */
    _listMoveCollectionsByResourceGroupNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, listMoveCollectionsByResourceGroupNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const createOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections/{moveCollectionName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.MoveCollection
        },
        201: {
            bodyMapper: Mappers.MoveCollection
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    requestBody: Parameters.body,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.moveCollectionName
    ],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections/{moveCollectionName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Mappers.MoveCollection
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    requestBody: Parameters.body1,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.moveCollectionName
    ],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections/{moveCollectionName}",
    httpMethod: "DELETE",
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        201: {
            bodyMapper: Mappers.OperationStatus
        },
        202: {
            bodyMapper: Mappers.OperationStatus
        },
        204: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.moveCollectionName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections/{moveCollectionName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.MoveCollection
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.moveCollectionName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const prepareOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections/{moveCollectionName}/prepare",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        201: {
            bodyMapper: Mappers.OperationStatus
        },
        202: {
            bodyMapper: Mappers.OperationStatus
        },
        204: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    requestBody: Parameters.body2,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.moveCollectionName
    ],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer
};
const initiateMoveOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections/{moveCollectionName}/initiateMove",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        201: {
            bodyMapper: Mappers.OperationStatus
        },
        202: {
            bodyMapper: Mappers.OperationStatus
        },
        204: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    requestBody: Parameters.body3,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.moveCollectionName
    ],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer
};
const commitOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections/{moveCollectionName}/commit",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        201: {
            bodyMapper: Mappers.OperationStatus
        },
        202: {
            bodyMapper: Mappers.OperationStatus
        },
        204: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    requestBody: Parameters.body4,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.moveCollectionName
    ],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer
};
const discardOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections/{moveCollectionName}/discard",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        201: {
            bodyMapper: Mappers.OperationStatus
        },
        202: {
            bodyMapper: Mappers.OperationStatus
        },
        204: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    requestBody: Parameters.body5,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.moveCollectionName
    ],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer
};
const resolveDependenciesOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections/{moveCollectionName}/resolveDependencies",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        201: {
            bodyMapper: Mappers.OperationStatus
        },
        202: {
            bodyMapper: Mappers.OperationStatus
        },
        204: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.moveCollectionName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const bulkRemoveOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections/{moveCollectionName}/bulkRemove",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        201: {
            bodyMapper: Mappers.OperationStatus
        },
        202: {
            bodyMapper: Mappers.OperationStatus
        },
        204: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    requestBody: Parameters.body6,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.moveCollectionName
    ],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer
};
const listMoveCollectionsBySubscriptionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Migrate/moveCollections",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.MoveCollectionResultList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.subscriptionId],
    headerParameters: [Parameters.accept],
    serializer
};
const listMoveCollectionsByResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.MoveCollectionResultList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listRequiredForOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections/{moveCollectionName}/requiredFor",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.RequiredForResourcesCollection
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.sourceId],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.moveCollectionName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listMoveCollectionsBySubscriptionNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.MoveCollectionResultList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.nextLink
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listMoveCollectionsByResourceGroupNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.MoveCollectionResultList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.nextLink
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=moveCollections.js.map