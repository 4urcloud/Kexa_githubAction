/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { MoveCollection as MoveCollectionMapper, UpdateMoveCollectionRequest as UpdateMoveCollectionRequestMapper, PrepareRequest as PrepareRequestMapper, ResourceMoveRequest as ResourceMoveRequestMapper, CommitRequest as CommitRequestMapper, DiscardRequest as DiscardRequestMapper, BulkRemoveRequest as BulkRemoveRequestMapper, MoveResource as MoveResourceMapper } from "../models/mappers";
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export const body = {
    parameterPath: ["options", "body"],
    mapper: MoveCollectionMapper
};
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const moveCollectionName = {
    parameterPath: "moveCollectionName",
    mapper: {
        serializedName: "moveCollectionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2023-08-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const body1 = {
    parameterPath: ["options", "body"],
    mapper: UpdateMoveCollectionRequestMapper
};
export const body2 = {
    parameterPath: ["options", "body"],
    mapper: PrepareRequestMapper
};
export const body3 = {
    parameterPath: ["options", "body"],
    mapper: ResourceMoveRequestMapper
};
export const body4 = {
    parameterPath: ["options", "body"],
    mapper: CommitRequestMapper
};
export const body5 = {
    parameterPath: ["options", "body"],
    mapper: DiscardRequestMapper
};
export const body6 = {
    parameterPath: ["options", "body"],
    mapper: BulkRemoveRequestMapper
};
export const sourceId = {
    parameterPath: "sourceId",
    mapper: {
        serializedName: "sourceId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const filter = {
    parameterPath: ["options", "filter"],
    mapper: {
        serializedName: "$filter",
        type: {
            name: "String"
        }
    }
};
export const body7 = {
    parameterPath: ["options", "body"],
    mapper: MoveResourceMapper
};
export const moveResourceName = {
    parameterPath: "moveResourceName",
    mapper: {
        serializedName: "moveResourceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const dependencyLevel = {
    parameterPath: ["options", "dependencyLevel"],
    mapper: {
        serializedName: "dependencyLevel",
        type: {
            name: "String"
        }
    }
};
export const orderby = {
    parameterPath: ["options", "orderby"],
    mapper: {
        serializedName: "$orderby",
        type: {
            name: "String"
        }
    }
};
//# sourceMappingURL=parameters.js.map