import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { OperationState } from '@azure/core-lro';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { SimplePollerLike } from '@azure/core-lro';

/** The RP custom operation error info. */
export declare interface AffectedMoveResource {
    /**
     * The affected move resource id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The affected move resource source id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly sourceId?: string;
    /**
     * The affected move resources.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly moveResources?: AffectedMoveResource[];
}

/** Defines the properties for automatic resolution. */
export declare interface AutomaticResolutionProperties {
    /**
     * Gets the MoveResource ARM ID of
     * the dependent resource if the resolution type is Automatic.
     */
    moveResourceId?: string;
}

/** Gets or sets the availability set resource settings. */
export declare interface AvailabilitySetResourceSettings extends ResourceSettings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    resourceType: "Microsoft.Compute/availabilitySets";
    /** Gets or sets the Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** Gets or sets the target fault domain. */
    faultDomain?: number;
    /** Gets or sets the target update domain. */
    updateDomain?: number;
}

/** Defines reference to an Azure resource. */
export declare interface AzureResourceReference {
    /** Gets the ARM resource ID of the tracked resource being referenced. */
    sourceArmResourceId: string;
}

/** Defines the request body for bulk remove of move resources operation. */
export declare interface BulkRemoveRequest {
    /** Gets or sets a value indicating whether the operation needs to only run pre-requisite. */
    validateOnly?: boolean;
    /** Gets or sets the list of resource Id's, by default it accepts move resource id's unless the input type is switched via moveResourceInputType property. */
    moveResources?: string[];
    /** Defines the move resource input type. */
    moveResourceInputType?: MoveResourceInputType;
}

/** An error response from the service. */
export declare interface CloudError {
    /** Cloud error body. */
    error?: CloudErrorBody;
}

/** An error response from the service. */
export declare interface CloudErrorBody {
    /** An identifier for the error. Codes are invariant and are intended to be consumed programmatically. */
    code?: string;
    /** A message describing the error, intended to be suitable for display in a user interface. */
    message?: string;
    /** The target of the particular error. For example, the name of the property in error. */
    target?: string;
    /** A list of additional details about the error. */
    details?: CloudErrorBody[];
}

/** Defines the request body for commit operation. */
export declare interface CommitRequest {
    /** Gets or sets a value indicating whether the operation needs to only run pre-requisite. */
    validateOnly?: boolean;
    /** Gets or sets the list of resource Id's, by default it accepts move resource id's unless the input type is switched via moveResourceInputType property. */
    moveResources: string[];
    /** Defines the move resource input type. */
    moveResourceInputType?: MoveResourceInputType;
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export declare type CreatedByType = string;

/**
 * Defines values for DependencyLevel. \
 * {@link KnownDependencyLevel} can be used interchangeably with DependencyLevel,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Direct** \
 * **Descendant**
 */
export declare type DependencyLevel = string;

/**
 * Defines values for DependencyType. \
 * {@link KnownDependencyType} can be used interchangeably with DependencyType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **RequiredForPrepare** \
 * **RequiredForMove**
 */
export declare type DependencyType = string;

/** Defines the request body for discard operation. */
export declare interface DiscardRequest {
    /** Gets or sets a value indicating whether the operation needs to only run pre-requisite. */
    validateOnly?: boolean;
    /** Gets or sets the list of resource Id's, by default it accepts move resource id's unless the input type is switched via moveResourceInputType property. */
    moveResources: string[];
    /** Defines the move resource input type. */
    moveResourceInputType?: MoveResourceInputType;
}

/** Defines the disk encryption set resource settings. */
export declare interface DiskEncryptionSetResourceSettings extends ResourceSettings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    resourceType: "Microsoft.Compute/diskEncryptionSets";
}

/**
 * Contains the localized display information for this particular operation / action. These
 * value will be used by several clients for
 * (1) custom role definitions for RBAC;
 * (2) complex query filters for the event service; and
 * (3) audit history / records for management operations.
 */
export declare interface Display {
    /**
     * Gets or sets the provider.
     * The localized friendly form of the resource provider name – it is expected to also
     * include the publisher/company responsible.
     * It should use Title Casing and begin with "Microsoft" for 1st party services.
     * e.g. "Microsoft Monitoring Insights" or "Microsoft Compute.".
     */
    provider?: string;
    /**
     * Gets or sets the resource.
     * The localized friendly form of the resource related to this action/operation – it
     * should match the public documentation for the resource provider.
     * It should use Title Casing.
     * This value should be unique for a particular URL type (e.g. nested types should *not*
     * reuse their parent’s display.resource field)
     * e.g. "Virtual Machines" or "Scheduler Job Collections", or "Virtual Machine VM Sizes"
     * or "Scheduler Jobs".
     */
    resource?: string;
    /**
     * Gets or sets the operation.
     * The localized friendly name for the operation, as it should be shown to the user.
     * It should be concise (to fit in drop downs) but clear (i.e. self-documenting).
     * It should use Title Casing.
     * Prescriptive guidance: Read Create or Update Delete 'ActionName'.
     */
    operation?: string;
    /**
     * Gets or sets the description.
     * The localized friendly description for the operation, as it should be shown to the
     * user.
     * It should be thorough, yet concise – it will be used in tool tips and detailed views.
     * Prescriptive guidance for namespace:
     * Read any 'display.provider'  resource
     * Create or Update any  'display.provider'  resource
     * Delete any  'display.provider'  resource
     * Perform any other action on any  'display.provider'  resource
     * Prescriptive guidance for namespace:
     * Read any 'display.resource' Create or Update any  'display.resource' Delete any
     *  'display.resource' 'ActionName' any 'display.resources'.
     */
    description?: string;
}

/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/** Defines the MSI properties of the Move Collection. */
export declare interface Identity {
    /** The type of identity used for the resource mover service. */
    type?: ResourceIdentityType;
    /** Gets or sets the principal id. */
    principalId?: string;
    /** Gets or sets the tenant id. */
    tenantId?: string;
}

/**
 * Defines values for JobName. \
 * {@link KnownJobName} can be used interchangeably with JobName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **InitialSync**
 */
export declare type JobName = string;

/** Defines the job status. */
export declare interface JobStatus {
    /**
     * Defines the job name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly jobName?: JobName;
    /**
     * Gets or sets the monitoring job percentage.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly jobProgress?: string;
}

/** Defines the key vault resource settings. */
export declare interface KeyVaultResourceSettings extends ResourceSettings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    resourceType: "Microsoft.KeyVault/vaults";
}

/** Known values of {@link CreatedByType} that the service accepts. */
export declare enum KnownCreatedByType {
    /** User */
    User = "User",
    /** Application */
    Application = "Application",
    /** ManagedIdentity */
    ManagedIdentity = "ManagedIdentity",
    /** Key */
    Key = "Key"
}

/** Known values of {@link DependencyLevel} that the service accepts. */
export declare enum KnownDependencyLevel {
    /** Direct */
    Direct = "Direct",
    /** Descendant */
    Descendant = "Descendant"
}

/** Known values of {@link DependencyType} that the service accepts. */
export declare enum KnownDependencyType {
    /** RequiredForPrepare */
    RequiredForPrepare = "RequiredForPrepare",
    /** RequiredForMove */
    RequiredForMove = "RequiredForMove"
}

/** Known values of {@link JobName} that the service accepts. */
export declare enum KnownJobName {
    /** InitialSync */
    InitialSync = "InitialSync"
}

/** Known values of {@link MoveResourceInputType} that the service accepts. */
export declare enum KnownMoveResourceInputType {
    /** MoveResourceId */
    MoveResourceId = "MoveResourceId",
    /** MoveResourceSourceId */
    MoveResourceSourceId = "MoveResourceSourceId"
}

/** Known values of {@link MoveState} that the service accepts. */
export declare enum KnownMoveState {
    /** AssignmentPending */
    AssignmentPending = "AssignmentPending",
    /** PreparePending */
    PreparePending = "PreparePending",
    /** PrepareInProgress */
    PrepareInProgress = "PrepareInProgress",
    /** PrepareFailed */
    PrepareFailed = "PrepareFailed",
    /** MovePending */
    MovePending = "MovePending",
    /** MoveInProgress */
    MoveInProgress = "MoveInProgress",
    /** MoveFailed */
    MoveFailed = "MoveFailed",
    /** DiscardInProgress */
    DiscardInProgress = "DiscardInProgress",
    /** DiscardFailed */
    DiscardFailed = "DiscardFailed",
    /** CommitPending */
    CommitPending = "CommitPending",
    /** CommitInProgress */
    CommitInProgress = "CommitInProgress",
    /** CommitFailed */
    CommitFailed = "CommitFailed",
    /** Committed */
    Committed = "Committed",
    /** DeleteSourcePending */
    DeleteSourcePending = "DeleteSourcePending",
    /** ResourceMoveCompleted */
    ResourceMoveCompleted = "ResourceMoveCompleted"
}

/** Known values of {@link MoveType} that the service accepts. */
export declare enum KnownMoveType {
    /** RegionToRegion */
    RegionToRegion = "RegionToRegion",
    /** RegionToZone */
    RegionToZone = "RegionToZone"
}

/** Known values of {@link ProvisioningState} that the service accepts. */
export declare enum KnownProvisioningState {
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Updating */
    Updating = "Updating",
    /** Creating */
    Creating = "Creating",
    /** Failed */
    Failed = "Failed"
}

/** Known values of {@link ResolutionType} that the service accepts. */
export declare enum KnownResolutionType {
    /** Manual */
    Manual = "Manual",
    /** Automatic */
    Automatic = "Automatic"
}

/** Known values of {@link ResourceIdentityType} that the service accepts. */
export declare enum KnownResourceIdentityType {
    /** None */
    None = "None",
    /** SystemAssigned */
    SystemAssigned = "SystemAssigned",
    /** UserAssigned */
    UserAssigned = "UserAssigned"
}

/** Known values of {@link TargetAvailabilityZone} that the service accepts. */
export declare enum KnownTargetAvailabilityZone {
    /** One */
    One = "1",
    /** Two */
    Two = "2",
    /** Three */
    Three = "3",
    /** NA */
    NA = "NA"
}

/** Known values of {@link ZoneRedundant} that the service accepts. */
export declare enum KnownZoneRedundant {
    /** Enable */
    Enable = "Enable",
    /** Disable */
    Disable = "Disable"
}

/** Defines load balancer backend address pool properties. */
export declare interface LBBackendAddressPoolResourceSettings {
    /** Gets or sets the backend address pool name. */
    name?: string;
}

/** Defines load balancer frontend IP configuration properties. */
export declare interface LBFrontendIPConfigurationResourceSettings {
    /** Gets or sets the frontend IP configuration name. */
    name?: string;
    /**
     * Gets or sets the IP address of the Load Balancer.This is only specified if a specific
     * private IP address shall be allocated from the subnet specified in subnetRef.
     */
    privateIpAddress?: string;
    /** Gets or sets PrivateIP allocation method (Static/Dynamic). */
    privateIpAllocationMethod?: string;
    /** Defines reference to subnet. */
    subnet?: SubnetReference;
    /** Gets or sets the csv list of zones. */
    zones?: string;
}

/** Defines reference to load balancer backend address pools. */
export declare interface LoadBalancerBackendAddressPoolReference extends ProxyResourceReference {
}

/** Defines reference to load balancer NAT rules. */
export declare interface LoadBalancerNatRuleReference extends ProxyResourceReference {
}

/** Defines the load balancer resource settings. */
export declare interface LoadBalancerResourceSettings extends ResourceSettings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    resourceType: "Microsoft.Network/loadBalancers";
    /** Gets or sets the Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** Gets or sets load balancer sku (Basic/Standard). */
    sku?: string;
    /** Gets or sets the frontend IP configurations of the load balancer. */
    frontendIPConfigurations?: LBFrontendIPConfigurationResourceSettings[];
    /** Gets or sets the backend address pools of the load balancer. */
    backendAddressPools?: LBBackendAddressPoolResourceSettings[];
    /**
     * Gets or sets the csv list of zones common for all frontend IP configurations. Note this is given
     *  precedence only if frontend IP configurations settings are not present.
     */
    zones?: string;
}

/** Defines the properties for manual resolution. */
export declare interface ManualResolutionProperties {
    /** Gets or sets the target resource ARM ID of the dependent resource if the resource type is Manual. */
    targetId?: string;
}

/** Define the move collection. */
export declare interface MoveCollection {
    /**
     * Fully qualified resource Id for the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The etag of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly etag?: string;
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** The geo-location where the resource lives. */
    location?: string;
    /** Defines the MSI properties of the Move Collection. */
    identity?: Identity;
    /** Defines the move collection properties. */
    properties?: MoveCollectionProperties;
    /**
     * Metadata pertaining to creation and last modification of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
}

/** Defines the move collection properties. */
export declare interface MoveCollectionProperties {
    /** Gets or sets the source region. */
    sourceRegion?: string;
    /** Gets or sets the target region. */
    targetRegion?: string;
    /** Gets or sets the move region which indicates the region where the VM Regional to Zonal move will be conducted. */
    moveRegion?: string;
    /**
     * Defines the provisioning states.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /** Gets or sets the version of move collection. */
    version?: string;
    /** Defines the MoveType. */
    moveType?: MoveType;
    /**
     * Defines the move collection errors.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly errors?: MoveCollectionPropertiesErrors;
}

/** Defines the move collection errors. */
export declare interface MoveCollectionPropertiesErrors extends MoveResourceError {
}

/** Defines the collection of move collections. */
export declare interface MoveCollectionResultList {
    /** Gets the list of move collections. */
    value?: MoveCollection[];
    /** Gets the value of  next link. */
    nextLink?: string;
}

/** Interface representing a MoveCollections. */
export declare interface MoveCollections {
    /**
     * Get all the Move Collections in the subscription.
     * @param options The options parameters.
     */
    listMoveCollectionsBySubscription(options?: MoveCollectionsListMoveCollectionsBySubscriptionOptionalParams): PagedAsyncIterableIterator<MoveCollection>;
    /**
     * Get all the Move Collections in the resource group.
     * @param resourceGroupName The Resource Group Name.
     * @param options The options parameters.
     */
    listMoveCollectionsByResourceGroup(resourceGroupName: string, options?: MoveCollectionsListMoveCollectionsByResourceGroupOptionalParams): PagedAsyncIterableIterator<MoveCollection>;
    /**
     * Creates or updates a move collection.
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param options The options parameters.
     */
    create(resourceGroupName: string, moveCollectionName: string, options?: MoveCollectionsCreateOptionalParams): Promise<MoveCollectionsCreateResponse>;
    /**
     * Updates a move collection.
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, moveCollectionName: string, options?: MoveCollectionsUpdateOptionalParams): Promise<MoveCollectionsUpdateResponse>;
    /**
     * Deletes a move collection.
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, moveCollectionName: string, options?: MoveCollectionsDeleteOptionalParams): Promise<SimplePollerLike<OperationState<MoveCollectionsDeleteResponse>, MoveCollectionsDeleteResponse>>;
    /**
     * Deletes a move collection.
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, moveCollectionName: string, options?: MoveCollectionsDeleteOptionalParams): Promise<MoveCollectionsDeleteResponse>;
    /**
     * Gets the move collection.
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, moveCollectionName: string, options?: MoveCollectionsGetOptionalParams): Promise<MoveCollectionsGetResponse>;
    /**
     * Initiates prepare for the set of resources included in the request body. The prepare operation is on
     * the moveResources that are in the moveState 'PreparePending' or 'PrepareFailed', on a successful
     * completion the moveResource moveState do a transition to MovePending. To aid the user to
     * prerequisite the operation the client can call operation with validateOnly property set to true.
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param options The options parameters.
     */
    beginPrepare(resourceGroupName: string, moveCollectionName: string, options?: MoveCollectionsPrepareOptionalParams): Promise<SimplePollerLike<OperationState<MoveCollectionsPrepareResponse>, MoveCollectionsPrepareResponse>>;
    /**
     * Initiates prepare for the set of resources included in the request body. The prepare operation is on
     * the moveResources that are in the moveState 'PreparePending' or 'PrepareFailed', on a successful
     * completion the moveResource moveState do a transition to MovePending. To aid the user to
     * prerequisite the operation the client can call operation with validateOnly property set to true.
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param options The options parameters.
     */
    beginPrepareAndWait(resourceGroupName: string, moveCollectionName: string, options?: MoveCollectionsPrepareOptionalParams): Promise<MoveCollectionsPrepareResponse>;
    /**
     * Moves the set of resources included in the request body. The move operation is triggered after the
     * moveResources are in the moveState 'MovePending' or 'MoveFailed', on a successful completion the
     * moveResource moveState do a transition to CommitPending. To aid the user to prerequisite the
     * operation the client can call operation with validateOnly property set to true.
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param options The options parameters.
     */
    beginInitiateMove(resourceGroupName: string, moveCollectionName: string, options?: MoveCollectionsInitiateMoveOptionalParams): Promise<SimplePollerLike<OperationState<MoveCollectionsInitiateMoveResponse>, MoveCollectionsInitiateMoveResponse>>;
    /**
     * Moves the set of resources included in the request body. The move operation is triggered after the
     * moveResources are in the moveState 'MovePending' or 'MoveFailed', on a successful completion the
     * moveResource moveState do a transition to CommitPending. To aid the user to prerequisite the
     * operation the client can call operation with validateOnly property set to true.
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param options The options parameters.
     */
    beginInitiateMoveAndWait(resourceGroupName: string, moveCollectionName: string, options?: MoveCollectionsInitiateMoveOptionalParams): Promise<MoveCollectionsInitiateMoveResponse>;
    /**
     * Commits the set of resources included in the request body. The commit operation is triggered on the
     * moveResources in the moveState 'CommitPending' or 'CommitFailed', on a successful completion the
     * moveResource moveState do a transition to Committed. To aid the user to prerequisite the operation
     * the client can call operation with validateOnly property set to true.
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param options The options parameters.
     */
    beginCommit(resourceGroupName: string, moveCollectionName: string, options?: MoveCollectionsCommitOptionalParams): Promise<SimplePollerLike<OperationState<MoveCollectionsCommitResponse>, MoveCollectionsCommitResponse>>;
    /**
     * Commits the set of resources included in the request body. The commit operation is triggered on the
     * moveResources in the moveState 'CommitPending' or 'CommitFailed', on a successful completion the
     * moveResource moveState do a transition to Committed. To aid the user to prerequisite the operation
     * the client can call operation with validateOnly property set to true.
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param options The options parameters.
     */
    beginCommitAndWait(resourceGroupName: string, moveCollectionName: string, options?: MoveCollectionsCommitOptionalParams): Promise<MoveCollectionsCommitResponse>;
    /**
     * Discards the set of resources included in the request body. The discard operation is triggered on
     * the moveResources in the moveState 'CommitPending' or 'DiscardFailed', on a successful completion
     * the moveResource moveState do a transition to MovePending. To aid the user to prerequisite the
     * operation the client can call operation with validateOnly property set to true.
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param options The options parameters.
     */
    beginDiscard(resourceGroupName: string, moveCollectionName: string, options?: MoveCollectionsDiscardOptionalParams): Promise<SimplePollerLike<OperationState<MoveCollectionsDiscardResponse>, MoveCollectionsDiscardResponse>>;
    /**
     * Discards the set of resources included in the request body. The discard operation is triggered on
     * the moveResources in the moveState 'CommitPending' or 'DiscardFailed', on a successful completion
     * the moveResource moveState do a transition to MovePending. To aid the user to prerequisite the
     * operation the client can call operation with validateOnly property set to true.
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param options The options parameters.
     */
    beginDiscardAndWait(resourceGroupName: string, moveCollectionName: string, options?: MoveCollectionsDiscardOptionalParams): Promise<MoveCollectionsDiscardResponse>;
    /**
     * Computes, resolves and validate the dependencies of the moveResources in the move collection.
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param options The options parameters.
     */
    beginResolveDependencies(resourceGroupName: string, moveCollectionName: string, options?: MoveCollectionsResolveDependenciesOptionalParams): Promise<SimplePollerLike<OperationState<MoveCollectionsResolveDependenciesResponse>, MoveCollectionsResolveDependenciesResponse>>;
    /**
     * Computes, resolves and validate the dependencies of the moveResources in the move collection.
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param options The options parameters.
     */
    beginResolveDependenciesAndWait(resourceGroupName: string, moveCollectionName: string, options?: MoveCollectionsResolveDependenciesOptionalParams): Promise<MoveCollectionsResolveDependenciesResponse>;
    /**
     * Removes the set of move resources included in the request body from move collection. The
     * orchestration is done by service. To aid the user to prerequisite the operation the client can call
     * operation with validateOnly property set to true.
     * @param resourceGroupName
     * @param moveCollectionName
     * @param options The options parameters.
     */
    beginBulkRemove(resourceGroupName: string, moveCollectionName: string, options?: MoveCollectionsBulkRemoveOptionalParams): Promise<SimplePollerLike<OperationState<MoveCollectionsBulkRemoveResponse>, MoveCollectionsBulkRemoveResponse>>;
    /**
     * Removes the set of move resources included in the request body from move collection. The
     * orchestration is done by service. To aid the user to prerequisite the operation the client can call
     * operation with validateOnly property set to true.
     * @param resourceGroupName
     * @param moveCollectionName
     * @param options The options parameters.
     */
    beginBulkRemoveAndWait(resourceGroupName: string, moveCollectionName: string, options?: MoveCollectionsBulkRemoveOptionalParams): Promise<MoveCollectionsBulkRemoveResponse>;
    /**
     * List of the move resources for which an arm resource is required for.
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param sourceId The sourceId for which the api is invoked.
     * @param options The options parameters.
     */
    listRequiredFor(resourceGroupName: string, moveCollectionName: string, sourceId: string, options?: MoveCollectionsListRequiredForOptionalParams): Promise<MoveCollectionsListRequiredForResponse>;
}

/** Optional parameters. */
export declare interface MoveCollectionsBulkRemoveOptionalParams extends coreClient.OperationOptions {
    /** Defines the request body for bulk remove of move resources operation. */
    body?: BulkRemoveRequest;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the bulkRemove operation. */
export declare type MoveCollectionsBulkRemoveResponse = OperationStatus;

/** Optional parameters. */
export declare interface MoveCollectionsCommitOptionalParams extends coreClient.OperationOptions {
    /** Defines the request body for commit operation. */
    body?: CommitRequest;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the commit operation. */
export declare type MoveCollectionsCommitResponse = OperationStatus;

/** Optional parameters. */
export declare interface MoveCollectionsCreateOptionalParams extends coreClient.OperationOptions {
    /** Define the move collection. */
    body?: MoveCollection;
}

/** Contains response data for the create operation. */
export declare type MoveCollectionsCreateResponse = MoveCollection;

/** Optional parameters. */
export declare interface MoveCollectionsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export declare type MoveCollectionsDeleteResponse = OperationStatus;

/** Optional parameters. */
export declare interface MoveCollectionsDiscardOptionalParams extends coreClient.OperationOptions {
    /** Defines the request body for discard operation. */
    body?: DiscardRequest;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the discard operation. */
export declare type MoveCollectionsDiscardResponse = OperationStatus;

/** Optional parameters. */
export declare interface MoveCollectionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type MoveCollectionsGetResponse = MoveCollection;

/** Optional parameters. */
export declare interface MoveCollectionsInitiateMoveOptionalParams extends coreClient.OperationOptions {
    /** Defines the request body for resource move operation. */
    body?: ResourceMoveRequest;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the initiateMove operation. */
export declare type MoveCollectionsInitiateMoveResponse = OperationStatus;

/** Optional parameters. */
export declare interface MoveCollectionsListMoveCollectionsByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listMoveCollectionsByResourceGroupNext operation. */
export declare type MoveCollectionsListMoveCollectionsByResourceGroupNextResponse = MoveCollectionResultList;

/** Optional parameters. */
export declare interface MoveCollectionsListMoveCollectionsByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listMoveCollectionsByResourceGroup operation. */
export declare type MoveCollectionsListMoveCollectionsByResourceGroupResponse = MoveCollectionResultList;

/** Optional parameters. */
export declare interface MoveCollectionsListMoveCollectionsBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listMoveCollectionsBySubscriptionNext operation. */
export declare type MoveCollectionsListMoveCollectionsBySubscriptionNextResponse = MoveCollectionResultList;

/** Optional parameters. */
export declare interface MoveCollectionsListMoveCollectionsBySubscriptionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listMoveCollectionsBySubscription operation. */
export declare type MoveCollectionsListMoveCollectionsBySubscriptionResponse = MoveCollectionResultList;

/** Optional parameters. */
export declare interface MoveCollectionsListRequiredForOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listRequiredFor operation. */
export declare type MoveCollectionsListRequiredForResponse = RequiredForResourcesCollection;

/** Optional parameters. */
export declare interface MoveCollectionsPrepareOptionalParams extends coreClient.OperationOptions {
    /** Defines the request body for initiate prepare operation. */
    body?: PrepareRequest;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the prepare operation. */
export declare type MoveCollectionsPrepareResponse = OperationStatus;

/** Optional parameters. */
export declare interface MoveCollectionsResolveDependenciesOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the resolveDependencies operation. */
export declare type MoveCollectionsResolveDependenciesResponse = OperationStatus;

/** Optional parameters. */
export declare interface MoveCollectionsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Defines the request body for updating move collection. */
    body?: UpdateMoveCollectionRequest;
}

/** Contains response data for the update operation. */
export declare type MoveCollectionsUpdateResponse = MoveCollection;

/** The move custom error info. */
export declare interface MoveErrorInfo {
    /**
     * The affected move resources.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly moveResources?: AffectedMoveResource[];
}

/** Defines the move resource. */
export declare interface MoveResource {
    /**
     * Fully qualified resource Id for the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** Defines the move resource properties. */
    properties?: MoveResourceProperties;
    /**
     * Metadata pertaining to creation and last modification of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
}

/** Defines the collection of move resources. */
export declare interface MoveResourceCollection {
    /** Gets the list of move resources. */
    value?: MoveResource[];
    /** Gets the value of  next link. */
    nextLink?: string;
    /** Gets or sets the list of summary items and the field on which summary is done. */
    summaryCollection?: SummaryCollection;
    /**
     * Gets the total count.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly totalCount?: number;
}

/** Defines the dependency of the move resource. */
export declare interface MoveResourceDependency {
    /** Gets the source ARM ID of the dependent resource. */
    id?: string;
    /** Gets the dependency resolution status. */
    resolutionStatus?: string;
    /** Defines the resolution type. */
    resolutionType?: ResolutionType;
    /** Defines the dependency type. */
    dependencyType?: DependencyType;
    /** Defines the properties for manual resolution. */
    manualResolution?: ManualResolutionProperties;
    /** Defines the properties for automatic resolution. */
    automaticResolution?: AutomaticResolutionProperties;
    /** Gets or sets a value indicating whether the dependency is optional. */
    isOptional?: string;
}

/** Defines the dependency override of the move resource. */
export declare interface MoveResourceDependencyOverride {
    /** Gets or sets the ARM ID of the dependent resource. */
    id?: string;
    /**
     * Gets or sets the resource ARM id of either the MoveResource or the resource ARM ID of
     * the dependent resource.
     */
    targetId?: string;
}

/** An error response from the azure resource mover service. */
export declare interface MoveResourceError {
    /** The move resource error body. */
    properties?: MoveResourceErrorBody;
}

/** An error response from the Azure Migrate service. */
export declare interface MoveResourceErrorBody {
    /**
     * An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * A message describing the error, intended to be suitable for display in a user interface.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
    /**
     * The target of the particular error. For example, the name of the property in error.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly target?: string;
    /**
     * A list of additional details about the error.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly details?: MoveResourceErrorBody[];
}

/** Move resource filter. */
export declare interface MoveResourceFilter {
    properties?: MoveResourceFilterProperties;
}

export declare interface MoveResourceFilterProperties {
    /** The provisioning state. */
    provisioningState?: string;
}

/**
 * Defines values for MoveResourceInputType. \
 * {@link KnownMoveResourceInputType} can be used interchangeably with MoveResourceInputType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **MoveResourceId** \
 * **MoveResourceSourceId**
 */
export declare type MoveResourceInputType = string;

/** Defines the move resource properties. */
export declare interface MoveResourceProperties {
    /**
     * Defines the provisioning states.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /** Gets or sets the Source ARM Id of the resource. */
    sourceId: string;
    /**
     * Gets or sets the Target ARM Id of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly targetId?: string;
    /** Gets or sets the existing target ARM Id of the resource. */
    existingTargetId?: string;
    /** Gets or sets the resource settings. */
    resourceSettings?: ResourceSettingsUnion;
    /**
     * Gets or sets the source resource settings.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly sourceResourceSettings?: ResourceSettingsUnion;
    /**
     * Defines the move resource status.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly moveStatus?: MoveResourcePropertiesMoveStatus;
    /**
     * Gets or sets the move resource dependencies.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dependsOn?: MoveResourceDependency[];
    /** Gets or sets the move resource dependencies overrides. */
    dependsOnOverrides?: MoveResourceDependencyOverride[];
    /**
     * Gets a value indicating whether the resolve action is required over the move collection.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isResolveRequired?: boolean;
    /**
     * Defines the move resource errors.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly errors?: MoveResourcePropertiesErrors;
}

/** Defines the move resource errors. */
export declare interface MoveResourcePropertiesErrors extends MoveResourceError {
}

/** Defines the move resource status. */
export declare interface MoveResourcePropertiesMoveStatus extends MoveResourceStatus {
}

/** Interface representing a MoveResources. */
export declare interface MoveResources {
    /**
     * Lists the Move Resources in the move collection.
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, moveCollectionName: string, options?: MoveResourcesListOptionalParams): PagedAsyncIterableIterator<MoveResource>;
    /**
     * Creates or updates a Move Resource in the move collection.
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param moveResourceName The Move Resource Name.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName: string, moveCollectionName: string, moveResourceName: string, options?: MoveResourcesCreateOptionalParams): Promise<SimplePollerLike<OperationState<MoveResourcesCreateResponse>, MoveResourcesCreateResponse>>;
    /**
     * Creates or updates a Move Resource in the move collection.
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param moveResourceName The Move Resource Name.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName: string, moveCollectionName: string, moveResourceName: string, options?: MoveResourcesCreateOptionalParams): Promise<MoveResourcesCreateResponse>;
    /**
     * Deletes a Move Resource from the move collection.
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param moveResourceName The Move Resource Name.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, moveCollectionName: string, moveResourceName: string, options?: MoveResourcesDeleteOptionalParams): Promise<SimplePollerLike<OperationState<MoveResourcesDeleteResponse>, MoveResourcesDeleteResponse>>;
    /**
     * Deletes a Move Resource from the move collection.
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param moveResourceName The Move Resource Name.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, moveCollectionName: string, moveResourceName: string, options?: MoveResourcesDeleteOptionalParams): Promise<MoveResourcesDeleteResponse>;
    /**
     * Gets the Move Resource.
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param moveResourceName The Move Resource Name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, moveCollectionName: string, moveResourceName: string, options?: MoveResourcesGetOptionalParams): Promise<MoveResourcesGetResponse>;
}

/** Optional parameters. */
export declare interface MoveResourcesCreateOptionalParams extends coreClient.OperationOptions {
    /** Defines the move resource. */
    body?: MoveResource;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the create operation. */
export declare type MoveResourcesCreateResponse = MoveResource;

/** Optional parameters. */
export declare interface MoveResourcesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export declare type MoveResourcesDeleteResponse = OperationStatus;

/** Optional parameters. */
export declare interface MoveResourcesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type MoveResourcesGetResponse = MoveResource;

/** Optional parameters. */
export declare interface MoveResourcesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type MoveResourcesListNextResponse = MoveResourceCollection;

/** Optional parameters. */
export declare interface MoveResourcesListOptionalParams extends coreClient.OperationOptions {
    /** The filter to apply on the operation. For example, you can use $filter=Properties/ProvisioningState eq 'Succeeded'. */
    filter?: string;
}

/** Contains response data for the list operation. */
export declare type MoveResourcesListResponse = MoveResourceCollection;

/** Defines the move resource status. */
export declare interface MoveResourceStatus {
    /**
     * Defines the MoveResource states.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly moveState?: MoveState;
    /** Defines the job status. */
    jobStatus?: JobStatus;
    /** An error response from the azure resource mover service. */
    errors?: MoveResourceError;
}

/**
 * Defines values for MoveState. \
 * {@link KnownMoveState} can be used interchangeably with MoveState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AssignmentPending** \
 * **PreparePending** \
 * **PrepareInProgress** \
 * **PrepareFailed** \
 * **MovePending** \
 * **MoveInProgress** \
 * **MoveFailed** \
 * **DiscardInProgress** \
 * **DiscardFailed** \
 * **CommitPending** \
 * **CommitInProgress** \
 * **CommitFailed** \
 * **Committed** \
 * **DeleteSourcePending** \
 * **ResourceMoveCompleted**
 */
export declare type MoveState = string;

/**
 * Defines values for MoveType. \
 * {@link KnownMoveType} can be used interchangeably with MoveType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **RegionToRegion** \
 * **RegionToZone**
 */
export declare type MoveType = string;

/** Defines the network interface resource settings. */
export declare interface NetworkInterfaceResourceSettings extends ResourceSettings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    resourceType: "Microsoft.Network/networkInterfaces";
    /** Gets or sets the Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** Gets or sets the IP configurations of the NIC. */
    ipConfigurations?: NicIpConfigurationResourceSettings[];
    /** Gets or sets a value indicating whether accelerated networking is enabled. */
    enableAcceleratedNetworking?: boolean;
}

/** Defines the NSG resource settings. */
export declare interface NetworkSecurityGroupResourceSettings extends ResourceSettings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    resourceType: "Microsoft.Network/networkSecurityGroups";
    /** Gets or sets the Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** Gets or sets Security rules of network security group. */
    securityRules?: NsgSecurityRule[];
}

/** Defines NIC IP configuration properties. */
export declare interface NicIpConfigurationResourceSettings {
    /** Gets or sets the IP configuration name. */
    name?: string;
    /** Gets or sets the private IP address of the network interface IP Configuration. */
    privateIpAddress?: string;
    /** Gets or sets the private IP address allocation method. */
    privateIpAllocationMethod?: string;
    /** Defines reference to subnet. */
    subnet?: SubnetReference;
    /** Gets or sets a value indicating whether this IP configuration is the primary. */
    primary?: boolean;
    /** Gets or sets the references of the load balancer backend address pools. */
    loadBalancerBackendAddressPools?: LoadBalancerBackendAddressPoolReference[];
    /** Gets or sets the references of the load balancer NAT rules. */
    loadBalancerNatRules?: LoadBalancerNatRuleReference[];
    /** Defines reference to a public IP. */
    publicIp?: PublicIpReference;
}

/** Defines reference to NSG. */
export declare interface NsgReference extends AzureResourceReference {
}

/** Security Rule data model for Network Security Groups. */
export declare interface NsgSecurityRule {
    /** Gets or sets the Security rule name. */
    name?: string;
    /**
     * Gets or sets whether network traffic is allowed or denied.
     * Possible values are “Allow” and “Deny”.
     */
    access?: string;
    /** Gets or sets a description for this rule. Restricted to 140 chars. */
    description?: string;
    /**
     * Gets or sets destination address prefix. CIDR or source IP range.
     *  A “*” can also be used to match all source IPs. Default tags such
     * as ‘VirtualNetwork’, ‘AzureLoadBalancer’ and ‘Internet’ can also be used.
     */
    destinationAddressPrefix?: string;
    /**
     * Gets or sets Destination Port or Range. Integer or range between
     * 0 and 65535. A “*” can also be used to match all ports.
     */
    destinationPortRange?: string;
    /**
     * Gets or sets the direction of the rule.InBound or Outbound. The
     * direction specifies if rule will be evaluated on incoming or outgoing traffic.
     */
    direction?: string;
    /**
     * Gets or sets the priority of the rule. The value can be between
     * 100 and 4096. The priority number must be unique for each rule in the collection.
     * The lower the priority number, the higher the priority of the rule.
     */
    priority?: number;
    /** Gets or sets Network protocol this rule applies to. Can be Tcp, Udp or All(*). */
    protocol?: string;
    /**
     * Gets or sets source address prefix. CIDR or source IP range. A
     * “*” can also be used to match all source IPs.  Default tags such as ‘VirtualNetwork’,
     * ‘AzureLoadBalancer’ and ‘Internet’ can also be used. If this is an ingress
     * rule, specifies where network traffic originates from.
     */
    sourceAddressPrefix?: string;
    /**
     * Gets or sets Source Port or Range. Integer or range between 0 and
     * 65535. A “*” can also be used to match all ports.
     */
    sourcePortRange?: string;
}

/** The operation error info. */
export declare interface OperationErrorAdditionalInfo {
    /**
     * The error type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The operation error info.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly info?: MoveErrorInfo;
}

/** Operations discovery class. */
export declare interface OperationsDiscovery {
    /**
     * Gets or sets Name of the API.
     * The name of the operation being performed on this particular object. It should
     * match the action name that appears in RBAC / the event service.
     * Examples of operations include:
     * * Microsoft.Compute/virtualMachine/capture/action
     * * Microsoft.Compute/virtualMachine/restart/action
     * * Microsoft.Compute/virtualMachine/write
     * * Microsoft.Compute/virtualMachine/read
     * * Microsoft.Compute/virtualMachine/delete
     * Each action should include, in order:
     * (1) Resource Provider Namespace
     * (2) Type hierarchy for which the action applies (e.g. server/databases for a SQL
     * Azure database)
     * (3) Read, Write, Action or Delete indicating which type applies. If it is a PUT/PATCH
     * on a collection or named value, Write should be used.
     * If it is a GET, Read should be used. If it is a DELETE, Delete should be used. If it
     * is a POST, Action should be used.
     * As a note: all resource providers would need to include the "{Resource Provider
     * Namespace}/register/action" operation in their response.
     * This API is used to register for their service, and should include details about the
     * operation (e.g. a localized name for the resource provider + any special
     * considerations like PII release).
     */
    name?: string;
    /** Indicates whether the operation is a data action */
    isDataAction?: boolean;
    /**
     * Contains the localized display information for this particular operation / action. These
     * value will be used by several clients for
     * (1) custom role definitions for RBAC;
     * (2) complex query filters for the event service; and
     * (3) audit history / records for management operations.
     */
    display?: Display;
    /**
     * Gets or sets Origin.
     * The intended executor of the operation; governs the display of the operation in the
     * RBAC UX and the audit logs UX.
     * Default value is "user,system".
     */
    origin?: string;
    /** ClientDiscovery properties. */
    properties?: Record<string, unknown>;
}

/** Collection of ClientDiscovery details. */
export declare interface OperationsDiscoveryCollection {
    /** Gets or sets the ClientDiscovery details. */
    value?: OperationsDiscovery[];
    /** Gets or sets the value of next link. */
    nextLink?: string;
}

/** Optional parameters. */
export declare interface OperationsDiscoveryGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type OperationsDiscoveryGetResponse = OperationsDiscoveryCollection;

/** Interface representing a OperationsDiscoveryOperations. */
export declare interface OperationsDiscoveryOperations {
    /** @param options The options parameters. */
    get(options?: OperationsDiscoveryGetOptionalParams): Promise<OperationsDiscoveryGetResponse>;
}

/** Operation status REST resource. */
export declare interface OperationStatus {
    /**
     * Resource Id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Operation name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Status of the operation. ARM expects the terminal status to be one of Succeeded/ Failed/ Canceled. All other values imply that the operation is still running.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: string;
    /**
     * Start time.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly startTime?: string;
    /**
     * End time.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly endTime?: string;
    /**
     * Error stating all error details for the operation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly error?: OperationStatusError;
    /**
     * Custom data.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly properties?: Record<string, unknown>;
}

/** Class for operation status errors. */
export declare interface OperationStatusError {
    /**
     * The error code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * The error message.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
    /**
     * The error details.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly details?: OperationStatusError[];
    /**
     * The additional info.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalInfo?: OperationErrorAdditionalInfo[];
}

/** Defines the request body for initiate prepare operation. */
export declare interface PrepareRequest {
    /** Gets or sets a value indicating whether the operation needs to only run pre-requisite. */
    validateOnly?: boolean;
    /** Gets or sets the list of resource Id's, by default it accepts move resource id's unless the input type is switched via moveResourceInputType property. */
    moveResources: string[];
    /** Defines the move resource input type. */
    moveResourceInputType?: MoveResourceInputType;
}

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Updating** \
 * **Creating** \
 * **Failed**
 */
export declare type ProvisioningState = string;

/** Defines reference to a proxy resource. */
export declare interface ProxyResourceReference extends AzureResourceReference {
    /** Gets the name of the proxy resource on the target side. */
    name?: string;
}

/** Defines the public IP address resource settings. */
export declare interface PublicIPAddressResourceSettings extends ResourceSettings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    resourceType: "Microsoft.Network/publicIPAddresses";
    /** Gets or sets the Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** Gets or sets the domain name label. */
    domainNameLabel?: string;
    /** Gets or sets the fully qualified domain name. */
    fqdn?: string;
    /** Gets or sets public IP allocation method. */
    publicIpAllocationMethod?: string;
    /** Gets or sets public IP sku. */
    sku?: string;
    /** Gets or sets public IP zones. */
    zones?: string;
}

/** Defines reference to a public IP. */
export declare interface PublicIpReference extends AzureResourceReference {
}

/** Required for resources collection. */
export declare interface RequiredForResourcesCollection {
    /** Gets or sets the list of source Ids for which the input resource is required. */
    sourceIds?: string[];
}

/**
 * Defines values for ResolutionType. \
 * {@link KnownResolutionType} can be used interchangeably with ResolutionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Manual** \
 * **Automatic**
 */
export declare type ResolutionType = string;

/** Defines the resource group resource settings. */
export declare interface ResourceGroupResourceSettings extends ResourceSettings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    resourceType: "resourceGroups";
}

/**
 * Defines values for ResourceIdentityType. \
 * {@link KnownResourceIdentityType} can be used interchangeably with ResourceIdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **SystemAssigned** \
 * **UserAssigned**
 */
export declare type ResourceIdentityType = string;

/** Defines the request body for resource move operation. */
export declare interface ResourceMoveRequest {
    /** Gets or sets a value indicating whether the operation needs to only run pre-requisite. */
    validateOnly?: boolean;
    /** Gets or sets the list of resource Id's, by default it accepts move resource id's unless the input type is switched via moveResourceInputType property. */
    moveResources: string[];
    /** Defines the move resource input type. */
    moveResourceInputType?: MoveResourceInputType;
}

export declare class ResourceMoverServiceAPI extends coreClient.ServiceClient {
    $host: string;
    subscriptionId?: string;
    apiVersion: string;
    /**
     * Initializes a new instance of the ResourceMoverServiceAPI class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The Subscription ID.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: ResourceMoverServiceAPIOptionalParams);
    constructor(credentials: coreAuth.TokenCredential, options?: ResourceMoverServiceAPIOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    moveCollections: MoveCollections;
    moveResources: MoveResources;
    unresolvedDependencies: UnresolvedDependencies;
    operationsDiscoveryOperations: OperationsDiscoveryOperations;
}

/** Optional parameters. */
export declare interface ResourceMoverServiceAPIOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** Gets or sets the resource settings. */
export declare interface ResourceSettings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    resourceType: "Microsoft.Compute/virtualMachines" | "Microsoft.Compute/availabilitySets" | "Microsoft.Network/virtualNetworks" | "Microsoft.Network/networkInterfaces" | "Microsoft.Network/networkSecurityGroups" | "Microsoft.Network/loadBalancers" | "Microsoft.Sql/servers" | "Microsoft.Sql/servers/elasticPools" | "Microsoft.Sql/servers/databases" | "resourceGroups" | "Microsoft.Network/publicIPAddresses" | "Microsoft.KeyVault/vaults" | "Microsoft.Compute/diskEncryptionSets";
    /** Gets or sets the target Resource name. */
    targetResourceName?: string;
    /** Gets or sets the target resource group name. */
    targetResourceGroupName?: string;
}

export declare type ResourceSettingsUnion = ResourceSettings | VirtualMachineResourceSettings | AvailabilitySetResourceSettings | VirtualNetworkResourceSettings | NetworkInterfaceResourceSettings | NetworkSecurityGroupResourceSettings | LoadBalancerResourceSettings | SqlServerResourceSettings | SqlElasticPoolResourceSettings | SqlDatabaseResourceSettings | ResourceGroupResourceSettings | PublicIPAddressResourceSettings | KeyVaultResourceSettings | DiskEncryptionSetResourceSettings;

/** Defines the Sql Database resource settings. */
export declare interface SqlDatabaseResourceSettings extends ResourceSettings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    resourceType: "Microsoft.Sql/servers/databases";
    /** Gets or sets the Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** Defines the zone redundant resource setting. */
    zoneRedundant?: ZoneRedundant;
}

/** Defines the Sql ElasticPool resource settings. */
export declare interface SqlElasticPoolResourceSettings extends ResourceSettings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    resourceType: "Microsoft.Sql/servers/elasticPools";
    /** Gets or sets the Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** Defines the zone redundant resource setting. */
    zoneRedundant?: ZoneRedundant;
}

/** Defines the SQL Server resource settings. */
export declare interface SqlServerResourceSettings extends ResourceSettings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    resourceType: "Microsoft.Sql/servers";
}

/** Defines reference to subnet. */
export declare interface SubnetReference extends ProxyResourceReference {
}

/** Defines the virtual network subnets resource settings. */
export declare interface SubnetResourceSettings {
    /** Gets or sets the Subnet name. */
    name?: string;
    /** Gets or sets address prefix for the subnet. */
    addressPrefix?: string;
    /** Defines reference to NSG. */
    networkSecurityGroup?: NsgReference;
}

/** Summary item. */
export declare interface Summary {
    /** Gets the count. */
    count?: number;
    /** Gets the item. */
    item?: string;
}

/** Summary Collection. */
export declare interface SummaryCollection {
    /** Gets or sets the field name on which summary is done. */
    fieldName?: string;
    /** Gets or sets the list of summary items. */
    summary?: Summary[];
}

/** Metadata pertaining to creation and last modification of the resource. */
export declare interface SystemData {
    /** The identity that created the resource. */
    createdBy?: string;
    /** The type of identity that created the resource. */
    createdByType?: CreatedByType;
    /** The timestamp of resource creation (UTC). */
    createdAt?: Date;
    /** The identity that last modified the resource. */
    lastModifiedBy?: string;
    /** The type of identity that last modified the resource. */
    lastModifiedByType?: CreatedByType;
    /** The timestamp of resource last modification (UTC) */
    lastModifiedAt?: Date;
}

/**
 * Defines values for TargetAvailabilityZone. \
 * {@link KnownTargetAvailabilityZone} can be used interchangeably with TargetAvailabilityZone,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **1** \
 * **2** \
 * **3** \
 * **NA**
 */
export declare type TargetAvailabilityZone = string;

/** Interface representing a UnresolvedDependencies. */
export declare interface UnresolvedDependencies {
    /**
     * Gets a list of unresolved dependencies.
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, moveCollectionName: string, options?: UnresolvedDependenciesGetOptionalParams): PagedAsyncIterableIterator<UnresolvedDependency>;
}

/** Unresolved dependencies contract. */
export declare interface UnresolvedDependenciesFilter {
    properties?: UnresolvedDependenciesFilterProperties;
}

export declare interface UnresolvedDependenciesFilterProperties {
    /** The count of the resource. */
    count?: number;
}

/** Optional parameters. */
export declare interface UnresolvedDependenciesGetNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getNext operation. */
export declare type UnresolvedDependenciesGetNextResponse = UnresolvedDependencyCollection;

/** Optional parameters. */
export declare interface UnresolvedDependenciesGetOptionalParams extends coreClient.OperationOptions {
    /** The filter to apply on the operation. For example, $apply=filter(count eq 2). */
    filter?: string;
    /** Defines the dependency level. */
    dependencyLevel?: DependencyLevel;
    /** OData order by query option. For example, you can use $orderby=Count desc. */
    orderby?: string;
}

/** Contains response data for the get operation. */
export declare type UnresolvedDependenciesGetResponse = UnresolvedDependencyCollection;

/** Unresolved dependency. */
export declare interface UnresolvedDependency {
    /** Gets or sets the count. */
    count?: number;
    /** Gets or sets the arm id of the dependency. */
    id?: string;
}

/** Unresolved dependency collection. */
export declare interface UnresolvedDependencyCollection {
    /** Gets or sets the list of unresolved dependencies. */
    value?: UnresolvedDependency[];
    /** Gets or sets the value of  next link. */
    nextLink?: string;
    /**
     * Gets or sets the list of summary items and the field on which summary is done.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly summaryCollection?: SummaryCollection;
    /**
     * Gets the total count.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly totalCount?: number;
}

/** Defines the request body for updating move collection. */
export declare interface UpdateMoveCollectionRequest {
    /** Gets or sets the Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** Defines the MSI properties of the Move Collection. */
    identity?: Identity;
}

/** Gets or sets the virtual machine resource settings. */
export declare interface VirtualMachineResourceSettings extends ResourceSettings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    resourceType: "Microsoft.Compute/virtualMachines";
    /** Gets or sets the Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** Gets or sets user-managed identities */
    userManagedIdentities?: string[];
    /** Gets or sets the target availability zone. */
    targetAvailabilityZone?: TargetAvailabilityZone;
    /** Gets or sets the target virtual machine size. */
    targetVmSize?: string;
    /** Gets or sets the target availability set id for virtual machines not in an availability set at source. */
    targetAvailabilitySetId?: string;
}

/** Defines the virtual network resource settings. */
export declare interface VirtualNetworkResourceSettings extends ResourceSettings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    resourceType: "Microsoft.Network/virtualNetworks";
    /** Gets or sets the Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /**
     * Gets or sets a value indicating whether gets or sets whether the
     * DDOS protection should be switched on.
     */
    enableDdosProtection?: boolean;
    /** Gets or sets the address prefixes for the virtual network. */
    addressSpace?: string[];
    /**
     * Gets or sets DHCPOptions that contains an array of DNS servers available to VMs
     * deployed in the virtual network.
     */
    dnsServers?: string[];
    /** Gets or sets List of subnets in a VirtualNetwork. */
    subnets?: SubnetResourceSettings[];
}

/**
 * Defines values for ZoneRedundant. \
 * {@link KnownZoneRedundant} can be used interchangeably with ZoneRedundant,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enable** \
 * **Disable**
 */
export declare type ZoneRedundant = string;

export { }
