/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await, __awaiter } from "tslib";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
/// <reference lib="esnext.asynciterable" />
/** Class containing Servers operations. */
export class ServersImpl {
    /**
     * Initialize a new instance of the class Servers class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets all the Analysis Services servers for the given resource group.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
     *                          server is part. This name must be at least 1 character in length, and no more than 90.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName, options) {
        const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByResourceGroupPagingPage(resourceGroupName, options, settings);
            }
        };
    }
    listByResourceGroupPagingPage(resourceGroupName, options, _settings) {
        return __asyncGenerator(this, arguments, function* listByResourceGroupPagingPage_1() {
            let result;
            result = yield __await(this._listByResourceGroup(resourceGroupName, options));
            yield yield __await(result.value || []);
        });
    }
    listByResourceGroupPagingAll(resourceGroupName, options) {
        return __asyncGenerator(this, arguments, function* listByResourceGroupPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = __asyncValues(this.listByResourceGroupPagingPage(resourceGroupName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists all the Analysis Services servers for the given subscription.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, _settings) {
        return __asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            result = yield __await(this._list(options));
            yield yield __await(result.value || []);
        });
    }
    listPagingAll(options) {
        return __asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = __asyncValues(this.listPagingPage(options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Gets details about the specified Analysis Services server.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
     *                          server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be a minimum of 3 characters,
     *                   and a maximum of 63.
     * @param options The options parameters.
     */
    getDetails(resourceGroupName, serverName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serverName, options }, getDetailsOperationSpec);
    }
    /**
     * Provisions the specified Analysis Services server based on the configuration specified in the
     * request.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
     *                          server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be a minimum of 3 characters,
     *                   and a maximum of 63.
     * @param serverParameters Contains the information used to provision the Analysis Services server.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName, serverName, serverParameters, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, serverName, serverParameters, options }, createOperationSpec);
            const poller = new LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Provisions the specified Analysis Services server based on the configuration specified in the
     * request.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
     *                          server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be a minimum of 3 characters,
     *                   and a maximum of 63.
     * @param serverParameters Contains the information used to provision the Analysis Services server.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName, serverName, serverParameters, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreate(resourceGroupName, serverName, serverParameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Deletes the specified Analysis Services server.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
     *                          server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in
     *                   length, and no more than 63.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, serverName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, serverName, options }, deleteOperationSpec);
            const poller = new LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes the specified Analysis Services server.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
     *                          server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in
     *                   length, and no more than 63.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, serverName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, serverName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Updates the current state of the specified Analysis Services server.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
     *                          server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in
     *                   length, and no more than 63.
     * @param serverUpdateParameters Request object that contains the updated information for the server.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, serverName, serverUpdateParameters, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, serverName, serverUpdateParameters, options }, updateOperationSpec);
            const poller = new LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Updates the current state of the specified Analysis Services server.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
     *                          server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in
     *                   length, and no more than 63.
     * @param serverUpdateParameters Request object that contains the updated information for the server.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, serverName, serverUpdateParameters, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, serverName, serverUpdateParameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Suspends operation of the specified Analysis Services server instance.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
     *                          server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in
     *                   length, and no more than 63.
     * @param options The options parameters.
     */
    beginSuspend(resourceGroupName, serverName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, serverName, options }, suspendOperationSpec);
            const poller = new LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Suspends operation of the specified Analysis Services server instance.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
     *                          server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in
     *                   length, and no more than 63.
     * @param options The options parameters.
     */
    beginSuspendAndWait(resourceGroupName, serverName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginSuspend(resourceGroupName, serverName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Resumes operation of the specified Analysis Services server instance.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
     *                          server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in
     *                   length, and no more than 63.
     * @param options The options parameters.
     */
    beginResume(resourceGroupName, serverName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, serverName, options }, resumeOperationSpec);
            const poller = new LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Resumes operation of the specified Analysis Services server instance.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
     *                          server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in
     *                   length, and no more than 63.
     * @param options The options parameters.
     */
    beginResumeAndWait(resourceGroupName, serverName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginResume(resourceGroupName, serverName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Gets all the Analysis Services servers for the given resource group.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
     *                          server is part. This name must be at least 1 character in length, and no more than 90.
     * @param options The options parameters.
     */
    _listByResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listByResourceGroupOperationSpec);
    }
    /**
     * Lists all the Analysis Services servers for the given subscription.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec);
    }
    /**
     * Lists eligible SKUs for Analysis Services resource provider.
     * @param options The options parameters.
     */
    listSkusForNew(options) {
        return this.client.sendOperationRequest({ options }, listSkusForNewOperationSpec);
    }
    /**
     * Lists eligible SKUs for an Analysis Services resource.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
     *                          server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in
     *                   length, and no more than 63.
     * @param options The options parameters.
     */
    listSkusForExisting(resourceGroupName, serverName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serverName, options }, listSkusForExistingOperationSpec);
    }
    /**
     * Return the gateway status of the specified Analysis Services server instance.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
     *                          server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server.
     * @param options The options parameters.
     */
    listGatewayStatus(resourceGroupName, serverName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serverName, options }, listGatewayStatusOperationSpec);
    }
    /**
     * Dissociates a Unified Gateway associated with the server.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
     *                          server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in
     *                   length, and no more than 63.
     * @param options The options parameters.
     */
    dissociateGateway(resourceGroupName, serverName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serverName, options }, dissociateGatewayOperationSpec);
    }
    /**
     * Check the name availability in the target location.
     * @param location The region name which the operation will lookup into.
     * @param serverParameters Contains the information used to provision the Analysis Services server.
     * @param options The options parameters.
     */
    checkNameAvailability(location, serverParameters, options) {
        return this.client.sendOperationRequest({ location, serverParameters, options }, checkNameAvailabilityOperationSpec);
    }
    /**
     * List the result of the specified operation.
     * @param location The region name which the operation will lookup into.
     * @param operationId The target operation Id.
     * @param options The options parameters.
     */
    listOperationResults(location, operationId, options) {
        return this.client.sendOperationRequest({ location, operationId, options }, listOperationResultsOperationSpec);
    }
    /**
     * List the status of operation.
     * @param location The region name which the operation will lookup into.
     * @param operationId The target operation Id.
     * @param options The options parameters.
     */
    listOperationStatuses(location, operationId, options) {
        return this.client.sendOperationRequest({ location, operationId, options }, listOperationStatusesOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const getDetailsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.AnalysisServicesServer
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.serverName,
        Parameters.subscriptionId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const createOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.AnalysisServicesServer
        },
        201: {
            bodyMapper: Mappers.AnalysisServicesServer
        },
        202: {
            bodyMapper: Mappers.AnalysisServicesServer
        },
        204: {
            bodyMapper: Mappers.AnalysisServicesServer
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.serverParameters,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.serverName,
        Parameters.subscriptionId
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.serverName,
        Parameters.subscriptionId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Mappers.AnalysisServicesServer
        },
        201: {
            bodyMapper: Mappers.AnalysisServicesServer
        },
        202: {
            bodyMapper: Mappers.AnalysisServicesServer
        },
        204: {
            bodyMapper: Mappers.AnalysisServicesServer
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.serverUpdateParameters,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.serverName,
        Parameters.subscriptionId
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const suspendOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}/suspend",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.serverName,
        Parameters.subscriptionId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const resumeOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}/resume",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.serverName,
        Parameters.subscriptionId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listByResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.AnalysisServicesServers
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.subscriptionId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.AnalysisServices/servers",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.AnalysisServicesServers
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.subscriptionId],
    headerParameters: [Parameters.accept],
    serializer
};
const listSkusForNewOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.AnalysisServices/skus",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.SkuEnumerationForNewResourceResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.subscriptionId],
    headerParameters: [Parameters.accept],
    serializer
};
const listSkusForExistingOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}/skus",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.SkuEnumerationForExistingResourceResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.serverName,
        Parameters.subscriptionId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listGatewayStatusOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}/listGatewayStatus",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.GatewayListStatusLive
        },
        default: {
            bodyMapper: Mappers.GatewayListStatusError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.serverName,
        Parameters.subscriptionId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const dissociateGatewayOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}/dissociateGateway",
    httpMethod: "POST",
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.serverName,
        Parameters.subscriptionId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const checkNameAvailabilityOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.AnalysisServices/locations/{location}/checkNameAvailability",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.CheckServerNameAvailabilityResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.serverParameters1,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.location
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const listOperationResultsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.AnalysisServices/locations/{location}/operationresults/{operationId}",
    httpMethod: "GET",
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.location,
        Parameters.operationId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listOperationStatusesOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.AnalysisServices/locations/{location}/operationstatuses/{operationId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        202: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.location,
        Parameters.operationId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=servers.js.map