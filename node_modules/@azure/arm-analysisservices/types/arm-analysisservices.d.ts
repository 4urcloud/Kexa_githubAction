import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { PollerLike } from '@azure/core-lro';
import { PollOperationState } from '@azure/core-lro';

/** Represents an instance of an Analysis Services resource. */
export declare interface AnalysisServicesServer extends Resource {
    /** A collection of AS server administrators */
    asAdministrators?: ServerAdministrators;
    /** The SAS container URI to the backup container. */
    backupBlobContainerUri?: string;
    /** The gateway details configured for the AS server. */
    gatewayDetails?: GatewayDetails;
    /** The firewall settings for the AS server. */
    ipV4FirewallSettings?: IPv4FirewallSettings;
    /** How the read-write server's participation in the query pool is controlled.<br/>It can have the following values: <ul><li>readOnly - indicates that the read-write server is intended not to participate in query operations</li><li>all - indicates that the read-write server can participate in query operations</li></ul>Specifying readOnly when capacity is 1 results in error. */
    querypoolConnectionMode?: ConnectionMode;
    /** The managed mode of the server (0 = not managed, 1 = managed). */
    managedMode?: ManagedMode;
    /** The server monitor mode for AS server */
    serverMonitorMode?: ServerMonitorMode;
    /**
     * The current state of Analysis Services resource. The state is to indicate more states outside of resource provisioning.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly state?: State;
    /**
     * The current deployment state of Analysis Services resource. The provisioningState is to indicate states for resource provisioning.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /**
     * The full name of the Analysis Services resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly serverFullName?: string;
    /** The SKU of the Analysis Services resource. */
    skuPropertiesSku?: ResourceSku;
}

/** An object that represents a set of mutable Analysis Services resource properties. */
export declare interface AnalysisServicesServerMutableProperties {
    /** A collection of AS server administrators */
    asAdministrators?: ServerAdministrators;
    /** The SAS container URI to the backup container. */
    backupBlobContainerUri?: string;
    /** The gateway details configured for the AS server. */
    gatewayDetails?: GatewayDetails;
    /** The firewall settings for the AS server. */
    ipV4FirewallSettings?: IPv4FirewallSettings;
    /** How the read-write server's participation in the query pool is controlled.<br/>It can have the following values: <ul><li>readOnly - indicates that the read-write server is intended not to participate in query operations</li><li>all - indicates that the read-write server can participate in query operations</li></ul>Specifying readOnly when capacity is 1 results in error. */
    querypoolConnectionMode?: ConnectionMode;
    /** The managed mode of the server (0 = not managed, 1 = managed). */
    managedMode?: ManagedMode;
    /** The server monitor mode for AS server */
    serverMonitorMode?: ServerMonitorMode;
}

/** Properties of Analysis Services resource. */
export declare interface AnalysisServicesServerProperties extends AnalysisServicesServerMutableProperties {
    /**
     * The current state of Analysis Services resource. The state is to indicate more states outside of resource provisioning.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly state?: State;
    /**
     * The current deployment state of Analysis Services resource. The provisioningState is to indicate states for resource provisioning.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /**
     * The full name of the Analysis Services resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly serverFullName?: string;
    /** The SKU of the Analysis Services resource. */
    sku?: ResourceSku;
}

/** An array of Analysis Services resources. */
export declare interface AnalysisServicesServers {
    /** An array of Analysis Services resources. */
    value: AnalysisServicesServer[];
}

/** Provision request specification */
export declare interface AnalysisServicesServerUpdateParameters {
    /** The SKU of the Analysis Services resource. */
    sku?: ResourceSku;
    /** Key-value pairs of additional provisioning properties. */
    tags?: {
        [propertyName: string]: string;
    };
    /** A collection of AS server administrators */
    asAdministrators?: ServerAdministrators;
    /** The SAS container URI to the backup container. */
    backupBlobContainerUri?: string;
    /** The gateway details configured for the AS server. */
    gatewayDetails?: GatewayDetails;
    /** The firewall settings for the AS server. */
    ipV4FirewallSettings?: IPv4FirewallSettings;
    /** How the read-write server's participation in the query pool is controlled.<br/>It can have the following values: <ul><li>readOnly - indicates that the read-write server is intended not to participate in query operations</li><li>all - indicates that the read-write server can participate in query operations</li></ul>Specifying readOnly when capacity is 1 results in error. */
    querypoolConnectionMode?: ConnectionMode;
    /** The managed mode of the server (0 = not managed, 1 = managed). */
    managedMode?: ManagedMode;
    /** The server monitor mode for AS server */
    serverMonitorMode?: ServerMonitorMode;
}

export declare class AzureAnalysisServices extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the AzureAnalysisServices class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID
     *                       forms part of the URI for every service call.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: AzureAnalysisServicesOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    servers: Servers;
    operations: Operations;
}

/** Optional parameters. */
export declare interface AzureAnalysisServicesOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** Details of server name request body. */
export declare interface CheckServerNameAvailabilityParameters {
    /** Name for checking availability. */
    name?: string;
    /** The resource type of azure analysis services. */
    type?: string;
}

/** The checking result of server name availability. */
export declare interface CheckServerNameAvailabilityResult {
    /** Indicator of available of the server name. */
    nameAvailable?: boolean;
    /** The reason of unavailability. */
    reason?: string;
    /** The detailed message of the request unavailability. */
    message?: string;
}

/** Defines values for ConnectionMode. */
export declare type ConnectionMode = "All" | "ReadOnly";

/** The resource management error additional info. */
export declare interface ErrorAdditionalInfo {
    /**
     * The additional info type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The additional info.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly info?: Record<string, unknown>;
}

/** The error detail. */
export declare interface ErrorDetail {
    /**
     * The error code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * The error message.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
    /**
     * The error target.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly target?: string;
    /**
     * The error sub code
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly subCode?: number;
    /**
     * The http status code
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly httpStatusCode?: number;
    /**
     * the timestamp for the error.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly timeStamp?: string;
    /**
     * The error details.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly details?: ErrorDetail[];
    /**
     * The error additional info.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** Describes the format of Error response. */
export declare interface ErrorResponse {
    /** The error object */
    error?: ErrorDetail;
}

/** The gateway details. */
export declare interface GatewayDetails {
    /** Gateway resource to be associated with the server. */
    gatewayResourceId?: string;
    /**
     * Gateway object id from in the DMTS cluster for the gateway resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly gatewayObjectId?: string;
    /**
     * Uri of the DMTS cluster.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dmtsClusterUri?: string;
}

/** Status of gateway is error. */
export declare interface GatewayListStatusError {
    /** Error of the list gateway status. */
    error?: ErrorDetail;
}

/** Status of gateway is live. */
export declare interface GatewayListStatusLive {
    /** Live message of list gateway. Status: 0 - Live */
    status?: 0;
}

/**
 * Given a result page from a pageable operation, returns a
 * continuation token that can be used to begin paging from
 * that point later.
 * @param page A result object from calling .byPage() on a paged operation.
 * @returns The continuation token that can be passed into byPage().
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/** The detail of firewall rule. */
export declare interface IPv4FirewallRule {
    /** The rule name. */
    firewallRuleName?: string;
    /** The start range of IPv4. */
    rangeStart?: string;
    /** The end range of IPv4. */
    rangeEnd?: string;
}

/** An array of firewall rules. */
export declare interface IPv4FirewallSettings {
    /** An array of firewall rules. */
    firewallRules?: IPv4FirewallRule[];
    /** The indicator of enabling PBI service. */
    enablePowerBIService?: boolean;
}

/** Known values of {@link ProvisioningState} that the service accepts. */
export declare enum KnownProvisioningState {
    /** Deleting */
    Deleting = "Deleting",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Paused */
    Paused = "Paused",
    /** Suspended */
    Suspended = "Suspended",
    /** Provisioning */
    Provisioning = "Provisioning",
    /** Updating */
    Updating = "Updating",
    /** Suspending */
    Suspending = "Suspending",
    /** Pausing */
    Pausing = "Pausing",
    /** Resuming */
    Resuming = "Resuming",
    /** Preparing */
    Preparing = "Preparing",
    /** Scaling */
    Scaling = "Scaling"
}

/** Known values of {@link SkuTier} that the service accepts. */
export declare enum KnownSkuTier {
    /** Development */
    Development = "Development",
    /** Basic */
    Basic = "Basic",
    /** Standard */
    Standard = "Standard"
}

/** Known values of {@link State} that the service accepts. */
export declare enum KnownState {
    /** Deleting */
    Deleting = "Deleting",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Paused */
    Paused = "Paused",
    /** Suspended */
    Suspended = "Suspended",
    /** Provisioning */
    Provisioning = "Provisioning",
    /** Updating */
    Updating = "Updating",
    /** Suspending */
    Suspending = "Suspending",
    /** Pausing */
    Pausing = "Pausing",
    /** Resuming */
    Resuming = "Resuming",
    /** Preparing */
    Preparing = "Preparing",
    /** Scaling */
    Scaling = "Scaling"
}

/** The log metric specification for exposing performance metrics to shoebox. */
export declare interface LogSpecifications {
    /**
     * The name of metric.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The displayed name of log.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly displayName?: string;
    /**
     * The blob duration for the log.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly blobDuration?: string;
}

/** Defines values for ManagedMode. */
export declare type ManagedMode = 0 | 1;

/** Metric dimension. */
export declare interface MetricDimensions {
    /**
     * Dimension name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Dimension display name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly displayName?: string;
}

/** Available operation metric specification for exposing performance metrics to shoebox. */
export declare interface MetricSpecifications {
    /**
     * The name of metric.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The displayed name of metric.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly displayName?: string;
    /**
     * The displayed description of metric.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly displayDescription?: string;
    /**
     * The unit of the metric.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly unit?: string;
    /**
     * The aggregation type of metric.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly aggregationType?: string;
    /**
     * The dimensions of metric.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dimensions?: MetricDimensions[];
}

/** A Consumption REST API operation. */
export declare interface Operation {
    /**
     * Operation name: {provider}/{resource}/{operation}.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /** The object that represents the operation. */
    display?: OperationDisplay;
    /**
     * The origin
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly origin?: string;
    /** Additional properties to expose performance metrics to shoebox. */
    properties?: OperationProperties;
}

/** The object that represents the operation. */
export declare interface OperationDisplay {
    /**
     * Service provider: Microsoft.Consumption.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provider?: string;
    /**
     * Resource on which the operation is performed: UsageDetail, etc.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resource?: string;
    /**
     * Operation type: Read, write, delete, etc.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly operation?: string;
    /**
     * Description of the operation object.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly description?: string;
}

/** Result of listing consumption operations. It contains a list of operations and a URL link to get the next set of results. */
export declare interface OperationListResult {
    /**
     * List of analysis services operations supported by the Microsoft.AnalysisServices resource provider.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: Operation[];
    /**
     * URL to get the next set of operation list results if there are any.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Additional properties to expose performance metrics to shoebox. */
export declare interface OperationProperties {
    /** Performance metrics to shoebox. */
    serviceSpecification?: OperationPropertiesServiceSpecification;
}

/** Performance metrics to shoebox. */
export declare interface OperationPropertiesServiceSpecification {
    /**
     * The metric specifications.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly metricSpecifications?: MetricSpecifications[];
    /**
     * The log specifications.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly logSpecifications?: LogSpecifications[];
}

/** Interface representing a Operations. */
export declare interface Operations {
    /**
     * Lists all of the available consumption REST API operations.
     * @param options The options parameters.
     */
    list(options?: OperationsListOptionalParams): PagedAsyncIterableIterator<Operation>;
}

/** Optional parameters. */
export declare interface OperationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export declare interface OperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OperationsListResponse = OperationListResult;

/** The status of operation. */
export declare interface OperationStatus {
    /** The operation Id. */
    id?: string;
    /** The operation name. */
    name?: string;
    /** The start time of the operation. */
    startTime?: string;
    /** The end time of the operation. */
    endTime?: string;
    /** The status of the operation. */
    status?: string;
    /** The error detail of the operation if any. */
    error?: ErrorDetail;
}

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Deleting** \
 * **Succeeded** \
 * **Failed** \
 * **Paused** \
 * **Suspended** \
 * **Provisioning** \
 * **Updating** \
 * **Suspending** \
 * **Pausing** \
 * **Resuming** \
 * **Preparing** \
 * **Scaling**
 */
export declare type ProvisioningState = string;

/** Represents an instance of an Analysis Services resource. */
export declare interface Resource {
    /**
     * An identifier that represents the Analysis Services resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the Analysis Services resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of the Analysis Services resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** Location of the Analysis Services resource. */
    location: string;
    /** The SKU of the Analysis Services resource. */
    sku: ResourceSku;
    /** Key-value pairs of additional resource provisioning properties. */
    tags?: {
        [propertyName: string]: string;
    };
}

/** Represents the SKU name and Azure pricing tier for Analysis Services resource. */
export declare interface ResourceSku {
    /** Name of the SKU level. */
    name: string;
    /** The name of the Azure pricing tier to which the SKU applies. */
    tier?: SkuTier;
    /** The number of instances in the read only query pool. */
    capacity?: number;
}

/** An array of administrator user identities. */
export declare interface ServerAdministrators {
    /** An array of administrator user identities. */
    members?: string[];
}

/** Defines values for ServerMonitorMode. */
export declare type ServerMonitorMode = 0 | 1;

/** Interface representing a Servers. */
export declare interface Servers {
    /**
     * Gets all the Analysis Services servers for the given resource group.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
     *                          server is part. This name must be at least 1 character in length, and no more than 90.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: ServersListByResourceGroupOptionalParams): PagedAsyncIterableIterator<AnalysisServicesServer>;
    /**
     * Lists all the Analysis Services servers for the given subscription.
     * @param options The options parameters.
     */
    list(options?: ServersListOptionalParams): PagedAsyncIterableIterator<AnalysisServicesServer>;
    /**
     * Gets details about the specified Analysis Services server.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
     *                          server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be a minimum of 3 characters,
     *                   and a maximum of 63.
     * @param options The options parameters.
     */
    getDetails(resourceGroupName: string, serverName: string, options?: ServersGetDetailsOptionalParams): Promise<ServersGetDetailsResponse>;
    /**
     * Provisions the specified Analysis Services server based on the configuration specified in the
     * request.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
     *                          server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be a minimum of 3 characters,
     *                   and a maximum of 63.
     * @param serverParameters Contains the information used to provision the Analysis Services server.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName: string, serverName: string, serverParameters: AnalysisServicesServer, options?: ServersCreateOptionalParams): Promise<PollerLike<PollOperationState<ServersCreateResponse>, ServersCreateResponse>>;
    /**
     * Provisions the specified Analysis Services server based on the configuration specified in the
     * request.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
     *                          server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be a minimum of 3 characters,
     *                   and a maximum of 63.
     * @param serverParameters Contains the information used to provision the Analysis Services server.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName: string, serverName: string, serverParameters: AnalysisServicesServer, options?: ServersCreateOptionalParams): Promise<ServersCreateResponse>;
    /**
     * Deletes the specified Analysis Services server.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
     *                          server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in
     *                   length, and no more than 63.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, serverName: string, options?: ServersDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes the specified Analysis Services server.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
     *                          server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in
     *                   length, and no more than 63.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, serverName: string, options?: ServersDeleteOptionalParams): Promise<void>;
    /**
     * Updates the current state of the specified Analysis Services server.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
     *                          server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in
     *                   length, and no more than 63.
     * @param serverUpdateParameters Request object that contains the updated information for the server.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, serverName: string, serverUpdateParameters: AnalysisServicesServerUpdateParameters, options?: ServersUpdateOptionalParams): Promise<PollerLike<PollOperationState<ServersUpdateResponse>, ServersUpdateResponse>>;
    /**
     * Updates the current state of the specified Analysis Services server.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
     *                          server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in
     *                   length, and no more than 63.
     * @param serverUpdateParameters Request object that contains the updated information for the server.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, serverName: string, serverUpdateParameters: AnalysisServicesServerUpdateParameters, options?: ServersUpdateOptionalParams): Promise<ServersUpdateResponse>;
    /**
     * Suspends operation of the specified Analysis Services server instance.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
     *                          server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in
     *                   length, and no more than 63.
     * @param options The options parameters.
     */
    beginSuspend(resourceGroupName: string, serverName: string, options?: ServersSuspendOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Suspends operation of the specified Analysis Services server instance.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
     *                          server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in
     *                   length, and no more than 63.
     * @param options The options parameters.
     */
    beginSuspendAndWait(resourceGroupName: string, serverName: string, options?: ServersSuspendOptionalParams): Promise<void>;
    /**
     * Resumes operation of the specified Analysis Services server instance.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
     *                          server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in
     *                   length, and no more than 63.
     * @param options The options parameters.
     */
    beginResume(resourceGroupName: string, serverName: string, options?: ServersResumeOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Resumes operation of the specified Analysis Services server instance.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
     *                          server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in
     *                   length, and no more than 63.
     * @param options The options parameters.
     */
    beginResumeAndWait(resourceGroupName: string, serverName: string, options?: ServersResumeOptionalParams): Promise<void>;
    /**
     * Lists eligible SKUs for Analysis Services resource provider.
     * @param options The options parameters.
     */
    listSkusForNew(options?: ServersListSkusForNewOptionalParams): Promise<ServersListSkusForNewResponse>;
    /**
     * Lists eligible SKUs for an Analysis Services resource.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
     *                          server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in
     *                   length, and no more than 63.
     * @param options The options parameters.
     */
    listSkusForExisting(resourceGroupName: string, serverName: string, options?: ServersListSkusForExistingOptionalParams): Promise<ServersListSkusForExistingResponse>;
    /**
     * Return the gateway status of the specified Analysis Services server instance.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
     *                          server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server.
     * @param options The options parameters.
     */
    listGatewayStatus(resourceGroupName: string, serverName: string, options?: ServersListGatewayStatusOptionalParams): Promise<ServersListGatewayStatusResponse>;
    /**
     * Dissociates a Unified Gateway associated with the server.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
     *                          server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in
     *                   length, and no more than 63.
     * @param options The options parameters.
     */
    dissociateGateway(resourceGroupName: string, serverName: string, options?: ServersDissociateGatewayOptionalParams): Promise<void>;
    /**
     * Check the name availability in the target location.
     * @param location The region name which the operation will lookup into.
     * @param serverParameters Contains the information used to provision the Analysis Services server.
     * @param options The options parameters.
     */
    checkNameAvailability(location: string, serverParameters: CheckServerNameAvailabilityParameters, options?: ServersCheckNameAvailabilityOptionalParams): Promise<ServersCheckNameAvailabilityResponse>;
    /**
     * List the result of the specified operation.
     * @param location The region name which the operation will lookup into.
     * @param operationId The target operation Id.
     * @param options The options parameters.
     */
    listOperationResults(location: string, operationId: string, options?: ServersListOperationResultsOptionalParams): Promise<void>;
    /**
     * List the status of operation.
     * @param location The region name which the operation will lookup into.
     * @param operationId The target operation Id.
     * @param options The options parameters.
     */
    listOperationStatuses(location: string, operationId: string, options?: ServersListOperationStatusesOptionalParams): Promise<ServersListOperationStatusesResponse>;
}

/** Optional parameters. */
export declare interface ServersCheckNameAvailabilityOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the checkNameAvailability operation. */
export declare type ServersCheckNameAvailabilityResponse = CheckServerNameAvailabilityResult;

/** Optional parameters. */
export declare interface ServersCreateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the create operation. */
export declare type ServersCreateResponse = AnalysisServicesServer;

/** Optional parameters. */
export declare interface ServersDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface ServersDissociateGatewayOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface ServersGetDetailsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getDetails operation. */
export declare type ServersGetDetailsResponse = AnalysisServicesServer;

/** Optional parameters. */
export declare interface ServersListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type ServersListByResourceGroupResponse = AnalysisServicesServers;

/** Optional parameters. */
export declare interface ServersListGatewayStatusOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listGatewayStatus operation. */
export declare type ServersListGatewayStatusResponse = GatewayListStatusLive;

/** Optional parameters. */
export declare interface ServersListOperationResultsOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface ServersListOperationStatusesOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listOperationStatuses operation. */
export declare type ServersListOperationStatusesResponse = OperationStatus;

/** Optional parameters. */
export declare interface ServersListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type ServersListResponse = AnalysisServicesServers;

/** Optional parameters. */
export declare interface ServersListSkusForExistingOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listSkusForExisting operation. */
export declare type ServersListSkusForExistingResponse = SkuEnumerationForExistingResourceResult;

/** Optional parameters. */
export declare interface ServersListSkusForNewOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listSkusForNew operation. */
export declare type ServersListSkusForNewResponse = SkuEnumerationForNewResourceResult;

/** Optional parameters. */
export declare interface ServersResumeOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface ServersSuspendOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface ServersUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type ServersUpdateResponse = AnalysisServicesServer;

/** An object that represents SKU details for existing resources. */
export declare interface SkuDetailsForExistingResource {
    /** The SKU in SKU details for existing resources. */
    sku?: ResourceSku;
    /** The resource type. */
    resourceType?: string;
}

/** An object that represents enumerating SKUs for existing resources. */
export declare interface SkuEnumerationForExistingResourceResult {
    /** The collection of available SKUs for existing resources. */
    value?: SkuDetailsForExistingResource[];
}

/** An object that represents enumerating SKUs for new resources. */
export declare interface SkuEnumerationForNewResourceResult {
    /** The collection of available SKUs for new resources. */
    value?: ResourceSku[];
}

/**
 * Defines values for SkuTier. \
 * {@link KnownSkuTier} can be used interchangeably with SkuTier,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Development** \
 * **Basic** \
 * **Standard**
 */
export declare type SkuTier = string;

/**
 * Defines values for State. \
 * {@link KnownState} can be used interchangeably with State,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Deleting** \
 * **Succeeded** \
 * **Failed** \
 * **Paused** \
 * **Suspended** \
 * **Provisioning** \
 * **Updating** \
 * **Suspending** \
 * **Pausing** \
 * **Resuming** \
 * **Preparing** \
 * **Scaling**
 */
export declare type State = string;

export { }
