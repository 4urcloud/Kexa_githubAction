'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var coreClient = require('@azure/core-client');
var coreRestPipeline = require('@azure/core-rest-pipeline');
var coreLro = require('@azure/core-lro');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var coreClient__namespace = /*#__PURE__*/_interopNamespace(coreClient);
var coreRestPipeline__namespace = /*#__PURE__*/_interopNamespace(coreRestPipeline);

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const pageMap = new WeakMap();
/**
 * Given a result page from a pageable operation, returns a
 * continuation token that can be used to begin paging from
 * that point later.
 * @param page A result object from calling .byPage() on a paged operation.
 * @returns The continuation token that can be passed into byPage().
 */
function getContinuationToken(page) {
    var _a;
    if (typeof page !== "object" || page === null) {
        return undefined;
    }
    return (_a = pageMap.get(page)) === null || _a === void 0 ? void 0 : _a.continuationToken;
}
function setContinuationToken(page, continuationToken) {
    var _a;
    if (typeof page !== "object" || page === null || !continuationToken) {
        return;
    }
    const pageInfo = (_a = pageMap.get(page)) !== null && _a !== void 0 ? _a : {};
    pageInfo.continuationToken = continuationToken;
    pageMap.set(page, pageInfo);
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link State} that the service accepts. */
exports.KnownState = void 0;
(function (KnownState) {
    /** Deleting */
    KnownState["Deleting"] = "Deleting";
    /** Succeeded */
    KnownState["Succeeded"] = "Succeeded";
    /** Failed */
    KnownState["Failed"] = "Failed";
    /** Paused */
    KnownState["Paused"] = "Paused";
    /** Suspended */
    KnownState["Suspended"] = "Suspended";
    /** Provisioning */
    KnownState["Provisioning"] = "Provisioning";
    /** Updating */
    KnownState["Updating"] = "Updating";
    /** Suspending */
    KnownState["Suspending"] = "Suspending";
    /** Pausing */
    KnownState["Pausing"] = "Pausing";
    /** Resuming */
    KnownState["Resuming"] = "Resuming";
    /** Preparing */
    KnownState["Preparing"] = "Preparing";
    /** Scaling */
    KnownState["Scaling"] = "Scaling";
})(exports.KnownState || (exports.KnownState = {}));
/** Known values of {@link ProvisioningState} that the service accepts. */
exports.KnownProvisioningState = void 0;
(function (KnownProvisioningState) {
    /** Deleting */
    KnownProvisioningState["Deleting"] = "Deleting";
    /** Succeeded */
    KnownProvisioningState["Succeeded"] = "Succeeded";
    /** Failed */
    KnownProvisioningState["Failed"] = "Failed";
    /** Paused */
    KnownProvisioningState["Paused"] = "Paused";
    /** Suspended */
    KnownProvisioningState["Suspended"] = "Suspended";
    /** Provisioning */
    KnownProvisioningState["Provisioning"] = "Provisioning";
    /** Updating */
    KnownProvisioningState["Updating"] = "Updating";
    /** Suspending */
    KnownProvisioningState["Suspending"] = "Suspending";
    /** Pausing */
    KnownProvisioningState["Pausing"] = "Pausing";
    /** Resuming */
    KnownProvisioningState["Resuming"] = "Resuming";
    /** Preparing */
    KnownProvisioningState["Preparing"] = "Preparing";
    /** Scaling */
    KnownProvisioningState["Scaling"] = "Scaling";
})(exports.KnownProvisioningState || (exports.KnownProvisioningState = {}));
/** Known values of {@link SkuTier} that the service accepts. */
exports.KnownSkuTier = void 0;
(function (KnownSkuTier) {
    /** Development */
    KnownSkuTier["Development"] = "Development";
    /** Basic */
    KnownSkuTier["Basic"] = "Basic";
    /** Standard */
    KnownSkuTier["Standard"] = "Standard";
})(exports.KnownSkuTier || (exports.KnownSkuTier = {}));

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const ResourceSku = {
    type: {
        name: "Composite",
        className: "ResourceSku",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            tier: {
                serializedName: "tier",
                type: {
                    name: "String"
                }
            },
            capacity: {
                defaultValue: 1,
                constraints: {
                    InclusiveMaximum: 8,
                    InclusiveMinimum: 1
                },
                serializedName: "capacity",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const AnalysisServicesServerMutableProperties = {
    type: {
        name: "Composite",
        className: "AnalysisServicesServerMutableProperties",
        modelProperties: {
            asAdministrators: {
                serializedName: "asAdministrators",
                type: {
                    name: "Composite",
                    className: "ServerAdministrators"
                }
            },
            backupBlobContainerUri: {
                serializedName: "backupBlobContainerUri",
                type: {
                    name: "String"
                }
            },
            gatewayDetails: {
                serializedName: "gatewayDetails",
                type: {
                    name: "Composite",
                    className: "GatewayDetails"
                }
            },
            ipV4FirewallSettings: {
                serializedName: "ipV4FirewallSettings",
                type: {
                    name: "Composite",
                    className: "IPv4FirewallSettings"
                }
            },
            querypoolConnectionMode: {
                defaultValue: "All",
                serializedName: "querypoolConnectionMode",
                type: {
                    name: "Enum",
                    allowedValues: ["All", "ReadOnly"]
                }
            },
            managedMode: {
                defaultValue: "1",
                serializedName: "managedMode",
                type: {
                    name: "Enum",
                    allowedValues: [0, 1]
                }
            },
            serverMonitorMode: {
                defaultValue: "1",
                serializedName: "serverMonitorMode",
                type: {
                    name: "Enum",
                    allowedValues: [0, 1]
                }
            }
        }
    }
};
const ServerAdministrators = {
    type: {
        name: "Composite",
        className: "ServerAdministrators",
        modelProperties: {
            members: {
                serializedName: "members",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const GatewayDetails = {
    type: {
        name: "Composite",
        className: "GatewayDetails",
        modelProperties: {
            gatewayResourceId: {
                serializedName: "gatewayResourceId",
                type: {
                    name: "String"
                }
            },
            gatewayObjectId: {
                serializedName: "gatewayObjectId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            dmtsClusterUri: {
                serializedName: "dmtsClusterUri",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const IPv4FirewallSettings = {
    type: {
        name: "Composite",
        className: "IPv4FirewallSettings",
        modelProperties: {
            firewallRules: {
                serializedName: "firewallRules",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "IPv4FirewallRule"
                        }
                    }
                }
            },
            enablePowerBIService: {
                serializedName: "enablePowerBIService",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const IPv4FirewallRule = {
    type: {
        name: "Composite",
        className: "IPv4FirewallRule",
        modelProperties: {
            firewallRuleName: {
                serializedName: "firewallRuleName",
                type: {
                    name: "String"
                }
            },
            rangeStart: {
                serializedName: "rangeStart",
                type: {
                    name: "String"
                }
            },
            rangeEnd: {
                serializedName: "rangeEnd",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Resource = {
    type: {
        name: "Composite",
        className: "Resource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            location: {
                serializedName: "location",
                required: true,
                type: {
                    name: "String"
                }
            },
            sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "ResourceSku"
                }
            },
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }
        }
    }
};
const ErrorResponse = {
    type: {
        name: "Composite",
        className: "ErrorResponse",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorDetail"
                }
            }
        }
    }
};
const ErrorDetail = {
    type: {
        name: "Composite",
        className: "ErrorDetail",
        modelProperties: {
            code: {
                serializedName: "code",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            subCode: {
                serializedName: "subCode",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            httpStatusCode: {
                serializedName: "httpStatusCode",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            timeStamp: {
                serializedName: "timeStamp",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorDetail"
                        }
                    }
                }
            },
            additionalInfo: {
                serializedName: "additionalInfo",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorAdditionalInfo"
                        }
                    }
                }
            }
        }
    }
};
const ErrorAdditionalInfo = {
    type: {
        name: "Composite",
        className: "ErrorAdditionalInfo",
        modelProperties: {
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            info: {
                serializedName: "info",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
const AnalysisServicesServerUpdateParameters = {
    type: {
        name: "Composite",
        className: "AnalysisServicesServerUpdateParameters",
        modelProperties: {
            sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "ResourceSku"
                }
            },
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            asAdministrators: {
                serializedName: "properties.asAdministrators",
                type: {
                    name: "Composite",
                    className: "ServerAdministrators"
                }
            },
            backupBlobContainerUri: {
                serializedName: "properties.backupBlobContainerUri",
                type: {
                    name: "String"
                }
            },
            gatewayDetails: {
                serializedName: "properties.gatewayDetails",
                type: {
                    name: "Composite",
                    className: "GatewayDetails"
                }
            },
            ipV4FirewallSettings: {
                serializedName: "properties.ipV4FirewallSettings",
                type: {
                    name: "Composite",
                    className: "IPv4FirewallSettings"
                }
            },
            querypoolConnectionMode: {
                defaultValue: "All",
                serializedName: "properties.querypoolConnectionMode",
                type: {
                    name: "Enum",
                    allowedValues: ["All", "ReadOnly"]
                }
            },
            managedMode: {
                defaultValue: "1",
                serializedName: "properties.managedMode",
                type: {
                    name: "Enum",
                    allowedValues: [0, 1]
                }
            },
            serverMonitorMode: {
                defaultValue: "1",
                serializedName: "properties.serverMonitorMode",
                type: {
                    name: "Enum",
                    allowedValues: [0, 1]
                }
            }
        }
    }
};
const AnalysisServicesServers = {
    type: {
        name: "Composite",
        className: "AnalysisServicesServers",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AnalysisServicesServer"
                        }
                    }
                }
            }
        }
    }
};
const SkuEnumerationForNewResourceResult = {
    type: {
        name: "Composite",
        className: "SkuEnumerationForNewResourceResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResourceSku"
                        }
                    }
                }
            }
        }
    }
};
const SkuEnumerationForExistingResourceResult = {
    type: {
        name: "Composite",
        className: "SkuEnumerationForExistingResourceResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SkuDetailsForExistingResource"
                        }
                    }
                }
            }
        }
    }
};
const SkuDetailsForExistingResource = {
    type: {
        name: "Composite",
        className: "SkuDetailsForExistingResource",
        modelProperties: {
            sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "ResourceSku"
                }
            },
            resourceType: {
                serializedName: "resourceType",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const GatewayListStatusLive = {
    type: {
        name: "Composite",
        className: "GatewayListStatusLive",
        modelProperties: {
            status: {
                defaultValue: 0,
                isConstant: true,
                serializedName: "status",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const GatewayListStatusError = {
    type: {
        name: "Composite",
        className: "GatewayListStatusError",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorDetail"
                }
            }
        }
    }
};
const CheckServerNameAvailabilityParameters = {
    type: {
        name: "Composite",
        className: "CheckServerNameAvailabilityParameters",
        modelProperties: {
            name: {
                constraints: {
                    Pattern: new RegExp("^[a-z][a-z0-9]*$"),
                    MaxLength: 63,
                    MinLength: 3
                },
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            type: {
                defaultValue: "Microsoft.AnalysisServices/servers",
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CheckServerNameAvailabilityResult = {
    type: {
        name: "Composite",
        className: "CheckServerNameAvailabilityResult",
        modelProperties: {
            nameAvailable: {
                serializedName: "nameAvailable",
                type: {
                    name: "Boolean"
                }
            },
            reason: {
                serializedName: "reason",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationStatus = {
    type: {
        name: "Composite",
        className: "OperationStatus",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            startTime: {
                serializedName: "startTime",
                type: {
                    name: "String"
                }
            },
            endTime: {
                serializedName: "endTime",
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorDetail"
                }
            }
        }
    }
};
const OperationListResult = {
    type: {
        name: "Composite",
        className: "OperationListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Operation"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Operation = {
    type: {
        name: "Composite",
        className: "Operation",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            display: {
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "OperationDisplay"
                }
            },
            origin: {
                serializedName: "origin",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "OperationProperties"
                }
            }
        }
    }
};
const OperationDisplay = {
    type: {
        name: "Composite",
        className: "OperationDisplay",
        modelProperties: {
            provider: {
                serializedName: "provider",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "resource",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationProperties = {
    type: {
        name: "Composite",
        className: "OperationProperties",
        modelProperties: {
            serviceSpecification: {
                serializedName: "serviceSpecification",
                type: {
                    name: "Composite",
                    className: "OperationPropertiesServiceSpecification"
                }
            }
        }
    }
};
const OperationPropertiesServiceSpecification = {
    type: {
        name: "Composite",
        className: "OperationPropertiesServiceSpecification",
        modelProperties: {
            metricSpecifications: {
                serializedName: "metricSpecifications",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MetricSpecifications"
                        }
                    }
                }
            },
            logSpecifications: {
                serializedName: "logSpecifications",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LogSpecifications"
                        }
                    }
                }
            }
        }
    }
};
const MetricSpecifications = {
    type: {
        name: "Composite",
        className: "MetricSpecifications",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            displayDescription: {
                serializedName: "displayDescription",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            unit: {
                serializedName: "unit",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            aggregationType: {
                serializedName: "aggregationType",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            dimensions: {
                serializedName: "dimensions",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MetricDimensions"
                        }
                    }
                }
            }
        }
    }
};
const MetricDimensions = {
    type: {
        name: "Composite",
        className: "MetricDimensions",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const LogSpecifications = {
    type: {
        name: "Composite",
        className: "LogSpecifications",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            blobDuration: {
                serializedName: "blobDuration",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AnalysisServicesServerProperties = {
    type: {
        name: "Composite",
        className: "AnalysisServicesServerProperties",
        modelProperties: Object.assign(Object.assign({}, AnalysisServicesServerMutableProperties.type.modelProperties), { state: {
                serializedName: "state",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, serverFullName: {
                serializedName: "serverFullName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "ResourceSku"
                }
            } })
    }
};
const AnalysisServicesServer = {
    type: {
        name: "Composite",
        className: "AnalysisServicesServer",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { asAdministrators: {
                serializedName: "properties.asAdministrators",
                type: {
                    name: "Composite",
                    className: "ServerAdministrators"
                }
            }, backupBlobContainerUri: {
                serializedName: "properties.backupBlobContainerUri",
                type: {
                    name: "String"
                }
            }, gatewayDetails: {
                serializedName: "properties.gatewayDetails",
                type: {
                    name: "Composite",
                    className: "GatewayDetails"
                }
            }, ipV4FirewallSettings: {
                serializedName: "properties.ipV4FirewallSettings",
                type: {
                    name: "Composite",
                    className: "IPv4FirewallSettings"
                }
            }, querypoolConnectionMode: {
                defaultValue: "All",
                serializedName: "properties.querypoolConnectionMode",
                type: {
                    name: "Enum",
                    allowedValues: ["All", "ReadOnly"]
                }
            }, managedMode: {
                defaultValue: "1",
                serializedName: "properties.managedMode",
                type: {
                    name: "Enum",
                    allowedValues: [0, 1]
                }
            }, serverMonitorMode: {
                defaultValue: "1",
                serializedName: "properties.serverMonitorMode",
                type: {
                    name: "Enum",
                    allowedValues: [0, 1]
                }
            }, state: {
                serializedName: "properties.state",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, serverFullName: {
                serializedName: "properties.serverFullName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, skuPropertiesSku: {
                serializedName: "properties.sku",
                type: {
                    name: "Composite",
                    className: "ResourceSku"
                }
            } })
    }
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ResourceSku: ResourceSku,
    AnalysisServicesServerMutableProperties: AnalysisServicesServerMutableProperties,
    ServerAdministrators: ServerAdministrators,
    GatewayDetails: GatewayDetails,
    IPv4FirewallSettings: IPv4FirewallSettings,
    IPv4FirewallRule: IPv4FirewallRule,
    Resource: Resource,
    ErrorResponse: ErrorResponse,
    ErrorDetail: ErrorDetail,
    ErrorAdditionalInfo: ErrorAdditionalInfo,
    AnalysisServicesServerUpdateParameters: AnalysisServicesServerUpdateParameters,
    AnalysisServicesServers: AnalysisServicesServers,
    SkuEnumerationForNewResourceResult: SkuEnumerationForNewResourceResult,
    SkuEnumerationForExistingResourceResult: SkuEnumerationForExistingResourceResult,
    SkuDetailsForExistingResource: SkuDetailsForExistingResource,
    GatewayListStatusLive: GatewayListStatusLive,
    GatewayListStatusError: GatewayListStatusError,
    CheckServerNameAvailabilityParameters: CheckServerNameAvailabilityParameters,
    CheckServerNameAvailabilityResult: CheckServerNameAvailabilityResult,
    OperationStatus: OperationStatus,
    OperationListResult: OperationListResult,
    Operation: Operation,
    OperationDisplay: OperationDisplay,
    OperationProperties: OperationProperties,
    OperationPropertiesServiceSpecification: OperationPropertiesServiceSpecification,
    MetricSpecifications: MetricSpecifications,
    MetricDimensions: MetricDimensions,
    LogSpecifications: LogSpecifications,
    AnalysisServicesServerProperties: AnalysisServicesServerProperties,
    AnalysisServicesServer: AnalysisServicesServer
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[-\\w\\._\\(\\)]+$"),
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const serverName = {
    parameterPath: "serverName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-z][a-z0-9]*$"),
            MaxLength: 63,
            MinLength: 3
        },
        serializedName: "serverName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2017-08-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const serverParameters = {
    parameterPath: "serverParameters",
    mapper: AnalysisServicesServer
};
const serverUpdateParameters = {
    parameterPath: "serverUpdateParameters",
    mapper: AnalysisServicesServerUpdateParameters
};
const serverParameters1 = {
    parameterPath: "serverParameters",
    mapper: CheckServerNameAvailabilityParameters
};
const location = {
    parameterPath: "location",
    mapper: {
        serializedName: "location",
        required: true,
        type: {
            name: "String"
        }
    }
};
const operationId = {
    parameterPath: "operationId",
    mapper: {
        serializedName: "operationId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class LroImpl {
    constructor(sendOperationFn, args, spec, requestPath = spec.path, requestMethod = spec.httpMethod) {
        this.sendOperationFn = sendOperationFn;
        this.args = args;
        this.spec = spec;
        this.requestPath = requestPath;
        this.requestMethod = requestMethod;
    }
    sendInitialRequest() {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            return this.sendOperationFn(this.args, this.spec);
        });
    }
    sendPollRequest(path) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const _a = this.spec, restSpec = tslib.__rest(_a, ["requestBody"]);
            return this.sendOperationFn(this.args, Object.assign(Object.assign({}, restSpec), { path, httpMethod: "GET" }));
        });
    }
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Servers operations. */
class ServersImpl {
    /**
     * Initialize a new instance of the class Servers class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets all the Analysis Services servers for the given resource group.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
     *                          server is part. This name must be at least 1 character in length, and no more than 90.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName, options) {
        const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByResourceGroupPagingPage(resourceGroupName, options, settings);
            }
        };
    }
    listByResourceGroupPagingPage(resourceGroupName, options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingPage_1() {
            let result;
            result = yield tslib.__await(this._listByResourceGroup(resourceGroupName, options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listByResourceGroupPagingAll(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByResourceGroupPagingPage(resourceGroupName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists all the Analysis Services servers for the given subscription.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            result = yield tslib.__await(this._list(options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Gets details about the specified Analysis Services server.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
     *                          server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be a minimum of 3 characters,
     *                   and a maximum of 63.
     * @param options The options parameters.
     */
    getDetails(resourceGroupName, serverName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serverName, options }, getDetailsOperationSpec);
    }
    /**
     * Provisions the specified Analysis Services server based on the configuration specified in the
     * request.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
     *                          server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be a minimum of 3 characters,
     *                   and a maximum of 63.
     * @param serverParameters Contains the information used to provision the Analysis Services server.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName, serverName, serverParameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, serverName, serverParameters, options }, createOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Provisions the specified Analysis Services server based on the configuration specified in the
     * request.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
     *                          server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be a minimum of 3 characters,
     *                   and a maximum of 63.
     * @param serverParameters Contains the information used to provision the Analysis Services server.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName, serverName, serverParameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreate(resourceGroupName, serverName, serverParameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Deletes the specified Analysis Services server.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
     *                          server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in
     *                   length, and no more than 63.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, serverName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, serverName, options }, deleteOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes the specified Analysis Services server.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
     *                          server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in
     *                   length, and no more than 63.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, serverName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, serverName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Updates the current state of the specified Analysis Services server.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
     *                          server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in
     *                   length, and no more than 63.
     * @param serverUpdateParameters Request object that contains the updated information for the server.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, serverName, serverUpdateParameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, serverName, serverUpdateParameters, options }, updateOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Updates the current state of the specified Analysis Services server.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
     *                          server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in
     *                   length, and no more than 63.
     * @param serverUpdateParameters Request object that contains the updated information for the server.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, serverName, serverUpdateParameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, serverName, serverUpdateParameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Suspends operation of the specified Analysis Services server instance.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
     *                          server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in
     *                   length, and no more than 63.
     * @param options The options parameters.
     */
    beginSuspend(resourceGroupName, serverName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, serverName, options }, suspendOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Suspends operation of the specified Analysis Services server instance.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
     *                          server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in
     *                   length, and no more than 63.
     * @param options The options parameters.
     */
    beginSuspendAndWait(resourceGroupName, serverName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginSuspend(resourceGroupName, serverName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Resumes operation of the specified Analysis Services server instance.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
     *                          server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in
     *                   length, and no more than 63.
     * @param options The options parameters.
     */
    beginResume(resourceGroupName, serverName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, serverName, options }, resumeOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Resumes operation of the specified Analysis Services server instance.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
     *                          server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in
     *                   length, and no more than 63.
     * @param options The options parameters.
     */
    beginResumeAndWait(resourceGroupName, serverName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginResume(resourceGroupName, serverName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Gets all the Analysis Services servers for the given resource group.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
     *                          server is part. This name must be at least 1 character in length, and no more than 90.
     * @param options The options parameters.
     */
    _listByResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listByResourceGroupOperationSpec);
    }
    /**
     * Lists all the Analysis Services servers for the given subscription.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$1);
    }
    /**
     * Lists eligible SKUs for Analysis Services resource provider.
     * @param options The options parameters.
     */
    listSkusForNew(options) {
        return this.client.sendOperationRequest({ options }, listSkusForNewOperationSpec);
    }
    /**
     * Lists eligible SKUs for an Analysis Services resource.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
     *                          server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in
     *                   length, and no more than 63.
     * @param options The options parameters.
     */
    listSkusForExisting(resourceGroupName, serverName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serverName, options }, listSkusForExistingOperationSpec);
    }
    /**
     * Return the gateway status of the specified Analysis Services server instance.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
     *                          server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server.
     * @param options The options parameters.
     */
    listGatewayStatus(resourceGroupName, serverName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serverName, options }, listGatewayStatusOperationSpec);
    }
    /**
     * Dissociates a Unified Gateway associated with the server.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
     *                          server is part. This name must be at least 1 character in length, and no more than 90.
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in
     *                   length, and no more than 63.
     * @param options The options parameters.
     */
    dissociateGateway(resourceGroupName, serverName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serverName, options }, dissociateGatewayOperationSpec);
    }
    /**
     * Check the name availability in the target location.
     * @param location The region name which the operation will lookup into.
     * @param serverParameters Contains the information used to provision the Analysis Services server.
     * @param options The options parameters.
     */
    checkNameAvailability(location, serverParameters, options) {
        return this.client.sendOperationRequest({ location, serverParameters, options }, checkNameAvailabilityOperationSpec);
    }
    /**
     * List the result of the specified operation.
     * @param location The region name which the operation will lookup into.
     * @param operationId The target operation Id.
     * @param options The options parameters.
     */
    listOperationResults(location, operationId, options) {
        return this.client.sendOperationRequest({ location, operationId, options }, listOperationResultsOperationSpec);
    }
    /**
     * List the status of operation.
     * @param location The region name which the operation will lookup into.
     * @param operationId The target operation Id.
     * @param options The options parameters.
     */
    listOperationStatuses(location, operationId, options) {
        return this.client.sendOperationRequest({ location, operationId, options }, listOperationStatusesOperationSpec);
    }
}
// Operation Specifications
const serializer$1 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getDetailsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AnalysisServicesServer
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        serverName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const createOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: AnalysisServicesServer
        },
        201: {
            bodyMapper: AnalysisServicesServer
        },
        202: {
            bodyMapper: AnalysisServicesServer
        },
        204: {
            bodyMapper: AnalysisServicesServer
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: serverParameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        serverName,
        subscriptionId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$1
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        serverName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: AnalysisServicesServer
        },
        201: {
            bodyMapper: AnalysisServicesServer
        },
        202: {
            bodyMapper: AnalysisServicesServer
        },
        204: {
            bodyMapper: AnalysisServicesServer
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: serverUpdateParameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        serverName,
        subscriptionId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$1
};
const suspendOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}/suspend",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        serverName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const resumeOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}/resume",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        serverName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listByResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AnalysisServicesServers
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.AnalysisServices/servers",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AnalysisServicesServers
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$1
};
const listSkusForNewOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.AnalysisServices/skus",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SkuEnumerationForNewResourceResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$1
};
const listSkusForExistingOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}/skus",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SkuEnumerationForExistingResourceResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        serverName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listGatewayStatusOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}/listGatewayStatus",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: GatewayListStatusLive
        },
        default: {
            bodyMapper: GatewayListStatusError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        serverName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const dissociateGatewayOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}/dissociateGateway",
    httpMethod: "POST",
    responses: {
        200: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        serverName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const checkNameAvailabilityOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.AnalysisServices/locations/{location}/checkNameAvailability",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: CheckServerNameAvailabilityResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: serverParameters1,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        location
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$1
};
const listOperationResultsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.AnalysisServices/locations/{location}/operationresults/{operationId}",
    httpMethod: "GET",
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        location,
        operationId
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listOperationStatusesOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.AnalysisServices/locations/{location}/operationstatuses/{operationId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationStatus
        },
        202: {
            bodyMapper: OperationStatus
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        location,
        operationId
    ],
    headerParameters: [accept],
    serializer: serializer$1
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Operations operations. */
class OperationsImpl {
    /**
     * Initialize a new instance of the class Operations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all of the available consumption REST API operations.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists all of the available consumption REST API operations.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/providers/Microsoft.AnalysisServices/operations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, nextLink],
    headerParameters: [accept],
    serializer
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class AzureAnalysisServices extends coreClient__namespace.ServiceClient {
    /**
     * Initializes a new instance of the AzureAnalysisServices class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID
     *                       forms part of the URI for every service call.
     * @param options The parameter options
     */
    constructor(credentials, subscriptionId, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        if (subscriptionId === undefined) {
            throw new Error("'subscriptionId' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-analysisservices/4.1.3`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName
            });
            this.pipeline.addPolicy(coreRestPipeline__namespace.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient__namespace.authorizeRequestOnClaimChallenge
                }
            }));
        }
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.apiVersion = options.apiVersion || "2017-08-01";
        this.servers = new ServersImpl(this);
        this.operations = new OperationsImpl(this);
        this.addCustomApiVersionPolicy(options.apiVersion);
    }
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    addCustomApiVersionPolicy(apiVersion) {
        if (!apiVersion) {
            return;
        }
        const apiVersionPolicy = {
            name: "CustomApiVersionPolicy",
            sendRequest(request, next) {
                return tslib.__awaiter(this, void 0, void 0, function* () {
                    const param = request.url.split("?");
                    if (param.length > 1) {
                        const newParams = param[1].split("&").map((item) => {
                            if (item.indexOf("api-version") > -1) {
                                return "api-version=" + apiVersion;
                            }
                            else {
                                return item;
                            }
                        });
                        request.url = param[0] + "?" + newParams.join("&");
                    }
                    return next(request);
                });
            }
        };
        this.pipeline.addPolicy(apiVersionPolicy);
    }
}

exports.AzureAnalysisServices = AzureAnalysisServices;
exports.getContinuationToken = getContinuationToken;
//# sourceMappingURL=index.js.map
