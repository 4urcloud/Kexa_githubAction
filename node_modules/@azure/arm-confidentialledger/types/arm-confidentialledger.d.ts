import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { PollerLike } from '@azure/core-lro';
import { PollOperationState } from '@azure/core-lro';

/** AAD based security principal with associated Ledger RoleName */
export declare interface AADBasedSecurityPrincipal {
    /** UUID/GUID based Principal Id of the Security Principal */
    principalId?: string;
    /** UUID/GUID based Tenant Id of the Security Principal */
    tenantId?: string;
    /** LedgerRole associated with the Security Principal of Ledger */
    ledgerRoleName?: LedgerRoleName;
}

/** Cert based security principal with Ledger RoleName */
export declare interface CertBasedSecurityPrincipal {
    /** Public key of the user cert (.pem or .cer) */
    cert?: string;
    /** LedgerRole associated with the Security Principal of Ledger */
    ledgerRoleName?: LedgerRoleName;
}

/** Contains response data for the checkNameAvailability operation. */
export declare type CheckNameAvailabilityOperationResponse = CheckNameAvailabilityResponse;

/** Optional parameters. */
export declare interface CheckNameAvailabilityOptionalParams extends coreClient.OperationOptions {
}

/**
 * Defines values for CheckNameAvailabilityReason. \
 * {@link KnownCheckNameAvailabilityReason} can be used interchangeably with CheckNameAvailabilityReason,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Invalid** \
 * **AlreadyExists**
 */
export declare type CheckNameAvailabilityReason = string;

/** The check availability request body. */
export declare interface CheckNameAvailabilityRequest {
    /** The name of the resource for which availability needs to be checked. */
    name?: string;
    /** The resource type. */
    type?: string;
}

/** The check availability result. */
export declare interface CheckNameAvailabilityResponse {
    /** Indicates if the resource name is available. */
    nameAvailable?: boolean;
    /** The reason why the given name is not available. */
    reason?: CheckNameAvailabilityReason;
    /** Detailed reason why the given name is available. */
    message?: string;
}

/** Confidential Ledger. Contains the properties of Confidential Ledger Resource. */
export declare interface ConfidentialLedger extends Resource, ResourceLocation, Tags {
    /** Properties of Confidential Ledger Resource. */
    properties?: LedgerProperties;
}

export declare class ConfidentialLedgerClient extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the ConfidentialLedgerClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g.
     *                       00000000-0000-0000-0000-000000000000)
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: ConfidentialLedgerClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    /**
     * To check whether a resource name is available.
     * @param nameAvailabilityRequest Name availability request payload.
     * @param options The options parameters.
     */
    checkNameAvailability(nameAvailabilityRequest: CheckNameAvailabilityRequest, options?: CheckNameAvailabilityOptionalParams): Promise<CheckNameAvailabilityOperationResponse>;
    operations: Operations;
    ledger: Ledger;
}

/** Optional parameters. */
export declare interface ConfidentialLedgerClientOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** Object that includes an array of Confidential Ledgers and a possible link for next set. */
export declare interface ConfidentialLedgerList {
    /** List of Confidential Ledgers */
    value?: ConfidentialLedger[];
    /** The URL the client should use to fetch the next page (per server side paging). */
    nextLink?: string;
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export declare type CreatedByType = string;

/** The resource management error additional info. */
export declare interface ErrorAdditionalInfo {
    /**
     * The additional info type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The additional info.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly info?: Record<string, unknown>;
}

/** The error detail. */
export declare interface ErrorDetail {
    /**
     * The error code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * The error message.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
    /**
     * The error target.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly target?: string;
    /**
     * The error details.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly details?: ErrorDetail[];
    /**
     * The error additional info.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export declare interface ErrorResponse {
    /** The error object. */
    error?: ErrorDetail;
}

/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/** Known values of {@link CheckNameAvailabilityReason} that the service accepts. */
export declare enum KnownCheckNameAvailabilityReason {
    /** Invalid */
    Invalid = "Invalid",
    /** AlreadyExists */
    AlreadyExists = "AlreadyExists"
}

/** Known values of {@link CreatedByType} that the service accepts. */
export declare enum KnownCreatedByType {
    /** User */
    User = "User",
    /** Application */
    Application = "Application",
    /** ManagedIdentity */
    ManagedIdentity = "ManagedIdentity",
    /** Key */
    Key = "Key"
}

/** Known values of {@link LedgerRoleName} that the service accepts. */
export declare enum KnownLedgerRoleName {
    /** Reader */
    Reader = "Reader",
    /** Contributor */
    Contributor = "Contributor",
    /** Administrator */
    Administrator = "Administrator"
}

/** Known values of {@link LedgerType} that the service accepts. */
export declare enum KnownLedgerType {
    /** Unknown */
    Unknown = "Unknown",
    /** Public */
    Public = "Public",
    /** Private */
    Private = "Private"
}

/** Known values of {@link ProvisioningState} that the service accepts. */
export declare enum KnownProvisioningState {
    /** Unknown */
    Unknown = "Unknown",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Canceled */
    Canceled = "Canceled",
    /** Creating */
    Creating = "Creating",
    /** Deleting */
    Deleting = "Deleting",
    /** Updating */
    Updating = "Updating"
}

/** Interface representing a Ledger. */
export declare interface Ledger {
    /**
     * Retrieves the properties of all Confidential Ledgers.
     * @param resourceGroupName The name of the resource group.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: LedgerListByResourceGroupOptionalParams): PagedAsyncIterableIterator<ConfidentialLedger>;
    /**
     * Retrieves the properties of all Confidential Ledgers.
     * @param options The options parameters.
     */
    listBySubscription(options?: LedgerListBySubscriptionOptionalParams): PagedAsyncIterableIterator<ConfidentialLedger>;
    /**
     * Retrieves the properties of a Confidential Ledger.
     * @param resourceGroupName The name of the resource group.
     * @param ledgerName Name of the Confidential Ledger
     * @param options The options parameters.
     */
    get(resourceGroupName: string, ledgerName: string, options?: LedgerGetOptionalParams): Promise<LedgerGetResponse>;
    /**
     * Deletes an existing Confidential Ledger.
     * @param resourceGroupName The name of the resource group.
     * @param ledgerName Name of the Confidential Ledger
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, ledgerName: string, options?: LedgerDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes an existing Confidential Ledger.
     * @param resourceGroupName The name of the resource group.
     * @param ledgerName Name of the Confidential Ledger
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, ledgerName: string, options?: LedgerDeleteOptionalParams): Promise<void>;
    /**
     * Creates a  Confidential Ledger with the specified ledger parameters.
     * @param resourceGroupName The name of the resource group.
     * @param ledgerName Name of the Confidential Ledger
     * @param confidentialLedger Confidential Ledger Create Request Body
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName: string, ledgerName: string, confidentialLedger: ConfidentialLedger, options?: LedgerCreateOptionalParams): Promise<PollerLike<PollOperationState<LedgerCreateResponse>, LedgerCreateResponse>>;
    /**
     * Creates a  Confidential Ledger with the specified ledger parameters.
     * @param resourceGroupName The name of the resource group.
     * @param ledgerName Name of the Confidential Ledger
     * @param confidentialLedger Confidential Ledger Create Request Body
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName: string, ledgerName: string, confidentialLedger: ConfidentialLedger, options?: LedgerCreateOptionalParams): Promise<LedgerCreateResponse>;
    /**
     * Updates properties of Confidential Ledger
     * @param resourceGroupName The name of the resource group.
     * @param ledgerName Name of the Confidential Ledger
     * @param confidentialLedger Confidential Ledger request body for Updating Ledger
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, ledgerName: string, confidentialLedger: ConfidentialLedger, options?: LedgerUpdateOptionalParams): Promise<PollerLike<PollOperationState<LedgerUpdateResponse>, LedgerUpdateResponse>>;
    /**
     * Updates properties of Confidential Ledger
     * @param resourceGroupName The name of the resource group.
     * @param ledgerName Name of the Confidential Ledger
     * @param confidentialLedger Confidential Ledger request body for Updating Ledger
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, ledgerName: string, confidentialLedger: ConfidentialLedger, options?: LedgerUpdateOptionalParams): Promise<LedgerUpdateResponse>;
}

/** Optional parameters. */
export declare interface LedgerCreateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the create operation. */
export declare type LedgerCreateResponse = ConfidentialLedger;

/** Optional parameters. */
export declare interface LedgerDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface LedgerGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type LedgerGetResponse = ConfidentialLedger;

/** Optional parameters. */
export declare interface LedgerListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type LedgerListByResourceGroupNextResponse = ConfidentialLedgerList;

/** Optional parameters. */
export declare interface LedgerListByResourceGroupOptionalParams extends coreClient.OperationOptions {
    /** The filter to apply on the list operation. eg. $filter=ledgerType eq 'Public' */
    filter?: string;
}

/** Contains response data for the listByResourceGroup operation. */
export declare type LedgerListByResourceGroupResponse = ConfidentialLedgerList;

/** Optional parameters. */
export declare interface LedgerListBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionNext operation. */
export declare type LedgerListBySubscriptionNextResponse = ConfidentialLedgerList;

/** Optional parameters. */
export declare interface LedgerListBySubscriptionOptionalParams extends coreClient.OperationOptions {
    /** The filter to apply on the list operation. eg. $filter=ledgerType eq 'Public' */
    filter?: string;
}

/** Contains response data for the listBySubscription operation. */
export declare type LedgerListBySubscriptionResponse = ConfidentialLedgerList;

/** Additional Confidential Ledger properties. */
export declare interface LedgerProperties {
    /**
     * Unique name for the Confidential Ledger.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly ledgerName?: string;
    /**
     * Endpoint for calling Ledger Service.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly ledgerUri?: string;
    /**
     * Endpoint for accessing network identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly identityServiceUri?: string;
    /**
     * Internal namespace for the Ledger
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly ledgerInternalNamespace?: string;
    /** Type of Confidential Ledger */
    ledgerType?: LedgerType;
    /**
     * Provisioning state of Ledger Resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /** Array of all AAD based Security Principals. */
    aadBasedSecurityPrincipals?: AADBasedSecurityPrincipal[];
    /** Array of all cert based Security Principals. */
    certBasedSecurityPrincipals?: CertBasedSecurityPrincipal[];
}

/**
 * Defines values for LedgerRoleName. \
 * {@link KnownLedgerRoleName} can be used interchangeably with LedgerRoleName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Reader** \
 * **Contributor** \
 * **Administrator**
 */
export declare type LedgerRoleName = string;

/**
 * Defines values for LedgerType. \
 * {@link KnownLedgerType} can be used interchangeably with LedgerType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **Public** \
 * **Private**
 */
export declare type LedgerType = string;

/** Optional parameters. */
export declare interface LedgerUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type LedgerUpdateResponse = ConfidentialLedger;

/** Interface representing a Operations. */
export declare interface Operations {
    /**
     * Retrieves a list of available API operations
     * @param options The options parameters.
     */
    list(options?: OperationsListOptionalParams): PagedAsyncIterableIterator<ResourceProviderOperationDefinition>;
}

/** Optional parameters. */
export declare interface OperationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type OperationsListNextResponse = ResourceProviderOperationList;

/** Optional parameters. */
export declare interface OperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OperationsListResponse = ResourceProviderOperationList;

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **Creating** \
 * **Deleting** \
 * **Updating**
 */
export declare type ProvisioningState = string;

/** An Azure resource. */
export declare interface Resource {
    /**
     * Name of the Resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Fully qualified resource Id for the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The type of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * Metadata pertaining to creation and last modification of the resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
}

/** Location of the ARM Resource */
export declare interface ResourceLocation {
    /** The Azure location where the Confidential Ledger is running. */
    location?: string;
}

/** Describes the Resource Provider Operation. */
export declare interface ResourceProviderOperationDefinition {
    /** Resource provider operation name. */
    name?: string;
    /** Indicates whether the operation is data action or not. */
    isDataAction?: boolean;
    /** Details about the operations */
    display?: ResourceProviderOperationDisplay;
}

/** Describes the properties of the Operation. */
export declare interface ResourceProviderOperationDisplay {
    /** Name of the resource provider. */
    provider?: string;
    /** Name of the resource type. */
    resource?: string;
    /** Name of the resource provider operation. */
    operation?: string;
    /** Description of the resource provider operation. */
    description?: string;
}

/** List containing this Resource Provider's available operations. */
export declare interface ResourceProviderOperationList {
    /**
     * Resource provider operations list.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: ResourceProviderOperationDefinition[];
    /**
     * The URI that can be used to request the next page for list of Azure operations.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Metadata pertaining to creation and last modification of the resource. */
export declare interface SystemData {
    /** The identity that created the resource. */
    createdBy?: string;
    /** The type of identity that created the resource. */
    createdByType?: CreatedByType;
    /** The timestamp of resource creation (UTC). */
    createdAt?: Date;
    /** The identity that last modified the resource. */
    lastModifiedBy?: string;
    /** The type of identity that last modified the resource. */
    lastModifiedByType?: CreatedByType;
    /** The timestamp of resource last modification (UTC) */
    lastModifiedAt?: Date;
}

/** Tags for Confidential Ledger Resource */
export declare interface Tags {
    /** Additional tags for Confidential Ledger */
    tags?: {
        [propertyName: string]: string;
    };
}

export { }
