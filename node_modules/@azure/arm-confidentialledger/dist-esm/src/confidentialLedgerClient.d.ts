import * as coreClient from "@azure/core-client";
import * as coreAuth from "@azure/core-auth";
import { Operations, Ledger } from "./operationsInterfaces";
import { ConfidentialLedgerClientOptionalParams, CheckNameAvailabilityRequest, CheckNameAvailabilityOptionalParams, CheckNameAvailabilityOperationResponse } from "./models";
export declare class ConfidentialLedgerClient extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the ConfidentialLedgerClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g.
     *                       00000000-0000-0000-0000-000000000000)
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: ConfidentialLedgerClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    /**
     * To check whether a resource name is available.
     * @param nameAvailabilityRequest Name availability request payload.
     * @param options The options parameters.
     */
    checkNameAvailability(nameAvailabilityRequest: CheckNameAvailabilityRequest, options?: CheckNameAvailabilityOptionalParams): Promise<CheckNameAvailabilityOperationResponse>;
    operations: Operations;
    ledger: Ledger;
}
//# sourceMappingURL=confidentialLedgerClient.d.ts.map