/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link ProvisioningState} that the service accepts. */
export var KnownProvisioningState;
(function (KnownProvisioningState) {
    /** Unknown */
    KnownProvisioningState["Unknown"] = "Unknown";
    /** Succeeded */
    KnownProvisioningState["Succeeded"] = "Succeeded";
    /** Accepted */
    KnownProvisioningState["Accepted"] = "Accepted";
    /** Deleting */
    KnownProvisioningState["Deleting"] = "Deleting";
    /** Failed */
    KnownProvisioningState["Failed"] = "Failed";
    /** Canceled */
    KnownProvisioningState["Canceled"] = "Canceled";
    /** Deleted */
    KnownProvisioningState["Deleted"] = "Deleted";
})(KnownProvisioningState || (KnownProvisioningState = {}));
/** Known values of {@link NaptEnabled} that the service accepts. */
export var KnownNaptEnabled;
(function (KnownNaptEnabled) {
    /** NAPT is enabled */
    KnownNaptEnabled["Enabled"] = "Enabled";
    /** NAPT is disabled */
    KnownNaptEnabled["Disabled"] = "Disabled";
})(KnownNaptEnabled || (KnownNaptEnabled = {}));
/** Known values of {@link CreatedByType} that the service accepts. */
export var KnownCreatedByType;
(function (KnownCreatedByType) {
    /** User */
    KnownCreatedByType["User"] = "User";
    /** Application */
    KnownCreatedByType["Application"] = "Application";
    /** ManagedIdentity */
    KnownCreatedByType["ManagedIdentity"] = "ManagedIdentity";
    /** Key */
    KnownCreatedByType["Key"] = "Key";
})(KnownCreatedByType || (KnownCreatedByType = {}));
/** Known values of {@link DiagnosticsPackageStatus} that the service accepts. */
export var KnownDiagnosticsPackageStatus;
(function (KnownDiagnosticsPackageStatus) {
    /** NotStarted */
    KnownDiagnosticsPackageStatus["NotStarted"] = "NotStarted";
    /** Collecting */
    KnownDiagnosticsPackageStatus["Collecting"] = "Collecting";
    /** Collected */
    KnownDiagnosticsPackageStatus["Collected"] = "Collected";
    /** Error */
    KnownDiagnosticsPackageStatus["Error"] = "Error";
})(KnownDiagnosticsPackageStatus || (KnownDiagnosticsPackageStatus = {}));
/** Known values of {@link PacketCaptureStatus} that the service accepts. */
export var KnownPacketCaptureStatus;
(function (KnownPacketCaptureStatus) {
    /** NotStarted */
    KnownPacketCaptureStatus["NotStarted"] = "NotStarted";
    /** Running */
    KnownPacketCaptureStatus["Running"] = "Running";
    /** Stopped */
    KnownPacketCaptureStatus["Stopped"] = "Stopped";
    /** Error */
    KnownPacketCaptureStatus["Error"] = "Error";
})(KnownPacketCaptureStatus || (KnownPacketCaptureStatus = {}));
/** Known values of {@link DesiredInstallationState} that the service accepts. */
export var KnownDesiredInstallationState;
(function (KnownDesiredInstallationState) {
    /** Don't install the packet core. */
    KnownDesiredInstallationState["Uninstalled"] = "Uninstalled";
    /** Install the packet core. */
    KnownDesiredInstallationState["Installed"] = "Installed";
})(KnownDesiredInstallationState || (KnownDesiredInstallationState = {}));
/** Known values of {@link InstallationState} that the service accepts. */
export var KnownInstallationState;
(function (KnownInstallationState) {
    /** The packet core is uninstalled. */
    KnownInstallationState["Uninstalled"] = "Uninstalled";
    /** The packet core is installing. */
    KnownInstallationState["Installing"] = "Installing";
    /** The packet core is installed. */
    KnownInstallationState["Installed"] = "Installed";
    /** The packet core is updating its configuration. */
    KnownInstallationState["Updating"] = "Updating";
    /** The packet core is upgrading to a different software version. */
    KnownInstallationState["Upgrading"] = "Upgrading";
    /** The packet core is uninstalling. */
    KnownInstallationState["Uninstalling"] = "Uninstalling";
    /** The packet core is reinstalling. */
    KnownInstallationState["Reinstalling"] = "Reinstalling";
    /** The packet core is rolling back to its previous version. */
    KnownInstallationState["RollingBack"] = "RollingBack";
    /** The packet core is in failed state. */
    KnownInstallationState["Failed"] = "Failed";
})(KnownInstallationState || (KnownInstallationState = {}));
/** Known values of {@link ReinstallRequired} that the service accepts. */
export var KnownReinstallRequired;
(function (KnownReinstallRequired) {
    /** A reinstall of the packet core is required. */
    KnownReinstallRequired["Required"] = "Required";
    /** A reinstall of the packet core is not required. */
    KnownReinstallRequired["NotRequired"] = "NotRequired";
})(KnownReinstallRequired || (KnownReinstallRequired = {}));
/** Known values of {@link InstallationReason} that the service accepts. */
export var KnownInstallationReason;
(function (KnownInstallationReason) {
    /** The packet core has not been installed as the mobile network does not have any applicable configured slices. */
    KnownInstallationReason["NoSlices"] = "NoSlices";
    /** The packet core has not been installed as there is no configured data plane for this packet core. */
    KnownInstallationReason["NoPacketCoreDataPlane"] = "NoPacketCoreDataPlane";
    /** The packet core has not been installed as the packet core has no attached data networks. */
    KnownInstallationReason["NoAttachedDataNetworks"] = "NoAttachedDataNetworks";
    /** A reinstall is required as the packet core is running with out-of-date PLMN ID. */
    KnownInstallationReason["PublicLandMobileNetworkIdentifierHasChanged"] = "PublicLandMobileNetworkIdentifierHasChanged";
    /** A reinstall is required as the packet core is running with out-of-date control plane access interface information. */
    KnownInstallationReason["ControlPlaneAccessInterfaceHasChanged"] = "ControlPlaneAccessInterfaceHasChanged";
    /** A reinstall is required as the packet core is running with out-of-date user plane core interface. */
    KnownInstallationReason["UserPlaneAccessInterfaceHasChanged"] = "UserPlaneAccessInterfaceHasChanged";
    /** A reinstall is required as the packet core is running with out-of-date user plane access interface. */
    KnownInstallationReason["UserPlaneDataInterfaceHasChanged"] = "UserPlaneDataInterfaceHasChanged";
    /** A reinstall is required as the packet core is running with out-of-date control plane access network virtual IP address. */
    KnownInstallationReason["ControlPlaneAccessVirtualIpv4AddressesHasChanged"] = "ControlPlaneAccessVirtualIpv4AddressesHasChanged";
    /** A reinstall is required as the packet core is running with out-of-date user plane access network virtual IP address. */
    KnownInstallationReason["UserPlaneAccessVirtualIpv4AddressesHasChanged"] = "UserPlaneAccessVirtualIpv4AddressesHasChanged";
})(KnownInstallationReason || (KnownInstallationReason = {}));
/** Known values of {@link PlatformType} that the service accepts. */
export var KnownPlatformType;
(function (KnownPlatformType) {
    /** If this option is chosen, you must set one of "azureStackEdgeDevice", "connectedCluster" or "customLocation". If multiple are set, they must be consistent with each other. */
    KnownPlatformType["AKSHCI"] = "AKS-HCI";
    /** If this option is chosen, you must set one of "azureStackHciCluster", "connectedCluster" or "customLocation". If multiple are set, they must be consistent with each other. */
    KnownPlatformType["ThreePAzureStackHCI"] = "3P-AZURE-STACK-HCI";
})(KnownPlatformType || (KnownPlatformType = {}));
/** Known values of {@link BillingSku} that the service accepts. */
export var KnownBillingSku;
(function (KnownBillingSku) {
    /** 100 Mbps, 20 active SIMs plan, 2 RANs */
    KnownBillingSku["G0"] = "G0";
    /** 1 Gbps, 100 active SIMs plan, 5 RANs */
    KnownBillingSku["G1"] = "G1";
    /** 2 Gbps, 200 active SIMs plan, 10 RANs */
    KnownBillingSku["G2"] = "G2";
    /** 5 Gbps, 500 active SIMs plan */
    KnownBillingSku["G5"] = "G5";
    /** 10 Gbps, 1000 active SIMs plan */
    KnownBillingSku["G10"] = "G10";
})(KnownBillingSku || (KnownBillingSku = {}));
/** Known values of {@link AuthenticationType} that the service accepts. */
export var KnownAuthenticationType;
(function (KnownAuthenticationType) {
    /** Use AAD SSO to authenticate the user (this requires internet access). */
    KnownAuthenticationType["AAD"] = "AAD";
    /** Use locally stored passwords to authenticate the user. */
    KnownAuthenticationType["Password"] = "Password";
})(KnownAuthenticationType || (KnownAuthenticationType = {}));
/** Known values of {@link CertificateProvisioningState} that the service accepts. */
export var KnownCertificateProvisioningState;
(function (KnownCertificateProvisioningState) {
    /** The certificate has not been provisioned. */
    KnownCertificateProvisioningState["NotProvisioned"] = "NotProvisioned";
    /** The certificate has been provisioned. */
    KnownCertificateProvisioningState["Provisioned"] = "Provisioned";
    /** The certificate failed to be provisioned. The "reason" property explains why. */
    KnownCertificateProvisioningState["Failed"] = "Failed";
})(KnownCertificateProvisioningState || (KnownCertificateProvisioningState = {}));
/** Known values of {@link ManagedServiceIdentityType} that the service accepts. */
export var KnownManagedServiceIdentityType;
(function (KnownManagedServiceIdentityType) {
    /** None */
    KnownManagedServiceIdentityType["None"] = "None";
    /** UserAssigned */
    KnownManagedServiceIdentityType["UserAssigned"] = "UserAssigned";
})(KnownManagedServiceIdentityType || (KnownManagedServiceIdentityType = {}));
/** Known values of {@link VersionState} that the service accepts. */
export var KnownVersionState;
(function (KnownVersionState) {
    /** The state of this version is unknown. */
    KnownVersionState["Unknown"] = "Unknown";
    /** This version is a preview and is not suitable for production use. */
    KnownVersionState["Preview"] = "Preview";
    /** This version is currently being validated. */
    KnownVersionState["Validating"] = "Validating";
    /** This version failed validation. */
    KnownVersionState["ValidationFailed"] = "ValidationFailed";
    /** This version is active and suitable for production use. */
    KnownVersionState["Active"] = "Active";
    /** This version is deprecated and is no longer supported. */
    KnownVersionState["Deprecated"] = "Deprecated";
})(KnownVersionState || (KnownVersionState = {}));
/** Known values of {@link RecommendedVersion} that the service accepts. */
export var KnownRecommendedVersion;
(function (KnownRecommendedVersion) {
    /** This is the recommended version to use for new packet core control plane deployments. */
    KnownRecommendedVersion["Recommended"] = "Recommended";
    /** This is not the recommended version to use for new packet core control plane deployments. */
    KnownRecommendedVersion["NotRecommended"] = "NotRecommended";
})(KnownRecommendedVersion || (KnownRecommendedVersion = {}));
/** Known values of {@link ObsoleteVersion} that the service accepts. */
export var KnownObsoleteVersion;
(function (KnownObsoleteVersion) {
    /** This version is obsolete for use in new packet core control plane deployments. */
    KnownObsoleteVersion["Obsolete"] = "Obsolete";
    /** This version is not obsolete for use in new packet core control plane deployments. */
    KnownObsoleteVersion["NotObsolete"] = "NotObsolete";
})(KnownObsoleteVersion || (KnownObsoleteVersion = {}));
/** Known values of {@link PreemptionCapability} that the service accepts. */
export var KnownPreemptionCapability;
(function (KnownPreemptionCapability) {
    /** Cannot preempt */
    KnownPreemptionCapability["NotPreempt"] = "NotPreempt";
    /** May preempt */
    KnownPreemptionCapability["MayPreempt"] = "MayPreempt";
})(KnownPreemptionCapability || (KnownPreemptionCapability = {}));
/** Known values of {@link PreemptionVulnerability} that the service accepts. */
export var KnownPreemptionVulnerability;
(function (KnownPreemptionVulnerability) {
    /** Cannot be preempted */
    KnownPreemptionVulnerability["NotPreemptable"] = "NotPreemptable";
    /** May be preempted */
    KnownPreemptionVulnerability["Preemptable"] = "Preemptable";
})(KnownPreemptionVulnerability || (KnownPreemptionVulnerability = {}));
/** Known values of {@link TrafficControlPermission} that the service accepts. */
export var KnownTrafficControlPermission;
(function (KnownTrafficControlPermission) {
    /** Traffic matching this rule is allowed to flow. */
    KnownTrafficControlPermission["Enabled"] = "Enabled";
    /** Traffic matching this rule is not allowed to flow. */
    KnownTrafficControlPermission["Blocked"] = "Blocked";
})(KnownTrafficControlPermission || (KnownTrafficControlPermission = {}));
/** Known values of {@link SdfDirection} that the service accepts. */
export var KnownSdfDirection;
(function (KnownSdfDirection) {
    /** Traffic flowing from the UE to the data network. */
    KnownSdfDirection["Uplink"] = "Uplink";
    /** Traffic flowing from the data network to the UE. */
    KnownSdfDirection["Downlink"] = "Downlink";
    /** Traffic flowing both to and from the UE. */
    KnownSdfDirection["Bidirectional"] = "Bidirectional";
})(KnownSdfDirection || (KnownSdfDirection = {}));
/** Known values of {@link SimState} that the service accepts. */
export var KnownSimState;
(function (KnownSimState) {
    /** The SIM is disabled because not all configuration required for enabling is present. */
    KnownSimState["Disabled"] = "Disabled";
    /** The SIM is enabled. */
    KnownSimState["Enabled"] = "Enabled";
    /** The SIM cannot be enabled because some of the associated configuration is invalid. */
    KnownSimState["Invalid"] = "Invalid";
})(KnownSimState || (KnownSimState = {}));
/** Known values of {@link SiteProvisioningState} that the service accepts. */
export var KnownSiteProvisioningState;
(function (KnownSiteProvisioningState) {
    /** The resource should not be provisioned on this site. */
    KnownSiteProvisioningState["NotApplicable"] = "NotApplicable";
    /** The resource is being added to this site. */
    KnownSiteProvisioningState["Adding"] = "Adding";
    /** The resource is being updated on this site. */
    KnownSiteProvisioningState["Updating"] = "Updating";
    /** The resource is being deleted from this site. */
    KnownSiteProvisioningState["Deleting"] = "Deleting";
    /** The resource is provisioned on this site. */
    KnownSiteProvisioningState["Provisioned"] = "Provisioned";
    /** The resource failed to be provisioned on this site. */
    KnownSiteProvisioningState["Failed"] = "Failed";
})(KnownSiteProvisioningState || (KnownSiteProvisioningState = {}));
/** Known values of {@link PduSessionType} that the service accepts. */
export var KnownPduSessionType;
(function (KnownPduSessionType) {
    /** IPv4 */
    KnownPduSessionType["IPv4"] = "IPv4";
    /** IPv6 */
    KnownPduSessionType["IPv6"] = "IPv6";
})(KnownPduSessionType || (KnownPduSessionType = {}));
//# sourceMappingURL=index.js.map