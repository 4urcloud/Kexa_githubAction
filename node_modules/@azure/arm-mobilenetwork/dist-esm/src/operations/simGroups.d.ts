import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimGroups } from "../operationsInterfaces";
import { MobileNetworkManagementClient } from "../mobileNetworkManagementClient";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import { SimGroup, SimGroupsListBySubscriptionOptionalParams, SimGroupsListByResourceGroupOptionalParams, SimGroupsDeleteOptionalParams, SimGroupsGetOptionalParams, SimGroupsGetResponse, SimGroupsCreateOrUpdateOptionalParams, SimGroupsCreateOrUpdateResponse, IdentityAndTagsObject, SimGroupsUpdateTagsOptionalParams, SimGroupsUpdateTagsResponse } from "../models";
/** Class containing SimGroups operations. */
export declare class SimGroupsImpl implements SimGroups {
    private readonly client;
    /**
     * Initialize a new instance of the class SimGroups class.
     * @param client Reference to the service client
     */
    constructor(client: MobileNetworkManagementClient);
    /**
     * Gets all the SIM groups in a subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: SimGroupsListBySubscriptionOptionalParams): PagedAsyncIterableIterator<SimGroup>;
    private listBySubscriptionPagingPage;
    private listBySubscriptionPagingAll;
    /**
     * Gets all the SIM groups in a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: SimGroupsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<SimGroup>;
    private listByResourceGroupPagingPage;
    private listByResourceGroupPagingAll;
    /**
     * Deletes the specified SIM group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param simGroupName The name of the SIM Group.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, simGroupName: string, options?: SimGroupsDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes the specified SIM group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param simGroupName The name of the SIM Group.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, simGroupName: string, options?: SimGroupsDeleteOptionalParams): Promise<void>;
    /**
     * Gets information about the specified SIM group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param simGroupName The name of the SIM Group.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, simGroupName: string, options?: SimGroupsGetOptionalParams): Promise<SimGroupsGetResponse>;
    /**
     * Creates or updates a SIM group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param simGroupName The name of the SIM Group.
     * @param parameters Parameters supplied to the create or update SIM group operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, simGroupName: string, parameters: SimGroup, options?: SimGroupsCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<SimGroupsCreateOrUpdateResponse>, SimGroupsCreateOrUpdateResponse>>;
    /**
     * Creates or updates a SIM group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param simGroupName The name of the SIM Group.
     * @param parameters Parameters supplied to the create or update SIM group operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, simGroupName: string, parameters: SimGroup, options?: SimGroupsCreateOrUpdateOptionalParams): Promise<SimGroupsCreateOrUpdateResponse>;
    /**
     * Patch SIM group resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param simGroupName The name of the SIM Group.
     * @param parameters Parameters supplied to patch SIM group resource.
     * @param options The options parameters.
     */
    updateTags(resourceGroupName: string, simGroupName: string, parameters: IdentityAndTagsObject, options?: SimGroupsUpdateTagsOptionalParams): Promise<SimGroupsUpdateTagsResponse>;
    /**
     * Gets all the SIM groups in a subscription.
     * @param options The options parameters.
     */
    private _listBySubscription;
    /**
     * Gets all the SIM groups in a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    private _listByResourceGroup;
    /**
     * ListBySubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
     * @param options The options parameters.
     */
    private _listBySubscriptionNext;
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    private _listByResourceGroupNext;
}
//# sourceMappingURL=simGroups.d.ts.map