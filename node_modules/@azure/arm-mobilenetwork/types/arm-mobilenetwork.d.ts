import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { OperationState } from '@azure/core-lro';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { SimplePollerLike } from '@azure/core-lro';

/** Aggregate maximum bit rate. */
export declare interface Ambr {
    /** Uplink bit rate. */
    uplink: string;
    /** Downlink bit rate. */
    downlink: string;
}

/** Allocation and Retention Priority (ARP) parameters. */
export declare interface Arp {
    /** ARP priority level. */
    priorityLevel: number;
    /** ARP preemption capability. */
    preemptCap: PreemptionCapability;
    /** ARP preemption vulnerability */
    preemptVuln: PreemptionVulnerability;
}

/** Reference to an Azure Async Operation ID. */
export declare interface AsyncOperationId {
    /** Azure Async Operation ID. */
    id: string;
}

/** The current status of an async operation. */
export declare interface AsyncOperationStatus {
    /** Fully qualified ID for the async operation. */
    id?: string;
    /** Name of the async operation. */
    name?: string;
    /** The operation status. */
    status: string;
    /** Fully qualified ID for the resource that this async operation status relates to. */
    resourceId?: string;
    /** The start time of the operation. */
    startTime?: Date;
    /** The end time of the operation. */
    endTime?: Date;
    /** Percentage of the operation that is complete. */
    percentComplete?: number;
    /** Properties returned by the resource provider on a successful operation */
    properties?: Record<string, unknown>;
    /** If present, details of the operation error. */
    error?: ErrorDetail;
}

/** Attached data network resource. Must be created in the same location as its parent packet core data plane. */
export declare interface AttachedDataNetwork extends TrackedResource {
    /**
     * The provisioning state of the attached data network resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /** The user plane interface on the data network. For 5G networks, this is the N6 interface. For 4G networks, this is the SGi interface. */
    userPlaneDataInterface: InterfaceProperties;
    /** The DNS servers to signal to UEs to use for this attached data network. This configuration is mandatory - if you don't want DNS servers, you must provide an empty array. */
    dnsAddresses: string[];
    /**
     * The network address and port translation (NAPT) configuration.
     * If this is not specified, the attached data network will use a default NAPT configuration with NAPT enabled.
     */
    naptConfiguration?: NaptConfiguration;
    /**
     * The user equipment (UE) address pool prefixes for the attached data network from which the packet core instance will dynamically assign IP addresses to UEs.
     * The packet core instance assigns an IP address to a UE when the UE sets up a PDU session.
     *  You must define at least one of userEquipmentAddressPoolPrefix and userEquipmentStaticAddressPoolPrefix. If you define both, they must be of the same size.
     */
    userEquipmentAddressPoolPrefix?: string[];
    /**
     * The user equipment (UE) address pool prefixes for the attached data network from which the packet core instance will assign static IP addresses to UEs.
     * The packet core instance assigns an IP address to a UE when the UE sets up a PDU session. The static IP address for a specific UE is set in StaticIPConfiguration on the corresponding SIM resource.
     * At least one of userEquipmentAddressPoolPrefix and userEquipmentStaticAddressPoolPrefix must be defined. If both are defined, they must be of the same size.
     */
    userEquipmentStaticAddressPoolPrefix?: string[];
}

/** Response for attached data network API service call. */
export declare interface AttachedDataNetworkListResult {
    /** A list of data networks in a resource group. */
    value?: AttachedDataNetwork[];
    /**
     * The URL to get the next set of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Reference to an attached data network resource. */
export declare interface AttachedDataNetworkResourceId {
    /** Attached data network resource ID. */
    id: string;
}

/** Interface representing a AttachedDataNetworks. */
export declare interface AttachedDataNetworks {
    /**
     * Gets all the attached data networks associated with a packet core data plane.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param packetCoreControlPlaneName The name of the packet core control plane.
     * @param packetCoreDataPlaneName The name of the packet core data plane.
     * @param options The options parameters.
     */
    listByPacketCoreDataPlane(resourceGroupName: string, packetCoreControlPlaneName: string, packetCoreDataPlaneName: string, options?: AttachedDataNetworksListByPacketCoreDataPlaneOptionalParams): PagedAsyncIterableIterator<AttachedDataNetwork>;
    /**
     * Deletes the specified attached data network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param packetCoreControlPlaneName The name of the packet core control plane.
     * @param packetCoreDataPlaneName The name of the packet core data plane.
     * @param attachedDataNetworkName The name of the attached data network.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, packetCoreControlPlaneName: string, packetCoreDataPlaneName: string, attachedDataNetworkName: string, options?: AttachedDataNetworksDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes the specified attached data network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param packetCoreControlPlaneName The name of the packet core control plane.
     * @param packetCoreDataPlaneName The name of the packet core data plane.
     * @param attachedDataNetworkName The name of the attached data network.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, packetCoreControlPlaneName: string, packetCoreDataPlaneName: string, attachedDataNetworkName: string, options?: AttachedDataNetworksDeleteOptionalParams): Promise<void>;
    /**
     * Gets information about the specified attached data network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param packetCoreControlPlaneName The name of the packet core control plane.
     * @param packetCoreDataPlaneName The name of the packet core data plane.
     * @param attachedDataNetworkName The name of the attached data network.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, packetCoreControlPlaneName: string, packetCoreDataPlaneName: string, attachedDataNetworkName: string, options?: AttachedDataNetworksGetOptionalParams): Promise<AttachedDataNetworksGetResponse>;
    /**
     * Creates or updates an attached data network. Must be created in the same location as its parent
     * packet core data plane.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param packetCoreControlPlaneName The name of the packet core control plane.
     * @param packetCoreDataPlaneName The name of the packet core data plane.
     * @param attachedDataNetworkName The name of the attached data network.
     * @param parameters Parameters supplied to the create or update attached data network operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, packetCoreControlPlaneName: string, packetCoreDataPlaneName: string, attachedDataNetworkName: string, parameters: AttachedDataNetwork, options?: AttachedDataNetworksCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<AttachedDataNetworksCreateOrUpdateResponse>, AttachedDataNetworksCreateOrUpdateResponse>>;
    /**
     * Creates or updates an attached data network. Must be created in the same location as its parent
     * packet core data plane.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param packetCoreControlPlaneName The name of the packet core control plane.
     * @param packetCoreDataPlaneName The name of the packet core data plane.
     * @param attachedDataNetworkName The name of the attached data network.
     * @param parameters Parameters supplied to the create or update attached data network operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, packetCoreControlPlaneName: string, packetCoreDataPlaneName: string, attachedDataNetworkName: string, parameters: AttachedDataNetwork, options?: AttachedDataNetworksCreateOrUpdateOptionalParams): Promise<AttachedDataNetworksCreateOrUpdateResponse>;
    /**
     * Updates an attached data network tags.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param packetCoreControlPlaneName The name of the packet core control plane.
     * @param packetCoreDataPlaneName The name of the packet core data plane.
     * @param attachedDataNetworkName The name of the attached data network.
     * @param parameters Parameters supplied to update attached data network tags.
     * @param options The options parameters.
     */
    updateTags(resourceGroupName: string, packetCoreControlPlaneName: string, packetCoreDataPlaneName: string, attachedDataNetworkName: string, parameters: TagsObject, options?: AttachedDataNetworksUpdateTagsOptionalParams): Promise<AttachedDataNetworksUpdateTagsResponse>;
}

/** Optional parameters. */
export declare interface AttachedDataNetworksCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type AttachedDataNetworksCreateOrUpdateResponse = AttachedDataNetwork;

/** Optional parameters. */
export declare interface AttachedDataNetworksDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface AttachedDataNetworksGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type AttachedDataNetworksGetResponse = AttachedDataNetwork;

/** Optional parameters. */
export declare interface AttachedDataNetworksListByPacketCoreDataPlaneNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByPacketCoreDataPlaneNext operation. */
export declare type AttachedDataNetworksListByPacketCoreDataPlaneNextResponse = AttachedDataNetworkListResult;

/** Optional parameters. */
export declare interface AttachedDataNetworksListByPacketCoreDataPlaneOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByPacketCoreDataPlane operation. */
export declare type AttachedDataNetworksListByPacketCoreDataPlaneResponse = AttachedDataNetworkListResult;

/** Optional parameters. */
export declare interface AttachedDataNetworksUpdateTagsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the updateTags operation. */
export declare type AttachedDataNetworksUpdateTagsResponse = AttachedDataNetwork;

/**
 * Defines values for AuthenticationType. \
 * {@link KnownAuthenticationType} can be used interchangeably with AuthenticationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AAD**: Use AAD SSO to authenticate the user (this requires internet access). \
 * **Password**: Use locally stored passwords to authenticate the user.
 */
export declare type AuthenticationType = string;

/** Reference to an Azure Stack Edge device resource. */
export declare interface AzureStackEdgeDeviceResourceId {
    /** Azure Stack Edge device resource ID. */
    id: string;
}

/** Reference to an Azure Stack HCI cluster resource. */
export declare interface AzureStackHCIClusterResourceId {
    /** Azure Stack HCI cluster resource ID. */
    id: string;
}

/**
 * Defines values for BillingSku. \
 * {@link KnownBillingSku} can be used interchangeably with BillingSku,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **G0**: 100 Mbps, 20 active SIMs plan, 2 RANs \
 * **G1**: 1 Gbps, 100 active SIMs plan, 5 RANs \
 * **G2**: 2 Gbps, 200 active SIMs plan, 10 RANs \
 * **G5**: 5 Gbps, 500 active SIMs plan \
 * **G10**: 10 Gbps, 1000 active SIMs plan
 */
export declare type BillingSku = string;

/** Certificate provisioning state */
export declare interface CertificateProvisioning {
    /**
     * The certificate's provisioning state
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly state?: CertificateProvisioningState;
    /**
     * Reason for certificate provisioning failure.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly reason?: string;
}

/**
 * Defines values for CertificateProvisioningState. \
 * {@link KnownCertificateProvisioningState} can be used interchangeably with CertificateProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotProvisioned**: The certificate has not been provisioned. \
 * **Provisioned**: The certificate has been provisioned. \
 * **Failed**: The certificate failed to be provisioned. The "reason" property explains why.
 */
export declare type CertificateProvisioningState = string;

/** Common SIM properties. */
export declare interface CommonSimPropertiesFormat {
    /**
     * The provisioning state of the SIM resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /**
     * The state of the SIM resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly simState?: SimState;
    /**
     * A dictionary of sites to the provisioning state of this SIM on that site.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly siteProvisioningState?: {
        [propertyName: string]: SiteProvisioningState;
    };
    /** The international mobile subscriber identity (IMSI) for the SIM. */
    internationalMobileSubscriberIdentity: string;
    /** The integrated circuit card ID (ICCID) for the SIM. */
    integratedCircuitCardIdentifier?: string;
    /** An optional free-form text field that can be used to record the device type this SIM is associated with, for example 'Video camera'. The Azure portal allows SIMs to be grouped and filtered based on this value. */
    deviceType?: string;
    /** The SIM policy used by this SIM. The SIM policy must be in the same location as the SIM. */
    simPolicy?: SimPolicyResourceId;
    /** A list of static IP addresses assigned to this SIM. Each address is assigned at a defined network scope, made up of {attached data network, slice}. */
    staticIpConfiguration?: SimStaticIpProperties[];
    /**
     * The name of the SIM vendor who provided this SIM, if any.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly vendorName?: string;
    /**
     * The public key fingerprint of the SIM vendor who provided this SIM, if any.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly vendorKeyFingerprint?: string;
}

/** Reference to an Azure Arc custom location resource. */
export declare interface ConnectedClusterResourceId {
    /** Azure Arc connected cluster resource ID. */
    id: string;
}

/** Defines values for CoreNetworkType. */
export declare type CoreNetworkType = "5GC" | "EPC" | "EPC + 5GC";

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export declare type CreatedByType = string;

/** Reference to an Azure Arc custom location resource. */
export declare interface CustomLocationResourceId {
    /** Azure Arc custom location resource ID. */
    id: string;
}

/** Data network resource. Must be created in the same location as its parent mobile network. */
export declare interface DataNetwork extends TrackedResource {
    /**
     * The provisioning state of the data network resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /** An optional description for this data network. */
    description?: string;
}

/** Settings controlling data network use */
export declare interface DataNetworkConfiguration {
    /** A reference to the data network that these settings apply to. The data network must be in the same location as the SIM policy. */
    dataNetwork: DataNetworkResourceId;
    /** Aggregate maximum bit rate across all non-GBR QoS flows of a given PDU session. See 3GPP TS23.501 section 5.7.2.6 for a full description of the Session-AMBR. */
    sessionAmbr: Ambr;
    /** Default 5G QoS Flow Indicator value. The 5QI identifies a specific QoS forwarding treatment to be provided to a flow. See 3GPP TS23.501 section 5.7.2.1 for a full description of the 5QI parameter, and table 5.7.4-1 for the definition the 5QI values. */
    fiveQi?: number;
    /** Default QoS Flow allocation and retention priority (ARP) level. Flows with higher priority preempt flows with lower priority, if the settings of `preemptionCapability` and `preemptionVulnerability` allow it. 1 is the highest level of priority. If this field is not specified then `5qi` is used to derive the ARP value. See 3GPP TS23.501 section 5.7.2.2 for a full description of the ARP parameters. */
    allocationAndRetentionPriorityLevel?: number;
    /** Default QoS Flow preemption capability. The preemption capability of a QoS Flow controls whether it can preempt another QoS Flow with a lower priority level. See 3GPP TS23.501 section 5.7.2.2 for a full description of the ARP parameters. */
    preemptionCapability?: PreemptionCapability;
    /** Default QoS Flow preemption vulnerability. The preemption vulnerability of a QoS Flow controls whether it can be preempted by a QoS Flow with a higher priority level. See 3GPP TS23.501 section 5.7.2.2 for a full description of the ARP parameters. */
    preemptionVulnerability?: PreemptionVulnerability;
    /** The default PDU session type, which is used if the UE does not request a specific session type. */
    defaultSessionType?: PduSessionType;
    /** Allowed session types in addition to the default session type. Must not duplicate the default session type. */
    additionalAllowedSessionTypes?: PduSessionType[];
    /** List of services that can be used as part of this SIM policy. The list must not contain duplicate items and must contain at least one item. The services must be in the same location as the SIM policy. */
    allowedServices: ServiceResourceId[];
    /** The maximum number of downlink packets to buffer at the user plane for High Latency Communication - Extended Buffering. See 3GPP TS29.272 v15.10.0 section 7.3.188 for a full description. This maximum is not guaranteed because there is a internal limit on buffered packets across all PDU sessions. */
    maximumNumberOfBufferedPackets?: number;
}

/** Response for data network API service call. */
export declare interface DataNetworkListResult {
    /** A list of data networks. */
    value?: DataNetwork[];
    /**
     * The URL to get the next set of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Reference to a data network resource. */
export declare interface DataNetworkResourceId {
    /** Data network resource ID. */
    id: string;
}

/** Interface representing a DataNetworks. */
export declare interface DataNetworks {
    /**
     * Lists all data networks in the mobile network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mobileNetworkName The name of the mobile network.
     * @param options The options parameters.
     */
    listByMobileNetwork(resourceGroupName: string, mobileNetworkName: string, options?: DataNetworksListByMobileNetworkOptionalParams): PagedAsyncIterableIterator<DataNetwork>;
    /**
     * Deletes the specified data network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mobileNetworkName The name of the mobile network.
     * @param dataNetworkName The name of the data network.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, mobileNetworkName: string, dataNetworkName: string, options?: DataNetworksDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes the specified data network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mobileNetworkName The name of the mobile network.
     * @param dataNetworkName The name of the data network.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, mobileNetworkName: string, dataNetworkName: string, options?: DataNetworksDeleteOptionalParams): Promise<void>;
    /**
     * Gets information about the specified data network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mobileNetworkName The name of the mobile network.
     * @param dataNetworkName The name of the data network.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, mobileNetworkName: string, dataNetworkName: string, options?: DataNetworksGetOptionalParams): Promise<DataNetworksGetResponse>;
    /**
     * Creates or updates a data network. Must be created in the same location as its parent mobile
     * network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mobileNetworkName The name of the mobile network.
     * @param dataNetworkName The name of the data network.
     * @param parameters Parameters supplied to the create or update data network operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, mobileNetworkName: string, dataNetworkName: string, parameters: DataNetwork, options?: DataNetworksCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<DataNetworksCreateOrUpdateResponse>, DataNetworksCreateOrUpdateResponse>>;
    /**
     * Creates or updates a data network. Must be created in the same location as its parent mobile
     * network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mobileNetworkName The name of the mobile network.
     * @param dataNetworkName The name of the data network.
     * @param parameters Parameters supplied to the create or update data network operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, mobileNetworkName: string, dataNetworkName: string, parameters: DataNetwork, options?: DataNetworksCreateOrUpdateOptionalParams): Promise<DataNetworksCreateOrUpdateResponse>;
    /**
     * Updates data network tags.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mobileNetworkName The name of the mobile network.
     * @param dataNetworkName The name of the data network.
     * @param parameters Parameters supplied to update data network tags.
     * @param options The options parameters.
     */
    updateTags(resourceGroupName: string, mobileNetworkName: string, dataNetworkName: string, parameters: TagsObject, options?: DataNetworksUpdateTagsOptionalParams): Promise<DataNetworksUpdateTagsResponse>;
}

/** Optional parameters. */
export declare interface DataNetworksCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type DataNetworksCreateOrUpdateResponse = DataNetwork;

/** Optional parameters. */
export declare interface DataNetworksDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface DataNetworksGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type DataNetworksGetResponse = DataNetwork;

/** Optional parameters. */
export declare interface DataNetworksListByMobileNetworkNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByMobileNetworkNext operation. */
export declare type DataNetworksListByMobileNetworkNextResponse = DataNetworkListResult;

/** Optional parameters. */
export declare interface DataNetworksListByMobileNetworkOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByMobileNetwork operation. */
export declare type DataNetworksListByMobileNetworkResponse = DataNetworkListResult;

/** Optional parameters. */
export declare interface DataNetworksUpdateTagsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the updateTags operation. */
export declare type DataNetworksUpdateTagsResponse = DataNetwork;

/**
 * Defines values for DesiredInstallationState. \
 * {@link KnownDesiredInstallationState} can be used interchangeably with DesiredInstallationState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Uninstalled**: Don't install the packet core. \
 * **Installed**: Install the packet core.
 */
export declare type DesiredInstallationState = string;

/** Diagnostics package resource. */
export declare interface DiagnosticsPackage extends ProxyResource {
    /**
     * The provisioning state of the diagnostics package resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /**
     * The status of the diagnostics package collection.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: DiagnosticsPackageStatus;
    /**
     * The reason for the current state of the diagnostics package collection.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly reason?: string;
}

/** Response for diagnostics package API service call. */
export declare interface DiagnosticsPackageListResult {
    /** A list of diagnostics packages under a packet core control plane. */
    value?: DiagnosticsPackage[];
    /**
     * The URL to get the next set of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a DiagnosticsPackages. */
export declare interface DiagnosticsPackages {
    /**
     * Lists all the diagnostics packages under a packet core control plane.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param packetCoreControlPlaneName The name of the packet core control plane.
     * @param options The options parameters.
     */
    listByPacketCoreControlPlane(resourceGroupName: string, packetCoreControlPlaneName: string, options?: DiagnosticsPackagesListByPacketCoreControlPlaneOptionalParams): PagedAsyncIterableIterator<DiagnosticsPackage>;
    /**
     * Creates or updates a diagnostics package.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param packetCoreControlPlaneName The name of the packet core control plane.
     * @param diagnosticsPackageName The name of the diagnostics package.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, packetCoreControlPlaneName: string, diagnosticsPackageName: string, options?: DiagnosticsPackagesCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<DiagnosticsPackagesCreateOrUpdateResponse>, DiagnosticsPackagesCreateOrUpdateResponse>>;
    /**
     * Creates or updates a diagnostics package.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param packetCoreControlPlaneName The name of the packet core control plane.
     * @param diagnosticsPackageName The name of the diagnostics package.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, packetCoreControlPlaneName: string, diagnosticsPackageName: string, options?: DiagnosticsPackagesCreateOrUpdateOptionalParams): Promise<DiagnosticsPackagesCreateOrUpdateResponse>;
    /**
     * Gets information about the specified diagnostics package.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param packetCoreControlPlaneName The name of the packet core control plane.
     * @param diagnosticsPackageName The name of the diagnostics package.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, packetCoreControlPlaneName: string, diagnosticsPackageName: string, options?: DiagnosticsPackagesGetOptionalParams): Promise<DiagnosticsPackagesGetResponse>;
    /**
     * Deletes the specified diagnostics package.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param packetCoreControlPlaneName The name of the packet core control plane.
     * @param diagnosticsPackageName The name of the diagnostics package.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, packetCoreControlPlaneName: string, diagnosticsPackageName: string, options?: DiagnosticsPackagesDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes the specified diagnostics package.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param packetCoreControlPlaneName The name of the packet core control plane.
     * @param diagnosticsPackageName The name of the diagnostics package.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, packetCoreControlPlaneName: string, diagnosticsPackageName: string, options?: DiagnosticsPackagesDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface DiagnosticsPackagesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type DiagnosticsPackagesCreateOrUpdateResponse = DiagnosticsPackage;

/** Optional parameters. */
export declare interface DiagnosticsPackagesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface DiagnosticsPackagesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type DiagnosticsPackagesGetResponse = DiagnosticsPackage;

/** Optional parameters. */
export declare interface DiagnosticsPackagesListByPacketCoreControlPlaneNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByPacketCoreControlPlaneNext operation. */
export declare type DiagnosticsPackagesListByPacketCoreControlPlaneNextResponse = DiagnosticsPackageListResult;

/** Optional parameters. */
export declare interface DiagnosticsPackagesListByPacketCoreControlPlaneOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByPacketCoreControlPlane operation. */
export declare type DiagnosticsPackagesListByPacketCoreControlPlaneResponse = DiagnosticsPackageListResult;

/**
 * Defines values for DiagnosticsPackageStatus. \
 * {@link KnownDiagnosticsPackageStatus} can be used interchangeably with DiagnosticsPackageStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotStarted** \
 * **Collecting** \
 * **Collected** \
 * **Error**
 */
export declare type DiagnosticsPackageStatus = string;

/** Configuration for uploading packet core diagnostics. */
export declare interface DiagnosticsUploadConfiguration {
    /** The Storage Account Container URL to upload diagnostics to. */
    storageAccountContainerUrl: string;
}

/** Encrypted SIM properties. */
export declare interface EncryptedSimPropertiesFormat extends CommonSimPropertiesFormat {
    /** The encrypted SIM credentials. */
    encryptedCredentials?: string;
}

/** The SIMs to upload. The SIM credentials must be encrypted. */
export declare interface EncryptedSimUploadList {
    /** The upload file format version. */
    version: number;
    /** An identifier for the Azure SIM onboarding public key used for encrypted upload. */
    azureKeyIdentifier: number;
    /** The fingerprint of the SIM vendor public key. The private counterpart is used for signing the encrypted transport key. */
    vendorKeyFingerprint: string;
    /** The transport key used for encrypting SIM credentials, encrypted using the SIM onboarding public key. */
    encryptedTransportKey: string;
    /** The encrypted transport key, signed using the SIM vendor private key. */
    signedTransportKey: string;
    /** A list of SIMs to upload, with encrypted properties. */
    sims: SimNameAndEncryptedProperties[];
}

/** The resource management error additional info. */
export declare interface ErrorAdditionalInfo {
    /**
     * The additional info type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The additional info.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly info?: Record<string, unknown>;
}

/** The error detail. */
export declare interface ErrorDetail {
    /**
     * The error code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * The error message.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
    /**
     * The error target.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly target?: string;
    /**
     * The error details.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly details?: ErrorDetail[];
    /**
     * The error additional info.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export declare interface ErrorResponse {
    /** The error object. */
    error?: ErrorDetail;
}

/** Configuration for sending packet core events to Azure Event Hub. */
export declare interface EventHubConfiguration {
    /** Resource ID  of Azure Event Hub to send packet core events to. */
    id: string;
    /** The duration (in seconds) between UE usage reports. */
    reportingInterval?: number;
}

/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/** HTTPS server certificate configuration. */
export declare interface HttpsServerCertificate {
    /** The certificate URL, unversioned. For example: https://contosovault.vault.azure.net/certificates/ingress. */
    certificateUrl: string;
    /**
     * The provisioning state of the certificate.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioning?: CertificateProvisioning;
}

/** Identity and Tags object for patch operations. */
export declare interface IdentityAndTagsObject {
    /** The managed service identity associated with this resource. */
    identity?: ManagedServiceIdentity;
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
}

/** The installation state of the packet core. */
export declare interface Installation {
    /** The desired installation state */
    desiredState?: DesiredInstallationState;
    /**
     * Installation state
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly state?: InstallationState;
    /**
     * Whether a reinstall of the packet core is required to pick up the latest configuration changes.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly reinstallRequired?: ReinstallRequired;
    /**
     * Reason(s) for the current installation state of the packet core.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly reasons?: InstallationReason[];
    /**
     * A reference to an in-progress installation operation
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly operation?: AsyncOperationId;
}

/**
 * Defines values for InstallationReason. \
 * {@link KnownInstallationReason} can be used interchangeably with InstallationReason,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NoSlices**: The packet core has not been installed as the mobile network does not have any applicable configured slices. \
 * **NoPacketCoreDataPlane**: The packet core has not been installed as there is no configured data plane for this packet core. \
 * **NoAttachedDataNetworks**: The packet core has not been installed as the packet core has no attached data networks. \
 * **PublicLandMobileNetworkIdentifierHasChanged**: A reinstall is required as the packet core is running with out-of-date PLMN ID. \
 * **ControlPlaneAccessInterfaceHasChanged**: A reinstall is required as the packet core is running with out-of-date control plane access interface information. \
 * **UserPlaneAccessInterfaceHasChanged**: A reinstall is required as the packet core is running with out-of-date user plane core interface. \
 * **UserPlaneDataInterfaceHasChanged**: A reinstall is required as the packet core is running with out-of-date user plane access interface. \
 * **ControlPlaneAccessVirtualIpv4AddressesHasChanged**: A reinstall is required as the packet core is running with out-of-date control plane access network virtual IP address. \
 * **UserPlaneAccessVirtualIpv4AddressesHasChanged**: A reinstall is required as the packet core is running with out-of-date user plane access network virtual IP address.
 */
export declare type InstallationReason = string;

/**
 * Defines values for InstallationState. \
 * {@link KnownInstallationState} can be used interchangeably with InstallationState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Uninstalled**: The packet core is uninstalled. \
 * **Installing**: The packet core is installing. \
 * **Installed**: The packet core is installed. \
 * **Updating**: The packet core is updating its configuration. \
 * **Upgrading**: The packet core is upgrading to a different software version. \
 * **Uninstalling**: The packet core is uninstalling. \
 * **Reinstalling**: The packet core is reinstalling. \
 * **RollingBack**: The packet core is rolling back to its previous version. \
 * **Failed**: The packet core is in failed state.
 */
export declare type InstallationState = string;

/** Interface properties */
export declare interface InterfaceProperties {
    /** The logical name for this interface. This should match one of the interfaces configured on your Azure Stack Edge device. */
    name?: string;
    /** The IPv4 address. */
    ipv4Address?: string;
    /** The IPv4 subnet. */
    ipv4Subnet?: string;
    /** The default IPv4 gateway (router). */
    ipv4Gateway?: string;
}

/** An Azure key vault key. */
export declare interface KeyVaultKey {
    /** The key URL, unversioned. For example: https://contosovault.vault.azure.net/keys/azureKey. */
    keyUrl?: string;
}

/** Known values of {@link AuthenticationType} that the service accepts. */
export declare enum KnownAuthenticationType {
    /** Use AAD SSO to authenticate the user (this requires internet access). */
    AAD = "AAD",
    /** Use locally stored passwords to authenticate the user. */
    Password = "Password"
}

/** Known values of {@link BillingSku} that the service accepts. */
export declare enum KnownBillingSku {
    /** 100 Mbps, 20 active SIMs plan, 2 RANs */
    G0 = "G0",
    /** 1 Gbps, 100 active SIMs plan, 5 RANs */
    G1 = "G1",
    /** 2 Gbps, 200 active SIMs plan, 10 RANs */
    G2 = "G2",
    /** 5 Gbps, 500 active SIMs plan */
    G5 = "G5",
    /** 10 Gbps, 1000 active SIMs plan */
    G10 = "G10"
}

/** Known values of {@link CertificateProvisioningState} that the service accepts. */
export declare enum KnownCertificateProvisioningState {
    /** The certificate has not been provisioned. */
    NotProvisioned = "NotProvisioned",
    /** The certificate has been provisioned. */
    Provisioned = "Provisioned",
    /** The certificate failed to be provisioned. The "reason" property explains why. */
    Failed = "Failed"
}

/** Known values of {@link CreatedByType} that the service accepts. */
export declare enum KnownCreatedByType {
    /** User */
    User = "User",
    /** Application */
    Application = "Application",
    /** ManagedIdentity */
    ManagedIdentity = "ManagedIdentity",
    /** Key */
    Key = "Key"
}

/** Known values of {@link DesiredInstallationState} that the service accepts. */
export declare enum KnownDesiredInstallationState {
    /** Don't install the packet core. */
    Uninstalled = "Uninstalled",
    /** Install the packet core. */
    Installed = "Installed"
}

/** Known values of {@link DiagnosticsPackageStatus} that the service accepts. */
export declare enum KnownDiagnosticsPackageStatus {
    /** NotStarted */
    NotStarted = "NotStarted",
    /** Collecting */
    Collecting = "Collecting",
    /** Collected */
    Collected = "Collected",
    /** Error */
    Error = "Error"
}

/** Known values of {@link InstallationReason} that the service accepts. */
export declare enum KnownInstallationReason {
    /** The packet core has not been installed as the mobile network does not have any applicable configured slices. */
    NoSlices = "NoSlices",
    /** The packet core has not been installed as there is no configured data plane for this packet core. */
    NoPacketCoreDataPlane = "NoPacketCoreDataPlane",
    /** The packet core has not been installed as the packet core has no attached data networks. */
    NoAttachedDataNetworks = "NoAttachedDataNetworks",
    /** A reinstall is required as the packet core is running with out-of-date PLMN ID. */
    PublicLandMobileNetworkIdentifierHasChanged = "PublicLandMobileNetworkIdentifierHasChanged",
    /** A reinstall is required as the packet core is running with out-of-date control plane access interface information. */
    ControlPlaneAccessInterfaceHasChanged = "ControlPlaneAccessInterfaceHasChanged",
    /** A reinstall is required as the packet core is running with out-of-date user plane core interface. */
    UserPlaneAccessInterfaceHasChanged = "UserPlaneAccessInterfaceHasChanged",
    /** A reinstall is required as the packet core is running with out-of-date user plane access interface. */
    UserPlaneDataInterfaceHasChanged = "UserPlaneDataInterfaceHasChanged",
    /** A reinstall is required as the packet core is running with out-of-date control plane access network virtual IP address. */
    ControlPlaneAccessVirtualIpv4AddressesHasChanged = "ControlPlaneAccessVirtualIpv4AddressesHasChanged",
    /** A reinstall is required as the packet core is running with out-of-date user plane access network virtual IP address. */
    UserPlaneAccessVirtualIpv4AddressesHasChanged = "UserPlaneAccessVirtualIpv4AddressesHasChanged"
}

/** Known values of {@link InstallationState} that the service accepts. */
export declare enum KnownInstallationState {
    /** The packet core is uninstalled. */
    Uninstalled = "Uninstalled",
    /** The packet core is installing. */
    Installing = "Installing",
    /** The packet core is installed. */
    Installed = "Installed",
    /** The packet core is updating its configuration. */
    Updating = "Updating",
    /** The packet core is upgrading to a different software version. */
    Upgrading = "Upgrading",
    /** The packet core is uninstalling. */
    Uninstalling = "Uninstalling",
    /** The packet core is reinstalling. */
    Reinstalling = "Reinstalling",
    /** The packet core is rolling back to its previous version. */
    RollingBack = "RollingBack",
    /** The packet core is in failed state. */
    Failed = "Failed"
}

/** Known values of {@link ManagedServiceIdentityType} that the service accepts. */
export declare enum KnownManagedServiceIdentityType {
    /** None */
    None = "None",
    /** UserAssigned */
    UserAssigned = "UserAssigned"
}

/** Known values of {@link NaptEnabled} that the service accepts. */
export declare enum KnownNaptEnabled {
    /** NAPT is enabled */
    Enabled = "Enabled",
    /** NAPT is disabled */
    Disabled = "Disabled"
}

/** Known values of {@link ObsoleteVersion} that the service accepts. */
export declare enum KnownObsoleteVersion {
    /** This version is obsolete for use in new packet core control plane deployments. */
    Obsolete = "Obsolete",
    /** This version is not obsolete for use in new packet core control plane deployments. */
    NotObsolete = "NotObsolete"
}

/** Known values of {@link PacketCaptureStatus} that the service accepts. */
export declare enum KnownPacketCaptureStatus {
    /** NotStarted */
    NotStarted = "NotStarted",
    /** Running */
    Running = "Running",
    /** Stopped */
    Stopped = "Stopped",
    /** Error */
    Error = "Error"
}

/** Known values of {@link PduSessionType} that the service accepts. */
export declare enum KnownPduSessionType {
    /** IPv4 */
    IPv4 = "IPv4",
    /** IPv6 */
    IPv6 = "IPv6"
}

/** Known values of {@link PlatformType} that the service accepts. */
export declare enum KnownPlatformType {
    /** If this option is chosen, you must set one of "azureStackEdgeDevice", "connectedCluster" or "customLocation". If multiple are set, they must be consistent with each other. */
    AKSHCI = "AKS-HCI",
    /** If this option is chosen, you must set one of "azureStackHciCluster", "connectedCluster" or "customLocation". If multiple are set, they must be consistent with each other. */
    ThreePAzureStackHCI = "3P-AZURE-STACK-HCI"
}

/** Known values of {@link PreemptionCapability} that the service accepts. */
export declare enum KnownPreemptionCapability {
    /** Cannot preempt */
    NotPreempt = "NotPreempt",
    /** May preempt */
    MayPreempt = "MayPreempt"
}

/** Known values of {@link PreemptionVulnerability} that the service accepts. */
export declare enum KnownPreemptionVulnerability {
    /** Cannot be preempted */
    NotPreemptable = "NotPreemptable",
    /** May be preempted */
    Preemptable = "Preemptable"
}

/** Known values of {@link ProvisioningState} that the service accepts. */
export declare enum KnownProvisioningState {
    /** Unknown */
    Unknown = "Unknown",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Accepted */
    Accepted = "Accepted",
    /** Deleting */
    Deleting = "Deleting",
    /** Failed */
    Failed = "Failed",
    /** Canceled */
    Canceled = "Canceled",
    /** Deleted */
    Deleted = "Deleted"
}

/** Known values of {@link RecommendedVersion} that the service accepts. */
export declare enum KnownRecommendedVersion {
    /** This is the recommended version to use for new packet core control plane deployments. */
    Recommended = "Recommended",
    /** This is not the recommended version to use for new packet core control plane deployments. */
    NotRecommended = "NotRecommended"
}

/** Known values of {@link ReinstallRequired} that the service accepts. */
export declare enum KnownReinstallRequired {
    /** A reinstall of the packet core is required. */
    Required = "Required",
    /** A reinstall of the packet core is not required. */
    NotRequired = "NotRequired"
}

/** Known values of {@link SdfDirection} that the service accepts. */
export declare enum KnownSdfDirection {
    /** Traffic flowing from the UE to the data network. */
    Uplink = "Uplink",
    /** Traffic flowing from the data network to the UE. */
    Downlink = "Downlink",
    /** Traffic flowing both to and from the UE. */
    Bidirectional = "Bidirectional"
}

/** Known values of {@link SimState} that the service accepts. */
export declare enum KnownSimState {
    /** The SIM is disabled because not all configuration required for enabling is present. */
    Disabled = "Disabled",
    /** The SIM is enabled. */
    Enabled = "Enabled",
    /** The SIM cannot be enabled because some of the associated configuration is invalid. */
    Invalid = "Invalid"
}

/** Known values of {@link SiteProvisioningState} that the service accepts. */
export declare enum KnownSiteProvisioningState {
    /** The resource should not be provisioned on this site. */
    NotApplicable = "NotApplicable",
    /** The resource is being added to this site. */
    Adding = "Adding",
    /** The resource is being updated on this site. */
    Updating = "Updating",
    /** The resource is being deleted from this site. */
    Deleting = "Deleting",
    /** The resource is provisioned on this site. */
    Provisioned = "Provisioned",
    /** The resource failed to be provisioned on this site. */
    Failed = "Failed"
}

/** Known values of {@link TrafficControlPermission} that the service accepts. */
export declare enum KnownTrafficControlPermission {
    /** Traffic matching this rule is allowed to flow. */
    Enabled = "Enabled",
    /** Traffic matching this rule is not allowed to flow. */
    Blocked = "Blocked"
}

/** Known values of {@link VersionState} that the service accepts. */
export declare enum KnownVersionState {
    /** The state of this version is unknown. */
    Unknown = "Unknown",
    /** This version is a preview and is not suitable for production use. */
    Preview = "Preview",
    /** This version is currently being validated. */
    Validating = "Validating",
    /** This version failed validation. */
    ValidationFailed = "ValidationFailed",
    /** This version is active and suitable for production use. */
    Active = "Active",
    /** This version is deprecated and is no longer supported. */
    Deprecated = "Deprecated"
}

/** The kubernetes ingress configuration to control access to packet core diagnostics over local APIs. */
export declare interface LocalDiagnosticsAccessConfiguration {
    /** How to authenticate users who access local diagnostics APIs. */
    authenticationType: AuthenticationType;
    /** The HTTPS server TLS certificate used to secure local access to diagnostics. */
    httpsServerCertificate?: HttpsServerCertificate;
}

/** Managed service identity (User assigned identity) */
export declare interface ManagedServiceIdentity {
    /** Type of managed service identity (currently only UserAssigned allowed). */
    type: ManagedServiceIdentityType;
    /** The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests. */
    userAssignedIdentities?: {
        [propertyName: string]: UserAssignedIdentity;
    };
}

/**
 * Defines values for ManagedServiceIdentityType. \
 * {@link KnownManagedServiceIdentityType} can be used interchangeably with ManagedServiceIdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **UserAssigned**
 */
export declare type ManagedServiceIdentityType = string;

/** Mobile network resource. */
export declare interface MobileNetwork extends TrackedResource {
    /**
     * The provisioning state of the mobile network resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /** The unique public land mobile network identifier for the network. This is made up of the mobile country code and mobile network code, as defined in https://www.itu.int/rec/T-REC-E.212. The values 001-01 and 001-001 can be used for testing and the values 999-99 and 999-999 can be used on internal private networks. */
    publicLandMobileNetworkIdentifier: PlmnId;
    /**
     * The mobile network resource identifier
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly serviceKey?: string;
}

/** Response for mobile networks API service call. */
export declare interface MobileNetworkListResult {
    /** A list of mobile networks in a resource group. */
    value?: MobileNetwork[];
    /**
     * The URL to get the next set of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

export declare class MobileNetworkManagementClient extends coreClient.ServiceClient {
    $host: string;
    subscriptionId?: string;
    apiVersion: string;
    /**
     * Initializes a new instance of the MobileNetworkManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription. The value must be an UUID.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: MobileNetworkManagementClientOptionalParams);
    constructor(credentials: coreAuth.TokenCredential, options?: MobileNetworkManagementClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    attachedDataNetworks: AttachedDataNetworks;
    dataNetworks: DataNetworks;
    diagnosticsPackages: DiagnosticsPackages;
    mobileNetworks: MobileNetworks;
    operations: Operations;
    packetCaptures: PacketCaptures;
    packetCoreControlPlanes: PacketCoreControlPlanes;
    packetCoreControlPlaneVersions: PacketCoreControlPlaneVersions;
    packetCoreDataPlanes: PacketCoreDataPlanes;
    services: Services;
    sims: Sims;
    simGroups: SimGroups;
    simPolicies: SimPolicies;
    sites: Sites;
    slices: Slices;
}

/** Optional parameters. */
export declare interface MobileNetworkManagementClientOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** Reference to a mobile network resource. */
export declare interface MobileNetworkResourceId {
    /** Mobile network resource ID. */
    id: string;
}

/** Interface representing a MobileNetworks. */
export declare interface MobileNetworks {
    /**
     * Lists all the mobile networks in a subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: MobileNetworksListBySubscriptionOptionalParams): PagedAsyncIterableIterator<MobileNetwork>;
    /**
     * Lists all the mobile networks in a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: MobileNetworksListByResourceGroupOptionalParams): PagedAsyncIterableIterator<MobileNetwork>;
    /**
     * Deletes the specified mobile network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mobileNetworkName The name of the mobile network.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, mobileNetworkName: string, options?: MobileNetworksDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes the specified mobile network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mobileNetworkName The name of the mobile network.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, mobileNetworkName: string, options?: MobileNetworksDeleteOptionalParams): Promise<void>;
    /**
     * Gets information about the specified mobile network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mobileNetworkName The name of the mobile network.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, mobileNetworkName: string, options?: MobileNetworksGetOptionalParams): Promise<MobileNetworksGetResponse>;
    /**
     * Creates or updates a mobile network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mobileNetworkName The name of the mobile network.
     * @param parameters Parameters supplied to the create or update mobile network operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, mobileNetworkName: string, parameters: MobileNetwork, options?: MobileNetworksCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<MobileNetworksCreateOrUpdateResponse>, MobileNetworksCreateOrUpdateResponse>>;
    /**
     * Creates or updates a mobile network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mobileNetworkName The name of the mobile network.
     * @param parameters Parameters supplied to the create or update mobile network operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, mobileNetworkName: string, parameters: MobileNetwork, options?: MobileNetworksCreateOrUpdateOptionalParams): Promise<MobileNetworksCreateOrUpdateResponse>;
    /**
     * Updates mobile network tags.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mobileNetworkName The name of the mobile network.
     * @param parameters Parameters supplied to update mobile network tags.
     * @param options The options parameters.
     */
    updateTags(resourceGroupName: string, mobileNetworkName: string, parameters: TagsObject, options?: MobileNetworksUpdateTagsOptionalParams): Promise<MobileNetworksUpdateTagsResponse>;
}

/** Optional parameters. */
export declare interface MobileNetworksCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type MobileNetworksCreateOrUpdateResponse = MobileNetwork;

/** Optional parameters. */
export declare interface MobileNetworksDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface MobileNetworksGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type MobileNetworksGetResponse = MobileNetwork;

/** Optional parameters. */
export declare interface MobileNetworksListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type MobileNetworksListByResourceGroupNextResponse = MobileNetworkListResult;

/** Optional parameters. */
export declare interface MobileNetworksListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type MobileNetworksListByResourceGroupResponse = MobileNetworkListResult;

/** Optional parameters. */
export declare interface MobileNetworksListBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionNext operation. */
export declare type MobileNetworksListBySubscriptionNextResponse = MobileNetworkListResult;

/** Optional parameters. */
export declare interface MobileNetworksListBySubscriptionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscription operation. */
export declare type MobileNetworksListBySubscriptionResponse = MobileNetworkListResult;

/** Optional parameters. */
export declare interface MobileNetworksUpdateTagsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the updateTags operation. */
export declare type MobileNetworksUpdateTagsResponse = MobileNetwork;

/** The network address and port translation settings to use for the attached data network. */
export declare interface NaptConfiguration {
    /** Whether NAPT is enabled for connections to this attached data network. */
    enabled?: NaptEnabled;
    /**
     * Range of port numbers to use as translated ports on each translated address.
     * If not specified and NAPT is enabled, this range defaults to 1,024 - 49,999.
     * (Ports under 1,024 should not be used because these are special purpose ports reserved by IANA. Ports 50,000 and above are reserved for non-NAPT use.)
     */
    portRange?: PortRange;
    /** The minimum time (in seconds) that will pass before a port that was used by a closed pinhole can be recycled for use by another pinhole. All hold times must be at least 1 second. */
    portReuseHoldTime?: PortReuseHoldTimes;
    /** Maximum number of UDP and TCP pinholes that can be open simultaneously on the core interface. For 5G networks, this is the N6 interface. For 4G networks, this is the SGi interface. */
    pinholeLimits?: number;
    /** Expiry times of inactive NAPT pinholes, in seconds. All timers must be at least 1 second. */
    pinholeTimeouts?: PinholeTimeouts;
}

/**
 * Defines values for NaptEnabled. \
 * {@link KnownNaptEnabled} can be used interchangeably with NaptEnabled,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled**: NAPT is enabled \
 * **Disabled**: NAPT is disabled
 */
export declare type NaptEnabled = string;

/** Configuration enabling NAS reroute. */
export declare interface NASRerouteConfiguration {
    /** The macro network's MME group ID. This is where unknown UEs are sent to via NAS reroute. */
    macroMmeGroupId: number;
}

/**
 * Defines values for ObsoleteVersion. \
 * {@link KnownObsoleteVersion} can be used interchangeably with ObsoleteVersion,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Obsolete**: This version is obsolete for use in new packet core control plane deployments. \
 * **NotObsolete**: This version is not obsolete for use in new packet core control plane deployments.
 */
export declare type ObsoleteVersion = string;

/** Object that describes a single Microsoft.MobileNetwork operation. */
export declare interface Operation {
    /** Indicates whether the operation applies to data-plane. */
    isDataAction?: boolean;
    /**
     * Operation name: {provider}/{resource}/{operation}
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The object that represents the operation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly display?: OperationDisplay;
}

/** The object that represents the operation. */
export declare interface OperationDisplay {
    /** Service provider: Microsoft.MobileNetwork */
    provider?: string;
    /** Resource on which the operation is performed: Registration definition, registration assignment etc. */
    resource?: string;
    /** Operation type: Read, write, delete, etc. */
    operation?: string;
    /** Description of the operation. */
    description?: string;
}

/** List of the operations. */
export declare interface OperationList {
    /**
     * List of Microsoft.MobileNetwork operations.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: Operation[];
    /**
     * The URL to get the next set of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a Operations. */
export declare interface Operations {
    /**
     * Gets a list of the operations.
     * @param options The options parameters.
     */
    list(options?: OperationsListOptionalParams): PagedAsyncIterableIterator<Operation>;
}

/** Optional parameters. */
export declare interface OperationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type OperationsListNextResponse = OperationList;

/** Optional parameters. */
export declare interface OperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OperationsListResponse = OperationList;

/** Packet capture session resource. */
export declare interface PacketCapture extends ProxyResource {
    /**
     * The provisioning state of the packet capture session resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /**
     * The status of the packet capture session.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: PacketCaptureStatus;
    /**
     * The reason the current packet capture session state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly reason?: string;
    /**
     * The start time of the packet capture session.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly captureStartTime?: Date;
    /** List of network interfaces to capture on. */
    networkInterfaces?: string[];
    /** Number of bytes captured per packet, the remaining bytes are truncated. The default "0" means the entire packet is captured. */
    bytesToCapturePerPacket?: number;
    /** Maximum size of the capture output. */
    totalBytesPerSession?: number;
    /** Maximum duration of the capture session in seconds. */
    timeLimitInSeconds?: number;
    /**
     * The list of output files of a packet capture session.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly outputFiles?: string[];
}

/** Response for packet capture API service call. */
export declare interface PacketCaptureListResult {
    /** A list of packet capture sessions under a packet core control plane. */
    value?: PacketCapture[];
    /**
     * The URL to get the next set of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a PacketCaptures. */
export declare interface PacketCaptures {
    /**
     * Lists all the packet capture sessions under a packet core control plane.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param packetCoreControlPlaneName The name of the packet core control plane.
     * @param options The options parameters.
     */
    listByPacketCoreControlPlane(resourceGroupName: string, packetCoreControlPlaneName: string, options?: PacketCapturesListByPacketCoreControlPlaneOptionalParams): PagedAsyncIterableIterator<PacketCapture>;
    /**
     * Creates or updates a packet capture.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param packetCoreControlPlaneName The name of the packet core control plane.
     * @param packetCaptureName The name of the packet capture session.
     * @param parameters Parameters supplied to the create or update packet capture operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, packetCoreControlPlaneName: string, packetCaptureName: string, parameters: PacketCapture, options?: PacketCapturesCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<PacketCapturesCreateOrUpdateResponse>, PacketCapturesCreateOrUpdateResponse>>;
    /**
     * Creates or updates a packet capture.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param packetCoreControlPlaneName The name of the packet core control plane.
     * @param packetCaptureName The name of the packet capture session.
     * @param parameters Parameters supplied to the create or update packet capture operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, packetCoreControlPlaneName: string, packetCaptureName: string, parameters: PacketCapture, options?: PacketCapturesCreateOrUpdateOptionalParams): Promise<PacketCapturesCreateOrUpdateResponse>;
    /**
     * Gets information about the specified packet capture session.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param packetCoreControlPlaneName The name of the packet core control plane.
     * @param packetCaptureName The name of the packet capture session.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, packetCoreControlPlaneName: string, packetCaptureName: string, options?: PacketCapturesGetOptionalParams): Promise<PacketCapturesGetResponse>;
    /**
     * Deletes the specified packet capture.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param packetCoreControlPlaneName The name of the packet core control plane.
     * @param packetCaptureName The name of the packet capture session.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, packetCoreControlPlaneName: string, packetCaptureName: string, options?: PacketCapturesDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes the specified packet capture.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param packetCoreControlPlaneName The name of the packet core control plane.
     * @param packetCaptureName The name of the packet capture session.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, packetCoreControlPlaneName: string, packetCaptureName: string, options?: PacketCapturesDeleteOptionalParams): Promise<void>;
    /**
     * Stop a packet capture session.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param packetCoreControlPlaneName The name of the packet core control plane.
     * @param packetCaptureName The name of the packet capture session.
     * @param options The options parameters.
     */
    beginStop(resourceGroupName: string, packetCoreControlPlaneName: string, packetCaptureName: string, options?: PacketCapturesStopOptionalParams): Promise<SimplePollerLike<OperationState<PacketCapturesStopResponse>, PacketCapturesStopResponse>>;
    /**
     * Stop a packet capture session.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param packetCoreControlPlaneName The name of the packet core control plane.
     * @param packetCaptureName The name of the packet capture session.
     * @param options The options parameters.
     */
    beginStopAndWait(resourceGroupName: string, packetCoreControlPlaneName: string, packetCaptureName: string, options?: PacketCapturesStopOptionalParams): Promise<PacketCapturesStopResponse>;
}

/** Optional parameters. */
export declare interface PacketCapturesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type PacketCapturesCreateOrUpdateResponse = PacketCapture;

/** Optional parameters. */
export declare interface PacketCapturesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface PacketCapturesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type PacketCapturesGetResponse = PacketCapture;

/** Optional parameters. */
export declare interface PacketCapturesListByPacketCoreControlPlaneNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByPacketCoreControlPlaneNext operation. */
export declare type PacketCapturesListByPacketCoreControlPlaneNextResponse = PacketCaptureListResult;

/** Optional parameters. */
export declare interface PacketCapturesListByPacketCoreControlPlaneOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByPacketCoreControlPlane operation. */
export declare type PacketCapturesListByPacketCoreControlPlaneResponse = PacketCaptureListResult;

/** Optional parameters. */
export declare interface PacketCapturesStopOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the stop operation. */
export declare type PacketCapturesStopResponse = AsyncOperationStatus;

/**
 * Defines values for PacketCaptureStatus. \
 * {@link KnownPacketCaptureStatus} can be used interchangeably with PacketCaptureStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotStarted** \
 * **Running** \
 * **Stopped** \
 * **Error**
 */
export declare type PacketCaptureStatus = string;

/** Packet core control plane resource. */
export declare interface PacketCoreControlPlane extends TrackedResource {
    /** The identity used to retrieve the ingress certificate from Azure key vault. */
    identity?: ManagedServiceIdentity;
    /**
     * The provisioning state of the packet core control plane resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /** The installation state of the packet core control plane resource. */
    installation?: Installation;
    /** Site(s) under which this packet core control plane should be deployed. The sites must be in the same location as the packet core control plane. */
    sites: SiteResourceId[];
    /** The platform where the packet core is deployed. */
    platform: PlatformConfiguration;
    /** The core network technology generation (5G core or EPC / 4G core). */
    coreNetworkTechnology?: CoreNetworkType;
    /** The desired version of the packet core software. */
    version?: string;
    /**
     * The currently installed version of the packet core software.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly installedVersion?: string;
    /**
     * The previous version of the packet core software that was deployed. Used when performing the rollback action.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly rollbackVersion?: string;
    /** The control plane interface on the access network. For 5G networks, this is the N2 interface. For 4G networks, this is the S1-MME interface. */
    controlPlaneAccessInterface: InterfaceProperties;
    /** The virtual IP address(es) for the control plane on the access network in a High Availability (HA) system. In an HA deployment the access network router should be configured to anycast traffic for this address to the control plane access interfaces on the active and standby nodes. In non-HA system this list should be omitted or empty. */
    controlPlaneAccessVirtualIpv4Addresses?: string[];
    /** The SKU defining the throughput and SIM allowances for this packet core control plane deployment. */
    sku: BillingSku;
    /** The MTU (in bytes) signaled to the UE. The same MTU is set on the user plane data links for all data networks. The MTU set on the user plane access link is calculated to be 60 bytes greater than this value to allow for GTP encapsulation. */
    ueMtu?: number;
    /** The kubernetes ingress configuration to control access to packet core diagnostics over local APIs. */
    localDiagnosticsAccess: LocalDiagnosticsAccessConfiguration;
    /** Configuration for uploading packet core diagnostics */
    diagnosticsUpload?: DiagnosticsUploadConfiguration;
    /** Configuration for sending packet core events to an Azure Event Hub. */
    eventHub?: EventHubConfiguration;
    /** Signaling configuration for the packet core. */
    signaling?: SignalingConfiguration;
    /** Settings to allow interoperability with third party components e.g. RANs and UEs. */
    interopSettings?: Record<string, unknown>;
}

/** Packet core control plane collect diagnostics package options */
export declare interface PacketCoreControlPlaneCollectDiagnosticsPackage {
    /** The Storage Account Blob URL to upload the diagnostics package to. */
    storageAccountBlobUrl: string;
}

/** Response for packet core control planes API service call. */
export declare interface PacketCoreControlPlaneListResult {
    /** A list of packet core control planes in a resource group. */
    value?: PacketCoreControlPlane[];
    /**
     * The URL to get the next set of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Reference to an packet core control plane resource. */
export declare interface PacketCoreControlPlaneResourceId {
    /** Packet core control plane resource ID. */
    id: string;
}

/** Interface representing a PacketCoreControlPlanes. */
export declare interface PacketCoreControlPlanes {
    /**
     * Lists all the packet core control planes in a subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: PacketCoreControlPlanesListBySubscriptionOptionalParams): PagedAsyncIterableIterator<PacketCoreControlPlane>;
    /**
     * Lists all the packet core control planes in a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: PacketCoreControlPlanesListByResourceGroupOptionalParams): PagedAsyncIterableIterator<PacketCoreControlPlane>;
    /**
     * Deletes the specified packet core control plane.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param packetCoreControlPlaneName The name of the packet core control plane.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, packetCoreControlPlaneName: string, options?: PacketCoreControlPlanesDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes the specified packet core control plane.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param packetCoreControlPlaneName The name of the packet core control plane.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, packetCoreControlPlaneName: string, options?: PacketCoreControlPlanesDeleteOptionalParams): Promise<void>;
    /**
     * Gets information about the specified packet core control plane.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param packetCoreControlPlaneName The name of the packet core control plane.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, packetCoreControlPlaneName: string, options?: PacketCoreControlPlanesGetOptionalParams): Promise<PacketCoreControlPlanesGetResponse>;
    /**
     * Creates or updates a packet core control plane.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param packetCoreControlPlaneName The name of the packet core control plane.
     * @param parameters Parameters supplied to the create or update packet core control plane operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, packetCoreControlPlaneName: string, parameters: PacketCoreControlPlane, options?: PacketCoreControlPlanesCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<PacketCoreControlPlanesCreateOrUpdateResponse>, PacketCoreControlPlanesCreateOrUpdateResponse>>;
    /**
     * Creates or updates a packet core control plane.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param packetCoreControlPlaneName The name of the packet core control plane.
     * @param parameters Parameters supplied to the create or update packet core control plane operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, packetCoreControlPlaneName: string, parameters: PacketCoreControlPlane, options?: PacketCoreControlPlanesCreateOrUpdateOptionalParams): Promise<PacketCoreControlPlanesCreateOrUpdateResponse>;
    /**
     * Patch packet core control plane resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param packetCoreControlPlaneName The name of the packet core control plane.
     * @param parameters Parameters supplied to patch packet core control plane resource.
     * @param options The options parameters.
     */
    updateTags(resourceGroupName: string, packetCoreControlPlaneName: string, parameters: IdentityAndTagsObject, options?: PacketCoreControlPlanesUpdateTagsOptionalParams): Promise<PacketCoreControlPlanesUpdateTagsResponse>;
    /**
     * Roll back the specified packet core control plane to the previous version, "rollbackVersion".
     * Multiple consecutive rollbacks are not possible. This action may cause a service outage.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param packetCoreControlPlaneName The name of the packet core control plane.
     * @param options The options parameters.
     */
    beginRollback(resourceGroupName: string, packetCoreControlPlaneName: string, options?: PacketCoreControlPlanesRollbackOptionalParams): Promise<SimplePollerLike<OperationState<PacketCoreControlPlanesRollbackResponse>, PacketCoreControlPlanesRollbackResponse>>;
    /**
     * Roll back the specified packet core control plane to the previous version, "rollbackVersion".
     * Multiple consecutive rollbacks are not possible. This action may cause a service outage.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param packetCoreControlPlaneName The name of the packet core control plane.
     * @param options The options parameters.
     */
    beginRollbackAndWait(resourceGroupName: string, packetCoreControlPlaneName: string, options?: PacketCoreControlPlanesRollbackOptionalParams): Promise<PacketCoreControlPlanesRollbackResponse>;
    /**
     * Reinstall the specified packet core control plane. This action will remove any transaction state
     * from the packet core to return it to a known state. This action will cause a service outage.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param packetCoreControlPlaneName The name of the packet core control plane.
     * @param options The options parameters.
     */
    beginReinstall(resourceGroupName: string, packetCoreControlPlaneName: string, options?: PacketCoreControlPlanesReinstallOptionalParams): Promise<SimplePollerLike<OperationState<PacketCoreControlPlanesReinstallResponse>, PacketCoreControlPlanesReinstallResponse>>;
    /**
     * Reinstall the specified packet core control plane. This action will remove any transaction state
     * from the packet core to return it to a known state. This action will cause a service outage.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param packetCoreControlPlaneName The name of the packet core control plane.
     * @param options The options parameters.
     */
    beginReinstallAndWait(resourceGroupName: string, packetCoreControlPlaneName: string, options?: PacketCoreControlPlanesReinstallOptionalParams): Promise<PacketCoreControlPlanesReinstallResponse>;
    /**
     * Collect a diagnostics package for the specified packet core control plane. This action will upload
     * the diagnostics to a storage account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param packetCoreControlPlaneName The name of the packet core control plane.
     * @param parameters Parameters supplied to the packet core control plane collect diagnostics package
     *                   operation.
     * @param options The options parameters.
     */
    beginCollectDiagnosticsPackage(resourceGroupName: string, packetCoreControlPlaneName: string, parameters: PacketCoreControlPlaneCollectDiagnosticsPackage, options?: PacketCoreControlPlanesCollectDiagnosticsPackageOptionalParams): Promise<SimplePollerLike<OperationState<PacketCoreControlPlanesCollectDiagnosticsPackageResponse>, PacketCoreControlPlanesCollectDiagnosticsPackageResponse>>;
    /**
     * Collect a diagnostics package for the specified packet core control plane. This action will upload
     * the diagnostics to a storage account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param packetCoreControlPlaneName The name of the packet core control plane.
     * @param parameters Parameters supplied to the packet core control plane collect diagnostics package
     *                   operation.
     * @param options The options parameters.
     */
    beginCollectDiagnosticsPackageAndWait(resourceGroupName: string, packetCoreControlPlaneName: string, parameters: PacketCoreControlPlaneCollectDiagnosticsPackage, options?: PacketCoreControlPlanesCollectDiagnosticsPackageOptionalParams): Promise<PacketCoreControlPlanesCollectDiagnosticsPackageResponse>;
}

/** Optional parameters. */
export declare interface PacketCoreControlPlanesCollectDiagnosticsPackageOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the collectDiagnosticsPackage operation. */
export declare type PacketCoreControlPlanesCollectDiagnosticsPackageResponse = AsyncOperationStatus;

/** Optional parameters. */
export declare interface PacketCoreControlPlanesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type PacketCoreControlPlanesCreateOrUpdateResponse = PacketCoreControlPlane;

/** Optional parameters. */
export declare interface PacketCoreControlPlanesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface PacketCoreControlPlanesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type PacketCoreControlPlanesGetResponse = PacketCoreControlPlane;

/** Optional parameters. */
export declare interface PacketCoreControlPlanesListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type PacketCoreControlPlanesListByResourceGroupNextResponse = PacketCoreControlPlaneListResult;

/** Optional parameters. */
export declare interface PacketCoreControlPlanesListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type PacketCoreControlPlanesListByResourceGroupResponse = PacketCoreControlPlaneListResult;

/** Optional parameters. */
export declare interface PacketCoreControlPlanesListBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionNext operation. */
export declare type PacketCoreControlPlanesListBySubscriptionNextResponse = PacketCoreControlPlaneListResult;

/** Optional parameters. */
export declare interface PacketCoreControlPlanesListBySubscriptionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscription operation. */
export declare type PacketCoreControlPlanesListBySubscriptionResponse = PacketCoreControlPlaneListResult;

/** Optional parameters. */
export declare interface PacketCoreControlPlanesReinstallOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the reinstall operation. */
export declare type PacketCoreControlPlanesReinstallResponse = AsyncOperationStatus;

/** Optional parameters. */
export declare interface PacketCoreControlPlanesRollbackOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the rollback operation. */
export declare type PacketCoreControlPlanesRollbackResponse = AsyncOperationStatus;

/** Optional parameters. */
export declare interface PacketCoreControlPlanesUpdateTagsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the updateTags operation. */
export declare type PacketCoreControlPlanesUpdateTagsResponse = PacketCoreControlPlane;

/** Packet core control plane version resource. */
export declare interface PacketCoreControlPlaneVersion extends ProxyResource {
    /**
     * The provisioning state of the packet core control plane version resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /** Platform specific packet core control plane version properties. */
    platforms?: Platform[];
}

/** Response for packet core control plane version API service call. */
export declare interface PacketCoreControlPlaneVersionListResult {
    /** A list of supported packet core control plane versions. */
    value?: PacketCoreControlPlaneVersion[];
    /**
     * The URL to get the next set of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a PacketCoreControlPlaneVersions. */
export declare interface PacketCoreControlPlaneVersions {
    /**
     * Lists all supported packet core control planes versions.
     * @param options The options parameters.
     */
    list(options?: PacketCoreControlPlaneVersionsListOptionalParams): PagedAsyncIterableIterator<PacketCoreControlPlaneVersion>;
    /**
     * Lists all supported packet core control planes versions.
     * @param options The options parameters.
     */
    listBySubscription(options?: PacketCoreControlPlaneVersionsListBySubscriptionOptionalParams): PagedAsyncIterableIterator<PacketCoreControlPlaneVersion>;
    /**
     * Gets information about the specified packet core control plane version.
     * @param versionName The name of the packet core control plane version.
     * @param options The options parameters.
     */
    get(versionName: string, options?: PacketCoreControlPlaneVersionsGetOptionalParams): Promise<PacketCoreControlPlaneVersionsGetResponse>;
    /**
     * Gets information about the specified packet core control plane version.
     * @param versionName The name of the packet core control plane version.
     * @param options The options parameters.
     */
    getBySubscription(versionName: string, options?: PacketCoreControlPlaneVersionsGetBySubscriptionOptionalParams): Promise<PacketCoreControlPlaneVersionsGetBySubscriptionResponse>;
}

/** Optional parameters. */
export declare interface PacketCoreControlPlaneVersionsGetBySubscriptionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getBySubscription operation. */
export declare type PacketCoreControlPlaneVersionsGetBySubscriptionResponse = PacketCoreControlPlaneVersion;

/** Optional parameters. */
export declare interface PacketCoreControlPlaneVersionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type PacketCoreControlPlaneVersionsGetResponse = PacketCoreControlPlaneVersion;

/** Optional parameters. */
export declare interface PacketCoreControlPlaneVersionsListBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionNext operation. */
export declare type PacketCoreControlPlaneVersionsListBySubscriptionNextResponse = PacketCoreControlPlaneVersionListResult;

/** Optional parameters. */
export declare interface PacketCoreControlPlaneVersionsListBySubscriptionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscription operation. */
export declare type PacketCoreControlPlaneVersionsListBySubscriptionResponse = PacketCoreControlPlaneVersionListResult;

/** Optional parameters. */
export declare interface PacketCoreControlPlaneVersionsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type PacketCoreControlPlaneVersionsListNextResponse = PacketCoreControlPlaneVersionListResult;

/** Optional parameters. */
export declare interface PacketCoreControlPlaneVersionsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type PacketCoreControlPlaneVersionsListResponse = PacketCoreControlPlaneVersionListResult;

/** Packet core data plane resource. Must be created in the same location as its parent packet core control plane. */
export declare interface PacketCoreDataPlane extends TrackedResource {
    /**
     * The provisioning state of the packet core data plane resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /** The user plane interface on the access network. For 5G networks, this is the N3 interface. For 4G networks, this is the S1-U interface. */
    userPlaneAccessInterface: InterfaceProperties;
    /** The virtual IP address(es) for the user plane on the access network in a High Availability (HA) system. In an HA deployment the access network router should be configured to forward traffic for this address to the control plane access interface on the active or standby node. In non-HA system this list should be omitted or empty. */
    userPlaneAccessVirtualIpv4Addresses?: string[];
}

/** Response for packet core data planes API service call. */
export declare interface PacketCoreDataPlaneListResult {
    /** A list of packet core data planes in a resource group. */
    value?: PacketCoreDataPlane[];
    /**
     * The URL to get the next set of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a PacketCoreDataPlanes. */
export declare interface PacketCoreDataPlanes {
    /**
     * Lists all the packet core data planes associated with a packet core control plane.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param packetCoreControlPlaneName The name of the packet core control plane.
     * @param options The options parameters.
     */
    listByPacketCoreControlPlane(resourceGroupName: string, packetCoreControlPlaneName: string, options?: PacketCoreDataPlanesListByPacketCoreControlPlaneOptionalParams): PagedAsyncIterableIterator<PacketCoreDataPlane>;
    /**
     * Deletes the specified packet core data plane.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param packetCoreControlPlaneName The name of the packet core control plane.
     * @param packetCoreDataPlaneName The name of the packet core data plane.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, packetCoreControlPlaneName: string, packetCoreDataPlaneName: string, options?: PacketCoreDataPlanesDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes the specified packet core data plane.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param packetCoreControlPlaneName The name of the packet core control plane.
     * @param packetCoreDataPlaneName The name of the packet core data plane.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, packetCoreControlPlaneName: string, packetCoreDataPlaneName: string, options?: PacketCoreDataPlanesDeleteOptionalParams): Promise<void>;
    /**
     * Gets information about the specified packet core data plane.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param packetCoreControlPlaneName The name of the packet core control plane.
     * @param packetCoreDataPlaneName The name of the packet core data plane.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, packetCoreControlPlaneName: string, packetCoreDataPlaneName: string, options?: PacketCoreDataPlanesGetOptionalParams): Promise<PacketCoreDataPlanesGetResponse>;
    /**
     * Creates or updates a packet core data plane. Must be created in the same location as its parent
     * packet core control plane.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param packetCoreControlPlaneName The name of the packet core control plane.
     * @param packetCoreDataPlaneName The name of the packet core data plane.
     * @param parameters Parameters supplied to the create or update packet core data plane operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, packetCoreControlPlaneName: string, packetCoreDataPlaneName: string, parameters: PacketCoreDataPlane, options?: PacketCoreDataPlanesCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<PacketCoreDataPlanesCreateOrUpdateResponse>, PacketCoreDataPlanesCreateOrUpdateResponse>>;
    /**
     * Creates or updates a packet core data plane. Must be created in the same location as its parent
     * packet core control plane.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param packetCoreControlPlaneName The name of the packet core control plane.
     * @param packetCoreDataPlaneName The name of the packet core data plane.
     * @param parameters Parameters supplied to the create or update packet core data plane operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, packetCoreControlPlaneName: string, packetCoreDataPlaneName: string, parameters: PacketCoreDataPlane, options?: PacketCoreDataPlanesCreateOrUpdateOptionalParams): Promise<PacketCoreDataPlanesCreateOrUpdateResponse>;
    /**
     * Updates packet core data planes tags.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param packetCoreControlPlaneName The name of the packet core control plane.
     * @param packetCoreDataPlaneName The name of the packet core data plane.
     * @param parameters Parameters supplied to update packet core data plane tags.
     * @param options The options parameters.
     */
    updateTags(resourceGroupName: string, packetCoreControlPlaneName: string, packetCoreDataPlaneName: string, parameters: TagsObject, options?: PacketCoreDataPlanesUpdateTagsOptionalParams): Promise<PacketCoreDataPlanesUpdateTagsResponse>;
}

/** Optional parameters. */
export declare interface PacketCoreDataPlanesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type PacketCoreDataPlanesCreateOrUpdateResponse = PacketCoreDataPlane;

/** Optional parameters. */
export declare interface PacketCoreDataPlanesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface PacketCoreDataPlanesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type PacketCoreDataPlanesGetResponse = PacketCoreDataPlane;

/** Optional parameters. */
export declare interface PacketCoreDataPlanesListByPacketCoreControlPlaneNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByPacketCoreControlPlaneNext operation. */
export declare type PacketCoreDataPlanesListByPacketCoreControlPlaneNextResponse = PacketCoreDataPlaneListResult;

/** Optional parameters. */
export declare interface PacketCoreDataPlanesListByPacketCoreControlPlaneOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByPacketCoreControlPlane operation. */
export declare type PacketCoreDataPlanesListByPacketCoreControlPlaneResponse = PacketCoreDataPlaneListResult;

/** Optional parameters. */
export declare interface PacketCoreDataPlanesUpdateTagsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the updateTags operation. */
export declare type PacketCoreDataPlanesUpdateTagsResponse = PacketCoreDataPlane;

/** Data flow policy rule configuration */
export declare interface PccRuleConfiguration {
    /** The name of the rule. This must be unique within the parent service. You must not use any of the following reserved strings - `default`, `requested` or `service`. */
    ruleName: string;
    /** A precedence value that is used to decide between data flow policy rules when identifying the QoS values to use for a particular SIM. A lower value means a higher priority. This value should be unique among all data flow policy rules configured in the mobile network. */
    rulePrecedence: number;
    /** The QoS policy to use for packets matching this rule. If this field is null then the parent service will define the QoS settings. */
    ruleQosPolicy?: PccRuleQosPolicy;
    /** Determines whether flows that match this data flow policy rule are permitted. */
    trafficControl?: TrafficControlPermission;
    /** The set of data flow templates to use for this data flow policy rule. */
    serviceDataFlowTemplates: ServiceDataFlowTemplate[];
}

/** Data flow policy rule QoS policy */
export declare interface PccRuleQosPolicy extends QosPolicy {
    /** The guaranteed bit rate (GBR) for all service data flows that use this data flow policy rule. This is an optional setting. If you do not provide a value, there will be no GBR set for the data flow policy rule that uses this QoS definition. */
    guaranteedBitRate?: Ambr;
}

/**
 * Defines values for PduSessionType. \
 * {@link KnownPduSessionType} can be used interchangeably with PduSessionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **IPv4** \
 * **IPv6**
 */
export declare type PduSessionType = string;

/** Expiry times of inactive NAPT pinholes, in seconds. All timers must be at least 1 second. */
export declare interface PinholeTimeouts {
    /** Pinhole timeout for TCP pinholes in seconds. Default for TCP is 3 minutes. */
    tcp?: number;
    /** Pinhole timeout for UDP pinholes in seconds. Default for UDP is 30 seconds. */
    udp?: number;
    /** Pinhole timeout for ICMP pinholes in seconds. Default for ICMP Echo is 30 seconds. */
    icmp?: number;
}

/** Platform specific packet core control plane version properties. */
export declare interface Platform {
    /** The platform type where this version can be deployed. */
    platformType?: PlatformType;
    /** The state of this packet core control plane version on this platform. */
    versionState?: VersionState;
    /** The minimum software version of the platform where this packet core version can be deployed. */
    minimumPlatformSoftwareVersion?: string;
    /** The maximum software version of the platform where this packet core version can be deployed. */
    maximumPlatformSoftwareVersion?: string;
    /** Indicates whether this is the recommended version for this platform. */
    recommendedVersion?: RecommendedVersion;
    /** Indicates whether this version is obsoleted for this platform. */
    obsoleteVersion?: ObsoleteVersion;
}

/** The platform where the packet core is deployed. */
export declare interface PlatformConfiguration {
    /** The platform type where packet core is deployed. */
    type: PlatformType;
    /** The Azure Stack Edge device where the packet core is deployed. If the device is part of a fault tolerant pair, either device in the pair can be specified. */
    azureStackEdgeDevice?: AzureStackEdgeDeviceResourceId;
    /**
     * The Azure Stack Edge devices where the packet core is deployed. If the packet core is deployed across multiple devices, all devices will appear in this list.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly azureStackEdgeDevices?: AzureStackEdgeDeviceResourceId[];
    /** The Azure Stack HCI cluster where the packet core is deployed. */
    azureStackHciCluster?: AzureStackHCIClusterResourceId;
    /** Azure Arc connected cluster where the packet core is deployed. */
    connectedCluster?: ConnectedClusterResourceId;
    /** Azure Arc custom location where the packet core is deployed. */
    customLocation?: CustomLocationResourceId;
}

/**
 * Defines values for PlatformType. \
 * {@link KnownPlatformType} can be used interchangeably with PlatformType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AKS-HCI**: If this option is chosen, you must set one of "azureStackEdgeDevice", "connectedCluster" or "customLocation". If multiple are set, they must be consistent with each other. \
 * **3P-AZURE-STACK-HCI**: If this option is chosen, you must set one of "azureStackHciCluster", "connectedCluster" or "customLocation". If multiple are set, they must be consistent with each other.
 */
export declare type PlatformType = string;

/** Public land mobile network (PLMN) ID. */
export declare interface PlmnId {
    /** Mobile country code (MCC). */
    mcc: string;
    /** Mobile network code (MNC). */
    mnc: string;
}

/**
 * Range of port numbers to use as translated ports on each translated address.
 * If not specified and NAPT is enabled, this range defaults to 1,024 - 49,999.
 * (Ports under 1,024 should not be used because these are special purpose ports reserved by IANA. Ports 50,000 and above are reserved for non-NAPT use.)
 */
export declare interface PortRange {
    /** The minimum port number */
    minPort?: number;
    /** The maximum port number */
    maxPort?: number;
}

/** The minimum time (in seconds) that will pass before a port that was used by a closed pinhole can be recycled for use by another pinhole. All hold times must be minimum 1 second. */
export declare interface PortReuseHoldTimes {
    /** Minimum time in seconds that will pass before a TCP port that was used by a closed pinhole can be reused. Default for TCP is 2 minutes. */
    tcp?: number;
    /** Minimum time in seconds that will pass before a UDP port that was used by a closed pinhole can be reused. Default for UDP is 1 minute. */
    udp?: number;
}

/**
 * Defines values for PreemptionCapability. \
 * {@link KnownPreemptionCapability} can be used interchangeably with PreemptionCapability,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotPreempt**: Cannot preempt \
 * **MayPreempt**: May preempt
 */
export declare type PreemptionCapability = string;

/**
 * Defines values for PreemptionVulnerability. \
 * {@link KnownPreemptionVulnerability} can be used interchangeably with PreemptionVulnerability,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotPreemptable**: Cannot be preempted \
 * **Preemptable**: May be preempted
 */
export declare type PreemptionVulnerability = string;

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **Succeeded** \
 * **Accepted** \
 * **Deleting** \
 * **Failed** \
 * **Canceled** \
 * **Deleted**
 */
export declare type ProvisioningState = string;

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export declare interface ProxyResource extends Resource {
}

/** QoS policy */
export declare interface QosPolicy {
    /** 5G QoS Flow Indicator value. The 5QI identifies a specific QoS forwarding treatment to be provided to a flow. See 3GPP TS23.501 section 5.7.2.1 for a full description of the 5QI parameter, and table 5.7.4-1 for the definition the 5QI values. */
    fiveQi?: number;
    /** QoS Flow allocation and retention priority (ARP) level. Flows with higher priority preempt flows with lower priority, if the settings of `preemptionCapability` and `preemptionVulnerability` allow it. 1 is the highest level of priority. If this field is not specified then `5qi` is used to derive the ARP value. See 3GPP TS23.501 section 5.7.2.2 for a full description of the ARP parameters. */
    allocationAndRetentionPriorityLevel?: number;
    /** QoS Flow preemption capability. The preemption capability of a QoS Flow controls whether it can preempt another QoS Flow with a lower priority level. See 3GPP TS23.501 section 5.7.2.2 for a full description of the ARP parameters. */
    preemptionCapability?: PreemptionCapability;
    /** QoS Flow preemption vulnerability. The preemption vulnerability of a QoS Flow controls whether it can be preempted by a QoS Flow with a higher priority level. See 3GPP TS23.501 section 5.7.2.2 for a full description of the ARP parameters. */
    preemptionVulnerability?: PreemptionVulnerability;
    /** The maximum bit rate (MBR) for all service data flows that use this data flow policy rule or service. */
    maximumBitRate: Ambr;
}

/**
 * Defines values for RecommendedVersion. \
 * {@link KnownRecommendedVersion} can be used interchangeably with RecommendedVersion,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Recommended**: This is the recommended version to use for new packet core control plane deployments. \
 * **NotRecommended**: This is not the recommended version to use for new packet core control plane deployments.
 */
export declare type RecommendedVersion = string;

/**
 * Defines values for ReinstallRequired. \
 * {@link KnownReinstallRequired} can be used interchangeably with ReinstallRequired,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Required**: A reinstall of the packet core is required. \
 * **NotRequired**: A reinstall of the packet core is not required.
 */
export declare type ReinstallRequired = string;

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export declare interface Resource {
    /**
     * Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
}

/**
 * Defines values for SdfDirection. \
 * {@link KnownSdfDirection} can be used interchangeably with SdfDirection,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Uplink**: Traffic flowing from the UE to the data network. \
 * **Downlink**: Traffic flowing from the data network to the UE. \
 * **Bidirectional**: Traffic flowing both to and from the UE.
 */
export declare type SdfDirection = string;

/** Service resource. Must be created in the same location as its parent mobile network. */
export declare interface Service extends TrackedResource {
    /**
     * The provisioning state of the service resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /** A precedence value that is used to decide between services when identifying the QoS values to use for a particular SIM. A lower value means a higher priority. This value should be unique among all services configured in the mobile network. */
    servicePrecedence: number;
    /** The QoS policy to use for packets matching this service. This can be overridden for particular flows using the ruleQosPolicy field in a PccRuleConfiguration. If this field is null then the UE's SIM policy will define the QoS settings. */
    serviceQosPolicy?: QosPolicy;
    /** The set of data flow policy rules that make up this service. */
    pccRules: PccRuleConfiguration[];
}

/** Data flow template */
export declare interface ServiceDataFlowTemplate {
    /** The name of the data flow template. This must be unique within the parent data flow policy rule. You must not use any of the following reserved strings - `default`, `requested` or `service`. */
    templateName: string;
    /** The direction of this flow. */
    direction: SdfDirection;
    /** A list of the allowed protocol(s) for this flow. If you want this flow to be able to use any protocol within the internet protocol suite, use the value `ip`. If you only want to allow a selection of protocols, you must use the corresponding IANA Assigned Internet Protocol Number for each protocol, as described in https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml. For example, for UDP, you must use 17. If you use the value `ip` then you must leave the field `port` unspecified. */
    protocol: string[];
    /** The remote IP address(es) to which UEs will connect for this flow. If you want to allow connections on any IP address, use the value `any`. Otherwise, you must provide each of the remote IP addresses to which the packet core instance will connect for this flow. You must provide each IP address in CIDR notation, including the netmask (for example, 192.0.2.54/24). */
    remoteIpList: string[];
    /** The port(s) to which UEs will connect for this flow. You can specify zero or more ports or port ranges. If you specify one or more ports or port ranges then you must specify a value other than `ip` in the `protocol` field. This is an optional setting. If you do not specify it then connections will be allowed on all ports. Port ranges must be specified as <FirstPort>-<LastPort>. For example: [`8080`, `8082-8085`]. */
    ports?: string[];
}

/** Response for services API service call. */
export declare interface ServiceListResult {
    /** A list of services. */
    value?: Service[];
    /**
     * The URL to get the next set of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Reference to a service resource. */
export declare interface ServiceResourceId {
    /** Service resource ID. */
    id: string;
}

/** Interface representing a Services. */
export declare interface Services {
    /**
     * Gets all the services in a mobile network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mobileNetworkName The name of the mobile network.
     * @param options The options parameters.
     */
    listByMobileNetwork(resourceGroupName: string, mobileNetworkName: string, options?: ServicesListByMobileNetworkOptionalParams): PagedAsyncIterableIterator<Service>;
    /**
     * Deletes the specified service.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mobileNetworkName The name of the mobile network.
     * @param serviceName The name of the service. You must not use any of the following reserved strings -
     *                    `default`, `requested` or `service`
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, mobileNetworkName: string, serviceName: string, options?: ServicesDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes the specified service.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mobileNetworkName The name of the mobile network.
     * @param serviceName The name of the service. You must not use any of the following reserved strings -
     *                    `default`, `requested` or `service`
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, mobileNetworkName: string, serviceName: string, options?: ServicesDeleteOptionalParams): Promise<void>;
    /**
     * Gets information about the specified service.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mobileNetworkName The name of the mobile network.
     * @param serviceName The name of the service. You must not use any of the following reserved strings -
     *                    `default`, `requested` or `service`
     * @param options The options parameters.
     */
    get(resourceGroupName: string, mobileNetworkName: string, serviceName: string, options?: ServicesGetOptionalParams): Promise<ServicesGetResponse>;
    /**
     * Creates or updates a service. Must be created in the same location as its parent mobile network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mobileNetworkName The name of the mobile network.
     * @param serviceName The name of the service. You must not use any of the following reserved strings -
     *                    `default`, `requested` or `service`
     * @param parameters Parameters supplied to the create or update service operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, mobileNetworkName: string, serviceName: string, parameters: Service, options?: ServicesCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<ServicesCreateOrUpdateResponse>, ServicesCreateOrUpdateResponse>>;
    /**
     * Creates or updates a service. Must be created in the same location as its parent mobile network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mobileNetworkName The name of the mobile network.
     * @param serviceName The name of the service. You must not use any of the following reserved strings -
     *                    `default`, `requested` or `service`
     * @param parameters Parameters supplied to the create or update service operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, mobileNetworkName: string, serviceName: string, parameters: Service, options?: ServicesCreateOrUpdateOptionalParams): Promise<ServicesCreateOrUpdateResponse>;
    /**
     * Updates service tags.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mobileNetworkName The name of the mobile network.
     * @param serviceName The name of the service. You must not use any of the following reserved strings -
     *                    `default`, `requested` or `service`
     * @param parameters Parameters supplied to update service tags.
     * @param options The options parameters.
     */
    updateTags(resourceGroupName: string, mobileNetworkName: string, serviceName: string, parameters: TagsObject, options?: ServicesUpdateTagsOptionalParams): Promise<ServicesUpdateTagsResponse>;
}

/** Optional parameters. */
export declare interface ServicesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type ServicesCreateOrUpdateResponse = Service;

/** Optional parameters. */
export declare interface ServicesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface ServicesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ServicesGetResponse = Service;

/** Optional parameters. */
export declare interface ServicesListByMobileNetworkNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByMobileNetworkNext operation. */
export declare type ServicesListByMobileNetworkNextResponse = ServiceListResult;

/** Optional parameters. */
export declare interface ServicesListByMobileNetworkOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByMobileNetwork operation. */
export declare type ServicesListByMobileNetworkResponse = ServiceListResult;

/** Optional parameters. */
export declare interface ServicesUpdateTagsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the updateTags operation. */
export declare type ServicesUpdateTagsResponse = Service;

/** Signaling configuration for the packet core. */
export declare interface SignalingConfiguration {
    /** Configuration enabling 4G NAS reroute. */
    nasReroute?: NASRerouteConfiguration;
}

/** SIM resource. */
export declare interface Sim extends ProxyResource {
    /**
     * The provisioning state of the SIM resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /**
     * The state of the SIM resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly simState?: SimState;
    /**
     * A dictionary of sites to the provisioning state of this SIM on that site.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly siteProvisioningState?: {
        [propertyName: string]: SiteProvisioningState;
    };
    /** The international mobile subscriber identity (IMSI) for the SIM. */
    internationalMobileSubscriberIdentity: string;
    /** The integrated circuit card ID (ICCID) for the SIM. */
    integratedCircuitCardIdentifier?: string;
    /** An optional free-form text field that can be used to record the device type this SIM is associated with, for example 'Video camera'. The Azure portal allows SIMs to be grouped and filtered based on this value. */
    deviceType?: string;
    /** The SIM policy used by this SIM. The SIM policy must be in the same location as the SIM. */
    simPolicy?: SimPolicyResourceId;
    /** A list of static IP addresses assigned to this SIM. Each address is assigned at a defined network scope, made up of {attached data network, slice}. */
    staticIpConfiguration?: SimStaticIpProperties[];
    /**
     * The name of the SIM vendor who provided this SIM, if any.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly vendorName?: string;
    /**
     * The public key fingerprint of the SIM vendor who provided this SIM, if any.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly vendorKeyFingerprint?: string;
    /** The Ki value for the SIM. */
    authenticationKey?: string;
    /** The Opc value for the SIM. */
    operatorKeyCode?: string;
}

/** The SIMs to delete. */
export declare interface SimDeleteList {
    /** A list of SIM resource names to delete. */
    sims: string[];
}

/** SIM group resource. */
export declare interface SimGroup extends TrackedResource {
    /** The identity used to retrieve the encryption key from Azure key vault. */
    identity?: ManagedServiceIdentity;
    /**
     * The provisioning state of the SIM group resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /** A key to encrypt the SIM data that belongs to this SIM group. */
    encryptionKey?: KeyVaultKey;
    /** Mobile network that this SIM group belongs to. The mobile network must be in the same location as the SIM group. */
    mobileNetwork?: MobileNetworkResourceId;
}

/** Response for list SIM groups API service call. */
export declare interface SimGroupListResult {
    /** A list of SIM groups in a resource group. */
    value?: SimGroup[];
    /**
     * The URL to get the next set of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Reference to a SIM group resource. */
export declare interface SimGroupResourceId {
    /** SIM group resource ID. */
    id: string;
}

/** Interface representing a SimGroups. */
export declare interface SimGroups {
    /**
     * Gets all the SIM groups in a subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: SimGroupsListBySubscriptionOptionalParams): PagedAsyncIterableIterator<SimGroup>;
    /**
     * Gets all the SIM groups in a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: SimGroupsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<SimGroup>;
    /**
     * Deletes the specified SIM group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param simGroupName The name of the SIM Group.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, simGroupName: string, options?: SimGroupsDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes the specified SIM group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param simGroupName The name of the SIM Group.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, simGroupName: string, options?: SimGroupsDeleteOptionalParams): Promise<void>;
    /**
     * Gets information about the specified SIM group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param simGroupName The name of the SIM Group.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, simGroupName: string, options?: SimGroupsGetOptionalParams): Promise<SimGroupsGetResponse>;
    /**
     * Creates or updates a SIM group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param simGroupName The name of the SIM Group.
     * @param parameters Parameters supplied to the create or update SIM group operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, simGroupName: string, parameters: SimGroup, options?: SimGroupsCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<SimGroupsCreateOrUpdateResponse>, SimGroupsCreateOrUpdateResponse>>;
    /**
     * Creates or updates a SIM group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param simGroupName The name of the SIM Group.
     * @param parameters Parameters supplied to the create or update SIM group operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, simGroupName: string, parameters: SimGroup, options?: SimGroupsCreateOrUpdateOptionalParams): Promise<SimGroupsCreateOrUpdateResponse>;
    /**
     * Patch SIM group resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param simGroupName The name of the SIM Group.
     * @param parameters Parameters supplied to patch SIM group resource.
     * @param options The options parameters.
     */
    updateTags(resourceGroupName: string, simGroupName: string, parameters: IdentityAndTagsObject, options?: SimGroupsUpdateTagsOptionalParams): Promise<SimGroupsUpdateTagsResponse>;
}

/** Optional parameters. */
export declare interface SimGroupsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type SimGroupsCreateOrUpdateResponse = SimGroup;

/** Optional parameters. */
export declare interface SimGroupsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface SimGroupsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type SimGroupsGetResponse = SimGroup;

/** Optional parameters. */
export declare interface SimGroupsListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type SimGroupsListByResourceGroupNextResponse = SimGroupListResult;

/** Optional parameters. */
export declare interface SimGroupsListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type SimGroupsListByResourceGroupResponse = SimGroupListResult;

/** Optional parameters. */
export declare interface SimGroupsListBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionNext operation. */
export declare type SimGroupsListBySubscriptionNextResponse = SimGroupListResult;

/** Optional parameters. */
export declare interface SimGroupsListBySubscriptionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscription operation. */
export declare type SimGroupsListBySubscriptionResponse = SimGroupListResult;

/** Optional parameters. */
export declare interface SimGroupsUpdateTagsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the updateTags operation. */
export declare type SimGroupsUpdateTagsResponse = SimGroup;

/** Response for list SIMs API service call. */
export declare interface SimListResult {
    /** A list of SIMs in a resource group. */
    value?: Sim[];
    /**
     * The URL to get the next set of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** SIM name and encrypted properties. */
export declare interface SimNameAndEncryptedProperties {
    /** The name of the SIM. */
    name: string;
    /**
     * The provisioning state of the SIM resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /**
     * The state of the SIM resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly simState?: SimState;
    /**
     * A dictionary of sites to the provisioning state of this SIM on that site.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly siteProvisioningState?: {
        [propertyName: string]: SiteProvisioningState;
    };
    /** The international mobile subscriber identity (IMSI) for the SIM. */
    internationalMobileSubscriberIdentity: string;
    /** The integrated circuit card ID (ICCID) for the SIM. */
    integratedCircuitCardIdentifier?: string;
    /** An optional free-form text field that can be used to record the device type this SIM is associated with, for example 'Video camera'. The Azure portal allows SIMs to be grouped and filtered based on this value. */
    deviceType?: string;
    /** The SIM policy used by this SIM. The SIM policy must be in the same location as the SIM. */
    simPolicy?: SimPolicyResourceId;
    /** A list of static IP addresses assigned to this SIM. Each address is assigned at a defined network scope, made up of {attached data network, slice}. */
    staticIpConfiguration?: SimStaticIpProperties[];
    /**
     * The name of the SIM vendor who provided this SIM, if any.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly vendorName?: string;
    /**
     * The public key fingerprint of the SIM vendor who provided this SIM, if any.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly vendorKeyFingerprint?: string;
    /** The encrypted SIM credentials. */
    encryptedCredentials?: string;
}

/** SIM name and properties. */
export declare interface SimNameAndProperties {
    /** The name of the SIM. */
    name: string;
    /**
     * The provisioning state of the SIM resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /**
     * The state of the SIM resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly simState?: SimState;
    /**
     * A dictionary of sites to the provisioning state of this SIM on that site.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly siteProvisioningState?: {
        [propertyName: string]: SiteProvisioningState;
    };
    /** The international mobile subscriber identity (IMSI) for the SIM. */
    internationalMobileSubscriberIdentity: string;
    /** The integrated circuit card ID (ICCID) for the SIM. */
    integratedCircuitCardIdentifier?: string;
    /** An optional free-form text field that can be used to record the device type this SIM is associated with, for example 'Video camera'. The Azure portal allows SIMs to be grouped and filtered based on this value. */
    deviceType?: string;
    /** The SIM policy used by this SIM. The SIM policy must be in the same location as the SIM. */
    simPolicy?: SimPolicyResourceId;
    /** A list of static IP addresses assigned to this SIM. Each address is assigned at a defined network scope, made up of {attached data network, slice}. */
    staticIpConfiguration?: SimStaticIpProperties[];
    /**
     * The name of the SIM vendor who provided this SIM, if any.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly vendorName?: string;
    /**
     * The public key fingerprint of the SIM vendor who provided this SIM, if any.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly vendorKeyFingerprint?: string;
    /** The Ki value for the SIM. */
    authenticationKey?: string;
    /** The Opc value for the SIM. */
    operatorKeyCode?: string;
}

/** Interface representing a SimPolicies. */
export declare interface SimPolicies {
    /**
     * Gets all the SIM policies in a mobile network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mobileNetworkName The name of the mobile network.
     * @param options The options parameters.
     */
    listByMobileNetwork(resourceGroupName: string, mobileNetworkName: string, options?: SimPoliciesListByMobileNetworkOptionalParams): PagedAsyncIterableIterator<SimPolicy>;
    /**
     * Deletes the specified SIM policy.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mobileNetworkName The name of the mobile network.
     * @param simPolicyName The name of the SIM policy.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, mobileNetworkName: string, simPolicyName: string, options?: SimPoliciesDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes the specified SIM policy.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mobileNetworkName The name of the mobile network.
     * @param simPolicyName The name of the SIM policy.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, mobileNetworkName: string, simPolicyName: string, options?: SimPoliciesDeleteOptionalParams): Promise<void>;
    /**
     * Gets information about the specified SIM policy.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mobileNetworkName The name of the mobile network.
     * @param simPolicyName The name of the SIM policy.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, mobileNetworkName: string, simPolicyName: string, options?: SimPoliciesGetOptionalParams): Promise<SimPoliciesGetResponse>;
    /**
     * Creates or updates a SIM policy. Must be created in the same location as its parent mobile network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mobileNetworkName The name of the mobile network.
     * @param simPolicyName The name of the SIM policy.
     * @param parameters Parameters supplied to the create or update SIM policy operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, mobileNetworkName: string, simPolicyName: string, parameters: SimPolicy, options?: SimPoliciesCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<SimPoliciesCreateOrUpdateResponse>, SimPoliciesCreateOrUpdateResponse>>;
    /**
     * Creates or updates a SIM policy. Must be created in the same location as its parent mobile network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mobileNetworkName The name of the mobile network.
     * @param simPolicyName The name of the SIM policy.
     * @param parameters Parameters supplied to the create or update SIM policy operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, mobileNetworkName: string, simPolicyName: string, parameters: SimPolicy, options?: SimPoliciesCreateOrUpdateOptionalParams): Promise<SimPoliciesCreateOrUpdateResponse>;
    /**
     * Updates SIM policy tags.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mobileNetworkName The name of the mobile network.
     * @param simPolicyName The name of the SIM policy.
     * @param parameters Parameters supplied to update SIM policy tags.
     * @param options The options parameters.
     */
    updateTags(resourceGroupName: string, mobileNetworkName: string, simPolicyName: string, parameters: TagsObject, options?: SimPoliciesUpdateTagsOptionalParams): Promise<SimPoliciesUpdateTagsResponse>;
}

/** Optional parameters. */
export declare interface SimPoliciesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type SimPoliciesCreateOrUpdateResponse = SimPolicy;

/** Optional parameters. */
export declare interface SimPoliciesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface SimPoliciesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type SimPoliciesGetResponse = SimPolicy;

/** Optional parameters. */
export declare interface SimPoliciesListByMobileNetworkNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByMobileNetworkNext operation. */
export declare type SimPoliciesListByMobileNetworkNextResponse = SimPolicyListResult;

/** Optional parameters. */
export declare interface SimPoliciesListByMobileNetworkOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByMobileNetwork operation. */
export declare type SimPoliciesListByMobileNetworkResponse = SimPolicyListResult;

/** Optional parameters. */
export declare interface SimPoliciesUpdateTagsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the updateTags operation. */
export declare type SimPoliciesUpdateTagsResponse = SimPolicy;

/** SIM policy resource. */
export declare interface SimPolicy extends TrackedResource {
    /**
     * The provisioning state of the SIM policy resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /**
     * A dictionary of sites to the provisioning state of this SIM policy on that site.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly siteProvisioningState?: {
        [propertyName: string]: SiteProvisioningState;
    };
    /** Aggregate maximum bit rate across all non-GBR QoS flows of all PDU sessions of a given UE. See 3GPP TS23.501 section 5.7.2.6 for a full description of the UE-AMBR. */
    ueAmbr: Ambr;
    /** The default slice to use if the UE does not explicitly specify it. This slice must exist in the `sliceConfigurations` map. The slice must be in the same location as the SIM policy. */
    defaultSlice: SliceResourceId;
    /** RAT/Frequency Selection Priority Index, defined in 3GPP TS 36.413. This is an optional setting and by default is unspecified. */
    rfspIndex?: number;
    /** UE periodic registration update timer (5G) or UE periodic tracking area update timer (4G), in seconds. */
    registrationTimer?: number;
    /** The allowed slices and the settings to use for them. The list must not contain duplicate items and must contain at least one item. */
    sliceConfigurations: SliceConfiguration[];
}

/** Response for SIM policies API service call. */
export declare interface SimPolicyListResult {
    /** A list of SIM policies. */
    value?: SimPolicy[];
    /**
     * The URL to get the next set of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Reference to a SIM policy resource. */
export declare interface SimPolicyResourceId {
    /** SIM policy resource ID. */
    id: string;
}

/** SIM properties. */
export declare interface SimPropertiesFormat extends CommonSimPropertiesFormat {
    /** The Ki value for the SIM. */
    authenticationKey?: string;
    /** The Opc value for the SIM. */
    operatorKeyCode?: string;
}

/** Interface representing a Sims. */
export declare interface Sims {
    /**
     * Gets all the SIMs in a SIM group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param simGroupName The name of the SIM Group.
     * @param options The options parameters.
     */
    listByGroup(resourceGroupName: string, simGroupName: string, options?: SimsListByGroupOptionalParams): PagedAsyncIterableIterator<Sim>;
    /**
     * Deletes the specified SIM.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param simGroupName The name of the SIM Group.
     * @param simName The name of the SIM.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, simGroupName: string, simName: string, options?: SimsDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes the specified SIM.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param simGroupName The name of the SIM Group.
     * @param simName The name of the SIM.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, simGroupName: string, simName: string, options?: SimsDeleteOptionalParams): Promise<void>;
    /**
     * Gets information about the specified SIM.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param simGroupName The name of the SIM Group.
     * @param simName The name of the SIM.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, simGroupName: string, simName: string, options?: SimsGetOptionalParams): Promise<SimsGetResponse>;
    /**
     * Creates or updates a SIM.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param simGroupName The name of the SIM Group.
     * @param simName The name of the SIM.
     * @param parameters Parameters supplied to the create or update SIM operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, simGroupName: string, simName: string, parameters: Sim, options?: SimsCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<SimsCreateOrUpdateResponse>, SimsCreateOrUpdateResponse>>;
    /**
     * Creates or updates a SIM.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param simGroupName The name of the SIM Group.
     * @param simName The name of the SIM.
     * @param parameters Parameters supplied to the create or update SIM operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, simGroupName: string, simName: string, parameters: Sim, options?: SimsCreateOrUpdateOptionalParams): Promise<SimsCreateOrUpdateResponse>;
    /**
     * Bulk upload SIMs to a SIM group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param simGroupName The name of the SIM Group.
     * @param parameters Parameters supplied to the bulk SIM upload operation.
     * @param options The options parameters.
     */
    beginBulkUpload(resourceGroupName: string, simGroupName: string, parameters: SimUploadList, options?: SimsBulkUploadOptionalParams): Promise<SimplePollerLike<OperationState<SimsBulkUploadResponse>, SimsBulkUploadResponse>>;
    /**
     * Bulk upload SIMs to a SIM group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param simGroupName The name of the SIM Group.
     * @param parameters Parameters supplied to the bulk SIM upload operation.
     * @param options The options parameters.
     */
    beginBulkUploadAndWait(resourceGroupName: string, simGroupName: string, parameters: SimUploadList, options?: SimsBulkUploadOptionalParams): Promise<SimsBulkUploadResponse>;
    /**
     * Bulk delete SIMs from a SIM group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param simGroupName The name of the SIM Group.
     * @param parameters Parameters supplied to the bulk SIM delete operation.
     * @param options The options parameters.
     */
    beginBulkDelete(resourceGroupName: string, simGroupName: string, parameters: SimDeleteList, options?: SimsBulkDeleteOptionalParams): Promise<SimplePollerLike<OperationState<SimsBulkDeleteResponse>, SimsBulkDeleteResponse>>;
    /**
     * Bulk delete SIMs from a SIM group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param simGroupName The name of the SIM Group.
     * @param parameters Parameters supplied to the bulk SIM delete operation.
     * @param options The options parameters.
     */
    beginBulkDeleteAndWait(resourceGroupName: string, simGroupName: string, parameters: SimDeleteList, options?: SimsBulkDeleteOptionalParams): Promise<SimsBulkDeleteResponse>;
    /**
     * Bulk upload SIMs in encrypted form to a SIM group. The SIM credentials must be encrypted.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param simGroupName The name of the SIM Group.
     * @param parameters Parameters supplied to the encrypted SIMs upload operation.
     * @param options The options parameters.
     */
    beginBulkUploadEncrypted(resourceGroupName: string, simGroupName: string, parameters: EncryptedSimUploadList, options?: SimsBulkUploadEncryptedOptionalParams): Promise<SimplePollerLike<OperationState<SimsBulkUploadEncryptedResponse>, SimsBulkUploadEncryptedResponse>>;
    /**
     * Bulk upload SIMs in encrypted form to a SIM group. The SIM credentials must be encrypted.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param simGroupName The name of the SIM Group.
     * @param parameters Parameters supplied to the encrypted SIMs upload operation.
     * @param options The options parameters.
     */
    beginBulkUploadEncryptedAndWait(resourceGroupName: string, simGroupName: string, parameters: EncryptedSimUploadList, options?: SimsBulkUploadEncryptedOptionalParams): Promise<SimsBulkUploadEncryptedResponse>;
}

/** Optional parameters. */
export declare interface SimsBulkDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the bulkDelete operation. */
export declare type SimsBulkDeleteResponse = AsyncOperationStatus;

/** Optional parameters. */
export declare interface SimsBulkUploadEncryptedOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the bulkUploadEncrypted operation. */
export declare type SimsBulkUploadEncryptedResponse = AsyncOperationStatus;

/** Optional parameters. */
export declare interface SimsBulkUploadOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the bulkUpload operation. */
export declare type SimsBulkUploadResponse = AsyncOperationStatus;

/** Optional parameters. */
export declare interface SimsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type SimsCreateOrUpdateResponse = Sim;

/** Optional parameters. */
export declare interface SimsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface SimsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type SimsGetResponse = Sim;

/** Optional parameters. */
export declare interface SimsListByGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByGroupNext operation. */
export declare type SimsListByGroupNextResponse = SimListResult;

/** Optional parameters. */
export declare interface SimsListByGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByGroup operation. */
export declare type SimsListByGroupResponse = SimListResult;

/**
 * Defines values for SimState. \
 * {@link KnownSimState} can be used interchangeably with SimState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Disabled**: The SIM is disabled because not all configuration required for enabling is present. \
 * **Enabled**: The SIM is enabled. \
 * **Invalid**: The SIM cannot be enabled because some of the associated configuration is invalid.
 */
export declare type SimState = string;

/** Static IP configuration for a SIM, scoped to a particular attached data network and slice. */
export declare interface SimStaticIpProperties {
    /** The attached data network on which the static IP address will be used. The combination of attached data network and slice defines the network scope of the IP address. The attached data network must be in the same location as the SIM. */
    attachedDataNetwork?: AttachedDataNetworkResourceId;
    /** The network slice on which the static IP address will be used. The combination of attached data network and slice defines the network scope of the IP address. The slice must be in the same location as the SIM. */
    slice?: SliceResourceId;
    /** The static IP configuration for the SIM to use at the defined network scope. */
    staticIp?: SimStaticIpPropertiesStaticIp;
}

/** The static IP configuration for the SIM to use at the defined network scope. */
export declare interface SimStaticIpPropertiesStaticIp {
    /** The IPv4 address assigned to the SIM at this network scope. This address must be in the userEquipmentStaticAddressPoolPrefix defined in the attached data network. */
    ipv4Address?: string;
}

/** The SIMs to upload. */
export declare interface SimUploadList {
    /** A list of SIMs to upload. */
    sims: SimNameAndProperties[];
}

/** Site resource. Must be created in the same location as its parent mobile network. */
export declare interface Site extends TrackedResource {
    /**
     * The provisioning state of the site resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /**
     * An array of IDs of the network functions deployed in the site. Deleting the site will delete any network functions that are deployed in the site.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly networkFunctions?: SubResource[];
}

/** The packet core to delete under a site. */
export declare interface SiteDeletePacketCore {
    /** Reference to an packet core control plane resource. */
    packetCore?: PacketCoreControlPlaneResourceId;
}

/** Response for sites API service call. */
export declare interface SiteListResult {
    /** A list of sites in a mobile network. */
    value?: Site[];
    /**
     * The URL to get the next set of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/**
 * Defines values for SiteProvisioningState. \
 * {@link KnownSiteProvisioningState} can be used interchangeably with SiteProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotApplicable**: The resource should not be provisioned on this site. \
 * **Adding**: The resource is being added to this site. \
 * **Updating**: The resource is being updated on this site. \
 * **Deleting**: The resource is being deleted from this site. \
 * **Provisioned**: The resource is provisioned on this site. \
 * **Failed**: The resource failed to be provisioned on this site.
 */
export declare type SiteProvisioningState = string;

/** Reference to a site resource. */
export declare interface SiteResourceId {
    /** Site resource ID. */
    id: string;
}

/** Interface representing a Sites. */
export declare interface Sites {
    /**
     * Lists all sites in the mobile network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mobileNetworkName The name of the mobile network.
     * @param options The options parameters.
     */
    listByMobileNetwork(resourceGroupName: string, mobileNetworkName: string, options?: SitesListByMobileNetworkOptionalParams): PagedAsyncIterableIterator<Site>;
    /**
     * Deletes the specified mobile network site. This will also delete any network functions that are a
     * part of this site.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mobileNetworkName The name of the mobile network.
     * @param siteName The name of the mobile network site.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, mobileNetworkName: string, siteName: string, options?: SitesDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes the specified mobile network site. This will also delete any network functions that are a
     * part of this site.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mobileNetworkName The name of the mobile network.
     * @param siteName The name of the mobile network site.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, mobileNetworkName: string, siteName: string, options?: SitesDeleteOptionalParams): Promise<void>;
    /**
     * Gets information about the specified mobile network site.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mobileNetworkName The name of the mobile network.
     * @param siteName The name of the mobile network site.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, mobileNetworkName: string, siteName: string, options?: SitesGetOptionalParams): Promise<SitesGetResponse>;
    /**
     * Creates or updates a mobile network site. Must be created in the same location as its parent mobile
     * network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mobileNetworkName The name of the mobile network.
     * @param siteName The name of the mobile network site.
     * @param parameters Parameters supplied to the create or update mobile network site operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, mobileNetworkName: string, siteName: string, parameters: Site, options?: SitesCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<SitesCreateOrUpdateResponse>, SitesCreateOrUpdateResponse>>;
    /**
     * Creates or updates a mobile network site. Must be created in the same location as its parent mobile
     * network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mobileNetworkName The name of the mobile network.
     * @param siteName The name of the mobile network site.
     * @param parameters Parameters supplied to the create or update mobile network site operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, mobileNetworkName: string, siteName: string, parameters: Site, options?: SitesCreateOrUpdateOptionalParams): Promise<SitesCreateOrUpdateResponse>;
    /**
     * Updates site tags.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mobileNetworkName The name of the mobile network.
     * @param siteName The name of the mobile network site.
     * @param parameters Parameters supplied to update network site tags.
     * @param options The options parameters.
     */
    updateTags(resourceGroupName: string, mobileNetworkName: string, siteName: string, parameters: TagsObject, options?: SitesUpdateTagsOptionalParams): Promise<SitesUpdateTagsResponse>;
    /**
     * Deletes a packet core under the specified mobile network site.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mobileNetworkName The name of the mobile network.
     * @param siteName The name of the mobile network site.
     * @param parameters Parameters supplied to delete a packet core under a site.
     * @param options The options parameters.
     */
    beginDeletePacketCore(resourceGroupName: string, mobileNetworkName: string, siteName: string, parameters: SiteDeletePacketCore, options?: SitesDeletePacketCoreOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes a packet core under the specified mobile network site.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mobileNetworkName The name of the mobile network.
     * @param siteName The name of the mobile network site.
     * @param parameters Parameters supplied to delete a packet core under a site.
     * @param options The options parameters.
     */
    beginDeletePacketCoreAndWait(resourceGroupName: string, mobileNetworkName: string, siteName: string, parameters: SiteDeletePacketCore, options?: SitesDeletePacketCoreOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface SitesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type SitesCreateOrUpdateResponse = Site;

/** Optional parameters. */
export declare interface SitesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface SitesDeletePacketCoreOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface SitesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type SitesGetResponse = Site;

/** Optional parameters. */
export declare interface SitesListByMobileNetworkNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByMobileNetworkNext operation. */
export declare type SitesListByMobileNetworkNextResponse = SiteListResult;

/** Optional parameters. */
export declare interface SitesListByMobileNetworkOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByMobileNetwork operation. */
export declare type SitesListByMobileNetworkResponse = SiteListResult;

/** Optional parameters. */
export declare interface SitesUpdateTagsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the updateTags operation. */
export declare type SitesUpdateTagsResponse = Site;

/** Network slice resource. Must be created in the same location as its parent mobile network. */
export declare interface Slice extends TrackedResource {
    /**
     * The provisioning state of the network slice resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /** Single-network slice selection assistance information (S-NSSAI). Unique at the scope of a mobile network. */
    snssai: Snssai;
    /** An optional description for this network slice. */
    description?: string;
}

/** Per-slice settings */
export declare interface SliceConfiguration {
    /** A reference to the slice that these settings apply to. The slice must be in the same location as the SIM policy. */
    slice: SliceResourceId;
    /** The default data network to use if the UE does not explicitly specify it. Configuration for this object must exist in the `dataNetworkConfigurations` map. The data network must be in the same location as the SIM policy. */
    defaultDataNetwork: DataNetworkResourceId;
    /** The allowed data networks and the settings to use for them. The list must not contain duplicate items and must contain at least one item. */
    dataNetworkConfigurations: DataNetworkConfiguration[];
}

/** Response for network slice API service call. */
export declare interface SliceListResult {
    /** A list of network slices in a mobile network. */
    value?: Slice[];
    /**
     * The URL to get the next set of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Reference to a slice resource. */
export declare interface SliceResourceId {
    /** Slice resource ID. */
    id: string;
}

/** Interface representing a Slices. */
export declare interface Slices {
    /**
     * Lists all slices in the mobile network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mobileNetworkName The name of the mobile network.
     * @param options The options parameters.
     */
    listByMobileNetwork(resourceGroupName: string, mobileNetworkName: string, options?: SlicesListByMobileNetworkOptionalParams): PagedAsyncIterableIterator<Slice>;
    /**
     * Deletes the specified network slice.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mobileNetworkName The name of the mobile network.
     * @param sliceName The name of the network slice.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, mobileNetworkName: string, sliceName: string, options?: SlicesDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes the specified network slice.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mobileNetworkName The name of the mobile network.
     * @param sliceName The name of the network slice.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, mobileNetworkName: string, sliceName: string, options?: SlicesDeleteOptionalParams): Promise<void>;
    /**
     * Gets information about the specified network slice.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mobileNetworkName The name of the mobile network.
     * @param sliceName The name of the network slice.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, mobileNetworkName: string, sliceName: string, options?: SlicesGetOptionalParams): Promise<SlicesGetResponse>;
    /**
     * Creates or updates a network slice. Must be created in the same location as its parent mobile
     * network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mobileNetworkName The name of the mobile network.
     * @param sliceName The name of the network slice.
     * @param parameters Parameters supplied to the create or update network slice operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, mobileNetworkName: string, sliceName: string, parameters: Slice, options?: SlicesCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<SlicesCreateOrUpdateResponse>, SlicesCreateOrUpdateResponse>>;
    /**
     * Creates or updates a network slice. Must be created in the same location as its parent mobile
     * network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mobileNetworkName The name of the mobile network.
     * @param sliceName The name of the network slice.
     * @param parameters Parameters supplied to the create or update network slice operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, mobileNetworkName: string, sliceName: string, parameters: Slice, options?: SlicesCreateOrUpdateOptionalParams): Promise<SlicesCreateOrUpdateResponse>;
    /**
     * Updates slice tags.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mobileNetworkName The name of the mobile network.
     * @param sliceName The name of the network slice.
     * @param parameters Parameters supplied to update network slice tags.
     * @param options The options parameters.
     */
    updateTags(resourceGroupName: string, mobileNetworkName: string, sliceName: string, parameters: TagsObject, options?: SlicesUpdateTagsOptionalParams): Promise<SlicesUpdateTagsResponse>;
}

/** Optional parameters. */
export declare interface SlicesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type SlicesCreateOrUpdateResponse = Slice;

/** Optional parameters. */
export declare interface SlicesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface SlicesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type SlicesGetResponse = Slice;

/** Optional parameters. */
export declare interface SlicesListByMobileNetworkNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByMobileNetworkNext operation. */
export declare type SlicesListByMobileNetworkNextResponse = SliceListResult;

/** Optional parameters. */
export declare interface SlicesListByMobileNetworkOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByMobileNetwork operation. */
export declare type SlicesListByMobileNetworkResponse = SliceListResult;

/** Optional parameters. */
export declare interface SlicesUpdateTagsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the updateTags operation. */
export declare type SlicesUpdateTagsResponse = Slice;

/** Single-network slice selection assistance information (S-NSSAI). */
export declare interface Snssai {
    /** Slice/service type (SST). */
    sst: number;
    /** Slice differentiator (SD). */
    sd?: string;
}

/** Reference to another sub resource. */
export declare interface SubResource {
    /** Resource ID. */
    id: string;
}

/** Metadata pertaining to creation and last modification of the resource. */
export declare interface SystemData {
    /** The identity that created the resource. */
    createdBy?: string;
    /** The type of identity that created the resource. */
    createdByType?: CreatedByType;
    /** The timestamp of resource creation (UTC). */
    createdAt?: Date;
    /** The identity that last modified the resource. */
    lastModifiedBy?: string;
    /** The type of identity that last modified the resource. */
    lastModifiedByType?: CreatedByType;
    /** The timestamp of resource last modification (UTC) */
    lastModifiedAt?: Date;
}

/** Tags object for patch operations. */
export declare interface TagsObject {
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
}

/** The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location' */
export declare interface TrackedResource extends Resource {
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** The geo-location where the resource lives */
    location: string;
}

/**
 * Defines values for TrafficControlPermission. \
 * {@link KnownTrafficControlPermission} can be used interchangeably with TrafficControlPermission,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled**: Traffic matching this rule is allowed to flow. \
 * **Blocked**: Traffic matching this rule is not allowed to flow.
 */
export declare type TrafficControlPermission = string;

/** User assigned identity properties */
export declare interface UserAssignedIdentity {
    /**
     * The principal ID of the assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
    /**
     * The client ID of the assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly clientId?: string;
}

/**
 * Defines values for VersionState. \
 * {@link KnownVersionState} can be used interchangeably with VersionState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown**: The state of this version is unknown. \
 * **Preview**: This version is a preview and is not suitable for production use. \
 * **Validating**: This version is currently being validated. \
 * **ValidationFailed**: This version failed validation. \
 * **Active**: This version is active and suitable for production use. \
 * **Deprecated**: This version is deprecated and is no longer supported.
 */
export declare type VersionState = string;

export { }
