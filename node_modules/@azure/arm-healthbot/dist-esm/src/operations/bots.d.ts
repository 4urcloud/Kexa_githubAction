import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Bots } from "../operationsInterfaces";
import { HealthbotClient } from "../healthbotClient";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import { HealthBot, BotsListByResourceGroupOptionalParams, BotsListOptionalParams, BotsCreateOptionalParams, BotsCreateResponse, BotsGetOptionalParams, BotsGetResponse, HealthBotUpdateParameters, BotsUpdateOptionalParams, BotsUpdateResponse, BotsDeleteOptionalParams } from "../models";
/** Class containing Bots operations. */
export declare class BotsImpl implements Bots {
    private readonly client;
    /**
     * Initialize a new instance of the class Bots class.
     * @param client Reference to the service client
     */
    constructor(client: HealthbotClient);
    /**
     * Returns all the resources of a particular type belonging to a resource group
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: BotsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<HealthBot>;
    private listByResourceGroupPagingPage;
    private listByResourceGroupPagingAll;
    /**
     * Returns all the resources of a particular type belonging to a subscription.
     * @param options The options parameters.
     */
    list(options?: BotsListOptionalParams): PagedAsyncIterableIterator<HealthBot>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Create a new Azure Health Bot.
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param botName The name of the Bot resource.
     * @param parameters The parameters to provide for the created Azure Health Bot.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName: string, botName: string, parameters: HealthBot, options?: BotsCreateOptionalParams): Promise<PollerLike<PollOperationState<BotsCreateResponse>, BotsCreateResponse>>;
    /**
     * Create a new Azure Health Bot.
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param botName The name of the Bot resource.
     * @param parameters The parameters to provide for the created Azure Health Bot.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName: string, botName: string, parameters: HealthBot, options?: BotsCreateOptionalParams): Promise<BotsCreateResponse>;
    /**
     * Get a HealthBot.
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param botName The name of the Bot resource.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, botName: string, options?: BotsGetOptionalParams): Promise<BotsGetResponse>;
    /**
     * Patch a HealthBot.
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param botName The name of the Bot resource.
     * @param parameters The parameters to provide for the required Azure Health Bot.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, botName: string, parameters: HealthBotUpdateParameters, options?: BotsUpdateOptionalParams): Promise<BotsUpdateResponse>;
    /**
     * Delete a HealthBot.
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param botName The name of the Bot resource.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, botName: string, options?: BotsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Delete a HealthBot.
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param botName The name of the Bot resource.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, botName: string, options?: BotsDeleteOptionalParams): Promise<void>;
    /**
     * Returns all the resources of a particular type belonging to a resource group
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param options The options parameters.
     */
    private _listByResourceGroup;
    /**
     * Returns all the resources of a particular type belonging to a subscription.
     * @param options The options parameters.
     */
    private _list;
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    private _listByResourceGroupNext;
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
}
//# sourceMappingURL=bots.d.ts.map