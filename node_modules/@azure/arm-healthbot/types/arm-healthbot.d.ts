import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { PollerLike } from '@azure/core-lro';
import { PollOperationState } from '@azure/core-lro';

/** Available operations of the service */
export declare interface AvailableOperations {
    /** Collection of available operation details */
    value?: OperationDetail[];
    /**
     * URL client should use to fetch the next page (per server side paging).
     * It's null for now, added for future use.
     */
    nextLink?: string;
}

/** The list of Azure Health Bot operation response. */
export declare interface BotResponseList {
    /**
     * The link used to get the next page of bot service resources.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
    /**
     * Gets the list of Azure Health Bot results and their properties.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: HealthBot[];
}

/** Interface representing a Bots. */
export declare interface Bots {
    /**
     * Returns all the resources of a particular type belonging to a resource group
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: BotsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<HealthBot>;
    /**
     * Returns all the resources of a particular type belonging to a subscription.
     * @param options The options parameters.
     */
    list(options?: BotsListOptionalParams): PagedAsyncIterableIterator<HealthBot>;
    /**
     * Create a new Azure Health Bot.
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param botName The name of the Bot resource.
     * @param parameters The parameters to provide for the created Azure Health Bot.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName: string, botName: string, parameters: HealthBot, options?: BotsCreateOptionalParams): Promise<PollerLike<PollOperationState<BotsCreateResponse>, BotsCreateResponse>>;
    /**
     * Create a new Azure Health Bot.
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param botName The name of the Bot resource.
     * @param parameters The parameters to provide for the created Azure Health Bot.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName: string, botName: string, parameters: HealthBot, options?: BotsCreateOptionalParams): Promise<BotsCreateResponse>;
    /**
     * Get a HealthBot.
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param botName The name of the Bot resource.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, botName: string, options?: BotsGetOptionalParams): Promise<BotsGetResponse>;
    /**
     * Patch a HealthBot.
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param botName The name of the Bot resource.
     * @param parameters The parameters to provide for the required Azure Health Bot.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, botName: string, parameters: HealthBotUpdateParameters, options?: BotsUpdateOptionalParams): Promise<BotsUpdateResponse>;
    /**
     * Delete a HealthBot.
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param botName The name of the Bot resource.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, botName: string, options?: BotsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Delete a HealthBot.
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param botName The name of the Bot resource.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, botName: string, options?: BotsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface BotsCreateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the create operation. */
export declare type BotsCreateResponse = HealthBot;

/** Optional parameters. */
export declare interface BotsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface BotsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type BotsGetResponse = HealthBot;

/** Optional parameters. */
export declare interface BotsListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type BotsListByResourceGroupNextResponse = BotResponseList;

/** Optional parameters. */
export declare interface BotsListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type BotsListByResourceGroupResponse = BotResponseList;

/** Optional parameters. */
export declare interface BotsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type BotsListNextResponse = BotResponseList;

/** Optional parameters. */
export declare interface BotsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type BotsListResponse = BotResponseList;

/** Optional parameters. */
export declare interface BotsUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type BotsUpdateResponse = HealthBot;

/** The resource management error additional info. */
export declare interface ErrorAdditionalInfo {
    /**
     * The additional info type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The additional info.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly info?: Record<string, unknown>;
}

/** The error object. */
export declare interface ErrorError {
    /**
     * The error code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * The error message.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
    /**
     * The error target.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly target?: string;
    /**
     * The error details.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly details?: ErrorModel[];
    /**
     * The error additional info.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** The resource management error response. */
export declare interface ErrorModel {
    /** The error object. */
    error?: ErrorError;
}

/**
 * Given a result page from a pageable operation, returns a
 * continuation token that can be used to begin paging from
 * that point later.
 * @param page A result object from calling .byPage() on a paged operation.
 * @returns The continuation token that can be passed into byPage().
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/** Azure Health Bot resource definition */
export declare interface HealthBot extends TrackedResource {
    /** SKU of the Azure Health Bot. */
    sku: Sku;
    /** The identity of the Azure Health Bot. */
    identity?: Identity;
    /** The set of properties specific to Azure Health Bot resource. */
    properties?: HealthBotProperties;
}

export declare class HealthbotClient extends coreClient.ServiceClient {
    $host: string;
    subscriptionId: string;
    apiVersion: string;
    /**
     * Initializes a new instance of the HealthbotClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId Azure Subscription ID.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: HealthbotClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    bots: Bots;
    operations: Operations;
}

/** Optional parameters. */
export declare interface HealthbotClientOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** The properties of a Azure Health Bot. The Health Bot Service is a cloud platform that empowers developers in Healthcare organizations to build and deploy their compliant, AI-powered virtual health assistants and health bots, that help them improve processes and reduce costs. */
export declare interface HealthBotProperties {
    /**
     * The provisioning state of the Azure Health Bot resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /**
     * The link.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly botManagementPortalLink?: string;
}

/** Parameters for updating a Azure Health Bot. */
export declare interface HealthBotUpdateParameters {
    /** Tags for a Azure Health Bot. */
    tags?: {
        [propertyName: string]: string;
    };
    /** SKU of the Azure Health Bot. */
    sku?: Sku;
    /** The identity of the Azure Health Bot. */
    identity?: Identity;
    location?: string;
}

/** Identity for the resource. */
export declare interface Identity {
    /**
     * The principal ID of resource identity. This property will only be provided for a system assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
    /**
     * The tenant ID of resource. This property will only be provided for a system assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
    /** The identity type. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the Azure Health Bot */
    type?: ResourceIdentityType;
    /**
     * The list of user identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form:
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
     *
     */
    userAssignedIdentities?: {
        [propertyName: string]: UserAssignedIdentity;
    };
}

/**
 * Defines values for IdentityType. \
 * {@link KnownIdentityType} can be used interchangeably with IdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export declare type IdentityType = string;

/** Known values of {@link IdentityType} that the service accepts. */
export declare enum KnownIdentityType {
    /** User */
    User = "User",
    /** Application */
    Application = "Application",
    /** ManagedIdentity */
    ManagedIdentity = "ManagedIdentity",
    /** Key */
    Key = "Key"
}

/** Operation detail payload */
export declare interface OperationDetail {
    /** Name of the operation */
    name?: string;
    /** Indicates whether the operation is a data action */
    isDataAction?: boolean;
    /** Display of the operation */
    display?: OperationDisplay;
    /** Origin of the operation */
    origin?: string;
    /** Additional properties. */
    properties?: Record<string, unknown>;
}

/** Operation display payload */
export declare interface OperationDisplay {
    /** Resource provider of the operation */
    provider?: string;
    /** Resource of the operation */
    resource?: string;
    /** Localized friendly name for the operation */
    operation?: string;
    /** Localized friendly description for the operation */
    description?: string;
}

/** Interface representing a Operations. */
export declare interface Operations {
    /**
     * Lists all the available Azure Health Bot operations.
     * @param options The options parameters.
     */
    list(options?: OperationsListOptionalParams): PagedAsyncIterableIterator<OperationDetail>;
}

/** Optional parameters. */
export declare interface OperationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type OperationsListNextResponse = AvailableOperations;

/** Optional parameters. */
export declare interface OperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OperationsListResponse = AvailableOperations;

/** The resource model definition for a ARM tracked top level resource */
export declare interface Resource {
    /**
     * Fully qualified resource Id for the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * Metadata pertaining to creation and last modification of the resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
}

/** Defines values for ResourceIdentityType. */
export declare type ResourceIdentityType = "SystemAssigned" | "UserAssigned" | "SystemAssigned, UserAssigned" | "None";

/** The resource model definition representing SKU */
export declare interface Sku {
    /** The name of the Azure Health Bot SKU */
    name: SkuName;
}

/** Defines values for SkuName. */
export declare type SkuName = "F0" | "S1" | "C0";

/** Read only system data */
export declare interface SystemData {
    /** The identity that created the resource. */
    createdBy?: string;
    /** The type of identity that created the resource */
    createdByType?: IdentityType;
    /** The timestamp of resource creation (UTC) */
    createdAt?: Date;
    /** The identity that last modified the resource. */
    lastModifiedBy?: string;
    /** The type of identity that last modified the resource */
    lastModifiedByType?: IdentityType;
    /** The timestamp of resource last modification (UTC) */
    lastModifiedAt?: Date;
}

/** The resource model definition for a ARM tracked top level resource */
export declare interface TrackedResource extends Resource {
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** The geo-location where the resource lives */
    location: string;
}

/** The details of the user assigned managed identity used by the Video Analyzer resource. */
export declare interface UserAssignedIdentity {
    /**
     * The principal ID of user assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
    /**
     * The client ID of user assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly clientId?: string;
}

/** The response returned from validation process */
export declare interface ValidationResult {
    /** The status code of the response validation. */
    status?: string;
}

export { }
