import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { PagedAsyncIterableIterator } from '@azure/core-paging';

export declare class ACEProvisioningManagementPartnerAPI extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    /**
     * Initializes a new instance of the ACEProvisioningManagementPartnerAPI class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, options?: ACEProvisioningManagementPartnerAPIOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    partner: Partner;
    operation: Operation;
    partners: Partners;
}

/** Optional parameters. */
export declare interface ACEProvisioningManagementPartnerAPIOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** this is the management partner operations error */
export declare interface ErrorModel {
    /** this is the ExtendedErrorInfo property */
    error?: ExtendedErrorInfo;
}

/**
 * Defines values for ErrorResponseCode. \
 * {@link KnownErrorResponseCode} can be used interchangeably with ErrorResponseCode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotFound** \
 * **Conflict** \
 * **BadRequest**
 */
export declare type ErrorResponseCode = string;

/** this is the extended error info */
export declare interface ExtendedErrorInfo {
    /** this is the error response code */
    code?: ErrorResponseCode;
    /** this is the extended error info message */
    message?: string;
}

/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/** Known values of {@link ErrorResponseCode} that the service accepts. */
export declare enum KnownErrorResponseCode {
    /** NotFound */
    NotFound = "NotFound",
    /** Conflict */
    Conflict = "Conflict",
    /** BadRequest */
    BadRequest = "BadRequest"
}

/** Known values of {@link ManagementPartnerState} that the service accepts. */
export declare enum KnownManagementPartnerState {
    /** Active */
    Active = "Active",
    /** Deleted */
    Deleted = "Deleted"
}

/**
 * Defines values for ManagementPartnerState. \
 * {@link KnownManagementPartnerState} can be used interchangeably with ManagementPartnerState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Active** \
 * **Deleted**
 */
export declare type ManagementPartnerState = string;

/** Interface representing a Operation. */
export declare interface Operation {
    /**
     * List all the operations.
     * @param options The options parameters.
     */
    list(options?: OperationListOptionalParams): PagedAsyncIterableIterator<OperationResponse>;
}

/** this is the management partner operation */
export declare interface OperationDisplay {
    /** the is management partner provider */
    provider?: string;
    /** the is management partner resource */
    resource?: string;
    /** the is management partner operation */
    operation?: string;
    /** the is management partner operation description */
    description?: string;
}

/** this is the management partner operations list */
export declare interface OperationList {
    /** this is the operation response list */
    value?: OperationResponse[];
    /** Url to get the next page of items. */
    nextLink?: string;
}

/** Optional parameters. */
export declare interface OperationListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type OperationListNextResponse = OperationList;

/** Optional parameters. */
export declare interface OperationListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OperationListResponse = OperationList;

/** this is the management partner operations response */
export declare interface OperationResponse {
    /** this is the operation response name */
    name?: string;
    /** this is the operation display */
    display?: OperationDisplay;
    /** the is operation response origin information */
    origin?: string;
}

/** Interface representing a Partner. */
export declare interface Partner {
    /**
     * Get the management partner using the partnerId, objectId and tenantId.
     * @param partnerId Id of the Partner
     * @param options The options parameters.
     */
    get(partnerId: string, options?: PartnerGetOptionalParams): Promise<PartnerGetResponse>;
    /**
     * Create a management partner for the objectId and tenantId.
     * @param partnerId Id of the Partner
     * @param options The options parameters.
     */
    create(partnerId: string, options?: PartnerCreateOptionalParams): Promise<PartnerCreateResponse>;
    /**
     * Update the management partner for the objectId and tenantId.
     * @param partnerId Id of the Partner
     * @param options The options parameters.
     */
    update(partnerId: string, options?: PartnerUpdateOptionalParams): Promise<PartnerUpdateResponse>;
    /**
     * Delete the management partner for the objectId and tenantId.
     * @param partnerId Id of the Partner
     * @param options The options parameters.
     */
    delete(partnerId: string, options?: PartnerDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface PartnerCreateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the create operation. */
export declare type PartnerCreateResponse = PartnerResponse;

/** Optional parameters. */
export declare interface PartnerDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface PartnerGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type PartnerGetResponse = PartnerResponse;

/** this is the management partner operations response */
export declare interface PartnerResponse {
    /** Type of the partner */
    etag?: number;
    /**
     * Identifier of the partner
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Name of the partner
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Type of resource. "Microsoft.ManagementPartner/partners"
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** This is the partner id */
    partnerId?: string;
    /** This is the partner name */
    partnerName?: string;
    /** This is the tenant id. */
    tenantId?: string;
    /** This is the object id. */
    objectId?: string;
    /** This is the version. */
    version?: number;
    /** This is the DateTime when the partner was updated. */
    updatedTime?: Date;
    /** This is the DateTime when the partner was created. */
    createdTime?: Date;
    /** This is the partner state */
    state?: ManagementPartnerState;
}

/** Interface representing a Partners. */
export declare interface Partners {
    /**
     * Get the management partner using the objectId and tenantId.
     * @param options The options parameters.
     */
    get(options?: PartnersGetOptionalParams): Promise<PartnersGetResponse>;
}

/** Optional parameters. */
export declare interface PartnersGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type PartnersGetResponse = PartnerResponse;

/** Optional parameters. */
export declare interface PartnerUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type PartnerUpdateResponse = PartnerResponse;

export { }
