import { Partner } from "../operationsInterfaces";
import { ACEProvisioningManagementPartnerAPI } from "../aCEProvisioningManagementPartnerAPI";
import { PartnerGetOptionalParams, PartnerGetResponse, PartnerCreateOptionalParams, PartnerCreateResponse, PartnerUpdateOptionalParams, PartnerUpdateResponse, PartnerDeleteOptionalParams } from "../models";
/** Class containing Partner operations. */
export declare class PartnerImpl implements Partner {
    private readonly client;
    /**
     * Initialize a new instance of the class Partner class.
     * @param client Reference to the service client
     */
    constructor(client: ACEProvisioningManagementPartnerAPI);
    /**
     * Get the management partner using the partnerId, objectId and tenantId.
     * @param partnerId Id of the Partner
     * @param options The options parameters.
     */
    get(partnerId: string, options?: PartnerGetOptionalParams): Promise<PartnerGetResponse>;
    /**
     * Create a management partner for the objectId and tenantId.
     * @param partnerId Id of the Partner
     * @param options The options parameters.
     */
    create(partnerId: string, options?: PartnerCreateOptionalParams): Promise<PartnerCreateResponse>;
    /**
     * Update the management partner for the objectId and tenantId.
     * @param partnerId Id of the Partner
     * @param options The options parameters.
     */
    update(partnerId: string, options?: PartnerUpdateOptionalParams): Promise<PartnerUpdateResponse>;
    /**
     * Delete the management partner for the objectId and tenantId.
     * @param partnerId Id of the Partner
     * @param options The options parameters.
     */
    delete(partnerId: string, options?: PartnerDeleteOptionalParams): Promise<void>;
}
//# sourceMappingURL=partner.d.ts.map