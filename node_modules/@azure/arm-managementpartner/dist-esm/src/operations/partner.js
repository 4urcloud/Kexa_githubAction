/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/** Class containing Partner operations. */
export class PartnerImpl {
    /**
     * Initialize a new instance of the class Partner class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get the management partner using the partnerId, objectId and tenantId.
     * @param partnerId Id of the Partner
     * @param options The options parameters.
     */
    get(partnerId, options) {
        return this.client.sendOperationRequest({ partnerId, options }, getOperationSpec);
    }
    /**
     * Create a management partner for the objectId and tenantId.
     * @param partnerId Id of the Partner
     * @param options The options parameters.
     */
    create(partnerId, options) {
        return this.client.sendOperationRequest({ partnerId, options }, createOperationSpec);
    }
    /**
     * Update the management partner for the objectId and tenantId.
     * @param partnerId Id of the Partner
     * @param options The options parameters.
     */
    update(partnerId, options) {
        return this.client.sendOperationRequest({ partnerId, options }, updateOperationSpec);
    }
    /**
     * Delete the management partner for the objectId and tenantId.
     * @param partnerId Id of the Partner
     * @param options The options parameters.
     */
    delete(partnerId, options) {
        return this.client.sendOperationRequest({ partnerId, options }, deleteOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec = {
    path: "/providers/Microsoft.ManagementPartner/partners/{partnerId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PartnerResponse
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.partnerId],
    headerParameters: [Parameters.accept],
    serializer
};
const createOperationSpec = {
    path: "/providers/Microsoft.ManagementPartner/partners/{partnerId}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.PartnerResponse
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.partnerId],
    headerParameters: [Parameters.accept],
    serializer
};
const updateOperationSpec = {
    path: "/providers/Microsoft.ManagementPartner/partners/{partnerId}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Mappers.PartnerResponse
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.partnerId],
    headerParameters: [Parameters.accept],
    serializer
};
const deleteOperationSpec = {
    path: "/providers/Microsoft.ManagementPartner/partners/{partnerId}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.partnerId],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=partner.js.map