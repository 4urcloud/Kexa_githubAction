/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { CheckNameAvailabilityRequest as CheckNameAvailabilityRequestMapper, Account as AccountMapper, AccountUpdate as AccountUpdateMapper, Instance as InstanceMapper, TagUpdate as TagUpdateMapper, PrivateEndpointConnection as PrivateEndpointConnectionMapper, PrivateEndpointConnectionProxy as PrivateEndpointConnectionProxyMapper, PrivateEndpointUpdate as PrivateEndpointUpdateMapper } from "../models/mappers";
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export const request = {
    parameterPath: "request",
    mapper: CheckNameAvailabilityRequestMapper
};
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2023-07-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const accountName = {
    parameterPath: "accountName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[A-Za-z0-9]+(-[A-Za-z0-9]+)*$"),
            MaxLength: 24,
            MinLength: 3
        },
        serializedName: "accountName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const account = {
    parameterPath: "account",
    mapper: AccountMapper
};
export const accountUpdatePayload = {
    parameterPath: "accountUpdatePayload",
    mapper: AccountUpdateMapper
};
export const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const instanceName = {
    parameterPath: "instanceName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[A-Za-z0-9]+(-[A-Za-z0-9]+)*$"),
            MaxLength: 36,
            MinLength: 3
        },
        serializedName: "instanceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const instance = {
    parameterPath: "instance",
    mapper: InstanceMapper
};
export const tagUpdatePayload = {
    parameterPath: "tagUpdatePayload",
    mapper: TagUpdateMapper
};
export const privateEndpointConnectionName = {
    parameterPath: "privateEndpointConnectionName",
    mapper: {
        serializedName: "privateEndpointConnectionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const privateEndpointConnection = {
    parameterPath: "privateEndpointConnection",
    mapper: PrivateEndpointConnectionMapper
};
export const groupId = {
    parameterPath: "groupId",
    mapper: {
        serializedName: "groupId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const privateEndpointConnectionProxy = {
    parameterPath: "privateEndpointConnectionProxy",
    mapper: PrivateEndpointConnectionProxyMapper
};
export const privateEndpointConnectionProxyId = {
    parameterPath: "privateEndpointConnectionProxyId",
    mapper: {
        serializedName: "privateEndpointConnectionProxyId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const privateEndpointUpdate = {
    parameterPath: "privateEndpointUpdate",
    mapper: PrivateEndpointUpdateMapper
};
//# sourceMappingURL=parameters.js.map