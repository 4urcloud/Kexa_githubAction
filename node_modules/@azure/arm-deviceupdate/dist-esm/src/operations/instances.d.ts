import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Instances } from "../operationsInterfaces";
import { DeviceUpdate } from "../deviceUpdate";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import { Instance, InstancesListByAccountOptionalParams, InstancesGetOptionalParams, InstancesGetResponse, InstancesHeadOptionalParams, InstancesHeadResponse, InstancesCreateOptionalParams, InstancesCreateResponse, InstancesDeleteOptionalParams, TagUpdate, InstancesUpdateOptionalParams, InstancesUpdateResponse } from "../models";
/** Class containing Instances operations. */
export declare class InstancesImpl implements Instances {
    private readonly client;
    /**
     * Initialize a new instance of the class Instances class.
     * @param client Reference to the service client
     */
    constructor(client: DeviceUpdate);
    /**
     * Returns instances for the given account name.
     * @param resourceGroupName The resource group name.
     * @param accountName Account name.
     * @param options The options parameters.
     */
    listByAccount(resourceGroupName: string, accountName: string, options?: InstancesListByAccountOptionalParams): PagedAsyncIterableIterator<Instance>;
    private listByAccountPagingPage;
    private listByAccountPagingAll;
    /**
     * Returns instances for the given account name.
     * @param resourceGroupName The resource group name.
     * @param accountName Account name.
     * @param options The options parameters.
     */
    private _listByAccount;
    /**
     * Returns instance details for the given instance and account name.
     * @param resourceGroupName The resource group name.
     * @param accountName Account name.
     * @param instanceName Instance name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, accountName: string, instanceName: string, options?: InstancesGetOptionalParams): Promise<InstancesGetResponse>;
    /**
     * Checks whether instance exists.
     * @param resourceGroupName The resource group name.
     * @param accountName Account name.
     * @param instanceName Instance name.
     * @param options The options parameters.
     */
    head(resourceGroupName: string, accountName: string, instanceName: string, options?: InstancesHeadOptionalParams): Promise<InstancesHeadResponse>;
    /**
     * Creates or updates instance.
     * @param resourceGroupName The resource group name.
     * @param accountName Account name.
     * @param instanceName Instance name.
     * @param instance Instance details.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName: string, accountName: string, instanceName: string, instance: Instance, options?: InstancesCreateOptionalParams): Promise<SimplePollerLike<OperationState<InstancesCreateResponse>, InstancesCreateResponse>>;
    /**
     * Creates or updates instance.
     * @param resourceGroupName The resource group name.
     * @param accountName Account name.
     * @param instanceName Instance name.
     * @param instance Instance details.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName: string, accountName: string, instanceName: string, instance: Instance, options?: InstancesCreateOptionalParams): Promise<InstancesCreateResponse>;
    /**
     * Deletes instance.
     * @param resourceGroupName The resource group name.
     * @param accountName Account name.
     * @param instanceName Instance name.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, accountName: string, instanceName: string, options?: InstancesDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes instance.
     * @param resourceGroupName The resource group name.
     * @param accountName Account name.
     * @param instanceName Instance name.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, accountName: string, instanceName: string, options?: InstancesDeleteOptionalParams): Promise<void>;
    /**
     * Updates instance's tags.
     * @param resourceGroupName The resource group name.
     * @param accountName Account name.
     * @param instanceName Instance name.
     * @param tagUpdatePayload Updated tags.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, accountName: string, instanceName: string, tagUpdatePayload: TagUpdate, options?: InstancesUpdateOptionalParams): Promise<InstancesUpdateResponse>;
    /**
     * ListByAccountNext
     * @param resourceGroupName The resource group name.
     * @param accountName Account name.
     * @param nextLink The nextLink from the previous successful call to the ListByAccount method.
     * @param options The options parameters.
     */
    private _listByAccountNext;
}
//# sourceMappingURL=instances.d.ts.map