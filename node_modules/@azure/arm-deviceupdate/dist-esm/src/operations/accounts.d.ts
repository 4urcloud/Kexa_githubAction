import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Accounts } from "../operationsInterfaces";
import { DeviceUpdate } from "../deviceUpdate";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import { Account, AccountsListBySubscriptionOptionalParams, AccountsListByResourceGroupOptionalParams, AccountsGetOptionalParams, AccountsGetResponse, AccountsHeadOptionalParams, AccountsHeadResponse, AccountsCreateOptionalParams, AccountsCreateResponse, AccountsDeleteOptionalParams, AccountUpdate, AccountsUpdateOptionalParams, AccountsUpdateResponse } from "../models";
/** Class containing Accounts operations. */
export declare class AccountsImpl implements Accounts {
    private readonly client;
    /**
     * Initialize a new instance of the class Accounts class.
     * @param client Reference to the service client
     */
    constructor(client: DeviceUpdate);
    /**
     * Returns list of Accounts.
     * @param options The options parameters.
     */
    listBySubscription(options?: AccountsListBySubscriptionOptionalParams): PagedAsyncIterableIterator<Account>;
    private listBySubscriptionPagingPage;
    private listBySubscriptionPagingAll;
    /**
     * Returns list of Accounts.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: AccountsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<Account>;
    private listByResourceGroupPagingPage;
    private listByResourceGroupPagingAll;
    /**
     * Returns list of Accounts.
     * @param options The options parameters.
     */
    private _listBySubscription;
    /**
     * Returns list of Accounts.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    private _listByResourceGroup;
    /**
     * Returns account details for the given account name.
     * @param resourceGroupName The resource group name.
     * @param accountName Account name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, accountName: string, options?: AccountsGetOptionalParams): Promise<AccountsGetResponse>;
    /**
     * Checks whether account exists.
     * @param resourceGroupName The resource group name.
     * @param accountName Account name.
     * @param options The options parameters.
     */
    head(resourceGroupName: string, accountName: string, options?: AccountsHeadOptionalParams): Promise<AccountsHeadResponse>;
    /**
     * Creates or updates Account.
     * @param resourceGroupName The resource group name.
     * @param accountName Account name.
     * @param account Account details.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName: string, accountName: string, account: Account, options?: AccountsCreateOptionalParams): Promise<SimplePollerLike<OperationState<AccountsCreateResponse>, AccountsCreateResponse>>;
    /**
     * Creates or updates Account.
     * @param resourceGroupName The resource group name.
     * @param accountName Account name.
     * @param account Account details.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName: string, accountName: string, account: Account, options?: AccountsCreateOptionalParams): Promise<AccountsCreateResponse>;
    /**
     * Deletes account.
     * @param resourceGroupName The resource group name.
     * @param accountName Account name.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, accountName: string, options?: AccountsDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes account.
     * @param resourceGroupName The resource group name.
     * @param accountName Account name.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, accountName: string, options?: AccountsDeleteOptionalParams): Promise<void>;
    /**
     * Updates account's patchable properties
     * @param resourceGroupName The resource group name.
     * @param accountName Account name.
     * @param accountUpdatePayload Updated Account.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, accountName: string, accountUpdatePayload: AccountUpdate, options?: AccountsUpdateOptionalParams): Promise<SimplePollerLike<OperationState<AccountsUpdateResponse>, AccountsUpdateResponse>>;
    /**
     * Updates account's patchable properties
     * @param resourceGroupName The resource group name.
     * @param accountName Account name.
     * @param accountUpdatePayload Updated Account.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, accountName: string, accountUpdatePayload: AccountUpdate, options?: AccountsUpdateOptionalParams): Promise<AccountsUpdateResponse>;
    /**
     * ListBySubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
     * @param options The options parameters.
     */
    private _listBySubscriptionNext;
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName The resource group name.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    private _listByResourceGroupNext;
}
//# sourceMappingURL=accounts.d.ts.map