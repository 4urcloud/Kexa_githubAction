import * as coreClient from "@azure/core-client";
import * as coreAuth from "@azure/core-auth";
import { Accounts, Instances, PrivateEndpointConnections, PrivateLinkResources, PrivateEndpointConnectionProxies, Operations } from "./operationsInterfaces";
import { DeviceUpdateOptionalParams, CheckNameAvailabilityRequest, CheckNameAvailabilityOptionalParams, CheckNameAvailabilityOperationResponse } from "./models";
export declare class DeviceUpdate extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the DeviceUpdate class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The Azure subscription ID.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: DeviceUpdateOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    /**
     * Checks ADU resource name availability.
     * @param request Check Name Availability Request.
     * @param options The options parameters.
     */
    checkNameAvailability(request: CheckNameAvailabilityRequest, options?: CheckNameAvailabilityOptionalParams): Promise<CheckNameAvailabilityOperationResponse>;
    accounts: Accounts;
    instances: Instances;
    privateEndpointConnections: PrivateEndpointConnections;
    privateLinkResources: PrivateLinkResources;
    privateEndpointConnectionProxies: PrivateEndpointConnectionProxies;
    operations: Operations;
}
//# sourceMappingURL=deviceUpdate.d.ts.map