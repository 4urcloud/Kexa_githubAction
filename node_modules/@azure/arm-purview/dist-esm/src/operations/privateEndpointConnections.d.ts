import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PrivateEndpointConnections } from "../operationsInterfaces";
import { PurviewManagementClient } from "../purviewManagementClient";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import { PrivateEndpointConnection, PrivateEndpointConnectionsListByAccountOptionalParams, PrivateEndpointConnectionsGetOptionalParams, PrivateEndpointConnectionsGetResponse, PrivateEndpointConnectionsCreateOrUpdateOptionalParams, PrivateEndpointConnectionsCreateOrUpdateResponse, PrivateEndpointConnectionsDeleteOptionalParams } from "../models";
/** Class containing PrivateEndpointConnections operations. */
export declare class PrivateEndpointConnectionsImpl implements PrivateEndpointConnections {
    private readonly client;
    /**
     * Initialize a new instance of the class PrivateEndpointConnections class.
     * @param client Reference to the service client
     */
    constructor(client: PurviewManagementClient);
    /**
     * Get private endpoint connections for account
     * @param resourceGroupName The resource group name.
     * @param accountName The name of the account.
     * @param options The options parameters.
     */
    listByAccount(resourceGroupName: string, accountName: string, options?: PrivateEndpointConnectionsListByAccountOptionalParams): PagedAsyncIterableIterator<PrivateEndpointConnection>;
    private listByAccountPagingPage;
    private listByAccountPagingAll;
    /**
     * Get private endpoint connections for account
     * @param resourceGroupName The resource group name.
     * @param accountName The name of the account.
     * @param options The options parameters.
     */
    private _listByAccount;
    /**
     * Get a private endpoint connection
     * @param resourceGroupName The resource group name.
     * @param accountName The name of the account.
     * @param privateEndpointConnectionName Name of the private endpoint connection.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, accountName: string, privateEndpointConnectionName: string, options?: PrivateEndpointConnectionsGetOptionalParams): Promise<PrivateEndpointConnectionsGetResponse>;
    /**
     * Create or update a private endpoint connection
     * @param resourceGroupName The resource group name.
     * @param accountName The name of the account.
     * @param privateEndpointConnectionName Name of the private endpoint connection.
     * @param request The request.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, accountName: string, privateEndpointConnectionName: string, request: PrivateEndpointConnection, options?: PrivateEndpointConnectionsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<PrivateEndpointConnectionsCreateOrUpdateResponse>, PrivateEndpointConnectionsCreateOrUpdateResponse>>;
    /**
     * Create or update a private endpoint connection
     * @param resourceGroupName The resource group name.
     * @param accountName The name of the account.
     * @param privateEndpointConnectionName Name of the private endpoint connection.
     * @param request The request.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, accountName: string, privateEndpointConnectionName: string, request: PrivateEndpointConnection, options?: PrivateEndpointConnectionsCreateOrUpdateOptionalParams): Promise<PrivateEndpointConnectionsCreateOrUpdateResponse>;
    /**
     * Delete a private endpoint connection
     * @param resourceGroupName The resource group name.
     * @param accountName The name of the account.
     * @param privateEndpointConnectionName Name of the private endpoint connection.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, accountName: string, privateEndpointConnectionName: string, options?: PrivateEndpointConnectionsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Delete a private endpoint connection
     * @param resourceGroupName The resource group name.
     * @param accountName The name of the account.
     * @param privateEndpointConnectionName Name of the private endpoint connection.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, accountName: string, privateEndpointConnectionName: string, options?: PrivateEndpointConnectionsDeleteOptionalParams): Promise<void>;
    /**
     * ListByAccountNext
     * @param resourceGroupName The resource group name.
     * @param accountName The name of the account.
     * @param nextLink The nextLink from the previous successful call to the ListByAccount method.
     * @param options The options parameters.
     */
    private _listByAccountNext;
}
//# sourceMappingURL=privateEndpointConnections.d.ts.map