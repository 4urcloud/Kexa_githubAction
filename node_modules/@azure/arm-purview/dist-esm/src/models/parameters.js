/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { Account as AccountMapper, AccountUpdateParameters as AccountUpdateParametersMapper, CollectionAdminUpdate as CollectionAdminUpdateMapper, CheckNameAvailabilityRequest as CheckNameAvailabilityRequestMapper, DefaultAccountPayload as DefaultAccountPayloadMapper, PrivateEndpointConnection as PrivateEndpointConnectionMapper } from "../models/mappers";
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2021-07-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const skipToken = {
    parameterPath: ["options", "skipToken"],
    mapper: {
        serializedName: "$skipToken",
        type: {
            name: "String"
        }
    }
};
export const accountName = {
    parameterPath: "accountName",
    mapper: {
        serializedName: "accountName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export const account = {
    parameterPath: "account",
    mapper: AccountMapper
};
export const accountUpdateParameters = {
    parameterPath: "accountUpdateParameters",
    mapper: AccountUpdateParametersMapper
};
export const collectionAdminUpdate = {
    parameterPath: "collectionAdminUpdate",
    mapper: CollectionAdminUpdateMapper
};
export const checkNameAvailabilityRequest = {
    parameterPath: "checkNameAvailabilityRequest",
    mapper: CheckNameAvailabilityRequestMapper
};
export const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const scopeTenantId = {
    parameterPath: "scopeTenantId",
    mapper: {
        serializedName: "scopeTenantId",
        required: true,
        type: {
            name: "Uuid"
        }
    }
};
export const scopeType = {
    parameterPath: "scopeType",
    mapper: {
        serializedName: "scopeType",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const scope = {
    parameterPath: ["options", "scope"],
    mapper: {
        serializedName: "scope",
        type: {
            name: "String"
        }
    }
};
export const defaultAccountPayload = {
    parameterPath: "defaultAccountPayload",
    mapper: DefaultAccountPayloadMapper
};
export const privateEndpointConnectionName = {
    parameterPath: "privateEndpointConnectionName",
    mapper: {
        serializedName: "privateEndpointConnectionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const request = {
    parameterPath: "request",
    mapper: PrivateEndpointConnectionMapper
};
export const groupId = {
    parameterPath: "groupId",
    mapper: {
        serializedName: "groupId",
        required: true,
        type: {
            name: "String"
        }
    }
};
//# sourceMappingURL=parameters.js.map