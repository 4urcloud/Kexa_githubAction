'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var coreClient = require('@azure/core-client');
var coreRestPipeline = require('@azure/core-rest-pipeline');
var coreLro = require('@azure/core-lro');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var coreClient__namespace = /*#__PURE__*/_interopNamespace(coreClient);
var coreRestPipeline__namespace = /*#__PURE__*/_interopNamespace(coreRestPipeline);

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const pageMap = new WeakMap();
/**
 * Given a result page from a pageable operation, returns a
 * continuation token that can be used to begin paging from
 * that point later.
 * @param page A result object from calling .byPage() on a paged operation.
 * @returns The continuation token that can be passed into byPage().
 */
function getContinuationToken(page) {
    var _a;
    if (typeof page !== "object" || page === null) {
        return undefined;
    }
    return (_a = pageMap.get(page)) === null || _a === void 0 ? void 0 : _a.continuationToken;
}
function setContinuationToken(page, continuationToken) {
    var _a;
    if (typeof page !== "object" || page === null || !continuationToken) {
        return;
    }
    const pageInfo = (_a = pageMap.get(page)) !== null && _a !== void 0 ? _a : {};
    pageInfo.continuationToken = continuationToken;
    pageMap.set(page, pageInfo);
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link Status} that the service accepts. */
exports.KnownStatus = void 0;
(function (KnownStatus) {
    /** Unknown */
    KnownStatus["Unknown"] = "Unknown";
    /** Pending */
    KnownStatus["Pending"] = "Pending";
    /** Approved */
    KnownStatus["Approved"] = "Approved";
    /** Rejected */
    KnownStatus["Rejected"] = "Rejected";
    /** Disconnected */
    KnownStatus["Disconnected"] = "Disconnected";
})(exports.KnownStatus || (exports.KnownStatus = {}));
/** Known values of {@link ProvisioningState} that the service accepts. */
exports.KnownProvisioningState = void 0;
(function (KnownProvisioningState) {
    /** Unknown */
    KnownProvisioningState["Unknown"] = "Unknown";
    /** Creating */
    KnownProvisioningState["Creating"] = "Creating";
    /** Moving */
    KnownProvisioningState["Moving"] = "Moving";
    /** Deleting */
    KnownProvisioningState["Deleting"] = "Deleting";
    /** SoftDeleting */
    KnownProvisioningState["SoftDeleting"] = "SoftDeleting";
    /** SoftDeleted */
    KnownProvisioningState["SoftDeleted"] = "SoftDeleted";
    /** Failed */
    KnownProvisioningState["Failed"] = "Failed";
    /** Succeeded */
    KnownProvisioningState["Succeeded"] = "Succeeded";
    /** Canceled */
    KnownProvisioningState["Canceled"] = "Canceled";
})(exports.KnownProvisioningState || (exports.KnownProvisioningState = {}));
/** Known values of {@link PublicNetworkAccess} that the service accepts. */
exports.KnownPublicNetworkAccess = void 0;
(function (KnownPublicNetworkAccess) {
    /** NotSpecified */
    KnownPublicNetworkAccess["NotSpecified"] = "NotSpecified";
    /** Enabled */
    KnownPublicNetworkAccess["Enabled"] = "Enabled";
    /** Disabled */
    KnownPublicNetworkAccess["Disabled"] = "Disabled";
})(exports.KnownPublicNetworkAccess || (exports.KnownPublicNetworkAccess = {}));
/** Known values of {@link Name} that the service accepts. */
exports.KnownName = void 0;
(function (KnownName) {
    /** Standard */
    KnownName["Standard"] = "Standard";
})(exports.KnownName || (exports.KnownName = {}));
/** Known values of {@link Type} that the service accepts. */
exports.KnownType = void 0;
(function (KnownType) {
    /** None */
    KnownType["None"] = "None";
    /** SystemAssigned */
    KnownType["SystemAssigned"] = "SystemAssigned";
    /** UserAssigned */
    KnownType["UserAssigned"] = "UserAssigned";
})(exports.KnownType || (exports.KnownType = {}));
/** Known values of {@link CreatedByType} that the service accepts. */
exports.KnownCreatedByType = void 0;
(function (KnownCreatedByType) {
    /** User */
    KnownCreatedByType["User"] = "User";
    /** Application */
    KnownCreatedByType["Application"] = "Application";
    /** ManagedIdentity */
    KnownCreatedByType["ManagedIdentity"] = "ManagedIdentity";
    /** Key */
    KnownCreatedByType["Key"] = "Key";
})(exports.KnownCreatedByType || (exports.KnownCreatedByType = {}));
/** Known values of {@link LastModifiedByType} that the service accepts. */
exports.KnownLastModifiedByType = void 0;
(function (KnownLastModifiedByType) {
    /** User */
    KnownLastModifiedByType["User"] = "User";
    /** Application */
    KnownLastModifiedByType["Application"] = "Application";
    /** ManagedIdentity */
    KnownLastModifiedByType["ManagedIdentity"] = "ManagedIdentity";
    /** Key */
    KnownLastModifiedByType["Key"] = "Key";
})(exports.KnownLastModifiedByType || (exports.KnownLastModifiedByType = {}));
/** Known values of {@link ScopeType} that the service accepts. */
exports.KnownScopeType = void 0;
(function (KnownScopeType) {
    /** Tenant */
    KnownScopeType["Tenant"] = "Tenant";
    /** Subscription */
    KnownScopeType["Subscription"] = "Subscription";
})(exports.KnownScopeType || (exports.KnownScopeType = {}));
/** Known values of {@link Reason} that the service accepts. */
exports.KnownReason = void 0;
(function (KnownReason) {
    /** Invalid */
    KnownReason["Invalid"] = "Invalid";
    /** AlreadyExists */
    KnownReason["AlreadyExists"] = "AlreadyExists";
})(exports.KnownReason || (exports.KnownReason = {}));

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const AccountList = {
    type: {
        name: "Composite",
        className: "AccountList",
        modelProperties: {
            count: {
                serializedName: "count",
                type: {
                    name: "Number"
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Account"
                        }
                    }
                }
            }
        }
    }
};
const AccountProperties = {
    type: {
        name: "Composite",
        className: "AccountProperties",
        modelProperties: {
            cloudConnectors: {
                serializedName: "cloudConnectors",
                type: {
                    name: "Composite",
                    className: "CloudConnectors"
                }
            },
            createdAt: {
                serializedName: "createdAt",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            createdBy: {
                serializedName: "createdBy",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            createdByObjectId: {
                serializedName: "createdByObjectId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            endpoints: {
                serializedName: "endpoints",
                type: {
                    name: "Composite",
                    className: "AccountPropertiesEndpoints"
                }
            },
            friendlyName: {
                serializedName: "friendlyName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            managedResourceGroupName: {
                serializedName: "managedResourceGroupName",
                type: {
                    name: "String"
                }
            },
            managedResources: {
                serializedName: "managedResources",
                type: {
                    name: "Composite",
                    className: "AccountPropertiesManagedResources"
                }
            },
            privateEndpointConnections: {
                serializedName: "privateEndpointConnections",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrivateEndpointConnection"
                        }
                    }
                }
            },
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            publicNetworkAccess: {
                defaultValue: "Enabled",
                serializedName: "publicNetworkAccess",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CloudConnectors = {
    type: {
        name: "Composite",
        className: "CloudConnectors",
        modelProperties: {
            awsExternalId: {
                serializedName: "awsExternalId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AccountEndpoints = {
    type: {
        name: "Composite",
        className: "AccountEndpoints",
        modelProperties: {
            catalog: {
                serializedName: "catalog",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            guardian: {
                serializedName: "guardian",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            scan: {
                serializedName: "scan",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ManagedResources = {
    type: {
        name: "Composite",
        className: "ManagedResources",
        modelProperties: {
            eventHubNamespace: {
                serializedName: "eventHubNamespace",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            resourceGroup: {
                serializedName: "resourceGroup",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            storageAccount: {
                serializedName: "storageAccount",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateEndpoint = {
    type: {
        name: "Composite",
        className: "PrivateEndpoint",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateLinkServiceConnectionState = {
    type: {
        name: "Composite",
        className: "PrivateLinkServiceConnectionState",
        modelProperties: {
            actionsRequired: {
                serializedName: "actionsRequired",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ProxyResource = {
    type: {
        name: "Composite",
        className: "ProxyResource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AccountSkuAutoGenerated = {
    type: {
        name: "Composite",
        className: "AccountSkuAutoGenerated",
        modelProperties: {
            capacity: {
                serializedName: "capacity",
                type: {
                    name: "Number"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TrackedResource = {
    type: {
        name: "Composite",
        className: "TrackedResource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "Identity"
                }
            },
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "TrackedResourceSystemData"
                }
            },
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Identity = {
    type: {
        name: "Composite",
        className: "Identity",
        modelProperties: {
            principalId: {
                serializedName: "principalId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            tenantId: {
                serializedName: "tenantId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            userAssignedIdentities: {
                serializedName: "userAssignedIdentities",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Composite", className: "UserAssignedIdentity" }
                    }
                }
            }
        }
    }
};
const UserAssignedIdentity = {
    type: {
        name: "Composite",
        className: "UserAssignedIdentity",
        modelProperties: {
            clientId: {
                serializedName: "clientId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            principalId: {
                serializedName: "principalId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SystemData = {
    type: {
        name: "Composite",
        className: "SystemData",
        modelProperties: {
            createdAt: {
                serializedName: "createdAt",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            createdBy: {
                serializedName: "createdBy",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            createdByType: {
                serializedName: "createdByType",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            lastModifiedAt: {
                serializedName: "lastModifiedAt",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            lastModifiedBy: {
                serializedName: "lastModifiedBy",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            lastModifiedByType: {
                serializedName: "lastModifiedByType",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ErrorResponseModel = {
    type: {
        name: "Composite",
        className: "ErrorResponseModel",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorResponseModelError"
                }
            }
        }
    }
};
const ErrorModel = {
    type: {
        name: "Composite",
        className: "ErrorModel",
        modelProperties: {
            code: {
                serializedName: "code",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorModel"
                        }
                    }
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AccountUpdateParameters = {
    type: {
        name: "Composite",
        className: "AccountUpdateParameters",
        modelProperties: {
            identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "Identity"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "AccountProperties"
                }
            },
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }
        }
    }
};
const AccessKeys = {
    type: {
        name: "Composite",
        className: "AccessKeys",
        modelProperties: {
            atlasKafkaPrimaryEndpoint: {
                serializedName: "atlasKafkaPrimaryEndpoint",
                type: {
                    name: "String"
                }
            },
            atlasKafkaSecondaryEndpoint: {
                serializedName: "atlasKafkaSecondaryEndpoint",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CollectionAdminUpdate = {
    type: {
        name: "Composite",
        className: "CollectionAdminUpdate",
        modelProperties: {
            objectId: {
                serializedName: "objectId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DefaultAccountPayload = {
    type: {
        name: "Composite",
        className: "DefaultAccountPayload",
        modelProperties: {
            accountName: {
                serializedName: "accountName",
                type: {
                    name: "String"
                }
            },
            resourceGroupName: {
                serializedName: "resourceGroupName",
                type: {
                    name: "String"
                }
            },
            scope: {
                serializedName: "scope",
                type: {
                    name: "String"
                }
            },
            scopeTenantId: {
                serializedName: "scopeTenantId",
                type: {
                    name: "String"
                }
            },
            scopeType: {
                serializedName: "scopeType",
                type: {
                    name: "String"
                }
            },
            subscriptionId: {
                serializedName: "subscriptionId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationList = {
    type: {
        name: "Composite",
        className: "OperationList",
        modelProperties: {
            count: {
                serializedName: "count",
                type: {
                    name: "Number"
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Operation"
                        }
                    }
                }
            }
        }
    }
};
const Operation = {
    type: {
        name: "Composite",
        className: "Operation",
        modelProperties: {
            display: {
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "OperationDisplay"
                }
            },
            isDataAction: {
                serializedName: "isDataAction",
                type: {
                    name: "Boolean"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            origin: {
                serializedName: "origin",
                type: {
                    name: "String"
                }
            },
            serviceSpecification: {
                serializedName: "properties.serviceSpecification",
                type: {
                    name: "Composite",
                    className: "OperationMetaServiceSpecification"
                }
            }
        }
    }
};
const OperationDisplay = {
    type: {
        name: "Composite",
        className: "OperationDisplay",
        modelProperties: {
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                type: {
                    name: "String"
                }
            },
            provider: {
                serializedName: "provider",
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "resource",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationMetaServiceSpecification = {
    type: {
        name: "Composite",
        className: "OperationMetaServiceSpecification",
        modelProperties: {
            logSpecifications: {
                serializedName: "logSpecifications",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "OperationMetaLogSpecification"
                        }
                    }
                }
            },
            metricSpecifications: {
                serializedName: "metricSpecifications",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "OperationMetaMetricSpecification"
                        }
                    }
                }
            }
        }
    }
};
const OperationMetaLogSpecification = {
    type: {
        name: "Composite",
        className: "OperationMetaLogSpecification",
        modelProperties: {
            blobDuration: {
                serializedName: "blobDuration",
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationMetaMetricSpecification = {
    type: {
        name: "Composite",
        className: "OperationMetaMetricSpecification",
        modelProperties: {
            aggregationType: {
                serializedName: "aggregationType",
                type: {
                    name: "String"
                }
            },
            dimensions: {
                serializedName: "dimensions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DimensionProperties"
                        }
                    }
                }
            },
            displayDescription: {
                serializedName: "displayDescription",
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            },
            enableRegionalMdmAccount: {
                serializedName: "enableRegionalMdmAccount",
                type: {
                    name: "String"
                }
            },
            internalMetricName: {
                serializedName: "internalMetricName",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            resourceIdDimensionNameOverride: {
                serializedName: "resourceIdDimensionNameOverride",
                type: {
                    name: "String"
                }
            },
            sourceMdmNamespace: {
                serializedName: "sourceMdmNamespace",
                type: {
                    name: "String"
                }
            },
            supportedAggregationTypes: {
                serializedName: "supportedAggregationTypes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            supportedTimeGrainTypes: {
                serializedName: "supportedTimeGrainTypes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            unit: {
                serializedName: "unit",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DimensionProperties = {
    type: {
        name: "Composite",
        className: "DimensionProperties",
        modelProperties: {
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            toBeExportedForCustomer: {
                serializedName: "toBeExportedForCustomer",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const PrivateEndpointConnectionList = {
    type: {
        name: "Composite",
        className: "PrivateEndpointConnectionList",
        modelProperties: {
            count: {
                serializedName: "count",
                type: {
                    name: "Number"
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrivateEndpointConnection"
                        }
                    }
                }
            }
        }
    }
};
const PrivateLinkResourceList = {
    type: {
        name: "Composite",
        className: "PrivateLinkResourceList",
        modelProperties: {
            count: {
                serializedName: "count",
                type: {
                    name: "Number"
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrivateLinkResource"
                        }
                    }
                }
            }
        }
    }
};
const PrivateLinkResource = {
    type: {
        name: "Composite",
        className: "PrivateLinkResource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "PrivateLinkResourceProperties"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateLinkResourceProperties = {
    type: {
        name: "Composite",
        className: "PrivateLinkResourceProperties",
        modelProperties: {
            groupId: {
                serializedName: "groupId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            requiredMembers: {
                serializedName: "requiredMembers",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            requiredZoneNames: {
                serializedName: "requiredZoneNames",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const CheckNameAvailabilityRequest = {
    type: {
        name: "Composite",
        className: "CheckNameAvailabilityRequest",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CheckNameAvailabilityResult = {
    type: {
        name: "Composite",
        className: "CheckNameAvailabilityResult",
        modelProperties: {
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            },
            nameAvailable: {
                serializedName: "nameAvailable",
                type: {
                    name: "Boolean"
                }
            },
            reason: {
                serializedName: "reason",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AccountPropertiesEndpoints = {
    type: {
        name: "Composite",
        className: "AccountPropertiesEndpoints",
        modelProperties: Object.assign({}, AccountEndpoints.type.modelProperties)
    }
};
const AccountPropertiesManagedResources = {
    type: {
        name: "Composite",
        className: "AccountPropertiesManagedResources",
        modelProperties: Object.assign({}, ManagedResources.type.modelProperties)
    }
};
const PrivateEndpointConnection = {
    type: {
        name: "Composite",
        className: "PrivateEndpointConnection",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { privateEndpoint: {
                serializedName: "properties.privateEndpoint",
                type: {
                    name: "Composite",
                    className: "PrivateEndpoint"
                }
            }, privateLinkServiceConnectionState: {
                serializedName: "properties.privateLinkServiceConnectionState",
                type: {
                    name: "Composite",
                    className: "PrivateLinkServiceConnectionState"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const AccountSku = {
    type: {
        name: "Composite",
        className: "AccountSku",
        modelProperties: Object.assign({}, AccountSkuAutoGenerated.type.modelProperties)
    }
};
const Account = {
    type: {
        name: "Composite",
        className: "Account",
        modelProperties: Object.assign(Object.assign({}, TrackedResource.type.modelProperties), { sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "AccountSku"
                }
            }, cloudConnectors: {
                serializedName: "properties.cloudConnectors",
                type: {
                    name: "Composite",
                    className: "CloudConnectors"
                }
            }, createdAt: {
                serializedName: "properties.createdAt",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, createdBy: {
                serializedName: "properties.createdBy",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, createdByObjectId: {
                serializedName: "properties.createdByObjectId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, endpoints: {
                serializedName: "properties.endpoints",
                type: {
                    name: "Composite",
                    className: "AccountPropertiesEndpoints"
                }
            }, friendlyName: {
                serializedName: "properties.friendlyName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, managedResourceGroupName: {
                serializedName: "properties.managedResourceGroupName",
                type: {
                    name: "String"
                }
            }, managedResources: {
                serializedName: "properties.managedResources",
                type: {
                    name: "Composite",
                    className: "AccountPropertiesManagedResources"
                }
            }, privateEndpointConnections: {
                serializedName: "properties.privateEndpointConnections",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrivateEndpointConnection"
                        }
                    }
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, publicNetworkAccess: {
                defaultValue: "Enabled",
                serializedName: "properties.publicNetworkAccess",
                type: {
                    name: "String"
                }
            } })
    }
};
const TrackedResourceSystemData = {
    type: {
        name: "Composite",
        className: "TrackedResourceSystemData",
        modelProperties: Object.assign({}, SystemData.type.modelProperties)
    }
};
const ErrorResponseModelError = {
    type: {
        name: "Composite",
        className: "ErrorResponseModelError",
        modelProperties: Object.assign({}, ErrorModel.type.modelProperties)
    }
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    AccountList: AccountList,
    AccountProperties: AccountProperties,
    CloudConnectors: CloudConnectors,
    AccountEndpoints: AccountEndpoints,
    ManagedResources: ManagedResources,
    PrivateEndpoint: PrivateEndpoint,
    PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
    ProxyResource: ProxyResource,
    AccountSkuAutoGenerated: AccountSkuAutoGenerated,
    TrackedResource: TrackedResource,
    Identity: Identity,
    UserAssignedIdentity: UserAssignedIdentity,
    SystemData: SystemData,
    ErrorResponseModel: ErrorResponseModel,
    ErrorModel: ErrorModel,
    AccountUpdateParameters: AccountUpdateParameters,
    AccessKeys: AccessKeys,
    CollectionAdminUpdate: CollectionAdminUpdate,
    DefaultAccountPayload: DefaultAccountPayload,
    OperationList: OperationList,
    Operation: Operation,
    OperationDisplay: OperationDisplay,
    OperationMetaServiceSpecification: OperationMetaServiceSpecification,
    OperationMetaLogSpecification: OperationMetaLogSpecification,
    OperationMetaMetricSpecification: OperationMetaMetricSpecification,
    DimensionProperties: DimensionProperties,
    PrivateEndpointConnectionList: PrivateEndpointConnectionList,
    PrivateLinkResourceList: PrivateLinkResourceList,
    PrivateLinkResource: PrivateLinkResource,
    PrivateLinkResourceProperties: PrivateLinkResourceProperties,
    CheckNameAvailabilityRequest: CheckNameAvailabilityRequest,
    CheckNameAvailabilityResult: CheckNameAvailabilityResult,
    AccountPropertiesEndpoints: AccountPropertiesEndpoints,
    AccountPropertiesManagedResources: AccountPropertiesManagedResources,
    PrivateEndpointConnection: PrivateEndpointConnection,
    AccountSku: AccountSku,
    Account: Account,
    TrackedResourceSystemData: TrackedResourceSystemData,
    ErrorResponseModelError: ErrorResponseModelError
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2021-07-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const skipToken = {
    parameterPath: ["options", "skipToken"],
    mapper: {
        serializedName: "$skipToken",
        type: {
            name: "String"
        }
    }
};
const accountName = {
    parameterPath: "accountName",
    mapper: {
        serializedName: "accountName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const account = {
    parameterPath: "account",
    mapper: Account
};
const accountUpdateParameters = {
    parameterPath: "accountUpdateParameters",
    mapper: AccountUpdateParameters
};
const collectionAdminUpdate = {
    parameterPath: "collectionAdminUpdate",
    mapper: CollectionAdminUpdate
};
const checkNameAvailabilityRequest = {
    parameterPath: "checkNameAvailabilityRequest",
    mapper: CheckNameAvailabilityRequest
};
const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const scopeTenantId = {
    parameterPath: "scopeTenantId",
    mapper: {
        serializedName: "scopeTenantId",
        required: true,
        type: {
            name: "Uuid"
        }
    }
};
const scopeType = {
    parameterPath: "scopeType",
    mapper: {
        serializedName: "scopeType",
        required: true,
        type: {
            name: "String"
        }
    }
};
const scope = {
    parameterPath: ["options", "scope"],
    mapper: {
        serializedName: "scope",
        type: {
            name: "String"
        }
    }
};
const defaultAccountPayload = {
    parameterPath: "defaultAccountPayload",
    mapper: DefaultAccountPayload
};
const privateEndpointConnectionName = {
    parameterPath: "privateEndpointConnectionName",
    mapper: {
        serializedName: "privateEndpointConnectionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const request = {
    parameterPath: "request",
    mapper: PrivateEndpointConnection
};
const groupId = {
    parameterPath: "groupId",
    mapper: {
        serializedName: "groupId",
        required: true,
        type: {
            name: "String"
        }
    }
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class LroImpl {
    constructor(sendOperationFn, args, spec, requestPath = spec.path, requestMethod = spec.httpMethod) {
        this.sendOperationFn = sendOperationFn;
        this.args = args;
        this.spec = spec;
        this.requestPath = requestPath;
        this.requestMethod = requestMethod;
    }
    sendInitialRequest() {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            return this.sendOperationFn(this.args, this.spec);
        });
    }
    sendPollRequest(path) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const _a = this.spec, restSpec = tslib.__rest(_a, ["requestBody"]);
            return this.sendOperationFn(this.args, Object.assign(Object.assign({}, restSpec), { path, httpMethod: "GET" }));
        });
    }
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Accounts operations. */
class AccountsImpl {
    /**
     * Initialize a new instance of the class Accounts class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List accounts in ResourceGroup
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName, options) {
        const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByResourceGroupPagingPage(resourceGroupName, options, settings);
            }
        };
    }
    listByResourceGroupPagingPage(resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByResourceGroup(resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByResourceGroupNext(resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByResourceGroupPagingAll(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByResourceGroupPagingPage(resourceGroupName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List accounts in Subscription
     * @param options The options parameters.
     */
    listBySubscription(options) {
        const iter = this.listBySubscriptionPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listBySubscriptionPagingPage(options, settings);
            }
        };
    }
    listBySubscriptionPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listBySubscription(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listBySubscriptionNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listBySubscriptionPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listBySubscriptionPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * List accounts in ResourceGroup
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    _listByResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listByResourceGroupOperationSpec);
    }
    /**
     * List accounts in Subscription
     * @param options The options parameters.
     */
    _listBySubscription(options) {
        return this.client.sendOperationRequest({ options }, listBySubscriptionOperationSpec);
    }
    /**
     * Get an account
     * @param resourceGroupName The resource group name.
     * @param accountName The name of the account.
     * @param options The options parameters.
     */
    get(resourceGroupName, accountName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, options }, getOperationSpec$2);
    }
    /**
     * Creates or updates an account
     * @param resourceGroupName The resource group name.
     * @param accountName The name of the account.
     * @param account The account.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, accountName, account, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, accountName, account, options }, createOrUpdateOperationSpec$1);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Creates or updates an account
     * @param resourceGroupName The resource group name.
     * @param accountName The name of the account.
     * @param account The account.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, accountName, account, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, accountName, account, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Deletes an account resource
     * @param resourceGroupName The resource group name.
     * @param accountName The name of the account.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, accountName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, accountName, options }, deleteOperationSpec$1);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes an account resource
     * @param resourceGroupName The resource group name.
     * @param accountName The name of the account.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, accountName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, accountName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Updates an account
     * @param resourceGroupName The resource group name.
     * @param accountName The name of the account.
     * @param accountUpdateParameters The account update parameters.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, accountName, accountUpdateParameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, accountName, accountUpdateParameters, options }, updateOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Updates an account
     * @param resourceGroupName The resource group name.
     * @param accountName The name of the account.
     * @param accountUpdateParameters The account update parameters.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, accountName, accountUpdateParameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, accountName, accountUpdateParameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * List the authorization keys associated with this account.
     * @param resourceGroupName The resource group name.
     * @param accountName The name of the account.
     * @param options The options parameters.
     */
    listKeys(resourceGroupName, accountName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, options }, listKeysOperationSpec);
    }
    /**
     * Add the administrator for root collection associated with this account.
     * @param resourceGroupName The resource group name.
     * @param accountName The name of the account.
     * @param collectionAdminUpdate The collection admin update payload.
     * @param options The options parameters.
     */
    addRootCollectionAdmin(resourceGroupName, accountName, collectionAdminUpdate, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, collectionAdminUpdate, options }, addRootCollectionAdminOperationSpec);
    }
    /**
     * Checks if account name is available.
     * @param checkNameAvailabilityRequest The check name availability request.
     * @param options The options parameters.
     */
    checkNameAvailability(checkNameAvailabilityRequest, options) {
        return this.client.sendOperationRequest({ checkNameAvailabilityRequest, options }, checkNameAvailabilityOperationSpec);
    }
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName The resource group name.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    _listByResourceGroupNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, listByResourceGroupNextOperationSpec);
    }
    /**
     * ListBySubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
     * @param options The options parameters.
     */
    _listBySubscriptionNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listBySubscriptionNextOperationSpec);
    }
}
// Operation Specifications
const serializer$4 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Purview/accounts",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AccountList
        },
        default: {
            bodyMapper: ErrorResponseModel
        }
    },
    queryParameters: [apiVersion, skipToken],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const listBySubscriptionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Purview/accounts",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AccountList
        },
        default: {
            bodyMapper: ErrorResponseModel
        }
    },
    queryParameters: [apiVersion, skipToken],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$4
};
const getOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Purview/accounts/{accountName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Account
        },
        default: {
            bodyMapper: ErrorResponseModel
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const createOrUpdateOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Purview/accounts/{accountName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Account
        },
        201: {
            bodyMapper: Account
        },
        202: {
            bodyMapper: Account
        },
        204: {
            bodyMapper: Account
        },
        default: {
            bodyMapper: ErrorResponseModel
        }
    },
    requestBody: account,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$4
};
const deleteOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Purview/accounts/{accountName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponseModel
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Purview/accounts/{accountName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Account
        },
        201: {
            bodyMapper: Account
        },
        202: {
            bodyMapper: Account
        },
        204: {
            bodyMapper: Account
        },
        default: {
            bodyMapper: ErrorResponseModel
        }
    },
    requestBody: accountUpdateParameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$4
};
const listKeysOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Purview/accounts/{accountName}/listkeys",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: AccessKeys
        },
        default: {
            bodyMapper: ErrorResponseModel
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const addRootCollectionAdminOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Purview/accounts/{accountName}/addRootCollectionAdmin",
    httpMethod: "POST",
    responses: {
        200: {},
        default: {
            bodyMapper: ErrorResponseModel
        }
    },
    requestBody: collectionAdminUpdate,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$4
};
const checkNameAvailabilityOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Purview/checkNameAvailability",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: CheckNameAvailabilityResult
        },
        default: {
            bodyMapper: ErrorResponseModel
        }
    },
    requestBody: checkNameAvailabilityRequest,
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$4
};
const listByResourceGroupNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AccountList
        },
        default: {
            bodyMapper: ErrorResponseModel
        }
    },
    queryParameters: [apiVersion, skipToken],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const listBySubscriptionNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AccountList
        },
        default: {
            bodyMapper: ErrorResponseModel
        }
    },
    queryParameters: [apiVersion, skipToken],
    urlParameters: [
        $host,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$4
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing DefaultAccounts operations. */
class DefaultAccountsImpl {
    /**
     * Initialize a new instance of the class DefaultAccounts class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get the default account for the scope.
     * @param scopeTenantId The tenant ID.
     * @param scopeType The scope for the default account.
     * @param options The options parameters.
     */
    get(scopeTenantId, scopeType, options) {
        return this.client.sendOperationRequest({ scopeTenantId, scopeType, options }, getOperationSpec$1);
    }
    /**
     * Sets the default account for the scope.
     * @param defaultAccountPayload The payload containing the default account information and the scope.
     * @param options The options parameters.
     */
    set(defaultAccountPayload, options) {
        return this.client.sendOperationRequest({ defaultAccountPayload, options }, setOperationSpec);
    }
    /**
     * Removes the default account from the scope.
     * @param scopeTenantId The tenant ID.
     * @param scopeType The scope for the default account.
     * @param options The options parameters.
     */
    remove(scopeTenantId, scopeType, options) {
        return this.client.sendOperationRequest({ scopeTenantId, scopeType, options }, removeOperationSpec);
    }
}
// Operation Specifications
const serializer$3 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$1 = {
    path: "/providers/Microsoft.Purview/getDefaultAccount",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DefaultAccountPayload
        },
        default: {
            bodyMapper: ErrorResponseModel
        }
    },
    queryParameters: [
        apiVersion,
        scopeTenantId,
        scopeType,
        scope
    ],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer: serializer$3
};
const setOperationSpec = {
    path: "/providers/Microsoft.Purview/setDefaultAccount",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: DefaultAccountPayload
        },
        default: {
            bodyMapper: ErrorResponseModel
        }
    },
    requestBody: defaultAccountPayload,
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$3
};
const removeOperationSpec = {
    path: "/providers/Microsoft.Purview/removeDefaultAccount",
    httpMethod: "POST",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: ErrorResponseModel
        }
    },
    queryParameters: [
        apiVersion,
        scopeTenantId,
        scopeType,
        scope
    ],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer: serializer$3
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Operations operations. */
class OperationsImpl {
    /**
     * Initialize a new instance of the class Operations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List of available operations
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List of available operations
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec);
    }
}
// Operation Specifications
const serializer$2 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/providers/Microsoft.Purview/operations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationList
        },
        default: {
            bodyMapper: ErrorResponseModel
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer: serializer$2
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationList
        },
        default: {
            bodyMapper: ErrorResponseModel
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, nextLink],
    headerParameters: [accept],
    serializer: serializer$2
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing PrivateEndpointConnections operations. */
class PrivateEndpointConnectionsImpl {
    /**
     * Initialize a new instance of the class PrivateEndpointConnections class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get private endpoint connections for account
     * @param resourceGroupName The resource group name.
     * @param accountName The name of the account.
     * @param options The options parameters.
     */
    listByAccount(resourceGroupName, accountName, options) {
        const iter = this.listByAccountPagingAll(resourceGroupName, accountName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByAccountPagingPage(resourceGroupName, accountName, options, settings);
            }
        };
    }
    listByAccountPagingPage(resourceGroupName, accountName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByAccountPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByAccount(resourceGroupName, accountName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByAccountNext(resourceGroupName, accountName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByAccountPagingAll(resourceGroupName, accountName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByAccountPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByAccountPagingPage(resourceGroupName, accountName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get private endpoint connections for account
     * @param resourceGroupName The resource group name.
     * @param accountName The name of the account.
     * @param options The options parameters.
     */
    _listByAccount(resourceGroupName, accountName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, options }, listByAccountOperationSpec$1);
    }
    /**
     * Get a private endpoint connection
     * @param resourceGroupName The resource group name.
     * @param accountName The name of the account.
     * @param privateEndpointConnectionName Name of the private endpoint connection.
     * @param options The options parameters.
     */
    get(resourceGroupName, accountName, privateEndpointConnectionName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            accountName,
            privateEndpointConnectionName,
            options
        }, getOperationSpec);
    }
    /**
     * Create or update a private endpoint connection
     * @param resourceGroupName The resource group name.
     * @param accountName The name of the account.
     * @param privateEndpointConnectionName Name of the private endpoint connection.
     * @param request The request.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, accountName, privateEndpointConnectionName, request, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                accountName,
                privateEndpointConnectionName,
                request,
                options
            }, createOrUpdateOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create or update a private endpoint connection
     * @param resourceGroupName The resource group name.
     * @param accountName The name of the account.
     * @param privateEndpointConnectionName Name of the private endpoint connection.
     * @param request The request.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, accountName, privateEndpointConnectionName, request, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, accountName, privateEndpointConnectionName, request, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Delete a private endpoint connection
     * @param resourceGroupName The resource group name.
     * @param accountName The name of the account.
     * @param privateEndpointConnectionName Name of the private endpoint connection.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, accountName, privateEndpointConnectionName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                accountName,
                privateEndpointConnectionName,
                options
            }, deleteOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Delete a private endpoint connection
     * @param resourceGroupName The resource group name.
     * @param accountName The name of the account.
     * @param privateEndpointConnectionName Name of the private endpoint connection.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, accountName, privateEndpointConnectionName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, accountName, privateEndpointConnectionName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * ListByAccountNext
     * @param resourceGroupName The resource group name.
     * @param accountName The name of the account.
     * @param nextLink The nextLink from the previous successful call to the ListByAccount method.
     * @param options The options parameters.
     */
    _listByAccountNext(resourceGroupName, accountName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, nextLink, options }, listByAccountNextOperationSpec$1);
    }
}
// Operation Specifications
const serializer$1 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByAccountOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Purview/accounts/{accountName}/privateEndpointConnections",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PrivateEndpointConnectionList
        },
        default: {
            bodyMapper: ErrorResponseModel
        }
    },
    queryParameters: [apiVersion, skipToken],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Purview/accounts/{accountName}/privateEndpointConnections/{privateEndpointConnectionName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PrivateEndpointConnection
        },
        default: {
            bodyMapper: ErrorResponseModel
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        privateEndpointConnectionName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Purview/accounts/{accountName}/privateEndpointConnections/{privateEndpointConnectionName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: PrivateEndpointConnection
        },
        201: {
            bodyMapper: PrivateEndpointConnection
        },
        202: {
            bodyMapper: PrivateEndpointConnection
        },
        204: {
            bodyMapper: PrivateEndpointConnection
        },
        default: {
            bodyMapper: ErrorResponseModel
        }
    },
    requestBody: request,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        privateEndpointConnectionName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$1
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Purview/accounts/{accountName}/privateEndpointConnections/{privateEndpointConnectionName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponseModel
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        privateEndpointConnectionName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listByAccountNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PrivateEndpointConnectionList
        },
        default: {
            bodyMapper: ErrorResponseModel
        }
    },
    queryParameters: [apiVersion, skipToken],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$1
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing PrivateLinkResources operations. */
class PrivateLinkResourcesImpl {
    /**
     * Initialize a new instance of the class PrivateLinkResources class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets a list of privately linkable resources for an account
     * @param resourceGroupName The resource group name.
     * @param accountName The name of the account.
     * @param options The options parameters.
     */
    listByAccount(resourceGroupName, accountName, options) {
        const iter = this.listByAccountPagingAll(resourceGroupName, accountName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByAccountPagingPage(resourceGroupName, accountName, options, settings);
            }
        };
    }
    listByAccountPagingPage(resourceGroupName, accountName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByAccountPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByAccount(resourceGroupName, accountName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByAccountNext(resourceGroupName, accountName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByAccountPagingAll(resourceGroupName, accountName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByAccountPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByAccountPagingPage(resourceGroupName, accountName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets a list of privately linkable resources for an account
     * @param resourceGroupName The resource group name.
     * @param accountName The name of the account.
     * @param options The options parameters.
     */
    _listByAccount(resourceGroupName, accountName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, options }, listByAccountOperationSpec);
    }
    /**
     * Gets a privately linkable resources for an account with given group identifier
     * @param resourceGroupName The resource group name.
     * @param accountName The name of the account.
     * @param groupId The group identifier.
     * @param options The options parameters.
     */
    getByGroupId(resourceGroupName, accountName, groupId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, groupId, options }, getByGroupIdOperationSpec);
    }
    /**
     * ListByAccountNext
     * @param resourceGroupName The resource group name.
     * @param accountName The name of the account.
     * @param nextLink The nextLink from the previous successful call to the ListByAccount method.
     * @param options The options parameters.
     */
    _listByAccountNext(resourceGroupName, accountName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, nextLink, options }, listByAccountNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByAccountOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Purview/accounts/{accountName}/privateLinkResources",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PrivateLinkResourceList
        },
        default: {
            bodyMapper: ErrorResponseModel
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName
    ],
    headerParameters: [accept],
    serializer
};
const getByGroupIdOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Purview/accounts/{accountName}/privateLinkResources/{groupId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PrivateLinkResource
        },
        default: {
            bodyMapper: ErrorResponseModel
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        groupId
    ],
    headerParameters: [accept],
    serializer
};
const listByAccountNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PrivateLinkResourceList
        },
        default: {
            bodyMapper: ErrorResponseModel
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        nextLink
    ],
    headerParameters: [accept],
    serializer
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class PurviewManagementClient extends coreClient__namespace.ServiceClient {
    /**
     * Initializes a new instance of the PurviewManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The subscription identifier
     * @param options The parameter options
     */
    constructor(credentials, subscriptionId, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        if (subscriptionId === undefined) {
            throw new Error("'subscriptionId' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-purview/1.1.0`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName
            });
            this.pipeline.addPolicy(coreRestPipeline__namespace.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient__namespace.authorizeRequestOnClaimChallenge
                }
            }));
        }
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.apiVersion = options.apiVersion || "2021-07-01";
        this.accounts = new AccountsImpl(this);
        this.defaultAccounts = new DefaultAccountsImpl(this);
        this.operations = new OperationsImpl(this);
        this.privateEndpointConnections = new PrivateEndpointConnectionsImpl(this);
        this.privateLinkResources = new PrivateLinkResourcesImpl(this);
        this.addCustomApiVersionPolicy(options.apiVersion);
    }
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    addCustomApiVersionPolicy(apiVersion) {
        if (!apiVersion) {
            return;
        }
        const apiVersionPolicy = {
            name: "CustomApiVersionPolicy",
            sendRequest(request, next) {
                return tslib.__awaiter(this, void 0, void 0, function* () {
                    const param = request.url.split("?");
                    if (param.length > 1) {
                        const newParams = param[1].split("&").map((item) => {
                            if (item.indexOf("api-version") > -1) {
                                return "api-version=" + apiVersion;
                            }
                            else {
                                return item;
                            }
                        });
                        request.url = param[0] + "?" + newParams.join("&");
                    }
                    return next(request);
                });
            }
        };
        this.pipeline.addPolicy(apiVersionPolicy);
    }
}

exports.PurviewManagementClient = PurviewManagementClient;
exports.getContinuationToken = getContinuationToken;
//# sourceMappingURL=index.js.map
