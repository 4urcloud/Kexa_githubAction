import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { UserAssignedIdentities } from "../operationsInterfaces";
import { ManagedServiceIdentityClient } from "../managedServiceIdentityClient";
import { Identity, UserAssignedIdentitiesListBySubscriptionOptionalParams, UserAssignedIdentitiesListByResourceGroupOptionalParams, UserAssignedIdentitiesCreateOrUpdateOptionalParams, UserAssignedIdentitiesCreateOrUpdateResponse, IdentityUpdate, UserAssignedIdentitiesUpdateOptionalParams, UserAssignedIdentitiesUpdateResponse, UserAssignedIdentitiesGetOptionalParams, UserAssignedIdentitiesGetResponse, UserAssignedIdentitiesDeleteOptionalParams } from "../models";
/** Class containing UserAssignedIdentities operations. */
export declare class UserAssignedIdentitiesImpl implements UserAssignedIdentities {
    private readonly client;
    /**
     * Initialize a new instance of the class UserAssignedIdentities class.
     * @param client Reference to the service client
     */
    constructor(client: ManagedServiceIdentityClient);
    /**
     * Lists all the userAssignedIdentities available under the specified subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: UserAssignedIdentitiesListBySubscriptionOptionalParams): PagedAsyncIterableIterator<Identity>;
    private listBySubscriptionPagingPage;
    private listBySubscriptionPagingAll;
    /**
     * Lists all the userAssignedIdentities available under the specified ResourceGroup.
     * @param resourceGroupName The name of the Resource Group to which the identity belongs.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: UserAssignedIdentitiesListByResourceGroupOptionalParams): PagedAsyncIterableIterator<Identity>;
    private listByResourceGroupPagingPage;
    private listByResourceGroupPagingAll;
    /**
     * Lists all the userAssignedIdentities available under the specified subscription.
     * @param options The options parameters.
     */
    private _listBySubscription;
    /**
     * Lists all the userAssignedIdentities available under the specified ResourceGroup.
     * @param resourceGroupName The name of the Resource Group to which the identity belongs.
     * @param options The options parameters.
     */
    private _listByResourceGroup;
    /**
     * Create or update an identity in the specified subscription and resource group.
     * @param resourceGroupName The name of the Resource Group to which the identity belongs.
     * @param resourceName The name of the identity resource.
     * @param parameters Parameters to create or update the identity
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, resourceName: string, parameters: Identity, options?: UserAssignedIdentitiesCreateOrUpdateOptionalParams): Promise<UserAssignedIdentitiesCreateOrUpdateResponse>;
    /**
     * Update an identity in the specified subscription and resource group.
     * @param resourceGroupName The name of the Resource Group to which the identity belongs.
     * @param resourceName The name of the identity resource.
     * @param parameters Parameters to update the identity
     * @param options The options parameters.
     */
    update(resourceGroupName: string, resourceName: string, parameters: IdentityUpdate, options?: UserAssignedIdentitiesUpdateOptionalParams): Promise<UserAssignedIdentitiesUpdateResponse>;
    /**
     * Gets the identity.
     * @param resourceGroupName The name of the Resource Group to which the identity belongs.
     * @param resourceName The name of the identity resource.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, resourceName: string, options?: UserAssignedIdentitiesGetOptionalParams): Promise<UserAssignedIdentitiesGetResponse>;
    /**
     * Deletes the identity.
     * @param resourceGroupName The name of the Resource Group to which the identity belongs.
     * @param resourceName The name of the identity resource.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, resourceName: string, options?: UserAssignedIdentitiesDeleteOptionalParams): Promise<void>;
    /**
     * ListBySubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
     * @param options The options parameters.
     */
    private _listBySubscriptionNext;
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName The name of the Resource Group to which the identity belongs.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    private _listByResourceGroupNext;
}
//# sourceMappingURL=userAssignedIdentities.d.ts.map