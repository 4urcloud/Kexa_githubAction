'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var coreClient = require('@azure/core-client');
var coreRestPipeline = require('@azure/core-rest-pipeline');
var coreLro = require('@azure/core-lro');

function _interopNamespaceDefault(e) {
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n.default = e;
    return Object.freeze(n);
}

var coreClient__namespace = /*#__PURE__*/_interopNamespaceDefault(coreClient);
var coreRestPipeline__namespace = /*#__PURE__*/_interopNamespaceDefault(coreRestPipeline);

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const pageMap = new WeakMap();
/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
function getContinuationToken(page) {
    var _a;
    if (typeof page !== "object" || page === null) {
        return undefined;
    }
    return (_a = pageMap.get(page)) === null || _a === void 0 ? void 0 : _a.continuationToken;
}
function setContinuationToken(page, continuationToken) {
    var _a;
    if (typeof page !== "object" || page === null || !continuationToken) {
        return;
    }
    const pageInfo = (_a = pageMap.get(page)) !== null && _a !== void 0 ? _a : {};
    pageInfo.continuationToken = continuationToken;
    pageMap.set(page, pageInfo);
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link FactoryIdentityType} that the service accepts. */
exports.KnownFactoryIdentityType = void 0;
(function (KnownFactoryIdentityType) {
    /** SystemAssigned */
    KnownFactoryIdentityType["SystemAssigned"] = "SystemAssigned";
    /** UserAssigned */
    KnownFactoryIdentityType["UserAssigned"] = "UserAssigned";
    /** SystemAssignedUserAssigned */
    KnownFactoryIdentityType["SystemAssignedUserAssigned"] = "SystemAssigned,UserAssigned";
})(exports.KnownFactoryIdentityType || (exports.KnownFactoryIdentityType = {}));
/** Known values of {@link GlobalParameterType} that the service accepts. */
exports.KnownGlobalParameterType = void 0;
(function (KnownGlobalParameterType) {
    /** Object */
    KnownGlobalParameterType["Object"] = "Object";
    /** String */
    KnownGlobalParameterType["String"] = "String";
    /** Int */
    KnownGlobalParameterType["Int"] = "Int";
    /** Float */
    KnownGlobalParameterType["Float"] = "Float";
    /** Bool */
    KnownGlobalParameterType["Bool"] = "Bool";
    /** Array */
    KnownGlobalParameterType["Array"] = "Array";
})(exports.KnownGlobalParameterType || (exports.KnownGlobalParameterType = {}));
/** Known values of {@link PublicNetworkAccess} that the service accepts. */
exports.KnownPublicNetworkAccess = void 0;
(function (KnownPublicNetworkAccess) {
    /** Enabled */
    KnownPublicNetworkAccess["Enabled"] = "Enabled";
    /** Disabled */
    KnownPublicNetworkAccess["Disabled"] = "Disabled";
})(exports.KnownPublicNetworkAccess || (exports.KnownPublicNetworkAccess = {}));
/** Known values of {@link IntegrationRuntimeType} that the service accepts. */
exports.KnownIntegrationRuntimeType = void 0;
(function (KnownIntegrationRuntimeType) {
    /** Managed */
    KnownIntegrationRuntimeType["Managed"] = "Managed";
    /** SelfHosted */
    KnownIntegrationRuntimeType["SelfHosted"] = "SelfHosted";
})(exports.KnownIntegrationRuntimeType || (exports.KnownIntegrationRuntimeType = {}));
/** Known values of {@link IntegrationRuntimeAutoUpdate} that the service accepts. */
exports.KnownIntegrationRuntimeAutoUpdate = void 0;
(function (KnownIntegrationRuntimeAutoUpdate) {
    /** On */
    KnownIntegrationRuntimeAutoUpdate["On"] = "On";
    /** Off */
    KnownIntegrationRuntimeAutoUpdate["Off"] = "Off";
})(exports.KnownIntegrationRuntimeAutoUpdate || (exports.KnownIntegrationRuntimeAutoUpdate = {}));
/** Known values of {@link IntegrationRuntimeState} that the service accepts. */
exports.KnownIntegrationRuntimeState = void 0;
(function (KnownIntegrationRuntimeState) {
    /** Initial */
    KnownIntegrationRuntimeState["Initial"] = "Initial";
    /** Stopped */
    KnownIntegrationRuntimeState["Stopped"] = "Stopped";
    /** Started */
    KnownIntegrationRuntimeState["Started"] = "Started";
    /** Starting */
    KnownIntegrationRuntimeState["Starting"] = "Starting";
    /** Stopping */
    KnownIntegrationRuntimeState["Stopping"] = "Stopping";
    /** NeedRegistration */
    KnownIntegrationRuntimeState["NeedRegistration"] = "NeedRegistration";
    /** Online */
    KnownIntegrationRuntimeState["Online"] = "Online";
    /** Limited */
    KnownIntegrationRuntimeState["Limited"] = "Limited";
    /** Offline */
    KnownIntegrationRuntimeState["Offline"] = "Offline";
    /** AccessDenied */
    KnownIntegrationRuntimeState["AccessDenied"] = "AccessDenied";
})(exports.KnownIntegrationRuntimeState || (exports.KnownIntegrationRuntimeState = {}));
/** Known values of {@link IntegrationRuntimeAuthKeyName} that the service accepts. */
exports.KnownIntegrationRuntimeAuthKeyName = void 0;
(function (KnownIntegrationRuntimeAuthKeyName) {
    /** AuthKey1 */
    KnownIntegrationRuntimeAuthKeyName["AuthKey1"] = "authKey1";
    /** AuthKey2 */
    KnownIntegrationRuntimeAuthKeyName["AuthKey2"] = "authKey2";
})(exports.KnownIntegrationRuntimeAuthKeyName || (exports.KnownIntegrationRuntimeAuthKeyName = {}));
/** Known values of {@link SsisObjectMetadataType} that the service accepts. */
exports.KnownSsisObjectMetadataType = void 0;
(function (KnownSsisObjectMetadataType) {
    /** Folder */
    KnownSsisObjectMetadataType["Folder"] = "Folder";
    /** Project */
    KnownSsisObjectMetadataType["Project"] = "Project";
    /** Package */
    KnownSsisObjectMetadataType["Package"] = "Package";
    /** Environment */
    KnownSsisObjectMetadataType["Environment"] = "Environment";
})(exports.KnownSsisObjectMetadataType || (exports.KnownSsisObjectMetadataType = {}));
/** Known values of {@link SelfHostedIntegrationRuntimeNodeStatus} that the service accepts. */
exports.KnownSelfHostedIntegrationRuntimeNodeStatus = void 0;
(function (KnownSelfHostedIntegrationRuntimeNodeStatus) {
    /** NeedRegistration */
    KnownSelfHostedIntegrationRuntimeNodeStatus["NeedRegistration"] = "NeedRegistration";
    /** Online */
    KnownSelfHostedIntegrationRuntimeNodeStatus["Online"] = "Online";
    /** Limited */
    KnownSelfHostedIntegrationRuntimeNodeStatus["Limited"] = "Limited";
    /** Offline */
    KnownSelfHostedIntegrationRuntimeNodeStatus["Offline"] = "Offline";
    /** Upgrading */
    KnownSelfHostedIntegrationRuntimeNodeStatus["Upgrading"] = "Upgrading";
    /** Initializing */
    KnownSelfHostedIntegrationRuntimeNodeStatus["Initializing"] = "Initializing";
    /** InitializeFailed */
    KnownSelfHostedIntegrationRuntimeNodeStatus["InitializeFailed"] = "InitializeFailed";
})(exports.KnownSelfHostedIntegrationRuntimeNodeStatus || (exports.KnownSelfHostedIntegrationRuntimeNodeStatus = {}));
/** Known values of {@link IntegrationRuntimeUpdateResult} that the service accepts. */
exports.KnownIntegrationRuntimeUpdateResult = void 0;
(function (KnownIntegrationRuntimeUpdateResult) {
    /** None */
    KnownIntegrationRuntimeUpdateResult["None"] = "None";
    /** Succeed */
    KnownIntegrationRuntimeUpdateResult["Succeed"] = "Succeed";
    /** Fail */
    KnownIntegrationRuntimeUpdateResult["Fail"] = "Fail";
})(exports.KnownIntegrationRuntimeUpdateResult || (exports.KnownIntegrationRuntimeUpdateResult = {}));
/** Known values of {@link ParameterType} that the service accepts. */
exports.KnownParameterType = void 0;
(function (KnownParameterType) {
    /** Object */
    KnownParameterType["Object"] = "Object";
    /** String */
    KnownParameterType["String"] = "String";
    /** Int */
    KnownParameterType["Int"] = "Int";
    /** Float */
    KnownParameterType["Float"] = "Float";
    /** Bool */
    KnownParameterType["Bool"] = "Bool";
    /** Array */
    KnownParameterType["Array"] = "Array";
    /** SecureString */
    KnownParameterType["SecureString"] = "SecureString";
})(exports.KnownParameterType || (exports.KnownParameterType = {}));
/** Known values of {@link Type} that the service accepts. */
exports.KnownType = void 0;
(function (KnownType) {
    /** LinkedServiceReference */
    KnownType["LinkedServiceReference"] = "LinkedServiceReference";
})(exports.KnownType || (exports.KnownType = {}));
/** Known values of {@link ActivityState} that the service accepts. */
exports.KnownActivityState = void 0;
(function (KnownActivityState) {
    /** Active */
    KnownActivityState["Active"] = "Active";
    /** Inactive */
    KnownActivityState["Inactive"] = "Inactive";
})(exports.KnownActivityState || (exports.KnownActivityState = {}));
/** Known values of {@link ActivityOnInactiveMarkAs} that the service accepts. */
exports.KnownActivityOnInactiveMarkAs = void 0;
(function (KnownActivityOnInactiveMarkAs) {
    /** Succeeded */
    KnownActivityOnInactiveMarkAs["Succeeded"] = "Succeeded";
    /** Failed */
    KnownActivityOnInactiveMarkAs["Failed"] = "Failed";
    /** Skipped */
    KnownActivityOnInactiveMarkAs["Skipped"] = "Skipped";
})(exports.KnownActivityOnInactiveMarkAs || (exports.KnownActivityOnInactiveMarkAs = {}));
/** Known values of {@link DependencyCondition} that the service accepts. */
exports.KnownDependencyCondition = void 0;
(function (KnownDependencyCondition) {
    /** Succeeded */
    KnownDependencyCondition["Succeeded"] = "Succeeded";
    /** Failed */
    KnownDependencyCondition["Failed"] = "Failed";
    /** Skipped */
    KnownDependencyCondition["Skipped"] = "Skipped";
    /** Completed */
    KnownDependencyCondition["Completed"] = "Completed";
})(exports.KnownDependencyCondition || (exports.KnownDependencyCondition = {}));
/** Known values of {@link VariableType} that the service accepts. */
exports.KnownVariableType = void 0;
(function (KnownVariableType) {
    /** String */
    KnownVariableType["String"] = "String";
    /** Bool */
    KnownVariableType["Bool"] = "Bool";
    /** Array */
    KnownVariableType["Array"] = "Array";
})(exports.KnownVariableType || (exports.KnownVariableType = {}));
/** Known values of {@link RunQueryFilterOperand} that the service accepts. */
exports.KnownRunQueryFilterOperand = void 0;
(function (KnownRunQueryFilterOperand) {
    /** PipelineName */
    KnownRunQueryFilterOperand["PipelineName"] = "PipelineName";
    /** Status */
    KnownRunQueryFilterOperand["Status"] = "Status";
    /** RunStart */
    KnownRunQueryFilterOperand["RunStart"] = "RunStart";
    /** RunEnd */
    KnownRunQueryFilterOperand["RunEnd"] = "RunEnd";
    /** ActivityName */
    KnownRunQueryFilterOperand["ActivityName"] = "ActivityName";
    /** ActivityRunStart */
    KnownRunQueryFilterOperand["ActivityRunStart"] = "ActivityRunStart";
    /** ActivityRunEnd */
    KnownRunQueryFilterOperand["ActivityRunEnd"] = "ActivityRunEnd";
    /** ActivityType */
    KnownRunQueryFilterOperand["ActivityType"] = "ActivityType";
    /** TriggerName */
    KnownRunQueryFilterOperand["TriggerName"] = "TriggerName";
    /** TriggerRunTimestamp */
    KnownRunQueryFilterOperand["TriggerRunTimestamp"] = "TriggerRunTimestamp";
    /** RunGroupId */
    KnownRunQueryFilterOperand["RunGroupId"] = "RunGroupId";
    /** LatestOnly */
    KnownRunQueryFilterOperand["LatestOnly"] = "LatestOnly";
})(exports.KnownRunQueryFilterOperand || (exports.KnownRunQueryFilterOperand = {}));
/** Known values of {@link RunQueryFilterOperator} that the service accepts. */
exports.KnownRunQueryFilterOperator = void 0;
(function (KnownRunQueryFilterOperator) {
    /** Equals */
    KnownRunQueryFilterOperator["Equals"] = "Equals";
    /** NotEquals */
    KnownRunQueryFilterOperator["NotEquals"] = "NotEquals";
    /** In */
    KnownRunQueryFilterOperator["In"] = "In";
    /** NotIn */
    KnownRunQueryFilterOperator["NotIn"] = "NotIn";
})(exports.KnownRunQueryFilterOperator || (exports.KnownRunQueryFilterOperator = {}));
/** Known values of {@link RunQueryOrderByField} that the service accepts. */
exports.KnownRunQueryOrderByField = void 0;
(function (KnownRunQueryOrderByField) {
    /** RunStart */
    KnownRunQueryOrderByField["RunStart"] = "RunStart";
    /** RunEnd */
    KnownRunQueryOrderByField["RunEnd"] = "RunEnd";
    /** PipelineName */
    KnownRunQueryOrderByField["PipelineName"] = "PipelineName";
    /** Status */
    KnownRunQueryOrderByField["Status"] = "Status";
    /** ActivityName */
    KnownRunQueryOrderByField["ActivityName"] = "ActivityName";
    /** ActivityRunStart */
    KnownRunQueryOrderByField["ActivityRunStart"] = "ActivityRunStart";
    /** ActivityRunEnd */
    KnownRunQueryOrderByField["ActivityRunEnd"] = "ActivityRunEnd";
    /** TriggerName */
    KnownRunQueryOrderByField["TriggerName"] = "TriggerName";
    /** TriggerRunTimestamp */
    KnownRunQueryOrderByField["TriggerRunTimestamp"] = "TriggerRunTimestamp";
})(exports.KnownRunQueryOrderByField || (exports.KnownRunQueryOrderByField = {}));
/** Known values of {@link RunQueryOrder} that the service accepts. */
exports.KnownRunQueryOrder = void 0;
(function (KnownRunQueryOrder) {
    /** ASC */
    KnownRunQueryOrder["ASC"] = "ASC";
    /** Desc */
    KnownRunQueryOrder["Desc"] = "DESC";
})(exports.KnownRunQueryOrder || (exports.KnownRunQueryOrder = {}));
/** Known values of {@link TriggerRuntimeState} that the service accepts. */
exports.KnownTriggerRuntimeState = void 0;
(function (KnownTriggerRuntimeState) {
    /** Started */
    KnownTriggerRuntimeState["Started"] = "Started";
    /** Stopped */
    KnownTriggerRuntimeState["Stopped"] = "Stopped";
    /** Disabled */
    KnownTriggerRuntimeState["Disabled"] = "Disabled";
})(exports.KnownTriggerRuntimeState || (exports.KnownTriggerRuntimeState = {}));
/** Known values of {@link EventSubscriptionStatus} that the service accepts. */
exports.KnownEventSubscriptionStatus = void 0;
(function (KnownEventSubscriptionStatus) {
    /** Enabled */
    KnownEventSubscriptionStatus["Enabled"] = "Enabled";
    /** Provisioning */
    KnownEventSubscriptionStatus["Provisioning"] = "Provisioning";
    /** Deprovisioning */
    KnownEventSubscriptionStatus["Deprovisioning"] = "Deprovisioning";
    /** Disabled */
    KnownEventSubscriptionStatus["Disabled"] = "Disabled";
    /** Unknown */
    KnownEventSubscriptionStatus["Unknown"] = "Unknown";
})(exports.KnownEventSubscriptionStatus || (exports.KnownEventSubscriptionStatus = {}));
/** Known values of {@link TriggerRunStatus} that the service accepts. */
exports.KnownTriggerRunStatus = void 0;
(function (KnownTriggerRunStatus) {
    /** Succeeded */
    KnownTriggerRunStatus["Succeeded"] = "Succeeded";
    /** Failed */
    KnownTriggerRunStatus["Failed"] = "Failed";
    /** Inprogress */
    KnownTriggerRunStatus["Inprogress"] = "Inprogress";
})(exports.KnownTriggerRunStatus || (exports.KnownTriggerRunStatus = {}));
/** Known values of {@link DataFlowDebugCommandType} that the service accepts. */
exports.KnownDataFlowDebugCommandType = void 0;
(function (KnownDataFlowDebugCommandType) {
    /** ExecutePreviewQuery */
    KnownDataFlowDebugCommandType["ExecutePreviewQuery"] = "executePreviewQuery";
    /** ExecuteStatisticsQuery */
    KnownDataFlowDebugCommandType["ExecuteStatisticsQuery"] = "executeStatisticsQuery";
    /** ExecuteExpressionQuery */
    KnownDataFlowDebugCommandType["ExecuteExpressionQuery"] = "executeExpressionQuery";
})(exports.KnownDataFlowDebugCommandType || (exports.KnownDataFlowDebugCommandType = {}));
/** Known values of {@link ConnectionType} that the service accepts. */
exports.KnownConnectionType = void 0;
(function (KnownConnectionType) {
    /** Linkedservicetype */
    KnownConnectionType["Linkedservicetype"] = "linkedservicetype";
})(exports.KnownConnectionType || (exports.KnownConnectionType = {}));
/** Known values of {@link MappingType} that the service accepts. */
exports.KnownMappingType = void 0;
(function (KnownMappingType) {
    /** Direct */
    KnownMappingType["Direct"] = "Direct";
    /** Derived */
    KnownMappingType["Derived"] = "Derived";
    /** Aggregate */
    KnownMappingType["Aggregate"] = "Aggregate";
})(exports.KnownMappingType || (exports.KnownMappingType = {}));
/** Known values of {@link FrequencyType} that the service accepts. */
exports.KnownFrequencyType = void 0;
(function (KnownFrequencyType) {
    /** Hour */
    KnownFrequencyType["Hour"] = "Hour";
    /** Minute */
    KnownFrequencyType["Minute"] = "Minute";
    /** Second */
    KnownFrequencyType["Second"] = "Second";
})(exports.KnownFrequencyType || (exports.KnownFrequencyType = {}));
/** Known values of {@link DataFlowReferenceType} that the service accepts. */
exports.KnownDataFlowReferenceType = void 0;
(function (KnownDataFlowReferenceType) {
    /** DataFlowReference */
    KnownDataFlowReferenceType["DataFlowReference"] = "DataFlowReference";
})(exports.KnownDataFlowReferenceType || (exports.KnownDataFlowReferenceType = {}));
/** Known values of {@link ManagedVirtualNetworkReferenceType} that the service accepts. */
exports.KnownManagedVirtualNetworkReferenceType = void 0;
(function (KnownManagedVirtualNetworkReferenceType) {
    /** ManagedVirtualNetworkReference */
    KnownManagedVirtualNetworkReferenceType["ManagedVirtualNetworkReference"] = "ManagedVirtualNetworkReference";
})(exports.KnownManagedVirtualNetworkReferenceType || (exports.KnownManagedVirtualNetworkReferenceType = {}));
/** Known values of {@link CredentialReferenceType} that the service accepts. */
exports.KnownCredentialReferenceType = void 0;
(function (KnownCredentialReferenceType) {
    /** CredentialReference */
    KnownCredentialReferenceType["CredentialReference"] = "CredentialReference";
})(exports.KnownCredentialReferenceType || (exports.KnownCredentialReferenceType = {}));
/** Known values of {@link DataFlowComputeType} that the service accepts. */
exports.KnownDataFlowComputeType = void 0;
(function (KnownDataFlowComputeType) {
    /** General */
    KnownDataFlowComputeType["General"] = "General";
    /** MemoryOptimized */
    KnownDataFlowComputeType["MemoryOptimized"] = "MemoryOptimized";
    /** ComputeOptimized */
    KnownDataFlowComputeType["ComputeOptimized"] = "ComputeOptimized";
})(exports.KnownDataFlowComputeType || (exports.KnownDataFlowComputeType = {}));
/** Known values of {@link IntegrationRuntimeSsisCatalogPricingTier} that the service accepts. */
exports.KnownIntegrationRuntimeSsisCatalogPricingTier = void 0;
(function (KnownIntegrationRuntimeSsisCatalogPricingTier) {
    /** Basic */
    KnownIntegrationRuntimeSsisCatalogPricingTier["Basic"] = "Basic";
    /** Standard */
    KnownIntegrationRuntimeSsisCatalogPricingTier["Standard"] = "Standard";
    /** Premium */
    KnownIntegrationRuntimeSsisCatalogPricingTier["Premium"] = "Premium";
    /** PremiumRS */
    KnownIntegrationRuntimeSsisCatalogPricingTier["PremiumRS"] = "PremiumRS";
})(exports.KnownIntegrationRuntimeSsisCatalogPricingTier || (exports.KnownIntegrationRuntimeSsisCatalogPricingTier = {}));
/** Known values of {@link IntegrationRuntimeLicenseType} that the service accepts. */
exports.KnownIntegrationRuntimeLicenseType = void 0;
(function (KnownIntegrationRuntimeLicenseType) {
    /** BasePrice */
    KnownIntegrationRuntimeLicenseType["BasePrice"] = "BasePrice";
    /** LicenseIncluded */
    KnownIntegrationRuntimeLicenseType["LicenseIncluded"] = "LicenseIncluded";
})(exports.KnownIntegrationRuntimeLicenseType || (exports.KnownIntegrationRuntimeLicenseType = {}));
/** Known values of {@link IntegrationRuntimeEntityReferenceType} that the service accepts. */
exports.KnownIntegrationRuntimeEntityReferenceType = void 0;
(function (KnownIntegrationRuntimeEntityReferenceType) {
    /** IntegrationRuntimeReference */
    KnownIntegrationRuntimeEntityReferenceType["IntegrationRuntimeReference"] = "IntegrationRuntimeReference";
    /** LinkedServiceReference */
    KnownIntegrationRuntimeEntityReferenceType["LinkedServiceReference"] = "LinkedServiceReference";
})(exports.KnownIntegrationRuntimeEntityReferenceType || (exports.KnownIntegrationRuntimeEntityReferenceType = {}));
/** Known values of {@link IntegrationRuntimeEdition} that the service accepts. */
exports.KnownIntegrationRuntimeEdition = void 0;
(function (KnownIntegrationRuntimeEdition) {
    /** Standard */
    KnownIntegrationRuntimeEdition["Standard"] = "Standard";
    /** Enterprise */
    KnownIntegrationRuntimeEdition["Enterprise"] = "Enterprise";
})(exports.KnownIntegrationRuntimeEdition || (exports.KnownIntegrationRuntimeEdition = {}));
/** Known values of {@link ManagedIntegrationRuntimeNodeStatus} that the service accepts. */
exports.KnownManagedIntegrationRuntimeNodeStatus = void 0;
(function (KnownManagedIntegrationRuntimeNodeStatus) {
    /** Starting */
    KnownManagedIntegrationRuntimeNodeStatus["Starting"] = "Starting";
    /** Available */
    KnownManagedIntegrationRuntimeNodeStatus["Available"] = "Available";
    /** Recycling */
    KnownManagedIntegrationRuntimeNodeStatus["Recycling"] = "Recycling";
    /** Unavailable */
    KnownManagedIntegrationRuntimeNodeStatus["Unavailable"] = "Unavailable";
})(exports.KnownManagedIntegrationRuntimeNodeStatus || (exports.KnownManagedIntegrationRuntimeNodeStatus = {}));
/** Known values of {@link IntegrationRuntimeInternalChannelEncryptionMode} that the service accepts. */
exports.KnownIntegrationRuntimeInternalChannelEncryptionMode = void 0;
(function (KnownIntegrationRuntimeInternalChannelEncryptionMode) {
    /** NotSet */
    KnownIntegrationRuntimeInternalChannelEncryptionMode["NotSet"] = "NotSet";
    /** SslEncrypted */
    KnownIntegrationRuntimeInternalChannelEncryptionMode["SslEncrypted"] = "SslEncrypted";
    /** NotEncrypted */
    KnownIntegrationRuntimeInternalChannelEncryptionMode["NotEncrypted"] = "NotEncrypted";
})(exports.KnownIntegrationRuntimeInternalChannelEncryptionMode || (exports.KnownIntegrationRuntimeInternalChannelEncryptionMode = {}));
/** Known values of {@link AzureStorageAuthenticationType} that the service accepts. */
exports.KnownAzureStorageAuthenticationType = void 0;
(function (KnownAzureStorageAuthenticationType) {
    /** Anonymous */
    KnownAzureStorageAuthenticationType["Anonymous"] = "Anonymous";
    /** AccountKey */
    KnownAzureStorageAuthenticationType["AccountKey"] = "AccountKey";
    /** SasUri */
    KnownAzureStorageAuthenticationType["SasUri"] = "SasUri";
    /** ServicePrincipal */
    KnownAzureStorageAuthenticationType["ServicePrincipal"] = "ServicePrincipal";
    /** Msi */
    KnownAzureStorageAuthenticationType["Msi"] = "Msi";
})(exports.KnownAzureStorageAuthenticationType || (exports.KnownAzureStorageAuthenticationType = {}));
/** Known values of {@link SqlAlwaysEncryptedAkvAuthType} that the service accepts. */
exports.KnownSqlAlwaysEncryptedAkvAuthType = void 0;
(function (KnownSqlAlwaysEncryptedAkvAuthType) {
    /** ServicePrincipal */
    KnownSqlAlwaysEncryptedAkvAuthType["ServicePrincipal"] = "ServicePrincipal";
    /** ManagedIdentity */
    KnownSqlAlwaysEncryptedAkvAuthType["ManagedIdentity"] = "ManagedIdentity";
    /** UserAssignedManagedIdentity */
    KnownSqlAlwaysEncryptedAkvAuthType["UserAssignedManagedIdentity"] = "UserAssignedManagedIdentity";
})(exports.KnownSqlAlwaysEncryptedAkvAuthType || (exports.KnownSqlAlwaysEncryptedAkvAuthType = {}));
/** Known values of {@link CosmosDbConnectionMode} that the service accepts. */
exports.KnownCosmosDbConnectionMode = void 0;
(function (KnownCosmosDbConnectionMode) {
    /** Gateway */
    KnownCosmosDbConnectionMode["Gateway"] = "Gateway";
    /** Direct */
    KnownCosmosDbConnectionMode["Direct"] = "Direct";
})(exports.KnownCosmosDbConnectionMode || (exports.KnownCosmosDbConnectionMode = {}));
/** Known values of {@link SybaseAuthenticationType} that the service accepts. */
exports.KnownSybaseAuthenticationType = void 0;
(function (KnownSybaseAuthenticationType) {
    /** Basic */
    KnownSybaseAuthenticationType["Basic"] = "Basic";
    /** Windows */
    KnownSybaseAuthenticationType["Windows"] = "Windows";
})(exports.KnownSybaseAuthenticationType || (exports.KnownSybaseAuthenticationType = {}));
/** Known values of {@link Db2AuthenticationType} that the service accepts. */
exports.KnownDb2AuthenticationType = void 0;
(function (KnownDb2AuthenticationType) {
    /** Basic */
    KnownDb2AuthenticationType["Basic"] = "Basic";
})(exports.KnownDb2AuthenticationType || (exports.KnownDb2AuthenticationType = {}));
/** Known values of {@link TeradataAuthenticationType} that the service accepts. */
exports.KnownTeradataAuthenticationType = void 0;
(function (KnownTeradataAuthenticationType) {
    /** Basic */
    KnownTeradataAuthenticationType["Basic"] = "Basic";
    /** Windows */
    KnownTeradataAuthenticationType["Windows"] = "Windows";
})(exports.KnownTeradataAuthenticationType || (exports.KnownTeradataAuthenticationType = {}));
/** Known values of {@link ODataAuthenticationType} that the service accepts. */
exports.KnownODataAuthenticationType = void 0;
(function (KnownODataAuthenticationType) {
    /** Basic */
    KnownODataAuthenticationType["Basic"] = "Basic";
    /** Anonymous */
    KnownODataAuthenticationType["Anonymous"] = "Anonymous";
    /** Windows */
    KnownODataAuthenticationType["Windows"] = "Windows";
    /** AadServicePrincipal */
    KnownODataAuthenticationType["AadServicePrincipal"] = "AadServicePrincipal";
    /** ManagedServiceIdentity */
    KnownODataAuthenticationType["ManagedServiceIdentity"] = "ManagedServiceIdentity";
})(exports.KnownODataAuthenticationType || (exports.KnownODataAuthenticationType = {}));
/** Known values of {@link ODataAadServicePrincipalCredentialType} that the service accepts. */
exports.KnownODataAadServicePrincipalCredentialType = void 0;
(function (KnownODataAadServicePrincipalCredentialType) {
    /** ServicePrincipalKey */
    KnownODataAadServicePrincipalCredentialType["ServicePrincipalKey"] = "ServicePrincipalKey";
    /** ServicePrincipalCert */
    KnownODataAadServicePrincipalCredentialType["ServicePrincipalCert"] = "ServicePrincipalCert";
})(exports.KnownODataAadServicePrincipalCredentialType || (exports.KnownODataAadServicePrincipalCredentialType = {}));
/** Known values of {@link WebAuthenticationType} that the service accepts. */
exports.KnownWebAuthenticationType = void 0;
(function (KnownWebAuthenticationType) {
    /** Basic */
    KnownWebAuthenticationType["Basic"] = "Basic";
    /** Anonymous */
    KnownWebAuthenticationType["Anonymous"] = "Anonymous";
    /** ClientCertificate */
    KnownWebAuthenticationType["ClientCertificate"] = "ClientCertificate";
})(exports.KnownWebAuthenticationType || (exports.KnownWebAuthenticationType = {}));
/** Known values of {@link MongoDbAuthenticationType} that the service accepts. */
exports.KnownMongoDbAuthenticationType = void 0;
(function (KnownMongoDbAuthenticationType) {
    /** Basic */
    KnownMongoDbAuthenticationType["Basic"] = "Basic";
    /** Anonymous */
    KnownMongoDbAuthenticationType["Anonymous"] = "Anonymous";
})(exports.KnownMongoDbAuthenticationType || (exports.KnownMongoDbAuthenticationType = {}));
/** Known values of {@link RestServiceAuthenticationType} that the service accepts. */
exports.KnownRestServiceAuthenticationType = void 0;
(function (KnownRestServiceAuthenticationType) {
    /** Anonymous */
    KnownRestServiceAuthenticationType["Anonymous"] = "Anonymous";
    /** Basic */
    KnownRestServiceAuthenticationType["Basic"] = "Basic";
    /** AadServicePrincipal */
    KnownRestServiceAuthenticationType["AadServicePrincipal"] = "AadServicePrincipal";
    /** ManagedServiceIdentity */
    KnownRestServiceAuthenticationType["ManagedServiceIdentity"] = "ManagedServiceIdentity";
    /** OAuth2ClientCredential */
    KnownRestServiceAuthenticationType["OAuth2ClientCredential"] = "OAuth2ClientCredential";
})(exports.KnownRestServiceAuthenticationType || (exports.KnownRestServiceAuthenticationType = {}));
/** Known values of {@link TeamDeskAuthenticationType} that the service accepts. */
exports.KnownTeamDeskAuthenticationType = void 0;
(function (KnownTeamDeskAuthenticationType) {
    /** Basic */
    KnownTeamDeskAuthenticationType["Basic"] = "Basic";
    /** Token */
    KnownTeamDeskAuthenticationType["Token"] = "Token";
})(exports.KnownTeamDeskAuthenticationType || (exports.KnownTeamDeskAuthenticationType = {}));
/** Known values of {@link ZendeskAuthenticationType} that the service accepts. */
exports.KnownZendeskAuthenticationType = void 0;
(function (KnownZendeskAuthenticationType) {
    /** Basic */
    KnownZendeskAuthenticationType["Basic"] = "Basic";
    /** Token */
    KnownZendeskAuthenticationType["Token"] = "Token";
})(exports.KnownZendeskAuthenticationType || (exports.KnownZendeskAuthenticationType = {}));
/** Known values of {@link HttpAuthenticationType} that the service accepts. */
exports.KnownHttpAuthenticationType = void 0;
(function (KnownHttpAuthenticationType) {
    /** Basic */
    KnownHttpAuthenticationType["Basic"] = "Basic";
    /** Anonymous */
    KnownHttpAuthenticationType["Anonymous"] = "Anonymous";
    /** Digest */
    KnownHttpAuthenticationType["Digest"] = "Digest";
    /** Windows */
    KnownHttpAuthenticationType["Windows"] = "Windows";
    /** ClientCertificate */
    KnownHttpAuthenticationType["ClientCertificate"] = "ClientCertificate";
})(exports.KnownHttpAuthenticationType || (exports.KnownHttpAuthenticationType = {}));
/** Known values of {@link FtpAuthenticationType} that the service accepts. */
exports.KnownFtpAuthenticationType = void 0;
(function (KnownFtpAuthenticationType) {
    /** Basic */
    KnownFtpAuthenticationType["Basic"] = "Basic";
    /** Anonymous */
    KnownFtpAuthenticationType["Anonymous"] = "Anonymous";
})(exports.KnownFtpAuthenticationType || (exports.KnownFtpAuthenticationType = {}));
/** Known values of {@link SftpAuthenticationType} that the service accepts. */
exports.KnownSftpAuthenticationType = void 0;
(function (KnownSftpAuthenticationType) {
    /** Basic */
    KnownSftpAuthenticationType["Basic"] = "Basic";
    /** SshPublicKey */
    KnownSftpAuthenticationType["SshPublicKey"] = "SshPublicKey";
    /** MultiFactor */
    KnownSftpAuthenticationType["MultiFactor"] = "MultiFactor";
})(exports.KnownSftpAuthenticationType || (exports.KnownSftpAuthenticationType = {}));
/** Known values of {@link SapHanaAuthenticationType} that the service accepts. */
exports.KnownSapHanaAuthenticationType = void 0;
(function (KnownSapHanaAuthenticationType) {
    /** Basic */
    KnownSapHanaAuthenticationType["Basic"] = "Basic";
    /** Windows */
    KnownSapHanaAuthenticationType["Windows"] = "Windows";
})(exports.KnownSapHanaAuthenticationType || (exports.KnownSapHanaAuthenticationType = {}));
/** Known values of {@link GoogleBigQueryAuthenticationType} that the service accepts. */
exports.KnownGoogleBigQueryAuthenticationType = void 0;
(function (KnownGoogleBigQueryAuthenticationType) {
    /** ServiceAuthentication */
    KnownGoogleBigQueryAuthenticationType["ServiceAuthentication"] = "ServiceAuthentication";
    /** UserAuthentication */
    KnownGoogleBigQueryAuthenticationType["UserAuthentication"] = "UserAuthentication";
})(exports.KnownGoogleBigQueryAuthenticationType || (exports.KnownGoogleBigQueryAuthenticationType = {}));
/** Known values of {@link HBaseAuthenticationType} that the service accepts. */
exports.KnownHBaseAuthenticationType = void 0;
(function (KnownHBaseAuthenticationType) {
    /** Anonymous */
    KnownHBaseAuthenticationType["Anonymous"] = "Anonymous";
    /** Basic */
    KnownHBaseAuthenticationType["Basic"] = "Basic";
})(exports.KnownHBaseAuthenticationType || (exports.KnownHBaseAuthenticationType = {}));
/** Known values of {@link HiveServerType} that the service accepts. */
exports.KnownHiveServerType = void 0;
(function (KnownHiveServerType) {
    /** HiveServer1 */
    KnownHiveServerType["HiveServer1"] = "HiveServer1";
    /** HiveServer2 */
    KnownHiveServerType["HiveServer2"] = "HiveServer2";
    /** HiveThriftServer */
    KnownHiveServerType["HiveThriftServer"] = "HiveThriftServer";
})(exports.KnownHiveServerType || (exports.KnownHiveServerType = {}));
/** Known values of {@link HiveThriftTransportProtocol} that the service accepts. */
exports.KnownHiveThriftTransportProtocol = void 0;
(function (KnownHiveThriftTransportProtocol) {
    /** Binary */
    KnownHiveThriftTransportProtocol["Binary"] = "Binary";
    /** Sasl */
    KnownHiveThriftTransportProtocol["Sasl"] = "SASL";
    /** Http */
    KnownHiveThriftTransportProtocol["Http"] = "HTTP ";
})(exports.KnownHiveThriftTransportProtocol || (exports.KnownHiveThriftTransportProtocol = {}));
/** Known values of {@link HiveAuthenticationType} that the service accepts. */
exports.KnownHiveAuthenticationType = void 0;
(function (KnownHiveAuthenticationType) {
    /** Anonymous */
    KnownHiveAuthenticationType["Anonymous"] = "Anonymous";
    /** Username */
    KnownHiveAuthenticationType["Username"] = "Username";
    /** UsernameAndPassword */
    KnownHiveAuthenticationType["UsernameAndPassword"] = "UsernameAndPassword";
    /** WindowsAzureHDInsightService */
    KnownHiveAuthenticationType["WindowsAzureHDInsightService"] = "WindowsAzureHDInsightService";
})(exports.KnownHiveAuthenticationType || (exports.KnownHiveAuthenticationType = {}));
/** Known values of {@link ImpalaAuthenticationType} that the service accepts. */
exports.KnownImpalaAuthenticationType = void 0;
(function (KnownImpalaAuthenticationType) {
    /** Anonymous */
    KnownImpalaAuthenticationType["Anonymous"] = "Anonymous";
    /** SaslUsername */
    KnownImpalaAuthenticationType["SaslUsername"] = "SASLUsername";
    /** UsernameAndPassword */
    KnownImpalaAuthenticationType["UsernameAndPassword"] = "UsernameAndPassword";
})(exports.KnownImpalaAuthenticationType || (exports.KnownImpalaAuthenticationType = {}));
/** Known values of {@link PhoenixAuthenticationType} that the service accepts. */
exports.KnownPhoenixAuthenticationType = void 0;
(function (KnownPhoenixAuthenticationType) {
    /** Anonymous */
    KnownPhoenixAuthenticationType["Anonymous"] = "Anonymous";
    /** UsernameAndPassword */
    KnownPhoenixAuthenticationType["UsernameAndPassword"] = "UsernameAndPassword";
    /** WindowsAzureHDInsightService */
    KnownPhoenixAuthenticationType["WindowsAzureHDInsightService"] = "WindowsAzureHDInsightService";
})(exports.KnownPhoenixAuthenticationType || (exports.KnownPhoenixAuthenticationType = {}));
/** Known values of {@link PrestoAuthenticationType} that the service accepts. */
exports.KnownPrestoAuthenticationType = void 0;
(function (KnownPrestoAuthenticationType) {
    /** Anonymous */
    KnownPrestoAuthenticationType["Anonymous"] = "Anonymous";
    /** Ldap */
    KnownPrestoAuthenticationType["Ldap"] = "LDAP";
})(exports.KnownPrestoAuthenticationType || (exports.KnownPrestoAuthenticationType = {}));
/** Known values of {@link ServiceNowAuthenticationType} that the service accepts. */
exports.KnownServiceNowAuthenticationType = void 0;
(function (KnownServiceNowAuthenticationType) {
    /** Basic */
    KnownServiceNowAuthenticationType["Basic"] = "Basic";
    /** OAuth2 */
    KnownServiceNowAuthenticationType["OAuth2"] = "OAuth2";
})(exports.KnownServiceNowAuthenticationType || (exports.KnownServiceNowAuthenticationType = {}));
/** Known values of {@link SparkServerType} that the service accepts. */
exports.KnownSparkServerType = void 0;
(function (KnownSparkServerType) {
    /** SharkServer */
    KnownSparkServerType["SharkServer"] = "SharkServer";
    /** SharkServer2 */
    KnownSparkServerType["SharkServer2"] = "SharkServer2";
    /** SparkThriftServer */
    KnownSparkServerType["SparkThriftServer"] = "SparkThriftServer";
})(exports.KnownSparkServerType || (exports.KnownSparkServerType = {}));
/** Known values of {@link SparkThriftTransportProtocol} that the service accepts. */
exports.KnownSparkThriftTransportProtocol = void 0;
(function (KnownSparkThriftTransportProtocol) {
    /** Binary */
    KnownSparkThriftTransportProtocol["Binary"] = "Binary";
    /** Sasl */
    KnownSparkThriftTransportProtocol["Sasl"] = "SASL";
    /** Http */
    KnownSparkThriftTransportProtocol["Http"] = "HTTP ";
})(exports.KnownSparkThriftTransportProtocol || (exports.KnownSparkThriftTransportProtocol = {}));
/** Known values of {@link SparkAuthenticationType} that the service accepts. */
exports.KnownSparkAuthenticationType = void 0;
(function (KnownSparkAuthenticationType) {
    /** Anonymous */
    KnownSparkAuthenticationType["Anonymous"] = "Anonymous";
    /** Username */
    KnownSparkAuthenticationType["Username"] = "Username";
    /** UsernameAndPassword */
    KnownSparkAuthenticationType["UsernameAndPassword"] = "UsernameAndPassword";
    /** WindowsAzureHDInsightService */
    KnownSparkAuthenticationType["WindowsAzureHDInsightService"] = "WindowsAzureHDInsightService";
})(exports.KnownSparkAuthenticationType || (exports.KnownSparkAuthenticationType = {}));
/** Known values of {@link GoogleAdWordsAuthenticationType} that the service accepts. */
exports.KnownGoogleAdWordsAuthenticationType = void 0;
(function (KnownGoogleAdWordsAuthenticationType) {
    /** ServiceAuthentication */
    KnownGoogleAdWordsAuthenticationType["ServiceAuthentication"] = "ServiceAuthentication";
    /** UserAuthentication */
    KnownGoogleAdWordsAuthenticationType["UserAuthentication"] = "UserAuthentication";
})(exports.KnownGoogleAdWordsAuthenticationType || (exports.KnownGoogleAdWordsAuthenticationType = {}));
/** Known values of {@link CassandraSourceReadConsistencyLevels} that the service accepts. */
exports.KnownCassandraSourceReadConsistencyLevels = void 0;
(function (KnownCassandraSourceReadConsistencyLevels) {
    /** ALL */
    KnownCassandraSourceReadConsistencyLevels["ALL"] = "ALL";
    /** EachQuorum */
    KnownCassandraSourceReadConsistencyLevels["EachQuorum"] = "EACH_QUORUM";
    /** Quorum */
    KnownCassandraSourceReadConsistencyLevels["Quorum"] = "QUORUM";
    /** LocalQuorum */
    KnownCassandraSourceReadConsistencyLevels["LocalQuorum"] = "LOCAL_QUORUM";
    /** ONE */
    KnownCassandraSourceReadConsistencyLevels["ONE"] = "ONE";
    /** TWO */
    KnownCassandraSourceReadConsistencyLevels["TWO"] = "TWO";
    /** Three */
    KnownCassandraSourceReadConsistencyLevels["Three"] = "THREE";
    /** LocalONE */
    KnownCassandraSourceReadConsistencyLevels["LocalONE"] = "LOCAL_ONE";
    /** Serial */
    KnownCassandraSourceReadConsistencyLevels["Serial"] = "SERIAL";
    /** LocalSerial */
    KnownCassandraSourceReadConsistencyLevels["LocalSerial"] = "LOCAL_SERIAL";
})(exports.KnownCassandraSourceReadConsistencyLevels || (exports.KnownCassandraSourceReadConsistencyLevels = {}));
/** Known values of {@link StoredProcedureParameterType} that the service accepts. */
exports.KnownStoredProcedureParameterType = void 0;
(function (KnownStoredProcedureParameterType) {
    /** String */
    KnownStoredProcedureParameterType["String"] = "String";
    /** Int */
    KnownStoredProcedureParameterType["Int"] = "Int";
    /** Int64 */
    KnownStoredProcedureParameterType["Int64"] = "Int64";
    /** Decimal */
    KnownStoredProcedureParameterType["Decimal"] = "Decimal";
    /** Guid */
    KnownStoredProcedureParameterType["Guid"] = "Guid";
    /** Boolean */
    KnownStoredProcedureParameterType["Boolean"] = "Boolean";
    /** Date */
    KnownStoredProcedureParameterType["Date"] = "Date";
})(exports.KnownStoredProcedureParameterType || (exports.KnownStoredProcedureParameterType = {}));
/** Known values of {@link SapCloudForCustomerSinkWriteBehavior} that the service accepts. */
exports.KnownSapCloudForCustomerSinkWriteBehavior = void 0;
(function (KnownSapCloudForCustomerSinkWriteBehavior) {
    /** Insert */
    KnownSapCloudForCustomerSinkWriteBehavior["Insert"] = "Insert";
    /** Update */
    KnownSapCloudForCustomerSinkWriteBehavior["Update"] = "Update";
})(exports.KnownSapCloudForCustomerSinkWriteBehavior || (exports.KnownSapCloudForCustomerSinkWriteBehavior = {}));
/** Known values of {@link PolybaseSettingsRejectType} that the service accepts. */
exports.KnownPolybaseSettingsRejectType = void 0;
(function (KnownPolybaseSettingsRejectType) {
    /** Value */
    KnownPolybaseSettingsRejectType["Value"] = "value";
    /** Percentage */
    KnownPolybaseSettingsRejectType["Percentage"] = "percentage";
})(exports.KnownPolybaseSettingsRejectType || (exports.KnownPolybaseSettingsRejectType = {}));
/** Known values of {@link AzureSearchIndexWriteBehaviorType} that the service accepts. */
exports.KnownAzureSearchIndexWriteBehaviorType = void 0;
(function (KnownAzureSearchIndexWriteBehaviorType) {
    /** Merge */
    KnownAzureSearchIndexWriteBehaviorType["Merge"] = "Merge";
    /** Upload */
    KnownAzureSearchIndexWriteBehaviorType["Upload"] = "Upload";
})(exports.KnownAzureSearchIndexWriteBehaviorType || (exports.KnownAzureSearchIndexWriteBehaviorType = {}));
/** Known values of {@link DynamicsSinkWriteBehavior} that the service accepts. */
exports.KnownDynamicsSinkWriteBehavior = void 0;
(function (KnownDynamicsSinkWriteBehavior) {
    /** Upsert */
    KnownDynamicsSinkWriteBehavior["Upsert"] = "Upsert";
})(exports.KnownDynamicsSinkWriteBehavior || (exports.KnownDynamicsSinkWriteBehavior = {}));
/** Known values of {@link SalesforceSinkWriteBehavior} that the service accepts. */
exports.KnownSalesforceSinkWriteBehavior = void 0;
(function (KnownSalesforceSinkWriteBehavior) {
    /** Insert */
    KnownSalesforceSinkWriteBehavior["Insert"] = "Insert";
    /** Upsert */
    KnownSalesforceSinkWriteBehavior["Upsert"] = "Upsert";
})(exports.KnownSalesforceSinkWriteBehavior || (exports.KnownSalesforceSinkWriteBehavior = {}));
/** Known values of {@link HDInsightActivityDebugInfoOption} that the service accepts. */
exports.KnownHDInsightActivityDebugInfoOption = void 0;
(function (KnownHDInsightActivityDebugInfoOption) {
    /** None */
    KnownHDInsightActivityDebugInfoOption["None"] = "None";
    /** Always */
    KnownHDInsightActivityDebugInfoOption["Always"] = "Always";
    /** Failure */
    KnownHDInsightActivityDebugInfoOption["Failure"] = "Failure";
})(exports.KnownHDInsightActivityDebugInfoOption || (exports.KnownHDInsightActivityDebugInfoOption = {}));
/** Known values of {@link SsisPackageLocationType} that the service accepts. */
exports.KnownSsisPackageLocationType = void 0;
(function (KnownSsisPackageLocationType) {
    /** Ssisdb */
    KnownSsisPackageLocationType["Ssisdb"] = "SSISDB";
    /** File */
    KnownSsisPackageLocationType["File"] = "File";
    /** InlinePackage */
    KnownSsisPackageLocationType["InlinePackage"] = "InlinePackage";
    /** PackageStore */
    KnownSsisPackageLocationType["PackageStore"] = "PackageStore";
})(exports.KnownSsisPackageLocationType || (exports.KnownSsisPackageLocationType = {}));
/** Known values of {@link SsisLogLocationType} that the service accepts. */
exports.KnownSsisLogLocationType = void 0;
(function (KnownSsisLogLocationType) {
    /** File */
    KnownSsisLogLocationType["File"] = "File";
})(exports.KnownSsisLogLocationType || (exports.KnownSsisLogLocationType = {}));
/** Known values of {@link WebActivityMethod} that the service accepts. */
exports.KnownWebActivityMethod = void 0;
(function (KnownWebActivityMethod) {
    /** GET */
    KnownWebActivityMethod["GET"] = "GET";
    /** Post */
    KnownWebActivityMethod["Post"] = "POST";
    /** PUT */
    KnownWebActivityMethod["PUT"] = "PUT";
    /** Delete */
    KnownWebActivityMethod["Delete"] = "DELETE";
})(exports.KnownWebActivityMethod || (exports.KnownWebActivityMethod = {}));
/** Known values of {@link AzureFunctionActivityMethod} that the service accepts. */
exports.KnownAzureFunctionActivityMethod = void 0;
(function (KnownAzureFunctionActivityMethod) {
    /** GET */
    KnownAzureFunctionActivityMethod["GET"] = "GET";
    /** Post */
    KnownAzureFunctionActivityMethod["Post"] = "POST";
    /** PUT */
    KnownAzureFunctionActivityMethod["PUT"] = "PUT";
    /** Delete */
    KnownAzureFunctionActivityMethod["Delete"] = "DELETE";
    /** Options */
    KnownAzureFunctionActivityMethod["Options"] = "OPTIONS";
    /** Head */
    KnownAzureFunctionActivityMethod["Head"] = "HEAD";
    /** Trace */
    KnownAzureFunctionActivityMethod["Trace"] = "TRACE";
})(exports.KnownAzureFunctionActivityMethod || (exports.KnownAzureFunctionActivityMethod = {}));
/** Known values of {@link WebHookActivityMethod} that the service accepts. */
exports.KnownWebHookActivityMethod = void 0;
(function (KnownWebHookActivityMethod) {
    /** Post */
    KnownWebHookActivityMethod["Post"] = "POST";
})(exports.KnownWebHookActivityMethod || (exports.KnownWebHookActivityMethod = {}));
/** Known values of {@link ScriptType} that the service accepts. */
exports.KnownScriptType = void 0;
(function (KnownScriptType) {
    /** Query */
    KnownScriptType["Query"] = "Query";
    /** NonQuery */
    KnownScriptType["NonQuery"] = "NonQuery";
})(exports.KnownScriptType || (exports.KnownScriptType = {}));
/** Known values of {@link ScriptActivityParameterType} that the service accepts. */
exports.KnownScriptActivityParameterType = void 0;
(function (KnownScriptActivityParameterType) {
    /** Boolean */
    KnownScriptActivityParameterType["Boolean"] = "Boolean";
    /** DateTime */
    KnownScriptActivityParameterType["DateTime"] = "DateTime";
    /** DateTimeOffset */
    KnownScriptActivityParameterType["DateTimeOffset"] = "DateTimeOffset";
    /** Decimal */
    KnownScriptActivityParameterType["Decimal"] = "Decimal";
    /** Double */
    KnownScriptActivityParameterType["Double"] = "Double";
    /** Guid */
    KnownScriptActivityParameterType["Guid"] = "Guid";
    /** Int16 */
    KnownScriptActivityParameterType["Int16"] = "Int16";
    /** Int32 */
    KnownScriptActivityParameterType["Int32"] = "Int32";
    /** Int64 */
    KnownScriptActivityParameterType["Int64"] = "Int64";
    /** Single */
    KnownScriptActivityParameterType["Single"] = "Single";
    /** String */
    KnownScriptActivityParameterType["String"] = "String";
    /** Timespan */
    KnownScriptActivityParameterType["Timespan"] = "Timespan";
})(exports.KnownScriptActivityParameterType || (exports.KnownScriptActivityParameterType = {}));
/** Known values of {@link ScriptActivityParameterDirection} that the service accepts. */
exports.KnownScriptActivityParameterDirection = void 0;
(function (KnownScriptActivityParameterDirection) {
    /** Input */
    KnownScriptActivityParameterDirection["Input"] = "Input";
    /** Output */
    KnownScriptActivityParameterDirection["Output"] = "Output";
    /** InputOutput */
    KnownScriptActivityParameterDirection["InputOutput"] = "InputOutput";
})(exports.KnownScriptActivityParameterDirection || (exports.KnownScriptActivityParameterDirection = {}));
/** Known values of {@link ScriptActivityLogDestination} that the service accepts. */
exports.KnownScriptActivityLogDestination = void 0;
(function (KnownScriptActivityLogDestination) {
    /** ActivityOutput */
    KnownScriptActivityLogDestination["ActivityOutput"] = "ActivityOutput";
    /** ExternalStore */
    KnownScriptActivityLogDestination["ExternalStore"] = "ExternalStore";
})(exports.KnownScriptActivityLogDestination || (exports.KnownScriptActivityLogDestination = {}));
/** Known values of {@link NotebookReferenceType} that the service accepts. */
exports.KnownNotebookReferenceType = void 0;
(function (KnownNotebookReferenceType) {
    /** NotebookReference */
    KnownNotebookReferenceType["NotebookReference"] = "NotebookReference";
})(exports.KnownNotebookReferenceType || (exports.KnownNotebookReferenceType = {}));
/** Known values of {@link BigDataPoolReferenceType} that the service accepts. */
exports.KnownBigDataPoolReferenceType = void 0;
(function (KnownBigDataPoolReferenceType) {
    /** BigDataPoolReference */
    KnownBigDataPoolReferenceType["BigDataPoolReference"] = "BigDataPoolReference";
})(exports.KnownBigDataPoolReferenceType || (exports.KnownBigDataPoolReferenceType = {}));
/** Known values of {@link NotebookParameterType} that the service accepts. */
exports.KnownNotebookParameterType = void 0;
(function (KnownNotebookParameterType) {
    /** String */
    KnownNotebookParameterType["String"] = "string";
    /** Int */
    KnownNotebookParameterType["Int"] = "int";
    /** Float */
    KnownNotebookParameterType["Float"] = "float";
    /** Bool */
    KnownNotebookParameterType["Bool"] = "bool";
})(exports.KnownNotebookParameterType || (exports.KnownNotebookParameterType = {}));
/** Known values of {@link ConfigurationType} that the service accepts. */
exports.KnownConfigurationType = void 0;
(function (KnownConfigurationType) {
    /** Default */
    KnownConfigurationType["Default"] = "Default";
    /** Customized */
    KnownConfigurationType["Customized"] = "Customized";
    /** Artifact */
    KnownConfigurationType["Artifact"] = "Artifact";
})(exports.KnownConfigurationType || (exports.KnownConfigurationType = {}));
/** Known values of {@link SparkConfigurationReferenceType} that the service accepts. */
exports.KnownSparkConfigurationReferenceType = void 0;
(function (KnownSparkConfigurationReferenceType) {
    /** SparkConfigurationReference */
    KnownSparkConfigurationReferenceType["SparkConfigurationReference"] = "SparkConfigurationReference";
})(exports.KnownSparkConfigurationReferenceType || (exports.KnownSparkConfigurationReferenceType = {}));
/** Known values of {@link SparkJobReferenceType} that the service accepts. */
exports.KnownSparkJobReferenceType = void 0;
(function (KnownSparkJobReferenceType) {
    /** SparkJobDefinitionReference */
    KnownSparkJobReferenceType["SparkJobDefinitionReference"] = "SparkJobDefinitionReference";
})(exports.KnownSparkJobReferenceType || (exports.KnownSparkJobReferenceType = {}));
/** Known values of {@link RecurrenceFrequency} that the service accepts. */
exports.KnownRecurrenceFrequency = void 0;
(function (KnownRecurrenceFrequency) {
    /** NotSpecified */
    KnownRecurrenceFrequency["NotSpecified"] = "NotSpecified";
    /** Minute */
    KnownRecurrenceFrequency["Minute"] = "Minute";
    /** Hour */
    KnownRecurrenceFrequency["Hour"] = "Hour";
    /** Day */
    KnownRecurrenceFrequency["Day"] = "Day";
    /** Week */
    KnownRecurrenceFrequency["Week"] = "Week";
    /** Month */
    KnownRecurrenceFrequency["Month"] = "Month";
    /** Year */
    KnownRecurrenceFrequency["Year"] = "Year";
})(exports.KnownRecurrenceFrequency || (exports.KnownRecurrenceFrequency = {}));
/** Known values of {@link BlobEventTypes} that the service accepts. */
exports.KnownBlobEventTypes = void 0;
(function (KnownBlobEventTypes) {
    /** MicrosoftStorageBlobCreated */
    KnownBlobEventTypes["MicrosoftStorageBlobCreated"] = "Microsoft.Storage.BlobCreated";
    /** MicrosoftStorageBlobDeleted */
    KnownBlobEventTypes["MicrosoftStorageBlobDeleted"] = "Microsoft.Storage.BlobDeleted";
})(exports.KnownBlobEventTypes || (exports.KnownBlobEventTypes = {}));
/** Known values of {@link TumblingWindowFrequency} that the service accepts. */
exports.KnownTumblingWindowFrequency = void 0;
(function (KnownTumblingWindowFrequency) {
    /** Minute */
    KnownTumblingWindowFrequency["Minute"] = "Minute";
    /** Hour */
    KnownTumblingWindowFrequency["Hour"] = "Hour";
    /** Month */
    KnownTumblingWindowFrequency["Month"] = "Month";
})(exports.KnownTumblingWindowFrequency || (exports.KnownTumblingWindowFrequency = {}));
/** Known values of {@link TriggerReferenceType} that the service accepts. */
exports.KnownTriggerReferenceType = void 0;
(function (KnownTriggerReferenceType) {
    /** TriggerReference */
    KnownTriggerReferenceType["TriggerReference"] = "TriggerReference";
})(exports.KnownTriggerReferenceType || (exports.KnownTriggerReferenceType = {}));
/** Known values of {@link JsonFormatFilePattern} that the service accepts. */
exports.KnownJsonFormatFilePattern = void 0;
(function (KnownJsonFormatFilePattern) {
    /** SetOfObjects */
    KnownJsonFormatFilePattern["SetOfObjects"] = "setOfObjects";
    /** ArrayOfObjects */
    KnownJsonFormatFilePattern["ArrayOfObjects"] = "arrayOfObjects";
})(exports.KnownJsonFormatFilePattern || (exports.KnownJsonFormatFilePattern = {}));
/** Known values of {@link DatasetCompressionLevel} that the service accepts. */
exports.KnownDatasetCompressionLevel = void 0;
(function (KnownDatasetCompressionLevel) {
    /** Optimal */
    KnownDatasetCompressionLevel["Optimal"] = "Optimal";
    /** Fastest */
    KnownDatasetCompressionLevel["Fastest"] = "Fastest";
})(exports.KnownDatasetCompressionLevel || (exports.KnownDatasetCompressionLevel = {}));
/** Known values of {@link AvroCompressionCodec} that the service accepts. */
exports.KnownAvroCompressionCodec = void 0;
(function (KnownAvroCompressionCodec) {
    /** None */
    KnownAvroCompressionCodec["None"] = "none";
    /** Deflate */
    KnownAvroCompressionCodec["Deflate"] = "deflate";
    /** Snappy */
    KnownAvroCompressionCodec["Snappy"] = "snappy";
    /** Xz */
    KnownAvroCompressionCodec["Xz"] = "xz";
    /** Bzip2 */
    KnownAvroCompressionCodec["Bzip2"] = "bzip2";
})(exports.KnownAvroCompressionCodec || (exports.KnownAvroCompressionCodec = {}));
/** Known values of {@link CompressionCodec} that the service accepts. */
exports.KnownCompressionCodec = void 0;
(function (KnownCompressionCodec) {
    /** None */
    KnownCompressionCodec["None"] = "none";
    /** Lzo */
    KnownCompressionCodec["Lzo"] = "lzo";
    /** Bzip2 */
    KnownCompressionCodec["Bzip2"] = "bzip2";
    /** Gzip */
    KnownCompressionCodec["Gzip"] = "gzip";
    /** Deflate */
    KnownCompressionCodec["Deflate"] = "deflate";
    /** ZipDeflate */
    KnownCompressionCodec["ZipDeflate"] = "zipDeflate";
    /** Snappy */
    KnownCompressionCodec["Snappy"] = "snappy";
    /** Lz4 */
    KnownCompressionCodec["Lz4"] = "lz4";
    /** Tar */
    KnownCompressionCodec["Tar"] = "tar";
    /** TarGZip */
    KnownCompressionCodec["TarGZip"] = "tarGZip";
})(exports.KnownCompressionCodec || (exports.KnownCompressionCodec = {}));
/** Known values of {@link OrcCompressionCodec} that the service accepts. */
exports.KnownOrcCompressionCodec = void 0;
(function (KnownOrcCompressionCodec) {
    /** None */
    KnownOrcCompressionCodec["None"] = "none";
    /** Zlib */
    KnownOrcCompressionCodec["Zlib"] = "zlib";
    /** Snappy */
    KnownOrcCompressionCodec["Snappy"] = "snappy";
    /** Lzo */
    KnownOrcCompressionCodec["Lzo"] = "lzo";
})(exports.KnownOrcCompressionCodec || (exports.KnownOrcCompressionCodec = {}));
/** Known values of {@link DynamicsDeploymentType} that the service accepts. */
exports.KnownDynamicsDeploymentType = void 0;
(function (KnownDynamicsDeploymentType) {
    /** Online */
    KnownDynamicsDeploymentType["Online"] = "Online";
    /** OnPremisesWithIfd */
    KnownDynamicsDeploymentType["OnPremisesWithIfd"] = "OnPremisesWithIfd";
})(exports.KnownDynamicsDeploymentType || (exports.KnownDynamicsDeploymentType = {}));
/** Known values of {@link DynamicsAuthenticationType} that the service accepts. */
exports.KnownDynamicsAuthenticationType = void 0;
(function (KnownDynamicsAuthenticationType) {
    /** Office365 */
    KnownDynamicsAuthenticationType["Office365"] = "Office365";
    /** Ifd */
    KnownDynamicsAuthenticationType["Ifd"] = "Ifd";
    /** AADServicePrincipal */
    KnownDynamicsAuthenticationType["AADServicePrincipal"] = "AADServicePrincipal";
})(exports.KnownDynamicsAuthenticationType || (exports.KnownDynamicsAuthenticationType = {}));
/** Known values of {@link ServicePrincipalCredentialType} that the service accepts. */
exports.KnownServicePrincipalCredentialType = void 0;
(function (KnownServicePrincipalCredentialType) {
    /** ServicePrincipalKey */
    KnownServicePrincipalCredentialType["ServicePrincipalKey"] = "ServicePrincipalKey";
    /** ServicePrincipalCert */
    KnownServicePrincipalCredentialType["ServicePrincipalCert"] = "ServicePrincipalCert";
})(exports.KnownServicePrincipalCredentialType || (exports.KnownServicePrincipalCredentialType = {}));
/** Known values of {@link HdiNodeTypes} that the service accepts. */
exports.KnownHdiNodeTypes = void 0;
(function (KnownHdiNodeTypes) {
    /** Headnode */
    KnownHdiNodeTypes["Headnode"] = "Headnode";
    /** Workernode */
    KnownHdiNodeTypes["Workernode"] = "Workernode";
    /** Zookeeper */
    KnownHdiNodeTypes["Zookeeper"] = "Zookeeper";
})(exports.KnownHdiNodeTypes || (exports.KnownHdiNodeTypes = {}));
/** Known values of {@link JsonWriteFilePattern} that the service accepts. */
exports.KnownJsonWriteFilePattern = void 0;
(function (KnownJsonWriteFilePattern) {
    /** SetOfObjects */
    KnownJsonWriteFilePattern["SetOfObjects"] = "setOfObjects";
    /** ArrayOfObjects */
    KnownJsonWriteFilePattern["ArrayOfObjects"] = "arrayOfObjects";
})(exports.KnownJsonWriteFilePattern || (exports.KnownJsonWriteFilePattern = {}));
/** Known values of {@link SalesforceSourceReadBehavior} that the service accepts. */
exports.KnownSalesforceSourceReadBehavior = void 0;
(function (KnownSalesforceSourceReadBehavior) {
    /** Query */
    KnownSalesforceSourceReadBehavior["Query"] = "Query";
    /** QueryAll */
    KnownSalesforceSourceReadBehavior["QueryAll"] = "QueryAll";
})(exports.KnownSalesforceSourceReadBehavior || (exports.KnownSalesforceSourceReadBehavior = {}));
/** Known values of {@link AmazonRdsForOraclePartitionOption} that the service accepts. */
exports.KnownAmazonRdsForOraclePartitionOption = void 0;
(function (KnownAmazonRdsForOraclePartitionOption) {
    /** None */
    KnownAmazonRdsForOraclePartitionOption["None"] = "None";
    /** PhysicalPartitionsOfTable */
    KnownAmazonRdsForOraclePartitionOption["PhysicalPartitionsOfTable"] = "PhysicalPartitionsOfTable";
    /** DynamicRange */
    KnownAmazonRdsForOraclePartitionOption["DynamicRange"] = "DynamicRange";
})(exports.KnownAmazonRdsForOraclePartitionOption || (exports.KnownAmazonRdsForOraclePartitionOption = {}));
/** Known values of {@link CopyBehaviorType} that the service accepts. */
exports.KnownCopyBehaviorType = void 0;
(function (KnownCopyBehaviorType) {
    /** PreserveHierarchy */
    KnownCopyBehaviorType["PreserveHierarchy"] = "PreserveHierarchy";
    /** FlattenHierarchy */
    KnownCopyBehaviorType["FlattenHierarchy"] = "FlattenHierarchy";
    /** MergeFiles */
    KnownCopyBehaviorType["MergeFiles"] = "MergeFiles";
})(exports.KnownCopyBehaviorType || (exports.KnownCopyBehaviorType = {}));
/** Known values of {@link SqlWriteBehaviorEnum} that the service accepts. */
exports.KnownSqlWriteBehaviorEnum = void 0;
(function (KnownSqlWriteBehaviorEnum) {
    /** Insert */
    KnownSqlWriteBehaviorEnum["Insert"] = "Insert";
    /** Upsert */
    KnownSqlWriteBehaviorEnum["Upsert"] = "Upsert";
    /** StoredProcedure */
    KnownSqlWriteBehaviorEnum["StoredProcedure"] = "StoredProcedure";
})(exports.KnownSqlWriteBehaviorEnum || (exports.KnownSqlWriteBehaviorEnum = {}));
/** Known values of {@link SqlDWWriteBehaviorEnum} that the service accepts. */
exports.KnownSqlDWWriteBehaviorEnum = void 0;
(function (KnownSqlDWWriteBehaviorEnum) {
    /** Insert */
    KnownSqlDWWriteBehaviorEnum["Insert"] = "Insert";
    /** Upsert */
    KnownSqlDWWriteBehaviorEnum["Upsert"] = "Upsert";
})(exports.KnownSqlDWWriteBehaviorEnum || (exports.KnownSqlDWWriteBehaviorEnum = {}));
/** Known values of {@link SqlPartitionOption} that the service accepts. */
exports.KnownSqlPartitionOption = void 0;
(function (KnownSqlPartitionOption) {
    /** None */
    KnownSqlPartitionOption["None"] = "None";
    /** PhysicalPartitionsOfTable */
    KnownSqlPartitionOption["PhysicalPartitionsOfTable"] = "PhysicalPartitionsOfTable";
    /** DynamicRange */
    KnownSqlPartitionOption["DynamicRange"] = "DynamicRange";
})(exports.KnownSqlPartitionOption || (exports.KnownSqlPartitionOption = {}));
/** Known values of {@link SapHanaPartitionOption} that the service accepts. */
exports.KnownSapHanaPartitionOption = void 0;
(function (KnownSapHanaPartitionOption) {
    /** None */
    KnownSapHanaPartitionOption["None"] = "None";
    /** PhysicalPartitionsOfTable */
    KnownSapHanaPartitionOption["PhysicalPartitionsOfTable"] = "PhysicalPartitionsOfTable";
    /** SapHanaDynamicRange */
    KnownSapHanaPartitionOption["SapHanaDynamicRange"] = "SapHanaDynamicRange";
})(exports.KnownSapHanaPartitionOption || (exports.KnownSapHanaPartitionOption = {}));
/** Known values of {@link SapTablePartitionOption} that the service accepts. */
exports.KnownSapTablePartitionOption = void 0;
(function (KnownSapTablePartitionOption) {
    /** None */
    KnownSapTablePartitionOption["None"] = "None";
    /** PartitionOnInt */
    KnownSapTablePartitionOption["PartitionOnInt"] = "PartitionOnInt";
    /** PartitionOnCalendarYear */
    KnownSapTablePartitionOption["PartitionOnCalendarYear"] = "PartitionOnCalendarYear";
    /** PartitionOnCalendarMonth */
    KnownSapTablePartitionOption["PartitionOnCalendarMonth"] = "PartitionOnCalendarMonth";
    /** PartitionOnCalendarDate */
    KnownSapTablePartitionOption["PartitionOnCalendarDate"] = "PartitionOnCalendarDate";
    /** PartitionOnTime */
    KnownSapTablePartitionOption["PartitionOnTime"] = "PartitionOnTime";
})(exports.KnownSapTablePartitionOption || (exports.KnownSapTablePartitionOption = {}));
/** Known values of {@link OraclePartitionOption} that the service accepts. */
exports.KnownOraclePartitionOption = void 0;
(function (KnownOraclePartitionOption) {
    /** None */
    KnownOraclePartitionOption["None"] = "None";
    /** PhysicalPartitionsOfTable */
    KnownOraclePartitionOption["PhysicalPartitionsOfTable"] = "PhysicalPartitionsOfTable";
    /** DynamicRange */
    KnownOraclePartitionOption["DynamicRange"] = "DynamicRange";
})(exports.KnownOraclePartitionOption || (exports.KnownOraclePartitionOption = {}));
/** Known values of {@link TeradataPartitionOption} that the service accepts. */
exports.KnownTeradataPartitionOption = void 0;
(function (KnownTeradataPartitionOption) {
    /** None */
    KnownTeradataPartitionOption["None"] = "None";
    /** Hash */
    KnownTeradataPartitionOption["Hash"] = "Hash";
    /** DynamicRange */
    KnownTeradataPartitionOption["DynamicRange"] = "DynamicRange";
})(exports.KnownTeradataPartitionOption || (exports.KnownTeradataPartitionOption = {}));
/** Known values of {@link NetezzaPartitionOption} that the service accepts. */
exports.KnownNetezzaPartitionOption = void 0;
(function (KnownNetezzaPartitionOption) {
    /** None */
    KnownNetezzaPartitionOption["None"] = "None";
    /** DataSlice */
    KnownNetezzaPartitionOption["DataSlice"] = "DataSlice";
    /** DynamicRange */
    KnownNetezzaPartitionOption["DynamicRange"] = "DynamicRange";
})(exports.KnownNetezzaPartitionOption || (exports.KnownNetezzaPartitionOption = {}));

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const OperationListResponse = {
    type: {
        name: "Composite",
        className: "OperationListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Operation"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Operation = {
    type: {
        name: "Composite",
        className: "Operation",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            origin: {
                serializedName: "origin",
                type: {
                    name: "String"
                }
            },
            display: {
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "OperationDisplay"
                }
            },
            serviceSpecification: {
                serializedName: "properties.serviceSpecification",
                type: {
                    name: "Composite",
                    className: "OperationServiceSpecification"
                }
            }
        }
    }
};
const OperationDisplay = {
    type: {
        name: "Composite",
        className: "OperationDisplay",
        modelProperties: {
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            provider: {
                serializedName: "provider",
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "resource",
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationServiceSpecification = {
    type: {
        name: "Composite",
        className: "OperationServiceSpecification",
        modelProperties: {
            logSpecifications: {
                serializedName: "logSpecifications",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "OperationLogSpecification"
                        }
                    }
                }
            },
            metricSpecifications: {
                serializedName: "metricSpecifications",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "OperationMetricSpecification"
                        }
                    }
                }
            }
        }
    }
};
const OperationLogSpecification = {
    type: {
        name: "Composite",
        className: "OperationLogSpecification",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            },
            blobDuration: {
                serializedName: "blobDuration",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationMetricSpecification = {
    type: {
        name: "Composite",
        className: "OperationMetricSpecification",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            },
            displayDescription: {
                serializedName: "displayDescription",
                type: {
                    name: "String"
                }
            },
            unit: {
                serializedName: "unit",
                type: {
                    name: "String"
                }
            },
            aggregationType: {
                serializedName: "aggregationType",
                type: {
                    name: "String"
                }
            },
            enableRegionalMdmAccount: {
                serializedName: "enableRegionalMdmAccount",
                type: {
                    name: "String"
                }
            },
            sourceMdmAccount: {
                serializedName: "sourceMdmAccount",
                type: {
                    name: "String"
                }
            },
            sourceMdmNamespace: {
                serializedName: "sourceMdmNamespace",
                type: {
                    name: "String"
                }
            },
            availabilities: {
                serializedName: "availabilities",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "OperationMetricAvailability"
                        }
                    }
                }
            },
            dimensions: {
                serializedName: "dimensions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "OperationMetricDimension"
                        }
                    }
                }
            }
        }
    }
};
const OperationMetricAvailability = {
    type: {
        name: "Composite",
        className: "OperationMetricAvailability",
        modelProperties: {
            timeGrain: {
                serializedName: "timeGrain",
                type: {
                    name: "String"
                }
            },
            blobDuration: {
                serializedName: "blobDuration",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationMetricDimension = {
    type: {
        name: "Composite",
        className: "OperationMetricDimension",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            },
            toBeExportedForShoebox: {
                serializedName: "toBeExportedForShoebox",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const CloudError = {
    type: {
        name: "Composite",
        className: "CloudError",
        modelProperties: {
            code: {
                serializedName: "error.code",
                required: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "error.message",
                required: true,
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "error.target",
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "error.details",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CloudError"
                        }
                    }
                }
            }
        }
    }
};
const FactoryListResponse = {
    type: {
        name: "Composite",
        className: "FactoryListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Factory"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const FactoryIdentity = {
    type: {
        name: "Composite",
        className: "FactoryIdentity",
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            principalId: {
                serializedName: "principalId",
                readOnly: true,
                type: {
                    name: "Uuid"
                }
            },
            tenantId: {
                serializedName: "tenantId",
                readOnly: true,
                type: {
                    name: "Uuid"
                }
            },
            userAssignedIdentities: {
                serializedName: "userAssignedIdentities",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
const PurviewConfiguration = {
    type: {
        name: "Composite",
        className: "PurviewConfiguration",
        modelProperties: {
            purviewResourceId: {
                serializedName: "purviewResourceId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const FactoryRepoConfiguration = {
    type: {
        name: "Composite",
        className: "FactoryRepoConfiguration",
        uberParent: "FactoryRepoConfiguration",
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            accountName: {
                serializedName: "accountName",
                required: true,
                type: {
                    name: "String"
                }
            },
            repositoryName: {
                serializedName: "repositoryName",
                required: true,
                type: {
                    name: "String"
                }
            },
            collaborationBranch: {
                serializedName: "collaborationBranch",
                required: true,
                type: {
                    name: "String"
                }
            },
            rootFolder: {
                serializedName: "rootFolder",
                required: true,
                type: {
                    name: "String"
                }
            },
            lastCommitId: {
                serializedName: "lastCommitId",
                type: {
                    name: "String"
                }
            },
            disablePublish: {
                serializedName: "disablePublish",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const GlobalParameterSpecification = {
    type: {
        name: "Composite",
        className: "GlobalParameterSpecification",
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "any"
                }
            }
        }
    }
};
const EncryptionConfiguration = {
    type: {
        name: "Composite",
        className: "EncryptionConfiguration",
        modelProperties: {
            keyName: {
                serializedName: "keyName",
                required: true,
                type: {
                    name: "String"
                }
            },
            vaultBaseUrl: {
                serializedName: "vaultBaseUrl",
                required: true,
                type: {
                    name: "String"
                }
            },
            keyVersion: {
                serializedName: "keyVersion",
                type: {
                    name: "String"
                }
            },
            identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "CMKIdentityDefinition"
                }
            }
        }
    }
};
const CMKIdentityDefinition = {
    type: {
        name: "Composite",
        className: "CMKIdentityDefinition",
        modelProperties: {
            userAssignedIdentity: {
                serializedName: "userAssignedIdentity",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Resource = {
    type: {
        name: "Composite",
        className: "Resource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            eTag: {
                serializedName: "eTag",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const FactoryRepoUpdate = {
    type: {
        name: "Composite",
        className: "FactoryRepoUpdate",
        modelProperties: {
            factoryResourceId: {
                serializedName: "factoryResourceId",
                type: {
                    name: "String"
                }
            },
            repoConfiguration: {
                serializedName: "repoConfiguration",
                type: {
                    name: "Composite",
                    className: "FactoryRepoConfiguration"
                }
            }
        }
    }
};
const ExposureControlRequest = {
    type: {
        name: "Composite",
        className: "ExposureControlRequest",
        modelProperties: {
            featureName: {
                serializedName: "featureName",
                type: {
                    name: "String"
                }
            },
            featureType: {
                serializedName: "featureType",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ExposureControlResponse = {
    type: {
        name: "Composite",
        className: "ExposureControlResponse",
        modelProperties: {
            featureName: {
                serializedName: "featureName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ExposureControlBatchRequest = {
    type: {
        name: "Composite",
        className: "ExposureControlBatchRequest",
        modelProperties: {
            exposureControlRequests: {
                serializedName: "exposureControlRequests",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ExposureControlRequest"
                        }
                    }
                }
            }
        }
    }
};
const ExposureControlBatchResponse = {
    type: {
        name: "Composite",
        className: "ExposureControlBatchResponse",
        modelProperties: {
            exposureControlResponses: {
                serializedName: "exposureControlResponses",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ExposureControlResponse"
                        }
                    }
                }
            }
        }
    }
};
const FactoryUpdateParameters = {
    type: {
        name: "Composite",
        className: "FactoryUpdateParameters",
        modelProperties: {
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "FactoryIdentity"
                }
            },
            publicNetworkAccess: {
                serializedName: "properties.publicNetworkAccess",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const GitHubAccessTokenRequest = {
    type: {
        name: "Composite",
        className: "GitHubAccessTokenRequest",
        modelProperties: {
            gitHubAccessCode: {
                serializedName: "gitHubAccessCode",
                required: true,
                type: {
                    name: "String"
                }
            },
            gitHubClientId: {
                serializedName: "gitHubClientId",
                type: {
                    name: "String"
                }
            },
            gitHubClientSecret: {
                serializedName: "gitHubClientSecret",
                type: {
                    name: "Composite",
                    className: "GitHubClientSecret"
                }
            },
            gitHubAccessTokenBaseUrl: {
                serializedName: "gitHubAccessTokenBaseUrl",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const GitHubClientSecret = {
    type: {
        name: "Composite",
        className: "GitHubClientSecret",
        modelProperties: {
            byoaSecretAkvUrl: {
                serializedName: "byoaSecretAkvUrl",
                type: {
                    name: "String"
                }
            },
            byoaSecretName: {
                serializedName: "byoaSecretName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const GitHubAccessTokenResponse = {
    type: {
        name: "Composite",
        className: "GitHubAccessTokenResponse",
        modelProperties: {
            gitHubAccessToken: {
                serializedName: "gitHubAccessToken",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const UserAccessPolicy = {
    type: {
        name: "Composite",
        className: "UserAccessPolicy",
        modelProperties: {
            permissions: {
                serializedName: "permissions",
                type: {
                    name: "String"
                }
            },
            accessResourcePath: {
                serializedName: "accessResourcePath",
                type: {
                    name: "String"
                }
            },
            profileName: {
                serializedName: "profileName",
                type: {
                    name: "String"
                }
            },
            startTime: {
                serializedName: "startTime",
                type: {
                    name: "String"
                }
            },
            expireTime: {
                serializedName: "expireTime",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AccessPolicyResponse = {
    type: {
        name: "Composite",
        className: "AccessPolicyResponse",
        modelProperties: {
            policy: {
                serializedName: "policy",
                type: {
                    name: "Composite",
                    className: "UserAccessPolicy"
                }
            },
            accessToken: {
                serializedName: "accessToken",
                type: {
                    name: "String"
                }
            },
            dataPlaneUrl: {
                serializedName: "dataPlaneUrl",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const IntegrationRuntimeListResponse = {
    type: {
        name: "Composite",
        className: "IntegrationRuntimeListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "IntegrationRuntimeResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const IntegrationRuntime = {
    serializedName: "IntegrationRuntime",
    type: {
        name: "Composite",
        className: "IntegrationRuntime",
        uberParent: "IntegrationRuntime",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SubResource = {
    type: {
        name: "Composite",
        className: "SubResource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            etag: {
                serializedName: "etag",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const UpdateIntegrationRuntimeRequest = {
    type: {
        name: "Composite",
        className: "UpdateIntegrationRuntimeRequest",
        modelProperties: {
            autoUpdate: {
                serializedName: "autoUpdate",
                type: {
                    name: "String"
                }
            },
            updateDelayOffset: {
                serializedName: "updateDelayOffset",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const IntegrationRuntimeStatusResponse = {
    type: {
        name: "Composite",
        className: "IntegrationRuntimeStatusResponse",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "IntegrationRuntimeStatus"
                }
            }
        }
    }
};
const IntegrationRuntimeStatus = {
    serializedName: "IntegrationRuntimeStatus",
    type: {
        name: "Composite",
        className: "IntegrationRuntimeStatus",
        uberParent: "IntegrationRuntimeStatus",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            dataFactoryName: {
                serializedName: "dataFactoryName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            state: {
                serializedName: "state",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const IntegrationRuntimeOutboundNetworkDependenciesEndpointsResponse = {
    type: {
        name: "Composite",
        className: "IntegrationRuntimeOutboundNetworkDependenciesEndpointsResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "IntegrationRuntimeOutboundNetworkDependenciesCategoryEndpoint"
                        }
                    }
                }
            }
        }
    }
};
const IntegrationRuntimeOutboundNetworkDependenciesCategoryEndpoint = {
    type: {
        name: "Composite",
        className: "IntegrationRuntimeOutboundNetworkDependenciesCategoryEndpoint",
        modelProperties: {
            category: {
                serializedName: "category",
                type: {
                    name: "String"
                }
            },
            endpoints: {
                serializedName: "endpoints",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "IntegrationRuntimeOutboundNetworkDependenciesEndpoint"
                        }
                    }
                }
            }
        }
    }
};
const IntegrationRuntimeOutboundNetworkDependenciesEndpoint = {
    type: {
        name: "Composite",
        className: "IntegrationRuntimeOutboundNetworkDependenciesEndpoint",
        modelProperties: {
            domainName: {
                serializedName: "domainName",
                type: {
                    name: "String"
                }
            },
            endpointDetails: {
                serializedName: "endpointDetails",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "IntegrationRuntimeOutboundNetworkDependenciesEndpointDetails"
                        }
                    }
                }
            }
        }
    }
};
const IntegrationRuntimeOutboundNetworkDependenciesEndpointDetails = {
    type: {
        name: "Composite",
        className: "IntegrationRuntimeOutboundNetworkDependenciesEndpointDetails",
        modelProperties: {
            port: {
                serializedName: "port",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const IntegrationRuntimeConnectionInfo = {
    type: {
        name: "Composite",
        className: "IntegrationRuntimeConnectionInfo",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            serviceToken: {
                serializedName: "serviceToken",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            identityCertThumbprint: {
                serializedName: "identityCertThumbprint",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            hostServiceUri: {
                serializedName: "hostServiceUri",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "version",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            publicKey: {
                serializedName: "publicKey",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            isIdentityCertExprired: {
                serializedName: "isIdentityCertExprired",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const IntegrationRuntimeRegenerateKeyParameters = {
    type: {
        name: "Composite",
        className: "IntegrationRuntimeRegenerateKeyParameters",
        modelProperties: {
            keyName: {
                serializedName: "keyName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const IntegrationRuntimeAuthKeys = {
    type: {
        name: "Composite",
        className: "IntegrationRuntimeAuthKeys",
        modelProperties: {
            authKey1: {
                serializedName: "authKey1",
                type: {
                    name: "String"
                }
            },
            authKey2: {
                serializedName: "authKey2",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const IntegrationRuntimeMonitoringData = {
    type: {
        name: "Composite",
        className: "IntegrationRuntimeMonitoringData",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            nodes: {
                serializedName: "nodes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "IntegrationRuntimeNodeMonitoringData"
                        }
                    }
                }
            }
        }
    }
};
const IntegrationRuntimeNodeMonitoringData = {
    type: {
        name: "Composite",
        className: "IntegrationRuntimeNodeMonitoringData",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            nodeName: {
                serializedName: "nodeName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            availableMemoryInMB: {
                serializedName: "availableMemoryInMB",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            cpuUtilization: {
                serializedName: "cpuUtilization",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            concurrentJobsLimit: {
                serializedName: "concurrentJobsLimit",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            concurrentJobsRunning: {
                serializedName: "concurrentJobsRunning",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            maxConcurrentJobs: {
                serializedName: "maxConcurrentJobs",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            sentBytes: {
                serializedName: "sentBytes",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            receivedBytes: {
                serializedName: "receivedBytes",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const LinkedIntegrationRuntimeRequest = {
    type: {
        name: "Composite",
        className: "LinkedIntegrationRuntimeRequest",
        modelProperties: {
            linkedFactoryName: {
                serializedName: "factoryName",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CreateLinkedIntegrationRuntimeRequest = {
    type: {
        name: "Composite",
        className: "CreateLinkedIntegrationRuntimeRequest",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            subscriptionId: {
                serializedName: "subscriptionId",
                type: {
                    name: "String"
                }
            },
            dataFactoryName: {
                serializedName: "dataFactoryName",
                type: {
                    name: "String"
                }
            },
            dataFactoryLocation: {
                serializedName: "dataFactoryLocation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SsisObjectMetadataStatusResponse = {
    type: {
        name: "Composite",
        className: "SsisObjectMetadataStatusResponse",
        modelProperties: {
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "String"
                }
            },
            error: {
                serializedName: "error",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const GetSsisObjectMetadataRequest = {
    type: {
        name: "Composite",
        className: "GetSsisObjectMetadataRequest",
        modelProperties: {
            metadataPath: {
                serializedName: "metadataPath",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SsisObjectMetadataListResponse = {
    type: {
        name: "Composite",
        className: "SsisObjectMetadataListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SsisObjectMetadata"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SsisObjectMetadata = {
    type: {
        name: "Composite",
        className: "SsisObjectMetadata",
        uberParent: "SsisObjectMetadata",
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            id: {
                serializedName: "id",
                type: {
                    name: "Number"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SelfHostedIntegrationRuntimeNode = {
    type: {
        name: "Composite",
        className: "SelfHostedIntegrationRuntimeNode",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            nodeName: {
                serializedName: "nodeName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            machineName: {
                serializedName: "machineName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            hostServiceUri: {
                serializedName: "hostServiceUri",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            capabilities: {
                serializedName: "capabilities",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            versionStatus: {
                serializedName: "versionStatus",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "version",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            registerTime: {
                serializedName: "registerTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            lastConnectTime: {
                serializedName: "lastConnectTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            expiryTime: {
                serializedName: "expiryTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            lastStartTime: {
                serializedName: "lastStartTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            lastStopTime: {
                serializedName: "lastStopTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            lastUpdateResult: {
                serializedName: "lastUpdateResult",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            lastStartUpdateTime: {
                serializedName: "lastStartUpdateTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            lastEndUpdateTime: {
                serializedName: "lastEndUpdateTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            isActiveDispatcher: {
                serializedName: "isActiveDispatcher",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            concurrentJobsLimit: {
                serializedName: "concurrentJobsLimit",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            maxConcurrentJobs: {
                serializedName: "maxConcurrentJobs",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const UpdateIntegrationRuntimeNodeRequest = {
    type: {
        name: "Composite",
        className: "UpdateIntegrationRuntimeNodeRequest",
        modelProperties: {
            concurrentJobsLimit: {
                constraints: {
                    InclusiveMinimum: 1
                },
                serializedName: "concurrentJobsLimit",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const IntegrationRuntimeNodeIpAddress = {
    type: {
        name: "Composite",
        className: "IntegrationRuntimeNodeIpAddress",
        modelProperties: {
            ipAddress: {
                serializedName: "ipAddress",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const LinkedServiceListResponse = {
    type: {
        name: "Composite",
        className: "LinkedServiceListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LinkedServiceResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const LinkedService = {
    serializedName: "LinkedService",
    type: {
        name: "Composite",
        className: "LinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            connectVia: {
                serializedName: "connectVia",
                type: {
                    name: "Composite",
                    className: "IntegrationRuntimeReference"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            parameters: {
                serializedName: "parameters",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Composite", className: "ParameterSpecification" }
                    }
                }
            },
            annotations: {
                serializedName: "annotations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any"
                        }
                    }
                }
            }
        }
    }
};
const IntegrationRuntimeReference = {
    type: {
        name: "Composite",
        className: "IntegrationRuntimeReference",
        modelProperties: {
            type: {
                defaultValue: "IntegrationRuntimeReference",
                isConstant: true,
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            referenceName: {
                serializedName: "referenceName",
                required: true,
                type: {
                    name: "String"
                }
            },
            parameters: {
                serializedName: "parameters",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
const ParameterSpecification = {
    type: {
        name: "Composite",
        className: "ParameterSpecification",
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            defaultValue: {
                serializedName: "defaultValue",
                type: {
                    name: "any"
                }
            }
        }
    }
};
const DatasetListResponse = {
    type: {
        name: "Composite",
        className: "DatasetListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DatasetResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Dataset = {
    serializedName: "Dataset",
    type: {
        name: "Composite",
        className: "Dataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            structure: {
                serializedName: "structure",
                type: {
                    name: "any"
                }
            },
            schema: {
                serializedName: "schema",
                type: {
                    name: "any"
                }
            },
            linkedServiceName: {
                serializedName: "linkedServiceName",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            },
            parameters: {
                serializedName: "parameters",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Composite", className: "ParameterSpecification" }
                    }
                }
            },
            annotations: {
                serializedName: "annotations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any"
                        }
                    }
                }
            },
            folder: {
                serializedName: "folder",
                type: {
                    name: "Composite",
                    className: "DatasetFolder"
                }
            }
        }
    }
};
const LinkedServiceReference = {
    type: {
        name: "Composite",
        className: "LinkedServiceReference",
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            referenceName: {
                serializedName: "referenceName",
                required: true,
                type: {
                    name: "String"
                }
            },
            parameters: {
                serializedName: "parameters",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
const DatasetFolder = {
    type: {
        name: "Composite",
        className: "DatasetFolder",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PipelineListResponse = {
    type: {
        name: "Composite",
        className: "PipelineListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PipelineResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Activity = {
    serializedName: "Activity",
    type: {
        name: "Composite",
        className: "Activity",
        uberParent: "Activity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            state: {
                serializedName: "state",
                type: {
                    name: "String"
                }
            },
            onInactiveMarkAs: {
                serializedName: "onInactiveMarkAs",
                type: {
                    name: "String"
                }
            },
            dependsOn: {
                serializedName: "dependsOn",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ActivityDependency"
                        }
                    }
                }
            },
            userProperties: {
                serializedName: "userProperties",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "UserProperty"
                        }
                    }
                }
            }
        }
    }
};
const ActivityDependency = {
    type: {
        name: "Composite",
        className: "ActivityDependency",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            activity: {
                serializedName: "activity",
                required: true,
                type: {
                    name: "String"
                }
            },
            dependencyConditions: {
                serializedName: "dependencyConditions",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const UserProperty = {
    type: {
        name: "Composite",
        className: "UserProperty",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "any"
                }
            }
        }
    }
};
const VariableSpecification = {
    type: {
        name: "Composite",
        className: "VariableSpecification",
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            defaultValue: {
                serializedName: "defaultValue",
                type: {
                    name: "any"
                }
            }
        }
    }
};
const PipelineFolder = {
    type: {
        name: "Composite",
        className: "PipelineFolder",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PipelinePolicy = {
    type: {
        name: "Composite",
        className: "PipelinePolicy",
        modelProperties: {
            elapsedTimeMetric: {
                serializedName: "elapsedTimeMetric",
                type: {
                    name: "Composite",
                    className: "PipelineElapsedTimeMetricPolicy"
                }
            }
        }
    }
};
const PipelineElapsedTimeMetricPolicy = {
    type: {
        name: "Composite",
        className: "PipelineElapsedTimeMetricPolicy",
        modelProperties: {
            duration: {
                serializedName: "duration",
                type: {
                    name: "any"
                }
            }
        }
    }
};
const CreateRunResponse = {
    type: {
        name: "Composite",
        className: "CreateRunResponse",
        modelProperties: {
            runId: {
                serializedName: "runId",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RunFilterParameters = {
    type: {
        name: "Composite",
        className: "RunFilterParameters",
        modelProperties: {
            continuationToken: {
                serializedName: "continuationToken",
                type: {
                    name: "String"
                }
            },
            lastUpdatedAfter: {
                serializedName: "lastUpdatedAfter",
                required: true,
                type: {
                    name: "DateTime"
                }
            },
            lastUpdatedBefore: {
                serializedName: "lastUpdatedBefore",
                required: true,
                type: {
                    name: "DateTime"
                }
            },
            filters: {
                serializedName: "filters",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RunQueryFilter"
                        }
                    }
                }
            },
            orderBy: {
                serializedName: "orderBy",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RunQueryOrderBy"
                        }
                    }
                }
            }
        }
    }
};
const RunQueryFilter = {
    type: {
        name: "Composite",
        className: "RunQueryFilter",
        modelProperties: {
            operand: {
                serializedName: "operand",
                required: true,
                type: {
                    name: "String"
                }
            },
            operator: {
                serializedName: "operator",
                required: true,
                type: {
                    name: "String"
                }
            },
            values: {
                serializedName: "values",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const RunQueryOrderBy = {
    type: {
        name: "Composite",
        className: "RunQueryOrderBy",
        modelProperties: {
            orderBy: {
                serializedName: "orderBy",
                required: true,
                type: {
                    name: "String"
                }
            },
            order: {
                serializedName: "order",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PipelineRunsQueryResponse = {
    type: {
        name: "Composite",
        className: "PipelineRunsQueryResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PipelineRun"
                        }
                    }
                }
            },
            continuationToken: {
                serializedName: "continuationToken",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PipelineRun = {
    type: {
        name: "Composite",
        className: "PipelineRun",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            runId: {
                serializedName: "runId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            runGroupId: {
                serializedName: "runGroupId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            isLatest: {
                serializedName: "isLatest",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            pipelineName: {
                serializedName: "pipelineName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            parameters: {
                serializedName: "parameters",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            runDimensions: {
                serializedName: "runDimensions",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            invokedBy: {
                serializedName: "invokedBy",
                type: {
                    name: "Composite",
                    className: "PipelineRunInvokedBy"
                }
            },
            lastUpdated: {
                serializedName: "lastUpdated",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            runStart: {
                serializedName: "runStart",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            runEnd: {
                serializedName: "runEnd",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            durationInMs: {
                serializedName: "durationInMs",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PipelineRunInvokedBy = {
    type: {
        name: "Composite",
        className: "PipelineRunInvokedBy",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            invokedByType: {
                serializedName: "invokedByType",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            pipelineName: {
                serializedName: "pipelineName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            pipelineRunId: {
                serializedName: "pipelineRunId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ActivityRunsQueryResponse = {
    type: {
        name: "Composite",
        className: "ActivityRunsQueryResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ActivityRun"
                        }
                    }
                }
            },
            continuationToken: {
                serializedName: "continuationToken",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ActivityRun = {
    type: {
        name: "Composite",
        className: "ActivityRun",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            pipelineName: {
                serializedName: "pipelineName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            pipelineRunId: {
                serializedName: "pipelineRunId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            activityName: {
                serializedName: "activityName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            activityType: {
                serializedName: "activityType",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            activityRunId: {
                serializedName: "activityRunId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            linkedServiceName: {
                serializedName: "linkedServiceName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            activityRunStart: {
                serializedName: "activityRunStart",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            activityRunEnd: {
                serializedName: "activityRunEnd",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            durationInMs: {
                serializedName: "durationInMs",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            input: {
                serializedName: "input",
                readOnly: true,
                type: {
                    name: "any"
                }
            },
            output: {
                serializedName: "output",
                readOnly: true,
                type: {
                    name: "any"
                }
            },
            error: {
                serializedName: "error",
                readOnly: true,
                type: {
                    name: "any"
                }
            }
        }
    }
};
const TriggerListResponse = {
    type: {
        name: "Composite",
        className: "TriggerListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TriggerResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Trigger = {
    serializedName: "Trigger",
    type: {
        name: "Composite",
        className: "Trigger",
        uberParent: "Trigger",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            runtimeState: {
                serializedName: "runtimeState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            annotations: {
                serializedName: "annotations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any"
                        }
                    }
                }
            }
        }
    }
};
const TriggerFilterParameters = {
    type: {
        name: "Composite",
        className: "TriggerFilterParameters",
        modelProperties: {
            continuationToken: {
                serializedName: "continuationToken",
                type: {
                    name: "String"
                }
            },
            parentTriggerName: {
                serializedName: "parentTriggerName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TriggerQueryResponse = {
    type: {
        name: "Composite",
        className: "TriggerQueryResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TriggerResource"
                        }
                    }
                }
            },
            continuationToken: {
                serializedName: "continuationToken",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TriggerSubscriptionOperationStatus = {
    type: {
        name: "Composite",
        className: "TriggerSubscriptionOperationStatus",
        modelProperties: {
            triggerName: {
                serializedName: "triggerName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TriggerRunsQueryResponse = {
    type: {
        name: "Composite",
        className: "TriggerRunsQueryResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TriggerRun"
                        }
                    }
                }
            },
            continuationToken: {
                serializedName: "continuationToken",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TriggerRun = {
    type: {
        name: "Composite",
        className: "TriggerRun",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            triggerRunId: {
                serializedName: "triggerRunId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            triggerName: {
                serializedName: "triggerName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            triggerType: {
                serializedName: "triggerType",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            triggerRunTimestamp: {
                serializedName: "triggerRunTimestamp",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            triggeredPipelines: {
                serializedName: "triggeredPipelines",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            runDimension: {
                serializedName: "runDimension",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            dependencyStatus: {
                serializedName: "dependencyStatus",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
const DataFlow = {
    type: {
        name: "Composite",
        className: "DataFlow",
        uberParent: "DataFlow",
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            annotations: {
                serializedName: "annotations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any"
                        }
                    }
                }
            },
            folder: {
                serializedName: "folder",
                type: {
                    name: "Composite",
                    className: "DataFlowFolder"
                }
            }
        }
    }
};
const DataFlowFolder = {
    type: {
        name: "Composite",
        className: "DataFlowFolder",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DataFlowListResponse = {
    type: {
        name: "Composite",
        className: "DataFlowListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DataFlowResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CreateDataFlowDebugSessionRequest = {
    type: {
        name: "Composite",
        className: "CreateDataFlowDebugSessionRequest",
        modelProperties: {
            computeType: {
                serializedName: "computeType",
                type: {
                    name: "String"
                }
            },
            coreCount: {
                serializedName: "coreCount",
                type: {
                    name: "Number"
                }
            },
            timeToLive: {
                serializedName: "timeToLive",
                type: {
                    name: "Number"
                }
            },
            integrationRuntime: {
                serializedName: "integrationRuntime",
                type: {
                    name: "Composite",
                    className: "IntegrationRuntimeDebugResource"
                }
            }
        }
    }
};
const SubResourceDebugResource = {
    type: {
        name: "Composite",
        className: "SubResourceDebugResource",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CreateDataFlowDebugSessionResponse = {
    type: {
        name: "Composite",
        className: "CreateDataFlowDebugSessionResponse",
        modelProperties: {
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            sessionId: {
                serializedName: "sessionId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const QueryDataFlowDebugSessionsResponse = {
    type: {
        name: "Composite",
        className: "QueryDataFlowDebugSessionsResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DataFlowDebugSessionInfo"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DataFlowDebugSessionInfo = {
    type: {
        name: "Composite",
        className: "DataFlowDebugSessionInfo",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            dataFlowName: {
                serializedName: "dataFlowName",
                type: {
                    name: "String"
                }
            },
            computeType: {
                serializedName: "computeType",
                type: {
                    name: "String"
                }
            },
            coreCount: {
                serializedName: "coreCount",
                type: {
                    name: "Number"
                }
            },
            nodeCount: {
                serializedName: "nodeCount",
                type: {
                    name: "Number"
                }
            },
            integrationRuntimeName: {
                serializedName: "integrationRuntimeName",
                type: {
                    name: "String"
                }
            },
            sessionId: {
                serializedName: "sessionId",
                type: {
                    name: "String"
                }
            },
            startTime: {
                serializedName: "startTime",
                type: {
                    name: "String"
                }
            },
            timeToLiveInMinutes: {
                serializedName: "timeToLiveInMinutes",
                type: {
                    name: "Number"
                }
            },
            lastActivityTime: {
                serializedName: "lastActivityTime",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DataFlowDebugPackage = {
    type: {
        name: "Composite",
        className: "DataFlowDebugPackage",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            sessionId: {
                serializedName: "sessionId",
                type: {
                    name: "String"
                }
            },
            dataFlow: {
                serializedName: "dataFlow",
                type: {
                    name: "Composite",
                    className: "DataFlowDebugResource"
                }
            },
            dataFlows: {
                serializedName: "dataFlows",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DataFlowDebugResource"
                        }
                    }
                }
            },
            datasets: {
                serializedName: "datasets",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DatasetDebugResource"
                        }
                    }
                }
            },
            linkedServices: {
                serializedName: "linkedServices",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LinkedServiceDebugResource"
                        }
                    }
                }
            },
            staging: {
                serializedName: "staging",
                type: {
                    name: "Composite",
                    className: "DataFlowStagingInfo"
                }
            },
            debugSettings: {
                serializedName: "debugSettings",
                type: {
                    name: "Composite",
                    className: "DataFlowDebugPackageDebugSettings"
                }
            }
        }
    }
};
const DataFlowStagingInfo = {
    type: {
        name: "Composite",
        className: "DataFlowStagingInfo",
        modelProperties: {
            linkedService: {
                serializedName: "linkedService",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            },
            folderPath: {
                serializedName: "folderPath",
                type: {
                    name: "any"
                }
            }
        }
    }
};
const DataFlowDebugPackageDebugSettings = {
    type: {
        name: "Composite",
        className: "DataFlowDebugPackageDebugSettings",
        modelProperties: {
            sourceSettings: {
                serializedName: "sourceSettings",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DataFlowSourceSetting"
                        }
                    }
                }
            },
            parameters: {
                serializedName: "parameters",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            },
            datasetParameters: {
                serializedName: "datasetParameters",
                type: {
                    name: "any"
                }
            }
        }
    }
};
const DataFlowSourceSetting = {
    type: {
        name: "Composite",
        className: "DataFlowSourceSetting",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            sourceName: {
                serializedName: "sourceName",
                type: {
                    name: "String"
                }
            },
            rowLimit: {
                serializedName: "rowLimit",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const AddDataFlowToDebugSessionResponse = {
    type: {
        name: "Composite",
        className: "AddDataFlowToDebugSessionResponse",
        modelProperties: {
            jobVersion: {
                serializedName: "jobVersion",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DeleteDataFlowDebugSessionRequest = {
    type: {
        name: "Composite",
        className: "DeleteDataFlowDebugSessionRequest",
        modelProperties: {
            sessionId: {
                serializedName: "sessionId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DataFlowDebugCommandRequest = {
    type: {
        name: "Composite",
        className: "DataFlowDebugCommandRequest",
        modelProperties: {
            sessionId: {
                serializedName: "sessionId",
                type: {
                    name: "String"
                }
            },
            command: {
                serializedName: "command",
                type: {
                    name: "String"
                }
            },
            commandPayload: {
                serializedName: "commandPayload",
                type: {
                    name: "Composite",
                    className: "DataFlowDebugCommandPayload"
                }
            }
        }
    }
};
const DataFlowDebugCommandPayload = {
    type: {
        name: "Composite",
        className: "DataFlowDebugCommandPayload",
        modelProperties: {
            streamName: {
                serializedName: "streamName",
                required: true,
                type: {
                    name: "String"
                }
            },
            rowLimits: {
                serializedName: "rowLimits",
                type: {
                    name: "Number"
                }
            },
            columns: {
                serializedName: "columns",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            expression: {
                serializedName: "expression",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DataFlowDebugCommandResponse = {
    type: {
        name: "Composite",
        className: "DataFlowDebugCommandResponse",
        modelProperties: {
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            data: {
                serializedName: "data",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ManagedVirtualNetworkListResponse = {
    type: {
        name: "Composite",
        className: "ManagedVirtualNetworkListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ManagedVirtualNetworkResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ManagedVirtualNetwork = {
    type: {
        name: "Composite",
        className: "ManagedVirtualNetwork",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            vNetId: {
                serializedName: "vNetId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            alias: {
                serializedName: "alias",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ManagedPrivateEndpointListResponse = {
    type: {
        name: "Composite",
        className: "ManagedPrivateEndpointListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ManagedPrivateEndpointResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ManagedPrivateEndpoint = {
    type: {
        name: "Composite",
        className: "ManagedPrivateEndpoint",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            connectionState: {
                serializedName: "connectionState",
                type: {
                    name: "Composite",
                    className: "ConnectionStateProperties"
                }
            },
            fqdns: {
                serializedName: "fqdns",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            groupId: {
                serializedName: "groupId",
                type: {
                    name: "String"
                }
            },
            isReserved: {
                serializedName: "isReserved",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            privateLinkResourceId: {
                serializedName: "privateLinkResourceId",
                type: {
                    name: "String"
                }
            },
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ConnectionStateProperties = {
    type: {
        name: "Composite",
        className: "ConnectionStateProperties",
        modelProperties: {
            actionsRequired: {
                serializedName: "actionsRequired",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CredentialListResponse = {
    type: {
        name: "Composite",
        className: "CredentialListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ManagedIdentityCredentialResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Credential = {
    serializedName: "Credential",
    type: {
        name: "Composite",
        className: "Credential",
        uberParent: "Credential",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            annotations: {
                serializedName: "annotations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any"
                        }
                    }
                }
            }
        }
    }
};
const PrivateEndpointConnectionListResponse = {
    type: {
        name: "Composite",
        className: "PrivateEndpointConnectionListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrivateEndpointConnectionResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RemotePrivateEndpointConnection = {
    type: {
        name: "Composite",
        className: "RemotePrivateEndpointConnection",
        modelProperties: {
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            privateEndpoint: {
                serializedName: "privateEndpoint",
                type: {
                    name: "Composite",
                    className: "ArmIdWrapper"
                }
            },
            privateLinkServiceConnectionState: {
                serializedName: "privateLinkServiceConnectionState",
                type: {
                    name: "Composite",
                    className: "PrivateLinkConnectionState"
                }
            }
        }
    }
};
const ArmIdWrapper = {
    type: {
        name: "Composite",
        className: "ArmIdWrapper",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateLinkConnectionState = {
    type: {
        name: "Composite",
        className: "PrivateLinkConnectionState",
        modelProperties: {
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            actionsRequired: {
                serializedName: "actionsRequired",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateLinkConnectionApprovalRequest = {
    type: {
        name: "Composite",
        className: "PrivateLinkConnectionApprovalRequest",
        modelProperties: {
            privateLinkServiceConnectionState: {
                serializedName: "privateLinkServiceConnectionState",
                type: {
                    name: "Composite",
                    className: "PrivateLinkConnectionState"
                }
            },
            privateEndpoint: {
                serializedName: "privateEndpoint",
                type: {
                    name: "Composite",
                    className: "PrivateEndpoint"
                }
            }
        }
    }
};
const PrivateEndpoint = {
    type: {
        name: "Composite",
        className: "PrivateEndpoint",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateLinkResourcesWrapper = {
    type: {
        name: "Composite",
        className: "PrivateLinkResourcesWrapper",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrivateLinkResource"
                        }
                    }
                }
            }
        }
    }
};
const PrivateLinkResourceProperties = {
    type: {
        name: "Composite",
        className: "PrivateLinkResourceProperties",
        modelProperties: {
            groupId: {
                serializedName: "groupId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            requiredMembers: {
                serializedName: "requiredMembers",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            requiredZoneNames: {
                serializedName: "requiredZoneNames",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const GlobalParameterListResponse = {
    type: {
        name: "Composite",
        className: "GlobalParameterListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "GlobalParameterResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ChangeDataCaptureListResponse = {
    type: {
        name: "Composite",
        className: "ChangeDataCaptureListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ChangeDataCaptureResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ChangeDataCaptureFolder = {
    type: {
        name: "Composite",
        className: "ChangeDataCaptureFolder",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MapperSourceConnectionsInfo = {
    type: {
        name: "Composite",
        className: "MapperSourceConnectionsInfo",
        modelProperties: {
            sourceEntities: {
                serializedName: "sourceEntities",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MapperTable"
                        }
                    }
                }
            },
            connection: {
                serializedName: "connection",
                type: {
                    name: "Composite",
                    className: "MapperConnection"
                }
            }
        }
    }
};
const MapperTable = {
    type: {
        name: "Composite",
        className: "MapperTable",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            schema: {
                serializedName: "properties.schema",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MapperTableSchema"
                        }
                    }
                }
            },
            dslConnectorProperties: {
                serializedName: "properties.dslConnectorProperties",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MapperDslConnectorProperties"
                        }
                    }
                }
            }
        }
    }
};
const MapperTableSchema = {
    type: {
        name: "Composite",
        className: "MapperTableSchema",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            dataType: {
                serializedName: "dataType",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MapperDslConnectorProperties = {
    type: {
        name: "Composite",
        className: "MapperDslConnectorProperties",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "any"
                }
            }
        }
    }
};
const MapperConnection = {
    type: {
        name: "Composite",
        className: "MapperConnection",
        modelProperties: {
            linkedService: {
                serializedName: "linkedService",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            },
            linkedServiceType: {
                serializedName: "linkedServiceType",
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            isInlineDataset: {
                serializedName: "isInlineDataset",
                type: {
                    name: "Boolean"
                }
            },
            commonDslConnectorProperties: {
                serializedName: "commonDslConnectorProperties",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MapperDslConnectorProperties"
                        }
                    }
                }
            }
        }
    }
};
const MapperTargetConnectionsInfo = {
    type: {
        name: "Composite",
        className: "MapperTargetConnectionsInfo",
        modelProperties: {
            targetEntities: {
                serializedName: "targetEntities",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MapperTable"
                        }
                    }
                }
            },
            connection: {
                serializedName: "connection",
                type: {
                    name: "Composite",
                    className: "MapperConnection"
                }
            },
            dataMapperMappings: {
                serializedName: "dataMapperMappings",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DataMapperMapping"
                        }
                    }
                }
            },
            relationships: {
                serializedName: "relationships",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any"
                        }
                    }
                }
            }
        }
    }
};
const DataMapperMapping = {
    type: {
        name: "Composite",
        className: "DataMapperMapping",
        modelProperties: {
            targetEntityName: {
                serializedName: "targetEntityName",
                type: {
                    name: "String"
                }
            },
            sourceEntityName: {
                serializedName: "sourceEntityName",
                type: {
                    name: "String"
                }
            },
            sourceConnectionReference: {
                serializedName: "sourceConnectionReference",
                type: {
                    name: "Composite",
                    className: "MapperConnectionReference"
                }
            },
            attributeMappingInfo: {
                serializedName: "attributeMappingInfo",
                type: {
                    name: "Composite",
                    className: "MapperAttributeMappings"
                }
            },
            sourceDenormalizeInfo: {
                serializedName: "sourceDenormalizeInfo",
                type: {
                    name: "any"
                }
            }
        }
    }
};
const MapperConnectionReference = {
    type: {
        name: "Composite",
        className: "MapperConnectionReference",
        modelProperties: {
            connectionName: {
                serializedName: "connectionName",
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MapperAttributeMappings = {
    type: {
        name: "Composite",
        className: "MapperAttributeMappings",
        modelProperties: {
            attributeMappings: {
                serializedName: "attributeMappings",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MapperAttributeMapping"
                        }
                    }
                }
            }
        }
    }
};
const MapperAttributeMapping = {
    type: {
        name: "Composite",
        className: "MapperAttributeMapping",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            functionName: {
                serializedName: "functionName",
                type: {
                    name: "String"
                }
            },
            expression: {
                serializedName: "expression",
                type: {
                    name: "String"
                }
            },
            attributeReference: {
                serializedName: "attributeReference",
                type: {
                    name: "Composite",
                    className: "MapperAttributeReference"
                }
            },
            attributeReferences: {
                serializedName: "attributeReferences",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MapperAttributeReference"
                        }
                    }
                }
            }
        }
    }
};
const MapperAttributeReference = {
    type: {
        name: "Composite",
        className: "MapperAttributeReference",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            entity: {
                serializedName: "entity",
                type: {
                    name: "String"
                }
            },
            entityConnectionReference: {
                serializedName: "entityConnectionReference",
                type: {
                    name: "Composite",
                    className: "MapperConnectionReference"
                }
            }
        }
    }
};
const MapperPolicy = {
    type: {
        name: "Composite",
        className: "MapperPolicy",
        modelProperties: {
            mode: {
                serializedName: "mode",
                type: {
                    name: "String"
                }
            },
            recurrence: {
                serializedName: "recurrence",
                type: {
                    name: "Composite",
                    className: "MapperPolicyRecurrence"
                }
            }
        }
    }
};
const MapperPolicyRecurrence = {
    type: {
        name: "Composite",
        className: "MapperPolicyRecurrence",
        modelProperties: {
            frequency: {
                serializedName: "frequency",
                type: {
                    name: "String"
                }
            },
            interval: {
                serializedName: "interval",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const Expression = {
    type: {
        name: "Composite",
        className: "Expression",
        modelProperties: {
            type: {
                defaultValue: "Expression",
                isConstant: true,
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SecretBase = {
    type: {
        name: "Composite",
        className: "SecretBase",
        uberParent: "SecretBase",
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const IntegrationRuntimeStatusListResponse = {
    type: {
        name: "Composite",
        className: "IntegrationRuntimeStatusListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "IntegrationRuntimeStatusResponse"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PipelineReference = {
    type: {
        name: "Composite",
        className: "PipelineReference",
        modelProperties: {
            type: {
                defaultValue: "PipelineReference",
                isConstant: true,
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            referenceName: {
                serializedName: "referenceName",
                required: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TriggerPipelineReference = {
    type: {
        name: "Composite",
        className: "TriggerPipelineReference",
        modelProperties: {
            pipelineReference: {
                serializedName: "pipelineReference",
                type: {
                    name: "Composite",
                    className: "PipelineReference"
                }
            },
            parameters: {
                serializedName: "parameters",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
const DatasetReference = {
    type: {
        name: "Composite",
        className: "DatasetReference",
        modelProperties: {
            type: {
                defaultValue: "DatasetReference",
                isConstant: true,
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            referenceName: {
                serializedName: "referenceName",
                required: true,
                type: {
                    name: "String"
                }
            },
            parameters: {
                serializedName: "parameters",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
const GetDataFactoryOperationStatusResponse = {
    type: {
        name: "Composite",
        className: "GetDataFactoryOperationStatusResponse",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DataFlowReference = {
    type: {
        name: "Composite",
        className: "DataFlowReference",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            referenceName: {
                serializedName: "referenceName",
                required: true,
                type: {
                    name: "String"
                }
            },
            datasetParameters: {
                serializedName: "datasetParameters",
                type: {
                    name: "any"
                }
            },
            parameters: {
                serializedName: "parameters",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
const ManagedVirtualNetworkReference = {
    type: {
        name: "Composite",
        className: "ManagedVirtualNetworkReference",
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            referenceName: {
                serializedName: "referenceName",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CredentialReference = {
    type: {
        name: "Composite",
        className: "CredentialReference",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            referenceName: {
                serializedName: "referenceName",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Transformation = {
    type: {
        name: "Composite",
        className: "Transformation",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            dataset: {
                serializedName: "dataset",
                type: {
                    name: "Composite",
                    className: "DatasetReference"
                }
            },
            linkedService: {
                serializedName: "linkedService",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            },
            flowlet: {
                serializedName: "flowlet",
                type: {
                    name: "Composite",
                    className: "DataFlowReference"
                }
            }
        }
    }
};
const DatasetLocation = {
    serializedName: "DatasetLocation",
    type: {
        name: "Composite",
        className: "DatasetLocation",
        uberParent: "DatasetLocation",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            folderPath: {
                serializedName: "folderPath",
                type: {
                    name: "any"
                }
            },
            fileName: {
                serializedName: "fileName",
                type: {
                    name: "any"
                }
            }
        }
    }
};
const DatasetDataElement = {
    type: {
        name: "Composite",
        className: "DatasetDataElement",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "any"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "any"
                }
            }
        }
    }
};
const DatasetSchemaDataElement = {
    type: {
        name: "Composite",
        className: "DatasetSchemaDataElement",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "any"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "any"
                }
            }
        }
    }
};
const DatasetStorageFormat = {
    serializedName: "DatasetStorageFormat",
    type: {
        name: "Composite",
        className: "DatasetStorageFormat",
        uberParent: "DatasetStorageFormat",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            serializer: {
                serializedName: "serializer",
                type: {
                    name: "any"
                }
            },
            deserializer: {
                serializedName: "deserializer",
                type: {
                    name: "any"
                }
            }
        }
    }
};
const DatasetCompression = {
    type: {
        name: "Composite",
        className: "DatasetCompression",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "any"
                }
            },
            level: {
                serializedName: "level",
                type: {
                    name: "any"
                }
            }
        }
    }
};
const IntegrationRuntimeComputeProperties = {
    type: {
        name: "Composite",
        className: "IntegrationRuntimeComputeProperties",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            nodeSize: {
                serializedName: "nodeSize",
                type: {
                    name: "String"
                }
            },
            numberOfNodes: {
                constraints: {
                    InclusiveMinimum: 1
                },
                serializedName: "numberOfNodes",
                type: {
                    name: "Number"
                }
            },
            maxParallelExecutionsPerNode: {
                constraints: {
                    InclusiveMinimum: 1
                },
                serializedName: "maxParallelExecutionsPerNode",
                type: {
                    name: "Number"
                }
            },
            dataFlowProperties: {
                serializedName: "dataFlowProperties",
                type: {
                    name: "Composite",
                    className: "IntegrationRuntimeDataFlowProperties"
                }
            },
            vNetProperties: {
                serializedName: "vNetProperties",
                type: {
                    name: "Composite",
                    className: "IntegrationRuntimeVNetProperties"
                }
            },
            copyComputeScaleProperties: {
                serializedName: "copyComputeScaleProperties",
                type: {
                    name: "Composite",
                    className: "CopyComputeScaleProperties"
                }
            },
            pipelineExternalComputeScaleProperties: {
                serializedName: "pipelineExternalComputeScaleProperties",
                type: {
                    name: "Composite",
                    className: "PipelineExternalComputeScaleProperties"
                }
            }
        }
    }
};
const IntegrationRuntimeDataFlowProperties = {
    type: {
        name: "Composite",
        className: "IntegrationRuntimeDataFlowProperties",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            computeType: {
                serializedName: "computeType",
                type: {
                    name: "String"
                }
            },
            coreCount: {
                serializedName: "coreCount",
                type: {
                    name: "Number"
                }
            },
            timeToLive: {
                constraints: {
                    InclusiveMinimum: 0
                },
                serializedName: "timeToLive",
                type: {
                    name: "Number"
                }
            },
            cleanup: {
                serializedName: "cleanup",
                type: {
                    name: "Boolean"
                }
            },
            customProperties: {
                serializedName: "customProperties",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "IntegrationRuntimeDataFlowPropertiesCustomPropertiesItem"
                        }
                    }
                }
            }
        }
    }
};
const IntegrationRuntimeDataFlowPropertiesCustomPropertiesItem = {
    type: {
        name: "Composite",
        className: "IntegrationRuntimeDataFlowPropertiesCustomPropertiesItem",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const IntegrationRuntimeVNetProperties = {
    type: {
        name: "Composite",
        className: "IntegrationRuntimeVNetProperties",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            vNetId: {
                serializedName: "vNetId",
                type: {
                    name: "String"
                }
            },
            subnet: {
                serializedName: "subnet",
                type: {
                    name: "String"
                }
            },
            publicIPs: {
                serializedName: "publicIPs",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            subnetId: {
                serializedName: "subnetId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CopyComputeScaleProperties = {
    type: {
        name: "Composite",
        className: "CopyComputeScaleProperties",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            dataIntegrationUnit: {
                constraints: {
                    InclusiveMinimum: 4
                },
                serializedName: "dataIntegrationUnit",
                type: {
                    name: "Number"
                }
            },
            timeToLive: {
                constraints: {
                    InclusiveMinimum: 5
                },
                serializedName: "timeToLive",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const PipelineExternalComputeScaleProperties = {
    type: {
        name: "Composite",
        className: "PipelineExternalComputeScaleProperties",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            timeToLive: {
                constraints: {
                    InclusiveMinimum: 5
                },
                serializedName: "timeToLive",
                type: {
                    name: "Number"
                }
            },
            numberOfPipelineNodes: {
                constraints: {
                    InclusiveMaximum: 10,
                    InclusiveMinimum: 1
                },
                serializedName: "numberOfPipelineNodes",
                type: {
                    name: "Number"
                }
            },
            numberOfExternalNodes: {
                constraints: {
                    InclusiveMaximum: 10,
                    InclusiveMinimum: 1
                },
                serializedName: "numberOfExternalNodes",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const IntegrationRuntimeSsisProperties = {
    type: {
        name: "Composite",
        className: "IntegrationRuntimeSsisProperties",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            catalogInfo: {
                serializedName: "catalogInfo",
                type: {
                    name: "Composite",
                    className: "IntegrationRuntimeSsisCatalogInfo"
                }
            },
            licenseType: {
                serializedName: "licenseType",
                type: {
                    name: "String"
                }
            },
            customSetupScriptProperties: {
                serializedName: "customSetupScriptProperties",
                type: {
                    name: "Composite",
                    className: "IntegrationRuntimeCustomSetupScriptProperties"
                }
            },
            dataProxyProperties: {
                serializedName: "dataProxyProperties",
                type: {
                    name: "Composite",
                    className: "IntegrationRuntimeDataProxyProperties"
                }
            },
            edition: {
                serializedName: "edition",
                type: {
                    name: "String"
                }
            },
            expressCustomSetupProperties: {
                serializedName: "expressCustomSetupProperties",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CustomSetupBase"
                        }
                    }
                }
            },
            packageStores: {
                serializedName: "packageStores",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PackageStore"
                        }
                    }
                }
            },
            credential: {
                serializedName: "credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference"
                }
            }
        }
    }
};
const IntegrationRuntimeSsisCatalogInfo = {
    type: {
        name: "Composite",
        className: "IntegrationRuntimeSsisCatalogInfo",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            catalogServerEndpoint: {
                serializedName: "catalogServerEndpoint",
                type: {
                    name: "String"
                }
            },
            catalogAdminUserName: {
                constraints: {
                    MaxLength: 128,
                    MinLength: 1
                },
                serializedName: "catalogAdminUserName",
                type: {
                    name: "String"
                }
            },
            catalogAdminPassword: {
                serializedName: "catalogAdminPassword",
                type: {
                    name: "Composite",
                    className: "SecureString"
                }
            },
            catalogPricingTier: {
                serializedName: "catalogPricingTier",
                type: {
                    name: "String"
                }
            },
            dualStandbyPairName: {
                serializedName: "dualStandbyPairName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const IntegrationRuntimeCustomSetupScriptProperties = {
    type: {
        name: "Composite",
        className: "IntegrationRuntimeCustomSetupScriptProperties",
        modelProperties: {
            blobContainerUri: {
                serializedName: "blobContainerUri",
                type: {
                    name: "String"
                }
            },
            sasToken: {
                serializedName: "sasToken",
                type: {
                    name: "Composite",
                    className: "SecureString"
                }
            }
        }
    }
};
const IntegrationRuntimeDataProxyProperties = {
    type: {
        name: "Composite",
        className: "IntegrationRuntimeDataProxyProperties",
        modelProperties: {
            connectVia: {
                serializedName: "connectVia",
                type: {
                    name: "Composite",
                    className: "EntityReference"
                }
            },
            stagingLinkedService: {
                serializedName: "stagingLinkedService",
                type: {
                    name: "Composite",
                    className: "EntityReference"
                }
            },
            path: {
                serializedName: "path",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const EntityReference = {
    type: {
        name: "Composite",
        className: "EntityReference",
        modelProperties: {
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            referenceName: {
                serializedName: "referenceName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CustomSetupBase = {
    type: {
        name: "Composite",
        className: "CustomSetupBase",
        uberParent: "CustomSetupBase",
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PackageStore = {
    type: {
        name: "Composite",
        className: "PackageStore",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            packageStoreLinkedService: {
                serializedName: "packageStoreLinkedService",
                type: {
                    name: "Composite",
                    className: "EntityReference"
                }
            }
        }
    }
};
const IntegrationRuntimeCustomerVirtualNetwork = {
    type: {
        name: "Composite",
        className: "IntegrationRuntimeCustomerVirtualNetwork",
        modelProperties: {
            subnetId: {
                serializedName: "subnetId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const LinkedIntegrationRuntimeType = {
    type: {
        name: "Composite",
        className: "LinkedIntegrationRuntimeType",
        uberParent: "LinkedIntegrationRuntimeType",
        polymorphicDiscriminator: {
            serializedName: "authorizationType",
            clientName: "authorizationType"
        },
        modelProperties: {
            authorizationType: {
                serializedName: "authorizationType",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ManagedIntegrationRuntimeNode = {
    type: {
        name: "Composite",
        className: "ManagedIntegrationRuntimeNode",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            nodeId: {
                serializedName: "nodeId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            errors: {
                serializedName: "errors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ManagedIntegrationRuntimeError"
                        }
                    }
                }
            }
        }
    }
};
const ManagedIntegrationRuntimeError = {
    type: {
        name: "Composite",
        className: "ManagedIntegrationRuntimeError",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            time: {
                serializedName: "time",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            code: {
                serializedName: "code",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            parameters: {
                serializedName: "parameters",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ManagedIntegrationRuntimeOperationResult = {
    type: {
        name: "Composite",
        className: "ManagedIntegrationRuntimeOperationResult",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            startTime: {
                serializedName: "startTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            result: {
                serializedName: "result",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            errorCode: {
                serializedName: "errorCode",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            parameters: {
                serializedName: "parameters",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            activityId: {
                serializedName: "activityId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const LinkedIntegrationRuntime = {
    type: {
        name: "Composite",
        className: "LinkedIntegrationRuntime",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            subscriptionId: {
                serializedName: "subscriptionId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            dataFactoryName: {
                serializedName: "dataFactoryName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            dataFactoryLocation: {
                serializedName: "dataFactoryLocation",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            createTime: {
                serializedName: "createTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const SsisEnvironmentReference = {
    type: {
        name: "Composite",
        className: "SsisEnvironmentReference",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "Number"
                }
            },
            environmentFolderName: {
                serializedName: "environmentFolderName",
                type: {
                    name: "String"
                }
            },
            environmentName: {
                serializedName: "environmentName",
                type: {
                    name: "String"
                }
            },
            referenceType: {
                serializedName: "referenceType",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SsisParameter = {
    type: {
        name: "Composite",
        className: "SsisParameter",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "Number"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            dataType: {
                serializedName: "dataType",
                type: {
                    name: "String"
                }
            },
            required: {
                serializedName: "required",
                type: {
                    name: "Boolean"
                }
            },
            sensitive: {
                serializedName: "sensitive",
                type: {
                    name: "Boolean"
                }
            },
            designDefaultValue: {
                serializedName: "designDefaultValue",
                type: {
                    name: "String"
                }
            },
            defaultValue: {
                serializedName: "defaultValue",
                type: {
                    name: "String"
                }
            },
            sensitiveDefaultValue: {
                serializedName: "sensitiveDefaultValue",
                type: {
                    name: "String"
                }
            },
            valueType: {
                serializedName: "valueType",
                type: {
                    name: "String"
                }
            },
            valueSet: {
                serializedName: "valueSet",
                type: {
                    name: "Boolean"
                }
            },
            variable: {
                serializedName: "variable",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SsisVariable = {
    type: {
        name: "Composite",
        className: "SsisVariable",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "Number"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            dataType: {
                serializedName: "dataType",
                type: {
                    name: "String"
                }
            },
            sensitive: {
                serializedName: "sensitive",
                type: {
                    name: "Boolean"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "String"
                }
            },
            sensitiveValue: {
                serializedName: "sensitiveValue",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SqlAlwaysEncryptedProperties = {
    type: {
        name: "Composite",
        className: "SqlAlwaysEncryptedProperties",
        modelProperties: {
            alwaysEncryptedAkvAuthType: {
                serializedName: "alwaysEncryptedAkvAuthType",
                required: true,
                type: {
                    name: "String"
                }
            },
            servicePrincipalId: {
                serializedName: "servicePrincipalId",
                type: {
                    name: "any"
                }
            },
            servicePrincipalKey: {
                serializedName: "servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            },
            credential: {
                serializedName: "credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference"
                }
            }
        }
    }
};
const WebLinkedServiceTypeProperties = {
    type: {
        name: "Composite",
        className: "WebLinkedServiceTypeProperties",
        uberParent: "WebLinkedServiceTypeProperties",
        polymorphicDiscriminator: {
            serializedName: "authenticationType",
            clientName: "authenticationType"
        },
        modelProperties: {
            url: {
                serializedName: "url",
                required: true,
                type: {
                    name: "any"
                }
            },
            authenticationType: {
                serializedName: "authenticationType",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ScriptAction = {
    type: {
        name: "Composite",
        className: "ScriptAction",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            uri: {
                serializedName: "uri",
                required: true,
                type: {
                    name: "String"
                }
            },
            roles: {
                serializedName: "roles",
                required: true,
                type: {
                    name: "any"
                }
            },
            parameters: {
                serializedName: "parameters",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ActivityPolicy = {
    type: {
        name: "Composite",
        className: "ActivityPolicy",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            timeout: {
                serializedName: "timeout",
                type: {
                    name: "any"
                }
            },
            retry: {
                serializedName: "retry",
                type: {
                    name: "any"
                }
            },
            retryIntervalInSeconds: {
                constraints: {
                    InclusiveMaximum: 86400,
                    InclusiveMinimum: 30
                },
                serializedName: "retryIntervalInSeconds",
                type: {
                    name: "Number"
                }
            },
            secureInput: {
                serializedName: "secureInput",
                type: {
                    name: "Boolean"
                }
            },
            secureOutput: {
                serializedName: "secureOutput",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const StoreReadSettings = {
    serializedName: "StoreReadSettings",
    type: {
        name: "Composite",
        className: "StoreReadSettings",
        uberParent: "StoreReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            maxConcurrentConnections: {
                serializedName: "maxConcurrentConnections",
                type: {
                    name: "any"
                }
            },
            disableMetricsCollection: {
                serializedName: "disableMetricsCollection",
                type: {
                    name: "any"
                }
            }
        }
    }
};
const StoreWriteSettings = {
    serializedName: "StoreWriteSettings",
    type: {
        name: "Composite",
        className: "StoreWriteSettings",
        uberParent: "StoreWriteSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            maxConcurrentConnections: {
                serializedName: "maxConcurrentConnections",
                type: {
                    name: "any"
                }
            },
            disableMetricsCollection: {
                serializedName: "disableMetricsCollection",
                type: {
                    name: "any"
                }
            },
            copyBehavior: {
                serializedName: "copyBehavior",
                type: {
                    name: "any"
                }
            }
        }
    }
};
const DistcpSettings = {
    type: {
        name: "Composite",
        className: "DistcpSettings",
        modelProperties: {
            resourceManagerEndpoint: {
                serializedName: "resourceManagerEndpoint",
                required: true,
                type: {
                    name: "any"
                }
            },
            tempScriptPath: {
                serializedName: "tempScriptPath",
                required: true,
                type: {
                    name: "any"
                }
            },
            distcpOptions: {
                serializedName: "distcpOptions",
                type: {
                    name: "any"
                }
            }
        }
    }
};
const FormatReadSettings = {
    serializedName: "FormatReadSettings",
    type: {
        name: "Composite",
        className: "FormatReadSettings",
        uberParent: "FormatReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CompressionReadSettings = {
    serializedName: "CompressionReadSettings",
    type: {
        name: "Composite",
        className: "CompressionReadSettings",
        uberParent: "CompressionReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const FormatWriteSettings = {
    serializedName: "FormatWriteSettings",
    type: {
        name: "Composite",
        className: "FormatWriteSettings",
        uberParent: "FormatWriteSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CopySource = {
    serializedName: "CopySource",
    type: {
        name: "Composite",
        className: "CopySource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            sourceRetryCount: {
                serializedName: "sourceRetryCount",
                type: {
                    name: "any"
                }
            },
            sourceRetryWait: {
                serializedName: "sourceRetryWait",
                type: {
                    name: "any"
                }
            },
            maxConcurrentConnections: {
                serializedName: "maxConcurrentConnections",
                type: {
                    name: "any"
                }
            },
            disableMetricsCollection: {
                serializedName: "disableMetricsCollection",
                type: {
                    name: "any"
                }
            }
        }
    }
};
const CopySink = {
    serializedName: "CopySink",
    type: {
        name: "Composite",
        className: "CopySink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            writeBatchSize: {
                serializedName: "writeBatchSize",
                type: {
                    name: "any"
                }
            },
            writeBatchTimeout: {
                serializedName: "writeBatchTimeout",
                type: {
                    name: "any"
                }
            },
            sinkRetryCount: {
                serializedName: "sinkRetryCount",
                type: {
                    name: "any"
                }
            },
            sinkRetryWait: {
                serializedName: "sinkRetryWait",
                type: {
                    name: "any"
                }
            },
            maxConcurrentConnections: {
                serializedName: "maxConcurrentConnections",
                type: {
                    name: "any"
                }
            },
            disableMetricsCollection: {
                serializedName: "disableMetricsCollection",
                type: {
                    name: "any"
                }
            }
        }
    }
};
const StagingSettings = {
    type: {
        name: "Composite",
        className: "StagingSettings",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            linkedServiceName: {
                serializedName: "linkedServiceName",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            },
            path: {
                serializedName: "path",
                type: {
                    name: "any"
                }
            },
            enableCompression: {
                serializedName: "enableCompression",
                type: {
                    name: "any"
                }
            }
        }
    }
};
const RedirectIncompatibleRowSettings = {
    type: {
        name: "Composite",
        className: "RedirectIncompatibleRowSettings",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            linkedServiceName: {
                serializedName: "linkedServiceName",
                required: true,
                type: {
                    name: "any"
                }
            },
            path: {
                serializedName: "path",
                type: {
                    name: "any"
                }
            }
        }
    }
};
const LogStorageSettings = {
    type: {
        name: "Composite",
        className: "LogStorageSettings",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            linkedServiceName: {
                serializedName: "linkedServiceName",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            },
            path: {
                serializedName: "path",
                type: {
                    name: "any"
                }
            },
            logLevel: {
                serializedName: "logLevel",
                type: {
                    name: "any"
                }
            },
            enableReliableLogging: {
                serializedName: "enableReliableLogging",
                type: {
                    name: "any"
                }
            }
        }
    }
};
const LogSettings = {
    type: {
        name: "Composite",
        className: "LogSettings",
        modelProperties: {
            enableCopyActivityLog: {
                serializedName: "enableCopyActivityLog",
                type: {
                    name: "any"
                }
            },
            copyActivityLogSettings: {
                serializedName: "copyActivityLogSettings",
                type: {
                    name: "Composite",
                    className: "CopyActivityLogSettings"
                }
            },
            logLocationSettings: {
                serializedName: "logLocationSettings",
                type: {
                    name: "Composite",
                    className: "LogLocationSettings"
                }
            }
        }
    }
};
const CopyActivityLogSettings = {
    type: {
        name: "Composite",
        className: "CopyActivityLogSettings",
        modelProperties: {
            logLevel: {
                serializedName: "logLevel",
                type: {
                    name: "any"
                }
            },
            enableReliableLogging: {
                serializedName: "enableReliableLogging",
                type: {
                    name: "any"
                }
            }
        }
    }
};
const LogLocationSettings = {
    type: {
        name: "Composite",
        className: "LogLocationSettings",
        modelProperties: {
            linkedServiceName: {
                serializedName: "linkedServiceName",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            },
            path: {
                serializedName: "path",
                type: {
                    name: "any"
                }
            }
        }
    }
};
const SkipErrorFile = {
    type: {
        name: "Composite",
        className: "SkipErrorFile",
        modelProperties: {
            fileMissing: {
                serializedName: "fileMissing",
                type: {
                    name: "any"
                }
            },
            dataInconsistency: {
                serializedName: "dataInconsistency",
                type: {
                    name: "any"
                }
            }
        }
    }
};
const SapHanaPartitionSettings = {
    type: {
        name: "Composite",
        className: "SapHanaPartitionSettings",
        modelProperties: {
            partitionColumnName: {
                serializedName: "partitionColumnName",
                type: {
                    name: "any"
                }
            }
        }
    }
};
const SapTablePartitionSettings = {
    type: {
        name: "Composite",
        className: "SapTablePartitionSettings",
        modelProperties: {
            partitionColumnName: {
                serializedName: "partitionColumnName",
                type: {
                    name: "any"
                }
            },
            partitionUpperBound: {
                serializedName: "partitionUpperBound",
                type: {
                    name: "any"
                }
            },
            partitionLowerBound: {
                serializedName: "partitionLowerBound",
                type: {
                    name: "any"
                }
            },
            maxPartitionsNumber: {
                serializedName: "maxPartitionsNumber",
                type: {
                    name: "any"
                }
            }
        }
    }
};
const SqlPartitionSettings = {
    type: {
        name: "Composite",
        className: "SqlPartitionSettings",
        modelProperties: {
            partitionColumnName: {
                serializedName: "partitionColumnName",
                type: {
                    name: "any"
                }
            },
            partitionUpperBound: {
                serializedName: "partitionUpperBound",
                type: {
                    name: "any"
                }
            },
            partitionLowerBound: {
                serializedName: "partitionLowerBound",
                type: {
                    name: "any"
                }
            }
        }
    }
};
const OraclePartitionSettings = {
    type: {
        name: "Composite",
        className: "OraclePartitionSettings",
        modelProperties: {
            partitionNames: {
                serializedName: "partitionNames",
                type: {
                    name: "any"
                }
            },
            partitionColumnName: {
                serializedName: "partitionColumnName",
                type: {
                    name: "any"
                }
            },
            partitionUpperBound: {
                serializedName: "partitionUpperBound",
                type: {
                    name: "any"
                }
            },
            partitionLowerBound: {
                serializedName: "partitionLowerBound",
                type: {
                    name: "any"
                }
            }
        }
    }
};
const AmazonRdsForOraclePartitionSettings = {
    type: {
        name: "Composite",
        className: "AmazonRdsForOraclePartitionSettings",
        modelProperties: {
            partitionNames: {
                serializedName: "partitionNames",
                type: {
                    name: "any"
                }
            },
            partitionColumnName: {
                serializedName: "partitionColumnName",
                type: {
                    name: "any"
                }
            },
            partitionUpperBound: {
                serializedName: "partitionUpperBound",
                type: {
                    name: "any"
                }
            },
            partitionLowerBound: {
                serializedName: "partitionLowerBound",
                type: {
                    name: "any"
                }
            }
        }
    }
};
const TeradataPartitionSettings = {
    type: {
        name: "Composite",
        className: "TeradataPartitionSettings",
        modelProperties: {
            partitionColumnName: {
                serializedName: "partitionColumnName",
                type: {
                    name: "any"
                }
            },
            partitionUpperBound: {
                serializedName: "partitionUpperBound",
                type: {
                    name: "any"
                }
            },
            partitionLowerBound: {
                serializedName: "partitionLowerBound",
                type: {
                    name: "any"
                }
            }
        }
    }
};
const MongoDbCursorMethodsProperties = {
    type: {
        name: "Composite",
        className: "MongoDbCursorMethodsProperties",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            project: {
                serializedName: "project",
                type: {
                    name: "any"
                }
            },
            sort: {
                serializedName: "sort",
                type: {
                    name: "any"
                }
            },
            skip: {
                serializedName: "skip",
                type: {
                    name: "any"
                }
            },
            limit: {
                serializedName: "limit",
                type: {
                    name: "any"
                }
            }
        }
    }
};
const OutputColumn = {
    type: {
        name: "Composite",
        className: "OutputColumn",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const NetezzaPartitionSettings = {
    type: {
        name: "Composite",
        className: "NetezzaPartitionSettings",
        modelProperties: {
            partitionColumnName: {
                serializedName: "partitionColumnName",
                type: {
                    name: "any"
                }
            },
            partitionUpperBound: {
                serializedName: "partitionUpperBound",
                type: {
                    name: "any"
                }
            },
            partitionLowerBound: {
                serializedName: "partitionLowerBound",
                type: {
                    name: "any"
                }
            }
        }
    }
};
const RedshiftUnloadSettings = {
    type: {
        name: "Composite",
        className: "RedshiftUnloadSettings",
        modelProperties: {
            s3LinkedServiceName: {
                serializedName: "s3LinkedServiceName",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            },
            bucketName: {
                serializedName: "bucketName",
                required: true,
                type: {
                    name: "any"
                }
            }
        }
    }
};
const ExportSettings = {
    serializedName: "ExportSettings",
    type: {
        name: "Composite",
        className: "ExportSettings",
        uberParent: "ExportSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ImportSettings = {
    serializedName: "ImportSettings",
    type: {
        name: "Composite",
        className: "ImportSettings",
        uberParent: "ImportSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const StoredProcedureParameter = {
    type: {
        name: "Composite",
        className: "StoredProcedureParameter",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "any"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MetadataItem = {
    type: {
        name: "Composite",
        className: "MetadataItem",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "any"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "any"
                }
            }
        }
    }
};
const SqlUpsertSettings = {
    type: {
        name: "Composite",
        className: "SqlUpsertSettings",
        modelProperties: {
            useTempDB: {
                serializedName: "useTempDB",
                type: {
                    name: "any"
                }
            },
            interimSchemaName: {
                serializedName: "interimSchemaName",
                type: {
                    name: "any"
                }
            },
            keys: {
                serializedName: "keys",
                type: {
                    name: "any"
                }
            }
        }
    }
};
const PolybaseSettings = {
    type: {
        name: "Composite",
        className: "PolybaseSettings",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            rejectType: {
                serializedName: "rejectType",
                type: {
                    name: "String"
                }
            },
            rejectValue: {
                serializedName: "rejectValue",
                type: {
                    name: "any"
                }
            },
            rejectSampleValue: {
                serializedName: "rejectSampleValue",
                type: {
                    name: "any"
                }
            },
            useTypeDefault: {
                serializedName: "useTypeDefault",
                type: {
                    name: "any"
                }
            }
        }
    }
};
const DWCopyCommandSettings = {
    type: {
        name: "Composite",
        className: "DWCopyCommandSettings",
        modelProperties: {
            defaultValues: {
                serializedName: "defaultValues",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DWCopyCommandDefaultValue"
                        }
                    }
                }
            },
            additionalOptions: {
                serializedName: "additionalOptions",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }
        }
    }
};
const DWCopyCommandDefaultValue = {
    type: {
        name: "Composite",
        className: "DWCopyCommandDefaultValue",
        modelProperties: {
            columnName: {
                serializedName: "columnName",
                type: {
                    name: "any"
                }
            },
            defaultValue: {
                serializedName: "defaultValue",
                type: {
                    name: "any"
                }
            }
        }
    }
};
const SqlDWUpsertSettings = {
    type: {
        name: "Composite",
        className: "SqlDWUpsertSettings",
        modelProperties: {
            interimSchemaName: {
                serializedName: "interimSchemaName",
                type: {
                    name: "any"
                }
            },
            keys: {
                serializedName: "keys",
                type: {
                    name: "any"
                }
            }
        }
    }
};
const AdditionalColumns = {
    type: {
        name: "Composite",
        className: "AdditionalColumns",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "any"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "any"
                }
            }
        }
    }
};
const CopyTranslator = {
    serializedName: "CopyTranslator",
    type: {
        name: "Composite",
        className: "CopyTranslator",
        uberParent: "CopyTranslator",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TypeConversionSettings = {
    type: {
        name: "Composite",
        className: "TypeConversionSettings",
        modelProperties: {
            allowDataTruncation: {
                serializedName: "allowDataTruncation",
                type: {
                    name: "any"
                }
            },
            treatBooleanAsNumber: {
                serializedName: "treatBooleanAsNumber",
                type: {
                    name: "any"
                }
            },
            dateTimeFormat: {
                serializedName: "dateTimeFormat",
                type: {
                    name: "any"
                }
            },
            dateTimeOffsetFormat: {
                serializedName: "dateTimeOffsetFormat",
                type: {
                    name: "any"
                }
            },
            timeSpanFormat: {
                serializedName: "timeSpanFormat",
                type: {
                    name: "any"
                }
            },
            culture: {
                serializedName: "culture",
                type: {
                    name: "any"
                }
            }
        }
    }
};
const SsisPackageLocation = {
    type: {
        name: "Composite",
        className: "SsisPackageLocation",
        modelProperties: {
            packagePath: {
                serializedName: "packagePath",
                type: {
                    name: "any"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            packagePassword: {
                serializedName: "typeProperties.packagePassword",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            },
            accessCredential: {
                serializedName: "typeProperties.accessCredential",
                type: {
                    name: "Composite",
                    className: "SsisAccessCredential"
                }
            },
            configurationPath: {
                serializedName: "typeProperties.configurationPath",
                type: {
                    name: "any"
                }
            },
            configurationAccessCredential: {
                serializedName: "typeProperties.configurationAccessCredential",
                type: {
                    name: "Composite",
                    className: "SsisAccessCredential"
                }
            },
            packageName: {
                serializedName: "typeProperties.packageName",
                type: {
                    name: "String"
                }
            },
            packageContent: {
                serializedName: "typeProperties.packageContent",
                type: {
                    name: "any"
                }
            },
            packageLastModifiedDate: {
                serializedName: "typeProperties.packageLastModifiedDate",
                type: {
                    name: "String"
                }
            },
            childPackages: {
                serializedName: "typeProperties.childPackages",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SsisChildPackage"
                        }
                    }
                }
            }
        }
    }
};
const SsisAccessCredential = {
    type: {
        name: "Composite",
        className: "SsisAccessCredential",
        modelProperties: {
            domain: {
                serializedName: "domain",
                required: true,
                type: {
                    name: "any"
                }
            },
            userName: {
                serializedName: "userName",
                required: true,
                type: {
                    name: "any"
                }
            },
            password: {
                serializedName: "password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }
        }
    }
};
const SsisChildPackage = {
    type: {
        name: "Composite",
        className: "SsisChildPackage",
        modelProperties: {
            packagePath: {
                serializedName: "packagePath",
                required: true,
                type: {
                    name: "any"
                }
            },
            packageName: {
                serializedName: "packageName",
                type: {
                    name: "String"
                }
            },
            packageContent: {
                serializedName: "packageContent",
                required: true,
                type: {
                    name: "any"
                }
            },
            packageLastModifiedDate: {
                serializedName: "packageLastModifiedDate",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SsisExecutionCredential = {
    type: {
        name: "Composite",
        className: "SsisExecutionCredential",
        modelProperties: {
            domain: {
                serializedName: "domain",
                required: true,
                type: {
                    name: "any"
                }
            },
            userName: {
                serializedName: "userName",
                required: true,
                type: {
                    name: "any"
                }
            },
            password: {
                serializedName: "password",
                type: {
                    name: "Composite",
                    className: "SecureString"
                }
            }
        }
    }
};
const SsisExecutionParameter = {
    type: {
        name: "Composite",
        className: "SsisExecutionParameter",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "any"
                }
            }
        }
    }
};
const SsisPropertyOverride = {
    type: {
        name: "Composite",
        className: "SsisPropertyOverride",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "any"
                }
            },
            isSensitive: {
                serializedName: "isSensitive",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const SsisLogLocation = {
    type: {
        name: "Composite",
        className: "SsisLogLocation",
        modelProperties: {
            logPath: {
                serializedName: "logPath",
                required: true,
                type: {
                    name: "any"
                }
            },
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            accessCredential: {
                serializedName: "typeProperties.accessCredential",
                type: {
                    name: "Composite",
                    className: "SsisAccessCredential"
                }
            },
            logRefreshInterval: {
                serializedName: "typeProperties.logRefreshInterval",
                type: {
                    name: "any"
                }
            }
        }
    }
};
const CustomActivityReferenceObject = {
    type: {
        name: "Composite",
        className: "CustomActivityReferenceObject",
        modelProperties: {
            linkedServices: {
                serializedName: "linkedServices",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LinkedServiceReference"
                        }
                    }
                }
            },
            datasets: {
                serializedName: "datasets",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DatasetReference"
                        }
                    }
                }
            }
        }
    }
};
const ExecutePipelineActivityPolicy = {
    type: {
        name: "Composite",
        className: "ExecutePipelineActivityPolicy",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            secureInput: {
                serializedName: "secureInput",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const WebActivityAuthentication = {
    type: {
        name: "Composite",
        className: "WebActivityAuthentication",
        modelProperties: {
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            pfx: {
                serializedName: "pfx",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            },
            username: {
                serializedName: "username",
                type: {
                    name: "any"
                }
            },
            password: {
                serializedName: "password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            },
            resource: {
                serializedName: "resource",
                type: {
                    name: "any"
                }
            },
            userTenant: {
                serializedName: "userTenant",
                type: {
                    name: "any"
                }
            },
            credential: {
                serializedName: "credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference"
                }
            }
        }
    }
};
const SwitchCase = {
    type: {
        name: "Composite",
        className: "SwitchCase",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "String"
                }
            },
            activities: {
                serializedName: "activities",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Activity"
                        }
                    }
                }
            }
        }
    }
};
const AzureMLWebServiceFile = {
    type: {
        name: "Composite",
        className: "AzureMLWebServiceFile",
        modelProperties: {
            filePath: {
                serializedName: "filePath",
                required: true,
                type: {
                    name: "any"
                }
            },
            linkedServiceName: {
                serializedName: "linkedServiceName",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            }
        }
    }
};
const SecureInputOutputPolicy = {
    type: {
        name: "Composite",
        className: "SecureInputOutputPolicy",
        modelProperties: {
            secureInput: {
                serializedName: "secureInput",
                type: {
                    name: "Boolean"
                }
            },
            secureOutput: {
                serializedName: "secureOutput",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const ExecuteDataFlowActivityTypeProperties = {
    type: {
        name: "Composite",
        className: "ExecuteDataFlowActivityTypeProperties",
        modelProperties: {
            dataFlow: {
                serializedName: "dataFlow",
                type: {
                    name: "Composite",
                    className: "DataFlowReference"
                }
            },
            staging: {
                serializedName: "staging",
                type: {
                    name: "Composite",
                    className: "DataFlowStagingInfo"
                }
            },
            integrationRuntime: {
                serializedName: "integrationRuntime",
                type: {
                    name: "Composite",
                    className: "IntegrationRuntimeReference"
                }
            },
            compute: {
                serializedName: "compute",
                type: {
                    name: "Composite",
                    className: "ExecuteDataFlowActivityTypePropertiesCompute"
                }
            },
            traceLevel: {
                serializedName: "traceLevel",
                type: {
                    name: "any"
                }
            },
            continueOnError: {
                serializedName: "continueOnError",
                type: {
                    name: "any"
                }
            },
            runConcurrently: {
                serializedName: "runConcurrently",
                type: {
                    name: "any"
                }
            },
            sourceStagingConcurrency: {
                serializedName: "sourceStagingConcurrency",
                type: {
                    name: "any"
                }
            }
        }
    }
};
const ExecuteDataFlowActivityTypePropertiesCompute = {
    type: {
        name: "Composite",
        className: "ExecuteDataFlowActivityTypePropertiesCompute",
        modelProperties: {
            computeType: {
                serializedName: "computeType",
                type: {
                    name: "any"
                }
            },
            coreCount: {
                serializedName: "coreCount",
                type: {
                    name: "any"
                }
            }
        }
    }
};
const PowerQuerySinkMapping = {
    type: {
        name: "Composite",
        className: "PowerQuerySinkMapping",
        modelProperties: {
            queryName: {
                serializedName: "queryName",
                type: {
                    name: "String"
                }
            },
            dataflowSinks: {
                serializedName: "dataflowSinks",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PowerQuerySink"
                        }
                    }
                }
            }
        }
    }
};
const ScriptActivityScriptBlock = {
    type: {
        name: "Composite",
        className: "ScriptActivityScriptBlock",
        modelProperties: {
            text: {
                serializedName: "text",
                required: true,
                type: {
                    name: "any"
                }
            },
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            parameters: {
                serializedName: "parameters",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ScriptActivityParameter"
                        }
                    }
                }
            }
        }
    }
};
const ScriptActivityParameter = {
    type: {
        name: "Composite",
        className: "ScriptActivityParameter",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "any"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "any"
                }
            },
            direction: {
                serializedName: "direction",
                type: {
                    name: "String"
                }
            },
            size: {
                serializedName: "size",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const ScriptActivityTypePropertiesLogSettings = {
    type: {
        name: "Composite",
        className: "ScriptActivityTypePropertiesLogSettings",
        modelProperties: {
            logDestination: {
                serializedName: "logDestination",
                required: true,
                type: {
                    name: "String"
                }
            },
            logLocationSettings: {
                serializedName: "logLocationSettings",
                type: {
                    name: "Composite",
                    className: "LogLocationSettings"
                }
            }
        }
    }
};
const SynapseNotebookReference = {
    type: {
        name: "Composite",
        className: "SynapseNotebookReference",
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            referenceName: {
                serializedName: "referenceName",
                required: true,
                type: {
                    name: "any"
                }
            }
        }
    }
};
const BigDataPoolParametrizationReference = {
    type: {
        name: "Composite",
        className: "BigDataPoolParametrizationReference",
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            referenceName: {
                serializedName: "referenceName",
                required: true,
                type: {
                    name: "any"
                }
            }
        }
    }
};
const NotebookParameter = {
    type: {
        name: "Composite",
        className: "NotebookParameter",
        modelProperties: {
            value: {
                serializedName: "value",
                nullable: true,
                type: {
                    name: "any"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SparkConfigurationParametrizationReference = {
    type: {
        name: "Composite",
        className: "SparkConfigurationParametrizationReference",
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            referenceName: {
                serializedName: "referenceName",
                required: true,
                type: {
                    name: "any"
                }
            }
        }
    }
};
const SynapseSparkJobReference = {
    type: {
        name: "Composite",
        className: "SynapseSparkJobReference",
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            referenceName: {
                serializedName: "referenceName",
                required: true,
                type: {
                    name: "any"
                }
            }
        }
    }
};
const ScheduleTriggerRecurrence = {
    type: {
        name: "Composite",
        className: "ScheduleTriggerRecurrence",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            frequency: {
                serializedName: "frequency",
                type: {
                    name: "String"
                }
            },
            interval: {
                serializedName: "interval",
                type: {
                    name: "Number"
                }
            },
            startTime: {
                serializedName: "startTime",
                type: {
                    name: "DateTime"
                }
            },
            endTime: {
                serializedName: "endTime",
                type: {
                    name: "DateTime"
                }
            },
            timeZone: {
                serializedName: "timeZone",
                type: {
                    name: "String"
                }
            },
            schedule: {
                serializedName: "schedule",
                type: {
                    name: "Composite",
                    className: "RecurrenceSchedule"
                }
            }
        }
    }
};
const RecurrenceSchedule = {
    type: {
        name: "Composite",
        className: "RecurrenceSchedule",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            minutes: {
                serializedName: "minutes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Number"
                        }
                    }
                }
            },
            hours: {
                serializedName: "hours",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Number"
                        }
                    }
                }
            },
            weekDays: {
                serializedName: "weekDays",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Enum",
                            allowedValues: [
                                "Sunday",
                                "Monday",
                                "Tuesday",
                                "Wednesday",
                                "Thursday",
                                "Friday",
                                "Saturday"
                            ]
                        }
                    }
                }
            },
            monthDays: {
                serializedName: "monthDays",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Number"
                        }
                    }
                }
            },
            monthlyOccurrences: {
                serializedName: "monthlyOccurrences",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RecurrenceScheduleOccurrence"
                        }
                    }
                }
            }
        }
    }
};
const RecurrenceScheduleOccurrence = {
    type: {
        name: "Composite",
        className: "RecurrenceScheduleOccurrence",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            day: {
                serializedName: "day",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Sunday",
                        "Monday",
                        "Tuesday",
                        "Wednesday",
                        "Thursday",
                        "Friday",
                        "Saturday"
                    ]
                }
            },
            occurrence: {
                serializedName: "occurrence",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const RetryPolicy = {
    type: {
        name: "Composite",
        className: "RetryPolicy",
        modelProperties: {
            count: {
                serializedName: "count",
                type: {
                    name: "any"
                }
            },
            intervalInSeconds: {
                constraints: {
                    InclusiveMaximum: 86400,
                    InclusiveMinimum: 30
                },
                serializedName: "intervalInSeconds",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const DependencyReference = {
    type: {
        name: "Composite",
        className: "DependencyReference",
        uberParent: "DependencyReference",
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TriggerReference = {
    type: {
        name: "Composite",
        className: "TriggerReference",
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            referenceName: {
                serializedName: "referenceName",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const FactoryVstsConfiguration = {
    serializedName: "FactoryVSTSConfiguration",
    type: {
        name: "Composite",
        className: "FactoryVstsConfiguration",
        uberParent: "FactoryRepoConfiguration",
        polymorphicDiscriminator: FactoryRepoConfiguration.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, FactoryRepoConfiguration.type.modelProperties), { projectName: {
                serializedName: "projectName",
                required: true,
                type: {
                    name: "String"
                }
            }, tenantId: {
                serializedName: "tenantId",
                type: {
                    name: "String"
                }
            } })
    }
};
const FactoryGitHubConfiguration = {
    serializedName: "FactoryGitHubConfiguration",
    type: {
        name: "Composite",
        className: "FactoryGitHubConfiguration",
        uberParent: "FactoryRepoConfiguration",
        polymorphicDiscriminator: FactoryRepoConfiguration.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, FactoryRepoConfiguration.type.modelProperties), { hostName: {
                serializedName: "hostName",
                type: {
                    name: "String"
                }
            }, clientId: {
                serializedName: "clientId",
                type: {
                    name: "String"
                }
            }, clientSecret: {
                serializedName: "clientSecret",
                type: {
                    name: "Composite",
                    className: "GitHubClientSecret"
                }
            } })
    }
};
const Factory = {
    type: {
        name: "Composite",
        className: "Factory",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "FactoryIdentity"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, createTime: {
                serializedName: "properties.createTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, version: {
                serializedName: "properties.version",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, purviewConfiguration: {
                serializedName: "properties.purviewConfiguration",
                type: {
                    name: "Composite",
                    className: "PurviewConfiguration"
                }
            }, repoConfiguration: {
                serializedName: "properties.repoConfiguration",
                type: {
                    name: "Composite",
                    className: "FactoryRepoConfiguration"
                }
            }, globalParameters: {
                serializedName: "properties.globalParameters",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Composite",
                            className: "GlobalParameterSpecification"
                        }
                    }
                }
            }, encryption: {
                serializedName: "properties.encryption",
                type: {
                    name: "Composite",
                    className: "EncryptionConfiguration"
                }
            }, publicNetworkAccess: {
                serializedName: "properties.publicNetworkAccess",
                type: {
                    name: "String"
                }
            } })
    }
};
const ManagedIntegrationRuntime = {
    serializedName: "Managed",
    type: {
        name: "Composite",
        className: "ManagedIntegrationRuntime",
        uberParent: "IntegrationRuntime",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: IntegrationRuntime.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, IntegrationRuntime.type.modelProperties), { state: {
                serializedName: "state",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, managedVirtualNetwork: {
                serializedName: "managedVirtualNetwork",
                type: {
                    name: "Composite",
                    className: "ManagedVirtualNetworkReference"
                }
            }, computeProperties: {
                serializedName: "typeProperties.computeProperties",
                type: {
                    name: "Composite",
                    className: "IntegrationRuntimeComputeProperties"
                }
            }, ssisProperties: {
                serializedName: "typeProperties.ssisProperties",
                type: {
                    name: "Composite",
                    className: "IntegrationRuntimeSsisProperties"
                }
            }, customerVirtualNetwork: {
                serializedName: "typeProperties.customerVirtualNetwork",
                type: {
                    name: "Composite",
                    className: "IntegrationRuntimeCustomerVirtualNetwork"
                }
            } })
    }
};
const SelfHostedIntegrationRuntime = {
    serializedName: "SelfHosted",
    type: {
        name: "Composite",
        className: "SelfHostedIntegrationRuntime",
        uberParent: "IntegrationRuntime",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: IntegrationRuntime.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, IntegrationRuntime.type.modelProperties), { linkedInfo: {
                serializedName: "typeProperties.linkedInfo",
                type: {
                    name: "Composite",
                    className: "LinkedIntegrationRuntimeType"
                }
            }, selfContainedInteractiveAuthoringEnabled: {
                serializedName: "typeProperties.selfContainedInteractiveAuthoringEnabled",
                type: {
                    name: "Boolean"
                }
            } })
    }
};
const IntegrationRuntimeResource = {
    type: {
        name: "Composite",
        className: "IntegrationRuntimeResource",
        modelProperties: Object.assign(Object.assign({}, SubResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "IntegrationRuntime"
                }
            } })
    }
};
const LinkedServiceResource = {
    type: {
        name: "Composite",
        className: "LinkedServiceResource",
        modelProperties: Object.assign(Object.assign({}, SubResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "LinkedService"
                }
            } })
    }
};
const DatasetResource = {
    type: {
        name: "Composite",
        className: "DatasetResource",
        modelProperties: Object.assign(Object.assign({}, SubResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "Dataset"
                }
            } })
    }
};
const PipelineResource = {
    type: {
        name: "Composite",
        className: "PipelineResource",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, SubResource.type.modelProperties), { description: {
                serializedName: "properties.description",
                type: {
                    name: "String"
                }
            }, activities: {
                serializedName: "properties.activities",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Activity"
                        }
                    }
                }
            }, parameters: {
                serializedName: "properties.parameters",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Composite", className: "ParameterSpecification" }
                    }
                }
            }, variables: {
                serializedName: "properties.variables",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Composite", className: "VariableSpecification" }
                    }
                }
            }, concurrency: {
                constraints: {
                    InclusiveMinimum: 1
                },
                serializedName: "properties.concurrency",
                type: {
                    name: "Number"
                }
            }, annotations: {
                serializedName: "properties.annotations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any"
                        }
                    }
                }
            }, runDimensions: {
                serializedName: "properties.runDimensions",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }, folder: {
                serializedName: "properties.folder",
                type: {
                    name: "Composite",
                    className: "PipelineFolder"
                }
            }, policy: {
                serializedName: "properties.policy",
                type: {
                    name: "Composite",
                    className: "PipelinePolicy"
                }
            } })
    }
};
const TriggerResource = {
    type: {
        name: "Composite",
        className: "TriggerResource",
        modelProperties: Object.assign(Object.assign({}, SubResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "Trigger"
                }
            } })
    }
};
const DataFlowResource = {
    type: {
        name: "Composite",
        className: "DataFlowResource",
        modelProperties: Object.assign(Object.assign({}, SubResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "DataFlow"
                }
            } })
    }
};
const ManagedVirtualNetworkResource = {
    type: {
        name: "Composite",
        className: "ManagedVirtualNetworkResource",
        modelProperties: Object.assign(Object.assign({}, SubResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "ManagedVirtualNetwork"
                }
            } })
    }
};
const ManagedPrivateEndpointResource = {
    type: {
        name: "Composite",
        className: "ManagedPrivateEndpointResource",
        modelProperties: Object.assign(Object.assign({}, SubResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "ManagedPrivateEndpoint"
                }
            } })
    }
};
const ManagedIdentityCredentialResource = {
    type: {
        name: "Composite",
        className: "ManagedIdentityCredentialResource",
        modelProperties: Object.assign(Object.assign({}, SubResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "ManagedIdentityCredential"
                }
            } })
    }
};
const PrivateEndpointConnectionResource = {
    type: {
        name: "Composite",
        className: "PrivateEndpointConnectionResource",
        modelProperties: Object.assign(Object.assign({}, SubResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "RemotePrivateEndpointConnection"
                }
            } })
    }
};
const PrivateLinkConnectionApprovalRequestResource = {
    type: {
        name: "Composite",
        className: "PrivateLinkConnectionApprovalRequestResource",
        modelProperties: Object.assign(Object.assign({}, SubResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "PrivateLinkConnectionApprovalRequest"
                }
            } })
    }
};
const PrivateLinkResource = {
    type: {
        name: "Composite",
        className: "PrivateLinkResource",
        modelProperties: Object.assign(Object.assign({}, SubResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "PrivateLinkResourceProperties"
                }
            } })
    }
};
const GlobalParameterResource = {
    type: {
        name: "Composite",
        className: "GlobalParameterResource",
        modelProperties: Object.assign(Object.assign({}, SubResource.type.modelProperties), { properties: {
                serializedName: "properties",
                required: true,
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Composite",
                            className: "GlobalParameterSpecification"
                        }
                    }
                }
            } })
    }
};
const ChangeDataCaptureResource = {
    type: {
        name: "Composite",
        className: "ChangeDataCaptureResource",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, SubResource.type.modelProperties), { folder: {
                serializedName: "properties.folder",
                type: {
                    name: "Composite",
                    className: "ChangeDataCaptureFolder"
                }
            }, description: {
                serializedName: "properties.description",
                type: {
                    name: "String"
                }
            }, sourceConnectionsInfo: {
                serializedName: "properties.sourceConnectionsInfo",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MapperSourceConnectionsInfo"
                        }
                    }
                }
            }, targetConnectionsInfo: {
                serializedName: "properties.targetConnectionsInfo",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MapperTargetConnectionsInfo"
                        }
                    }
                }
            }, policy: {
                serializedName: "properties.policy",
                type: {
                    name: "Composite",
                    className: "MapperPolicy"
                }
            }, allowVNetOverride: {
                serializedName: "properties.allowVNetOverride",
                type: {
                    name: "Boolean"
                }
            }, status: {
                serializedName: "properties.status",
                type: {
                    name: "String"
                }
            } })
    }
};
const CredentialResource = {
    type: {
        name: "Composite",
        className: "CredentialResource",
        modelProperties: Object.assign(Object.assign({}, SubResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "Credential"
                }
            } })
    }
};
const ManagedIntegrationRuntimeStatus = {
    serializedName: "Managed",
    type: {
        name: "Composite",
        className: "ManagedIntegrationRuntimeStatus",
        uberParent: "IntegrationRuntimeStatus",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: IntegrationRuntimeStatus.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, IntegrationRuntimeStatus.type.modelProperties), { createTime: {
                serializedName: "typeProperties.createTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, nodes: {
                serializedName: "typeProperties.nodes",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ManagedIntegrationRuntimeNode"
                        }
                    }
                }
            }, otherErrors: {
                serializedName: "typeProperties.otherErrors",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ManagedIntegrationRuntimeError"
                        }
                    }
                }
            }, lastOperation: {
                serializedName: "typeProperties.lastOperation",
                type: {
                    name: "Composite",
                    className: "ManagedIntegrationRuntimeOperationResult"
                }
            } })
    }
};
const SelfHostedIntegrationRuntimeStatus = {
    serializedName: "SelfHosted",
    type: {
        name: "Composite",
        className: "SelfHostedIntegrationRuntimeStatus",
        uberParent: "IntegrationRuntimeStatus",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: IntegrationRuntimeStatus.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, IntegrationRuntimeStatus.type.modelProperties), { createTime: {
                serializedName: "typeProperties.createTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, taskQueueId: {
                serializedName: "typeProperties.taskQueueId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, internalChannelEncryption: {
                serializedName: "typeProperties.internalChannelEncryption",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, version: {
                serializedName: "typeProperties.version",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, nodes: {
                serializedName: "typeProperties.nodes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SelfHostedIntegrationRuntimeNode"
                        }
                    }
                }
            }, scheduledUpdateDate: {
                serializedName: "typeProperties.scheduledUpdateDate",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, updateDelayOffset: {
                serializedName: "typeProperties.updateDelayOffset",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, localTimeZoneOffset: {
                serializedName: "typeProperties.localTimeZoneOffset",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, capabilities: {
                serializedName: "typeProperties.capabilities",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }, serviceUrls: {
                serializedName: "typeProperties.serviceUrls",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, autoUpdate: {
                serializedName: "typeProperties.autoUpdate",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, versionStatus: {
                serializedName: "typeProperties.versionStatus",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, links: {
                serializedName: "typeProperties.links",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LinkedIntegrationRuntime"
                        }
                    }
                }
            }, pushedVersion: {
                serializedName: "typeProperties.pushedVersion",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, latestVersion: {
                serializedName: "typeProperties.latestVersion",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, autoUpdateETA: {
                serializedName: "typeProperties.autoUpdateETA",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, selfContainedInteractiveAuthoringEnabled: {
                serializedName: "typeProperties.selfContainedInteractiveAuthoringEnabled",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            } })
    }
};
const SsisFolder = {
    serializedName: "Folder",
    type: {
        name: "Composite",
        className: "SsisFolder",
        uberParent: "SsisObjectMetadata",
        polymorphicDiscriminator: SsisObjectMetadata.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, SsisObjectMetadata.type.modelProperties)
    }
};
const SsisProject = {
    serializedName: "Project",
    type: {
        name: "Composite",
        className: "SsisProject",
        uberParent: "SsisObjectMetadata",
        polymorphicDiscriminator: SsisObjectMetadata.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, SsisObjectMetadata.type.modelProperties), { folderId: {
                serializedName: "folderId",
                type: {
                    name: "Number"
                }
            }, version: {
                serializedName: "version",
                type: {
                    name: "Number"
                }
            }, environmentRefs: {
                serializedName: "environmentRefs",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SsisEnvironmentReference"
                        }
                    }
                }
            }, parameters: {
                serializedName: "parameters",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SsisParameter"
                        }
                    }
                }
            } })
    }
};
const SsisPackage = {
    serializedName: "Package",
    type: {
        name: "Composite",
        className: "SsisPackage",
        uberParent: "SsisObjectMetadata",
        polymorphicDiscriminator: SsisObjectMetadata.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, SsisObjectMetadata.type.modelProperties), { folderId: {
                serializedName: "folderId",
                type: {
                    name: "Number"
                }
            }, projectVersion: {
                serializedName: "projectVersion",
                type: {
                    name: "Number"
                }
            }, projectId: {
                serializedName: "projectId",
                type: {
                    name: "Number"
                }
            }, parameters: {
                serializedName: "parameters",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SsisParameter"
                        }
                    }
                }
            } })
    }
};
const SsisEnvironment = {
    serializedName: "Environment",
    type: {
        name: "Composite",
        className: "SsisEnvironment",
        uberParent: "SsisObjectMetadata",
        polymorphicDiscriminator: SsisObjectMetadata.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, SsisObjectMetadata.type.modelProperties), { folderId: {
                serializedName: "folderId",
                type: {
                    name: "Number"
                }
            }, variables: {
                serializedName: "variables",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SsisVariable"
                        }
                    }
                }
            } })
    }
};
const AzureStorageLinkedService = {
    serializedName: "AzureStorage",
    type: {
        name: "Composite",
        className: "AzureStorageLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "any"
                }
            }, accountKey: {
                serializedName: "typeProperties.accountKey",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, sasUri: {
                serializedName: "typeProperties.sasUri",
                type: {
                    name: "any"
                }
            }, sasToken: {
                serializedName: "typeProperties.sasToken",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const AzureBlobStorageLinkedService = {
    serializedName: "AzureBlobStorage",
    type: {
        name: "Composite",
        className: "AzureBlobStorageLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "any"
                }
            }, accountKey: {
                serializedName: "typeProperties.accountKey",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, sasUri: {
                serializedName: "typeProperties.sasUri",
                type: {
                    name: "any"
                }
            }, sasToken: {
                serializedName: "typeProperties.sasToken",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, serviceEndpoint: {
                serializedName: "typeProperties.serviceEndpoint",
                type: {
                    name: "any"
                }
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                type: {
                    name: "any"
                }
            }, servicePrincipalKey: {
                serializedName: "typeProperties.servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, tenant: {
                serializedName: "typeProperties.tenant",
                type: {
                    name: "any"
                }
            }, azureCloudType: {
                serializedName: "typeProperties.azureCloudType",
                type: {
                    name: "any"
                }
            }, accountKind: {
                serializedName: "typeProperties.accountKind",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            }, credential: {
                serializedName: "typeProperties.credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "String"
                }
            }, containerUri: {
                serializedName: "typeProperties.containerUri",
                type: {
                    name: "any"
                }
            } })
    }
};
const AzureTableStorageLinkedService = {
    serializedName: "AzureTableStorage",
    type: {
        name: "Composite",
        className: "AzureTableStorageLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "any"
                }
            }, accountKey: {
                serializedName: "typeProperties.accountKey",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, sasUri: {
                serializedName: "typeProperties.sasUri",
                type: {
                    name: "any"
                }
            }, sasToken: {
                serializedName: "typeProperties.sasToken",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const AzureSqlDWLinkedService = {
    serializedName: "AzureSqlDW",
    type: {
        name: "Composite",
        className: "AzureSqlDWLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                required: true,
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                type: {
                    name: "any"
                }
            }, servicePrincipalKey: {
                serializedName: "typeProperties.servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, tenant: {
                serializedName: "typeProperties.tenant",
                type: {
                    name: "any"
                }
            }, azureCloudType: {
                serializedName: "typeProperties.azureCloudType",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            }, credential: {
                serializedName: "typeProperties.credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference"
                }
            } })
    }
};
const SqlServerLinkedService = {
    serializedName: "SqlServer",
    type: {
        name: "Composite",
        className: "SqlServerLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                required: true,
                type: {
                    name: "any"
                }
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            }, alwaysEncryptedSettings: {
                serializedName: "typeProperties.alwaysEncryptedSettings",
                type: {
                    name: "Composite",
                    className: "SqlAlwaysEncryptedProperties"
                }
            } })
    }
};
const AmazonRdsForSqlServerLinkedService = {
    serializedName: "AmazonRdsForSqlServer",
    type: {
        name: "Composite",
        className: "AmazonRdsForSqlServerLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                required: true,
                type: {
                    name: "any"
                }
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            }, alwaysEncryptedSettings: {
                serializedName: "typeProperties.alwaysEncryptedSettings",
                type: {
                    name: "Composite",
                    className: "SqlAlwaysEncryptedProperties"
                }
            } })
    }
};
const AzureSqlDatabaseLinkedService = {
    serializedName: "AzureSqlDatabase",
    type: {
        name: "Composite",
        className: "AzureSqlDatabaseLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                required: true,
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                type: {
                    name: "any"
                }
            }, servicePrincipalKey: {
                serializedName: "typeProperties.servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, tenant: {
                serializedName: "typeProperties.tenant",
                type: {
                    name: "any"
                }
            }, azureCloudType: {
                serializedName: "typeProperties.azureCloudType",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            }, alwaysEncryptedSettings: {
                serializedName: "typeProperties.alwaysEncryptedSettings",
                type: {
                    name: "Composite",
                    className: "SqlAlwaysEncryptedProperties"
                }
            }, credential: {
                serializedName: "typeProperties.credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference"
                }
            } })
    }
};
const AzureSqlMILinkedService = {
    serializedName: "AzureSqlMI",
    type: {
        name: "Composite",
        className: "AzureSqlMILinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                required: true,
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                type: {
                    name: "any"
                }
            }, servicePrincipalKey: {
                serializedName: "typeProperties.servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, tenant: {
                serializedName: "typeProperties.tenant",
                type: {
                    name: "any"
                }
            }, azureCloudType: {
                serializedName: "typeProperties.azureCloudType",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            }, alwaysEncryptedSettings: {
                serializedName: "typeProperties.alwaysEncryptedSettings",
                type: {
                    name: "Composite",
                    className: "SqlAlwaysEncryptedProperties"
                }
            }, credential: {
                serializedName: "typeProperties.credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference"
                }
            } })
    }
};
const AzureBatchLinkedService = {
    serializedName: "AzureBatch",
    type: {
        name: "Composite",
        className: "AzureBatchLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { accountName: {
                serializedName: "typeProperties.accountName",
                required: true,
                type: {
                    name: "any"
                }
            }, accessKey: {
                serializedName: "typeProperties.accessKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, batchUri: {
                serializedName: "typeProperties.batchUri",
                required: true,
                type: {
                    name: "any"
                }
            }, poolName: {
                serializedName: "typeProperties.poolName",
                required: true,
                type: {
                    name: "any"
                }
            }, linkedServiceName: {
                serializedName: "typeProperties.linkedServiceName",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            }, credential: {
                serializedName: "typeProperties.credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference"
                }
            } })
    }
};
const AzureKeyVaultLinkedService = {
    serializedName: "AzureKeyVault",
    type: {
        name: "Composite",
        className: "AzureKeyVaultLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { baseUrl: {
                serializedName: "typeProperties.baseUrl",
                required: true,
                type: {
                    name: "any"
                }
            }, credential: {
                serializedName: "typeProperties.credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference"
                }
            } })
    }
};
const CosmosDbLinkedService = {
    serializedName: "CosmosDb",
    type: {
        name: "Composite",
        className: "CosmosDbLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "any"
                }
            }, accountEndpoint: {
                serializedName: "typeProperties.accountEndpoint",
                type: {
                    name: "any"
                }
            }, database: {
                serializedName: "typeProperties.database",
                type: {
                    name: "any"
                }
            }, accountKey: {
                serializedName: "typeProperties.accountKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                type: {
                    name: "any"
                }
            }, servicePrincipalCredentialType: {
                serializedName: "typeProperties.servicePrincipalCredentialType",
                type: {
                    name: "any"
                }
            }, servicePrincipalCredential: {
                serializedName: "typeProperties.servicePrincipalCredential",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, tenant: {
                serializedName: "typeProperties.tenant",
                type: {
                    name: "any"
                }
            }, azureCloudType: {
                serializedName: "typeProperties.azureCloudType",
                type: {
                    name: "any"
                }
            }, connectionMode: {
                serializedName: "typeProperties.connectionMode",
                type: {
                    name: "String"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            }, credential: {
                serializedName: "typeProperties.credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference"
                }
            } })
    }
};
const DynamicsLinkedService = {
    serializedName: "Dynamics",
    type: {
        name: "Composite",
        className: "DynamicsLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { deploymentType: {
                serializedName: "typeProperties.deploymentType",
                required: true,
                type: {
                    name: "any"
                }
            }, hostName: {
                serializedName: "typeProperties.hostName",
                type: {
                    name: "any"
                }
            }, port: {
                serializedName: "typeProperties.port",
                type: {
                    name: "any"
                }
            }, serviceUri: {
                serializedName: "typeProperties.serviceUri",
                type: {
                    name: "any"
                }
            }, organizationName: {
                serializedName: "typeProperties.organizationName",
                type: {
                    name: "any"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                required: true,
                type: {
                    name: "any"
                }
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                type: {
                    name: "any"
                }
            }, servicePrincipalCredentialType: {
                serializedName: "typeProperties.servicePrincipalCredentialType",
                type: {
                    name: "any"
                }
            }, servicePrincipalCredential: {
                serializedName: "typeProperties.servicePrincipalCredential",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            }, credential: {
                serializedName: "typeProperties.credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference"
                }
            } })
    }
};
const DynamicsCrmLinkedService = {
    serializedName: "DynamicsCrm",
    type: {
        name: "Composite",
        className: "DynamicsCrmLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { deploymentType: {
                serializedName: "typeProperties.deploymentType",
                required: true,
                type: {
                    name: "any"
                }
            }, hostName: {
                serializedName: "typeProperties.hostName",
                type: {
                    name: "any"
                }
            }, port: {
                serializedName: "typeProperties.port",
                type: {
                    name: "any"
                }
            }, serviceUri: {
                serializedName: "typeProperties.serviceUri",
                type: {
                    name: "any"
                }
            }, organizationName: {
                serializedName: "typeProperties.organizationName",
                type: {
                    name: "any"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                required: true,
                type: {
                    name: "any"
                }
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                type: {
                    name: "any"
                }
            }, servicePrincipalCredentialType: {
                serializedName: "typeProperties.servicePrincipalCredentialType",
                type: {
                    name: "any"
                }
            }, servicePrincipalCredential: {
                serializedName: "typeProperties.servicePrincipalCredential",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const CommonDataServiceForAppsLinkedService = {
    serializedName: "CommonDataServiceForApps",
    type: {
        name: "Composite",
        className: "CommonDataServiceForAppsLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { deploymentType: {
                serializedName: "typeProperties.deploymentType",
                required: true,
                type: {
                    name: "any"
                }
            }, hostName: {
                serializedName: "typeProperties.hostName",
                type: {
                    name: "any"
                }
            }, port: {
                serializedName: "typeProperties.port",
                type: {
                    name: "any"
                }
            }, serviceUri: {
                serializedName: "typeProperties.serviceUri",
                type: {
                    name: "any"
                }
            }, organizationName: {
                serializedName: "typeProperties.organizationName",
                type: {
                    name: "any"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                required: true,
                type: {
                    name: "any"
                }
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                type: {
                    name: "any"
                }
            }, servicePrincipalCredentialType: {
                serializedName: "typeProperties.servicePrincipalCredentialType",
                type: {
                    name: "any"
                }
            }, servicePrincipalCredential: {
                serializedName: "typeProperties.servicePrincipalCredential",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const HDInsightLinkedService = {
    serializedName: "HDInsight",
    type: {
        name: "Composite",
        className: "HDInsightLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { clusterUri: {
                serializedName: "typeProperties.clusterUri",
                required: true,
                type: {
                    name: "any"
                }
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, linkedServiceName: {
                serializedName: "typeProperties.linkedServiceName",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            }, hcatalogLinkedServiceName: {
                serializedName: "typeProperties.hcatalogLinkedServiceName",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            }, isEspEnabled: {
                serializedName: "typeProperties.isEspEnabled",
                type: {
                    name: "any"
                }
            }, fileSystem: {
                serializedName: "typeProperties.fileSystem",
                type: {
                    name: "any"
                }
            } })
    }
};
const FileServerLinkedService = {
    serializedName: "FileServer",
    type: {
        name: "Composite",
        className: "FileServerLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { host: {
                serializedName: "typeProperties.host",
                required: true,
                type: {
                    name: "any"
                }
            }, userId: {
                serializedName: "typeProperties.userId",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const AzureFileStorageLinkedService = {
    serializedName: "AzureFileStorage",
    type: {
        name: "Composite",
        className: "AzureFileStorageLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { host: {
                serializedName: "typeProperties.host",
                type: {
                    name: "any"
                }
            }, userId: {
                serializedName: "typeProperties.userId",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, connectionString: {
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "any"
                }
            }, accountKey: {
                serializedName: "typeProperties.accountKey",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, sasUri: {
                serializedName: "typeProperties.sasUri",
                type: {
                    name: "any"
                }
            }, sasToken: {
                serializedName: "typeProperties.sasToken",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, fileShare: {
                serializedName: "typeProperties.fileShare",
                type: {
                    name: "any"
                }
            }, snapshot: {
                serializedName: "typeProperties.snapshot",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const AmazonS3CompatibleLinkedService = {
    serializedName: "AmazonS3Compatible",
    type: {
        name: "Composite",
        className: "AmazonS3CompatibleLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { accessKeyId: {
                serializedName: "typeProperties.accessKeyId",
                type: {
                    name: "any"
                }
            }, secretAccessKey: {
                serializedName: "typeProperties.secretAccessKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, serviceUrl: {
                serializedName: "typeProperties.serviceUrl",
                type: {
                    name: "any"
                }
            }, forcePathStyle: {
                serializedName: "typeProperties.forcePathStyle",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const OracleCloudStorageLinkedService = {
    serializedName: "OracleCloudStorage",
    type: {
        name: "Composite",
        className: "OracleCloudStorageLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { accessKeyId: {
                serializedName: "typeProperties.accessKeyId",
                type: {
                    name: "any"
                }
            }, secretAccessKey: {
                serializedName: "typeProperties.secretAccessKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, serviceUrl: {
                serializedName: "typeProperties.serviceUrl",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const GoogleCloudStorageLinkedService = {
    serializedName: "GoogleCloudStorage",
    type: {
        name: "Composite",
        className: "GoogleCloudStorageLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { accessKeyId: {
                serializedName: "typeProperties.accessKeyId",
                type: {
                    name: "any"
                }
            }, secretAccessKey: {
                serializedName: "typeProperties.secretAccessKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, serviceUrl: {
                serializedName: "typeProperties.serviceUrl",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const OracleLinkedService = {
    serializedName: "Oracle",
    type: {
        name: "Composite",
        className: "OracleLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                required: true,
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const AmazonRdsForOracleLinkedService = {
    serializedName: "AmazonRdsForOracle",
    type: {
        name: "Composite",
        className: "AmazonRdsForOracleLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                required: true,
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const AzureMySqlLinkedService = {
    serializedName: "AzureMySql",
    type: {
        name: "Composite",
        className: "AzureMySqlLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                required: true,
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const MySqlLinkedService = {
    serializedName: "MySql",
    type: {
        name: "Composite",
        className: "MySqlLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                required: true,
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const PostgreSqlLinkedService = {
    serializedName: "PostgreSql",
    type: {
        name: "Composite",
        className: "PostgreSqlLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                required: true,
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const SybaseLinkedService = {
    serializedName: "Sybase",
    type: {
        name: "Composite",
        className: "SybaseLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { server: {
                serializedName: "typeProperties.server",
                required: true,
                type: {
                    name: "any"
                }
            }, database: {
                serializedName: "typeProperties.database",
                required: true,
                type: {
                    name: "any"
                }
            }, schema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "String"
                }
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const Db2LinkedService = {
    serializedName: "Db2",
    type: {
        name: "Composite",
        className: "Db2LinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "any"
                }
            }, server: {
                serializedName: "typeProperties.server",
                type: {
                    name: "any"
                }
            }, database: {
                serializedName: "typeProperties.database",
                type: {
                    name: "any"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "String"
                }
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, packageCollection: {
                serializedName: "typeProperties.packageCollection",
                type: {
                    name: "any"
                }
            }, certificateCommonName: {
                serializedName: "typeProperties.certificateCommonName",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const TeradataLinkedService = {
    serializedName: "Teradata",
    type: {
        name: "Composite",
        className: "TeradataLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "any"
                }
            }, server: {
                serializedName: "typeProperties.server",
                type: {
                    name: "any"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "String"
                }
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const AzureMLLinkedService = {
    serializedName: "AzureML",
    type: {
        name: "Composite",
        className: "AzureMLLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { mlEndpoint: {
                serializedName: "typeProperties.mlEndpoint",
                required: true,
                type: {
                    name: "any"
                }
            }, apiKey: {
                serializedName: "typeProperties.apiKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, updateResourceEndpoint: {
                serializedName: "typeProperties.updateResourceEndpoint",
                type: {
                    name: "any"
                }
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                type: {
                    name: "any"
                }
            }, servicePrincipalKey: {
                serializedName: "typeProperties.servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, tenant: {
                serializedName: "typeProperties.tenant",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            }, authentication: {
                serializedName: "typeProperties.authentication",
                type: {
                    name: "any"
                }
            } })
    }
};
const AzureMLServiceLinkedService = {
    serializedName: "AzureMLService",
    type: {
        name: "Composite",
        className: "AzureMLServiceLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { subscriptionId: {
                serializedName: "typeProperties.subscriptionId",
                required: true,
                type: {
                    name: "any"
                }
            }, resourceGroupName: {
                serializedName: "typeProperties.resourceGroupName",
                required: true,
                type: {
                    name: "any"
                }
            }, mlWorkspaceName: {
                serializedName: "typeProperties.mlWorkspaceName",
                required: true,
                type: {
                    name: "any"
                }
            }, authentication: {
                serializedName: "typeProperties.authentication",
                type: {
                    name: "any"
                }
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                type: {
                    name: "any"
                }
            }, servicePrincipalKey: {
                serializedName: "typeProperties.servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, tenant: {
                serializedName: "typeProperties.tenant",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const OdbcLinkedService = {
    serializedName: "Odbc",
    type: {
        name: "Composite",
        className: "OdbcLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                required: true,
                type: {
                    name: "any"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "any"
                }
            }, credential: {
                serializedName: "typeProperties.credential",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const InformixLinkedService = {
    serializedName: "Informix",
    type: {
        name: "Composite",
        className: "InformixLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                required: true,
                type: {
                    name: "any"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "any"
                }
            }, credential: {
                serializedName: "typeProperties.credential",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const MicrosoftAccessLinkedService = {
    serializedName: "MicrosoftAccess",
    type: {
        name: "Composite",
        className: "MicrosoftAccessLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                required: true,
                type: {
                    name: "any"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "any"
                }
            }, credential: {
                serializedName: "typeProperties.credential",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const HdfsLinkedService = {
    serializedName: "Hdfs",
    type: {
        name: "Composite",
        className: "HdfsLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { url: {
                serializedName: "typeProperties.url",
                required: true,
                type: {
                    name: "any"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            } })
    }
};
const ODataLinkedService = {
    serializedName: "OData",
    type: {
        name: "Composite",
        className: "ODataLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { url: {
                serializedName: "typeProperties.url",
                required: true,
                type: {
                    name: "any"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "String"
                }
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, authHeaders: {
                serializedName: "typeProperties.authHeaders",
                type: {
                    name: "any"
                }
            }, tenant: {
                serializedName: "typeProperties.tenant",
                type: {
                    name: "any"
                }
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                type: {
                    name: "any"
                }
            }, azureCloudType: {
                serializedName: "typeProperties.azureCloudType",
                type: {
                    name: "any"
                }
            }, aadResourceId: {
                serializedName: "typeProperties.aadResourceId",
                type: {
                    name: "any"
                }
            }, aadServicePrincipalCredentialType: {
                serializedName: "typeProperties.aadServicePrincipalCredentialType",
                type: {
                    name: "String"
                }
            }, servicePrincipalKey: {
                serializedName: "typeProperties.servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, servicePrincipalEmbeddedCert: {
                serializedName: "typeProperties.servicePrincipalEmbeddedCert",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, servicePrincipalEmbeddedCertPassword: {
                serializedName: "typeProperties.servicePrincipalEmbeddedCertPassword",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const WebLinkedService = {
    serializedName: "Web",
    type: {
        name: "Composite",
        className: "WebLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { typeProperties: {
                serializedName: "typeProperties",
                type: {
                    name: "Composite",
                    className: "WebLinkedServiceTypeProperties"
                }
            } })
    }
};
const CassandraLinkedService = {
    serializedName: "Cassandra",
    type: {
        name: "Composite",
        className: "CassandraLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { host: {
                serializedName: "typeProperties.host",
                required: true,
                type: {
                    name: "any"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "any"
                }
            }, port: {
                serializedName: "typeProperties.port",
                type: {
                    name: "any"
                }
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const MongoDbLinkedService = {
    serializedName: "MongoDb",
    type: {
        name: "Composite",
        className: "MongoDbLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { server: {
                serializedName: "typeProperties.server",
                required: true,
                type: {
                    name: "any"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "String"
                }
            }, databaseName: {
                serializedName: "typeProperties.databaseName",
                required: true,
                type: {
                    name: "any"
                }
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, authSource: {
                serializedName: "typeProperties.authSource",
                type: {
                    name: "any"
                }
            }, port: {
                serializedName: "typeProperties.port",
                type: {
                    name: "any"
                }
            }, enableSsl: {
                serializedName: "typeProperties.enableSsl",
                type: {
                    name: "any"
                }
            }, allowSelfSignedServerCert: {
                serializedName: "typeProperties.allowSelfSignedServerCert",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const MongoDbAtlasLinkedService = {
    serializedName: "MongoDbAtlas",
    type: {
        name: "Composite",
        className: "MongoDbAtlasLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                required: true,
                type: {
                    name: "any"
                }
            }, database: {
                serializedName: "typeProperties.database",
                required: true,
                type: {
                    name: "any"
                }
            }, driverVersion: {
                serializedName: "typeProperties.driverVersion",
                type: {
                    name: "any"
                }
            } })
    }
};
const MongoDbV2LinkedService = {
    serializedName: "MongoDbV2",
    type: {
        name: "Composite",
        className: "MongoDbV2LinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                required: true,
                type: {
                    name: "any"
                }
            }, database: {
                serializedName: "typeProperties.database",
                required: true,
                type: {
                    name: "any"
                }
            } })
    }
};
const CosmosDbMongoDbApiLinkedService = {
    serializedName: "CosmosDbMongoDbApi",
    type: {
        name: "Composite",
        className: "CosmosDbMongoDbApiLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { isServerVersionAbove32: {
                serializedName: "typeProperties.isServerVersionAbove32",
                type: {
                    name: "any"
                }
            }, connectionString: {
                serializedName: "typeProperties.connectionString",
                required: true,
                type: {
                    name: "any"
                }
            }, database: {
                serializedName: "typeProperties.database",
                required: true,
                type: {
                    name: "any"
                }
            } })
    }
};
const AzureDataLakeStoreLinkedService = {
    serializedName: "AzureDataLakeStore",
    type: {
        name: "Composite",
        className: "AzureDataLakeStoreLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { dataLakeStoreUri: {
                serializedName: "typeProperties.dataLakeStoreUri",
                required: true,
                type: {
                    name: "any"
                }
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                type: {
                    name: "any"
                }
            }, servicePrincipalKey: {
                serializedName: "typeProperties.servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, tenant: {
                serializedName: "typeProperties.tenant",
                type: {
                    name: "any"
                }
            }, azureCloudType: {
                serializedName: "typeProperties.azureCloudType",
                type: {
                    name: "any"
                }
            }, accountName: {
                serializedName: "typeProperties.accountName",
                type: {
                    name: "any"
                }
            }, subscriptionId: {
                serializedName: "typeProperties.subscriptionId",
                type: {
                    name: "any"
                }
            }, resourceGroupName: {
                serializedName: "typeProperties.resourceGroupName",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            }, credential: {
                serializedName: "typeProperties.credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference"
                }
            } })
    }
};
const AzureBlobFSLinkedService = {
    serializedName: "AzureBlobFS",
    type: {
        name: "Composite",
        className: "AzureBlobFSLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { url: {
                serializedName: "typeProperties.url",
                type: {
                    name: "any"
                }
            }, accountKey: {
                serializedName: "typeProperties.accountKey",
                type: {
                    name: "any"
                }
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                type: {
                    name: "any"
                }
            }, servicePrincipalKey: {
                serializedName: "typeProperties.servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, tenant: {
                serializedName: "typeProperties.tenant",
                type: {
                    name: "any"
                }
            }, azureCloudType: {
                serializedName: "typeProperties.azureCloudType",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            }, credential: {
                serializedName: "typeProperties.credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference"
                }
            }, servicePrincipalCredentialType: {
                serializedName: "typeProperties.servicePrincipalCredentialType",
                type: {
                    name: "any"
                }
            }, servicePrincipalCredential: {
                serializedName: "typeProperties.servicePrincipalCredential",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, sasUri: {
                serializedName: "typeProperties.sasUri",
                type: {
                    name: "any"
                }
            }, sasToken: {
                serializedName: "typeProperties.sasToken",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            } })
    }
};
const Office365LinkedService = {
    serializedName: "Office365",
    type: {
        name: "Composite",
        className: "Office365LinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { office365TenantId: {
                serializedName: "typeProperties.office365TenantId",
                required: true,
                type: {
                    name: "any"
                }
            }, servicePrincipalTenantId: {
                serializedName: "typeProperties.servicePrincipalTenantId",
                required: true,
                type: {
                    name: "any"
                }
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                required: true,
                type: {
                    name: "any"
                }
            }, servicePrincipalKey: {
                serializedName: "typeProperties.servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const SalesforceLinkedService = {
    serializedName: "Salesforce",
    type: {
        name: "Composite",
        className: "SalesforceLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { environmentUrl: {
                serializedName: "typeProperties.environmentUrl",
                type: {
                    name: "any"
                }
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, securityToken: {
                serializedName: "typeProperties.securityToken",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, apiVersion: {
                serializedName: "typeProperties.apiVersion",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const SalesforceServiceCloudLinkedService = {
    serializedName: "SalesforceServiceCloud",
    type: {
        name: "Composite",
        className: "SalesforceServiceCloudLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { environmentUrl: {
                serializedName: "typeProperties.environmentUrl",
                type: {
                    name: "any"
                }
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, securityToken: {
                serializedName: "typeProperties.securityToken",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, apiVersion: {
                serializedName: "typeProperties.apiVersion",
                type: {
                    name: "any"
                }
            }, extendedProperties: {
                serializedName: "typeProperties.extendedProperties",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const SapCloudForCustomerLinkedService = {
    serializedName: "SapCloudForCustomer",
    type: {
        name: "Composite",
        className: "SapCloudForCustomerLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { url: {
                serializedName: "typeProperties.url",
                required: true,
                type: {
                    name: "any"
                }
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const SapEccLinkedService = {
    serializedName: "SapEcc",
    type: {
        name: "Composite",
        className: "SapEccLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { url: {
                serializedName: "typeProperties.url",
                required: true,
                type: {
                    name: "any"
                }
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const SapOpenHubLinkedService = {
    serializedName: "SapOpenHub",
    type: {
        name: "Composite",
        className: "SapOpenHubLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { server: {
                serializedName: "typeProperties.server",
                type: {
                    name: "any"
                }
            }, systemNumber: {
                serializedName: "typeProperties.systemNumber",
                type: {
                    name: "any"
                }
            }, clientId: {
                serializedName: "typeProperties.clientId",
                type: {
                    name: "any"
                }
            }, language: {
                serializedName: "typeProperties.language",
                type: {
                    name: "any"
                }
            }, systemId: {
                serializedName: "typeProperties.systemId",
                type: {
                    name: "any"
                }
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, messageServer: {
                serializedName: "typeProperties.messageServer",
                type: {
                    name: "any"
                }
            }, messageServerService: {
                serializedName: "typeProperties.messageServerService",
                type: {
                    name: "any"
                }
            }, logonGroup: {
                serializedName: "typeProperties.logonGroup",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const SapOdpLinkedService = {
    serializedName: "SapOdp",
    type: {
        name: "Composite",
        className: "SapOdpLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { server: {
                serializedName: "typeProperties.server",
                type: {
                    name: "any"
                }
            }, systemNumber: {
                serializedName: "typeProperties.systemNumber",
                type: {
                    name: "any"
                }
            }, clientId: {
                serializedName: "typeProperties.clientId",
                type: {
                    name: "any"
                }
            }, language: {
                serializedName: "typeProperties.language",
                type: {
                    name: "any"
                }
            }, systemId: {
                serializedName: "typeProperties.systemId",
                type: {
                    name: "any"
                }
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, messageServer: {
                serializedName: "typeProperties.messageServer",
                type: {
                    name: "any"
                }
            }, messageServerService: {
                serializedName: "typeProperties.messageServerService",
                type: {
                    name: "any"
                }
            }, sncMode: {
                serializedName: "typeProperties.sncMode",
                type: {
                    name: "any"
                }
            }, sncMyName: {
                serializedName: "typeProperties.sncMyName",
                type: {
                    name: "any"
                }
            }, sncPartnerName: {
                serializedName: "typeProperties.sncPartnerName",
                type: {
                    name: "any"
                }
            }, sncLibraryPath: {
                serializedName: "typeProperties.sncLibraryPath",
                type: {
                    name: "any"
                }
            }, sncQop: {
                serializedName: "typeProperties.sncQop",
                type: {
                    name: "any"
                }
            }, x509CertificatePath: {
                serializedName: "typeProperties.x509CertificatePath",
                type: {
                    name: "any"
                }
            }, logonGroup: {
                serializedName: "typeProperties.logonGroup",
                type: {
                    name: "any"
                }
            }, subscriberName: {
                serializedName: "typeProperties.subscriberName",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const RestServiceLinkedService = {
    serializedName: "RestService",
    type: {
        name: "Composite",
        className: "RestServiceLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { url: {
                serializedName: "typeProperties.url",
                required: true,
                type: {
                    name: "any"
                }
            }, enableServerCertificateValidation: {
                serializedName: "typeProperties.enableServerCertificateValidation",
                type: {
                    name: "any"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                required: true,
                type: {
                    name: "String"
                }
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, authHeaders: {
                serializedName: "typeProperties.authHeaders",
                type: {
                    name: "any"
                }
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                type: {
                    name: "any"
                }
            }, servicePrincipalKey: {
                serializedName: "typeProperties.servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, tenant: {
                serializedName: "typeProperties.tenant",
                type: {
                    name: "any"
                }
            }, azureCloudType: {
                serializedName: "typeProperties.azureCloudType",
                type: {
                    name: "any"
                }
            }, aadResourceId: {
                serializedName: "typeProperties.aadResourceId",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            }, credential: {
                serializedName: "typeProperties.credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference"
                }
            }, clientId: {
                serializedName: "typeProperties.clientId",
                type: {
                    name: "any"
                }
            }, clientSecret: {
                serializedName: "typeProperties.clientSecret",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, tokenEndpoint: {
                serializedName: "typeProperties.tokenEndpoint",
                type: {
                    name: "any"
                }
            }, resource: {
                serializedName: "typeProperties.resource",
                type: {
                    name: "any"
                }
            }, scope: {
                serializedName: "typeProperties.scope",
                type: {
                    name: "any"
                }
            } })
    }
};
const TeamDeskLinkedService = {
    serializedName: "TeamDesk",
    type: {
        name: "Composite",
        className: "TeamDeskLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { authenticationType: {
                serializedName: "typeProperties.authenticationType",
                required: true,
                type: {
                    name: "String"
                }
            }, url: {
                serializedName: "typeProperties.url",
                required: true,
                type: {
                    name: "any"
                }
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, apiToken: {
                serializedName: "typeProperties.apiToken",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const QuickbaseLinkedService = {
    serializedName: "Quickbase",
    type: {
        name: "Composite",
        className: "QuickbaseLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { url: {
                serializedName: "typeProperties.url",
                required: true,
                type: {
                    name: "any"
                }
            }, userToken: {
                serializedName: "typeProperties.userToken",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const SmartsheetLinkedService = {
    serializedName: "Smartsheet",
    type: {
        name: "Composite",
        className: "SmartsheetLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { apiToken: {
                serializedName: "typeProperties.apiToken",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const ZendeskLinkedService = {
    serializedName: "Zendesk",
    type: {
        name: "Composite",
        className: "ZendeskLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { authenticationType: {
                serializedName: "typeProperties.authenticationType",
                required: true,
                type: {
                    name: "String"
                }
            }, url: {
                serializedName: "typeProperties.url",
                required: true,
                type: {
                    name: "any"
                }
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, apiToken: {
                serializedName: "typeProperties.apiToken",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const DataworldLinkedService = {
    serializedName: "Dataworld",
    type: {
        name: "Composite",
        className: "DataworldLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { apiToken: {
                serializedName: "typeProperties.apiToken",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const AppFiguresLinkedService = {
    serializedName: "AppFigures",
    type: {
        name: "Composite",
        className: "AppFiguresLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { userName: {
                serializedName: "typeProperties.userName",
                required: true,
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, clientKey: {
                serializedName: "typeProperties.clientKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            } })
    }
};
const AsanaLinkedService = {
    serializedName: "Asana",
    type: {
        name: "Composite",
        className: "AsanaLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { apiToken: {
                serializedName: "typeProperties.apiToken",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const TwilioLinkedService = {
    serializedName: "Twilio",
    type: {
        name: "Composite",
        className: "TwilioLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { userName: {
                serializedName: "typeProperties.userName",
                required: true,
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            } })
    }
};
const GoogleSheetsLinkedService = {
    serializedName: "GoogleSheets",
    type: {
        name: "Composite",
        className: "GoogleSheetsLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { apiToken: {
                serializedName: "typeProperties.apiToken",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const AmazonS3LinkedService = {
    serializedName: "AmazonS3",
    type: {
        name: "Composite",
        className: "AmazonS3LinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "any"
                }
            }, accessKeyId: {
                serializedName: "typeProperties.accessKeyId",
                type: {
                    name: "any"
                }
            }, secretAccessKey: {
                serializedName: "typeProperties.secretAccessKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, serviceUrl: {
                serializedName: "typeProperties.serviceUrl",
                type: {
                    name: "any"
                }
            }, sessionToken: {
                serializedName: "typeProperties.sessionToken",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const AmazonRedshiftLinkedService = {
    serializedName: "AmazonRedshift",
    type: {
        name: "Composite",
        className: "AmazonRedshiftLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { server: {
                serializedName: "typeProperties.server",
                required: true,
                type: {
                    name: "any"
                }
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, database: {
                serializedName: "typeProperties.database",
                required: true,
                type: {
                    name: "any"
                }
            }, port: {
                serializedName: "typeProperties.port",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const CustomDataSourceLinkedService = {
    serializedName: "CustomDataSource",
    type: {
        name: "Composite",
        className: "CustomDataSourceLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { typeProperties: {
                serializedName: "typeProperties",
                required: true,
                type: {
                    name: "any"
                }
            } })
    }
};
const AzureSearchLinkedService = {
    serializedName: "AzureSearch",
    type: {
        name: "Composite",
        className: "AzureSearchLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { url: {
                serializedName: "typeProperties.url",
                required: true,
                type: {
                    name: "any"
                }
            }, key: {
                serializedName: "typeProperties.key",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const HttpLinkedService = {
    serializedName: "HttpServer",
    type: {
        name: "Composite",
        className: "HttpLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { url: {
                serializedName: "typeProperties.url",
                required: true,
                type: {
                    name: "any"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "String"
                }
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, authHeaders: {
                serializedName: "typeProperties.authHeaders",
                type: {
                    name: "any"
                }
            }, embeddedCertData: {
                serializedName: "typeProperties.embeddedCertData",
                type: {
                    name: "any"
                }
            }, certThumbprint: {
                serializedName: "typeProperties.certThumbprint",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            }, enableServerCertificateValidation: {
                serializedName: "typeProperties.enableServerCertificateValidation",
                type: {
                    name: "any"
                }
            } })
    }
};
const FtpServerLinkedService = {
    serializedName: "FtpServer",
    type: {
        name: "Composite",
        className: "FtpServerLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { host: {
                serializedName: "typeProperties.host",
                required: true,
                type: {
                    name: "any"
                }
            }, port: {
                serializedName: "typeProperties.port",
                type: {
                    name: "any"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "String"
                }
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            }, enableSsl: {
                serializedName: "typeProperties.enableSsl",
                type: {
                    name: "any"
                }
            }, enableServerCertificateValidation: {
                serializedName: "typeProperties.enableServerCertificateValidation",
                type: {
                    name: "any"
                }
            } })
    }
};
const SftpServerLinkedService = {
    serializedName: "Sftp",
    type: {
        name: "Composite",
        className: "SftpServerLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { host: {
                serializedName: "typeProperties.host",
                required: true,
                type: {
                    name: "any"
                }
            }, port: {
                serializedName: "typeProperties.port",
                type: {
                    name: "any"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "String"
                }
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            }, privateKeyPath: {
                serializedName: "typeProperties.privateKeyPath",
                type: {
                    name: "any"
                }
            }, privateKeyContent: {
                serializedName: "typeProperties.privateKeyContent",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, passPhrase: {
                serializedName: "typeProperties.passPhrase",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, skipHostKeyValidation: {
                serializedName: "typeProperties.skipHostKeyValidation",
                type: {
                    name: "any"
                }
            }, hostKeyFingerprint: {
                serializedName: "typeProperties.hostKeyFingerprint",
                type: {
                    name: "any"
                }
            } })
    }
};
const SapBWLinkedService = {
    serializedName: "SapBW",
    type: {
        name: "Composite",
        className: "SapBWLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { server: {
                serializedName: "typeProperties.server",
                required: true,
                type: {
                    name: "any"
                }
            }, systemNumber: {
                serializedName: "typeProperties.systemNumber",
                required: true,
                type: {
                    name: "any"
                }
            }, clientId: {
                serializedName: "typeProperties.clientId",
                required: true,
                type: {
                    name: "any"
                }
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const SapHanaLinkedService = {
    serializedName: "SapHana",
    type: {
        name: "Composite",
        className: "SapHanaLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "any"
                }
            }, server: {
                serializedName: "typeProperties.server",
                type: {
                    name: "any"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "String"
                }
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const AmazonMWSLinkedService = {
    serializedName: "AmazonMWS",
    type: {
        name: "Composite",
        className: "AmazonMWSLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { endpoint: {
                serializedName: "typeProperties.endpoint",
                required: true,
                type: {
                    name: "any"
                }
            }, marketplaceID: {
                serializedName: "typeProperties.marketplaceID",
                required: true,
                type: {
                    name: "any"
                }
            }, sellerID: {
                serializedName: "typeProperties.sellerID",
                required: true,
                type: {
                    name: "any"
                }
            }, mwsAuthToken: {
                serializedName: "typeProperties.mwsAuthToken",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, accessKeyId: {
                serializedName: "typeProperties.accessKeyId",
                required: true,
                type: {
                    name: "any"
                }
            }, secretKey: {
                serializedName: "typeProperties.secretKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "any"
                }
            }, useHostVerification: {
                serializedName: "typeProperties.useHostVerification",
                type: {
                    name: "any"
                }
            }, usePeerVerification: {
                serializedName: "typeProperties.usePeerVerification",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const AzurePostgreSqlLinkedService = {
    serializedName: "AzurePostgreSql",
    type: {
        name: "Composite",
        className: "AzurePostgreSqlLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const ConcurLinkedService = {
    serializedName: "Concur",
    type: {
        name: "Composite",
        className: "ConcurLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionProperties: {
                serializedName: "typeProperties.connectionProperties",
                type: {
                    name: "any"
                }
            }, clientId: {
                serializedName: "typeProperties.clientId",
                required: true,
                type: {
                    name: "any"
                }
            }, username: {
                serializedName: "typeProperties.username",
                required: true,
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "any"
                }
            }, useHostVerification: {
                serializedName: "typeProperties.useHostVerification",
                type: {
                    name: "any"
                }
            }, usePeerVerification: {
                serializedName: "typeProperties.usePeerVerification",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const CouchbaseLinkedService = {
    serializedName: "Couchbase",
    type: {
        name: "Composite",
        className: "CouchbaseLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "any"
                }
            }, credString: {
                serializedName: "typeProperties.credString",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const DrillLinkedService = {
    serializedName: "Drill",
    type: {
        name: "Composite",
        className: "DrillLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "any"
                }
            }, pwd: {
                serializedName: "typeProperties.pwd",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const EloquaLinkedService = {
    serializedName: "Eloqua",
    type: {
        name: "Composite",
        className: "EloquaLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { endpoint: {
                serializedName: "typeProperties.endpoint",
                required: true,
                type: {
                    name: "any"
                }
            }, username: {
                serializedName: "typeProperties.username",
                required: true,
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "any"
                }
            }, useHostVerification: {
                serializedName: "typeProperties.useHostVerification",
                type: {
                    name: "any"
                }
            }, usePeerVerification: {
                serializedName: "typeProperties.usePeerVerification",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const GoogleBigQueryLinkedService = {
    serializedName: "GoogleBigQuery",
    type: {
        name: "Composite",
        className: "GoogleBigQueryLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { project: {
                serializedName: "typeProperties.project",
                required: true,
                type: {
                    name: "any"
                }
            }, additionalProjects: {
                serializedName: "typeProperties.additionalProjects",
                type: {
                    name: "any"
                }
            }, requestGoogleDriveScope: {
                serializedName: "typeProperties.requestGoogleDriveScope",
                type: {
                    name: "any"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                required: true,
                type: {
                    name: "String"
                }
            }, refreshToken: {
                serializedName: "typeProperties.refreshToken",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, clientId: {
                serializedName: "typeProperties.clientId",
                type: {
                    name: "any"
                }
            }, clientSecret: {
                serializedName: "typeProperties.clientSecret",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, email: {
                serializedName: "typeProperties.email",
                type: {
                    name: "any"
                }
            }, keyFilePath: {
                serializedName: "typeProperties.keyFilePath",
                type: {
                    name: "any"
                }
            }, trustedCertPath: {
                serializedName: "typeProperties.trustedCertPath",
                type: {
                    name: "any"
                }
            }, useSystemTrustStore: {
                serializedName: "typeProperties.useSystemTrustStore",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const GreenplumLinkedService = {
    serializedName: "Greenplum",
    type: {
        name: "Composite",
        className: "GreenplumLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "any"
                }
            }, pwd: {
                serializedName: "typeProperties.pwd",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const HBaseLinkedService = {
    serializedName: "HBase",
    type: {
        name: "Composite",
        className: "HBaseLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { host: {
                serializedName: "typeProperties.host",
                required: true,
                type: {
                    name: "any"
                }
            }, port: {
                serializedName: "typeProperties.port",
                type: {
                    name: "any"
                }
            }, httpPath: {
                serializedName: "typeProperties.httpPath",
                type: {
                    name: "any"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                required: true,
                type: {
                    name: "String"
                }
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, enableSsl: {
                serializedName: "typeProperties.enableSsl",
                type: {
                    name: "any"
                }
            }, trustedCertPath: {
                serializedName: "typeProperties.trustedCertPath",
                type: {
                    name: "any"
                }
            }, allowHostNameCNMismatch: {
                serializedName: "typeProperties.allowHostNameCNMismatch",
                type: {
                    name: "any"
                }
            }, allowSelfSignedServerCert: {
                serializedName: "typeProperties.allowSelfSignedServerCert",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const HiveLinkedService = {
    serializedName: "Hive",
    type: {
        name: "Composite",
        className: "HiveLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { host: {
                serializedName: "typeProperties.host",
                required: true,
                type: {
                    name: "any"
                }
            }, port: {
                serializedName: "typeProperties.port",
                type: {
                    name: "any"
                }
            }, serverType: {
                serializedName: "typeProperties.serverType",
                type: {
                    name: "String"
                }
            }, thriftTransportProtocol: {
                serializedName: "typeProperties.thriftTransportProtocol",
                type: {
                    name: "String"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                required: true,
                type: {
                    name: "String"
                }
            }, serviceDiscoveryMode: {
                serializedName: "typeProperties.serviceDiscoveryMode",
                type: {
                    name: "any"
                }
            }, zooKeeperNameSpace: {
                serializedName: "typeProperties.zooKeeperNameSpace",
                type: {
                    name: "any"
                }
            }, useNativeQuery: {
                serializedName: "typeProperties.useNativeQuery",
                type: {
                    name: "any"
                }
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, httpPath: {
                serializedName: "typeProperties.httpPath",
                type: {
                    name: "any"
                }
            }, enableSsl: {
                serializedName: "typeProperties.enableSsl",
                type: {
                    name: "any"
                }
            }, trustedCertPath: {
                serializedName: "typeProperties.trustedCertPath",
                type: {
                    name: "any"
                }
            }, useSystemTrustStore: {
                serializedName: "typeProperties.useSystemTrustStore",
                type: {
                    name: "any"
                }
            }, allowHostNameCNMismatch: {
                serializedName: "typeProperties.allowHostNameCNMismatch",
                type: {
                    name: "any"
                }
            }, allowSelfSignedServerCert: {
                serializedName: "typeProperties.allowSelfSignedServerCert",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const HubspotLinkedService = {
    serializedName: "Hubspot",
    type: {
        name: "Composite",
        className: "HubspotLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { clientId: {
                serializedName: "typeProperties.clientId",
                required: true,
                type: {
                    name: "any"
                }
            }, clientSecret: {
                serializedName: "typeProperties.clientSecret",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, accessToken: {
                serializedName: "typeProperties.accessToken",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, refreshToken: {
                serializedName: "typeProperties.refreshToken",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "any"
                }
            }, useHostVerification: {
                serializedName: "typeProperties.useHostVerification",
                type: {
                    name: "any"
                }
            }, usePeerVerification: {
                serializedName: "typeProperties.usePeerVerification",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const ImpalaLinkedService = {
    serializedName: "Impala",
    type: {
        name: "Composite",
        className: "ImpalaLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { host: {
                serializedName: "typeProperties.host",
                required: true,
                type: {
                    name: "any"
                }
            }, port: {
                serializedName: "typeProperties.port",
                type: {
                    name: "any"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                required: true,
                type: {
                    name: "String"
                }
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, enableSsl: {
                serializedName: "typeProperties.enableSsl",
                type: {
                    name: "any"
                }
            }, trustedCertPath: {
                serializedName: "typeProperties.trustedCertPath",
                type: {
                    name: "any"
                }
            }, useSystemTrustStore: {
                serializedName: "typeProperties.useSystemTrustStore",
                type: {
                    name: "any"
                }
            }, allowHostNameCNMismatch: {
                serializedName: "typeProperties.allowHostNameCNMismatch",
                type: {
                    name: "any"
                }
            }, allowSelfSignedServerCert: {
                serializedName: "typeProperties.allowSelfSignedServerCert",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const JiraLinkedService = {
    serializedName: "Jira",
    type: {
        name: "Composite",
        className: "JiraLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { host: {
                serializedName: "typeProperties.host",
                required: true,
                type: {
                    name: "any"
                }
            }, port: {
                serializedName: "typeProperties.port",
                type: {
                    name: "any"
                }
            }, username: {
                serializedName: "typeProperties.username",
                required: true,
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "any"
                }
            }, useHostVerification: {
                serializedName: "typeProperties.useHostVerification",
                type: {
                    name: "any"
                }
            }, usePeerVerification: {
                serializedName: "typeProperties.usePeerVerification",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const MagentoLinkedService = {
    serializedName: "Magento",
    type: {
        name: "Composite",
        className: "MagentoLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { host: {
                serializedName: "typeProperties.host",
                required: true,
                type: {
                    name: "any"
                }
            }, accessToken: {
                serializedName: "typeProperties.accessToken",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "any"
                }
            }, useHostVerification: {
                serializedName: "typeProperties.useHostVerification",
                type: {
                    name: "any"
                }
            }, usePeerVerification: {
                serializedName: "typeProperties.usePeerVerification",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const MariaDBLinkedService = {
    serializedName: "MariaDB",
    type: {
        name: "Composite",
        className: "MariaDBLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "any"
                }
            }, pwd: {
                serializedName: "typeProperties.pwd",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const AzureMariaDBLinkedService = {
    serializedName: "AzureMariaDB",
    type: {
        name: "Composite",
        className: "AzureMariaDBLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "any"
                }
            }, pwd: {
                serializedName: "typeProperties.pwd",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const MarketoLinkedService = {
    serializedName: "Marketo",
    type: {
        name: "Composite",
        className: "MarketoLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { endpoint: {
                serializedName: "typeProperties.endpoint",
                required: true,
                type: {
                    name: "any"
                }
            }, clientId: {
                serializedName: "typeProperties.clientId",
                required: true,
                type: {
                    name: "any"
                }
            }, clientSecret: {
                serializedName: "typeProperties.clientSecret",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "any"
                }
            }, useHostVerification: {
                serializedName: "typeProperties.useHostVerification",
                type: {
                    name: "any"
                }
            }, usePeerVerification: {
                serializedName: "typeProperties.usePeerVerification",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const PaypalLinkedService = {
    serializedName: "Paypal",
    type: {
        name: "Composite",
        className: "PaypalLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { host: {
                serializedName: "typeProperties.host",
                required: true,
                type: {
                    name: "any"
                }
            }, clientId: {
                serializedName: "typeProperties.clientId",
                required: true,
                type: {
                    name: "any"
                }
            }, clientSecret: {
                serializedName: "typeProperties.clientSecret",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "any"
                }
            }, useHostVerification: {
                serializedName: "typeProperties.useHostVerification",
                type: {
                    name: "any"
                }
            }, usePeerVerification: {
                serializedName: "typeProperties.usePeerVerification",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const PhoenixLinkedService = {
    serializedName: "Phoenix",
    type: {
        name: "Composite",
        className: "PhoenixLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { host: {
                serializedName: "typeProperties.host",
                required: true,
                type: {
                    name: "any"
                }
            }, port: {
                serializedName: "typeProperties.port",
                type: {
                    name: "any"
                }
            }, httpPath: {
                serializedName: "typeProperties.httpPath",
                type: {
                    name: "any"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                required: true,
                type: {
                    name: "String"
                }
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, enableSsl: {
                serializedName: "typeProperties.enableSsl",
                type: {
                    name: "any"
                }
            }, trustedCertPath: {
                serializedName: "typeProperties.trustedCertPath",
                type: {
                    name: "any"
                }
            }, useSystemTrustStore: {
                serializedName: "typeProperties.useSystemTrustStore",
                type: {
                    name: "any"
                }
            }, allowHostNameCNMismatch: {
                serializedName: "typeProperties.allowHostNameCNMismatch",
                type: {
                    name: "any"
                }
            }, allowSelfSignedServerCert: {
                serializedName: "typeProperties.allowSelfSignedServerCert",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const PrestoLinkedService = {
    serializedName: "Presto",
    type: {
        name: "Composite",
        className: "PrestoLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { host: {
                serializedName: "typeProperties.host",
                required: true,
                type: {
                    name: "any"
                }
            }, serverVersion: {
                serializedName: "typeProperties.serverVersion",
                required: true,
                type: {
                    name: "any"
                }
            }, catalog: {
                serializedName: "typeProperties.catalog",
                required: true,
                type: {
                    name: "any"
                }
            }, port: {
                serializedName: "typeProperties.port",
                type: {
                    name: "any"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                required: true,
                type: {
                    name: "String"
                }
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, enableSsl: {
                serializedName: "typeProperties.enableSsl",
                type: {
                    name: "any"
                }
            }, trustedCertPath: {
                serializedName: "typeProperties.trustedCertPath",
                type: {
                    name: "any"
                }
            }, useSystemTrustStore: {
                serializedName: "typeProperties.useSystemTrustStore",
                type: {
                    name: "any"
                }
            }, allowHostNameCNMismatch: {
                serializedName: "typeProperties.allowHostNameCNMismatch",
                type: {
                    name: "any"
                }
            }, allowSelfSignedServerCert: {
                serializedName: "typeProperties.allowSelfSignedServerCert",
                type: {
                    name: "any"
                }
            }, timeZoneID: {
                serializedName: "typeProperties.timeZoneID",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const QuickBooksLinkedService = {
    serializedName: "QuickBooks",
    type: {
        name: "Composite",
        className: "QuickBooksLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionProperties: {
                serializedName: "typeProperties.connectionProperties",
                type: {
                    name: "any"
                }
            }, endpoint: {
                serializedName: "typeProperties.endpoint",
                type: {
                    name: "any"
                }
            }, companyId: {
                serializedName: "typeProperties.companyId",
                type: {
                    name: "any"
                }
            }, consumerKey: {
                serializedName: "typeProperties.consumerKey",
                type: {
                    name: "any"
                }
            }, consumerSecret: {
                serializedName: "typeProperties.consumerSecret",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, accessToken: {
                serializedName: "typeProperties.accessToken",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, accessTokenSecret: {
                serializedName: "typeProperties.accessTokenSecret",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const ServiceNowLinkedService = {
    serializedName: "ServiceNow",
    type: {
        name: "Composite",
        className: "ServiceNowLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { endpoint: {
                serializedName: "typeProperties.endpoint",
                required: true,
                type: {
                    name: "any"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                required: true,
                type: {
                    name: "String"
                }
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, clientId: {
                serializedName: "typeProperties.clientId",
                type: {
                    name: "any"
                }
            }, clientSecret: {
                serializedName: "typeProperties.clientSecret",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "any"
                }
            }, useHostVerification: {
                serializedName: "typeProperties.useHostVerification",
                type: {
                    name: "any"
                }
            }, usePeerVerification: {
                serializedName: "typeProperties.usePeerVerification",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const ShopifyLinkedService = {
    serializedName: "Shopify",
    type: {
        name: "Composite",
        className: "ShopifyLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { host: {
                serializedName: "typeProperties.host",
                required: true,
                type: {
                    name: "any"
                }
            }, accessToken: {
                serializedName: "typeProperties.accessToken",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "any"
                }
            }, useHostVerification: {
                serializedName: "typeProperties.useHostVerification",
                type: {
                    name: "any"
                }
            }, usePeerVerification: {
                serializedName: "typeProperties.usePeerVerification",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const SparkLinkedService = {
    serializedName: "Spark",
    type: {
        name: "Composite",
        className: "SparkLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { host: {
                serializedName: "typeProperties.host",
                required: true,
                type: {
                    name: "any"
                }
            }, port: {
                serializedName: "typeProperties.port",
                required: true,
                type: {
                    name: "any"
                }
            }, serverType: {
                serializedName: "typeProperties.serverType",
                type: {
                    name: "String"
                }
            }, thriftTransportProtocol: {
                serializedName: "typeProperties.thriftTransportProtocol",
                type: {
                    name: "String"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                required: true,
                type: {
                    name: "String"
                }
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, httpPath: {
                serializedName: "typeProperties.httpPath",
                type: {
                    name: "any"
                }
            }, enableSsl: {
                serializedName: "typeProperties.enableSsl",
                type: {
                    name: "any"
                }
            }, trustedCertPath: {
                serializedName: "typeProperties.trustedCertPath",
                type: {
                    name: "any"
                }
            }, useSystemTrustStore: {
                serializedName: "typeProperties.useSystemTrustStore",
                type: {
                    name: "any"
                }
            }, allowHostNameCNMismatch: {
                serializedName: "typeProperties.allowHostNameCNMismatch",
                type: {
                    name: "any"
                }
            }, allowSelfSignedServerCert: {
                serializedName: "typeProperties.allowSelfSignedServerCert",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const SquareLinkedService = {
    serializedName: "Square",
    type: {
        name: "Composite",
        className: "SquareLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionProperties: {
                serializedName: "typeProperties.connectionProperties",
                type: {
                    name: "any"
                }
            }, host: {
                serializedName: "typeProperties.host",
                type: {
                    name: "any"
                }
            }, clientId: {
                serializedName: "typeProperties.clientId",
                type: {
                    name: "any"
                }
            }, clientSecret: {
                serializedName: "typeProperties.clientSecret",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, redirectUri: {
                serializedName: "typeProperties.redirectUri",
                type: {
                    name: "any"
                }
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "any"
                }
            }, useHostVerification: {
                serializedName: "typeProperties.useHostVerification",
                type: {
                    name: "any"
                }
            }, usePeerVerification: {
                serializedName: "typeProperties.usePeerVerification",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const XeroLinkedService = {
    serializedName: "Xero",
    type: {
        name: "Composite",
        className: "XeroLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionProperties: {
                serializedName: "typeProperties.connectionProperties",
                type: {
                    name: "any"
                }
            }, host: {
                serializedName: "typeProperties.host",
                type: {
                    name: "any"
                }
            }, consumerKey: {
                serializedName: "typeProperties.consumerKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, privateKey: {
                serializedName: "typeProperties.privateKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "any"
                }
            }, useHostVerification: {
                serializedName: "typeProperties.useHostVerification",
                type: {
                    name: "any"
                }
            }, usePeerVerification: {
                serializedName: "typeProperties.usePeerVerification",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const ZohoLinkedService = {
    serializedName: "Zoho",
    type: {
        name: "Composite",
        className: "ZohoLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionProperties: {
                serializedName: "typeProperties.connectionProperties",
                type: {
                    name: "any"
                }
            }, endpoint: {
                serializedName: "typeProperties.endpoint",
                type: {
                    name: "any"
                }
            }, accessToken: {
                serializedName: "typeProperties.accessToken",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "any"
                }
            }, useHostVerification: {
                serializedName: "typeProperties.useHostVerification",
                type: {
                    name: "any"
                }
            }, usePeerVerification: {
                serializedName: "typeProperties.usePeerVerification",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const VerticaLinkedService = {
    serializedName: "Vertica",
    type: {
        name: "Composite",
        className: "VerticaLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "any"
                }
            }, pwd: {
                serializedName: "typeProperties.pwd",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const NetezzaLinkedService = {
    serializedName: "Netezza",
    type: {
        name: "Composite",
        className: "NetezzaLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "any"
                }
            }, pwd: {
                serializedName: "typeProperties.pwd",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const SalesforceMarketingCloudLinkedService = {
    serializedName: "SalesforceMarketingCloud",
    type: {
        name: "Composite",
        className: "SalesforceMarketingCloudLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionProperties: {
                serializedName: "typeProperties.connectionProperties",
                type: {
                    name: "any"
                }
            }, clientId: {
                serializedName: "typeProperties.clientId",
                type: {
                    name: "any"
                }
            }, clientSecret: {
                serializedName: "typeProperties.clientSecret",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "any"
                }
            }, useHostVerification: {
                serializedName: "typeProperties.useHostVerification",
                type: {
                    name: "any"
                }
            }, usePeerVerification: {
                serializedName: "typeProperties.usePeerVerification",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const HDInsightOnDemandLinkedService = {
    serializedName: "HDInsightOnDemand",
    type: {
        name: "Composite",
        className: "HDInsightOnDemandLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { clusterSize: {
                serializedName: "typeProperties.clusterSize",
                required: true,
                type: {
                    name: "any"
                }
            }, timeToLive: {
                serializedName: "typeProperties.timeToLive",
                required: true,
                type: {
                    name: "any"
                }
            }, version: {
                serializedName: "typeProperties.version",
                required: true,
                type: {
                    name: "any"
                }
            }, linkedServiceName: {
                serializedName: "typeProperties.linkedServiceName",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            }, hostSubscriptionId: {
                serializedName: "typeProperties.hostSubscriptionId",
                required: true,
                type: {
                    name: "any"
                }
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                type: {
                    name: "any"
                }
            }, servicePrincipalKey: {
                serializedName: "typeProperties.servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, tenant: {
                serializedName: "typeProperties.tenant",
                required: true,
                type: {
                    name: "any"
                }
            }, clusterResourceGroup: {
                serializedName: "typeProperties.clusterResourceGroup",
                required: true,
                type: {
                    name: "any"
                }
            }, clusterNamePrefix: {
                serializedName: "typeProperties.clusterNamePrefix",
                type: {
                    name: "any"
                }
            }, clusterUserName: {
                serializedName: "typeProperties.clusterUserName",
                type: {
                    name: "any"
                }
            }, clusterPassword: {
                serializedName: "typeProperties.clusterPassword",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, clusterSshUserName: {
                serializedName: "typeProperties.clusterSshUserName",
                type: {
                    name: "any"
                }
            }, clusterSshPassword: {
                serializedName: "typeProperties.clusterSshPassword",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, additionalLinkedServiceNames: {
                serializedName: "typeProperties.additionalLinkedServiceNames",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LinkedServiceReference"
                        }
                    }
                }
            }, hcatalogLinkedServiceName: {
                serializedName: "typeProperties.hcatalogLinkedServiceName",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            }, clusterType: {
                serializedName: "typeProperties.clusterType",
                type: {
                    name: "any"
                }
            }, sparkVersion: {
                serializedName: "typeProperties.sparkVersion",
                type: {
                    name: "any"
                }
            }, coreConfiguration: {
                serializedName: "typeProperties.coreConfiguration",
                type: {
                    name: "any"
                }
            }, hBaseConfiguration: {
                serializedName: "typeProperties.hBaseConfiguration",
                type: {
                    name: "any"
                }
            }, hdfsConfiguration: {
                serializedName: "typeProperties.hdfsConfiguration",
                type: {
                    name: "any"
                }
            }, hiveConfiguration: {
                serializedName: "typeProperties.hiveConfiguration",
                type: {
                    name: "any"
                }
            }, mapReduceConfiguration: {
                serializedName: "typeProperties.mapReduceConfiguration",
                type: {
                    name: "any"
                }
            }, oozieConfiguration: {
                serializedName: "typeProperties.oozieConfiguration",
                type: {
                    name: "any"
                }
            }, stormConfiguration: {
                serializedName: "typeProperties.stormConfiguration",
                type: {
                    name: "any"
                }
            }, yarnConfiguration: {
                serializedName: "typeProperties.yarnConfiguration",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            }, headNodeSize: {
                serializedName: "typeProperties.headNodeSize",
                type: {
                    name: "any"
                }
            }, dataNodeSize: {
                serializedName: "typeProperties.dataNodeSize",
                type: {
                    name: "any"
                }
            }, zookeeperNodeSize: {
                serializedName: "typeProperties.zookeeperNodeSize",
                type: {
                    name: "any"
                }
            }, scriptActions: {
                serializedName: "typeProperties.scriptActions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ScriptAction"
                        }
                    }
                }
            }, virtualNetworkId: {
                serializedName: "typeProperties.virtualNetworkId",
                type: {
                    name: "any"
                }
            }, subnetName: {
                serializedName: "typeProperties.subnetName",
                type: {
                    name: "any"
                }
            }, credential: {
                serializedName: "typeProperties.credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference"
                }
            } })
    }
};
const AzureDataLakeAnalyticsLinkedService = {
    serializedName: "AzureDataLakeAnalytics",
    type: {
        name: "Composite",
        className: "AzureDataLakeAnalyticsLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { accountName: {
                serializedName: "typeProperties.accountName",
                required: true,
                type: {
                    name: "any"
                }
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                type: {
                    name: "any"
                }
            }, servicePrincipalKey: {
                serializedName: "typeProperties.servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, tenant: {
                serializedName: "typeProperties.tenant",
                required: true,
                type: {
                    name: "any"
                }
            }, subscriptionId: {
                serializedName: "typeProperties.subscriptionId",
                type: {
                    name: "any"
                }
            }, resourceGroupName: {
                serializedName: "typeProperties.resourceGroupName",
                type: {
                    name: "any"
                }
            }, dataLakeAnalyticsUri: {
                serializedName: "typeProperties.dataLakeAnalyticsUri",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const AzureDatabricksLinkedService = {
    serializedName: "AzureDatabricks",
    type: {
        name: "Composite",
        className: "AzureDatabricksLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { domain: {
                serializedName: "typeProperties.domain",
                required: true,
                type: {
                    name: "any"
                }
            }, accessToken: {
                serializedName: "typeProperties.accessToken",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, authentication: {
                serializedName: "typeProperties.authentication",
                type: {
                    name: "any"
                }
            }, workspaceResourceId: {
                serializedName: "typeProperties.workspaceResourceId",
                type: {
                    name: "any"
                }
            }, existingClusterId: {
                serializedName: "typeProperties.existingClusterId",
                type: {
                    name: "any"
                }
            }, instancePoolId: {
                serializedName: "typeProperties.instancePoolId",
                type: {
                    name: "any"
                }
            }, newClusterVersion: {
                serializedName: "typeProperties.newClusterVersion",
                type: {
                    name: "any"
                }
            }, newClusterNumOfWorker: {
                serializedName: "typeProperties.newClusterNumOfWorker",
                type: {
                    name: "any"
                }
            }, newClusterNodeType: {
                serializedName: "typeProperties.newClusterNodeType",
                type: {
                    name: "any"
                }
            }, newClusterSparkConf: {
                serializedName: "typeProperties.newClusterSparkConf",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }, newClusterSparkEnvVars: {
                serializedName: "typeProperties.newClusterSparkEnvVars",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }, newClusterCustomTags: {
                serializedName: "typeProperties.newClusterCustomTags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }, newClusterLogDestination: {
                serializedName: "typeProperties.newClusterLogDestination",
                type: {
                    name: "any"
                }
            }, newClusterDriverNodeType: {
                serializedName: "typeProperties.newClusterDriverNodeType",
                type: {
                    name: "any"
                }
            }, newClusterInitScripts: {
                serializedName: "typeProperties.newClusterInitScripts",
                type: {
                    name: "any"
                }
            }, newClusterEnableElasticDisk: {
                serializedName: "typeProperties.newClusterEnableElasticDisk",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            }, policyId: {
                serializedName: "typeProperties.policyId",
                type: {
                    name: "any"
                }
            }, credential: {
                serializedName: "typeProperties.credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference"
                }
            } })
    }
};
const AzureDatabricksDeltaLakeLinkedService = {
    serializedName: "AzureDatabricksDeltaLake",
    type: {
        name: "Composite",
        className: "AzureDatabricksDeltaLakeLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { domain: {
                serializedName: "typeProperties.domain",
                required: true,
                type: {
                    name: "any"
                }
            }, accessToken: {
                serializedName: "typeProperties.accessToken",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, clusterId: {
                serializedName: "typeProperties.clusterId",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            }, credential: {
                serializedName: "typeProperties.credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference"
                }
            }, workspaceResourceId: {
                serializedName: "typeProperties.workspaceResourceId",
                type: {
                    name: "any"
                }
            } })
    }
};
const ResponsysLinkedService = {
    serializedName: "Responsys",
    type: {
        name: "Composite",
        className: "ResponsysLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { endpoint: {
                serializedName: "typeProperties.endpoint",
                required: true,
                type: {
                    name: "any"
                }
            }, clientId: {
                serializedName: "typeProperties.clientId",
                required: true,
                type: {
                    name: "any"
                }
            }, clientSecret: {
                serializedName: "typeProperties.clientSecret",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "any"
                }
            }, useHostVerification: {
                serializedName: "typeProperties.useHostVerification",
                type: {
                    name: "any"
                }
            }, usePeerVerification: {
                serializedName: "typeProperties.usePeerVerification",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const DynamicsAXLinkedService = {
    serializedName: "DynamicsAX",
    type: {
        name: "Composite",
        className: "DynamicsAXLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { url: {
                serializedName: "typeProperties.url",
                required: true,
                type: {
                    name: "any"
                }
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                required: true,
                type: {
                    name: "any"
                }
            }, servicePrincipalKey: {
                serializedName: "typeProperties.servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, tenant: {
                serializedName: "typeProperties.tenant",
                required: true,
                type: {
                    name: "any"
                }
            }, aadResourceId: {
                serializedName: "typeProperties.aadResourceId",
                required: true,
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const OracleServiceCloudLinkedService = {
    serializedName: "OracleServiceCloud",
    type: {
        name: "Composite",
        className: "OracleServiceCloudLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { host: {
                serializedName: "typeProperties.host",
                required: true,
                type: {
                    name: "any"
                }
            }, username: {
                serializedName: "typeProperties.username",
                required: true,
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "any"
                }
            }, useHostVerification: {
                serializedName: "typeProperties.useHostVerification",
                type: {
                    name: "any"
                }
            }, usePeerVerification: {
                serializedName: "typeProperties.usePeerVerification",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const GoogleAdWordsLinkedService = {
    serializedName: "GoogleAdWords",
    type: {
        name: "Composite",
        className: "GoogleAdWordsLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionProperties: {
                serializedName: "typeProperties.connectionProperties",
                type: {
                    name: "any"
                }
            }, clientCustomerID: {
                serializedName: "typeProperties.clientCustomerID",
                type: {
                    name: "any"
                }
            }, developerToken: {
                serializedName: "typeProperties.developerToken",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "String"
                }
            }, refreshToken: {
                serializedName: "typeProperties.refreshToken",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, clientId: {
                serializedName: "typeProperties.clientId",
                type: {
                    name: "any"
                }
            }, clientSecret: {
                serializedName: "typeProperties.clientSecret",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, email: {
                serializedName: "typeProperties.email",
                type: {
                    name: "any"
                }
            }, keyFilePath: {
                serializedName: "typeProperties.keyFilePath",
                type: {
                    name: "any"
                }
            }, trustedCertPath: {
                serializedName: "typeProperties.trustedCertPath",
                type: {
                    name: "any"
                }
            }, useSystemTrustStore: {
                serializedName: "typeProperties.useSystemTrustStore",
                type: {
                    name: "any"
                }
            }, privateKey: {
                serializedName: "typeProperties.privateKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, loginCustomerID: {
                serializedName: "typeProperties.loginCustomerID",
                type: {
                    name: "any"
                }
            }, googleAdsApiVersion: {
                serializedName: "typeProperties.googleAdsApiVersion",
                type: {
                    name: "any"
                }
            }, supportLegacyDataTypes: {
                serializedName: "typeProperties.supportLegacyDataTypes",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const SapTableLinkedService = {
    serializedName: "SapTable",
    type: {
        name: "Composite",
        className: "SapTableLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { server: {
                serializedName: "typeProperties.server",
                type: {
                    name: "any"
                }
            }, systemNumber: {
                serializedName: "typeProperties.systemNumber",
                type: {
                    name: "any"
                }
            }, clientId: {
                serializedName: "typeProperties.clientId",
                type: {
                    name: "any"
                }
            }, language: {
                serializedName: "typeProperties.language",
                type: {
                    name: "any"
                }
            }, systemId: {
                serializedName: "typeProperties.systemId",
                type: {
                    name: "any"
                }
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, messageServer: {
                serializedName: "typeProperties.messageServer",
                type: {
                    name: "any"
                }
            }, messageServerService: {
                serializedName: "typeProperties.messageServerService",
                type: {
                    name: "any"
                }
            }, sncMode: {
                serializedName: "typeProperties.sncMode",
                type: {
                    name: "any"
                }
            }, sncMyName: {
                serializedName: "typeProperties.sncMyName",
                type: {
                    name: "any"
                }
            }, sncPartnerName: {
                serializedName: "typeProperties.sncPartnerName",
                type: {
                    name: "any"
                }
            }, sncLibraryPath: {
                serializedName: "typeProperties.sncLibraryPath",
                type: {
                    name: "any"
                }
            }, sncQop: {
                serializedName: "typeProperties.sncQop",
                type: {
                    name: "any"
                }
            }, logonGroup: {
                serializedName: "typeProperties.logonGroup",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const AzureDataExplorerLinkedService = {
    serializedName: "AzureDataExplorer",
    type: {
        name: "Composite",
        className: "AzureDataExplorerLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { endpoint: {
                serializedName: "typeProperties.endpoint",
                required: true,
                type: {
                    name: "any"
                }
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                type: {
                    name: "any"
                }
            }, servicePrincipalKey: {
                serializedName: "typeProperties.servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, database: {
                serializedName: "typeProperties.database",
                required: true,
                type: {
                    name: "any"
                }
            }, tenant: {
                serializedName: "typeProperties.tenant",
                type: {
                    name: "any"
                }
            }, credential: {
                serializedName: "typeProperties.credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference"
                }
            } })
    }
};
const AzureFunctionLinkedService = {
    serializedName: "AzureFunction",
    type: {
        name: "Composite",
        className: "AzureFunctionLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { functionAppUrl: {
                serializedName: "typeProperties.functionAppUrl",
                required: true,
                type: {
                    name: "any"
                }
            }, functionKey: {
                serializedName: "typeProperties.functionKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            }, credential: {
                serializedName: "typeProperties.credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference"
                }
            }, resourceId: {
                serializedName: "typeProperties.resourceId",
                type: {
                    name: "any"
                }
            }, authentication: {
                serializedName: "typeProperties.authentication",
                type: {
                    name: "any"
                }
            } })
    }
};
const SnowflakeLinkedService = {
    serializedName: "Snowflake",
    type: {
        name: "Composite",
        className: "SnowflakeLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                required: true,
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const SharePointOnlineListLinkedService = {
    serializedName: "SharePointOnlineList",
    type: {
        name: "Composite",
        className: "SharePointOnlineListLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { siteUrl: {
                serializedName: "typeProperties.siteUrl",
                required: true,
                type: {
                    name: "any"
                }
            }, tenantId: {
                serializedName: "typeProperties.tenantId",
                required: true,
                type: {
                    name: "any"
                }
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                required: true,
                type: {
                    name: "any"
                }
            }, servicePrincipalKey: {
                serializedName: "typeProperties.servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
const AzureSynapseArtifactsLinkedService = {
    serializedName: "AzureSynapseArtifacts",
    type: {
        name: "Composite",
        className: "AzureSynapseArtifactsLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { endpoint: {
                serializedName: "typeProperties.endpoint",
                required: true,
                type: {
                    name: "any"
                }
            }, authentication: {
                serializedName: "typeProperties.authentication",
                type: {
                    name: "any"
                }
            }, workspaceResourceId: {
                serializedName: "typeProperties.workspaceResourceId",
                type: {
                    name: "any"
                }
            } })
    }
};
const LakeHouseLinkedService = {
    serializedName: "LakeHouse",
    type: {
        name: "Composite",
        className: "LakeHouseLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { workspaceId: {
                serializedName: "typeProperties.workspaceId",
                type: {
                    name: "any"
                }
            }, artifactId: {
                serializedName: "typeProperties.artifactId",
                type: {
                    name: "any"
                }
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                type: {
                    name: "any"
                }
            }, servicePrincipalKey: {
                serializedName: "typeProperties.servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, tenant: {
                serializedName: "typeProperties.tenant",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            }, servicePrincipalCredentialType: {
                serializedName: "typeProperties.servicePrincipalCredentialType",
                type: {
                    name: "any"
                }
            }, servicePrincipalCredential: {
                serializedName: "typeProperties.servicePrincipalCredential",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            } })
    }
};
const AmazonS3Dataset = {
    serializedName: "AmazonS3Object",
    type: {
        name: "Composite",
        className: "AmazonS3Dataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { bucketName: {
                serializedName: "typeProperties.bucketName",
                required: true,
                type: {
                    name: "any"
                }
            }, key: {
                serializedName: "typeProperties.key",
                type: {
                    name: "any"
                }
            }, prefix: {
                serializedName: "typeProperties.prefix",
                type: {
                    name: "any"
                }
            }, version: {
                serializedName: "typeProperties.version",
                type: {
                    name: "any"
                }
            }, modifiedDatetimeStart: {
                serializedName: "typeProperties.modifiedDatetimeStart",
                type: {
                    name: "any"
                }
            }, modifiedDatetimeEnd: {
                serializedName: "typeProperties.modifiedDatetimeEnd",
                type: {
                    name: "any"
                }
            }, format: {
                serializedName: "typeProperties.format",
                type: {
                    name: "Composite",
                    className: "DatasetStorageFormat"
                }
            }, compression: {
                serializedName: "typeProperties.compression",
                type: {
                    name: "Composite",
                    className: "DatasetCompression"
                }
            } })
    }
};
const AvroDataset = {
    serializedName: "Avro",
    type: {
        name: "Composite",
        className: "AvroDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { location: {
                serializedName: "typeProperties.location",
                type: {
                    name: "Composite",
                    className: "DatasetLocation"
                }
            }, avroCompressionCodec: {
                serializedName: "typeProperties.avroCompressionCodec",
                type: {
                    name: "any"
                }
            }, avroCompressionLevel: {
                constraints: {
                    InclusiveMaximum: 9,
                    InclusiveMinimum: 1
                },
                serializedName: "typeProperties.avroCompressionLevel",
                type: {
                    name: "Number"
                }
            } })
    }
};
const ExcelDataset = {
    serializedName: "Excel",
    type: {
        name: "Composite",
        className: "ExcelDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { location: {
                serializedName: "typeProperties.location",
                type: {
                    name: "Composite",
                    className: "DatasetLocation"
                }
            }, sheetName: {
                serializedName: "typeProperties.sheetName",
                type: {
                    name: "any"
                }
            }, sheetIndex: {
                serializedName: "typeProperties.sheetIndex",
                type: {
                    name: "any"
                }
            }, range: {
                serializedName: "typeProperties.range",
                type: {
                    name: "any"
                }
            }, firstRowAsHeader: {
                serializedName: "typeProperties.firstRowAsHeader",
                type: {
                    name: "any"
                }
            }, compression: {
                serializedName: "typeProperties.compression",
                type: {
                    name: "Composite",
                    className: "DatasetCompression"
                }
            }, nullValue: {
                serializedName: "typeProperties.nullValue",
                type: {
                    name: "any"
                }
            } })
    }
};
const ParquetDataset = {
    serializedName: "Parquet",
    type: {
        name: "Composite",
        className: "ParquetDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { location: {
                serializedName: "typeProperties.location",
                type: {
                    name: "Composite",
                    className: "DatasetLocation"
                }
            }, compressionCodec: {
                serializedName: "typeProperties.compressionCodec",
                type: {
                    name: "any"
                }
            } })
    }
};
const DelimitedTextDataset = {
    serializedName: "DelimitedText",
    type: {
        name: "Composite",
        className: "DelimitedTextDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { location: {
                serializedName: "typeProperties.location",
                type: {
                    name: "Composite",
                    className: "DatasetLocation"
                }
            }, columnDelimiter: {
                serializedName: "typeProperties.columnDelimiter",
                type: {
                    name: "any"
                }
            }, rowDelimiter: {
                serializedName: "typeProperties.rowDelimiter",
                type: {
                    name: "any"
                }
            }, encodingName: {
                serializedName: "typeProperties.encodingName",
                type: {
                    name: "any"
                }
            }, compressionCodec: {
                serializedName: "typeProperties.compressionCodec",
                type: {
                    name: "any"
                }
            }, compressionLevel: {
                serializedName: "typeProperties.compressionLevel",
                type: {
                    name: "any"
                }
            }, quoteChar: {
                serializedName: "typeProperties.quoteChar",
                type: {
                    name: "any"
                }
            }, escapeChar: {
                serializedName: "typeProperties.escapeChar",
                type: {
                    name: "any"
                }
            }, firstRowAsHeader: {
                serializedName: "typeProperties.firstRowAsHeader",
                type: {
                    name: "any"
                }
            }, nullValue: {
                serializedName: "typeProperties.nullValue",
                type: {
                    name: "any"
                }
            } })
    }
};
const JsonDataset = {
    serializedName: "Json",
    type: {
        name: "Composite",
        className: "JsonDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { location: {
                serializedName: "typeProperties.location",
                type: {
                    name: "Composite",
                    className: "DatasetLocation"
                }
            }, encodingName: {
                serializedName: "typeProperties.encodingName",
                type: {
                    name: "any"
                }
            }, compression: {
                serializedName: "typeProperties.compression",
                type: {
                    name: "Composite",
                    className: "DatasetCompression"
                }
            } })
    }
};
const XmlDataset = {
    serializedName: "Xml",
    type: {
        name: "Composite",
        className: "XmlDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { location: {
                serializedName: "typeProperties.location",
                type: {
                    name: "Composite",
                    className: "DatasetLocation"
                }
            }, encodingName: {
                serializedName: "typeProperties.encodingName",
                type: {
                    name: "any"
                }
            }, nullValue: {
                serializedName: "typeProperties.nullValue",
                type: {
                    name: "any"
                }
            }, compression: {
                serializedName: "typeProperties.compression",
                type: {
                    name: "Composite",
                    className: "DatasetCompression"
                }
            } })
    }
};
const OrcDataset = {
    serializedName: "Orc",
    type: {
        name: "Composite",
        className: "OrcDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { location: {
                serializedName: "typeProperties.location",
                type: {
                    name: "Composite",
                    className: "DatasetLocation"
                }
            }, orcCompressionCodec: {
                serializedName: "typeProperties.orcCompressionCodec",
                type: {
                    name: "any"
                }
            } })
    }
};
const BinaryDataset = {
    serializedName: "Binary",
    type: {
        name: "Composite",
        className: "BinaryDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { location: {
                serializedName: "typeProperties.location",
                type: {
                    name: "Composite",
                    className: "DatasetLocation"
                }
            }, compression: {
                serializedName: "typeProperties.compression",
                type: {
                    name: "Composite",
                    className: "DatasetCompression"
                }
            } })
    }
};
const AzureBlobDataset = {
    serializedName: "AzureBlob",
    type: {
        name: "Composite",
        className: "AzureBlobDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { folderPath: {
                serializedName: "typeProperties.folderPath",
                type: {
                    name: "any"
                }
            }, tableRootLocation: {
                serializedName: "typeProperties.tableRootLocation",
                type: {
                    name: "any"
                }
            }, fileName: {
                serializedName: "typeProperties.fileName",
                type: {
                    name: "any"
                }
            }, modifiedDatetimeStart: {
                serializedName: "typeProperties.modifiedDatetimeStart",
                type: {
                    name: "any"
                }
            }, modifiedDatetimeEnd: {
                serializedName: "typeProperties.modifiedDatetimeEnd",
                type: {
                    name: "any"
                }
            }, format: {
                serializedName: "typeProperties.format",
                type: {
                    name: "Composite",
                    className: "DatasetStorageFormat"
                }
            }, compression: {
                serializedName: "typeProperties.compression",
                type: {
                    name: "Composite",
                    className: "DatasetCompression"
                }
            } })
    }
};
const AzureTableDataset = {
    serializedName: "AzureTable",
    type: {
        name: "Composite",
        className: "AzureTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                required: true,
                type: {
                    name: "any"
                }
            } })
    }
};
const AzureSqlTableDataset = {
    serializedName: "AzureSqlTable",
    type: {
        name: "Composite",
        className: "AzureSqlTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            }, schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any"
                }
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any"
                }
            } })
    }
};
const AzureSqlMITableDataset = {
    serializedName: "AzureSqlMITable",
    type: {
        name: "Composite",
        className: "AzureSqlMITableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            }, schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any"
                }
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any"
                }
            } })
    }
};
const AzureSqlDWTableDataset = {
    serializedName: "AzureSqlDWTable",
    type: {
        name: "Composite",
        className: "AzureSqlDWTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            }, schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any"
                }
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any"
                }
            } })
    }
};
const CassandraTableDataset = {
    serializedName: "CassandraTable",
    type: {
        name: "Composite",
        className: "CassandraTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            }, keyspace: {
                serializedName: "typeProperties.keyspace",
                type: {
                    name: "any"
                }
            } })
    }
};
const CustomDataset = {
    serializedName: "CustomDataset",
    type: {
        name: "Composite",
        className: "CustomDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { typeProperties: {
                serializedName: "typeProperties",
                type: {
                    name: "any"
                }
            } })
    }
};
const CosmosDbSqlApiCollectionDataset = {
    serializedName: "CosmosDbSqlApiCollection",
    type: {
        name: "Composite",
        className: "CosmosDbSqlApiCollectionDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { collectionName: {
                serializedName: "typeProperties.collectionName",
                required: true,
                type: {
                    name: "any"
                }
            } })
    }
};
const DocumentDbCollectionDataset = {
    serializedName: "DocumentDbCollection",
    type: {
        name: "Composite",
        className: "DocumentDbCollectionDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { collectionName: {
                serializedName: "typeProperties.collectionName",
                required: true,
                type: {
                    name: "any"
                }
            } })
    }
};
const DynamicsEntityDataset = {
    serializedName: "DynamicsEntity",
    type: {
        name: "Composite",
        className: "DynamicsEntityDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { entityName: {
                serializedName: "typeProperties.entityName",
                type: {
                    name: "any"
                }
            } })
    }
};
const DynamicsCrmEntityDataset = {
    serializedName: "DynamicsCrmEntity",
    type: {
        name: "Composite",
        className: "DynamicsCrmEntityDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { entityName: {
                serializedName: "typeProperties.entityName",
                type: {
                    name: "any"
                }
            } })
    }
};
const CommonDataServiceForAppsEntityDataset = {
    serializedName: "CommonDataServiceForAppsEntity",
    type: {
        name: "Composite",
        className: "CommonDataServiceForAppsEntityDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { entityName: {
                serializedName: "typeProperties.entityName",
                type: {
                    name: "any"
                }
            } })
    }
};
const AzureDataLakeStoreDataset = {
    serializedName: "AzureDataLakeStoreFile",
    type: {
        name: "Composite",
        className: "AzureDataLakeStoreDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { folderPath: {
                serializedName: "typeProperties.folderPath",
                type: {
                    name: "any"
                }
            }, fileName: {
                serializedName: "typeProperties.fileName",
                type: {
                    name: "any"
                }
            }, format: {
                serializedName: "typeProperties.format",
                type: {
                    name: "Composite",
                    className: "DatasetStorageFormat"
                }
            }, compression: {
                serializedName: "typeProperties.compression",
                type: {
                    name: "Composite",
                    className: "DatasetCompression"
                }
            } })
    }
};
const AzureBlobFSDataset = {
    serializedName: "AzureBlobFSFile",
    type: {
        name: "Composite",
        className: "AzureBlobFSDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { folderPath: {
                serializedName: "typeProperties.folderPath",
                type: {
                    name: "any"
                }
            }, fileName: {
                serializedName: "typeProperties.fileName",
                type: {
                    name: "any"
                }
            }, format: {
                serializedName: "typeProperties.format",
                type: {
                    name: "Composite",
                    className: "DatasetStorageFormat"
                }
            }, compression: {
                serializedName: "typeProperties.compression",
                type: {
                    name: "Composite",
                    className: "DatasetCompression"
                }
            } })
    }
};
const Office365Dataset = {
    serializedName: "Office365Table",
    type: {
        name: "Composite",
        className: "Office365Dataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                required: true,
                type: {
                    name: "any"
                }
            }, predicate: {
                serializedName: "typeProperties.predicate",
                type: {
                    name: "any"
                }
            } })
    }
};
const FileShareDataset = {
    serializedName: "FileShare",
    type: {
        name: "Composite",
        className: "FileShareDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { folderPath: {
                serializedName: "typeProperties.folderPath",
                type: {
                    name: "any"
                }
            }, fileName: {
                serializedName: "typeProperties.fileName",
                type: {
                    name: "any"
                }
            }, modifiedDatetimeStart: {
                serializedName: "typeProperties.modifiedDatetimeStart",
                type: {
                    name: "any"
                }
            }, modifiedDatetimeEnd: {
                serializedName: "typeProperties.modifiedDatetimeEnd",
                type: {
                    name: "any"
                }
            }, format: {
                serializedName: "typeProperties.format",
                type: {
                    name: "Composite",
                    className: "DatasetStorageFormat"
                }
            }, fileFilter: {
                serializedName: "typeProperties.fileFilter",
                type: {
                    name: "any"
                }
            }, compression: {
                serializedName: "typeProperties.compression",
                type: {
                    name: "Composite",
                    className: "DatasetCompression"
                }
            } })
    }
};
const MongoDbCollectionDataset = {
    serializedName: "MongoDbCollection",
    type: {
        name: "Composite",
        className: "MongoDbCollectionDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { collectionName: {
                serializedName: "typeProperties.collectionName",
                required: true,
                type: {
                    name: "any"
                }
            } })
    }
};
const MongoDbAtlasCollectionDataset = {
    serializedName: "MongoDbAtlasCollection",
    type: {
        name: "Composite",
        className: "MongoDbAtlasCollectionDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { collection: {
                serializedName: "typeProperties.collection",
                required: true,
                type: {
                    name: "any"
                }
            } })
    }
};
const MongoDbV2CollectionDataset = {
    serializedName: "MongoDbV2Collection",
    type: {
        name: "Composite",
        className: "MongoDbV2CollectionDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { collection: {
                serializedName: "typeProperties.collection",
                required: true,
                type: {
                    name: "any"
                }
            } })
    }
};
const CosmosDbMongoDbApiCollectionDataset = {
    serializedName: "CosmosDbMongoDbApiCollection",
    type: {
        name: "Composite",
        className: "CosmosDbMongoDbApiCollectionDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { collection: {
                serializedName: "typeProperties.collection",
                required: true,
                type: {
                    name: "any"
                }
            } })
    }
};
const ODataResourceDataset = {
    serializedName: "ODataResource",
    type: {
        name: "Composite",
        className: "ODataResourceDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { path: {
                serializedName: "typeProperties.path",
                type: {
                    name: "any"
                }
            } })
    }
};
const OracleTableDataset = {
    serializedName: "OracleTable",
    type: {
        name: "Composite",
        className: "OracleTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            }, schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any"
                }
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any"
                }
            } })
    }
};
const AmazonRdsForOracleTableDataset = {
    serializedName: "AmazonRdsForOracleTable",
    type: {
        name: "Composite",
        className: "AmazonRdsForOracleTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any"
                }
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any"
                }
            } })
    }
};
const TeradataTableDataset = {
    serializedName: "TeradataTable",
    type: {
        name: "Composite",
        className: "TeradataTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { database: {
                serializedName: "typeProperties.database",
                type: {
                    name: "any"
                }
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any"
                }
            } })
    }
};
const AzureMySqlTableDataset = {
    serializedName: "AzureMySqlTable",
    type: {
        name: "Composite",
        className: "AzureMySqlTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any"
                }
            } })
    }
};
const AmazonRedshiftTableDataset = {
    serializedName: "AmazonRedshiftTable",
    type: {
        name: "Composite",
        className: "AmazonRedshiftTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any"
                }
            }, schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any"
                }
            } })
    }
};
const Db2TableDataset = {
    serializedName: "Db2Table",
    type: {
        name: "Composite",
        className: "Db2TableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            }, schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any"
                }
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any"
                }
            } })
    }
};
const RelationalTableDataset = {
    serializedName: "RelationalTable",
    type: {
        name: "Composite",
        className: "RelationalTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            } })
    }
};
const InformixTableDataset = {
    serializedName: "InformixTable",
    type: {
        name: "Composite",
        className: "InformixTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            } })
    }
};
const OdbcTableDataset = {
    serializedName: "OdbcTable",
    type: {
        name: "Composite",
        className: "OdbcTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            } })
    }
};
const MySqlTableDataset = {
    serializedName: "MySqlTable",
    type: {
        name: "Composite",
        className: "MySqlTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            } })
    }
};
const PostgreSqlTableDataset = {
    serializedName: "PostgreSqlTable",
    type: {
        name: "Composite",
        className: "PostgreSqlTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any"
                }
            }, schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any"
                }
            } })
    }
};
const MicrosoftAccessTableDataset = {
    serializedName: "MicrosoftAccessTable",
    type: {
        name: "Composite",
        className: "MicrosoftAccessTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            } })
    }
};
const SalesforceObjectDataset = {
    serializedName: "SalesforceObject",
    type: {
        name: "Composite",
        className: "SalesforceObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { objectApiName: {
                serializedName: "typeProperties.objectApiName",
                type: {
                    name: "any"
                }
            } })
    }
};
const SalesforceServiceCloudObjectDataset = {
    serializedName: "SalesforceServiceCloudObject",
    type: {
        name: "Composite",
        className: "SalesforceServiceCloudObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { objectApiName: {
                serializedName: "typeProperties.objectApiName",
                type: {
                    name: "any"
                }
            } })
    }
};
const SybaseTableDataset = {
    serializedName: "SybaseTable",
    type: {
        name: "Composite",
        className: "SybaseTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            } })
    }
};
const SapBwCubeDataset = {
    serializedName: "SapBwCube",
    type: {
        name: "Composite",
        className: "SapBwCubeDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, Dataset.type.modelProperties)
    }
};
const SapCloudForCustomerResourceDataset = {
    serializedName: "SapCloudForCustomerResource",
    type: {
        name: "Composite",
        className: "SapCloudForCustomerResourceDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { path: {
                serializedName: "typeProperties.path",
                required: true,
                type: {
                    name: "any"
                }
            } })
    }
};
const SapEccResourceDataset = {
    serializedName: "SapEccResource",
    type: {
        name: "Composite",
        className: "SapEccResourceDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { path: {
                serializedName: "typeProperties.path",
                required: true,
                type: {
                    name: "any"
                }
            } })
    }
};
const SapHanaTableDataset = {
    serializedName: "SapHanaTable",
    type: {
        name: "Composite",
        className: "SapHanaTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any"
                }
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any"
                }
            } })
    }
};
const SapOpenHubTableDataset = {
    serializedName: "SapOpenHubTable",
    type: {
        name: "Composite",
        className: "SapOpenHubTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { openHubDestinationName: {
                serializedName: "typeProperties.openHubDestinationName",
                required: true,
                type: {
                    name: "any"
                }
            }, excludeLastRequest: {
                serializedName: "typeProperties.excludeLastRequest",
                type: {
                    name: "any"
                }
            }, baseRequestId: {
                serializedName: "typeProperties.baseRequestId",
                type: {
                    name: "any"
                }
            } })
    }
};
const SqlServerTableDataset = {
    serializedName: "SqlServerTable",
    type: {
        name: "Composite",
        className: "SqlServerTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            }, schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any"
                }
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any"
                }
            } })
    }
};
const AmazonRdsForSqlServerTableDataset = {
    serializedName: "AmazonRdsForSqlServerTable",
    type: {
        name: "Composite",
        className: "AmazonRdsForSqlServerTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any"
                }
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any"
                }
            } })
    }
};
const RestResourceDataset = {
    serializedName: "RestResource",
    type: {
        name: "Composite",
        className: "RestResourceDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { relativeUrl: {
                serializedName: "typeProperties.relativeUrl",
                type: {
                    name: "any"
                }
            }, requestMethod: {
                serializedName: "typeProperties.requestMethod",
                type: {
                    name: "any"
                }
            }, requestBody: {
                serializedName: "typeProperties.requestBody",
                type: {
                    name: "any"
                }
            }, additionalHeaders: {
                serializedName: "typeProperties.additionalHeaders",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }, paginationRules: {
                serializedName: "typeProperties.paginationRules",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            } })
    }
};
const SapTableResourceDataset = {
    serializedName: "SapTableResource",
    type: {
        name: "Composite",
        className: "SapTableResourceDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                required: true,
                type: {
                    name: "any"
                }
            } })
    }
};
const SapOdpResourceDataset = {
    serializedName: "SapOdpResource",
    type: {
        name: "Composite",
        className: "SapOdpResourceDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { context: {
                serializedName: "typeProperties.context",
                required: true,
                type: {
                    name: "any"
                }
            }, objectName: {
                serializedName: "typeProperties.objectName",
                required: true,
                type: {
                    name: "any"
                }
            } })
    }
};
const WebTableDataset = {
    serializedName: "WebTable",
    type: {
        name: "Composite",
        className: "WebTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { index: {
                serializedName: "typeProperties.index",
                required: true,
                type: {
                    name: "any"
                }
            }, path: {
                serializedName: "typeProperties.path",
                type: {
                    name: "any"
                }
            } })
    }
};
const AzureSearchIndexDataset = {
    serializedName: "AzureSearchIndex",
    type: {
        name: "Composite",
        className: "AzureSearchIndexDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { indexName: {
                serializedName: "typeProperties.indexName",
                required: true,
                type: {
                    name: "any"
                }
            } })
    }
};
const HttpDataset = {
    serializedName: "HttpFile",
    type: {
        name: "Composite",
        className: "HttpDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { relativeUrl: {
                serializedName: "typeProperties.relativeUrl",
                type: {
                    name: "any"
                }
            }, requestMethod: {
                serializedName: "typeProperties.requestMethod",
                type: {
                    name: "any"
                }
            }, requestBody: {
                serializedName: "typeProperties.requestBody",
                type: {
                    name: "any"
                }
            }, additionalHeaders: {
                serializedName: "typeProperties.additionalHeaders",
                type: {
                    name: "any"
                }
            }, format: {
                serializedName: "typeProperties.format",
                type: {
                    name: "Composite",
                    className: "DatasetStorageFormat"
                }
            }, compression: {
                serializedName: "typeProperties.compression",
                type: {
                    name: "Composite",
                    className: "DatasetCompression"
                }
            } })
    }
};
const AmazonMWSObjectDataset = {
    serializedName: "AmazonMWSObject",
    type: {
        name: "Composite",
        className: "AmazonMWSObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            } })
    }
};
const AzurePostgreSqlTableDataset = {
    serializedName: "AzurePostgreSqlTable",
    type: {
        name: "Composite",
        className: "AzurePostgreSqlTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any"
                }
            }, schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any"
                }
            } })
    }
};
const ConcurObjectDataset = {
    serializedName: "ConcurObject",
    type: {
        name: "Composite",
        className: "ConcurObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            } })
    }
};
const CouchbaseTableDataset = {
    serializedName: "CouchbaseTable",
    type: {
        name: "Composite",
        className: "CouchbaseTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            } })
    }
};
const DrillTableDataset = {
    serializedName: "DrillTable",
    type: {
        name: "Composite",
        className: "DrillTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any"
                }
            }, schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any"
                }
            } })
    }
};
const EloquaObjectDataset = {
    serializedName: "EloquaObject",
    type: {
        name: "Composite",
        className: "EloquaObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            } })
    }
};
const GoogleBigQueryObjectDataset = {
    serializedName: "GoogleBigQueryObject",
    type: {
        name: "Composite",
        className: "GoogleBigQueryObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any"
                }
            }, dataset: {
                serializedName: "typeProperties.dataset",
                type: {
                    name: "any"
                }
            } })
    }
};
const GreenplumTableDataset = {
    serializedName: "GreenplumTable",
    type: {
        name: "Composite",
        className: "GreenplumTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any"
                }
            }, schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any"
                }
            } })
    }
};
const HBaseObjectDataset = {
    serializedName: "HBaseObject",
    type: {
        name: "Composite",
        className: "HBaseObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            } })
    }
};
const HiveObjectDataset = {
    serializedName: "HiveObject",
    type: {
        name: "Composite",
        className: "HiveObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any"
                }
            }, schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any"
                }
            } })
    }
};
const HubspotObjectDataset = {
    serializedName: "HubspotObject",
    type: {
        name: "Composite",
        className: "HubspotObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            } })
    }
};
const ImpalaObjectDataset = {
    serializedName: "ImpalaObject",
    type: {
        name: "Composite",
        className: "ImpalaObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any"
                }
            }, schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any"
                }
            } })
    }
};
const JiraObjectDataset = {
    serializedName: "JiraObject",
    type: {
        name: "Composite",
        className: "JiraObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            } })
    }
};
const MagentoObjectDataset = {
    serializedName: "MagentoObject",
    type: {
        name: "Composite",
        className: "MagentoObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            } })
    }
};
const MariaDBTableDataset = {
    serializedName: "MariaDBTable",
    type: {
        name: "Composite",
        className: "MariaDBTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            } })
    }
};
const AzureMariaDBTableDataset = {
    serializedName: "AzureMariaDBTable",
    type: {
        name: "Composite",
        className: "AzureMariaDBTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            } })
    }
};
const MarketoObjectDataset = {
    serializedName: "MarketoObject",
    type: {
        name: "Composite",
        className: "MarketoObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            } })
    }
};
const PaypalObjectDataset = {
    serializedName: "PaypalObject",
    type: {
        name: "Composite",
        className: "PaypalObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            } })
    }
};
const PhoenixObjectDataset = {
    serializedName: "PhoenixObject",
    type: {
        name: "Composite",
        className: "PhoenixObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any"
                }
            }, schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any"
                }
            } })
    }
};
const PrestoObjectDataset = {
    serializedName: "PrestoObject",
    type: {
        name: "Composite",
        className: "PrestoObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any"
                }
            }, schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any"
                }
            } })
    }
};
const QuickBooksObjectDataset = {
    serializedName: "QuickBooksObject",
    type: {
        name: "Composite",
        className: "QuickBooksObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            } })
    }
};
const ServiceNowObjectDataset = {
    serializedName: "ServiceNowObject",
    type: {
        name: "Composite",
        className: "ServiceNowObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            } })
    }
};
const ShopifyObjectDataset = {
    serializedName: "ShopifyObject",
    type: {
        name: "Composite",
        className: "ShopifyObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            } })
    }
};
const SparkObjectDataset = {
    serializedName: "SparkObject",
    type: {
        name: "Composite",
        className: "SparkObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any"
                }
            }, schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any"
                }
            } })
    }
};
const SquareObjectDataset = {
    serializedName: "SquareObject",
    type: {
        name: "Composite",
        className: "SquareObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            } })
    }
};
const XeroObjectDataset = {
    serializedName: "XeroObject",
    type: {
        name: "Composite",
        className: "XeroObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            } })
    }
};
const ZohoObjectDataset = {
    serializedName: "ZohoObject",
    type: {
        name: "Composite",
        className: "ZohoObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            } })
    }
};
const NetezzaTableDataset = {
    serializedName: "NetezzaTable",
    type: {
        name: "Composite",
        className: "NetezzaTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any"
                }
            }, schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any"
                }
            } })
    }
};
const VerticaTableDataset = {
    serializedName: "VerticaTable",
    type: {
        name: "Composite",
        className: "VerticaTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any"
                }
            }, schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any"
                }
            } })
    }
};
const SalesforceMarketingCloudObjectDataset = {
    serializedName: "SalesforceMarketingCloudObject",
    type: {
        name: "Composite",
        className: "SalesforceMarketingCloudObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            } })
    }
};
const ResponsysObjectDataset = {
    serializedName: "ResponsysObject",
    type: {
        name: "Composite",
        className: "ResponsysObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            } })
    }
};
const DynamicsAXResourceDataset = {
    serializedName: "DynamicsAXResource",
    type: {
        name: "Composite",
        className: "DynamicsAXResourceDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { path: {
                serializedName: "typeProperties.path",
                required: true,
                type: {
                    name: "any"
                }
            } })
    }
};
const OracleServiceCloudObjectDataset = {
    serializedName: "OracleServiceCloudObject",
    type: {
        name: "Composite",
        className: "OracleServiceCloudObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            } })
    }
};
const AzureDataExplorerTableDataset = {
    serializedName: "AzureDataExplorerTable",
    type: {
        name: "Composite",
        className: "AzureDataExplorerTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any"
                }
            } })
    }
};
const GoogleAdWordsObjectDataset = {
    serializedName: "GoogleAdWordsObject",
    type: {
        name: "Composite",
        className: "GoogleAdWordsObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            } })
    }
};
const SnowflakeDataset = {
    serializedName: "SnowflakeTable",
    type: {
        name: "Composite",
        className: "SnowflakeDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any"
                }
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any"
                }
            } })
    }
};
const SharePointOnlineListResourceDataset = {
    serializedName: "SharePointOnlineListResource",
    type: {
        name: "Composite",
        className: "SharePointOnlineListResourceDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { listName: {
                serializedName: "typeProperties.listName",
                type: {
                    name: "any"
                }
            } })
    }
};
const AzureDatabricksDeltaLakeDataset = {
    serializedName: "AzureDatabricksDeltaLakeDataset",
    type: {
        name: "Composite",
        className: "AzureDatabricksDeltaLakeDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any"
                }
            }, database: {
                serializedName: "typeProperties.database",
                type: {
                    name: "any"
                }
            } })
    }
};
const LakeHouseTableDataset = {
    serializedName: "LakeHouseTable",
    type: {
        name: "Composite",
        className: "LakeHouseTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any"
                }
            } })
    }
};
const ControlActivity = {
    serializedName: "Container",
    type: {
        name: "Composite",
        className: "ControlActivity",
        uberParent: "Activity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: Object.assign({}, Activity.type.modelProperties)
    }
};
const ExecutionActivity = {
    serializedName: "Execution",
    type: {
        name: "Composite",
        className: "ExecutionActivity",
        uberParent: "Activity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: Object.assign(Object.assign({}, Activity.type.modelProperties), { linkedServiceName: {
                serializedName: "linkedServiceName",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            }, policy: {
                serializedName: "policy",
                type: {
                    name: "Composite",
                    className: "ActivityPolicy"
                }
            } })
    }
};
const ExecuteWranglingDataflowActivity = {
    serializedName: "ExecuteWranglingDataflow",
    type: {
        name: "Composite",
        className: "ExecuteWranglingDataflowActivity",
        uberParent: "Activity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Activity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Activity.type.modelProperties), { policy: {
                serializedName: "policy",
                type: {
                    name: "Composite",
                    className: "ActivityPolicy"
                }
            }, dataFlow: {
                serializedName: "typeProperties.dataFlow",
                type: {
                    name: "Composite",
                    className: "DataFlowReference"
                }
            }, staging: {
                serializedName: "typeProperties.staging",
                type: {
                    name: "Composite",
                    className: "DataFlowStagingInfo"
                }
            }, integrationRuntime: {
                serializedName: "typeProperties.integrationRuntime",
                type: {
                    name: "Composite",
                    className: "IntegrationRuntimeReference"
                }
            }, compute: {
                serializedName: "typeProperties.compute",
                type: {
                    name: "Composite",
                    className: "ExecuteDataFlowActivityTypePropertiesCompute"
                }
            }, traceLevel: {
                serializedName: "typeProperties.traceLevel",
                type: {
                    name: "any"
                }
            }, continueOnError: {
                serializedName: "typeProperties.continueOnError",
                type: {
                    name: "any"
                }
            }, runConcurrently: {
                serializedName: "typeProperties.runConcurrently",
                type: {
                    name: "any"
                }
            }, sourceStagingConcurrency: {
                serializedName: "typeProperties.sourceStagingConcurrency",
                type: {
                    name: "any"
                }
            }, sinks: {
                serializedName: "typeProperties.sinks",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "Composite", className: "PowerQuerySink" } }
                }
            }, queries: {
                serializedName: "typeProperties.queries",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PowerQuerySinkMapping"
                        }
                    }
                }
            } })
    }
};
const MultiplePipelineTrigger = {
    serializedName: "MultiplePipelineTrigger",
    type: {
        name: "Composite",
        className: "MultiplePipelineTrigger",
        uberParent: "Trigger",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: Object.assign(Object.assign({}, Trigger.type.modelProperties), { pipelines: {
                serializedName: "pipelines",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TriggerPipelineReference"
                        }
                    }
                }
            } })
    }
};
const TumblingWindowTrigger = {
    serializedName: "TumblingWindowTrigger",
    type: {
        name: "Composite",
        className: "TumblingWindowTrigger",
        uberParent: "Trigger",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Trigger.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Trigger.type.modelProperties), { pipeline: {
                serializedName: "pipeline",
                type: {
                    name: "Composite",
                    className: "TriggerPipelineReference"
                }
            }, frequency: {
                serializedName: "typeProperties.frequency",
                required: true,
                type: {
                    name: "String"
                }
            }, interval: {
                serializedName: "typeProperties.interval",
                required: true,
                type: {
                    name: "Number"
                }
            }, startTime: {
                serializedName: "typeProperties.startTime",
                required: true,
                type: {
                    name: "DateTime"
                }
            }, endTime: {
                serializedName: "typeProperties.endTime",
                type: {
                    name: "DateTime"
                }
            }, delay: {
                serializedName: "typeProperties.delay",
                type: {
                    name: "any"
                }
            }, maxConcurrency: {
                constraints: {
                    InclusiveMaximum: 50,
                    InclusiveMinimum: 1
                },
                serializedName: "typeProperties.maxConcurrency",
                required: true,
                type: {
                    name: "Number"
                }
            }, retryPolicy: {
                serializedName: "typeProperties.retryPolicy",
                type: {
                    name: "Composite",
                    className: "RetryPolicy"
                }
            }, dependsOn: {
                serializedName: "typeProperties.dependsOn",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DependencyReference"
                        }
                    }
                }
            } })
    }
};
const RerunTumblingWindowTrigger = {
    serializedName: "RerunTumblingWindowTrigger",
    type: {
        name: "Composite",
        className: "RerunTumblingWindowTrigger",
        uberParent: "Trigger",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Trigger.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Trigger.type.modelProperties), { parentTrigger: {
                serializedName: "typeProperties.parentTrigger",
                required: true,
                type: {
                    name: "any"
                }
            }, requestedStartTime: {
                serializedName: "typeProperties.requestedStartTime",
                required: true,
                type: {
                    name: "DateTime"
                }
            }, requestedEndTime: {
                serializedName: "typeProperties.requestedEndTime",
                required: true,
                type: {
                    name: "DateTime"
                }
            }, rerunConcurrency: {
                constraints: {
                    InclusiveMaximum: 50,
                    InclusiveMinimum: 1
                },
                serializedName: "typeProperties.rerunConcurrency",
                required: true,
                type: {
                    name: "Number"
                }
            } })
    }
};
const ChainingTrigger = {
    serializedName: "ChainingTrigger",
    type: {
        name: "Composite",
        className: "ChainingTrigger",
        uberParent: "Trigger",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Trigger.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Trigger.type.modelProperties), { pipeline: {
                serializedName: "pipeline",
                type: {
                    name: "Composite",
                    className: "TriggerPipelineReference"
                }
            }, dependsOn: {
                serializedName: "typeProperties.dependsOn",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PipelineReference"
                        }
                    }
                }
            }, runDimension: {
                serializedName: "typeProperties.runDimension",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const MappingDataFlow = {
    serializedName: "MappingDataFlow",
    type: {
        name: "Composite",
        className: "MappingDataFlow",
        uberParent: "DataFlow",
        polymorphicDiscriminator: DataFlow.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DataFlow.type.modelProperties), { sources: {
                serializedName: "typeProperties.sources",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DataFlowSource"
                        }
                    }
                }
            }, sinks: {
                serializedName: "typeProperties.sinks",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DataFlowSink"
                        }
                    }
                }
            }, transformations: {
                serializedName: "typeProperties.transformations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Transformation"
                        }
                    }
                }
            }, script: {
                serializedName: "typeProperties.script",
                type: {
                    name: "String"
                }
            }, scriptLines: {
                serializedName: "typeProperties.scriptLines",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            } })
    }
};
const Flowlet = {
    serializedName: "Flowlet",
    type: {
        name: "Composite",
        className: "Flowlet",
        uberParent: "DataFlow",
        polymorphicDiscriminator: DataFlow.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DataFlow.type.modelProperties), { sources: {
                serializedName: "typeProperties.sources",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DataFlowSource"
                        }
                    }
                }
            }, sinks: {
                serializedName: "typeProperties.sinks",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DataFlowSink"
                        }
                    }
                }
            }, transformations: {
                serializedName: "typeProperties.transformations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Transformation"
                        }
                    }
                }
            }, script: {
                serializedName: "typeProperties.script",
                type: {
                    name: "String"
                }
            }, scriptLines: {
                serializedName: "typeProperties.scriptLines",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            } })
    }
};
const WranglingDataFlow = {
    serializedName: "WranglingDataFlow",
    type: {
        name: "Composite",
        className: "WranglingDataFlow",
        uberParent: "DataFlow",
        polymorphicDiscriminator: DataFlow.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DataFlow.type.modelProperties), { sources: {
                serializedName: "typeProperties.sources",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PowerQuerySource"
                        }
                    }
                }
            }, script: {
                serializedName: "typeProperties.script",
                type: {
                    name: "String"
                }
            }, documentLocale: {
                serializedName: "typeProperties.documentLocale",
                type: {
                    name: "String"
                }
            } })
    }
};
const IntegrationRuntimeDebugResource = {
    type: {
        name: "Composite",
        className: "IntegrationRuntimeDebugResource",
        modelProperties: Object.assign(Object.assign({}, SubResourceDebugResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "IntegrationRuntime"
                }
            } })
    }
};
const DataFlowDebugResource = {
    type: {
        name: "Composite",
        className: "DataFlowDebugResource",
        modelProperties: Object.assign(Object.assign({}, SubResourceDebugResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "DataFlow"
                }
            } })
    }
};
const DatasetDebugResource = {
    type: {
        name: "Composite",
        className: "DatasetDebugResource",
        modelProperties: Object.assign(Object.assign({}, SubResourceDebugResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "Dataset"
                }
            } })
    }
};
const LinkedServiceDebugResource = {
    type: {
        name: "Composite",
        className: "LinkedServiceDebugResource",
        modelProperties: Object.assign(Object.assign({}, SubResourceDebugResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "LinkedService"
                }
            } })
    }
};
const ManagedIdentityCredential = {
    serializedName: "ManagedIdentity",
    type: {
        name: "Composite",
        className: "ManagedIdentityCredential",
        uberParent: "Credential",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Credential.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Credential.type.modelProperties), { resourceId: {
                serializedName: "typeProperties.resourceId",
                type: {
                    name: "String"
                }
            } })
    }
};
const ServicePrincipalCredential = {
    serializedName: "ServicePrincipal",
    type: {
        name: "Composite",
        className: "ServicePrincipalCredential",
        uberParent: "Credential",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Credential.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Credential.type.modelProperties), { servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                type: {
                    name: "any"
                }
            }, servicePrincipalKey: {
                serializedName: "typeProperties.servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, tenant: {
                serializedName: "typeProperties.tenant",
                type: {
                    name: "any"
                }
            } })
    }
};
const SecureString = {
    serializedName: "SecureString",
    type: {
        name: "Composite",
        className: "SecureString",
        uberParent: "SecretBase",
        polymorphicDiscriminator: SecretBase.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, SecretBase.type.modelProperties), { value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const AzureKeyVaultSecretReference = {
    serializedName: "AzureKeyVaultSecret",
    type: {
        name: "Composite",
        className: "AzureKeyVaultSecretReference",
        uberParent: "SecretBase",
        polymorphicDiscriminator: SecretBase.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, SecretBase.type.modelProperties), { store: {
                serializedName: "store",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            }, secretName: {
                serializedName: "secretName",
                required: true,
                type: {
                    name: "any"
                }
            }, secretVersion: {
                serializedName: "secretVersion",
                type: {
                    name: "any"
                }
            } })
    }
};
const DataFlowSource = {
    type: {
        name: "Composite",
        className: "DataFlowSource",
        modelProperties: Object.assign(Object.assign({}, Transformation.type.modelProperties), { schemaLinkedService: {
                serializedName: "schemaLinkedService",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            } })
    }
};
const DataFlowSink = {
    type: {
        name: "Composite",
        className: "DataFlowSink",
        modelProperties: Object.assign(Object.assign({}, Transformation.type.modelProperties), { schemaLinkedService: {
                serializedName: "schemaLinkedService",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            }, rejectedDataLinkedService: {
                serializedName: "rejectedDataLinkedService",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            } })
    }
};
const AzureBlobStorageLocation = {
    serializedName: "AzureBlobStorageLocation",
    type: {
        name: "Composite",
        className: "AzureBlobStorageLocation",
        uberParent: "DatasetLocation",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: DatasetLocation.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DatasetLocation.type.modelProperties), { container: {
                serializedName: "container",
                type: {
                    name: "any"
                }
            } })
    }
};
const AzureBlobFSLocation = {
    serializedName: "AzureBlobFSLocation",
    type: {
        name: "Composite",
        className: "AzureBlobFSLocation",
        uberParent: "DatasetLocation",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: DatasetLocation.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DatasetLocation.type.modelProperties), { fileSystem: {
                serializedName: "fileSystem",
                type: {
                    name: "any"
                }
            } })
    }
};
const AzureDataLakeStoreLocation = {
    serializedName: "AzureDataLakeStoreLocation",
    type: {
        name: "Composite",
        className: "AzureDataLakeStoreLocation",
        uberParent: "DatasetLocation",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: DatasetLocation.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, DatasetLocation.type.modelProperties)
    }
};
const AmazonS3Location = {
    serializedName: "AmazonS3Location",
    type: {
        name: "Composite",
        className: "AmazonS3Location",
        uberParent: "DatasetLocation",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: DatasetLocation.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DatasetLocation.type.modelProperties), { bucketName: {
                serializedName: "bucketName",
                type: {
                    name: "any"
                }
            }, version: {
                serializedName: "version",
                type: {
                    name: "any"
                }
            } })
    }
};
const FileServerLocation = {
    serializedName: "FileServerLocation",
    type: {
        name: "Composite",
        className: "FileServerLocation",
        uberParent: "DatasetLocation",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: DatasetLocation.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, DatasetLocation.type.modelProperties)
    }
};
const AzureFileStorageLocation = {
    serializedName: "AzureFileStorageLocation",
    type: {
        name: "Composite",
        className: "AzureFileStorageLocation",
        uberParent: "DatasetLocation",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: DatasetLocation.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, DatasetLocation.type.modelProperties)
    }
};
const AmazonS3CompatibleLocation = {
    serializedName: "AmazonS3CompatibleLocation",
    type: {
        name: "Composite",
        className: "AmazonS3CompatibleLocation",
        uberParent: "DatasetLocation",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: DatasetLocation.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DatasetLocation.type.modelProperties), { bucketName: {
                serializedName: "bucketName",
                type: {
                    name: "any"
                }
            }, version: {
                serializedName: "version",
                type: {
                    name: "any"
                }
            } })
    }
};
const OracleCloudStorageLocation = {
    serializedName: "OracleCloudStorageLocation",
    type: {
        name: "Composite",
        className: "OracleCloudStorageLocation",
        uberParent: "DatasetLocation",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: DatasetLocation.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DatasetLocation.type.modelProperties), { bucketName: {
                serializedName: "bucketName",
                type: {
                    name: "any"
                }
            }, version: {
                serializedName: "version",
                type: {
                    name: "any"
                }
            } })
    }
};
const GoogleCloudStorageLocation = {
    serializedName: "GoogleCloudStorageLocation",
    type: {
        name: "Composite",
        className: "GoogleCloudStorageLocation",
        uberParent: "DatasetLocation",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: DatasetLocation.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DatasetLocation.type.modelProperties), { bucketName: {
                serializedName: "bucketName",
                type: {
                    name: "any"
                }
            }, version: {
                serializedName: "version",
                type: {
                    name: "any"
                }
            } })
    }
};
const FtpServerLocation = {
    serializedName: "FtpServerLocation",
    type: {
        name: "Composite",
        className: "FtpServerLocation",
        uberParent: "DatasetLocation",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: DatasetLocation.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, DatasetLocation.type.modelProperties)
    }
};
const SftpLocation = {
    serializedName: "SftpLocation",
    type: {
        name: "Composite",
        className: "SftpLocation",
        uberParent: "DatasetLocation",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: DatasetLocation.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, DatasetLocation.type.modelProperties)
    }
};
const HttpServerLocation = {
    serializedName: "HttpServerLocation",
    type: {
        name: "Composite",
        className: "HttpServerLocation",
        uberParent: "DatasetLocation",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: DatasetLocation.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DatasetLocation.type.modelProperties), { relativeUrl: {
                serializedName: "relativeUrl",
                type: {
                    name: "any"
                }
            } })
    }
};
const HdfsLocation = {
    serializedName: "HdfsLocation",
    type: {
        name: "Composite",
        className: "HdfsLocation",
        uberParent: "DatasetLocation",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: DatasetLocation.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, DatasetLocation.type.modelProperties)
    }
};
const LakeHouseLocation = {
    serializedName: "LakeHouseLocation",
    type: {
        name: "Composite",
        className: "LakeHouseLocation",
        uberParent: "DatasetLocation",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: DatasetLocation.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, DatasetLocation.type.modelProperties)
    }
};
const TextFormat = {
    serializedName: "TextFormat",
    type: {
        name: "Composite",
        className: "TextFormat",
        uberParent: "DatasetStorageFormat",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: DatasetStorageFormat.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DatasetStorageFormat.type.modelProperties), { columnDelimiter: {
                serializedName: "columnDelimiter",
                type: {
                    name: "any"
                }
            }, rowDelimiter: {
                serializedName: "rowDelimiter",
                type: {
                    name: "any"
                }
            }, escapeChar: {
                serializedName: "escapeChar",
                type: {
                    name: "any"
                }
            }, quoteChar: {
                serializedName: "quoteChar",
                type: {
                    name: "any"
                }
            }, nullValue: {
                serializedName: "nullValue",
                type: {
                    name: "any"
                }
            }, encodingName: {
                serializedName: "encodingName",
                type: {
                    name: "any"
                }
            }, treatEmptyAsNull: {
                serializedName: "treatEmptyAsNull",
                type: {
                    name: "any"
                }
            }, skipLineCount: {
                serializedName: "skipLineCount",
                type: {
                    name: "any"
                }
            }, firstRowAsHeader: {
                serializedName: "firstRowAsHeader",
                type: {
                    name: "any"
                }
            } })
    }
};
const JsonFormat = {
    serializedName: "JsonFormat",
    type: {
        name: "Composite",
        className: "JsonFormat",
        uberParent: "DatasetStorageFormat",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: DatasetStorageFormat.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DatasetStorageFormat.type.modelProperties), { filePattern: {
                serializedName: "filePattern",
                type: {
                    name: "any"
                }
            }, nestingSeparator: {
                serializedName: "nestingSeparator",
                type: {
                    name: "any"
                }
            }, encodingName: {
                serializedName: "encodingName",
                type: {
                    name: "any"
                }
            }, jsonNodeReference: {
                serializedName: "jsonNodeReference",
                type: {
                    name: "any"
                }
            }, jsonPathDefinition: {
                serializedName: "jsonPathDefinition",
                type: {
                    name: "any"
                }
            } })
    }
};
const AvroFormat = {
    serializedName: "AvroFormat",
    type: {
        name: "Composite",
        className: "AvroFormat",
        uberParent: "DatasetStorageFormat",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: DatasetStorageFormat.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, DatasetStorageFormat.type.modelProperties)
    }
};
const OrcFormat = {
    serializedName: "OrcFormat",
    type: {
        name: "Composite",
        className: "OrcFormat",
        uberParent: "DatasetStorageFormat",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: DatasetStorageFormat.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, DatasetStorageFormat.type.modelProperties)
    }
};
const ParquetFormat = {
    serializedName: "ParquetFormat",
    type: {
        name: "Composite",
        className: "ParquetFormat",
        uberParent: "DatasetStorageFormat",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: DatasetStorageFormat.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, DatasetStorageFormat.type.modelProperties)
    }
};
const CmdkeySetup = {
    serializedName: "CmdkeySetup",
    type: {
        name: "Composite",
        className: "CmdkeySetup",
        uberParent: "CustomSetupBase",
        polymorphicDiscriminator: CustomSetupBase.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CustomSetupBase.type.modelProperties), { targetName: {
                serializedName: "typeProperties.targetName",
                required: true,
                type: {
                    name: "any"
                }
            }, userName: {
                serializedName: "typeProperties.userName",
                required: true,
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            } })
    }
};
const EnvironmentVariableSetup = {
    serializedName: "EnvironmentVariableSetup",
    type: {
        name: "Composite",
        className: "EnvironmentVariableSetup",
        uberParent: "CustomSetupBase",
        polymorphicDiscriminator: CustomSetupBase.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CustomSetupBase.type.modelProperties), { variableName: {
                serializedName: "typeProperties.variableName",
                required: true,
                type: {
                    name: "String"
                }
            }, variableValue: {
                serializedName: "typeProperties.variableValue",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const ComponentSetup = {
    serializedName: "ComponentSetup",
    type: {
        name: "Composite",
        className: "ComponentSetup",
        uberParent: "CustomSetupBase",
        polymorphicDiscriminator: CustomSetupBase.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CustomSetupBase.type.modelProperties), { componentName: {
                serializedName: "typeProperties.componentName",
                required: true,
                type: {
                    name: "String"
                }
            }, licenseKey: {
                serializedName: "typeProperties.licenseKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            } })
    }
};
const AzPowerShellSetup = {
    serializedName: "AzPowerShellSetup",
    type: {
        name: "Composite",
        className: "AzPowerShellSetup",
        uberParent: "CustomSetupBase",
        polymorphicDiscriminator: CustomSetupBase.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CustomSetupBase.type.modelProperties), { version: {
                serializedName: "typeProperties.version",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const LinkedIntegrationRuntimeKeyAuthorization = {
    serializedName: "Key",
    type: {
        name: "Composite",
        className: "LinkedIntegrationRuntimeKeyAuthorization",
        uberParent: "LinkedIntegrationRuntimeType",
        polymorphicDiscriminator: LinkedIntegrationRuntimeType.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedIntegrationRuntimeType.type.modelProperties), { key: {
                serializedName: "key",
                type: {
                    name: "Composite",
                    className: "SecureString"
                }
            } })
    }
};
const LinkedIntegrationRuntimeRbacAuthorization = {
    serializedName: "RBAC",
    type: {
        name: "Composite",
        className: "LinkedIntegrationRuntimeRbacAuthorization",
        uberParent: "LinkedIntegrationRuntimeType",
        polymorphicDiscriminator: LinkedIntegrationRuntimeType.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedIntegrationRuntimeType.type.modelProperties), { resourceId: {
                serializedName: "resourceId",
                required: true,
                type: {
                    name: "String"
                }
            }, credential: {
                serializedName: "credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference"
                }
            } })
    }
};
const WebAnonymousAuthentication = {
    serializedName: "Anonymous",
    type: {
        name: "Composite",
        className: "WebAnonymousAuthentication",
        uberParent: "WebLinkedServiceTypeProperties",
        polymorphicDiscriminator: WebLinkedServiceTypeProperties.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, WebLinkedServiceTypeProperties.type.modelProperties)
    }
};
const WebBasicAuthentication = {
    serializedName: "Basic",
    type: {
        name: "Composite",
        className: "WebBasicAuthentication",
        uberParent: "WebLinkedServiceTypeProperties",
        polymorphicDiscriminator: WebLinkedServiceTypeProperties.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, WebLinkedServiceTypeProperties.type.modelProperties), { username: {
                serializedName: "username",
                required: true,
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            } })
    }
};
const WebClientCertificateAuthentication = {
    serializedName: "ClientCertificate",
    type: {
        name: "Composite",
        className: "WebClientCertificateAuthentication",
        uberParent: "WebLinkedServiceTypeProperties",
        polymorphicDiscriminator: WebLinkedServiceTypeProperties.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, WebLinkedServiceTypeProperties.type.modelProperties), { pfx: {
                serializedName: "pfx",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, password: {
                serializedName: "password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            } })
    }
};
const AzureBlobStorageReadSettings = {
    serializedName: "AzureBlobStorageReadSettings",
    type: {
        name: "Composite",
        className: "AzureBlobStorageReadSettings",
        uberParent: "StoreReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: StoreReadSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, StoreReadSettings.type.modelProperties), { recursive: {
                serializedName: "recursive",
                type: {
                    name: "any"
                }
            }, wildcardFolderPath: {
                serializedName: "wildcardFolderPath",
                type: {
                    name: "any"
                }
            }, wildcardFileName: {
                serializedName: "wildcardFileName",
                type: {
                    name: "any"
                }
            }, prefix: {
                serializedName: "prefix",
                type: {
                    name: "any"
                }
            }, fileListPath: {
                serializedName: "fileListPath",
                type: {
                    name: "any"
                }
            }, enablePartitionDiscovery: {
                serializedName: "enablePartitionDiscovery",
                type: {
                    name: "any"
                }
            }, partitionRootPath: {
                serializedName: "partitionRootPath",
                type: {
                    name: "any"
                }
            }, deleteFilesAfterCompletion: {
                serializedName: "deleteFilesAfterCompletion",
                type: {
                    name: "any"
                }
            }, modifiedDatetimeStart: {
                serializedName: "modifiedDatetimeStart",
                type: {
                    name: "any"
                }
            }, modifiedDatetimeEnd: {
                serializedName: "modifiedDatetimeEnd",
                type: {
                    name: "any"
                }
            } })
    }
};
const AzureBlobFSReadSettings = {
    serializedName: "AzureBlobFSReadSettings",
    type: {
        name: "Composite",
        className: "AzureBlobFSReadSettings",
        uberParent: "StoreReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: StoreReadSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, StoreReadSettings.type.modelProperties), { recursive: {
                serializedName: "recursive",
                type: {
                    name: "any"
                }
            }, wildcardFolderPath: {
                serializedName: "wildcardFolderPath",
                type: {
                    name: "any"
                }
            }, wildcardFileName: {
                serializedName: "wildcardFileName",
                type: {
                    name: "any"
                }
            }, fileListPath: {
                serializedName: "fileListPath",
                type: {
                    name: "any"
                }
            }, enablePartitionDiscovery: {
                serializedName: "enablePartitionDiscovery",
                type: {
                    name: "any"
                }
            }, partitionRootPath: {
                serializedName: "partitionRootPath",
                type: {
                    name: "any"
                }
            }, deleteFilesAfterCompletion: {
                serializedName: "deleteFilesAfterCompletion",
                type: {
                    name: "any"
                }
            }, modifiedDatetimeStart: {
                serializedName: "modifiedDatetimeStart",
                type: {
                    name: "any"
                }
            }, modifiedDatetimeEnd: {
                serializedName: "modifiedDatetimeEnd",
                type: {
                    name: "any"
                }
            } })
    }
};
const AzureDataLakeStoreReadSettings = {
    serializedName: "AzureDataLakeStoreReadSettings",
    type: {
        name: "Composite",
        className: "AzureDataLakeStoreReadSettings",
        uberParent: "StoreReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: StoreReadSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, StoreReadSettings.type.modelProperties), { recursive: {
                serializedName: "recursive",
                type: {
                    name: "any"
                }
            }, wildcardFolderPath: {
                serializedName: "wildcardFolderPath",
                type: {
                    name: "any"
                }
            }, wildcardFileName: {
                serializedName: "wildcardFileName",
                type: {
                    name: "any"
                }
            }, fileListPath: {
                serializedName: "fileListPath",
                type: {
                    name: "any"
                }
            }, listAfter: {
                serializedName: "listAfter",
                type: {
                    name: "any"
                }
            }, listBefore: {
                serializedName: "listBefore",
                type: {
                    name: "any"
                }
            }, enablePartitionDiscovery: {
                serializedName: "enablePartitionDiscovery",
                type: {
                    name: "any"
                }
            }, partitionRootPath: {
                serializedName: "partitionRootPath",
                type: {
                    name: "any"
                }
            }, deleteFilesAfterCompletion: {
                serializedName: "deleteFilesAfterCompletion",
                type: {
                    name: "any"
                }
            }, modifiedDatetimeStart: {
                serializedName: "modifiedDatetimeStart",
                type: {
                    name: "any"
                }
            }, modifiedDatetimeEnd: {
                serializedName: "modifiedDatetimeEnd",
                type: {
                    name: "any"
                }
            } })
    }
};
const AmazonS3ReadSettings = {
    serializedName: "AmazonS3ReadSettings",
    type: {
        name: "Composite",
        className: "AmazonS3ReadSettings",
        uberParent: "StoreReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: StoreReadSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, StoreReadSettings.type.modelProperties), { recursive: {
                serializedName: "recursive",
                type: {
                    name: "any"
                }
            }, wildcardFolderPath: {
                serializedName: "wildcardFolderPath",
                type: {
                    name: "any"
                }
            }, wildcardFileName: {
                serializedName: "wildcardFileName",
                type: {
                    name: "any"
                }
            }, prefix: {
                serializedName: "prefix",
                type: {
                    name: "any"
                }
            }, fileListPath: {
                serializedName: "fileListPath",
                type: {
                    name: "any"
                }
            }, enablePartitionDiscovery: {
                serializedName: "enablePartitionDiscovery",
                type: {
                    name: "any"
                }
            }, partitionRootPath: {
                serializedName: "partitionRootPath",
                type: {
                    name: "any"
                }
            }, deleteFilesAfterCompletion: {
                serializedName: "deleteFilesAfterCompletion",
                type: {
                    name: "any"
                }
            }, modifiedDatetimeStart: {
                serializedName: "modifiedDatetimeStart",
                type: {
                    name: "any"
                }
            }, modifiedDatetimeEnd: {
                serializedName: "modifiedDatetimeEnd",
                type: {
                    name: "any"
                }
            } })
    }
};
const FileServerReadSettings = {
    serializedName: "FileServerReadSettings",
    type: {
        name: "Composite",
        className: "FileServerReadSettings",
        uberParent: "StoreReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: StoreReadSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, StoreReadSettings.type.modelProperties), { recursive: {
                serializedName: "recursive",
                type: {
                    name: "any"
                }
            }, wildcardFolderPath: {
                serializedName: "wildcardFolderPath",
                type: {
                    name: "any"
                }
            }, wildcardFileName: {
                serializedName: "wildcardFileName",
                type: {
                    name: "any"
                }
            }, fileListPath: {
                serializedName: "fileListPath",
                type: {
                    name: "any"
                }
            }, enablePartitionDiscovery: {
                serializedName: "enablePartitionDiscovery",
                type: {
                    name: "any"
                }
            }, partitionRootPath: {
                serializedName: "partitionRootPath",
                type: {
                    name: "any"
                }
            }, deleteFilesAfterCompletion: {
                serializedName: "deleteFilesAfterCompletion",
                type: {
                    name: "any"
                }
            }, modifiedDatetimeStart: {
                serializedName: "modifiedDatetimeStart",
                type: {
                    name: "any"
                }
            }, modifiedDatetimeEnd: {
                serializedName: "modifiedDatetimeEnd",
                type: {
                    name: "any"
                }
            }, fileFilter: {
                serializedName: "fileFilter",
                type: {
                    name: "any"
                }
            } })
    }
};
const AzureFileStorageReadSettings = {
    serializedName: "AzureFileStorageReadSettings",
    type: {
        name: "Composite",
        className: "AzureFileStorageReadSettings",
        uberParent: "StoreReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: StoreReadSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, StoreReadSettings.type.modelProperties), { recursive: {
                serializedName: "recursive",
                type: {
                    name: "any"
                }
            }, wildcardFolderPath: {
                serializedName: "wildcardFolderPath",
                type: {
                    name: "any"
                }
            }, wildcardFileName: {
                serializedName: "wildcardFileName",
                type: {
                    name: "any"
                }
            }, prefix: {
                serializedName: "prefix",
                type: {
                    name: "any"
                }
            }, fileListPath: {
                serializedName: "fileListPath",
                type: {
                    name: "any"
                }
            }, enablePartitionDiscovery: {
                serializedName: "enablePartitionDiscovery",
                type: {
                    name: "any"
                }
            }, partitionRootPath: {
                serializedName: "partitionRootPath",
                type: {
                    name: "any"
                }
            }, deleteFilesAfterCompletion: {
                serializedName: "deleteFilesAfterCompletion",
                type: {
                    name: "any"
                }
            }, modifiedDatetimeStart: {
                serializedName: "modifiedDatetimeStart",
                type: {
                    name: "any"
                }
            }, modifiedDatetimeEnd: {
                serializedName: "modifiedDatetimeEnd",
                type: {
                    name: "any"
                }
            } })
    }
};
const AmazonS3CompatibleReadSettings = {
    serializedName: "AmazonS3CompatibleReadSettings",
    type: {
        name: "Composite",
        className: "AmazonS3CompatibleReadSettings",
        uberParent: "StoreReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: StoreReadSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, StoreReadSettings.type.modelProperties), { recursive: {
                serializedName: "recursive",
                type: {
                    name: "any"
                }
            }, wildcardFolderPath: {
                serializedName: "wildcardFolderPath",
                type: {
                    name: "any"
                }
            }, wildcardFileName: {
                serializedName: "wildcardFileName",
                type: {
                    name: "any"
                }
            }, prefix: {
                serializedName: "prefix",
                type: {
                    name: "any"
                }
            }, fileListPath: {
                serializedName: "fileListPath",
                type: {
                    name: "any"
                }
            }, enablePartitionDiscovery: {
                serializedName: "enablePartitionDiscovery",
                type: {
                    name: "any"
                }
            }, partitionRootPath: {
                serializedName: "partitionRootPath",
                type: {
                    name: "any"
                }
            }, deleteFilesAfterCompletion: {
                serializedName: "deleteFilesAfterCompletion",
                type: {
                    name: "any"
                }
            }, modifiedDatetimeStart: {
                serializedName: "modifiedDatetimeStart",
                type: {
                    name: "any"
                }
            }, modifiedDatetimeEnd: {
                serializedName: "modifiedDatetimeEnd",
                type: {
                    name: "any"
                }
            } })
    }
};
const OracleCloudStorageReadSettings = {
    serializedName: "OracleCloudStorageReadSettings",
    type: {
        name: "Composite",
        className: "OracleCloudStorageReadSettings",
        uberParent: "StoreReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: StoreReadSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, StoreReadSettings.type.modelProperties), { recursive: {
                serializedName: "recursive",
                type: {
                    name: "any"
                }
            }, wildcardFolderPath: {
                serializedName: "wildcardFolderPath",
                type: {
                    name: "any"
                }
            }, wildcardFileName: {
                serializedName: "wildcardFileName",
                type: {
                    name: "any"
                }
            }, prefix: {
                serializedName: "prefix",
                type: {
                    name: "any"
                }
            }, fileListPath: {
                serializedName: "fileListPath",
                type: {
                    name: "any"
                }
            }, enablePartitionDiscovery: {
                serializedName: "enablePartitionDiscovery",
                type: {
                    name: "any"
                }
            }, partitionRootPath: {
                serializedName: "partitionRootPath",
                type: {
                    name: "any"
                }
            }, deleteFilesAfterCompletion: {
                serializedName: "deleteFilesAfterCompletion",
                type: {
                    name: "any"
                }
            }, modifiedDatetimeStart: {
                serializedName: "modifiedDatetimeStart",
                type: {
                    name: "any"
                }
            }, modifiedDatetimeEnd: {
                serializedName: "modifiedDatetimeEnd",
                type: {
                    name: "any"
                }
            } })
    }
};
const GoogleCloudStorageReadSettings = {
    serializedName: "GoogleCloudStorageReadSettings",
    type: {
        name: "Composite",
        className: "GoogleCloudStorageReadSettings",
        uberParent: "StoreReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: StoreReadSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, StoreReadSettings.type.modelProperties), { recursive: {
                serializedName: "recursive",
                type: {
                    name: "any"
                }
            }, wildcardFolderPath: {
                serializedName: "wildcardFolderPath",
                type: {
                    name: "any"
                }
            }, wildcardFileName: {
                serializedName: "wildcardFileName",
                type: {
                    name: "any"
                }
            }, prefix: {
                serializedName: "prefix",
                type: {
                    name: "any"
                }
            }, fileListPath: {
                serializedName: "fileListPath",
                type: {
                    name: "any"
                }
            }, enablePartitionDiscovery: {
                serializedName: "enablePartitionDiscovery",
                type: {
                    name: "any"
                }
            }, partitionRootPath: {
                serializedName: "partitionRootPath",
                type: {
                    name: "any"
                }
            }, deleteFilesAfterCompletion: {
                serializedName: "deleteFilesAfterCompletion",
                type: {
                    name: "any"
                }
            }, modifiedDatetimeStart: {
                serializedName: "modifiedDatetimeStart",
                type: {
                    name: "any"
                }
            }, modifiedDatetimeEnd: {
                serializedName: "modifiedDatetimeEnd",
                type: {
                    name: "any"
                }
            } })
    }
};
const FtpReadSettings = {
    serializedName: "FtpReadSettings",
    type: {
        name: "Composite",
        className: "FtpReadSettings",
        uberParent: "StoreReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: StoreReadSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, StoreReadSettings.type.modelProperties), { recursive: {
                serializedName: "recursive",
                type: {
                    name: "any"
                }
            }, wildcardFolderPath: {
                serializedName: "wildcardFolderPath",
                type: {
                    name: "any"
                }
            }, wildcardFileName: {
                serializedName: "wildcardFileName",
                type: {
                    name: "any"
                }
            }, enablePartitionDiscovery: {
                serializedName: "enablePartitionDiscovery",
                type: {
                    name: "any"
                }
            }, partitionRootPath: {
                serializedName: "partitionRootPath",
                type: {
                    name: "any"
                }
            }, deleteFilesAfterCompletion: {
                serializedName: "deleteFilesAfterCompletion",
                type: {
                    name: "any"
                }
            }, fileListPath: {
                serializedName: "fileListPath",
                type: {
                    name: "any"
                }
            }, useBinaryTransfer: {
                serializedName: "useBinaryTransfer",
                type: {
                    name: "any"
                }
            }, disableChunking: {
                serializedName: "disableChunking",
                type: {
                    name: "any"
                }
            } })
    }
};
const SftpReadSettings = {
    serializedName: "SftpReadSettings",
    type: {
        name: "Composite",
        className: "SftpReadSettings",
        uberParent: "StoreReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: StoreReadSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, StoreReadSettings.type.modelProperties), { recursive: {
                serializedName: "recursive",
                type: {
                    name: "any"
                }
            }, wildcardFolderPath: {
                serializedName: "wildcardFolderPath",
                type: {
                    name: "any"
                }
            }, wildcardFileName: {
                serializedName: "wildcardFileName",
                type: {
                    name: "any"
                }
            }, enablePartitionDiscovery: {
                serializedName: "enablePartitionDiscovery",
                type: {
                    name: "any"
                }
            }, partitionRootPath: {
                serializedName: "partitionRootPath",
                type: {
                    name: "any"
                }
            }, fileListPath: {
                serializedName: "fileListPath",
                type: {
                    name: "any"
                }
            }, deleteFilesAfterCompletion: {
                serializedName: "deleteFilesAfterCompletion",
                type: {
                    name: "any"
                }
            }, modifiedDatetimeStart: {
                serializedName: "modifiedDatetimeStart",
                type: {
                    name: "any"
                }
            }, modifiedDatetimeEnd: {
                serializedName: "modifiedDatetimeEnd",
                type: {
                    name: "any"
                }
            }, disableChunking: {
                serializedName: "disableChunking",
                type: {
                    name: "any"
                }
            } })
    }
};
const HttpReadSettings = {
    serializedName: "HttpReadSettings",
    type: {
        name: "Composite",
        className: "HttpReadSettings",
        uberParent: "StoreReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: StoreReadSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, StoreReadSettings.type.modelProperties), { requestMethod: {
                serializedName: "requestMethod",
                type: {
                    name: "any"
                }
            }, requestBody: {
                serializedName: "requestBody",
                type: {
                    name: "any"
                }
            }, additionalHeaders: {
                serializedName: "additionalHeaders",
                type: {
                    name: "any"
                }
            }, requestTimeout: {
                serializedName: "requestTimeout",
                type: {
                    name: "any"
                }
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any"
                }
            } })
    }
};
const HdfsReadSettings = {
    serializedName: "HdfsReadSettings",
    type: {
        name: "Composite",
        className: "HdfsReadSettings",
        uberParent: "StoreReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: StoreReadSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, StoreReadSettings.type.modelProperties), { recursive: {
                serializedName: "recursive",
                type: {
                    name: "any"
                }
            }, wildcardFolderPath: {
                serializedName: "wildcardFolderPath",
                type: {
                    name: "any"
                }
            }, wildcardFileName: {
                serializedName: "wildcardFileName",
                type: {
                    name: "any"
                }
            }, fileListPath: {
                serializedName: "fileListPath",
                type: {
                    name: "any"
                }
            }, enablePartitionDiscovery: {
                serializedName: "enablePartitionDiscovery",
                type: {
                    name: "any"
                }
            }, partitionRootPath: {
                serializedName: "partitionRootPath",
                type: {
                    name: "any"
                }
            }, modifiedDatetimeStart: {
                serializedName: "modifiedDatetimeStart",
                type: {
                    name: "any"
                }
            }, modifiedDatetimeEnd: {
                serializedName: "modifiedDatetimeEnd",
                type: {
                    name: "any"
                }
            }, distcpSettings: {
                serializedName: "distcpSettings",
                type: {
                    name: "Composite",
                    className: "DistcpSettings"
                }
            }, deleteFilesAfterCompletion: {
                serializedName: "deleteFilesAfterCompletion",
                type: {
                    name: "any"
                }
            } })
    }
};
const LakeHouseReadSettings = {
    serializedName: "LakeHouseReadSettings",
    type: {
        name: "Composite",
        className: "LakeHouseReadSettings",
        uberParent: "StoreReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: StoreReadSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, StoreReadSettings.type.modelProperties), { recursive: {
                serializedName: "recursive",
                type: {
                    name: "any"
                }
            }, wildcardFolderPath: {
                serializedName: "wildcardFolderPath",
                type: {
                    name: "any"
                }
            }, wildcardFileName: {
                serializedName: "wildcardFileName",
                type: {
                    name: "any"
                }
            }, fileListPath: {
                serializedName: "fileListPath",
                type: {
                    name: "any"
                }
            }, enablePartitionDiscovery: {
                serializedName: "enablePartitionDiscovery",
                type: {
                    name: "any"
                }
            }, partitionRootPath: {
                serializedName: "partitionRootPath",
                type: {
                    name: "any"
                }
            }, deleteFilesAfterCompletion: {
                serializedName: "deleteFilesAfterCompletion",
                type: {
                    name: "any"
                }
            }, modifiedDatetimeStart: {
                serializedName: "modifiedDatetimeStart",
                type: {
                    name: "any"
                }
            }, modifiedDatetimeEnd: {
                serializedName: "modifiedDatetimeEnd",
                type: {
                    name: "any"
                }
            } })
    }
};
const SftpWriteSettings = {
    serializedName: "SftpWriteSettings",
    type: {
        name: "Composite",
        className: "SftpWriteSettings",
        uberParent: "StoreWriteSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: StoreWriteSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, StoreWriteSettings.type.modelProperties), { operationTimeout: {
                serializedName: "operationTimeout",
                type: {
                    name: "any"
                }
            }, useTempFileRename: {
                serializedName: "useTempFileRename",
                type: {
                    name: "any"
                }
            } })
    }
};
const AzureBlobStorageWriteSettings = {
    serializedName: "AzureBlobStorageWriteSettings",
    type: {
        name: "Composite",
        className: "AzureBlobStorageWriteSettings",
        uberParent: "StoreWriteSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: StoreWriteSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, StoreWriteSettings.type.modelProperties), { blockSizeInMB: {
                serializedName: "blockSizeInMB",
                type: {
                    name: "any"
                }
            } })
    }
};
const AzureBlobFSWriteSettings = {
    serializedName: "AzureBlobFSWriteSettings",
    type: {
        name: "Composite",
        className: "AzureBlobFSWriteSettings",
        uberParent: "StoreWriteSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: StoreWriteSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, StoreWriteSettings.type.modelProperties), { blockSizeInMB: {
                serializedName: "blockSizeInMB",
                type: {
                    name: "any"
                }
            } })
    }
};
const AzureDataLakeStoreWriteSettings = {
    serializedName: "AzureDataLakeStoreWriteSettings",
    type: {
        name: "Composite",
        className: "AzureDataLakeStoreWriteSettings",
        uberParent: "StoreWriteSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: StoreWriteSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, StoreWriteSettings.type.modelProperties), { expiryDateTime: {
                serializedName: "expiryDateTime",
                type: {
                    name: "any"
                }
            } })
    }
};
const FileServerWriteSettings = {
    serializedName: "FileServerWriteSettings",
    type: {
        name: "Composite",
        className: "FileServerWriteSettings",
        uberParent: "StoreWriteSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: StoreWriteSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, StoreWriteSettings.type.modelProperties)
    }
};
const AzureFileStorageWriteSettings = {
    serializedName: "AzureFileStorageWriteSettings",
    type: {
        name: "Composite",
        className: "AzureFileStorageWriteSettings",
        uberParent: "StoreWriteSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: StoreWriteSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, StoreWriteSettings.type.modelProperties)
    }
};
const LakeHouseWriteSettings = {
    serializedName: "LakeHouseWriteSettings",
    type: {
        name: "Composite",
        className: "LakeHouseWriteSettings",
        uberParent: "StoreWriteSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: StoreWriteSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, StoreWriteSettings.type.modelProperties)
    }
};
const ParquetReadSettings = {
    serializedName: "ParquetReadSettings",
    type: {
        name: "Composite",
        className: "ParquetReadSettings",
        uberParent: "FormatReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: FormatReadSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, FormatReadSettings.type.modelProperties), { compressionProperties: {
                serializedName: "compressionProperties",
                type: {
                    name: "Composite",
                    className: "CompressionReadSettings"
                }
            } })
    }
};
const DelimitedTextReadSettings = {
    serializedName: "DelimitedTextReadSettings",
    type: {
        name: "Composite",
        className: "DelimitedTextReadSettings",
        uberParent: "FormatReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: FormatReadSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, FormatReadSettings.type.modelProperties), { skipLineCount: {
                serializedName: "skipLineCount",
                type: {
                    name: "any"
                }
            }, compressionProperties: {
                serializedName: "compressionProperties",
                type: {
                    name: "Composite",
                    className: "CompressionReadSettings"
                }
            } })
    }
};
const JsonReadSettings = {
    serializedName: "JsonReadSettings",
    type: {
        name: "Composite",
        className: "JsonReadSettings",
        uberParent: "FormatReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: FormatReadSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, FormatReadSettings.type.modelProperties), { compressionProperties: {
                serializedName: "compressionProperties",
                type: {
                    name: "Composite",
                    className: "CompressionReadSettings"
                }
            } })
    }
};
const XmlReadSettings = {
    serializedName: "XmlReadSettings",
    type: {
        name: "Composite",
        className: "XmlReadSettings",
        uberParent: "FormatReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: FormatReadSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, FormatReadSettings.type.modelProperties), { compressionProperties: {
                serializedName: "compressionProperties",
                type: {
                    name: "Composite",
                    className: "CompressionReadSettings"
                }
            }, validationMode: {
                serializedName: "validationMode",
                type: {
                    name: "any"
                }
            }, detectDataType: {
                serializedName: "detectDataType",
                type: {
                    name: "any"
                }
            }, namespaces: {
                serializedName: "namespaces",
                type: {
                    name: "any"
                }
            }, namespacePrefixes: {
                serializedName: "namespacePrefixes",
                type: {
                    name: "any"
                }
            } })
    }
};
const BinaryReadSettings = {
    serializedName: "BinaryReadSettings",
    type: {
        name: "Composite",
        className: "BinaryReadSettings",
        uberParent: "FormatReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: FormatReadSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, FormatReadSettings.type.modelProperties), { compressionProperties: {
                serializedName: "compressionProperties",
                type: {
                    name: "Composite",
                    className: "CompressionReadSettings"
                }
            } })
    }
};
const ZipDeflateReadSettings = {
    serializedName: "ZipDeflateReadSettings",
    type: {
        name: "Composite",
        className: "ZipDeflateReadSettings",
        uberParent: "CompressionReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CompressionReadSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CompressionReadSettings.type.modelProperties), { preserveZipFileNameAsFolder: {
                serializedName: "preserveZipFileNameAsFolder",
                type: {
                    name: "any"
                }
            } })
    }
};
const TarReadSettings = {
    serializedName: "TarReadSettings",
    type: {
        name: "Composite",
        className: "TarReadSettings",
        uberParent: "CompressionReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CompressionReadSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CompressionReadSettings.type.modelProperties), { preserveCompressionFileNameAsFolder: {
                serializedName: "preserveCompressionFileNameAsFolder",
                type: {
                    name: "any"
                }
            } })
    }
};
const TarGZipReadSettings = {
    serializedName: "TarGZipReadSettings",
    type: {
        name: "Composite",
        className: "TarGZipReadSettings",
        uberParent: "CompressionReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CompressionReadSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CompressionReadSettings.type.modelProperties), { preserveCompressionFileNameAsFolder: {
                serializedName: "preserveCompressionFileNameAsFolder",
                type: {
                    name: "any"
                }
            } })
    }
};
const AvroWriteSettings = {
    serializedName: "AvroWriteSettings",
    type: {
        name: "Composite",
        className: "AvroWriteSettings",
        uberParent: "FormatWriteSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: FormatWriteSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, FormatWriteSettings.type.modelProperties), { recordName: {
                serializedName: "recordName",
                type: {
                    name: "String"
                }
            }, recordNamespace: {
                serializedName: "recordNamespace",
                type: {
                    name: "String"
                }
            }, maxRowsPerFile: {
                serializedName: "maxRowsPerFile",
                type: {
                    name: "any"
                }
            }, fileNamePrefix: {
                serializedName: "fileNamePrefix",
                type: {
                    name: "any"
                }
            } })
    }
};
const OrcWriteSettings = {
    serializedName: "OrcWriteSettings",
    type: {
        name: "Composite",
        className: "OrcWriteSettings",
        uberParent: "FormatWriteSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: FormatWriteSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, FormatWriteSettings.type.modelProperties), { maxRowsPerFile: {
                serializedName: "maxRowsPerFile",
                type: {
                    name: "any"
                }
            }, fileNamePrefix: {
                serializedName: "fileNamePrefix",
                type: {
                    name: "any"
                }
            } })
    }
};
const ParquetWriteSettings = {
    serializedName: "ParquetWriteSettings",
    type: {
        name: "Composite",
        className: "ParquetWriteSettings",
        uberParent: "FormatWriteSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: FormatWriteSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, FormatWriteSettings.type.modelProperties), { maxRowsPerFile: {
                serializedName: "maxRowsPerFile",
                type: {
                    name: "any"
                }
            }, fileNamePrefix: {
                serializedName: "fileNamePrefix",
                type: {
                    name: "any"
                }
            } })
    }
};
const DelimitedTextWriteSettings = {
    serializedName: "DelimitedTextWriteSettings",
    type: {
        name: "Composite",
        className: "DelimitedTextWriteSettings",
        uberParent: "FormatWriteSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: FormatWriteSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, FormatWriteSettings.type.modelProperties), { quoteAllText: {
                serializedName: "quoteAllText",
                type: {
                    name: "any"
                }
            }, fileExtension: {
                serializedName: "fileExtension",
                required: true,
                type: {
                    name: "any"
                }
            }, maxRowsPerFile: {
                serializedName: "maxRowsPerFile",
                type: {
                    name: "any"
                }
            }, fileNamePrefix: {
                serializedName: "fileNamePrefix",
                type: {
                    name: "any"
                }
            } })
    }
};
const JsonWriteSettings = {
    serializedName: "JsonWriteSettings",
    type: {
        name: "Composite",
        className: "JsonWriteSettings",
        uberParent: "FormatWriteSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: FormatWriteSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, FormatWriteSettings.type.modelProperties), { filePattern: {
                serializedName: "filePattern",
                type: {
                    name: "any"
                }
            } })
    }
};
const AvroSource = {
    serializedName: "AvroSource",
    type: {
        name: "Composite",
        className: "AvroSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { storeSettings: {
                serializedName: "storeSettings",
                type: {
                    name: "Composite",
                    className: "StoreReadSettings"
                }
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any"
                }
            } })
    }
};
const ExcelSource = {
    serializedName: "ExcelSource",
    type: {
        name: "Composite",
        className: "ExcelSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { storeSettings: {
                serializedName: "storeSettings",
                type: {
                    name: "Composite",
                    className: "StoreReadSettings"
                }
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any"
                }
            } })
    }
};
const ParquetSource = {
    serializedName: "ParquetSource",
    type: {
        name: "Composite",
        className: "ParquetSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { storeSettings: {
                serializedName: "storeSettings",
                type: {
                    name: "Composite",
                    className: "StoreReadSettings"
                }
            }, formatSettings: {
                serializedName: "formatSettings",
                type: {
                    name: "Composite",
                    className: "ParquetReadSettings"
                }
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any"
                }
            } })
    }
};
const DelimitedTextSource = {
    serializedName: "DelimitedTextSource",
    type: {
        name: "Composite",
        className: "DelimitedTextSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { storeSettings: {
                serializedName: "storeSettings",
                type: {
                    name: "Composite",
                    className: "StoreReadSettings"
                }
            }, formatSettings: {
                serializedName: "formatSettings",
                type: {
                    name: "Composite",
                    className: "DelimitedTextReadSettings"
                }
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any"
                }
            } })
    }
};
const JsonSource = {
    serializedName: "JsonSource",
    type: {
        name: "Composite",
        className: "JsonSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { storeSettings: {
                serializedName: "storeSettings",
                type: {
                    name: "Composite",
                    className: "StoreReadSettings"
                }
            }, formatSettings: {
                serializedName: "formatSettings",
                type: {
                    name: "Composite",
                    className: "JsonReadSettings"
                }
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any"
                }
            } })
    }
};
const XmlSource = {
    serializedName: "XmlSource",
    type: {
        name: "Composite",
        className: "XmlSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { storeSettings: {
                serializedName: "storeSettings",
                type: {
                    name: "Composite",
                    className: "StoreReadSettings"
                }
            }, formatSettings: {
                serializedName: "formatSettings",
                type: {
                    name: "Composite",
                    className: "XmlReadSettings"
                }
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any"
                }
            } })
    }
};
const OrcSource = {
    serializedName: "OrcSource",
    type: {
        name: "Composite",
        className: "OrcSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { storeSettings: {
                serializedName: "storeSettings",
                type: {
                    name: "Composite",
                    className: "StoreReadSettings"
                }
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any"
                }
            } })
    }
};
const BinarySource = {
    serializedName: "BinarySource",
    type: {
        name: "Composite",
        className: "BinarySource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { storeSettings: {
                serializedName: "storeSettings",
                type: {
                    name: "Composite",
                    className: "StoreReadSettings"
                }
            }, formatSettings: {
                serializedName: "formatSettings",
                type: {
                    name: "Composite",
                    className: "BinaryReadSettings"
                }
            } })
    }
};
const TabularSource = {
    serializedName: "TabularSource",
    type: {
        name: "Composite",
        className: "TabularSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { queryTimeout: {
                serializedName: "queryTimeout",
                type: {
                    name: "any"
                }
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any"
                }
            } })
    }
};
const BlobSource = {
    serializedName: "BlobSource",
    type: {
        name: "Composite",
        className: "BlobSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { treatEmptyAsNull: {
                serializedName: "treatEmptyAsNull",
                type: {
                    name: "any"
                }
            }, skipHeaderLineCount: {
                serializedName: "skipHeaderLineCount",
                type: {
                    name: "any"
                }
            }, recursive: {
                serializedName: "recursive",
                type: {
                    name: "any"
                }
            } })
    }
};
const DocumentDbCollectionSource = {
    serializedName: "DocumentDbCollectionSource",
    type: {
        name: "Composite",
        className: "DocumentDbCollectionSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            }, nestingSeparator: {
                serializedName: "nestingSeparator",
                type: {
                    name: "any"
                }
            }, queryTimeout: {
                serializedName: "queryTimeout",
                type: {
                    name: "any"
                }
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any"
                }
            } })
    }
};
const CosmosDbSqlApiSource = {
    serializedName: "CosmosDbSqlApiSource",
    type: {
        name: "Composite",
        className: "CosmosDbSqlApiSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            }, pageSize: {
                serializedName: "pageSize",
                type: {
                    name: "any"
                }
            }, preferredRegions: {
                serializedName: "preferredRegions",
                type: {
                    name: "any"
                }
            }, detectDatetime: {
                serializedName: "detectDatetime",
                type: {
                    name: "any"
                }
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any"
                }
            } })
    }
};
const DynamicsSource = {
    serializedName: "DynamicsSource",
    type: {
        name: "Composite",
        className: "DynamicsSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any"
                }
            } })
    }
};
const DynamicsCrmSource = {
    serializedName: "DynamicsCrmSource",
    type: {
        name: "Composite",
        className: "DynamicsCrmSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any"
                }
            } })
    }
};
const CommonDataServiceForAppsSource = {
    serializedName: "CommonDataServiceForAppsSource",
    type: {
        name: "Composite",
        className: "CommonDataServiceForAppsSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any"
                }
            } })
    }
};
const RelationalSource = {
    serializedName: "RelationalSource",
    type: {
        name: "Composite",
        className: "RelationalSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any"
                }
            } })
    }
};
const MicrosoftAccessSource = {
    serializedName: "MicrosoftAccessSource",
    type: {
        name: "Composite",
        className: "MicrosoftAccessSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any"
                }
            } })
    }
};
const ODataSource = {
    serializedName: "ODataSource",
    type: {
        name: "Composite",
        className: "ODataSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            }, httpRequestTimeout: {
                serializedName: "httpRequestTimeout",
                type: {
                    name: "any"
                }
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any"
                }
            } })
    }
};
const SalesforceServiceCloudSource = {
    serializedName: "SalesforceServiceCloudSource",
    type: {
        name: "Composite",
        className: "SalesforceServiceCloudSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            }, readBehavior: {
                serializedName: "readBehavior",
                type: {
                    name: "any"
                }
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any"
                }
            } })
    }
};
const RestSource = {
    serializedName: "RestSource",
    type: {
        name: "Composite",
        className: "RestSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { requestMethod: {
                serializedName: "requestMethod",
                type: {
                    name: "any"
                }
            }, requestBody: {
                serializedName: "requestBody",
                type: {
                    name: "any"
                }
            }, additionalHeaders: {
                serializedName: "additionalHeaders",
                type: {
                    name: "any"
                }
            }, paginationRules: {
                serializedName: "paginationRules",
                type: {
                    name: "any"
                }
            }, httpRequestTimeout: {
                serializedName: "httpRequestTimeout",
                type: {
                    name: "any"
                }
            }, requestInterval: {
                serializedName: "requestInterval",
                type: {
                    name: "any"
                }
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any"
                }
            } })
    }
};
const FileSystemSource = {
    serializedName: "FileSystemSource",
    type: {
        name: "Composite",
        className: "FileSystemSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { recursive: {
                serializedName: "recursive",
                type: {
                    name: "any"
                }
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any"
                }
            } })
    }
};
const HdfsSource = {
    serializedName: "HdfsSource",
    type: {
        name: "Composite",
        className: "HdfsSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { recursive: {
                serializedName: "recursive",
                type: {
                    name: "any"
                }
            }, distcpSettings: {
                serializedName: "distcpSettings",
                type: {
                    name: "Composite",
                    className: "DistcpSettings"
                }
            } })
    }
};
const AzureDataExplorerSource = {
    serializedName: "AzureDataExplorerSource",
    type: {
        name: "Composite",
        className: "AzureDataExplorerSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { query: {
                serializedName: "query",
                required: true,
                type: {
                    name: "any"
                }
            }, noTruncation: {
                serializedName: "noTruncation",
                type: {
                    name: "any"
                }
            }, queryTimeout: {
                serializedName: "queryTimeout",
                type: {
                    name: "any"
                }
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any"
                }
            } })
    }
};
const OracleSource = {
    serializedName: "OracleSource",
    type: {
        name: "Composite",
        className: "OracleSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { oracleReaderQuery: {
                serializedName: "oracleReaderQuery",
                type: {
                    name: "any"
                }
            }, queryTimeout: {
                serializedName: "queryTimeout",
                type: {
                    name: "any"
                }
            }, partitionOption: {
                serializedName: "partitionOption",
                type: {
                    name: "any"
                }
            }, partitionSettings: {
                serializedName: "partitionSettings",
                type: {
                    name: "Composite",
                    className: "OraclePartitionSettings"
                }
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any"
                }
            } })
    }
};
const AmazonRdsForOracleSource = {
    serializedName: "AmazonRdsForOracleSource",
    type: {
        name: "Composite",
        className: "AmazonRdsForOracleSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { oracleReaderQuery: {
                serializedName: "oracleReaderQuery",
                type: {
                    name: "any"
                }
            }, queryTimeout: {
                serializedName: "queryTimeout",
                type: {
                    name: "any"
                }
            }, partitionOption: {
                serializedName: "partitionOption",
                type: {
                    name: "any"
                }
            }, partitionSettings: {
                serializedName: "partitionSettings",
                type: {
                    name: "Composite",
                    className: "AmazonRdsForOraclePartitionSettings"
                }
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any"
                }
            } })
    }
};
const WebSource = {
    serializedName: "WebSource",
    type: {
        name: "Composite",
        className: "WebSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any"
                }
            } })
    }
};
const MongoDbSource = {
    serializedName: "MongoDbSource",
    type: {
        name: "Composite",
        className: "MongoDbSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any"
                }
            } })
    }
};
const MongoDbAtlasSource = {
    serializedName: "MongoDbAtlasSource",
    type: {
        name: "Composite",
        className: "MongoDbAtlasSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { filter: {
                serializedName: "filter",
                type: {
                    name: "any"
                }
            }, cursorMethods: {
                serializedName: "cursorMethods",
                type: {
                    name: "Composite",
                    className: "MongoDbCursorMethodsProperties"
                }
            }, batchSize: {
                serializedName: "batchSize",
                type: {
                    name: "any"
                }
            }, queryTimeout: {
                serializedName: "queryTimeout",
                type: {
                    name: "any"
                }
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any"
                }
            } })
    }
};
const MongoDbV2Source = {
    serializedName: "MongoDbV2Source",
    type: {
        name: "Composite",
        className: "MongoDbV2Source",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { filter: {
                serializedName: "filter",
                type: {
                    name: "any"
                }
            }, cursorMethods: {
                serializedName: "cursorMethods",
                type: {
                    name: "Composite",
                    className: "MongoDbCursorMethodsProperties"
                }
            }, batchSize: {
                serializedName: "batchSize",
                type: {
                    name: "any"
                }
            }, queryTimeout: {
                serializedName: "queryTimeout",
                type: {
                    name: "any"
                }
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any"
                }
            } })
    }
};
const CosmosDbMongoDbApiSource = {
    serializedName: "CosmosDbMongoDbApiSource",
    type: {
        name: "Composite",
        className: "CosmosDbMongoDbApiSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { filter: {
                serializedName: "filter",
                type: {
                    name: "any"
                }
            }, cursorMethods: {
                serializedName: "cursorMethods",
                type: {
                    name: "Composite",
                    className: "MongoDbCursorMethodsProperties"
                }
            }, batchSize: {
                serializedName: "batchSize",
                type: {
                    name: "any"
                }
            }, queryTimeout: {
                serializedName: "queryTimeout",
                type: {
                    name: "any"
                }
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any"
                }
            } })
    }
};
const Office365Source = {
    serializedName: "Office365Source",
    type: {
        name: "Composite",
        className: "Office365Source",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { allowedGroups: {
                serializedName: "allowedGroups",
                type: {
                    name: "any"
                }
            }, userScopeFilterUri: {
                serializedName: "userScopeFilterUri",
                type: {
                    name: "any"
                }
            }, dateFilterColumn: {
                serializedName: "dateFilterColumn",
                type: {
                    name: "any"
                }
            }, startTime: {
                serializedName: "startTime",
                type: {
                    name: "any"
                }
            }, endTime: {
                serializedName: "endTime",
                type: {
                    name: "any"
                }
            }, outputColumns: {
                serializedName: "outputColumns",
                type: {
                    name: "any"
                }
            } })
    }
};
const AzureDataLakeStoreSource = {
    serializedName: "AzureDataLakeStoreSource",
    type: {
        name: "Composite",
        className: "AzureDataLakeStoreSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { recursive: {
                serializedName: "recursive",
                type: {
                    name: "any"
                }
            } })
    }
};
const AzureBlobFSSource = {
    serializedName: "AzureBlobFSSource",
    type: {
        name: "Composite",
        className: "AzureBlobFSSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { treatEmptyAsNull: {
                serializedName: "treatEmptyAsNull",
                type: {
                    name: "any"
                }
            }, skipHeaderLineCount: {
                serializedName: "skipHeaderLineCount",
                type: {
                    name: "any"
                }
            }, recursive: {
                serializedName: "recursive",
                type: {
                    name: "any"
                }
            } })
    }
};
const HttpSource = {
    serializedName: "HttpSource",
    type: {
        name: "Composite",
        className: "HttpSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { httpRequestTimeout: {
                serializedName: "httpRequestTimeout",
                type: {
                    name: "any"
                }
            } })
    }
};
const LakeHouseTableSource = {
    serializedName: "LakeHouseTableSource",
    type: {
        name: "Composite",
        className: "LakeHouseTableSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { timestampAsOf: {
                serializedName: "timestampAsOf",
                type: {
                    name: "any"
                }
            }, versionAsOf: {
                serializedName: "versionAsOf",
                type: {
                    name: "any"
                }
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any"
                }
            } })
    }
};
const SnowflakeSource = {
    serializedName: "SnowflakeSource",
    type: {
        name: "Composite",
        className: "SnowflakeSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            }, exportSettings: {
                serializedName: "exportSettings",
                type: {
                    name: "Composite",
                    className: "SnowflakeExportCopyCommand"
                }
            } })
    }
};
const AzureDatabricksDeltaLakeSource = {
    serializedName: "AzureDatabricksDeltaLakeSource",
    type: {
        name: "Composite",
        className: "AzureDatabricksDeltaLakeSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            }, exportSettings: {
                serializedName: "exportSettings",
                type: {
                    name: "Composite",
                    className: "AzureDatabricksDeltaLakeExportCommand"
                }
            } })
    }
};
const SharePointOnlineListSource = {
    serializedName: "SharePointOnlineListSource",
    type: {
        name: "Composite",
        className: "SharePointOnlineListSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            }, httpRequestTimeout: {
                serializedName: "httpRequestTimeout",
                type: {
                    name: "any"
                }
            } })
    }
};
const DelimitedTextSink = {
    serializedName: "DelimitedTextSink",
    type: {
        name: "Composite",
        className: "DelimitedTextSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { storeSettings: {
                serializedName: "storeSettings",
                type: {
                    name: "Composite",
                    className: "StoreWriteSettings"
                }
            }, formatSettings: {
                serializedName: "formatSettings",
                type: {
                    name: "Composite",
                    className: "DelimitedTextWriteSettings"
                }
            } })
    }
};
const JsonSink = {
    serializedName: "JsonSink",
    type: {
        name: "Composite",
        className: "JsonSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { storeSettings: {
                serializedName: "storeSettings",
                type: {
                    name: "Composite",
                    className: "StoreWriteSettings"
                }
            }, formatSettings: {
                serializedName: "formatSettings",
                type: {
                    name: "Composite",
                    className: "JsonWriteSettings"
                }
            } })
    }
};
const OrcSink = {
    serializedName: "OrcSink",
    type: {
        name: "Composite",
        className: "OrcSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { storeSettings: {
                serializedName: "storeSettings",
                type: {
                    name: "Composite",
                    className: "StoreWriteSettings"
                }
            }, formatSettings: {
                serializedName: "formatSettings",
                type: {
                    name: "Composite",
                    className: "OrcWriteSettings"
                }
            } })
    }
};
const RestSink = {
    serializedName: "RestSink",
    type: {
        name: "Composite",
        className: "RestSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { requestMethod: {
                serializedName: "requestMethod",
                type: {
                    name: "any"
                }
            }, additionalHeaders: {
                serializedName: "additionalHeaders",
                type: {
                    name: "any"
                }
            }, httpRequestTimeout: {
                serializedName: "httpRequestTimeout",
                type: {
                    name: "any"
                }
            }, requestInterval: {
                serializedName: "requestInterval",
                type: {
                    name: "any"
                }
            }, httpCompressionType: {
                serializedName: "httpCompressionType",
                type: {
                    name: "any"
                }
            } })
    }
};
const AzurePostgreSqlSink = {
    serializedName: "AzurePostgreSqlSink",
    type: {
        name: "Composite",
        className: "AzurePostgreSqlSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { preCopyScript: {
                serializedName: "preCopyScript",
                type: {
                    name: "any"
                }
            } })
    }
};
const AzureMySqlSink = {
    serializedName: "AzureMySqlSink",
    type: {
        name: "Composite",
        className: "AzureMySqlSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { preCopyScript: {
                serializedName: "preCopyScript",
                type: {
                    name: "any"
                }
            } })
    }
};
const AzureDatabricksDeltaLakeSink = {
    serializedName: "AzureDatabricksDeltaLakeSink",
    type: {
        name: "Composite",
        className: "AzureDatabricksDeltaLakeSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { preCopyScript: {
                serializedName: "preCopyScript",
                type: {
                    name: "any"
                }
            }, importSettings: {
                serializedName: "importSettings",
                type: {
                    name: "Composite",
                    className: "AzureDatabricksDeltaLakeImportCommand"
                }
            } })
    }
};
const SapCloudForCustomerSink = {
    serializedName: "SapCloudForCustomerSink",
    type: {
        name: "Composite",
        className: "SapCloudForCustomerSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { writeBehavior: {
                serializedName: "writeBehavior",
                type: {
                    name: "String"
                }
            }, httpRequestTimeout: {
                serializedName: "httpRequestTimeout",
                type: {
                    name: "any"
                }
            } })
    }
};
const AzureQueueSink = {
    serializedName: "AzureQueueSink",
    type: {
        name: "Composite",
        className: "AzureQueueSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, CopySink.type.modelProperties)
    }
};
const AzureTableSink = {
    serializedName: "AzureTableSink",
    type: {
        name: "Composite",
        className: "AzureTableSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { azureTableDefaultPartitionKeyValue: {
                serializedName: "azureTableDefaultPartitionKeyValue",
                type: {
                    name: "any"
                }
            }, azureTablePartitionKeyName: {
                serializedName: "azureTablePartitionKeyName",
                type: {
                    name: "any"
                }
            }, azureTableRowKeyName: {
                serializedName: "azureTableRowKeyName",
                type: {
                    name: "any"
                }
            }, azureTableInsertType: {
                serializedName: "azureTableInsertType",
                type: {
                    name: "any"
                }
            } })
    }
};
const AvroSink = {
    serializedName: "AvroSink",
    type: {
        name: "Composite",
        className: "AvroSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { storeSettings: {
                serializedName: "storeSettings",
                type: {
                    name: "Composite",
                    className: "StoreWriteSettings"
                }
            }, formatSettings: {
                serializedName: "formatSettings",
                type: {
                    name: "Composite",
                    className: "AvroWriteSettings"
                }
            } })
    }
};
const ParquetSink = {
    serializedName: "ParquetSink",
    type: {
        name: "Composite",
        className: "ParquetSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { storeSettings: {
                serializedName: "storeSettings",
                type: {
                    name: "Composite",
                    className: "StoreWriteSettings"
                }
            }, formatSettings: {
                serializedName: "formatSettings",
                type: {
                    name: "Composite",
                    className: "ParquetWriteSettings"
                }
            } })
    }
};
const BinarySink = {
    serializedName: "BinarySink",
    type: {
        name: "Composite",
        className: "BinarySink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { storeSettings: {
                serializedName: "storeSettings",
                type: {
                    name: "Composite",
                    className: "StoreWriteSettings"
                }
            } })
    }
};
const BlobSink = {
    serializedName: "BlobSink",
    type: {
        name: "Composite",
        className: "BlobSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { blobWriterOverwriteFiles: {
                serializedName: "blobWriterOverwriteFiles",
                type: {
                    name: "any"
                }
            }, blobWriterDateTimeFormat: {
                serializedName: "blobWriterDateTimeFormat",
                type: {
                    name: "any"
                }
            }, blobWriterAddHeader: {
                serializedName: "blobWriterAddHeader",
                type: {
                    name: "any"
                }
            }, copyBehavior: {
                serializedName: "copyBehavior",
                type: {
                    name: "any"
                }
            }, metadata: {
                serializedName: "metadata",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MetadataItem"
                        }
                    }
                }
            } })
    }
};
const FileSystemSink = {
    serializedName: "FileSystemSink",
    type: {
        name: "Composite",
        className: "FileSystemSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { copyBehavior: {
                serializedName: "copyBehavior",
                type: {
                    name: "any"
                }
            } })
    }
};
const DocumentDbCollectionSink = {
    serializedName: "DocumentDbCollectionSink",
    type: {
        name: "Composite",
        className: "DocumentDbCollectionSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { nestingSeparator: {
                serializedName: "nestingSeparator",
                type: {
                    name: "any"
                }
            }, writeBehavior: {
                serializedName: "writeBehavior",
                type: {
                    name: "any"
                }
            } })
    }
};
const CosmosDbSqlApiSink = {
    serializedName: "CosmosDbSqlApiSink",
    type: {
        name: "Composite",
        className: "CosmosDbSqlApiSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { writeBehavior: {
                serializedName: "writeBehavior",
                type: {
                    name: "any"
                }
            } })
    }
};
const SqlSink = {
    serializedName: "SqlSink",
    type: {
        name: "Composite",
        className: "SqlSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { sqlWriterStoredProcedureName: {
                serializedName: "sqlWriterStoredProcedureName",
                type: {
                    name: "any"
                }
            }, sqlWriterTableType: {
                serializedName: "sqlWriterTableType",
                type: {
                    name: "any"
                }
            }, preCopyScript: {
                serializedName: "preCopyScript",
                type: {
                    name: "any"
                }
            }, storedProcedureParameters: {
                serializedName: "storedProcedureParameters",
                type: {
                    name: "any"
                }
            }, storedProcedureTableTypeParameterName: {
                serializedName: "storedProcedureTableTypeParameterName",
                type: {
                    name: "any"
                }
            }, tableOption: {
                serializedName: "tableOption",
                type: {
                    name: "any"
                }
            }, sqlWriterUseTableLock: {
                serializedName: "sqlWriterUseTableLock",
                type: {
                    name: "any"
                }
            }, writeBehavior: {
                serializedName: "writeBehavior",
                type: {
                    name: "any"
                }
            }, upsertSettings: {
                serializedName: "upsertSettings",
                type: {
                    name: "Composite",
                    className: "SqlUpsertSettings"
                }
            } })
    }
};
const SqlServerSink = {
    serializedName: "SqlServerSink",
    type: {
        name: "Composite",
        className: "SqlServerSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { sqlWriterStoredProcedureName: {
                serializedName: "sqlWriterStoredProcedureName",
                type: {
                    name: "any"
                }
            }, sqlWriterTableType: {
                serializedName: "sqlWriterTableType",
                type: {
                    name: "any"
                }
            }, preCopyScript: {
                serializedName: "preCopyScript",
                type: {
                    name: "any"
                }
            }, storedProcedureParameters: {
                serializedName: "storedProcedureParameters",
                type: {
                    name: "any"
                }
            }, storedProcedureTableTypeParameterName: {
                serializedName: "storedProcedureTableTypeParameterName",
                type: {
                    name: "any"
                }
            }, tableOption: {
                serializedName: "tableOption",
                type: {
                    name: "any"
                }
            }, sqlWriterUseTableLock: {
                serializedName: "sqlWriterUseTableLock",
                type: {
                    name: "any"
                }
            }, writeBehavior: {
                serializedName: "writeBehavior",
                type: {
                    name: "any"
                }
            }, upsertSettings: {
                serializedName: "upsertSettings",
                type: {
                    name: "Composite",
                    className: "SqlUpsertSettings"
                }
            } })
    }
};
const AzureSqlSink = {
    serializedName: "AzureSqlSink",
    type: {
        name: "Composite",
        className: "AzureSqlSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { sqlWriterStoredProcedureName: {
                serializedName: "sqlWriterStoredProcedureName",
                type: {
                    name: "any"
                }
            }, sqlWriterTableType: {
                serializedName: "sqlWriterTableType",
                type: {
                    name: "any"
                }
            }, preCopyScript: {
                serializedName: "preCopyScript",
                type: {
                    name: "any"
                }
            }, storedProcedureParameters: {
                serializedName: "storedProcedureParameters",
                type: {
                    name: "any"
                }
            }, storedProcedureTableTypeParameterName: {
                serializedName: "storedProcedureTableTypeParameterName",
                type: {
                    name: "any"
                }
            }, tableOption: {
                serializedName: "tableOption",
                type: {
                    name: "any"
                }
            }, sqlWriterUseTableLock: {
                serializedName: "sqlWriterUseTableLock",
                type: {
                    name: "any"
                }
            }, writeBehavior: {
                serializedName: "writeBehavior",
                type: {
                    name: "any"
                }
            }, upsertSettings: {
                serializedName: "upsertSettings",
                type: {
                    name: "Composite",
                    className: "SqlUpsertSettings"
                }
            } })
    }
};
const SqlMISink = {
    serializedName: "SqlMISink",
    type: {
        name: "Composite",
        className: "SqlMISink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { sqlWriterStoredProcedureName: {
                serializedName: "sqlWriterStoredProcedureName",
                type: {
                    name: "any"
                }
            }, sqlWriterTableType: {
                serializedName: "sqlWriterTableType",
                type: {
                    name: "any"
                }
            }, preCopyScript: {
                serializedName: "preCopyScript",
                type: {
                    name: "any"
                }
            }, storedProcedureParameters: {
                serializedName: "storedProcedureParameters",
                type: {
                    name: "any"
                }
            }, storedProcedureTableTypeParameterName: {
                serializedName: "storedProcedureTableTypeParameterName",
                type: {
                    name: "any"
                }
            }, tableOption: {
                serializedName: "tableOption",
                type: {
                    name: "any"
                }
            }, sqlWriterUseTableLock: {
                serializedName: "sqlWriterUseTableLock",
                type: {
                    name: "any"
                }
            }, writeBehavior: {
                serializedName: "writeBehavior",
                type: {
                    name: "any"
                }
            }, upsertSettings: {
                serializedName: "upsertSettings",
                type: {
                    name: "Composite",
                    className: "SqlUpsertSettings"
                }
            } })
    }
};
const SqlDWSink = {
    serializedName: "SqlDWSink",
    type: {
        name: "Composite",
        className: "SqlDWSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { preCopyScript: {
                serializedName: "preCopyScript",
                type: {
                    name: "any"
                }
            }, allowPolyBase: {
                serializedName: "allowPolyBase",
                type: {
                    name: "any"
                }
            }, polyBaseSettings: {
                serializedName: "polyBaseSettings",
                type: {
                    name: "Composite",
                    className: "PolybaseSettings"
                }
            }, allowCopyCommand: {
                serializedName: "allowCopyCommand",
                type: {
                    name: "any"
                }
            }, copyCommandSettings: {
                serializedName: "copyCommandSettings",
                type: {
                    name: "Composite",
                    className: "DWCopyCommandSettings"
                }
            }, tableOption: {
                serializedName: "tableOption",
                type: {
                    name: "any"
                }
            }, sqlWriterUseTableLock: {
                serializedName: "sqlWriterUseTableLock",
                type: {
                    name: "any"
                }
            }, writeBehavior: {
                serializedName: "writeBehavior",
                type: {
                    name: "any"
                }
            }, upsertSettings: {
                serializedName: "upsertSettings",
                type: {
                    name: "Composite",
                    className: "SqlDWUpsertSettings"
                }
            } })
    }
};
const SnowflakeSink = {
    serializedName: "SnowflakeSink",
    type: {
        name: "Composite",
        className: "SnowflakeSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { preCopyScript: {
                serializedName: "preCopyScript",
                type: {
                    name: "any"
                }
            }, importSettings: {
                serializedName: "importSettings",
                type: {
                    name: "Composite",
                    className: "SnowflakeImportCopyCommand"
                }
            } })
    }
};
const OracleSink = {
    serializedName: "OracleSink",
    type: {
        name: "Composite",
        className: "OracleSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { preCopyScript: {
                serializedName: "preCopyScript",
                type: {
                    name: "any"
                }
            } })
    }
};
const AzureDataLakeStoreSink = {
    serializedName: "AzureDataLakeStoreSink",
    type: {
        name: "Composite",
        className: "AzureDataLakeStoreSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { copyBehavior: {
                serializedName: "copyBehavior",
                type: {
                    name: "any"
                }
            }, enableAdlsSingleFileParallel: {
                serializedName: "enableAdlsSingleFileParallel",
                type: {
                    name: "any"
                }
            } })
    }
};
const AzureBlobFSSink = {
    serializedName: "AzureBlobFSSink",
    type: {
        name: "Composite",
        className: "AzureBlobFSSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { copyBehavior: {
                serializedName: "copyBehavior",
                type: {
                    name: "any"
                }
            }, metadata: {
                serializedName: "metadata",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MetadataItem"
                        }
                    }
                }
            } })
    }
};
const AzureSearchIndexSink = {
    serializedName: "AzureSearchIndexSink",
    type: {
        name: "Composite",
        className: "AzureSearchIndexSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { writeBehavior: {
                serializedName: "writeBehavior",
                type: {
                    name: "String"
                }
            } })
    }
};
const OdbcSink = {
    serializedName: "OdbcSink",
    type: {
        name: "Composite",
        className: "OdbcSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { preCopyScript: {
                serializedName: "preCopyScript",
                type: {
                    name: "any"
                }
            } })
    }
};
const InformixSink = {
    serializedName: "InformixSink",
    type: {
        name: "Composite",
        className: "InformixSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { preCopyScript: {
                serializedName: "preCopyScript",
                type: {
                    name: "any"
                }
            } })
    }
};
const MicrosoftAccessSink = {
    serializedName: "MicrosoftAccessSink",
    type: {
        name: "Composite",
        className: "MicrosoftAccessSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { preCopyScript: {
                serializedName: "preCopyScript",
                type: {
                    name: "any"
                }
            } })
    }
};
const DynamicsSink = {
    serializedName: "DynamicsSink",
    type: {
        name: "Composite",
        className: "DynamicsSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { writeBehavior: {
                serializedName: "writeBehavior",
                required: true,
                type: {
                    name: "String"
                }
            }, ignoreNullValues: {
                serializedName: "ignoreNullValues",
                type: {
                    name: "any"
                }
            }, alternateKeyName: {
                serializedName: "alternateKeyName",
                type: {
                    name: "any"
                }
            } })
    }
};
const DynamicsCrmSink = {
    serializedName: "DynamicsCrmSink",
    type: {
        name: "Composite",
        className: "DynamicsCrmSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { writeBehavior: {
                serializedName: "writeBehavior",
                required: true,
                type: {
                    name: "String"
                }
            }, ignoreNullValues: {
                serializedName: "ignoreNullValues",
                type: {
                    name: "any"
                }
            }, alternateKeyName: {
                serializedName: "alternateKeyName",
                type: {
                    name: "any"
                }
            } })
    }
};
const CommonDataServiceForAppsSink = {
    serializedName: "CommonDataServiceForAppsSink",
    type: {
        name: "Composite",
        className: "CommonDataServiceForAppsSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { writeBehavior: {
                serializedName: "writeBehavior",
                required: true,
                type: {
                    name: "String"
                }
            }, ignoreNullValues: {
                serializedName: "ignoreNullValues",
                type: {
                    name: "any"
                }
            }, alternateKeyName: {
                serializedName: "alternateKeyName",
                type: {
                    name: "any"
                }
            } })
    }
};
const AzureDataExplorerSink = {
    serializedName: "AzureDataExplorerSink",
    type: {
        name: "Composite",
        className: "AzureDataExplorerSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { ingestionMappingName: {
                serializedName: "ingestionMappingName",
                type: {
                    name: "any"
                }
            }, ingestionMappingAsJson: {
                serializedName: "ingestionMappingAsJson",
                type: {
                    name: "any"
                }
            }, flushImmediately: {
                serializedName: "flushImmediately",
                type: {
                    name: "any"
                }
            } })
    }
};
const SalesforceSink = {
    serializedName: "SalesforceSink",
    type: {
        name: "Composite",
        className: "SalesforceSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { writeBehavior: {
                serializedName: "writeBehavior",
                type: {
                    name: "String"
                }
            }, externalIdFieldName: {
                serializedName: "externalIdFieldName",
                type: {
                    name: "any"
                }
            }, ignoreNullValues: {
                serializedName: "ignoreNullValues",
                type: {
                    name: "any"
                }
            } })
    }
};
const SalesforceServiceCloudSink = {
    serializedName: "SalesforceServiceCloudSink",
    type: {
        name: "Composite",
        className: "SalesforceServiceCloudSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { writeBehavior: {
                serializedName: "writeBehavior",
                type: {
                    name: "String"
                }
            }, externalIdFieldName: {
                serializedName: "externalIdFieldName",
                type: {
                    name: "any"
                }
            }, ignoreNullValues: {
                serializedName: "ignoreNullValues",
                type: {
                    name: "any"
                }
            } })
    }
};
const MongoDbAtlasSink = {
    serializedName: "MongoDbAtlasSink",
    type: {
        name: "Composite",
        className: "MongoDbAtlasSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { writeBehavior: {
                serializedName: "writeBehavior",
                type: {
                    name: "any"
                }
            } })
    }
};
const MongoDbV2Sink = {
    serializedName: "MongoDbV2Sink",
    type: {
        name: "Composite",
        className: "MongoDbV2Sink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { writeBehavior: {
                serializedName: "writeBehavior",
                type: {
                    name: "any"
                }
            } })
    }
};
const CosmosDbMongoDbApiSink = {
    serializedName: "CosmosDbMongoDbApiSink",
    type: {
        name: "Composite",
        className: "CosmosDbMongoDbApiSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { writeBehavior: {
                serializedName: "writeBehavior",
                type: {
                    name: "any"
                }
            } })
    }
};
const LakeHouseTableSink = {
    serializedName: "LakeHouseTableSink",
    type: {
        name: "Composite",
        className: "LakeHouseTableSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { tableActionOption: {
                serializedName: "tableActionOption",
                type: {
                    name: "any"
                }
            }, partitionOption: {
                serializedName: "partitionOption",
                type: {
                    name: "any"
                }
            }, partitionNameList: {
                serializedName: "partitionNameList",
                type: {
                    name: "any"
                }
            } })
    }
};
const SnowflakeExportCopyCommand = {
    serializedName: "SnowflakeExportCopyCommand",
    type: {
        name: "Composite",
        className: "SnowflakeExportCopyCommand",
        uberParent: "ExportSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ExportSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ExportSettings.type.modelProperties), { additionalCopyOptions: {
                serializedName: "additionalCopyOptions",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }, additionalFormatOptions: {
                serializedName: "additionalFormatOptions",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            } })
    }
};
const AzureDatabricksDeltaLakeExportCommand = {
    serializedName: "AzureDatabricksDeltaLakeExportCommand",
    type: {
        name: "Composite",
        className: "AzureDatabricksDeltaLakeExportCommand",
        uberParent: "ExportSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ExportSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ExportSettings.type.modelProperties), { dateFormat: {
                serializedName: "dateFormat",
                type: {
                    name: "any"
                }
            }, timestampFormat: {
                serializedName: "timestampFormat",
                type: {
                    name: "any"
                }
            } })
    }
};
const AzureDatabricksDeltaLakeImportCommand = {
    serializedName: "AzureDatabricksDeltaLakeImportCommand",
    type: {
        name: "Composite",
        className: "AzureDatabricksDeltaLakeImportCommand",
        uberParent: "ImportSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ImportSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ImportSettings.type.modelProperties), { dateFormat: {
                serializedName: "dateFormat",
                type: {
                    name: "any"
                }
            }, timestampFormat: {
                serializedName: "timestampFormat",
                type: {
                    name: "any"
                }
            } })
    }
};
const SnowflakeImportCopyCommand = {
    serializedName: "SnowflakeImportCopyCommand",
    type: {
        name: "Composite",
        className: "SnowflakeImportCopyCommand",
        uberParent: "ImportSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ImportSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ImportSettings.type.modelProperties), { additionalCopyOptions: {
                serializedName: "additionalCopyOptions",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }, additionalFormatOptions: {
                serializedName: "additionalFormatOptions",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            } })
    }
};
const TabularTranslator = {
    serializedName: "TabularTranslator",
    type: {
        name: "Composite",
        className: "TabularTranslator",
        uberParent: "CopyTranslator",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopyTranslator.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopyTranslator.type.modelProperties), { columnMappings: {
                serializedName: "columnMappings",
                type: {
                    name: "any"
                }
            }, schemaMapping: {
                serializedName: "schemaMapping",
                type: {
                    name: "any"
                }
            }, collectionReference: {
                serializedName: "collectionReference",
                type: {
                    name: "any"
                }
            }, mapComplexValuesToString: {
                serializedName: "mapComplexValuesToString",
                type: {
                    name: "any"
                }
            }, mappings: {
                serializedName: "mappings",
                type: {
                    name: "any"
                }
            }, typeConversion: {
                serializedName: "typeConversion",
                type: {
                    name: "any"
                }
            }, typeConversionSettings: {
                serializedName: "typeConversionSettings",
                type: {
                    name: "Composite",
                    className: "TypeConversionSettings"
                }
            } })
    }
};
const ExecutePowerQueryActivityTypeProperties = {
    type: {
        name: "Composite",
        className: "ExecutePowerQueryActivityTypeProperties",
        modelProperties: Object.assign(Object.assign({}, ExecuteDataFlowActivityTypeProperties.type.modelProperties), { sinks: {
                serializedName: "sinks",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "Composite", className: "PowerQuerySink" } }
                }
            }, queries: {
                serializedName: "queries",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PowerQuerySinkMapping"
                        }
                    }
                }
            } })
    }
};
const TriggerDependencyReference = {
    serializedName: "TriggerDependencyReference",
    type: {
        name: "Composite",
        className: "TriggerDependencyReference",
        uberParent: "DependencyReference",
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: Object.assign(Object.assign({}, DependencyReference.type.modelProperties), { referenceTrigger: {
                serializedName: "referenceTrigger",
                type: {
                    name: "Composite",
                    className: "TriggerReference"
                }
            } })
    }
};
const SelfDependencyTumblingWindowTriggerReference = {
    serializedName: "SelfDependencyTumblingWindowTriggerReference",
    type: {
        name: "Composite",
        className: "SelfDependencyTumblingWindowTriggerReference",
        uberParent: "DependencyReference",
        polymorphicDiscriminator: DependencyReference.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DependencyReference.type.modelProperties), { offset: {
                constraints: {
                    Pattern: new RegExp("-((\\d+)\\.)?(\\d\\d):(60|([0-5][0-9])):(60|([0-5][0-9]))"),
                    MaxLength: 15,
                    MinLength: 8
                },
                serializedName: "offset",
                required: true,
                type: {
                    name: "String"
                }
            }, size: {
                constraints: {
                    Pattern: new RegExp("((\\d+)\\.)?(\\d\\d):(60|([0-5][0-9])):(60|([0-5][0-9]))"),
                    MaxLength: 15,
                    MinLength: 8
                },
                serializedName: "size",
                type: {
                    name: "String"
                }
            } })
    }
};
const ExecutePipelineActivity = {
    serializedName: "ExecutePipeline",
    type: {
        name: "Composite",
        className: "ExecutePipelineActivity",
        uberParent: "ControlActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ControlActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ControlActivity.type.modelProperties), { policy: {
                serializedName: "policy",
                type: {
                    name: "Composite",
                    className: "ExecutePipelineActivityPolicy"
                }
            }, pipeline: {
                serializedName: "typeProperties.pipeline",
                type: {
                    name: "Composite",
                    className: "PipelineReference"
                }
            }, parameters: {
                serializedName: "typeProperties.parameters",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }, waitOnCompletion: {
                serializedName: "typeProperties.waitOnCompletion",
                type: {
                    name: "Boolean"
                }
            } })
    }
};
const IfConditionActivity = {
    serializedName: "IfCondition",
    type: {
        name: "Composite",
        className: "IfConditionActivity",
        uberParent: "ControlActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ControlActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ControlActivity.type.modelProperties), { expression: {
                serializedName: "typeProperties.expression",
                type: {
                    name: "Composite",
                    className: "Expression"
                }
            }, ifTrueActivities: {
                serializedName: "typeProperties.ifTrueActivities",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Activity"
                        }
                    }
                }
            }, ifFalseActivities: {
                serializedName: "typeProperties.ifFalseActivities",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Activity"
                        }
                    }
                }
            } })
    }
};
const SwitchActivity = {
    serializedName: "Switch",
    type: {
        name: "Composite",
        className: "SwitchActivity",
        uberParent: "ControlActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ControlActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ControlActivity.type.modelProperties), { on: {
                serializedName: "typeProperties.on",
                type: {
                    name: "Composite",
                    className: "Expression"
                }
            }, cases: {
                serializedName: "typeProperties.cases",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SwitchCase"
                        }
                    }
                }
            }, defaultActivities: {
                serializedName: "typeProperties.defaultActivities",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Activity"
                        }
                    }
                }
            } })
    }
};
const ForEachActivity = {
    serializedName: "ForEach",
    type: {
        name: "Composite",
        className: "ForEachActivity",
        uberParent: "ControlActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ControlActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ControlActivity.type.modelProperties), { isSequential: {
                serializedName: "typeProperties.isSequential",
                type: {
                    name: "Boolean"
                }
            }, batchCount: {
                constraints: {
                    InclusiveMaximum: 50
                },
                serializedName: "typeProperties.batchCount",
                type: {
                    name: "Number"
                }
            }, items: {
                serializedName: "typeProperties.items",
                type: {
                    name: "Composite",
                    className: "Expression"
                }
            }, activities: {
                serializedName: "typeProperties.activities",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Activity"
                        }
                    }
                }
            } })
    }
};
const WaitActivity = {
    serializedName: "Wait",
    type: {
        name: "Composite",
        className: "WaitActivity",
        uberParent: "ControlActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ControlActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ControlActivity.type.modelProperties), { waitTimeInSeconds: {
                serializedName: "typeProperties.waitTimeInSeconds",
                required: true,
                type: {
                    name: "any"
                }
            } })
    }
};
const FailActivity = {
    serializedName: "Fail",
    type: {
        name: "Composite",
        className: "FailActivity",
        uberParent: "ControlActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ControlActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ControlActivity.type.modelProperties), { message: {
                serializedName: "typeProperties.message",
                required: true,
                type: {
                    name: "any"
                }
            }, errorCode: {
                serializedName: "typeProperties.errorCode",
                required: true,
                type: {
                    name: "any"
                }
            } })
    }
};
const UntilActivity = {
    serializedName: "Until",
    type: {
        name: "Composite",
        className: "UntilActivity",
        uberParent: "ControlActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ControlActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ControlActivity.type.modelProperties), { expression: {
                serializedName: "typeProperties.expression",
                type: {
                    name: "Composite",
                    className: "Expression"
                }
            }, timeout: {
                serializedName: "typeProperties.timeout",
                type: {
                    name: "any"
                }
            }, activities: {
                serializedName: "typeProperties.activities",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Activity"
                        }
                    }
                }
            } })
    }
};
const ValidationActivity = {
    serializedName: "Validation",
    type: {
        name: "Composite",
        className: "ValidationActivity",
        uberParent: "ControlActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ControlActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ControlActivity.type.modelProperties), { timeout: {
                serializedName: "typeProperties.timeout",
                type: {
                    name: "any"
                }
            }, sleep: {
                serializedName: "typeProperties.sleep",
                type: {
                    name: "any"
                }
            }, minimumSize: {
                serializedName: "typeProperties.minimumSize",
                type: {
                    name: "any"
                }
            }, childItems: {
                serializedName: "typeProperties.childItems",
                type: {
                    name: "any"
                }
            }, dataset: {
                serializedName: "typeProperties.dataset",
                type: {
                    name: "Composite",
                    className: "DatasetReference"
                }
            } })
    }
};
const FilterActivity = {
    serializedName: "Filter",
    type: {
        name: "Composite",
        className: "FilterActivity",
        uberParent: "ControlActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ControlActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ControlActivity.type.modelProperties), { items: {
                serializedName: "typeProperties.items",
                type: {
                    name: "Composite",
                    className: "Expression"
                }
            }, condition: {
                serializedName: "typeProperties.condition",
                type: {
                    name: "Composite",
                    className: "Expression"
                }
            } })
    }
};
const SetVariableActivity = {
    serializedName: "SetVariable",
    type: {
        name: "Composite",
        className: "SetVariableActivity",
        uberParent: "ControlActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ControlActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ControlActivity.type.modelProperties), { policy: {
                serializedName: "policy",
                type: {
                    name: "Composite",
                    className: "SecureInputOutputPolicy"
                }
            }, variableName: {
                serializedName: "typeProperties.variableName",
                type: {
                    name: "String"
                }
            }, value: {
                serializedName: "typeProperties.value",
                type: {
                    name: "any"
                }
            }, setSystemVariable: {
                serializedName: "typeProperties.setSystemVariable",
                type: {
                    name: "Boolean"
                }
            } })
    }
};
const AppendVariableActivity = {
    serializedName: "AppendVariable",
    type: {
        name: "Composite",
        className: "AppendVariableActivity",
        uberParent: "ControlActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ControlActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ControlActivity.type.modelProperties), { variableName: {
                serializedName: "typeProperties.variableName",
                type: {
                    name: "String"
                }
            }, value: {
                serializedName: "typeProperties.value",
                type: {
                    name: "any"
                }
            } })
    }
};
const WebHookActivity = {
    serializedName: "WebHook",
    type: {
        name: "Composite",
        className: "WebHookActivity",
        uberParent: "ControlActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ControlActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ControlActivity.type.modelProperties), { policy: {
                serializedName: "policy",
                type: {
                    name: "Composite",
                    className: "SecureInputOutputPolicy"
                }
            }, method: {
                serializedName: "typeProperties.method",
                required: true,
                type: {
                    name: "String"
                }
            }, url: {
                serializedName: "typeProperties.url",
                required: true,
                type: {
                    name: "any"
                }
            }, timeout: {
                serializedName: "typeProperties.timeout",
                type: {
                    name: "String"
                }
            }, headers: {
                serializedName: "typeProperties.headers",
                type: {
                    name: "any"
                }
            }, body: {
                serializedName: "typeProperties.body",
                type: {
                    name: "any"
                }
            }, authentication: {
                serializedName: "typeProperties.authentication",
                type: {
                    name: "Composite",
                    className: "WebActivityAuthentication"
                }
            }, reportStatusOnCallBack: {
                serializedName: "typeProperties.reportStatusOnCallBack",
                type: {
                    name: "any"
                }
            } })
    }
};
const CopyActivity = {
    serializedName: "Copy",
    type: {
        name: "Composite",
        className: "CopyActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ExecutionActivity.type.modelProperties), { inputs: {
                serializedName: "inputs",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DatasetReference"
                        }
                    }
                }
            }, outputs: {
                serializedName: "outputs",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DatasetReference"
                        }
                    }
                }
            }, source: {
                serializedName: "typeProperties.source",
                type: {
                    name: "Composite",
                    className: "CopySource"
                }
            }, sink: {
                serializedName: "typeProperties.sink",
                type: {
                    name: "Composite",
                    className: "CopySink"
                }
            }, translator: {
                serializedName: "typeProperties.translator",
                type: {
                    name: "any"
                }
            }, enableStaging: {
                serializedName: "typeProperties.enableStaging",
                type: {
                    name: "any"
                }
            }, stagingSettings: {
                serializedName: "typeProperties.stagingSettings",
                type: {
                    name: "Composite",
                    className: "StagingSettings"
                }
            }, parallelCopies: {
                serializedName: "typeProperties.parallelCopies",
                type: {
                    name: "any"
                }
            }, dataIntegrationUnits: {
                serializedName: "typeProperties.dataIntegrationUnits",
                type: {
                    name: "any"
                }
            }, enableSkipIncompatibleRow: {
                serializedName: "typeProperties.enableSkipIncompatibleRow",
                type: {
                    name: "any"
                }
            }, redirectIncompatibleRowSettings: {
                serializedName: "typeProperties.redirectIncompatibleRowSettings",
                type: {
                    name: "Composite",
                    className: "RedirectIncompatibleRowSettings"
                }
            }, logStorageSettings: {
                serializedName: "typeProperties.logStorageSettings",
                type: {
                    name: "Composite",
                    className: "LogStorageSettings"
                }
            }, logSettings: {
                serializedName: "typeProperties.logSettings",
                type: {
                    name: "Composite",
                    className: "LogSettings"
                }
            }, preserveRules: {
                serializedName: "typeProperties.preserveRules",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any"
                        }
                    }
                }
            }, preserve: {
                serializedName: "typeProperties.preserve",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any"
                        }
                    }
                }
            }, validateDataConsistency: {
                serializedName: "typeProperties.validateDataConsistency",
                type: {
                    name: "any"
                }
            }, skipErrorFile: {
                serializedName: "typeProperties.skipErrorFile",
                type: {
                    name: "Composite",
                    className: "SkipErrorFile"
                }
            } })
    }
};
const HDInsightHiveActivity = {
    serializedName: "HDInsightHive",
    type: {
        name: "Composite",
        className: "HDInsightHiveActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ExecutionActivity.type.modelProperties), { storageLinkedServices: {
                serializedName: "typeProperties.storageLinkedServices",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LinkedServiceReference"
                        }
                    }
                }
            }, arguments: {
                serializedName: "typeProperties.arguments",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any"
                        }
                    }
                }
            }, getDebugInfo: {
                serializedName: "typeProperties.getDebugInfo",
                type: {
                    name: "String"
                }
            }, scriptPath: {
                serializedName: "typeProperties.scriptPath",
                type: {
                    name: "any"
                }
            }, scriptLinkedService: {
                serializedName: "typeProperties.scriptLinkedService",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            }, defines: {
                serializedName: "typeProperties.defines",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }, variables: {
                serializedName: "typeProperties.variables",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }, queryTimeout: {
                serializedName: "typeProperties.queryTimeout",
                type: {
                    name: "Number"
                }
            } })
    }
};
const HDInsightPigActivity = {
    serializedName: "HDInsightPig",
    type: {
        name: "Composite",
        className: "HDInsightPigActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ExecutionActivity.type.modelProperties), { storageLinkedServices: {
                serializedName: "typeProperties.storageLinkedServices",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LinkedServiceReference"
                        }
                    }
                }
            }, arguments: {
                serializedName: "typeProperties.arguments",
                type: {
                    name: "any"
                }
            }, getDebugInfo: {
                serializedName: "typeProperties.getDebugInfo",
                type: {
                    name: "String"
                }
            }, scriptPath: {
                serializedName: "typeProperties.scriptPath",
                type: {
                    name: "any"
                }
            }, scriptLinkedService: {
                serializedName: "typeProperties.scriptLinkedService",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            }, defines: {
                serializedName: "typeProperties.defines",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            } })
    }
};
const HDInsightMapReduceActivity = {
    serializedName: "HDInsightMapReduce",
    type: {
        name: "Composite",
        className: "HDInsightMapReduceActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ExecutionActivity.type.modelProperties), { storageLinkedServices: {
                serializedName: "typeProperties.storageLinkedServices",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LinkedServiceReference"
                        }
                    }
                }
            }, arguments: {
                serializedName: "typeProperties.arguments",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any"
                        }
                    }
                }
            }, getDebugInfo: {
                serializedName: "typeProperties.getDebugInfo",
                type: {
                    name: "String"
                }
            }, className: {
                serializedName: "typeProperties.className",
                required: true,
                type: {
                    name: "any"
                }
            }, jarFilePath: {
                serializedName: "typeProperties.jarFilePath",
                required: true,
                type: {
                    name: "any"
                }
            }, jarLinkedService: {
                serializedName: "typeProperties.jarLinkedService",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            }, jarLibs: {
                serializedName: "typeProperties.jarLibs",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any"
                        }
                    }
                }
            }, defines: {
                serializedName: "typeProperties.defines",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            } })
    }
};
const HDInsightStreamingActivity = {
    serializedName: "HDInsightStreaming",
    type: {
        name: "Composite",
        className: "HDInsightStreamingActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ExecutionActivity.type.modelProperties), { storageLinkedServices: {
                serializedName: "typeProperties.storageLinkedServices",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LinkedServiceReference"
                        }
                    }
                }
            }, arguments: {
                serializedName: "typeProperties.arguments",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any"
                        }
                    }
                }
            }, getDebugInfo: {
                serializedName: "typeProperties.getDebugInfo",
                type: {
                    name: "String"
                }
            }, mapper: {
                serializedName: "typeProperties.mapper",
                required: true,
                type: {
                    name: "any"
                }
            }, reducer: {
                serializedName: "typeProperties.reducer",
                required: true,
                type: {
                    name: "any"
                }
            }, input: {
                serializedName: "typeProperties.input",
                required: true,
                type: {
                    name: "any"
                }
            }, output: {
                serializedName: "typeProperties.output",
                required: true,
                type: {
                    name: "any"
                }
            }, filePaths: {
                serializedName: "typeProperties.filePaths",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any"
                        }
                    }
                }
            }, fileLinkedService: {
                serializedName: "typeProperties.fileLinkedService",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            }, combiner: {
                serializedName: "typeProperties.combiner",
                type: {
                    name: "any"
                }
            }, commandEnvironment: {
                serializedName: "typeProperties.commandEnvironment",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any"
                        }
                    }
                }
            }, defines: {
                serializedName: "typeProperties.defines",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            } })
    }
};
const HDInsightSparkActivity = {
    serializedName: "HDInsightSpark",
    type: {
        name: "Composite",
        className: "HDInsightSparkActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ExecutionActivity.type.modelProperties), { rootPath: {
                serializedName: "typeProperties.rootPath",
                required: true,
                type: {
                    name: "any"
                }
            }, entryFilePath: {
                serializedName: "typeProperties.entryFilePath",
                required: true,
                type: {
                    name: "any"
                }
            }, arguments: {
                serializedName: "typeProperties.arguments",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any"
                        }
                    }
                }
            }, getDebugInfo: {
                serializedName: "typeProperties.getDebugInfo",
                type: {
                    name: "String"
                }
            }, sparkJobLinkedService: {
                serializedName: "typeProperties.sparkJobLinkedService",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            }, className: {
                serializedName: "typeProperties.className",
                type: {
                    name: "String"
                }
            }, proxyUser: {
                serializedName: "typeProperties.proxyUser",
                type: {
                    name: "any"
                }
            }, sparkConfig: {
                serializedName: "typeProperties.sparkConfig",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            } })
    }
};
const ExecuteSsisPackageActivity = {
    serializedName: "ExecuteSSISPackage",
    type: {
        name: "Composite",
        className: "ExecuteSsisPackageActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ExecutionActivity.type.modelProperties), { packageLocation: {
                serializedName: "typeProperties.packageLocation",
                type: {
                    name: "Composite",
                    className: "SsisPackageLocation"
                }
            }, runtime: {
                serializedName: "typeProperties.runtime",
                type: {
                    name: "any"
                }
            }, loggingLevel: {
                serializedName: "typeProperties.loggingLevel",
                type: {
                    name: "any"
                }
            }, environmentPath: {
                serializedName: "typeProperties.environmentPath",
                type: {
                    name: "any"
                }
            }, executionCredential: {
                serializedName: "typeProperties.executionCredential",
                type: {
                    name: "Composite",
                    className: "SsisExecutionCredential"
                }
            }, connectVia: {
                serializedName: "typeProperties.connectVia",
                type: {
                    name: "Composite",
                    className: "IntegrationRuntimeReference"
                }
            }, projectParameters: {
                serializedName: "typeProperties.projectParameters",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Composite", className: "SsisExecutionParameter" }
                    }
                }
            }, packageParameters: {
                serializedName: "typeProperties.packageParameters",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Composite", className: "SsisExecutionParameter" }
                    }
                }
            }, projectConnectionManagers: {
                serializedName: "typeProperties.projectConnectionManagers",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Dictionary",
                            value: {
                                type: { name: "Composite", className: "SsisExecutionParameter" }
                            }
                        }
                    }
                }
            }, packageConnectionManagers: {
                serializedName: "typeProperties.packageConnectionManagers",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Dictionary",
                            value: {
                                type: { name: "Composite", className: "SsisExecutionParameter" }
                            }
                        }
                    }
                }
            }, propertyOverrides: {
                serializedName: "typeProperties.propertyOverrides",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Composite", className: "SsisPropertyOverride" }
                    }
                }
            }, logLocation: {
                serializedName: "typeProperties.logLocation",
                type: {
                    name: "Composite",
                    className: "SsisLogLocation"
                }
            } })
    }
};
const CustomActivity = {
    serializedName: "Custom",
    type: {
        name: "Composite",
        className: "CustomActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ExecutionActivity.type.modelProperties), { command: {
                serializedName: "typeProperties.command",
                required: true,
                type: {
                    name: "any"
                }
            }, resourceLinkedService: {
                serializedName: "typeProperties.resourceLinkedService",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            }, folderPath: {
                serializedName: "typeProperties.folderPath",
                type: {
                    name: "any"
                }
            }, referenceObjects: {
                serializedName: "typeProperties.referenceObjects",
                type: {
                    name: "Composite",
                    className: "CustomActivityReferenceObject"
                }
            }, extendedProperties: {
                serializedName: "typeProperties.extendedProperties",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }, retentionTimeInDays: {
                serializedName: "typeProperties.retentionTimeInDays",
                type: {
                    name: "any"
                }
            }, autoUserSpecification: {
                serializedName: "typeProperties.autoUserSpecification",
                type: {
                    name: "any"
                }
            } })
    }
};
const SqlServerStoredProcedureActivity = {
    serializedName: "SqlServerStoredProcedure",
    type: {
        name: "Composite",
        className: "SqlServerStoredProcedureActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ExecutionActivity.type.modelProperties), { storedProcedureName: {
                serializedName: "typeProperties.storedProcedureName",
                required: true,
                type: {
                    name: "any"
                }
            }, storedProcedureParameters: {
                serializedName: "typeProperties.storedProcedureParameters",
                type: {
                    name: "any"
                }
            } })
    }
};
const DeleteActivity = {
    serializedName: "Delete",
    type: {
        name: "Composite",
        className: "DeleteActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ExecutionActivity.type.modelProperties), { recursive: {
                serializedName: "typeProperties.recursive",
                type: {
                    name: "any"
                }
            }, maxConcurrentConnections: {
                constraints: {
                    InclusiveMinimum: 1
                },
                serializedName: "typeProperties.maxConcurrentConnections",
                type: {
                    name: "Number"
                }
            }, enableLogging: {
                serializedName: "typeProperties.enableLogging",
                type: {
                    name: "any"
                }
            }, logStorageSettings: {
                serializedName: "typeProperties.logStorageSettings",
                type: {
                    name: "Composite",
                    className: "LogStorageSettings"
                }
            }, dataset: {
                serializedName: "typeProperties.dataset",
                type: {
                    name: "Composite",
                    className: "DatasetReference"
                }
            }, storeSettings: {
                serializedName: "typeProperties.storeSettings",
                type: {
                    name: "Composite",
                    className: "StoreReadSettings"
                }
            } })
    }
};
const AzureDataExplorerCommandActivity = {
    serializedName: "AzureDataExplorerCommand",
    type: {
        name: "Composite",
        className: "AzureDataExplorerCommandActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ExecutionActivity.type.modelProperties), { command: {
                serializedName: "typeProperties.command",
                required: true,
                type: {
                    name: "any"
                }
            }, commandTimeout: {
                serializedName: "typeProperties.commandTimeout",
                type: {
                    name: "any"
                }
            } })
    }
};
const LookupActivity = {
    serializedName: "Lookup",
    type: {
        name: "Composite",
        className: "LookupActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ExecutionActivity.type.modelProperties), { source: {
                serializedName: "typeProperties.source",
                type: {
                    name: "Composite",
                    className: "CopySource"
                }
            }, dataset: {
                serializedName: "typeProperties.dataset",
                type: {
                    name: "Composite",
                    className: "DatasetReference"
                }
            }, firstRowOnly: {
                serializedName: "typeProperties.firstRowOnly",
                type: {
                    name: "any"
                }
            } })
    }
};
const WebActivity = {
    serializedName: "WebActivity",
    type: {
        name: "Composite",
        className: "WebActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ExecutionActivity.type.modelProperties), { method: {
                serializedName: "typeProperties.method",
                required: true,
                type: {
                    name: "String"
                }
            }, url: {
                serializedName: "typeProperties.url",
                required: true,
                type: {
                    name: "any"
                }
            }, headers: {
                serializedName: "typeProperties.headers",
                type: {
                    name: "any"
                }
            }, body: {
                serializedName: "typeProperties.body",
                type: {
                    name: "any"
                }
            }, authentication: {
                serializedName: "typeProperties.authentication",
                type: {
                    name: "Composite",
                    className: "WebActivityAuthentication"
                }
            }, disableCertValidation: {
                serializedName: "typeProperties.disableCertValidation",
                type: {
                    name: "Boolean"
                }
            }, datasets: {
                serializedName: "typeProperties.datasets",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DatasetReference"
                        }
                    }
                }
            }, linkedServices: {
                serializedName: "typeProperties.linkedServices",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LinkedServiceReference"
                        }
                    }
                }
            }, connectVia: {
                serializedName: "typeProperties.connectVia",
                type: {
                    name: "Composite",
                    className: "IntegrationRuntimeReference"
                }
            } })
    }
};
const GetMetadataActivity = {
    serializedName: "GetMetadata",
    type: {
        name: "Composite",
        className: "GetMetadataActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ExecutionActivity.type.modelProperties), { dataset: {
                serializedName: "typeProperties.dataset",
                type: {
                    name: "Composite",
                    className: "DatasetReference"
                }
            }, fieldList: {
                serializedName: "typeProperties.fieldList",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any"
                        }
                    }
                }
            }, storeSettings: {
                serializedName: "typeProperties.storeSettings",
                type: {
                    name: "Composite",
                    className: "StoreReadSettings"
                }
            }, formatSettings: {
                serializedName: "typeProperties.formatSettings",
                type: {
                    name: "Composite",
                    className: "FormatReadSettings"
                }
            } })
    }
};
const AzureMLBatchExecutionActivity = {
    serializedName: "AzureMLBatchExecution",
    type: {
        name: "Composite",
        className: "AzureMLBatchExecutionActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ExecutionActivity.type.modelProperties), { globalParameters: {
                serializedName: "typeProperties.globalParameters",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }, webServiceOutputs: {
                serializedName: "typeProperties.webServiceOutputs",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Composite", className: "AzureMLWebServiceFile" }
                    }
                }
            }, webServiceInputs: {
                serializedName: "typeProperties.webServiceInputs",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Composite", className: "AzureMLWebServiceFile" }
                    }
                }
            } })
    }
};
const AzureMLUpdateResourceActivity = {
    serializedName: "AzureMLUpdateResource",
    type: {
        name: "Composite",
        className: "AzureMLUpdateResourceActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ExecutionActivity.type.modelProperties), { trainedModelName: {
                serializedName: "typeProperties.trainedModelName",
                required: true,
                type: {
                    name: "any"
                }
            }, trainedModelLinkedServiceName: {
                serializedName: "typeProperties.trainedModelLinkedServiceName",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            }, trainedModelFilePath: {
                serializedName: "typeProperties.trainedModelFilePath",
                required: true,
                type: {
                    name: "any"
                }
            } })
    }
};
const AzureMLExecutePipelineActivity = {
    serializedName: "AzureMLExecutePipeline",
    type: {
        name: "Composite",
        className: "AzureMLExecutePipelineActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ExecutionActivity.type.modelProperties), { mlPipelineId: {
                serializedName: "typeProperties.mlPipelineId",
                type: {
                    name: "any"
                }
            }, mlPipelineEndpointId: {
                serializedName: "typeProperties.mlPipelineEndpointId",
                type: {
                    name: "any"
                }
            }, version: {
                serializedName: "typeProperties.version",
                type: {
                    name: "any"
                }
            }, experimentName: {
                serializedName: "typeProperties.experimentName",
                type: {
                    name: "any"
                }
            }, mlPipelineParameters: {
                serializedName: "typeProperties.mlPipelineParameters",
                type: {
                    name: "any"
                }
            }, dataPathAssignments: {
                serializedName: "typeProperties.dataPathAssignments",
                type: {
                    name: "any"
                }
            }, mlParentRunId: {
                serializedName: "typeProperties.mlParentRunId",
                type: {
                    name: "any"
                }
            }, continueOnStepFailure: {
                serializedName: "typeProperties.continueOnStepFailure",
                type: {
                    name: "any"
                }
            } })
    }
};
const DataLakeAnalyticsUsqlActivity = {
    serializedName: "DataLakeAnalyticsU-SQL",
    type: {
        name: "Composite",
        className: "DataLakeAnalyticsUsqlActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ExecutionActivity.type.modelProperties), { scriptPath: {
                serializedName: "typeProperties.scriptPath",
                required: true,
                type: {
                    name: "any"
                }
            }, scriptLinkedService: {
                serializedName: "typeProperties.scriptLinkedService",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            }, degreeOfParallelism: {
                serializedName: "typeProperties.degreeOfParallelism",
                type: {
                    name: "any"
                }
            }, priority: {
                serializedName: "typeProperties.priority",
                type: {
                    name: "any"
                }
            }, parameters: {
                serializedName: "typeProperties.parameters",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }, runtimeVersion: {
                serializedName: "typeProperties.runtimeVersion",
                type: {
                    name: "any"
                }
            }, compilationMode: {
                serializedName: "typeProperties.compilationMode",
                type: {
                    name: "any"
                }
            } })
    }
};
const DatabricksNotebookActivity = {
    serializedName: "DatabricksNotebook",
    type: {
        name: "Composite",
        className: "DatabricksNotebookActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ExecutionActivity.type.modelProperties), { notebookPath: {
                serializedName: "typeProperties.notebookPath",
                required: true,
                type: {
                    name: "any"
                }
            }, baseParameters: {
                serializedName: "typeProperties.baseParameters",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }, libraries: {
                serializedName: "typeProperties.libraries",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Dictionary",
                            value: { type: { name: "any" } }
                        }
                    }
                }
            } })
    }
};
const DatabricksSparkJarActivity = {
    serializedName: "DatabricksSparkJar",
    type: {
        name: "Composite",
        className: "DatabricksSparkJarActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ExecutionActivity.type.modelProperties), { mainClassName: {
                serializedName: "typeProperties.mainClassName",
                required: true,
                type: {
                    name: "any"
                }
            }, parameters: {
                serializedName: "typeProperties.parameters",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any"
                        }
                    }
                }
            }, libraries: {
                serializedName: "typeProperties.libraries",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Dictionary",
                            value: { type: { name: "any" } }
                        }
                    }
                }
            } })
    }
};
const DatabricksSparkPythonActivity = {
    serializedName: "DatabricksSparkPython",
    type: {
        name: "Composite",
        className: "DatabricksSparkPythonActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ExecutionActivity.type.modelProperties), { pythonFile: {
                serializedName: "typeProperties.pythonFile",
                required: true,
                type: {
                    name: "any"
                }
            }, parameters: {
                serializedName: "typeProperties.parameters",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any"
                        }
                    }
                }
            }, libraries: {
                serializedName: "typeProperties.libraries",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Dictionary",
                            value: { type: { name: "any" } }
                        }
                    }
                }
            } })
    }
};
const AzureFunctionActivity = {
    serializedName: "AzureFunctionActivity",
    type: {
        name: "Composite",
        className: "AzureFunctionActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ExecutionActivity.type.modelProperties), { method: {
                serializedName: "typeProperties.method",
                required: true,
                type: {
                    name: "String"
                }
            }, functionName: {
                serializedName: "typeProperties.functionName",
                required: true,
                type: {
                    name: "any"
                }
            }, headers: {
                serializedName: "typeProperties.headers",
                type: {
                    name: "any"
                }
            }, body: {
                serializedName: "typeProperties.body",
                type: {
                    name: "any"
                }
            } })
    }
};
const ExecuteDataFlowActivity = {
    serializedName: "ExecuteDataFlow",
    type: {
        name: "Composite",
        className: "ExecuteDataFlowActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ExecutionActivity.type.modelProperties), { dataFlow: {
                serializedName: "typeProperties.dataFlow",
                type: {
                    name: "Composite",
                    className: "DataFlowReference"
                }
            }, staging: {
                serializedName: "typeProperties.staging",
                type: {
                    name: "Composite",
                    className: "DataFlowStagingInfo"
                }
            }, integrationRuntime: {
                serializedName: "typeProperties.integrationRuntime",
                type: {
                    name: "Composite",
                    className: "IntegrationRuntimeReference"
                }
            }, compute: {
                serializedName: "typeProperties.compute",
                type: {
                    name: "Composite",
                    className: "ExecuteDataFlowActivityTypePropertiesCompute"
                }
            }, traceLevel: {
                serializedName: "typeProperties.traceLevel",
                type: {
                    name: "any"
                }
            }, continueOnError: {
                serializedName: "typeProperties.continueOnError",
                type: {
                    name: "any"
                }
            }, runConcurrently: {
                serializedName: "typeProperties.runConcurrently",
                type: {
                    name: "any"
                }
            }, sourceStagingConcurrency: {
                serializedName: "typeProperties.sourceStagingConcurrency",
                type: {
                    name: "any"
                }
            } })
    }
};
const ScriptActivity = {
    serializedName: "Script",
    type: {
        name: "Composite",
        className: "ScriptActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ExecutionActivity.type.modelProperties), { scriptBlockExecutionTimeout: {
                serializedName: "typeProperties.scriptBlockExecutionTimeout",
                type: {
                    name: "any"
                }
            }, scripts: {
                serializedName: "typeProperties.scripts",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ScriptActivityScriptBlock"
                        }
                    }
                }
            }, logSettings: {
                serializedName: "typeProperties.logSettings",
                type: {
                    name: "Composite",
                    className: "ScriptActivityTypePropertiesLogSettings"
                }
            } })
    }
};
const SynapseNotebookActivity = {
    serializedName: "SynapseNotebook",
    type: {
        name: "Composite",
        className: "SynapseNotebookActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ExecutionActivity.type.modelProperties), { notebook: {
                serializedName: "typeProperties.notebook",
                type: {
                    name: "Composite",
                    className: "SynapseNotebookReference"
                }
            }, sparkPool: {
                serializedName: "typeProperties.sparkPool",
                type: {
                    name: "Composite",
                    className: "BigDataPoolParametrizationReference"
                }
            }, parameters: {
                serializedName: "typeProperties.parameters",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "Composite", className: "NotebookParameter" } }
                }
            }, executorSize: {
                serializedName: "typeProperties.executorSize",
                type: {
                    name: "any"
                }
            }, conf: {
                serializedName: "typeProperties.conf",
                type: {
                    name: "any"
                }
            }, driverSize: {
                serializedName: "typeProperties.driverSize",
                type: {
                    name: "any"
                }
            }, numExecutors: {
                serializedName: "typeProperties.numExecutors",
                type: {
                    name: "any"
                }
            }, configurationType: {
                serializedName: "typeProperties.configurationType",
                type: {
                    name: "String"
                }
            }, targetSparkConfiguration: {
                serializedName: "typeProperties.targetSparkConfiguration",
                type: {
                    name: "Composite",
                    className: "SparkConfigurationParametrizationReference"
                }
            }, sparkConfig: {
                serializedName: "typeProperties.sparkConfig",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            } })
    }
};
const SynapseSparkJobDefinitionActivity = {
    serializedName: "SparkJob",
    type: {
        name: "Composite",
        className: "SynapseSparkJobDefinitionActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ExecutionActivity.type.modelProperties), { sparkJob: {
                serializedName: "typeProperties.sparkJob",
                type: {
                    name: "Composite",
                    className: "SynapseSparkJobReference"
                }
            }, arguments: {
                serializedName: "typeProperties.args",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any"
                        }
                    }
                }
            }, file: {
                serializedName: "typeProperties.file",
                type: {
                    name: "any"
                }
            }, scanFolder: {
                serializedName: "typeProperties.scanFolder",
                type: {
                    name: "any"
                }
            }, className: {
                serializedName: "typeProperties.className",
                type: {
                    name: "any"
                }
            }, files: {
                serializedName: "typeProperties.files",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any"
                        }
                    }
                }
            }, pythonCodeReference: {
                serializedName: "typeProperties.pythonCodeReference",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any"
                        }
                    }
                }
            }, filesV2: {
                serializedName: "typeProperties.filesV2",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any"
                        }
                    }
                }
            }, targetBigDataPool: {
                serializedName: "typeProperties.targetBigDataPool",
                type: {
                    name: "Composite",
                    className: "BigDataPoolParametrizationReference"
                }
            }, executorSize: {
                serializedName: "typeProperties.executorSize",
                type: {
                    name: "any"
                }
            }, conf: {
                serializedName: "typeProperties.conf",
                type: {
                    name: "any"
                }
            }, driverSize: {
                serializedName: "typeProperties.driverSize",
                type: {
                    name: "any"
                }
            }, numExecutors: {
                serializedName: "typeProperties.numExecutors",
                type: {
                    name: "any"
                }
            }, configurationType: {
                serializedName: "typeProperties.configurationType",
                type: {
                    name: "String"
                }
            }, targetSparkConfiguration: {
                serializedName: "typeProperties.targetSparkConfiguration",
                type: {
                    name: "Composite",
                    className: "SparkConfigurationParametrizationReference"
                }
            }, sparkConfig: {
                serializedName: "typeProperties.sparkConfig",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            } })
    }
};
const ScheduleTrigger = {
    serializedName: "ScheduleTrigger",
    type: {
        name: "Composite",
        className: "ScheduleTrigger",
        uberParent: "MultiplePipelineTrigger",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: MultiplePipelineTrigger.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, MultiplePipelineTrigger.type.modelProperties), { recurrence: {
                serializedName: "typeProperties.recurrence",
                type: {
                    name: "Composite",
                    className: "ScheduleTriggerRecurrence"
                }
            } })
    }
};
const BlobTrigger = {
    serializedName: "BlobTrigger",
    type: {
        name: "Composite",
        className: "BlobTrigger",
        uberParent: "MultiplePipelineTrigger",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: MultiplePipelineTrigger.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, MultiplePipelineTrigger.type.modelProperties), { folderPath: {
                serializedName: "typeProperties.folderPath",
                required: true,
                type: {
                    name: "String"
                }
            }, maxConcurrency: {
                serializedName: "typeProperties.maxConcurrency",
                required: true,
                type: {
                    name: "Number"
                }
            }, linkedService: {
                serializedName: "typeProperties.linkedService",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            } })
    }
};
const BlobEventsTrigger = {
    serializedName: "BlobEventsTrigger",
    type: {
        name: "Composite",
        className: "BlobEventsTrigger",
        uberParent: "MultiplePipelineTrigger",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: MultiplePipelineTrigger.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, MultiplePipelineTrigger.type.modelProperties), { blobPathBeginsWith: {
                serializedName: "typeProperties.blobPathBeginsWith",
                type: {
                    name: "String"
                }
            }, blobPathEndsWith: {
                serializedName: "typeProperties.blobPathEndsWith",
                type: {
                    name: "String"
                }
            }, ignoreEmptyBlobs: {
                serializedName: "typeProperties.ignoreEmptyBlobs",
                type: {
                    name: "Boolean"
                }
            }, events: {
                serializedName: "typeProperties.events",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, scope: {
                serializedName: "typeProperties.scope",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const CustomEventsTrigger = {
    serializedName: "CustomEventsTrigger",
    type: {
        name: "Composite",
        className: "CustomEventsTrigger",
        uberParent: "MultiplePipelineTrigger",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: MultiplePipelineTrigger.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, MultiplePipelineTrigger.type.modelProperties), { subjectBeginsWith: {
                serializedName: "typeProperties.subjectBeginsWith",
                type: {
                    name: "String"
                }
            }, subjectEndsWith: {
                serializedName: "typeProperties.subjectEndsWith",
                type: {
                    name: "String"
                }
            }, events: {
                serializedName: "typeProperties.events",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any"
                        }
                    }
                }
            }, scope: {
                serializedName: "typeProperties.scope",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const PowerQuerySource = {
    type: {
        name: "Composite",
        className: "PowerQuerySource",
        modelProperties: Object.assign(Object.assign({}, DataFlowSource.type.modelProperties), { script: {
                serializedName: "script",
                type: {
                    name: "String"
                }
            } })
    }
};
const PowerQuerySink = {
    type: {
        name: "Composite",
        className: "PowerQuerySink",
        modelProperties: Object.assign(Object.assign({}, DataFlowSink.type.modelProperties), { script: {
                serializedName: "script",
                type: {
                    name: "String"
                }
            } })
    }
};
const AzureTableSource = {
    serializedName: "AzureTableSource",
    type: {
        name: "Composite",
        className: "AzureTableSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { azureTableSourceQuery: {
                serializedName: "azureTableSourceQuery",
                type: {
                    name: "any"
                }
            }, azureTableSourceIgnoreTableNotFound: {
                serializedName: "azureTableSourceIgnoreTableNotFound",
                type: {
                    name: "any"
                }
            } })
    }
};
const InformixSource = {
    serializedName: "InformixSource",
    type: {
        name: "Composite",
        className: "InformixSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
const Db2Source = {
    serializedName: "Db2Source",
    type: {
        name: "Composite",
        className: "Db2Source",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
const OdbcSource = {
    serializedName: "OdbcSource",
    type: {
        name: "Composite",
        className: "OdbcSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
const MySqlSource = {
    serializedName: "MySqlSource",
    type: {
        name: "Composite",
        className: "MySqlSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
const PostgreSqlSource = {
    serializedName: "PostgreSqlSource",
    type: {
        name: "Composite",
        className: "PostgreSqlSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
const SybaseSource = {
    serializedName: "SybaseSource",
    type: {
        name: "Composite",
        className: "SybaseSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
const SapBwSource = {
    serializedName: "SapBwSource",
    type: {
        name: "Composite",
        className: "SapBwSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
const SalesforceSource = {
    serializedName: "SalesforceSource",
    type: {
        name: "Composite",
        className: "SalesforceSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            }, readBehavior: {
                serializedName: "readBehavior",
                type: {
                    name: "any"
                }
            } })
    }
};
const SapCloudForCustomerSource = {
    serializedName: "SapCloudForCustomerSource",
    type: {
        name: "Composite",
        className: "SapCloudForCustomerSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            }, httpRequestTimeout: {
                serializedName: "httpRequestTimeout",
                type: {
                    name: "any"
                }
            } })
    }
};
const SapEccSource = {
    serializedName: "SapEccSource",
    type: {
        name: "Composite",
        className: "SapEccSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            }, httpRequestTimeout: {
                serializedName: "httpRequestTimeout",
                type: {
                    name: "any"
                }
            } })
    }
};
const SapHanaSource = {
    serializedName: "SapHanaSource",
    type: {
        name: "Composite",
        className: "SapHanaSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            }, packetSize: {
                serializedName: "packetSize",
                type: {
                    name: "any"
                }
            }, partitionOption: {
                serializedName: "partitionOption",
                type: {
                    name: "any"
                }
            }, partitionSettings: {
                serializedName: "partitionSettings",
                type: {
                    name: "Composite",
                    className: "SapHanaPartitionSettings"
                }
            } })
    }
};
const SapOpenHubSource = {
    serializedName: "SapOpenHubSource",
    type: {
        name: "Composite",
        className: "SapOpenHubSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { excludeLastRequest: {
                serializedName: "excludeLastRequest",
                type: {
                    name: "any"
                }
            }, baseRequestId: {
                serializedName: "baseRequestId",
                type: {
                    name: "any"
                }
            }, customRfcReadTableFunctionModule: {
                serializedName: "customRfcReadTableFunctionModule",
                type: {
                    name: "any"
                }
            }, sapDataColumnDelimiter: {
                serializedName: "sapDataColumnDelimiter",
                type: {
                    name: "any"
                }
            } })
    }
};
const SapOdpSource = {
    serializedName: "SapOdpSource",
    type: {
        name: "Composite",
        className: "SapOdpSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { extractionMode: {
                serializedName: "extractionMode",
                type: {
                    name: "any"
                }
            }, subscriberProcess: {
                serializedName: "subscriberProcess",
                type: {
                    name: "any"
                }
            }, selection: {
                serializedName: "selection",
                type: {
                    name: "any"
                }
            }, projection: {
                serializedName: "projection",
                type: {
                    name: "any"
                }
            } })
    }
};
const SapTableSource = {
    serializedName: "SapTableSource",
    type: {
        name: "Composite",
        className: "SapTableSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { rowCount: {
                serializedName: "rowCount",
                type: {
                    name: "any"
                }
            }, rowSkips: {
                serializedName: "rowSkips",
                type: {
                    name: "any"
                }
            }, rfcTableFields: {
                serializedName: "rfcTableFields",
                type: {
                    name: "any"
                }
            }, rfcTableOptions: {
                serializedName: "rfcTableOptions",
                type: {
                    name: "any"
                }
            }, batchSize: {
                serializedName: "batchSize",
                type: {
                    name: "any"
                }
            }, customRfcReadTableFunctionModule: {
                serializedName: "customRfcReadTableFunctionModule",
                type: {
                    name: "any"
                }
            }, sapDataColumnDelimiter: {
                serializedName: "sapDataColumnDelimiter",
                type: {
                    name: "any"
                }
            }, partitionOption: {
                serializedName: "partitionOption",
                type: {
                    name: "any"
                }
            }, partitionSettings: {
                serializedName: "partitionSettings",
                type: {
                    name: "Composite",
                    className: "SapTablePartitionSettings"
                }
            } })
    }
};
const SqlSource = {
    serializedName: "SqlSource",
    type: {
        name: "Composite",
        className: "SqlSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { sqlReaderQuery: {
                serializedName: "sqlReaderQuery",
                type: {
                    name: "any"
                }
            }, sqlReaderStoredProcedureName: {
                serializedName: "sqlReaderStoredProcedureName",
                type: {
                    name: "any"
                }
            }, storedProcedureParameters: {
                serializedName: "storedProcedureParameters",
                type: {
                    name: "any"
                }
            }, isolationLevel: {
                serializedName: "isolationLevel",
                type: {
                    name: "any"
                }
            }, partitionOption: {
                serializedName: "partitionOption",
                type: {
                    name: "any"
                }
            }, partitionSettings: {
                serializedName: "partitionSettings",
                type: {
                    name: "Composite",
                    className: "SqlPartitionSettings"
                }
            } })
    }
};
const SqlServerSource = {
    serializedName: "SqlServerSource",
    type: {
        name: "Composite",
        className: "SqlServerSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { sqlReaderQuery: {
                serializedName: "sqlReaderQuery",
                type: {
                    name: "any"
                }
            }, sqlReaderStoredProcedureName: {
                serializedName: "sqlReaderStoredProcedureName",
                type: {
                    name: "any"
                }
            }, storedProcedureParameters: {
                serializedName: "storedProcedureParameters",
                type: {
                    name: "any"
                }
            }, isolationLevel: {
                serializedName: "isolationLevel",
                type: {
                    name: "any"
                }
            }, produceAdditionalTypes: {
                serializedName: "produceAdditionalTypes",
                type: {
                    name: "any"
                }
            }, partitionOption: {
                serializedName: "partitionOption",
                type: {
                    name: "any"
                }
            }, partitionSettings: {
                serializedName: "partitionSettings",
                type: {
                    name: "Composite",
                    className: "SqlPartitionSettings"
                }
            } })
    }
};
const AmazonRdsForSqlServerSource = {
    serializedName: "AmazonRdsForSqlServerSource",
    type: {
        name: "Composite",
        className: "AmazonRdsForSqlServerSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { sqlReaderQuery: {
                serializedName: "sqlReaderQuery",
                type: {
                    name: "any"
                }
            }, sqlReaderStoredProcedureName: {
                serializedName: "sqlReaderStoredProcedureName",
                type: {
                    name: "any"
                }
            }, storedProcedureParameters: {
                serializedName: "storedProcedureParameters",
                type: {
                    name: "any"
                }
            }, isolationLevel: {
                serializedName: "isolationLevel",
                type: {
                    name: "any"
                }
            }, produceAdditionalTypes: {
                serializedName: "produceAdditionalTypes",
                type: {
                    name: "any"
                }
            }, partitionOption: {
                serializedName: "partitionOption",
                type: {
                    name: "any"
                }
            }, partitionSettings: {
                serializedName: "partitionSettings",
                type: {
                    name: "Composite",
                    className: "SqlPartitionSettings"
                }
            } })
    }
};
const AzureSqlSource = {
    serializedName: "AzureSqlSource",
    type: {
        name: "Composite",
        className: "AzureSqlSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { sqlReaderQuery: {
                serializedName: "sqlReaderQuery",
                type: {
                    name: "any"
                }
            }, sqlReaderStoredProcedureName: {
                serializedName: "sqlReaderStoredProcedureName",
                type: {
                    name: "any"
                }
            }, storedProcedureParameters: {
                serializedName: "storedProcedureParameters",
                type: {
                    name: "any"
                }
            }, isolationLevel: {
                serializedName: "isolationLevel",
                type: {
                    name: "any"
                }
            }, produceAdditionalTypes: {
                serializedName: "produceAdditionalTypes",
                type: {
                    name: "any"
                }
            }, partitionOption: {
                serializedName: "partitionOption",
                type: {
                    name: "any"
                }
            }, partitionSettings: {
                serializedName: "partitionSettings",
                type: {
                    name: "Composite",
                    className: "SqlPartitionSettings"
                }
            } })
    }
};
const SqlMISource = {
    serializedName: "SqlMISource",
    type: {
        name: "Composite",
        className: "SqlMISource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { sqlReaderQuery: {
                serializedName: "sqlReaderQuery",
                type: {
                    name: "any"
                }
            }, sqlReaderStoredProcedureName: {
                serializedName: "sqlReaderStoredProcedureName",
                type: {
                    name: "any"
                }
            }, storedProcedureParameters: {
                serializedName: "storedProcedureParameters",
                type: {
                    name: "any"
                }
            }, isolationLevel: {
                serializedName: "isolationLevel",
                type: {
                    name: "any"
                }
            }, produceAdditionalTypes: {
                serializedName: "produceAdditionalTypes",
                type: {
                    name: "any"
                }
            }, partitionOption: {
                serializedName: "partitionOption",
                type: {
                    name: "any"
                }
            }, partitionSettings: {
                serializedName: "partitionSettings",
                type: {
                    name: "Composite",
                    className: "SqlPartitionSettings"
                }
            } })
    }
};
const SqlDWSource = {
    serializedName: "SqlDWSource",
    type: {
        name: "Composite",
        className: "SqlDWSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { sqlReaderQuery: {
                serializedName: "sqlReaderQuery",
                type: {
                    name: "any"
                }
            }, sqlReaderStoredProcedureName: {
                serializedName: "sqlReaderStoredProcedureName",
                type: {
                    name: "any"
                }
            }, storedProcedureParameters: {
                serializedName: "storedProcedureParameters",
                type: {
                    name: "any"
                }
            }, isolationLevel: {
                serializedName: "isolationLevel",
                type: {
                    name: "any"
                }
            }, partitionOption: {
                serializedName: "partitionOption",
                type: {
                    name: "any"
                }
            }, partitionSettings: {
                serializedName: "partitionSettings",
                type: {
                    name: "Composite",
                    className: "SqlPartitionSettings"
                }
            } })
    }
};
const AzureMySqlSource = {
    serializedName: "AzureMySqlSource",
    type: {
        name: "Composite",
        className: "AzureMySqlSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
const TeradataSource = {
    serializedName: "TeradataSource",
    type: {
        name: "Composite",
        className: "TeradataSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            }, partitionOption: {
                serializedName: "partitionOption",
                type: {
                    name: "any"
                }
            }, partitionSettings: {
                serializedName: "partitionSettings",
                type: {
                    name: "Composite",
                    className: "TeradataPartitionSettings"
                }
            } })
    }
};
const CassandraSource = {
    serializedName: "CassandraSource",
    type: {
        name: "Composite",
        className: "CassandraSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            }, consistencyLevel: {
                serializedName: "consistencyLevel",
                type: {
                    name: "String"
                }
            } })
    }
};
const AmazonMWSSource = {
    serializedName: "AmazonMWSSource",
    type: {
        name: "Composite",
        className: "AmazonMWSSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
const AzurePostgreSqlSource = {
    serializedName: "AzurePostgreSqlSource",
    type: {
        name: "Composite",
        className: "AzurePostgreSqlSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
const ConcurSource = {
    serializedName: "ConcurSource",
    type: {
        name: "Composite",
        className: "ConcurSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
const CouchbaseSource = {
    serializedName: "CouchbaseSource",
    type: {
        name: "Composite",
        className: "CouchbaseSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
const DrillSource = {
    serializedName: "DrillSource",
    type: {
        name: "Composite",
        className: "DrillSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
const EloquaSource = {
    serializedName: "EloquaSource",
    type: {
        name: "Composite",
        className: "EloquaSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
const GoogleBigQuerySource = {
    serializedName: "GoogleBigQuerySource",
    type: {
        name: "Composite",
        className: "GoogleBigQuerySource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
const GreenplumSource = {
    serializedName: "GreenplumSource",
    type: {
        name: "Composite",
        className: "GreenplumSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
const HBaseSource = {
    serializedName: "HBaseSource",
    type: {
        name: "Composite",
        className: "HBaseSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
const HiveSource = {
    serializedName: "HiveSource",
    type: {
        name: "Composite",
        className: "HiveSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
const HubspotSource = {
    serializedName: "HubspotSource",
    type: {
        name: "Composite",
        className: "HubspotSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
const ImpalaSource = {
    serializedName: "ImpalaSource",
    type: {
        name: "Composite",
        className: "ImpalaSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
const JiraSource = {
    serializedName: "JiraSource",
    type: {
        name: "Composite",
        className: "JiraSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
const MagentoSource = {
    serializedName: "MagentoSource",
    type: {
        name: "Composite",
        className: "MagentoSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
const MariaDBSource = {
    serializedName: "MariaDBSource",
    type: {
        name: "Composite",
        className: "MariaDBSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
const AzureMariaDBSource = {
    serializedName: "AzureMariaDBSource",
    type: {
        name: "Composite",
        className: "AzureMariaDBSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
const MarketoSource = {
    serializedName: "MarketoSource",
    type: {
        name: "Composite",
        className: "MarketoSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
const PaypalSource = {
    serializedName: "PaypalSource",
    type: {
        name: "Composite",
        className: "PaypalSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
const PhoenixSource = {
    serializedName: "PhoenixSource",
    type: {
        name: "Composite",
        className: "PhoenixSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
const PrestoSource = {
    serializedName: "PrestoSource",
    type: {
        name: "Composite",
        className: "PrestoSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
const QuickBooksSource = {
    serializedName: "QuickBooksSource",
    type: {
        name: "Composite",
        className: "QuickBooksSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
const ServiceNowSource = {
    serializedName: "ServiceNowSource",
    type: {
        name: "Composite",
        className: "ServiceNowSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
const ShopifySource = {
    serializedName: "ShopifySource",
    type: {
        name: "Composite",
        className: "ShopifySource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
const SparkSource = {
    serializedName: "SparkSource",
    type: {
        name: "Composite",
        className: "SparkSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
const SquareSource = {
    serializedName: "SquareSource",
    type: {
        name: "Composite",
        className: "SquareSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
const XeroSource = {
    serializedName: "XeroSource",
    type: {
        name: "Composite",
        className: "XeroSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
const ZohoSource = {
    serializedName: "ZohoSource",
    type: {
        name: "Composite",
        className: "ZohoSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
const NetezzaSource = {
    serializedName: "NetezzaSource",
    type: {
        name: "Composite",
        className: "NetezzaSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            }, partitionOption: {
                serializedName: "partitionOption",
                type: {
                    name: "any"
                }
            }, partitionSettings: {
                serializedName: "partitionSettings",
                type: {
                    name: "Composite",
                    className: "NetezzaPartitionSettings"
                }
            } })
    }
};
const VerticaSource = {
    serializedName: "VerticaSource",
    type: {
        name: "Composite",
        className: "VerticaSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
const SalesforceMarketingCloudSource = {
    serializedName: "SalesforceMarketingCloudSource",
    type: {
        name: "Composite",
        className: "SalesforceMarketingCloudSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
const ResponsysSource = {
    serializedName: "ResponsysSource",
    type: {
        name: "Composite",
        className: "ResponsysSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
const DynamicsAXSource = {
    serializedName: "DynamicsAXSource",
    type: {
        name: "Composite",
        className: "DynamicsAXSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            }, httpRequestTimeout: {
                serializedName: "httpRequestTimeout",
                type: {
                    name: "any"
                }
            } })
    }
};
const OracleServiceCloudSource = {
    serializedName: "OracleServiceCloudSource",
    type: {
        name: "Composite",
        className: "OracleServiceCloudSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
const GoogleAdWordsSource = {
    serializedName: "GoogleAdWordsSource",
    type: {
        name: "Composite",
        className: "GoogleAdWordsSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
const AmazonRedshiftSource = {
    serializedName: "AmazonRedshiftSource",
    type: {
        name: "Composite",
        className: "AmazonRedshiftSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            }, redshiftUnloadSettings: {
                serializedName: "redshiftUnloadSettings",
                type: {
                    name: "Composite",
                    className: "RedshiftUnloadSettings"
                }
            } })
    }
};
const TumblingWindowTriggerDependencyReference = {
    serializedName: "TumblingWindowTriggerDependencyReference",
    type: {
        name: "Composite",
        className: "TumblingWindowTriggerDependencyReference",
        uberParent: "TriggerDependencyReference",
        polymorphicDiscriminator: TriggerDependencyReference.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TriggerDependencyReference.type.modelProperties), { offset: {
                constraints: {
                    Pattern: new RegExp("-?((\\d+)\\.)?(\\d\\d):(60|([0-5][0-9])):(60|([0-5][0-9]))"),
                    MaxLength: 15,
                    MinLength: 8
                },
                serializedName: "offset",
                type: {
                    name: "String"
                }
            }, size: {
                constraints: {
                    Pattern: new RegExp("((\\d+)\\.)?(\\d\\d):(60|([0-5][0-9])):(60|([0-5][0-9]))"),
                    MaxLength: 15,
                    MinLength: 8
                },
                serializedName: "size",
                type: {
                    name: "String"
                }
            } })
    }
};
const DataFlowDebugSessionCreateHeaders = {
    type: {
        name: "Composite",
        className: "DataFlowDebugSessionCreateHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DataFlowDebugSessionExecuteCommandHeaders = {
    type: {
        name: "Composite",
        className: "DataFlowDebugSessionExecuteCommandHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }
        }
    }
};
let discriminators = {
    FactoryRepoConfiguration: FactoryRepoConfiguration,
    IntegrationRuntime: IntegrationRuntime,
    IntegrationRuntimeStatus: IntegrationRuntimeStatus,
    SsisObjectMetadata: SsisObjectMetadata,
    LinkedService: LinkedService,
    Dataset: Dataset,
    Activity: Activity,
    Trigger: Trigger,
    DataFlow: DataFlow,
    Credential: Credential,
    SecretBase: SecretBase,
    DatasetLocation: DatasetLocation,
    DatasetStorageFormat: DatasetStorageFormat,
    CustomSetupBase: CustomSetupBase,
    LinkedIntegrationRuntimeType: LinkedIntegrationRuntimeType,
    WebLinkedServiceTypeProperties: WebLinkedServiceTypeProperties,
    StoreReadSettings: StoreReadSettings,
    StoreWriteSettings: StoreWriteSettings,
    FormatReadSettings: FormatReadSettings,
    CompressionReadSettings: CompressionReadSettings,
    FormatWriteSettings: FormatWriteSettings,
    CopySource: CopySource,
    CopySink: CopySink,
    ExportSettings: ExportSettings,
    ImportSettings: ImportSettings,
    CopyTranslator: CopyTranslator,
    DependencyReference: DependencyReference,
    "FactoryRepoConfiguration.FactoryVSTSConfiguration": FactoryVstsConfiguration,
    "FactoryRepoConfiguration.FactoryGitHubConfiguration": FactoryGitHubConfiguration,
    "IntegrationRuntime.Managed": ManagedIntegrationRuntime,
    "IntegrationRuntime.SelfHosted": SelfHostedIntegrationRuntime,
    "IntegrationRuntimeStatus.Managed": ManagedIntegrationRuntimeStatus,
    "IntegrationRuntimeStatus.SelfHosted": SelfHostedIntegrationRuntimeStatus,
    "SsisObjectMetadata.Folder": SsisFolder,
    "SsisObjectMetadata.Project": SsisProject,
    "SsisObjectMetadata.Package": SsisPackage,
    "SsisObjectMetadata.Environment": SsisEnvironment,
    "LinkedService.AzureStorage": AzureStorageLinkedService,
    "LinkedService.AzureBlobStorage": AzureBlobStorageLinkedService,
    "LinkedService.AzureTableStorage": AzureTableStorageLinkedService,
    "LinkedService.AzureSqlDW": AzureSqlDWLinkedService,
    "LinkedService.SqlServer": SqlServerLinkedService,
    "LinkedService.AmazonRdsForSqlServer": AmazonRdsForSqlServerLinkedService,
    "LinkedService.AzureSqlDatabase": AzureSqlDatabaseLinkedService,
    "LinkedService.AzureSqlMI": AzureSqlMILinkedService,
    "LinkedService.AzureBatch": AzureBatchLinkedService,
    "LinkedService.AzureKeyVault": AzureKeyVaultLinkedService,
    "LinkedService.CosmosDb": CosmosDbLinkedService,
    "LinkedService.Dynamics": DynamicsLinkedService,
    "LinkedService.DynamicsCrm": DynamicsCrmLinkedService,
    "LinkedService.CommonDataServiceForApps": CommonDataServiceForAppsLinkedService,
    "LinkedService.HDInsight": HDInsightLinkedService,
    "LinkedService.FileServer": FileServerLinkedService,
    "LinkedService.AzureFileStorage": AzureFileStorageLinkedService,
    "LinkedService.AmazonS3Compatible": AmazonS3CompatibleLinkedService,
    "LinkedService.OracleCloudStorage": OracleCloudStorageLinkedService,
    "LinkedService.GoogleCloudStorage": GoogleCloudStorageLinkedService,
    "LinkedService.Oracle": OracleLinkedService,
    "LinkedService.AmazonRdsForOracle": AmazonRdsForOracleLinkedService,
    "LinkedService.AzureMySql": AzureMySqlLinkedService,
    "LinkedService.MySql": MySqlLinkedService,
    "LinkedService.PostgreSql": PostgreSqlLinkedService,
    "LinkedService.Sybase": SybaseLinkedService,
    "LinkedService.Db2": Db2LinkedService,
    "LinkedService.Teradata": TeradataLinkedService,
    "LinkedService.AzureML": AzureMLLinkedService,
    "LinkedService.AzureMLService": AzureMLServiceLinkedService,
    "LinkedService.Odbc": OdbcLinkedService,
    "LinkedService.Informix": InformixLinkedService,
    "LinkedService.MicrosoftAccess": MicrosoftAccessLinkedService,
    "LinkedService.Hdfs": HdfsLinkedService,
    "LinkedService.OData": ODataLinkedService,
    "LinkedService.Web": WebLinkedService,
    "LinkedService.Cassandra": CassandraLinkedService,
    "LinkedService.MongoDb": MongoDbLinkedService,
    "LinkedService.MongoDbAtlas": MongoDbAtlasLinkedService,
    "LinkedService.MongoDbV2": MongoDbV2LinkedService,
    "LinkedService.CosmosDbMongoDbApi": CosmosDbMongoDbApiLinkedService,
    "LinkedService.AzureDataLakeStore": AzureDataLakeStoreLinkedService,
    "LinkedService.AzureBlobFS": AzureBlobFSLinkedService,
    "LinkedService.Office365": Office365LinkedService,
    "LinkedService.Salesforce": SalesforceLinkedService,
    "LinkedService.SalesforceServiceCloud": SalesforceServiceCloudLinkedService,
    "LinkedService.SapCloudForCustomer": SapCloudForCustomerLinkedService,
    "LinkedService.SapEcc": SapEccLinkedService,
    "LinkedService.SapOpenHub": SapOpenHubLinkedService,
    "LinkedService.SapOdp": SapOdpLinkedService,
    "LinkedService.RestService": RestServiceLinkedService,
    "LinkedService.TeamDesk": TeamDeskLinkedService,
    "LinkedService.Quickbase": QuickbaseLinkedService,
    "LinkedService.Smartsheet": SmartsheetLinkedService,
    "LinkedService.Zendesk": ZendeskLinkedService,
    "LinkedService.Dataworld": DataworldLinkedService,
    "LinkedService.AppFigures": AppFiguresLinkedService,
    "LinkedService.Asana": AsanaLinkedService,
    "LinkedService.Twilio": TwilioLinkedService,
    "LinkedService.GoogleSheets": GoogleSheetsLinkedService,
    "LinkedService.AmazonS3": AmazonS3LinkedService,
    "LinkedService.AmazonRedshift": AmazonRedshiftLinkedService,
    "LinkedService.CustomDataSource": CustomDataSourceLinkedService,
    "LinkedService.AzureSearch": AzureSearchLinkedService,
    "LinkedService.HttpServer": HttpLinkedService,
    "LinkedService.FtpServer": FtpServerLinkedService,
    "LinkedService.Sftp": SftpServerLinkedService,
    "LinkedService.SapBW": SapBWLinkedService,
    "LinkedService.SapHana": SapHanaLinkedService,
    "LinkedService.AmazonMWS": AmazonMWSLinkedService,
    "LinkedService.AzurePostgreSql": AzurePostgreSqlLinkedService,
    "LinkedService.Concur": ConcurLinkedService,
    "LinkedService.Couchbase": CouchbaseLinkedService,
    "LinkedService.Drill": DrillLinkedService,
    "LinkedService.Eloqua": EloquaLinkedService,
    "LinkedService.GoogleBigQuery": GoogleBigQueryLinkedService,
    "LinkedService.Greenplum": GreenplumLinkedService,
    "LinkedService.HBase": HBaseLinkedService,
    "LinkedService.Hive": HiveLinkedService,
    "LinkedService.Hubspot": HubspotLinkedService,
    "LinkedService.Impala": ImpalaLinkedService,
    "LinkedService.Jira": JiraLinkedService,
    "LinkedService.Magento": MagentoLinkedService,
    "LinkedService.MariaDB": MariaDBLinkedService,
    "LinkedService.AzureMariaDB": AzureMariaDBLinkedService,
    "LinkedService.Marketo": MarketoLinkedService,
    "LinkedService.Paypal": PaypalLinkedService,
    "LinkedService.Phoenix": PhoenixLinkedService,
    "LinkedService.Presto": PrestoLinkedService,
    "LinkedService.QuickBooks": QuickBooksLinkedService,
    "LinkedService.ServiceNow": ServiceNowLinkedService,
    "LinkedService.Shopify": ShopifyLinkedService,
    "LinkedService.Spark": SparkLinkedService,
    "LinkedService.Square": SquareLinkedService,
    "LinkedService.Xero": XeroLinkedService,
    "LinkedService.Zoho": ZohoLinkedService,
    "LinkedService.Vertica": VerticaLinkedService,
    "LinkedService.Netezza": NetezzaLinkedService,
    "LinkedService.SalesforceMarketingCloud": SalesforceMarketingCloudLinkedService,
    "LinkedService.HDInsightOnDemand": HDInsightOnDemandLinkedService,
    "LinkedService.AzureDataLakeAnalytics": AzureDataLakeAnalyticsLinkedService,
    "LinkedService.AzureDatabricks": AzureDatabricksLinkedService,
    "LinkedService.AzureDatabricksDeltaLake": AzureDatabricksDeltaLakeLinkedService,
    "LinkedService.Responsys": ResponsysLinkedService,
    "LinkedService.DynamicsAX": DynamicsAXLinkedService,
    "LinkedService.OracleServiceCloud": OracleServiceCloudLinkedService,
    "LinkedService.GoogleAdWords": GoogleAdWordsLinkedService,
    "LinkedService.SapTable": SapTableLinkedService,
    "LinkedService.AzureDataExplorer": AzureDataExplorerLinkedService,
    "LinkedService.AzureFunction": AzureFunctionLinkedService,
    "LinkedService.Snowflake": SnowflakeLinkedService,
    "LinkedService.SharePointOnlineList": SharePointOnlineListLinkedService,
    "LinkedService.AzureSynapseArtifacts": AzureSynapseArtifactsLinkedService,
    "LinkedService.LakeHouse": LakeHouseLinkedService,
    "Dataset.AmazonS3Object": AmazonS3Dataset,
    "Dataset.Avro": AvroDataset,
    "Dataset.Excel": ExcelDataset,
    "Dataset.Parquet": ParquetDataset,
    "Dataset.DelimitedText": DelimitedTextDataset,
    "Dataset.Json": JsonDataset,
    "Dataset.Xml": XmlDataset,
    "Dataset.Orc": OrcDataset,
    "Dataset.Binary": BinaryDataset,
    "Dataset.AzureBlob": AzureBlobDataset,
    "Dataset.AzureTable": AzureTableDataset,
    "Dataset.AzureSqlTable": AzureSqlTableDataset,
    "Dataset.AzureSqlMITable": AzureSqlMITableDataset,
    "Dataset.AzureSqlDWTable": AzureSqlDWTableDataset,
    "Dataset.CassandraTable": CassandraTableDataset,
    "Dataset.CustomDataset": CustomDataset,
    "Dataset.CosmosDbSqlApiCollection": CosmosDbSqlApiCollectionDataset,
    "Dataset.DocumentDbCollection": DocumentDbCollectionDataset,
    "Dataset.DynamicsEntity": DynamicsEntityDataset,
    "Dataset.DynamicsCrmEntity": DynamicsCrmEntityDataset,
    "Dataset.CommonDataServiceForAppsEntity": CommonDataServiceForAppsEntityDataset,
    "Dataset.AzureDataLakeStoreFile": AzureDataLakeStoreDataset,
    "Dataset.AzureBlobFSFile": AzureBlobFSDataset,
    "Dataset.Office365Table": Office365Dataset,
    "Dataset.FileShare": FileShareDataset,
    "Dataset.MongoDbCollection": MongoDbCollectionDataset,
    "Dataset.MongoDbAtlasCollection": MongoDbAtlasCollectionDataset,
    "Dataset.MongoDbV2Collection": MongoDbV2CollectionDataset,
    "Dataset.CosmosDbMongoDbApiCollection": CosmosDbMongoDbApiCollectionDataset,
    "Dataset.ODataResource": ODataResourceDataset,
    "Dataset.OracleTable": OracleTableDataset,
    "Dataset.AmazonRdsForOracleTable": AmazonRdsForOracleTableDataset,
    "Dataset.TeradataTable": TeradataTableDataset,
    "Dataset.AzureMySqlTable": AzureMySqlTableDataset,
    "Dataset.AmazonRedshiftTable": AmazonRedshiftTableDataset,
    "Dataset.Db2Table": Db2TableDataset,
    "Dataset.RelationalTable": RelationalTableDataset,
    "Dataset.InformixTable": InformixTableDataset,
    "Dataset.OdbcTable": OdbcTableDataset,
    "Dataset.MySqlTable": MySqlTableDataset,
    "Dataset.PostgreSqlTable": PostgreSqlTableDataset,
    "Dataset.MicrosoftAccessTable": MicrosoftAccessTableDataset,
    "Dataset.SalesforceObject": SalesforceObjectDataset,
    "Dataset.SalesforceServiceCloudObject": SalesforceServiceCloudObjectDataset,
    "Dataset.SybaseTable": SybaseTableDataset,
    "Dataset.SapBwCube": SapBwCubeDataset,
    "Dataset.SapCloudForCustomerResource": SapCloudForCustomerResourceDataset,
    "Dataset.SapEccResource": SapEccResourceDataset,
    "Dataset.SapHanaTable": SapHanaTableDataset,
    "Dataset.SapOpenHubTable": SapOpenHubTableDataset,
    "Dataset.SqlServerTable": SqlServerTableDataset,
    "Dataset.AmazonRdsForSqlServerTable": AmazonRdsForSqlServerTableDataset,
    "Dataset.RestResource": RestResourceDataset,
    "Dataset.SapTableResource": SapTableResourceDataset,
    "Dataset.SapOdpResource": SapOdpResourceDataset,
    "Dataset.WebTable": WebTableDataset,
    "Dataset.AzureSearchIndex": AzureSearchIndexDataset,
    "Dataset.HttpFile": HttpDataset,
    "Dataset.AmazonMWSObject": AmazonMWSObjectDataset,
    "Dataset.AzurePostgreSqlTable": AzurePostgreSqlTableDataset,
    "Dataset.ConcurObject": ConcurObjectDataset,
    "Dataset.CouchbaseTable": CouchbaseTableDataset,
    "Dataset.DrillTable": DrillTableDataset,
    "Dataset.EloquaObject": EloquaObjectDataset,
    "Dataset.GoogleBigQueryObject": GoogleBigQueryObjectDataset,
    "Dataset.GreenplumTable": GreenplumTableDataset,
    "Dataset.HBaseObject": HBaseObjectDataset,
    "Dataset.HiveObject": HiveObjectDataset,
    "Dataset.HubspotObject": HubspotObjectDataset,
    "Dataset.ImpalaObject": ImpalaObjectDataset,
    "Dataset.JiraObject": JiraObjectDataset,
    "Dataset.MagentoObject": MagentoObjectDataset,
    "Dataset.MariaDBTable": MariaDBTableDataset,
    "Dataset.AzureMariaDBTable": AzureMariaDBTableDataset,
    "Dataset.MarketoObject": MarketoObjectDataset,
    "Dataset.PaypalObject": PaypalObjectDataset,
    "Dataset.PhoenixObject": PhoenixObjectDataset,
    "Dataset.PrestoObject": PrestoObjectDataset,
    "Dataset.QuickBooksObject": QuickBooksObjectDataset,
    "Dataset.ServiceNowObject": ServiceNowObjectDataset,
    "Dataset.ShopifyObject": ShopifyObjectDataset,
    "Dataset.SparkObject": SparkObjectDataset,
    "Dataset.SquareObject": SquareObjectDataset,
    "Dataset.XeroObject": XeroObjectDataset,
    "Dataset.ZohoObject": ZohoObjectDataset,
    "Dataset.NetezzaTable": NetezzaTableDataset,
    "Dataset.VerticaTable": VerticaTableDataset,
    "Dataset.SalesforceMarketingCloudObject": SalesforceMarketingCloudObjectDataset,
    "Dataset.ResponsysObject": ResponsysObjectDataset,
    "Dataset.DynamicsAXResource": DynamicsAXResourceDataset,
    "Dataset.OracleServiceCloudObject": OracleServiceCloudObjectDataset,
    "Dataset.AzureDataExplorerTable": AzureDataExplorerTableDataset,
    "Dataset.GoogleAdWordsObject": GoogleAdWordsObjectDataset,
    "Dataset.SnowflakeTable": SnowflakeDataset,
    "Dataset.SharePointOnlineListResource": SharePointOnlineListResourceDataset,
    "Dataset.AzureDatabricksDeltaLakeDataset": AzureDatabricksDeltaLakeDataset,
    "Dataset.LakeHouseTable": LakeHouseTableDataset,
    "Activity.Container": ControlActivity,
    "Activity.Execution": ExecutionActivity,
    "Activity.ExecuteWranglingDataflow": ExecuteWranglingDataflowActivity,
    "Trigger.MultiplePipelineTrigger": MultiplePipelineTrigger,
    "Trigger.TumblingWindowTrigger": TumblingWindowTrigger,
    "Trigger.RerunTumblingWindowTrigger": RerunTumblingWindowTrigger,
    "Trigger.ChainingTrigger": ChainingTrigger,
    "DataFlow.MappingDataFlow": MappingDataFlow,
    "DataFlow.Flowlet": Flowlet,
    "DataFlow.WranglingDataFlow": WranglingDataFlow,
    "Credential.ManagedIdentity": ManagedIdentityCredential,
    "Credential.ServicePrincipal": ServicePrincipalCredential,
    "SecretBase.SecureString": SecureString,
    "SecretBase.AzureKeyVaultSecret": AzureKeyVaultSecretReference,
    "DatasetLocation.AzureBlobStorageLocation": AzureBlobStorageLocation,
    "DatasetLocation.AzureBlobFSLocation": AzureBlobFSLocation,
    "DatasetLocation.AzureDataLakeStoreLocation": AzureDataLakeStoreLocation,
    "DatasetLocation.AmazonS3Location": AmazonS3Location,
    "DatasetLocation.FileServerLocation": FileServerLocation,
    "DatasetLocation.AzureFileStorageLocation": AzureFileStorageLocation,
    "DatasetLocation.AmazonS3CompatibleLocation": AmazonS3CompatibleLocation,
    "DatasetLocation.OracleCloudStorageLocation": OracleCloudStorageLocation,
    "DatasetLocation.GoogleCloudStorageLocation": GoogleCloudStorageLocation,
    "DatasetLocation.FtpServerLocation": FtpServerLocation,
    "DatasetLocation.SftpLocation": SftpLocation,
    "DatasetLocation.HttpServerLocation": HttpServerLocation,
    "DatasetLocation.HdfsLocation": HdfsLocation,
    "DatasetLocation.LakeHouseLocation": LakeHouseLocation,
    "DatasetStorageFormat.TextFormat": TextFormat,
    "DatasetStorageFormat.JsonFormat": JsonFormat,
    "DatasetStorageFormat.AvroFormat": AvroFormat,
    "DatasetStorageFormat.OrcFormat": OrcFormat,
    "DatasetStorageFormat.ParquetFormat": ParquetFormat,
    "CustomSetupBase.CmdkeySetup": CmdkeySetup,
    "CustomSetupBase.EnvironmentVariableSetup": EnvironmentVariableSetup,
    "CustomSetupBase.ComponentSetup": ComponentSetup,
    "CustomSetupBase.AzPowerShellSetup": AzPowerShellSetup,
    "LinkedIntegrationRuntimeType.Key": LinkedIntegrationRuntimeKeyAuthorization,
    "LinkedIntegrationRuntimeType.RBAC": LinkedIntegrationRuntimeRbacAuthorization,
    "WebLinkedServiceTypeProperties.Anonymous": WebAnonymousAuthentication,
    "WebLinkedServiceTypeProperties.Basic": WebBasicAuthentication,
    "WebLinkedServiceTypeProperties.ClientCertificate": WebClientCertificateAuthentication,
    "StoreReadSettings.AzureBlobStorageReadSettings": AzureBlobStorageReadSettings,
    "StoreReadSettings.AzureBlobFSReadSettings": AzureBlobFSReadSettings,
    "StoreReadSettings.AzureDataLakeStoreReadSettings": AzureDataLakeStoreReadSettings,
    "StoreReadSettings.AmazonS3ReadSettings": AmazonS3ReadSettings,
    "StoreReadSettings.FileServerReadSettings": FileServerReadSettings,
    "StoreReadSettings.AzureFileStorageReadSettings": AzureFileStorageReadSettings,
    "StoreReadSettings.AmazonS3CompatibleReadSettings": AmazonS3CompatibleReadSettings,
    "StoreReadSettings.OracleCloudStorageReadSettings": OracleCloudStorageReadSettings,
    "StoreReadSettings.GoogleCloudStorageReadSettings": GoogleCloudStorageReadSettings,
    "StoreReadSettings.FtpReadSettings": FtpReadSettings,
    "StoreReadSettings.SftpReadSettings": SftpReadSettings,
    "StoreReadSettings.HttpReadSettings": HttpReadSettings,
    "StoreReadSettings.HdfsReadSettings": HdfsReadSettings,
    "StoreReadSettings.LakeHouseReadSettings": LakeHouseReadSettings,
    "StoreWriteSettings.SftpWriteSettings": SftpWriteSettings,
    "StoreWriteSettings.AzureBlobStorageWriteSettings": AzureBlobStorageWriteSettings,
    "StoreWriteSettings.AzureBlobFSWriteSettings": AzureBlobFSWriteSettings,
    "StoreWriteSettings.AzureDataLakeStoreWriteSettings": AzureDataLakeStoreWriteSettings,
    "StoreWriteSettings.FileServerWriteSettings": FileServerWriteSettings,
    "StoreWriteSettings.AzureFileStorageWriteSettings": AzureFileStorageWriteSettings,
    "StoreWriteSettings.LakeHouseWriteSettings": LakeHouseWriteSettings,
    "FormatReadSettings.ParquetReadSettings": ParquetReadSettings,
    "FormatReadSettings.DelimitedTextReadSettings": DelimitedTextReadSettings,
    "FormatReadSettings.JsonReadSettings": JsonReadSettings,
    "FormatReadSettings.XmlReadSettings": XmlReadSettings,
    "FormatReadSettings.BinaryReadSettings": BinaryReadSettings,
    "CompressionReadSettings.ZipDeflateReadSettings": ZipDeflateReadSettings,
    "CompressionReadSettings.TarReadSettings": TarReadSettings,
    "CompressionReadSettings.TarGZipReadSettings": TarGZipReadSettings,
    "FormatWriteSettings.AvroWriteSettings": AvroWriteSettings,
    "FormatWriteSettings.OrcWriteSettings": OrcWriteSettings,
    "FormatWriteSettings.ParquetWriteSettings": ParquetWriteSettings,
    "FormatWriteSettings.DelimitedTextWriteSettings": DelimitedTextWriteSettings,
    "FormatWriteSettings.JsonWriteSettings": JsonWriteSettings,
    "CopySource.AvroSource": AvroSource,
    "CopySource.ExcelSource": ExcelSource,
    "CopySource.ParquetSource": ParquetSource,
    "CopySource.DelimitedTextSource": DelimitedTextSource,
    "CopySource.JsonSource": JsonSource,
    "CopySource.XmlSource": XmlSource,
    "CopySource.OrcSource": OrcSource,
    "CopySource.BinarySource": BinarySource,
    "CopySource.TabularSource": TabularSource,
    "CopySource.BlobSource": BlobSource,
    "CopySource.DocumentDbCollectionSource": DocumentDbCollectionSource,
    "CopySource.CosmosDbSqlApiSource": CosmosDbSqlApiSource,
    "CopySource.DynamicsSource": DynamicsSource,
    "CopySource.DynamicsCrmSource": DynamicsCrmSource,
    "CopySource.CommonDataServiceForAppsSource": CommonDataServiceForAppsSource,
    "CopySource.RelationalSource": RelationalSource,
    "CopySource.MicrosoftAccessSource": MicrosoftAccessSource,
    "CopySource.ODataSource": ODataSource,
    "CopySource.SalesforceServiceCloudSource": SalesforceServiceCloudSource,
    "CopySource.RestSource": RestSource,
    "CopySource.FileSystemSource": FileSystemSource,
    "CopySource.HdfsSource": HdfsSource,
    "CopySource.AzureDataExplorerSource": AzureDataExplorerSource,
    "CopySource.OracleSource": OracleSource,
    "CopySource.AmazonRdsForOracleSource": AmazonRdsForOracleSource,
    "CopySource.WebSource": WebSource,
    "CopySource.MongoDbSource": MongoDbSource,
    "CopySource.MongoDbAtlasSource": MongoDbAtlasSource,
    "CopySource.MongoDbV2Source": MongoDbV2Source,
    "CopySource.CosmosDbMongoDbApiSource": CosmosDbMongoDbApiSource,
    "CopySource.Office365Source": Office365Source,
    "CopySource.AzureDataLakeStoreSource": AzureDataLakeStoreSource,
    "CopySource.AzureBlobFSSource": AzureBlobFSSource,
    "CopySource.HttpSource": HttpSource,
    "CopySource.LakeHouseTableSource": LakeHouseTableSource,
    "CopySource.SnowflakeSource": SnowflakeSource,
    "CopySource.AzureDatabricksDeltaLakeSource": AzureDatabricksDeltaLakeSource,
    "CopySource.SharePointOnlineListSource": SharePointOnlineListSource,
    "CopySink.DelimitedTextSink": DelimitedTextSink,
    "CopySink.JsonSink": JsonSink,
    "CopySink.OrcSink": OrcSink,
    "CopySink.RestSink": RestSink,
    "CopySink.AzurePostgreSqlSink": AzurePostgreSqlSink,
    "CopySink.AzureMySqlSink": AzureMySqlSink,
    "CopySink.AzureDatabricksDeltaLakeSink": AzureDatabricksDeltaLakeSink,
    "CopySink.SapCloudForCustomerSink": SapCloudForCustomerSink,
    "CopySink.AzureQueueSink": AzureQueueSink,
    "CopySink.AzureTableSink": AzureTableSink,
    "CopySink.AvroSink": AvroSink,
    "CopySink.ParquetSink": ParquetSink,
    "CopySink.BinarySink": BinarySink,
    "CopySink.BlobSink": BlobSink,
    "CopySink.FileSystemSink": FileSystemSink,
    "CopySink.DocumentDbCollectionSink": DocumentDbCollectionSink,
    "CopySink.CosmosDbSqlApiSink": CosmosDbSqlApiSink,
    "CopySink.SqlSink": SqlSink,
    "CopySink.SqlServerSink": SqlServerSink,
    "CopySink.AzureSqlSink": AzureSqlSink,
    "CopySink.SqlMISink": SqlMISink,
    "CopySink.SqlDWSink": SqlDWSink,
    "CopySink.SnowflakeSink": SnowflakeSink,
    "CopySink.OracleSink": OracleSink,
    "CopySink.AzureDataLakeStoreSink": AzureDataLakeStoreSink,
    "CopySink.AzureBlobFSSink": AzureBlobFSSink,
    "CopySink.AzureSearchIndexSink": AzureSearchIndexSink,
    "CopySink.OdbcSink": OdbcSink,
    "CopySink.InformixSink": InformixSink,
    "CopySink.MicrosoftAccessSink": MicrosoftAccessSink,
    "CopySink.DynamicsSink": DynamicsSink,
    "CopySink.DynamicsCrmSink": DynamicsCrmSink,
    "CopySink.CommonDataServiceForAppsSink": CommonDataServiceForAppsSink,
    "CopySink.AzureDataExplorerSink": AzureDataExplorerSink,
    "CopySink.SalesforceSink": SalesforceSink,
    "CopySink.SalesforceServiceCloudSink": SalesforceServiceCloudSink,
    "CopySink.MongoDbAtlasSink": MongoDbAtlasSink,
    "CopySink.MongoDbV2Sink": MongoDbV2Sink,
    "CopySink.CosmosDbMongoDbApiSink": CosmosDbMongoDbApiSink,
    "CopySink.LakeHouseTableSink": LakeHouseTableSink,
    "ExportSettings.SnowflakeExportCopyCommand": SnowflakeExportCopyCommand,
    "ExportSettings.AzureDatabricksDeltaLakeExportCommand": AzureDatabricksDeltaLakeExportCommand,
    "ImportSettings.AzureDatabricksDeltaLakeImportCommand": AzureDatabricksDeltaLakeImportCommand,
    "ImportSettings.SnowflakeImportCopyCommand": SnowflakeImportCopyCommand,
    "CopyTranslator.TabularTranslator": TabularTranslator,
    "DependencyReference.TriggerDependencyReference": TriggerDependencyReference,
    "DependencyReference.SelfDependencyTumblingWindowTriggerReference": SelfDependencyTumblingWindowTriggerReference,
    "ControlActivity.ExecutePipeline": ExecutePipelineActivity,
    "ControlActivity.IfCondition": IfConditionActivity,
    "ControlActivity.Switch": SwitchActivity,
    "ControlActivity.ForEach": ForEachActivity,
    "ControlActivity.Wait": WaitActivity,
    "ControlActivity.Fail": FailActivity,
    "ControlActivity.Until": UntilActivity,
    "ControlActivity.Validation": ValidationActivity,
    "ControlActivity.Filter": FilterActivity,
    "ControlActivity.SetVariable": SetVariableActivity,
    "ControlActivity.AppendVariable": AppendVariableActivity,
    "ControlActivity.WebHook": WebHookActivity,
    "ExecutionActivity.Copy": CopyActivity,
    "ExecutionActivity.HDInsightHive": HDInsightHiveActivity,
    "ExecutionActivity.HDInsightPig": HDInsightPigActivity,
    "ExecutionActivity.HDInsightMapReduce": HDInsightMapReduceActivity,
    "ExecutionActivity.HDInsightStreaming": HDInsightStreamingActivity,
    "ExecutionActivity.HDInsightSpark": HDInsightSparkActivity,
    "ExecutionActivity.ExecuteSSISPackage": ExecuteSsisPackageActivity,
    "ExecutionActivity.Custom": CustomActivity,
    "ExecutionActivity.SqlServerStoredProcedure": SqlServerStoredProcedureActivity,
    "ExecutionActivity.Delete": DeleteActivity,
    "ExecutionActivity.AzureDataExplorerCommand": AzureDataExplorerCommandActivity,
    "ExecutionActivity.Lookup": LookupActivity,
    "ExecutionActivity.WebActivity": WebActivity,
    "ExecutionActivity.GetMetadata": GetMetadataActivity,
    "ExecutionActivity.AzureMLBatchExecution": AzureMLBatchExecutionActivity,
    "ExecutionActivity.AzureMLUpdateResource": AzureMLUpdateResourceActivity,
    "ExecutionActivity.AzureMLExecutePipeline": AzureMLExecutePipelineActivity,
    "ExecutionActivity.DataLakeAnalyticsU-SQL": DataLakeAnalyticsUsqlActivity,
    "ExecutionActivity.DatabricksNotebook": DatabricksNotebookActivity,
    "ExecutionActivity.DatabricksSparkJar": DatabricksSparkJarActivity,
    "ExecutionActivity.DatabricksSparkPython": DatabricksSparkPythonActivity,
    "ExecutionActivity.AzureFunctionActivity": AzureFunctionActivity,
    "ExecutionActivity.ExecuteDataFlow": ExecuteDataFlowActivity,
    "ExecutionActivity.Script": ScriptActivity,
    "ExecutionActivity.SynapseNotebook": SynapseNotebookActivity,
    "ExecutionActivity.SparkJob": SynapseSparkJobDefinitionActivity,
    "MultiplePipelineTrigger.ScheduleTrigger": ScheduleTrigger,
    "MultiplePipelineTrigger.BlobTrigger": BlobTrigger,
    "MultiplePipelineTrigger.BlobEventsTrigger": BlobEventsTrigger,
    "MultiplePipelineTrigger.CustomEventsTrigger": CustomEventsTrigger,
    "TabularSource.AzureTableSource": AzureTableSource,
    "TabularSource.InformixSource": InformixSource,
    "TabularSource.Db2Source": Db2Source,
    "TabularSource.OdbcSource": OdbcSource,
    "TabularSource.MySqlSource": MySqlSource,
    "TabularSource.PostgreSqlSource": PostgreSqlSource,
    "TabularSource.SybaseSource": SybaseSource,
    "TabularSource.SapBwSource": SapBwSource,
    "TabularSource.SalesforceSource": SalesforceSource,
    "TabularSource.SapCloudForCustomerSource": SapCloudForCustomerSource,
    "TabularSource.SapEccSource": SapEccSource,
    "TabularSource.SapHanaSource": SapHanaSource,
    "TabularSource.SapOpenHubSource": SapOpenHubSource,
    "TabularSource.SapOdpSource": SapOdpSource,
    "TabularSource.SapTableSource": SapTableSource,
    "TabularSource.SqlSource": SqlSource,
    "TabularSource.SqlServerSource": SqlServerSource,
    "TabularSource.AmazonRdsForSqlServerSource": AmazonRdsForSqlServerSource,
    "TabularSource.AzureSqlSource": AzureSqlSource,
    "TabularSource.SqlMISource": SqlMISource,
    "TabularSource.SqlDWSource": SqlDWSource,
    "TabularSource.AzureMySqlSource": AzureMySqlSource,
    "TabularSource.TeradataSource": TeradataSource,
    "TabularSource.CassandraSource": CassandraSource,
    "TabularSource.AmazonMWSSource": AmazonMWSSource,
    "TabularSource.AzurePostgreSqlSource": AzurePostgreSqlSource,
    "TabularSource.ConcurSource": ConcurSource,
    "TabularSource.CouchbaseSource": CouchbaseSource,
    "TabularSource.DrillSource": DrillSource,
    "TabularSource.EloquaSource": EloquaSource,
    "TabularSource.GoogleBigQuerySource": GoogleBigQuerySource,
    "TabularSource.GreenplumSource": GreenplumSource,
    "TabularSource.HBaseSource": HBaseSource,
    "TabularSource.HiveSource": HiveSource,
    "TabularSource.HubspotSource": HubspotSource,
    "TabularSource.ImpalaSource": ImpalaSource,
    "TabularSource.JiraSource": JiraSource,
    "TabularSource.MagentoSource": MagentoSource,
    "TabularSource.MariaDBSource": MariaDBSource,
    "TabularSource.AzureMariaDBSource": AzureMariaDBSource,
    "TabularSource.MarketoSource": MarketoSource,
    "TabularSource.PaypalSource": PaypalSource,
    "TabularSource.PhoenixSource": PhoenixSource,
    "TabularSource.PrestoSource": PrestoSource,
    "TabularSource.QuickBooksSource": QuickBooksSource,
    "TabularSource.ServiceNowSource": ServiceNowSource,
    "TabularSource.ShopifySource": ShopifySource,
    "TabularSource.SparkSource": SparkSource,
    "TabularSource.SquareSource": SquareSource,
    "TabularSource.XeroSource": XeroSource,
    "TabularSource.ZohoSource": ZohoSource,
    "TabularSource.NetezzaSource": NetezzaSource,
    "TabularSource.VerticaSource": VerticaSource,
    "TabularSource.SalesforceMarketingCloudSource": SalesforceMarketingCloudSource,
    "TabularSource.ResponsysSource": ResponsysSource,
    "TabularSource.DynamicsAXSource": DynamicsAXSource,
    "TabularSource.OracleServiceCloudSource": OracleServiceCloudSource,
    "TabularSource.GoogleAdWordsSource": GoogleAdWordsSource,
    "TabularSource.AmazonRedshiftSource": AmazonRedshiftSource,
    "TriggerDependencyReference.TumblingWindowTriggerDependencyReference": TumblingWindowTriggerDependencyReference
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    AccessPolicyResponse: AccessPolicyResponse,
    Activity: Activity,
    ActivityDependency: ActivityDependency,
    ActivityPolicy: ActivityPolicy,
    ActivityRun: ActivityRun,
    ActivityRunsQueryResponse: ActivityRunsQueryResponse,
    AddDataFlowToDebugSessionResponse: AddDataFlowToDebugSessionResponse,
    AdditionalColumns: AdditionalColumns,
    AmazonMWSLinkedService: AmazonMWSLinkedService,
    AmazonMWSObjectDataset: AmazonMWSObjectDataset,
    AmazonMWSSource: AmazonMWSSource,
    AmazonRdsForOracleLinkedService: AmazonRdsForOracleLinkedService,
    AmazonRdsForOraclePartitionSettings: AmazonRdsForOraclePartitionSettings,
    AmazonRdsForOracleSource: AmazonRdsForOracleSource,
    AmazonRdsForOracleTableDataset: AmazonRdsForOracleTableDataset,
    AmazonRdsForSqlServerLinkedService: AmazonRdsForSqlServerLinkedService,
    AmazonRdsForSqlServerSource: AmazonRdsForSqlServerSource,
    AmazonRdsForSqlServerTableDataset: AmazonRdsForSqlServerTableDataset,
    AmazonRedshiftLinkedService: AmazonRedshiftLinkedService,
    AmazonRedshiftSource: AmazonRedshiftSource,
    AmazonRedshiftTableDataset: AmazonRedshiftTableDataset,
    AmazonS3CompatibleLinkedService: AmazonS3CompatibleLinkedService,
    AmazonS3CompatibleLocation: AmazonS3CompatibleLocation,
    AmazonS3CompatibleReadSettings: AmazonS3CompatibleReadSettings,
    AmazonS3Dataset: AmazonS3Dataset,
    AmazonS3LinkedService: AmazonS3LinkedService,
    AmazonS3Location: AmazonS3Location,
    AmazonS3ReadSettings: AmazonS3ReadSettings,
    AppFiguresLinkedService: AppFiguresLinkedService,
    AppendVariableActivity: AppendVariableActivity,
    ArmIdWrapper: ArmIdWrapper,
    AsanaLinkedService: AsanaLinkedService,
    AvroDataset: AvroDataset,
    AvroFormat: AvroFormat,
    AvroSink: AvroSink,
    AvroSource: AvroSource,
    AvroWriteSettings: AvroWriteSettings,
    AzPowerShellSetup: AzPowerShellSetup,
    AzureBatchLinkedService: AzureBatchLinkedService,
    AzureBlobDataset: AzureBlobDataset,
    AzureBlobFSDataset: AzureBlobFSDataset,
    AzureBlobFSLinkedService: AzureBlobFSLinkedService,
    AzureBlobFSLocation: AzureBlobFSLocation,
    AzureBlobFSReadSettings: AzureBlobFSReadSettings,
    AzureBlobFSSink: AzureBlobFSSink,
    AzureBlobFSSource: AzureBlobFSSource,
    AzureBlobFSWriteSettings: AzureBlobFSWriteSettings,
    AzureBlobStorageLinkedService: AzureBlobStorageLinkedService,
    AzureBlobStorageLocation: AzureBlobStorageLocation,
    AzureBlobStorageReadSettings: AzureBlobStorageReadSettings,
    AzureBlobStorageWriteSettings: AzureBlobStorageWriteSettings,
    AzureDataExplorerCommandActivity: AzureDataExplorerCommandActivity,
    AzureDataExplorerLinkedService: AzureDataExplorerLinkedService,
    AzureDataExplorerSink: AzureDataExplorerSink,
    AzureDataExplorerSource: AzureDataExplorerSource,
    AzureDataExplorerTableDataset: AzureDataExplorerTableDataset,
    AzureDataLakeAnalyticsLinkedService: AzureDataLakeAnalyticsLinkedService,
    AzureDataLakeStoreDataset: AzureDataLakeStoreDataset,
    AzureDataLakeStoreLinkedService: AzureDataLakeStoreLinkedService,
    AzureDataLakeStoreLocation: AzureDataLakeStoreLocation,
    AzureDataLakeStoreReadSettings: AzureDataLakeStoreReadSettings,
    AzureDataLakeStoreSink: AzureDataLakeStoreSink,
    AzureDataLakeStoreSource: AzureDataLakeStoreSource,
    AzureDataLakeStoreWriteSettings: AzureDataLakeStoreWriteSettings,
    AzureDatabricksDeltaLakeDataset: AzureDatabricksDeltaLakeDataset,
    AzureDatabricksDeltaLakeExportCommand: AzureDatabricksDeltaLakeExportCommand,
    AzureDatabricksDeltaLakeImportCommand: AzureDatabricksDeltaLakeImportCommand,
    AzureDatabricksDeltaLakeLinkedService: AzureDatabricksDeltaLakeLinkedService,
    AzureDatabricksDeltaLakeSink: AzureDatabricksDeltaLakeSink,
    AzureDatabricksDeltaLakeSource: AzureDatabricksDeltaLakeSource,
    AzureDatabricksLinkedService: AzureDatabricksLinkedService,
    AzureFileStorageLinkedService: AzureFileStorageLinkedService,
    AzureFileStorageLocation: AzureFileStorageLocation,
    AzureFileStorageReadSettings: AzureFileStorageReadSettings,
    AzureFileStorageWriteSettings: AzureFileStorageWriteSettings,
    AzureFunctionActivity: AzureFunctionActivity,
    AzureFunctionLinkedService: AzureFunctionLinkedService,
    AzureKeyVaultLinkedService: AzureKeyVaultLinkedService,
    AzureKeyVaultSecretReference: AzureKeyVaultSecretReference,
    AzureMLBatchExecutionActivity: AzureMLBatchExecutionActivity,
    AzureMLExecutePipelineActivity: AzureMLExecutePipelineActivity,
    AzureMLLinkedService: AzureMLLinkedService,
    AzureMLServiceLinkedService: AzureMLServiceLinkedService,
    AzureMLUpdateResourceActivity: AzureMLUpdateResourceActivity,
    AzureMLWebServiceFile: AzureMLWebServiceFile,
    AzureMariaDBLinkedService: AzureMariaDBLinkedService,
    AzureMariaDBSource: AzureMariaDBSource,
    AzureMariaDBTableDataset: AzureMariaDBTableDataset,
    AzureMySqlLinkedService: AzureMySqlLinkedService,
    AzureMySqlSink: AzureMySqlSink,
    AzureMySqlSource: AzureMySqlSource,
    AzureMySqlTableDataset: AzureMySqlTableDataset,
    AzurePostgreSqlLinkedService: AzurePostgreSqlLinkedService,
    AzurePostgreSqlSink: AzurePostgreSqlSink,
    AzurePostgreSqlSource: AzurePostgreSqlSource,
    AzurePostgreSqlTableDataset: AzurePostgreSqlTableDataset,
    AzureQueueSink: AzureQueueSink,
    AzureSearchIndexDataset: AzureSearchIndexDataset,
    AzureSearchIndexSink: AzureSearchIndexSink,
    AzureSearchLinkedService: AzureSearchLinkedService,
    AzureSqlDWLinkedService: AzureSqlDWLinkedService,
    AzureSqlDWTableDataset: AzureSqlDWTableDataset,
    AzureSqlDatabaseLinkedService: AzureSqlDatabaseLinkedService,
    AzureSqlMILinkedService: AzureSqlMILinkedService,
    AzureSqlMITableDataset: AzureSqlMITableDataset,
    AzureSqlSink: AzureSqlSink,
    AzureSqlSource: AzureSqlSource,
    AzureSqlTableDataset: AzureSqlTableDataset,
    AzureStorageLinkedService: AzureStorageLinkedService,
    AzureSynapseArtifactsLinkedService: AzureSynapseArtifactsLinkedService,
    AzureTableDataset: AzureTableDataset,
    AzureTableSink: AzureTableSink,
    AzureTableSource: AzureTableSource,
    AzureTableStorageLinkedService: AzureTableStorageLinkedService,
    BigDataPoolParametrizationReference: BigDataPoolParametrizationReference,
    BinaryDataset: BinaryDataset,
    BinaryReadSettings: BinaryReadSettings,
    BinarySink: BinarySink,
    BinarySource: BinarySource,
    BlobEventsTrigger: BlobEventsTrigger,
    BlobSink: BlobSink,
    BlobSource: BlobSource,
    BlobTrigger: BlobTrigger,
    CMKIdentityDefinition: CMKIdentityDefinition,
    CassandraLinkedService: CassandraLinkedService,
    CassandraSource: CassandraSource,
    CassandraTableDataset: CassandraTableDataset,
    ChainingTrigger: ChainingTrigger,
    ChangeDataCaptureFolder: ChangeDataCaptureFolder,
    ChangeDataCaptureListResponse: ChangeDataCaptureListResponse,
    ChangeDataCaptureResource: ChangeDataCaptureResource,
    CloudError: CloudError,
    CmdkeySetup: CmdkeySetup,
    CommonDataServiceForAppsEntityDataset: CommonDataServiceForAppsEntityDataset,
    CommonDataServiceForAppsLinkedService: CommonDataServiceForAppsLinkedService,
    CommonDataServiceForAppsSink: CommonDataServiceForAppsSink,
    CommonDataServiceForAppsSource: CommonDataServiceForAppsSource,
    ComponentSetup: ComponentSetup,
    CompressionReadSettings: CompressionReadSettings,
    ConcurLinkedService: ConcurLinkedService,
    ConcurObjectDataset: ConcurObjectDataset,
    ConcurSource: ConcurSource,
    ConnectionStateProperties: ConnectionStateProperties,
    ControlActivity: ControlActivity,
    CopyActivity: CopyActivity,
    CopyActivityLogSettings: CopyActivityLogSettings,
    CopyComputeScaleProperties: CopyComputeScaleProperties,
    CopySink: CopySink,
    CopySource: CopySource,
    CopyTranslator: CopyTranslator,
    CosmosDbLinkedService: CosmosDbLinkedService,
    CosmosDbMongoDbApiCollectionDataset: CosmosDbMongoDbApiCollectionDataset,
    CosmosDbMongoDbApiLinkedService: CosmosDbMongoDbApiLinkedService,
    CosmosDbMongoDbApiSink: CosmosDbMongoDbApiSink,
    CosmosDbMongoDbApiSource: CosmosDbMongoDbApiSource,
    CosmosDbSqlApiCollectionDataset: CosmosDbSqlApiCollectionDataset,
    CosmosDbSqlApiSink: CosmosDbSqlApiSink,
    CosmosDbSqlApiSource: CosmosDbSqlApiSource,
    CouchbaseLinkedService: CouchbaseLinkedService,
    CouchbaseSource: CouchbaseSource,
    CouchbaseTableDataset: CouchbaseTableDataset,
    CreateDataFlowDebugSessionRequest: CreateDataFlowDebugSessionRequest,
    CreateDataFlowDebugSessionResponse: CreateDataFlowDebugSessionResponse,
    CreateLinkedIntegrationRuntimeRequest: CreateLinkedIntegrationRuntimeRequest,
    CreateRunResponse: CreateRunResponse,
    Credential: Credential,
    CredentialListResponse: CredentialListResponse,
    CredentialReference: CredentialReference,
    CredentialResource: CredentialResource,
    CustomActivity: CustomActivity,
    CustomActivityReferenceObject: CustomActivityReferenceObject,
    CustomDataSourceLinkedService: CustomDataSourceLinkedService,
    CustomDataset: CustomDataset,
    CustomEventsTrigger: CustomEventsTrigger,
    CustomSetupBase: CustomSetupBase,
    DWCopyCommandDefaultValue: DWCopyCommandDefaultValue,
    DWCopyCommandSettings: DWCopyCommandSettings,
    DataFlow: DataFlow,
    DataFlowDebugCommandPayload: DataFlowDebugCommandPayload,
    DataFlowDebugCommandRequest: DataFlowDebugCommandRequest,
    DataFlowDebugCommandResponse: DataFlowDebugCommandResponse,
    DataFlowDebugPackage: DataFlowDebugPackage,
    DataFlowDebugPackageDebugSettings: DataFlowDebugPackageDebugSettings,
    DataFlowDebugResource: DataFlowDebugResource,
    DataFlowDebugSessionCreateHeaders: DataFlowDebugSessionCreateHeaders,
    DataFlowDebugSessionExecuteCommandHeaders: DataFlowDebugSessionExecuteCommandHeaders,
    DataFlowDebugSessionInfo: DataFlowDebugSessionInfo,
    DataFlowFolder: DataFlowFolder,
    DataFlowListResponse: DataFlowListResponse,
    DataFlowReference: DataFlowReference,
    DataFlowResource: DataFlowResource,
    DataFlowSink: DataFlowSink,
    DataFlowSource: DataFlowSource,
    DataFlowSourceSetting: DataFlowSourceSetting,
    DataFlowStagingInfo: DataFlowStagingInfo,
    DataLakeAnalyticsUsqlActivity: DataLakeAnalyticsUsqlActivity,
    DataMapperMapping: DataMapperMapping,
    DatabricksNotebookActivity: DatabricksNotebookActivity,
    DatabricksSparkJarActivity: DatabricksSparkJarActivity,
    DatabricksSparkPythonActivity: DatabricksSparkPythonActivity,
    Dataset: Dataset,
    DatasetCompression: DatasetCompression,
    DatasetDataElement: DatasetDataElement,
    DatasetDebugResource: DatasetDebugResource,
    DatasetFolder: DatasetFolder,
    DatasetListResponse: DatasetListResponse,
    DatasetLocation: DatasetLocation,
    DatasetReference: DatasetReference,
    DatasetResource: DatasetResource,
    DatasetSchemaDataElement: DatasetSchemaDataElement,
    DatasetStorageFormat: DatasetStorageFormat,
    DataworldLinkedService: DataworldLinkedService,
    Db2LinkedService: Db2LinkedService,
    Db2Source: Db2Source,
    Db2TableDataset: Db2TableDataset,
    DeleteActivity: DeleteActivity,
    DeleteDataFlowDebugSessionRequest: DeleteDataFlowDebugSessionRequest,
    DelimitedTextDataset: DelimitedTextDataset,
    DelimitedTextReadSettings: DelimitedTextReadSettings,
    DelimitedTextSink: DelimitedTextSink,
    DelimitedTextSource: DelimitedTextSource,
    DelimitedTextWriteSettings: DelimitedTextWriteSettings,
    DependencyReference: DependencyReference,
    DistcpSettings: DistcpSettings,
    DocumentDbCollectionDataset: DocumentDbCollectionDataset,
    DocumentDbCollectionSink: DocumentDbCollectionSink,
    DocumentDbCollectionSource: DocumentDbCollectionSource,
    DrillLinkedService: DrillLinkedService,
    DrillSource: DrillSource,
    DrillTableDataset: DrillTableDataset,
    DynamicsAXLinkedService: DynamicsAXLinkedService,
    DynamicsAXResourceDataset: DynamicsAXResourceDataset,
    DynamicsAXSource: DynamicsAXSource,
    DynamicsCrmEntityDataset: DynamicsCrmEntityDataset,
    DynamicsCrmLinkedService: DynamicsCrmLinkedService,
    DynamicsCrmSink: DynamicsCrmSink,
    DynamicsCrmSource: DynamicsCrmSource,
    DynamicsEntityDataset: DynamicsEntityDataset,
    DynamicsLinkedService: DynamicsLinkedService,
    DynamicsSink: DynamicsSink,
    DynamicsSource: DynamicsSource,
    EloquaLinkedService: EloquaLinkedService,
    EloquaObjectDataset: EloquaObjectDataset,
    EloquaSource: EloquaSource,
    EncryptionConfiguration: EncryptionConfiguration,
    EntityReference: EntityReference,
    EnvironmentVariableSetup: EnvironmentVariableSetup,
    ExcelDataset: ExcelDataset,
    ExcelSource: ExcelSource,
    ExecuteDataFlowActivity: ExecuteDataFlowActivity,
    ExecuteDataFlowActivityTypeProperties: ExecuteDataFlowActivityTypeProperties,
    ExecuteDataFlowActivityTypePropertiesCompute: ExecuteDataFlowActivityTypePropertiesCompute,
    ExecutePipelineActivity: ExecutePipelineActivity,
    ExecutePipelineActivityPolicy: ExecutePipelineActivityPolicy,
    ExecutePowerQueryActivityTypeProperties: ExecutePowerQueryActivityTypeProperties,
    ExecuteSsisPackageActivity: ExecuteSsisPackageActivity,
    ExecuteWranglingDataflowActivity: ExecuteWranglingDataflowActivity,
    ExecutionActivity: ExecutionActivity,
    ExportSettings: ExportSettings,
    ExposureControlBatchRequest: ExposureControlBatchRequest,
    ExposureControlBatchResponse: ExposureControlBatchResponse,
    ExposureControlRequest: ExposureControlRequest,
    ExposureControlResponse: ExposureControlResponse,
    Expression: Expression,
    Factory: Factory,
    FactoryGitHubConfiguration: FactoryGitHubConfiguration,
    FactoryIdentity: FactoryIdentity,
    FactoryListResponse: FactoryListResponse,
    FactoryRepoConfiguration: FactoryRepoConfiguration,
    FactoryRepoUpdate: FactoryRepoUpdate,
    FactoryUpdateParameters: FactoryUpdateParameters,
    FactoryVstsConfiguration: FactoryVstsConfiguration,
    FailActivity: FailActivity,
    FileServerLinkedService: FileServerLinkedService,
    FileServerLocation: FileServerLocation,
    FileServerReadSettings: FileServerReadSettings,
    FileServerWriteSettings: FileServerWriteSettings,
    FileShareDataset: FileShareDataset,
    FileSystemSink: FileSystemSink,
    FileSystemSource: FileSystemSource,
    FilterActivity: FilterActivity,
    Flowlet: Flowlet,
    ForEachActivity: ForEachActivity,
    FormatReadSettings: FormatReadSettings,
    FormatWriteSettings: FormatWriteSettings,
    FtpReadSettings: FtpReadSettings,
    FtpServerLinkedService: FtpServerLinkedService,
    FtpServerLocation: FtpServerLocation,
    GetDataFactoryOperationStatusResponse: GetDataFactoryOperationStatusResponse,
    GetMetadataActivity: GetMetadataActivity,
    GetSsisObjectMetadataRequest: GetSsisObjectMetadataRequest,
    GitHubAccessTokenRequest: GitHubAccessTokenRequest,
    GitHubAccessTokenResponse: GitHubAccessTokenResponse,
    GitHubClientSecret: GitHubClientSecret,
    GlobalParameterListResponse: GlobalParameterListResponse,
    GlobalParameterResource: GlobalParameterResource,
    GlobalParameterSpecification: GlobalParameterSpecification,
    GoogleAdWordsLinkedService: GoogleAdWordsLinkedService,
    GoogleAdWordsObjectDataset: GoogleAdWordsObjectDataset,
    GoogleAdWordsSource: GoogleAdWordsSource,
    GoogleBigQueryLinkedService: GoogleBigQueryLinkedService,
    GoogleBigQueryObjectDataset: GoogleBigQueryObjectDataset,
    GoogleBigQuerySource: GoogleBigQuerySource,
    GoogleCloudStorageLinkedService: GoogleCloudStorageLinkedService,
    GoogleCloudStorageLocation: GoogleCloudStorageLocation,
    GoogleCloudStorageReadSettings: GoogleCloudStorageReadSettings,
    GoogleSheetsLinkedService: GoogleSheetsLinkedService,
    GreenplumLinkedService: GreenplumLinkedService,
    GreenplumSource: GreenplumSource,
    GreenplumTableDataset: GreenplumTableDataset,
    HBaseLinkedService: HBaseLinkedService,
    HBaseObjectDataset: HBaseObjectDataset,
    HBaseSource: HBaseSource,
    HDInsightHiveActivity: HDInsightHiveActivity,
    HDInsightLinkedService: HDInsightLinkedService,
    HDInsightMapReduceActivity: HDInsightMapReduceActivity,
    HDInsightOnDemandLinkedService: HDInsightOnDemandLinkedService,
    HDInsightPigActivity: HDInsightPigActivity,
    HDInsightSparkActivity: HDInsightSparkActivity,
    HDInsightStreamingActivity: HDInsightStreamingActivity,
    HdfsLinkedService: HdfsLinkedService,
    HdfsLocation: HdfsLocation,
    HdfsReadSettings: HdfsReadSettings,
    HdfsSource: HdfsSource,
    HiveLinkedService: HiveLinkedService,
    HiveObjectDataset: HiveObjectDataset,
    HiveSource: HiveSource,
    HttpDataset: HttpDataset,
    HttpLinkedService: HttpLinkedService,
    HttpReadSettings: HttpReadSettings,
    HttpServerLocation: HttpServerLocation,
    HttpSource: HttpSource,
    HubspotLinkedService: HubspotLinkedService,
    HubspotObjectDataset: HubspotObjectDataset,
    HubspotSource: HubspotSource,
    IfConditionActivity: IfConditionActivity,
    ImpalaLinkedService: ImpalaLinkedService,
    ImpalaObjectDataset: ImpalaObjectDataset,
    ImpalaSource: ImpalaSource,
    ImportSettings: ImportSettings,
    InformixLinkedService: InformixLinkedService,
    InformixSink: InformixSink,
    InformixSource: InformixSource,
    InformixTableDataset: InformixTableDataset,
    IntegrationRuntime: IntegrationRuntime,
    IntegrationRuntimeAuthKeys: IntegrationRuntimeAuthKeys,
    IntegrationRuntimeComputeProperties: IntegrationRuntimeComputeProperties,
    IntegrationRuntimeConnectionInfo: IntegrationRuntimeConnectionInfo,
    IntegrationRuntimeCustomSetupScriptProperties: IntegrationRuntimeCustomSetupScriptProperties,
    IntegrationRuntimeCustomerVirtualNetwork: IntegrationRuntimeCustomerVirtualNetwork,
    IntegrationRuntimeDataFlowProperties: IntegrationRuntimeDataFlowProperties,
    IntegrationRuntimeDataFlowPropertiesCustomPropertiesItem: IntegrationRuntimeDataFlowPropertiesCustomPropertiesItem,
    IntegrationRuntimeDataProxyProperties: IntegrationRuntimeDataProxyProperties,
    IntegrationRuntimeDebugResource: IntegrationRuntimeDebugResource,
    IntegrationRuntimeListResponse: IntegrationRuntimeListResponse,
    IntegrationRuntimeMonitoringData: IntegrationRuntimeMonitoringData,
    IntegrationRuntimeNodeIpAddress: IntegrationRuntimeNodeIpAddress,
    IntegrationRuntimeNodeMonitoringData: IntegrationRuntimeNodeMonitoringData,
    IntegrationRuntimeOutboundNetworkDependenciesCategoryEndpoint: IntegrationRuntimeOutboundNetworkDependenciesCategoryEndpoint,
    IntegrationRuntimeOutboundNetworkDependenciesEndpoint: IntegrationRuntimeOutboundNetworkDependenciesEndpoint,
    IntegrationRuntimeOutboundNetworkDependenciesEndpointDetails: IntegrationRuntimeOutboundNetworkDependenciesEndpointDetails,
    IntegrationRuntimeOutboundNetworkDependenciesEndpointsResponse: IntegrationRuntimeOutboundNetworkDependenciesEndpointsResponse,
    IntegrationRuntimeReference: IntegrationRuntimeReference,
    IntegrationRuntimeRegenerateKeyParameters: IntegrationRuntimeRegenerateKeyParameters,
    IntegrationRuntimeResource: IntegrationRuntimeResource,
    IntegrationRuntimeSsisCatalogInfo: IntegrationRuntimeSsisCatalogInfo,
    IntegrationRuntimeSsisProperties: IntegrationRuntimeSsisProperties,
    IntegrationRuntimeStatus: IntegrationRuntimeStatus,
    IntegrationRuntimeStatusListResponse: IntegrationRuntimeStatusListResponse,
    IntegrationRuntimeStatusResponse: IntegrationRuntimeStatusResponse,
    IntegrationRuntimeVNetProperties: IntegrationRuntimeVNetProperties,
    JiraLinkedService: JiraLinkedService,
    JiraObjectDataset: JiraObjectDataset,
    JiraSource: JiraSource,
    JsonDataset: JsonDataset,
    JsonFormat: JsonFormat,
    JsonReadSettings: JsonReadSettings,
    JsonSink: JsonSink,
    JsonSource: JsonSource,
    JsonWriteSettings: JsonWriteSettings,
    LakeHouseLinkedService: LakeHouseLinkedService,
    LakeHouseLocation: LakeHouseLocation,
    LakeHouseReadSettings: LakeHouseReadSettings,
    LakeHouseTableDataset: LakeHouseTableDataset,
    LakeHouseTableSink: LakeHouseTableSink,
    LakeHouseTableSource: LakeHouseTableSource,
    LakeHouseWriteSettings: LakeHouseWriteSettings,
    LinkedIntegrationRuntime: LinkedIntegrationRuntime,
    LinkedIntegrationRuntimeKeyAuthorization: LinkedIntegrationRuntimeKeyAuthorization,
    LinkedIntegrationRuntimeRbacAuthorization: LinkedIntegrationRuntimeRbacAuthorization,
    LinkedIntegrationRuntimeRequest: LinkedIntegrationRuntimeRequest,
    LinkedIntegrationRuntimeType: LinkedIntegrationRuntimeType,
    LinkedService: LinkedService,
    LinkedServiceDebugResource: LinkedServiceDebugResource,
    LinkedServiceListResponse: LinkedServiceListResponse,
    LinkedServiceReference: LinkedServiceReference,
    LinkedServiceResource: LinkedServiceResource,
    LogLocationSettings: LogLocationSettings,
    LogSettings: LogSettings,
    LogStorageSettings: LogStorageSettings,
    LookupActivity: LookupActivity,
    MagentoLinkedService: MagentoLinkedService,
    MagentoObjectDataset: MagentoObjectDataset,
    MagentoSource: MagentoSource,
    ManagedIdentityCredential: ManagedIdentityCredential,
    ManagedIdentityCredentialResource: ManagedIdentityCredentialResource,
    ManagedIntegrationRuntime: ManagedIntegrationRuntime,
    ManagedIntegrationRuntimeError: ManagedIntegrationRuntimeError,
    ManagedIntegrationRuntimeNode: ManagedIntegrationRuntimeNode,
    ManagedIntegrationRuntimeOperationResult: ManagedIntegrationRuntimeOperationResult,
    ManagedIntegrationRuntimeStatus: ManagedIntegrationRuntimeStatus,
    ManagedPrivateEndpoint: ManagedPrivateEndpoint,
    ManagedPrivateEndpointListResponse: ManagedPrivateEndpointListResponse,
    ManagedPrivateEndpointResource: ManagedPrivateEndpointResource,
    ManagedVirtualNetwork: ManagedVirtualNetwork,
    ManagedVirtualNetworkListResponse: ManagedVirtualNetworkListResponse,
    ManagedVirtualNetworkReference: ManagedVirtualNetworkReference,
    ManagedVirtualNetworkResource: ManagedVirtualNetworkResource,
    MapperAttributeMapping: MapperAttributeMapping,
    MapperAttributeMappings: MapperAttributeMappings,
    MapperAttributeReference: MapperAttributeReference,
    MapperConnection: MapperConnection,
    MapperConnectionReference: MapperConnectionReference,
    MapperDslConnectorProperties: MapperDslConnectorProperties,
    MapperPolicy: MapperPolicy,
    MapperPolicyRecurrence: MapperPolicyRecurrence,
    MapperSourceConnectionsInfo: MapperSourceConnectionsInfo,
    MapperTable: MapperTable,
    MapperTableSchema: MapperTableSchema,
    MapperTargetConnectionsInfo: MapperTargetConnectionsInfo,
    MappingDataFlow: MappingDataFlow,
    MariaDBLinkedService: MariaDBLinkedService,
    MariaDBSource: MariaDBSource,
    MariaDBTableDataset: MariaDBTableDataset,
    MarketoLinkedService: MarketoLinkedService,
    MarketoObjectDataset: MarketoObjectDataset,
    MarketoSource: MarketoSource,
    MetadataItem: MetadataItem,
    MicrosoftAccessLinkedService: MicrosoftAccessLinkedService,
    MicrosoftAccessSink: MicrosoftAccessSink,
    MicrosoftAccessSource: MicrosoftAccessSource,
    MicrosoftAccessTableDataset: MicrosoftAccessTableDataset,
    MongoDbAtlasCollectionDataset: MongoDbAtlasCollectionDataset,
    MongoDbAtlasLinkedService: MongoDbAtlasLinkedService,
    MongoDbAtlasSink: MongoDbAtlasSink,
    MongoDbAtlasSource: MongoDbAtlasSource,
    MongoDbCollectionDataset: MongoDbCollectionDataset,
    MongoDbCursorMethodsProperties: MongoDbCursorMethodsProperties,
    MongoDbLinkedService: MongoDbLinkedService,
    MongoDbSource: MongoDbSource,
    MongoDbV2CollectionDataset: MongoDbV2CollectionDataset,
    MongoDbV2LinkedService: MongoDbV2LinkedService,
    MongoDbV2Sink: MongoDbV2Sink,
    MongoDbV2Source: MongoDbV2Source,
    MultiplePipelineTrigger: MultiplePipelineTrigger,
    MySqlLinkedService: MySqlLinkedService,
    MySqlSource: MySqlSource,
    MySqlTableDataset: MySqlTableDataset,
    NetezzaLinkedService: NetezzaLinkedService,
    NetezzaPartitionSettings: NetezzaPartitionSettings,
    NetezzaSource: NetezzaSource,
    NetezzaTableDataset: NetezzaTableDataset,
    NotebookParameter: NotebookParameter,
    ODataLinkedService: ODataLinkedService,
    ODataResourceDataset: ODataResourceDataset,
    ODataSource: ODataSource,
    OdbcLinkedService: OdbcLinkedService,
    OdbcSink: OdbcSink,
    OdbcSource: OdbcSource,
    OdbcTableDataset: OdbcTableDataset,
    Office365Dataset: Office365Dataset,
    Office365LinkedService: Office365LinkedService,
    Office365Source: Office365Source,
    Operation: Operation,
    OperationDisplay: OperationDisplay,
    OperationListResponse: OperationListResponse,
    OperationLogSpecification: OperationLogSpecification,
    OperationMetricAvailability: OperationMetricAvailability,
    OperationMetricDimension: OperationMetricDimension,
    OperationMetricSpecification: OperationMetricSpecification,
    OperationServiceSpecification: OperationServiceSpecification,
    OracleCloudStorageLinkedService: OracleCloudStorageLinkedService,
    OracleCloudStorageLocation: OracleCloudStorageLocation,
    OracleCloudStorageReadSettings: OracleCloudStorageReadSettings,
    OracleLinkedService: OracleLinkedService,
    OraclePartitionSettings: OraclePartitionSettings,
    OracleServiceCloudLinkedService: OracleServiceCloudLinkedService,
    OracleServiceCloudObjectDataset: OracleServiceCloudObjectDataset,
    OracleServiceCloudSource: OracleServiceCloudSource,
    OracleSink: OracleSink,
    OracleSource: OracleSource,
    OracleTableDataset: OracleTableDataset,
    OrcDataset: OrcDataset,
    OrcFormat: OrcFormat,
    OrcSink: OrcSink,
    OrcSource: OrcSource,
    OrcWriteSettings: OrcWriteSettings,
    OutputColumn: OutputColumn,
    PackageStore: PackageStore,
    ParameterSpecification: ParameterSpecification,
    ParquetDataset: ParquetDataset,
    ParquetFormat: ParquetFormat,
    ParquetReadSettings: ParquetReadSettings,
    ParquetSink: ParquetSink,
    ParquetSource: ParquetSource,
    ParquetWriteSettings: ParquetWriteSettings,
    PaypalLinkedService: PaypalLinkedService,
    PaypalObjectDataset: PaypalObjectDataset,
    PaypalSource: PaypalSource,
    PhoenixLinkedService: PhoenixLinkedService,
    PhoenixObjectDataset: PhoenixObjectDataset,
    PhoenixSource: PhoenixSource,
    PipelineElapsedTimeMetricPolicy: PipelineElapsedTimeMetricPolicy,
    PipelineExternalComputeScaleProperties: PipelineExternalComputeScaleProperties,
    PipelineFolder: PipelineFolder,
    PipelineListResponse: PipelineListResponse,
    PipelinePolicy: PipelinePolicy,
    PipelineReference: PipelineReference,
    PipelineResource: PipelineResource,
    PipelineRun: PipelineRun,
    PipelineRunInvokedBy: PipelineRunInvokedBy,
    PipelineRunsQueryResponse: PipelineRunsQueryResponse,
    PolybaseSettings: PolybaseSettings,
    PostgreSqlLinkedService: PostgreSqlLinkedService,
    PostgreSqlSource: PostgreSqlSource,
    PostgreSqlTableDataset: PostgreSqlTableDataset,
    PowerQuerySink: PowerQuerySink,
    PowerQuerySinkMapping: PowerQuerySinkMapping,
    PowerQuerySource: PowerQuerySource,
    PrestoLinkedService: PrestoLinkedService,
    PrestoObjectDataset: PrestoObjectDataset,
    PrestoSource: PrestoSource,
    PrivateEndpoint: PrivateEndpoint,
    PrivateEndpointConnectionListResponse: PrivateEndpointConnectionListResponse,
    PrivateEndpointConnectionResource: PrivateEndpointConnectionResource,
    PrivateLinkConnectionApprovalRequest: PrivateLinkConnectionApprovalRequest,
    PrivateLinkConnectionApprovalRequestResource: PrivateLinkConnectionApprovalRequestResource,
    PrivateLinkConnectionState: PrivateLinkConnectionState,
    PrivateLinkResource: PrivateLinkResource,
    PrivateLinkResourceProperties: PrivateLinkResourceProperties,
    PrivateLinkResourcesWrapper: PrivateLinkResourcesWrapper,
    PurviewConfiguration: PurviewConfiguration,
    QueryDataFlowDebugSessionsResponse: QueryDataFlowDebugSessionsResponse,
    QuickBooksLinkedService: QuickBooksLinkedService,
    QuickBooksObjectDataset: QuickBooksObjectDataset,
    QuickBooksSource: QuickBooksSource,
    QuickbaseLinkedService: QuickbaseLinkedService,
    RecurrenceSchedule: RecurrenceSchedule,
    RecurrenceScheduleOccurrence: RecurrenceScheduleOccurrence,
    RedirectIncompatibleRowSettings: RedirectIncompatibleRowSettings,
    RedshiftUnloadSettings: RedshiftUnloadSettings,
    RelationalSource: RelationalSource,
    RelationalTableDataset: RelationalTableDataset,
    RemotePrivateEndpointConnection: RemotePrivateEndpointConnection,
    RerunTumblingWindowTrigger: RerunTumblingWindowTrigger,
    Resource: Resource,
    ResponsysLinkedService: ResponsysLinkedService,
    ResponsysObjectDataset: ResponsysObjectDataset,
    ResponsysSource: ResponsysSource,
    RestResourceDataset: RestResourceDataset,
    RestServiceLinkedService: RestServiceLinkedService,
    RestSink: RestSink,
    RestSource: RestSource,
    RetryPolicy: RetryPolicy,
    RunFilterParameters: RunFilterParameters,
    RunQueryFilter: RunQueryFilter,
    RunQueryOrderBy: RunQueryOrderBy,
    SalesforceLinkedService: SalesforceLinkedService,
    SalesforceMarketingCloudLinkedService: SalesforceMarketingCloudLinkedService,
    SalesforceMarketingCloudObjectDataset: SalesforceMarketingCloudObjectDataset,
    SalesforceMarketingCloudSource: SalesforceMarketingCloudSource,
    SalesforceObjectDataset: SalesforceObjectDataset,
    SalesforceServiceCloudLinkedService: SalesforceServiceCloudLinkedService,
    SalesforceServiceCloudObjectDataset: SalesforceServiceCloudObjectDataset,
    SalesforceServiceCloudSink: SalesforceServiceCloudSink,
    SalesforceServiceCloudSource: SalesforceServiceCloudSource,
    SalesforceSink: SalesforceSink,
    SalesforceSource: SalesforceSource,
    SapBWLinkedService: SapBWLinkedService,
    SapBwCubeDataset: SapBwCubeDataset,
    SapBwSource: SapBwSource,
    SapCloudForCustomerLinkedService: SapCloudForCustomerLinkedService,
    SapCloudForCustomerResourceDataset: SapCloudForCustomerResourceDataset,
    SapCloudForCustomerSink: SapCloudForCustomerSink,
    SapCloudForCustomerSource: SapCloudForCustomerSource,
    SapEccLinkedService: SapEccLinkedService,
    SapEccResourceDataset: SapEccResourceDataset,
    SapEccSource: SapEccSource,
    SapHanaLinkedService: SapHanaLinkedService,
    SapHanaPartitionSettings: SapHanaPartitionSettings,
    SapHanaSource: SapHanaSource,
    SapHanaTableDataset: SapHanaTableDataset,
    SapOdpLinkedService: SapOdpLinkedService,
    SapOdpResourceDataset: SapOdpResourceDataset,
    SapOdpSource: SapOdpSource,
    SapOpenHubLinkedService: SapOpenHubLinkedService,
    SapOpenHubSource: SapOpenHubSource,
    SapOpenHubTableDataset: SapOpenHubTableDataset,
    SapTableLinkedService: SapTableLinkedService,
    SapTablePartitionSettings: SapTablePartitionSettings,
    SapTableResourceDataset: SapTableResourceDataset,
    SapTableSource: SapTableSource,
    ScheduleTrigger: ScheduleTrigger,
    ScheduleTriggerRecurrence: ScheduleTriggerRecurrence,
    ScriptAction: ScriptAction,
    ScriptActivity: ScriptActivity,
    ScriptActivityParameter: ScriptActivityParameter,
    ScriptActivityScriptBlock: ScriptActivityScriptBlock,
    ScriptActivityTypePropertiesLogSettings: ScriptActivityTypePropertiesLogSettings,
    SecretBase: SecretBase,
    SecureInputOutputPolicy: SecureInputOutputPolicy,
    SecureString: SecureString,
    SelfDependencyTumblingWindowTriggerReference: SelfDependencyTumblingWindowTriggerReference,
    SelfHostedIntegrationRuntime: SelfHostedIntegrationRuntime,
    SelfHostedIntegrationRuntimeNode: SelfHostedIntegrationRuntimeNode,
    SelfHostedIntegrationRuntimeStatus: SelfHostedIntegrationRuntimeStatus,
    ServiceNowLinkedService: ServiceNowLinkedService,
    ServiceNowObjectDataset: ServiceNowObjectDataset,
    ServiceNowSource: ServiceNowSource,
    ServicePrincipalCredential: ServicePrincipalCredential,
    SetVariableActivity: SetVariableActivity,
    SftpLocation: SftpLocation,
    SftpReadSettings: SftpReadSettings,
    SftpServerLinkedService: SftpServerLinkedService,
    SftpWriteSettings: SftpWriteSettings,
    SharePointOnlineListLinkedService: SharePointOnlineListLinkedService,
    SharePointOnlineListResourceDataset: SharePointOnlineListResourceDataset,
    SharePointOnlineListSource: SharePointOnlineListSource,
    ShopifyLinkedService: ShopifyLinkedService,
    ShopifyObjectDataset: ShopifyObjectDataset,
    ShopifySource: ShopifySource,
    SkipErrorFile: SkipErrorFile,
    SmartsheetLinkedService: SmartsheetLinkedService,
    SnowflakeDataset: SnowflakeDataset,
    SnowflakeExportCopyCommand: SnowflakeExportCopyCommand,
    SnowflakeImportCopyCommand: SnowflakeImportCopyCommand,
    SnowflakeLinkedService: SnowflakeLinkedService,
    SnowflakeSink: SnowflakeSink,
    SnowflakeSource: SnowflakeSource,
    SparkConfigurationParametrizationReference: SparkConfigurationParametrizationReference,
    SparkLinkedService: SparkLinkedService,
    SparkObjectDataset: SparkObjectDataset,
    SparkSource: SparkSource,
    SqlAlwaysEncryptedProperties: SqlAlwaysEncryptedProperties,
    SqlDWSink: SqlDWSink,
    SqlDWSource: SqlDWSource,
    SqlDWUpsertSettings: SqlDWUpsertSettings,
    SqlMISink: SqlMISink,
    SqlMISource: SqlMISource,
    SqlPartitionSettings: SqlPartitionSettings,
    SqlServerLinkedService: SqlServerLinkedService,
    SqlServerSink: SqlServerSink,
    SqlServerSource: SqlServerSource,
    SqlServerStoredProcedureActivity: SqlServerStoredProcedureActivity,
    SqlServerTableDataset: SqlServerTableDataset,
    SqlSink: SqlSink,
    SqlSource: SqlSource,
    SqlUpsertSettings: SqlUpsertSettings,
    SquareLinkedService: SquareLinkedService,
    SquareObjectDataset: SquareObjectDataset,
    SquareSource: SquareSource,
    SsisAccessCredential: SsisAccessCredential,
    SsisChildPackage: SsisChildPackage,
    SsisEnvironment: SsisEnvironment,
    SsisEnvironmentReference: SsisEnvironmentReference,
    SsisExecutionCredential: SsisExecutionCredential,
    SsisExecutionParameter: SsisExecutionParameter,
    SsisFolder: SsisFolder,
    SsisLogLocation: SsisLogLocation,
    SsisObjectMetadata: SsisObjectMetadata,
    SsisObjectMetadataListResponse: SsisObjectMetadataListResponse,
    SsisObjectMetadataStatusResponse: SsisObjectMetadataStatusResponse,
    SsisPackage: SsisPackage,
    SsisPackageLocation: SsisPackageLocation,
    SsisParameter: SsisParameter,
    SsisProject: SsisProject,
    SsisPropertyOverride: SsisPropertyOverride,
    SsisVariable: SsisVariable,
    StagingSettings: StagingSettings,
    StoreReadSettings: StoreReadSettings,
    StoreWriteSettings: StoreWriteSettings,
    StoredProcedureParameter: StoredProcedureParameter,
    SubResource: SubResource,
    SubResourceDebugResource: SubResourceDebugResource,
    SwitchActivity: SwitchActivity,
    SwitchCase: SwitchCase,
    SybaseLinkedService: SybaseLinkedService,
    SybaseSource: SybaseSource,
    SybaseTableDataset: SybaseTableDataset,
    SynapseNotebookActivity: SynapseNotebookActivity,
    SynapseNotebookReference: SynapseNotebookReference,
    SynapseSparkJobDefinitionActivity: SynapseSparkJobDefinitionActivity,
    SynapseSparkJobReference: SynapseSparkJobReference,
    TabularSource: TabularSource,
    TabularTranslator: TabularTranslator,
    TarGZipReadSettings: TarGZipReadSettings,
    TarReadSettings: TarReadSettings,
    TeamDeskLinkedService: TeamDeskLinkedService,
    TeradataLinkedService: TeradataLinkedService,
    TeradataPartitionSettings: TeradataPartitionSettings,
    TeradataSource: TeradataSource,
    TeradataTableDataset: TeradataTableDataset,
    TextFormat: TextFormat,
    Transformation: Transformation,
    Trigger: Trigger,
    TriggerDependencyReference: TriggerDependencyReference,
    TriggerFilterParameters: TriggerFilterParameters,
    TriggerListResponse: TriggerListResponse,
    TriggerPipelineReference: TriggerPipelineReference,
    TriggerQueryResponse: TriggerQueryResponse,
    TriggerReference: TriggerReference,
    TriggerResource: TriggerResource,
    TriggerRun: TriggerRun,
    TriggerRunsQueryResponse: TriggerRunsQueryResponse,
    TriggerSubscriptionOperationStatus: TriggerSubscriptionOperationStatus,
    TumblingWindowTrigger: TumblingWindowTrigger,
    TumblingWindowTriggerDependencyReference: TumblingWindowTriggerDependencyReference,
    TwilioLinkedService: TwilioLinkedService,
    TypeConversionSettings: TypeConversionSettings,
    UntilActivity: UntilActivity,
    UpdateIntegrationRuntimeNodeRequest: UpdateIntegrationRuntimeNodeRequest,
    UpdateIntegrationRuntimeRequest: UpdateIntegrationRuntimeRequest,
    UserAccessPolicy: UserAccessPolicy,
    UserProperty: UserProperty,
    ValidationActivity: ValidationActivity,
    VariableSpecification: VariableSpecification,
    VerticaLinkedService: VerticaLinkedService,
    VerticaSource: VerticaSource,
    VerticaTableDataset: VerticaTableDataset,
    WaitActivity: WaitActivity,
    WebActivity: WebActivity,
    WebActivityAuthentication: WebActivityAuthentication,
    WebAnonymousAuthentication: WebAnonymousAuthentication,
    WebBasicAuthentication: WebBasicAuthentication,
    WebClientCertificateAuthentication: WebClientCertificateAuthentication,
    WebHookActivity: WebHookActivity,
    WebLinkedService: WebLinkedService,
    WebLinkedServiceTypeProperties: WebLinkedServiceTypeProperties,
    WebSource: WebSource,
    WebTableDataset: WebTableDataset,
    WranglingDataFlow: WranglingDataFlow,
    XeroLinkedService: XeroLinkedService,
    XeroObjectDataset: XeroObjectDataset,
    XeroSource: XeroSource,
    XmlDataset: XmlDataset,
    XmlReadSettings: XmlReadSettings,
    XmlSource: XmlSource,
    ZendeskLinkedService: ZendeskLinkedService,
    ZipDeflateReadSettings: ZipDeflateReadSettings,
    ZohoLinkedService: ZohoLinkedService,
    ZohoObjectDataset: ZohoObjectDataset,
    ZohoSource: ZohoSource,
    discriminators: discriminators
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2018-06-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const factoryRepoUpdate = {
    parameterPath: "factoryRepoUpdate",
    mapper: FactoryRepoUpdate
};
const locationId = {
    parameterPath: "locationId",
    mapper: {
        serializedName: "locationId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[-\\w\\._\\(\\)]+$"),
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const factory = {
    parameterPath: "factory",
    mapper: Factory
};
const factoryName = {
    parameterPath: "factoryName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$"),
            MaxLength: 63,
            MinLength: 3
        },
        serializedName: "factoryName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const ifMatch = {
    parameterPath: ["options", "ifMatch"],
    mapper: {
        serializedName: "If-Match",
        type: {
            name: "String"
        }
    }
};
const factoryUpdateParameters = {
    parameterPath: "factoryUpdateParameters",
    mapper: FactoryUpdateParameters
};
const ifNoneMatch = {
    parameterPath: ["options", "ifNoneMatch"],
    mapper: {
        serializedName: "If-None-Match",
        type: {
            name: "String"
        }
    }
};
const gitHubAccessTokenRequest = {
    parameterPath: "gitHubAccessTokenRequest",
    mapper: GitHubAccessTokenRequest
};
const policy = {
    parameterPath: "policy",
    mapper: UserAccessPolicy
};
const exposureControlRequest = {
    parameterPath: "exposureControlRequest",
    mapper: ExposureControlRequest
};
const exposureControlBatchRequest = {
    parameterPath: "exposureControlBatchRequest",
    mapper: ExposureControlBatchRequest
};
const integrationRuntime = {
    parameterPath: "integrationRuntime",
    mapper: IntegrationRuntimeResource
};
const integrationRuntimeName = {
    parameterPath: "integrationRuntimeName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$"),
            MaxLength: 63,
            MinLength: 3
        },
        serializedName: "integrationRuntimeName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const updateIntegrationRuntimeRequest = {
    parameterPath: "updateIntegrationRuntimeRequest",
    mapper: UpdateIntegrationRuntimeRequest
};
const regenerateKeyParameters = {
    parameterPath: "regenerateKeyParameters",
    mapper: IntegrationRuntimeRegenerateKeyParameters
};
const linkedIntegrationRuntimeRequest = {
    parameterPath: "linkedIntegrationRuntimeRequest",
    mapper: LinkedIntegrationRuntimeRequest
};
const createLinkedIntegrationRuntimeRequest = {
    parameterPath: "createLinkedIntegrationRuntimeRequest",
    mapper: CreateLinkedIntegrationRuntimeRequest
};
const getMetadataRequest = {
    parameterPath: ["options", "getMetadataRequest"],
    mapper: GetSsisObjectMetadataRequest
};
const nodeName = {
    parameterPath: "nodeName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-z0-9A-Z][a-z0-9A-Z_-]{0,149}$"),
            MaxLength: 150,
            MinLength: 1
        },
        serializedName: "nodeName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const updateIntegrationRuntimeNodeRequest = {
    parameterPath: "updateIntegrationRuntimeNodeRequest",
    mapper: UpdateIntegrationRuntimeNodeRequest
};
const linkedService = {
    parameterPath: "linkedService",
    mapper: LinkedServiceResource
};
const linkedServiceName = {
    parameterPath: "linkedServiceName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[A-Za-z0-9_][^<>*#.%&:\\\\+?/]*$"),
            MaxLength: 260,
            MinLength: 1
        },
        serializedName: "linkedServiceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const dataset = {
    parameterPath: "dataset",
    mapper: DatasetResource
};
const datasetName = {
    parameterPath: "datasetName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[A-Za-z0-9_][^<>*#.%&:\\\\+?/]*$"),
            MaxLength: 260,
            MinLength: 1
        },
        serializedName: "datasetName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const pipeline = {
    parameterPath: "pipeline",
    mapper: PipelineResource
};
const pipelineName = {
    parameterPath: "pipelineName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[A-Za-z0-9_][^<>*#.%&:\\\\+?/]*$"),
            MaxLength: 260,
            MinLength: 1
        },
        serializedName: "pipelineName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters = {
    parameterPath: ["options", "parameters"],
    mapper: {
        serializedName: "parameters",
        type: {
            name: "Dictionary",
            value: { type: { name: "any" } }
        }
    }
};
const referencePipelineRunId = {
    parameterPath: ["options", "referencePipelineRunId"],
    mapper: {
        serializedName: "referencePipelineRunId",
        type: {
            name: "String"
        }
    }
};
const isRecovery = {
    parameterPath: ["options", "isRecovery"],
    mapper: {
        serializedName: "isRecovery",
        type: {
            name: "Boolean"
        }
    }
};
const startActivityName = {
    parameterPath: ["options", "startActivityName"],
    mapper: {
        serializedName: "startActivityName",
        type: {
            name: "String"
        }
    }
};
const startFromFailure = {
    parameterPath: ["options", "startFromFailure"],
    mapper: {
        serializedName: "startFromFailure",
        type: {
            name: "Boolean"
        }
    }
};
const filterParameters = {
    parameterPath: "filterParameters",
    mapper: RunFilterParameters
};
const runId = {
    parameterPath: "runId",
    mapper: {
        serializedName: "runId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const isRecursive = {
    parameterPath: ["options", "isRecursive"],
    mapper: {
        serializedName: "isRecursive",
        type: {
            name: "Boolean"
        }
    }
};
const filterParameters1 = {
    parameterPath: "filterParameters",
    mapper: TriggerFilterParameters
};
const trigger = {
    parameterPath: "trigger",
    mapper: TriggerResource
};
const triggerName = {
    parameterPath: "triggerName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[A-Za-z0-9_][^<>*#.%&:\\\\+?/]*$"),
            MaxLength: 260,
            MinLength: 1
        },
        serializedName: "triggerName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const dataFlow = {
    parameterPath: "dataFlow",
    mapper: DataFlowResource
};
const dataFlowName = {
    parameterPath: "dataFlowName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[A-Za-z0-9_][^<>*#.%&:\\\\+?/]*$"),
            MaxLength: 260,
            MinLength: 1
        },
        serializedName: "dataFlowName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const request = {
    parameterPath: "request",
    mapper: CreateDataFlowDebugSessionRequest
};
const request1 = {
    parameterPath: "request",
    mapper: DataFlowDebugPackage
};
const request2 = {
    parameterPath: "request",
    mapper: DeleteDataFlowDebugSessionRequest
};
const request3 = {
    parameterPath: "request",
    mapper: DataFlowDebugCommandRequest
};
const managedVirtualNetwork = {
    parameterPath: "managedVirtualNetwork",
    mapper: ManagedVirtualNetworkResource
};
const managedVirtualNetworkName = {
    parameterPath: "managedVirtualNetworkName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^([_A-Za-z0-9]|([_A-Za-z0-9][-_A-Za-z0-9]{0,125}[_A-Za-z0-9]))$"),
            MaxLength: 127,
            MinLength: 1
        },
        serializedName: "managedVirtualNetworkName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const managedPrivateEndpoint = {
    parameterPath: "managedPrivateEndpoint",
    mapper: ManagedPrivateEndpointResource
};
const managedPrivateEndpointName = {
    parameterPath: "managedPrivateEndpointName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^([_A-Za-z0-9]|([_A-Za-z0-9][-_A-Za-z0-9]{0,125}[_A-Za-z0-9]))$"),
            MaxLength: 127,
            MinLength: 1
        },
        serializedName: "managedPrivateEndpointName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const credential = {
    parameterPath: "credential",
    mapper: ManagedIdentityCredentialResource
};
const credentialName = {
    parameterPath: "credentialName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^([_A-Za-z0-9]|([_A-Za-z0-9][-_A-Za-z0-9]{0,125}[_A-Za-z0-9]))$"),
            MaxLength: 127,
            MinLength: 1
        },
        serializedName: "credentialName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const privateEndpointWrapper = {
    parameterPath: "privateEndpointWrapper",
    mapper: PrivateLinkConnectionApprovalRequestResource
};
const privateEndpointConnectionName = {
    parameterPath: "privateEndpointConnectionName",
    mapper: {
        serializedName: "privateEndpointConnectionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const globalParameterName = {
    parameterPath: "globalParameterName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[A-Za-z0-9_][^<>*#.%&:\\\\+?/]*$"),
            MaxLength: 260,
            MinLength: 1
        },
        serializedName: "globalParameterName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const defaultParam = {
    parameterPath: "defaultParam",
    mapper: GlobalParameterResource
};
const changeDataCapture = {
    parameterPath: "changeDataCapture",
    mapper: ChangeDataCaptureResource
};
const changeDataCaptureName = {
    parameterPath: "changeDataCaptureName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[A-Za-z0-9_][^<>*#.%&:\\\\+?/]*$"),
            MaxLength: 260,
            MinLength: 1
        },
        serializedName: "changeDataCaptureName",
        required: true,
        type: {
            name: "String"
        }
    }
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Operations operations. */
class OperationsImpl {
    /**
     * Initialize a new instance of the class Operations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the available Azure Data Factory API operations.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists the available Azure Data Factory API operations.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$1);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec$1);
    }
}
// Operation Specifications
const serializer$m = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$1 = {
    path: "/providers/Microsoft.DataFactory/operations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationListResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer: serializer$m
};
const listNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationListResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [$host, nextLink],
    headerParameters: [accept],
    serializer: serializer$m
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Factories operations. */
class FactoriesImpl {
    /**
     * Initialize a new instance of the class Factories class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists factories under the specified subscription.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists factories.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName, options) {
        const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByResourceGroupPagingPage(resourceGroupName, options, settings);
            }
        };
    }
    listByResourceGroupPagingPage(resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByResourceGroup(resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByResourceGroupNext(resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByResourceGroupPagingAll(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingAll_1() {
            var _a, e_2, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByResourceGroupPagingPage(resourceGroupName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Lists factories under the specified subscription.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec);
    }
    /**
     * Updates a factory's repo information.
     * @param locationId The location identifier.
     * @param factoryRepoUpdate Update factory repo request definition.
     * @param options The options parameters.
     */
    configureFactoryRepo(locationId, factoryRepoUpdate, options) {
        return this.client.sendOperationRequest({ locationId, factoryRepoUpdate, options }, configureFactoryRepoOperationSpec);
    }
    /**
     * Lists factories.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    _listByResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listByResourceGroupOperationSpec);
    }
    /**
     * Creates or updates a factory.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param factory Factory resource definition.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, factoryName, factory, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, factory, options }, createOrUpdateOperationSpec$c);
    }
    /**
     * Updates a factory.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param factoryUpdateParameters The parameters for updating a factory.
     * @param options The options parameters.
     */
    update(resourceGroupName, factoryName, factoryUpdateParameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, factoryUpdateParameters, options }, updateOperationSpec$2);
    }
    /**
     * Gets a factory.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param options The options parameters.
     */
    get(resourceGroupName, factoryName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, options }, getOperationSpec$g);
    }
    /**
     * Deletes a factory.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param options The options parameters.
     */
    delete(resourceGroupName, factoryName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, options }, deleteOperationSpec$d);
    }
    /**
     * Get GitHub Access Token.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param gitHubAccessTokenRequest Get GitHub access token request definition.
     * @param options The options parameters.
     */
    getGitHubAccessToken(resourceGroupName, factoryName, gitHubAccessTokenRequest, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, gitHubAccessTokenRequest, options }, getGitHubAccessTokenOperationSpec);
    }
    /**
     * Get Data Plane access.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param policy Data Plane user access policy definition.
     * @param options The options parameters.
     */
    getDataPlaneAccess(resourceGroupName, factoryName, policy, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, policy, options }, getDataPlaneAccessOperationSpec);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec);
    }
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName The resource group name.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    _listByResourceGroupNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, listByResourceGroupNextOperationSpec);
    }
}
// Operation Specifications
const serializer$l = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.DataFactory/factories",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: FactoryListResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$l
};
const configureFactoryRepoOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.DataFactory/locations/{locationId}/configureFactoryRepo",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Factory
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: factoryRepoUpdate,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        locationId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$l
};
const listByResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: FactoryListResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$l
};
const createOrUpdateOperationSpec$c = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Factory
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: factory,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName
    ],
    headerParameters: [
        accept,
        contentType,
        ifMatch
    ],
    mediaType: "json",
    serializer: serializer$l
};
const updateOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Factory
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: factoryUpdateParameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$l
};
const getOperationSpec$g = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Factory
        },
        304: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName
    ],
    headerParameters: [accept, ifNoneMatch],
    serializer: serializer$l
};
const deleteOperationSpec$d = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName
    ],
    headerParameters: [accept],
    serializer: serializer$l
};
const getGitHubAccessTokenOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/getGitHubAccessToken",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: GitHubAccessTokenResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: gitHubAccessTokenRequest,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$l
};
const getDataPlaneAccessOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/getDataPlaneAccess",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: AccessPolicyResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: policy,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$l
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: FactoryListResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        nextLink,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$l
};
const listByResourceGroupNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: FactoryListResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        nextLink,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$l
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing ExposureControl operations. */
class ExposureControlImpl {
    /**
     * Initialize a new instance of the class ExposureControl class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get exposure control feature for specific location.
     * @param locationId The location identifier.
     * @param exposureControlRequest The exposure control request.
     * @param options The options parameters.
     */
    getFeatureValue(locationId, exposureControlRequest, options) {
        return this.client.sendOperationRequest({ locationId, exposureControlRequest, options }, getFeatureValueOperationSpec);
    }
    /**
     * Get exposure control feature for specific factory.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param exposureControlRequest The exposure control request.
     * @param options The options parameters.
     */
    getFeatureValueByFactory(resourceGroupName, factoryName, exposureControlRequest, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, exposureControlRequest, options }, getFeatureValueByFactoryOperationSpec);
    }
    /**
     * Get list of exposure control features for specific factory.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param exposureControlBatchRequest The exposure control request for list of features.
     * @param options The options parameters.
     */
    queryFeatureValuesByFactory(resourceGroupName, factoryName, exposureControlBatchRequest, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, exposureControlBatchRequest, options }, queryFeatureValuesByFactoryOperationSpec);
    }
}
// Operation Specifications
const serializer$k = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getFeatureValueOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.DataFactory/locations/{locationId}/getFeatureValue",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ExposureControlResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: exposureControlRequest,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        locationId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$k
};
const getFeatureValueByFactoryOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/getFeatureValue",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ExposureControlResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: exposureControlRequest,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$k
};
const queryFeatureValuesByFactoryOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/queryFeaturesValue",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ExposureControlBatchResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: exposureControlBatchRequest,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$k
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
function createLroSpec(inputs) {
    const { args, spec, sendOperationFn } = inputs;
    return {
        requestMethod: spec.httpMethod,
        requestPath: spec.path,
        sendInitialRequest: () => sendOperationFn(args, spec),
        sendPollRequest: (path, options) => {
            const restSpec = tslib.__rest(spec, ["requestBody"]);
            return sendOperationFn(args, Object.assign(Object.assign({}, restSpec), { httpMethod: "GET", path, abortSignal: options === null || options === void 0 ? void 0 : options.abortSignal }));
        }
    };
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing IntegrationRuntimes operations. */
class IntegrationRuntimesImpl {
    /**
     * Initialize a new instance of the class IntegrationRuntimes class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists integration runtimes.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param options The options parameters.
     */
    listByFactory(resourceGroupName, factoryName, options) {
        const iter = this.listByFactoryPagingAll(resourceGroupName, factoryName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByFactoryPagingPage(resourceGroupName, factoryName, options, settings);
            }
        };
    }
    listByFactoryPagingPage(resourceGroupName, factoryName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByFactoryPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByFactory(resourceGroupName, factoryName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByFactoryNext(resourceGroupName, factoryName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByFactoryPagingAll(resourceGroupName, factoryName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByFactoryPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByFactoryPagingPage(resourceGroupName, factoryName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists integration runtimes.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param options The options parameters.
     */
    _listByFactory(resourceGroupName, factoryName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, options }, listByFactoryOperationSpec$b);
    }
    /**
     * Creates or updates an integration runtime.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param integrationRuntime Integration runtime resource definition.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, factoryName, integrationRuntimeName, integrationRuntime, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            factoryName,
            integrationRuntimeName,
            integrationRuntime,
            options
        }, createOrUpdateOperationSpec$b);
    }
    /**
     * Gets an integration runtime.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param options The options parameters.
     */
    get(resourceGroupName, factoryName, integrationRuntimeName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, integrationRuntimeName, options }, getOperationSpec$f);
    }
    /**
     * Updates an integration runtime.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param updateIntegrationRuntimeRequest The parameters for updating an integration runtime.
     * @param options The options parameters.
     */
    update(resourceGroupName, factoryName, integrationRuntimeName, updateIntegrationRuntimeRequest, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            factoryName,
            integrationRuntimeName,
            updateIntegrationRuntimeRequest,
            options
        }, updateOperationSpec$1);
    }
    /**
     * Deletes an integration runtime.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param options The options parameters.
     */
    delete(resourceGroupName, factoryName, integrationRuntimeName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, integrationRuntimeName, options }, deleteOperationSpec$c);
    }
    /**
     * Gets detailed status information for an integration runtime.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param options The options parameters.
     */
    getStatus(resourceGroupName, factoryName, integrationRuntimeName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, integrationRuntimeName, options }, getStatusOperationSpec);
    }
    /**
     * Gets the list of outbound network dependencies for a given Azure-SSIS integration runtime.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param options The options parameters.
     */
    listOutboundNetworkDependenciesEndpoints(resourceGroupName, factoryName, integrationRuntimeName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, integrationRuntimeName, options }, listOutboundNetworkDependenciesEndpointsOperationSpec);
    }
    /**
     * Gets the on-premises integration runtime connection information for encrypting the on-premises data
     * source credentials.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param options The options parameters.
     */
    getConnectionInfo(resourceGroupName, factoryName, integrationRuntimeName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, integrationRuntimeName, options }, getConnectionInfoOperationSpec);
    }
    /**
     * Regenerates the authentication key for an integration runtime.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param regenerateKeyParameters The parameters for regenerating integration runtime authentication
     *                                key.
     * @param options The options parameters.
     */
    regenerateAuthKey(resourceGroupName, factoryName, integrationRuntimeName, regenerateKeyParameters, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            factoryName,
            integrationRuntimeName,
            regenerateKeyParameters,
            options
        }, regenerateAuthKeyOperationSpec);
    }
    /**
     * Retrieves the authentication keys for an integration runtime.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param options The options parameters.
     */
    listAuthKeys(resourceGroupName, factoryName, integrationRuntimeName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, integrationRuntimeName, options }, listAuthKeysOperationSpec);
    }
    /**
     * Starts a ManagedReserved type integration runtime.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param options The options parameters.
     */
    beginStart(resourceGroupName, factoryName, integrationRuntimeName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, factoryName, integrationRuntimeName, options },
                spec: startOperationSpec$2
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Starts a ManagedReserved type integration runtime.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param options The options parameters.
     */
    beginStartAndWait(resourceGroupName, factoryName, integrationRuntimeName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginStart(resourceGroupName, factoryName, integrationRuntimeName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Stops a ManagedReserved type integration runtime.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param options The options parameters.
     */
    beginStop(resourceGroupName, factoryName, integrationRuntimeName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, factoryName, integrationRuntimeName, options },
                spec: stopOperationSpec$2
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Stops a ManagedReserved type integration runtime.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param options The options parameters.
     */
    beginStopAndWait(resourceGroupName, factoryName, integrationRuntimeName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginStop(resourceGroupName, factoryName, integrationRuntimeName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Force the integration runtime to synchronize credentials across integration runtime nodes, and this
     * will override the credentials across all worker nodes with those available on the dispatcher node.
     * If you already have the latest credential backup file, you should manually import it (preferred) on
     * any self-hosted integration runtime node than using this API directly.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param options The options parameters.
     */
    syncCredentials(resourceGroupName, factoryName, integrationRuntimeName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, integrationRuntimeName, options }, syncCredentialsOperationSpec);
    }
    /**
     * Get the integration runtime monitoring data, which includes the monitor data for all the nodes under
     * this integration runtime.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param options The options parameters.
     */
    getMonitoringData(resourceGroupName, factoryName, integrationRuntimeName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, integrationRuntimeName, options }, getMonitoringDataOperationSpec);
    }
    /**
     * Upgrade self-hosted integration runtime to latest version if availability.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param options The options parameters.
     */
    upgrade(resourceGroupName, factoryName, integrationRuntimeName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, integrationRuntimeName, options }, upgradeOperationSpec);
    }
    /**
     * Remove all linked integration runtimes under specific data factory in a self-hosted integration
     * runtime.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param linkedIntegrationRuntimeRequest The data factory name for the linked integration runtime.
     * @param options The options parameters.
     */
    removeLinks(resourceGroupName, factoryName, integrationRuntimeName, linkedIntegrationRuntimeRequest, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            factoryName,
            integrationRuntimeName,
            linkedIntegrationRuntimeRequest,
            options
        }, removeLinksOperationSpec);
    }
    /**
     * Create a linked integration runtime entry in a shared integration runtime.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param createLinkedIntegrationRuntimeRequest The linked integration runtime properties.
     * @param options The options parameters.
     */
    createLinkedIntegrationRuntime(resourceGroupName, factoryName, integrationRuntimeName, createLinkedIntegrationRuntimeRequest, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            factoryName,
            integrationRuntimeName,
            createLinkedIntegrationRuntimeRequest,
            options
        }, createLinkedIntegrationRuntimeOperationSpec);
    }
    /**
     * ListByFactoryNext
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param nextLink The nextLink from the previous successful call to the ListByFactory method.
     * @param options The options parameters.
     */
    _listByFactoryNext(resourceGroupName, factoryName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, nextLink, options }, listByFactoryNextOperationSpec$b);
    }
}
// Operation Specifications
const serializer$j = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByFactoryOperationSpec$b = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: IntegrationRuntimeListResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName
    ],
    headerParameters: [accept],
    serializer: serializer$j
};
const createOrUpdateOperationSpec$b = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: IntegrationRuntimeResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: integrationRuntime,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        integrationRuntimeName
    ],
    headerParameters: [
        accept,
        contentType,
        ifMatch
    ],
    mediaType: "json",
    serializer: serializer$j
};
const getOperationSpec$f = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: IntegrationRuntimeResource
        },
        304: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        integrationRuntimeName
    ],
    headerParameters: [accept, ifNoneMatch],
    serializer: serializer$j
};
const updateOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: IntegrationRuntimeResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: updateIntegrationRuntimeRequest,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        integrationRuntimeName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$j
};
const deleteOperationSpec$c = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        integrationRuntimeName
    ],
    headerParameters: [accept],
    serializer: serializer$j
};
const getStatusOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/getStatus",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: IntegrationRuntimeStatusResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        integrationRuntimeName
    ],
    headerParameters: [accept],
    serializer: serializer$j
};
const listOutboundNetworkDependenciesEndpointsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/outboundNetworkDependenciesEndpoints",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: IntegrationRuntimeOutboundNetworkDependenciesEndpointsResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        integrationRuntimeName
    ],
    headerParameters: [accept],
    serializer: serializer$j
};
const getConnectionInfoOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/getConnectionInfo",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: IntegrationRuntimeConnectionInfo
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        integrationRuntimeName
    ],
    headerParameters: [accept],
    serializer: serializer$j
};
const regenerateAuthKeyOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/regenerateAuthKey",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: IntegrationRuntimeAuthKeys
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: regenerateKeyParameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        integrationRuntimeName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$j
};
const listAuthKeysOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/listAuthKeys",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: IntegrationRuntimeAuthKeys
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        integrationRuntimeName
    ],
    headerParameters: [accept],
    serializer: serializer$j
};
const startOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/start",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: IntegrationRuntimeStatusResponse
        },
        201: {
            bodyMapper: IntegrationRuntimeStatusResponse
        },
        202: {
            bodyMapper: IntegrationRuntimeStatusResponse
        },
        204: {
            bodyMapper: IntegrationRuntimeStatusResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        integrationRuntimeName
    ],
    headerParameters: [accept],
    serializer: serializer$j
};
const stopOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/stop",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        integrationRuntimeName
    ],
    headerParameters: [accept],
    serializer: serializer$j
};
const syncCredentialsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/syncCredentials",
    httpMethod: "POST",
    responses: {
        200: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        integrationRuntimeName
    ],
    headerParameters: [accept],
    serializer: serializer$j
};
const getMonitoringDataOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/monitoringData",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: IntegrationRuntimeMonitoringData
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        integrationRuntimeName
    ],
    headerParameters: [accept],
    serializer: serializer$j
};
const upgradeOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/upgrade",
    httpMethod: "POST",
    responses: {
        200: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        integrationRuntimeName
    ],
    headerParameters: [accept],
    serializer: serializer$j
};
const removeLinksOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/removeLinks",
    httpMethod: "POST",
    responses: {
        200: {},
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: linkedIntegrationRuntimeRequest,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        integrationRuntimeName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$j
};
const createLinkedIntegrationRuntimeOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/linkedIntegrationRuntime",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: IntegrationRuntimeStatusResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: createLinkedIntegrationRuntimeRequest,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        integrationRuntimeName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$j
};
const listByFactoryNextOperationSpec$b = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: IntegrationRuntimeListResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        nextLink,
        subscriptionId,
        resourceGroupName,
        factoryName
    ],
    headerParameters: [accept],
    serializer: serializer$j
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing IntegrationRuntimeObjectMetadata operations. */
class IntegrationRuntimeObjectMetadataImpl {
    /**
     * Initialize a new instance of the class IntegrationRuntimeObjectMetadata class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Refresh a SSIS integration runtime object metadata.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param options The options parameters.
     */
    beginRefresh(resourceGroupName, factoryName, integrationRuntimeName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, factoryName, integrationRuntimeName, options },
                spec: refreshOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Refresh a SSIS integration runtime object metadata.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param options The options parameters.
     */
    beginRefreshAndWait(resourceGroupName, factoryName, integrationRuntimeName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginRefresh(resourceGroupName, factoryName, integrationRuntimeName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Get a SSIS integration runtime object metadata by specified path. The return is pageable metadata
     * list.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param options The options parameters.
     */
    get(resourceGroupName, factoryName, integrationRuntimeName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, integrationRuntimeName, options }, getOperationSpec$e);
    }
}
// Operation Specifications
const serializer$i = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const refreshOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/refreshObjectMetadata",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: SsisObjectMetadataStatusResponse
        },
        201: {
            bodyMapper: SsisObjectMetadataStatusResponse
        },
        202: {
            bodyMapper: SsisObjectMetadataStatusResponse
        },
        204: {
            bodyMapper: SsisObjectMetadataStatusResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        integrationRuntimeName
    ],
    headerParameters: [accept],
    serializer: serializer$i
};
const getOperationSpec$e = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/getObjectMetadata",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: SsisObjectMetadataListResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: getMetadataRequest,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        integrationRuntimeName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$i
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing IntegrationRuntimeNodes operations. */
class IntegrationRuntimeNodesImpl {
    /**
     * Initialize a new instance of the class IntegrationRuntimeNodes class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets a self-hosted integration runtime node.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param nodeName The integration runtime node name.
     * @param options The options parameters.
     */
    get(resourceGroupName, factoryName, integrationRuntimeName, nodeName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            factoryName,
            integrationRuntimeName,
            nodeName,
            options
        }, getOperationSpec$d);
    }
    /**
     * Deletes a self-hosted integration runtime node.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param nodeName The integration runtime node name.
     * @param options The options parameters.
     */
    delete(resourceGroupName, factoryName, integrationRuntimeName, nodeName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            factoryName,
            integrationRuntimeName,
            nodeName,
            options
        }, deleteOperationSpec$b);
    }
    /**
     * Updates a self-hosted integration runtime node.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param nodeName The integration runtime node name.
     * @param updateIntegrationRuntimeNodeRequest The parameters for updating an integration runtime node.
     * @param options The options parameters.
     */
    update(resourceGroupName, factoryName, integrationRuntimeName, nodeName, updateIntegrationRuntimeNodeRequest, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            factoryName,
            integrationRuntimeName,
            nodeName,
            updateIntegrationRuntimeNodeRequest,
            options
        }, updateOperationSpec);
    }
    /**
     * Get the IP address of self-hosted integration runtime node.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param nodeName The integration runtime node name.
     * @param options The options parameters.
     */
    getIpAddress(resourceGroupName, factoryName, integrationRuntimeName, nodeName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            factoryName,
            integrationRuntimeName,
            nodeName,
            options
        }, getIpAddressOperationSpec);
    }
}
// Operation Specifications
const serializer$h = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$d = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/nodes/{nodeName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SelfHostedIntegrationRuntimeNode
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        integrationRuntimeName,
        nodeName
    ],
    headerParameters: [accept],
    serializer: serializer$h
};
const deleteOperationSpec$b = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/nodes/{nodeName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        integrationRuntimeName,
        nodeName
    ],
    headerParameters: [accept],
    serializer: serializer$h
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/nodes/{nodeName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: SelfHostedIntegrationRuntimeNode
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: updateIntegrationRuntimeNodeRequest,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        integrationRuntimeName,
        nodeName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$h
};
const getIpAddressOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/nodes/{nodeName}/ipAddress",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: IntegrationRuntimeNodeIpAddress
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        integrationRuntimeName,
        nodeName
    ],
    headerParameters: [accept],
    serializer: serializer$h
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing LinkedServices operations. */
class LinkedServicesImpl {
    /**
     * Initialize a new instance of the class LinkedServices class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists linked services.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param options The options parameters.
     */
    listByFactory(resourceGroupName, factoryName, options) {
        const iter = this.listByFactoryPagingAll(resourceGroupName, factoryName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByFactoryPagingPage(resourceGroupName, factoryName, options, settings);
            }
        };
    }
    listByFactoryPagingPage(resourceGroupName, factoryName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByFactoryPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByFactory(resourceGroupName, factoryName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByFactoryNext(resourceGroupName, factoryName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByFactoryPagingAll(resourceGroupName, factoryName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByFactoryPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByFactoryPagingPage(resourceGroupName, factoryName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists linked services.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param options The options parameters.
     */
    _listByFactory(resourceGroupName, factoryName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, options }, listByFactoryOperationSpec$a);
    }
    /**
     * Creates or updates a linked service.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param linkedServiceName The linked service name.
     * @param linkedService Linked service resource definition.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, factoryName, linkedServiceName, linkedService, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            factoryName,
            linkedServiceName,
            linkedService,
            options
        }, createOrUpdateOperationSpec$a);
    }
    /**
     * Gets a linked service.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param linkedServiceName The linked service name.
     * @param options The options parameters.
     */
    get(resourceGroupName, factoryName, linkedServiceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, linkedServiceName, options }, getOperationSpec$c);
    }
    /**
     * Deletes a linked service.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param linkedServiceName The linked service name.
     * @param options The options parameters.
     */
    delete(resourceGroupName, factoryName, linkedServiceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, linkedServiceName, options }, deleteOperationSpec$a);
    }
    /**
     * ListByFactoryNext
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param nextLink The nextLink from the previous successful call to the ListByFactory method.
     * @param options The options parameters.
     */
    _listByFactoryNext(resourceGroupName, factoryName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, nextLink, options }, listByFactoryNextOperationSpec$a);
    }
}
// Operation Specifications
const serializer$g = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByFactoryOperationSpec$a = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/linkedservices",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: LinkedServiceListResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName
    ],
    headerParameters: [accept],
    serializer: serializer$g
};
const createOrUpdateOperationSpec$a = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/linkedservices/{linkedServiceName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: LinkedServiceResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: linkedService,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        linkedServiceName
    ],
    headerParameters: [
        accept,
        contentType,
        ifMatch
    ],
    mediaType: "json",
    serializer: serializer$g
};
const getOperationSpec$c = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/linkedservices/{linkedServiceName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: LinkedServiceResource
        },
        304: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        linkedServiceName
    ],
    headerParameters: [accept, ifNoneMatch],
    serializer: serializer$g
};
const deleteOperationSpec$a = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/linkedservices/{linkedServiceName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        linkedServiceName
    ],
    headerParameters: [accept],
    serializer: serializer$g
};
const listByFactoryNextOperationSpec$a = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: LinkedServiceListResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        nextLink,
        subscriptionId,
        resourceGroupName,
        factoryName
    ],
    headerParameters: [accept],
    serializer: serializer$g
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Datasets operations. */
class DatasetsImpl {
    /**
     * Initialize a new instance of the class Datasets class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists datasets.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param options The options parameters.
     */
    listByFactory(resourceGroupName, factoryName, options) {
        const iter = this.listByFactoryPagingAll(resourceGroupName, factoryName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByFactoryPagingPage(resourceGroupName, factoryName, options, settings);
            }
        };
    }
    listByFactoryPagingPage(resourceGroupName, factoryName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByFactoryPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByFactory(resourceGroupName, factoryName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByFactoryNext(resourceGroupName, factoryName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByFactoryPagingAll(resourceGroupName, factoryName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByFactoryPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByFactoryPagingPage(resourceGroupName, factoryName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists datasets.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param options The options parameters.
     */
    _listByFactory(resourceGroupName, factoryName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, options }, listByFactoryOperationSpec$9);
    }
    /**
     * Creates or updates a dataset.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param datasetName The dataset name.
     * @param dataset Dataset resource definition.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, factoryName, datasetName, dataset, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, datasetName, dataset, options }, createOrUpdateOperationSpec$9);
    }
    /**
     * Gets a dataset.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param datasetName The dataset name.
     * @param options The options parameters.
     */
    get(resourceGroupName, factoryName, datasetName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, datasetName, options }, getOperationSpec$b);
    }
    /**
     * Deletes a dataset.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param datasetName The dataset name.
     * @param options The options parameters.
     */
    delete(resourceGroupName, factoryName, datasetName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, datasetName, options }, deleteOperationSpec$9);
    }
    /**
     * ListByFactoryNext
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param nextLink The nextLink from the previous successful call to the ListByFactory method.
     * @param options The options parameters.
     */
    _listByFactoryNext(resourceGroupName, factoryName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, nextLink, options }, listByFactoryNextOperationSpec$9);
    }
}
// Operation Specifications
const serializer$f = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByFactoryOperationSpec$9 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/datasets",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DatasetListResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName
    ],
    headerParameters: [accept],
    serializer: serializer$f
};
const createOrUpdateOperationSpec$9 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/datasets/{datasetName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: DatasetResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: dataset,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        datasetName
    ],
    headerParameters: [
        accept,
        contentType,
        ifMatch
    ],
    mediaType: "json",
    serializer: serializer$f
};
const getOperationSpec$b = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/datasets/{datasetName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DatasetResource
        },
        304: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        datasetName
    ],
    headerParameters: [accept, ifNoneMatch],
    serializer: serializer$f
};
const deleteOperationSpec$9 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/datasets/{datasetName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        datasetName
    ],
    headerParameters: [accept],
    serializer: serializer$f
};
const listByFactoryNextOperationSpec$9 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DatasetListResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        nextLink,
        subscriptionId,
        resourceGroupName,
        factoryName
    ],
    headerParameters: [accept],
    serializer: serializer$f
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Pipelines operations. */
class PipelinesImpl {
    /**
     * Initialize a new instance of the class Pipelines class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists pipelines.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param options The options parameters.
     */
    listByFactory(resourceGroupName, factoryName, options) {
        const iter = this.listByFactoryPagingAll(resourceGroupName, factoryName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByFactoryPagingPage(resourceGroupName, factoryName, options, settings);
            }
        };
    }
    listByFactoryPagingPage(resourceGroupName, factoryName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByFactoryPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByFactory(resourceGroupName, factoryName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByFactoryNext(resourceGroupName, factoryName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByFactoryPagingAll(resourceGroupName, factoryName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByFactoryPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByFactoryPagingPage(resourceGroupName, factoryName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists pipelines.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param options The options parameters.
     */
    _listByFactory(resourceGroupName, factoryName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, options }, listByFactoryOperationSpec$8);
    }
    /**
     * Creates or updates a pipeline.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param pipelineName The pipeline name.
     * @param pipeline Pipeline resource definition.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, factoryName, pipelineName, pipeline, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, pipelineName, pipeline, options }, createOrUpdateOperationSpec$8);
    }
    /**
     * Gets a pipeline.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param pipelineName The pipeline name.
     * @param options The options parameters.
     */
    get(resourceGroupName, factoryName, pipelineName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, pipelineName, options }, getOperationSpec$a);
    }
    /**
     * Deletes a pipeline.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param pipelineName The pipeline name.
     * @param options The options parameters.
     */
    delete(resourceGroupName, factoryName, pipelineName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, pipelineName, options }, deleteOperationSpec$8);
    }
    /**
     * Creates a run of a pipeline.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param pipelineName The pipeline name.
     * @param options The options parameters.
     */
    createRun(resourceGroupName, factoryName, pipelineName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, pipelineName, options }, createRunOperationSpec);
    }
    /**
     * ListByFactoryNext
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param nextLink The nextLink from the previous successful call to the ListByFactory method.
     * @param options The options parameters.
     */
    _listByFactoryNext(resourceGroupName, factoryName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, nextLink, options }, listByFactoryNextOperationSpec$8);
    }
}
// Operation Specifications
const serializer$e = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByFactoryOperationSpec$8 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/pipelines",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PipelineListResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName
    ],
    headerParameters: [accept],
    serializer: serializer$e
};
const createOrUpdateOperationSpec$8 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/pipelines/{pipelineName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: PipelineResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: pipeline,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        pipelineName
    ],
    headerParameters: [
        accept,
        contentType,
        ifMatch
    ],
    mediaType: "json",
    serializer: serializer$e
};
const getOperationSpec$a = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/pipelines/{pipelineName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PipelineResource
        },
        304: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        pipelineName
    ],
    headerParameters: [accept, ifNoneMatch],
    serializer: serializer$e
};
const deleteOperationSpec$8 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/pipelines/{pipelineName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        pipelineName
    ],
    headerParameters: [accept],
    serializer: serializer$e
};
const createRunOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/pipelines/{pipelineName}/createRun",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: CreateRunResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: parameters,
    queryParameters: [
        apiVersion,
        referencePipelineRunId,
        isRecovery,
        startActivityName,
        startFromFailure
    ],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        pipelineName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$e
};
const listByFactoryNextOperationSpec$8 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PipelineListResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        nextLink,
        subscriptionId,
        resourceGroupName,
        factoryName
    ],
    headerParameters: [accept],
    serializer: serializer$e
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing PipelineRuns operations. */
class PipelineRunsImpl {
    /**
     * Initialize a new instance of the class PipelineRuns class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Query pipeline runs in the factory based on input filter conditions.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param filterParameters Parameters to filter the pipeline run.
     * @param options The options parameters.
     */
    queryByFactory(resourceGroupName, factoryName, filterParameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, filterParameters, options }, queryByFactoryOperationSpec$3);
    }
    /**
     * Get a pipeline run by its run ID.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param runId The pipeline run identifier.
     * @param options The options parameters.
     */
    get(resourceGroupName, factoryName, runId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, runId, options }, getOperationSpec$9);
    }
    /**
     * Cancel a pipeline run by its run ID.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param runId The pipeline run identifier.
     * @param options The options parameters.
     */
    cancel(resourceGroupName, factoryName, runId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, runId, options }, cancelOperationSpec$1);
    }
}
// Operation Specifications
const serializer$d = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const queryByFactoryOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/queryPipelineRuns",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: PipelineRunsQueryResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: filterParameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$d
};
const getOperationSpec$9 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/pipelineruns/{runId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PipelineRun
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        runId
    ],
    headerParameters: [accept],
    serializer: serializer$d
};
const cancelOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/pipelineruns/{runId}/cancel",
    httpMethod: "POST",
    responses: {
        200: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion, isRecursive],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        runId
    ],
    headerParameters: [accept],
    serializer: serializer$d
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing ActivityRuns operations. */
class ActivityRunsImpl {
    /**
     * Initialize a new instance of the class ActivityRuns class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Query activity runs based on input filter conditions.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param runId The pipeline run identifier.
     * @param filterParameters Parameters to filter the activity runs.
     * @param options The options parameters.
     */
    queryByPipelineRun(resourceGroupName, factoryName, runId, filterParameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, runId, filterParameters, options }, queryByPipelineRunOperationSpec);
    }
}
// Operation Specifications
const serializer$c = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const queryByPipelineRunOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/pipelineruns/{runId}/queryActivityruns",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ActivityRunsQueryResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: filterParameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        runId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$c
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Triggers operations. */
class TriggersImpl {
    /**
     * Initialize a new instance of the class Triggers class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists triggers.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param options The options parameters.
     */
    listByFactory(resourceGroupName, factoryName, options) {
        const iter = this.listByFactoryPagingAll(resourceGroupName, factoryName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByFactoryPagingPage(resourceGroupName, factoryName, options, settings);
            }
        };
    }
    listByFactoryPagingPage(resourceGroupName, factoryName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByFactoryPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByFactory(resourceGroupName, factoryName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByFactoryNext(resourceGroupName, factoryName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByFactoryPagingAll(resourceGroupName, factoryName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByFactoryPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByFactoryPagingPage(resourceGroupName, factoryName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists triggers.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param options The options parameters.
     */
    _listByFactory(resourceGroupName, factoryName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, options }, listByFactoryOperationSpec$7);
    }
    /**
     * Query triggers.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param filterParameters Parameters to filter the triggers.
     * @param options The options parameters.
     */
    queryByFactory(resourceGroupName, factoryName, filterParameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, filterParameters, options }, queryByFactoryOperationSpec$2);
    }
    /**
     * Creates or updates a trigger.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param trigger Trigger resource definition.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, factoryName, triggerName, trigger, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, triggerName, trigger, options }, createOrUpdateOperationSpec$7);
    }
    /**
     * Gets a trigger.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param options The options parameters.
     */
    get(resourceGroupName, factoryName, triggerName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, triggerName, options }, getOperationSpec$8);
    }
    /**
     * Deletes a trigger.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param options The options parameters.
     */
    delete(resourceGroupName, factoryName, triggerName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, triggerName, options }, deleteOperationSpec$7);
    }
    /**
     * Subscribe event trigger to events.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param options The options parameters.
     */
    beginSubscribeToEvents(resourceGroupName, factoryName, triggerName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, factoryName, triggerName, options },
                spec: subscribeToEventsOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Subscribe event trigger to events.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param options The options parameters.
     */
    beginSubscribeToEventsAndWait(resourceGroupName, factoryName, triggerName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginSubscribeToEvents(resourceGroupName, factoryName, triggerName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Get a trigger's event subscription status.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param options The options parameters.
     */
    getEventSubscriptionStatus(resourceGroupName, factoryName, triggerName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, triggerName, options }, getEventSubscriptionStatusOperationSpec);
    }
    /**
     * Unsubscribe event trigger from events.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param options The options parameters.
     */
    beginUnsubscribeFromEvents(resourceGroupName, factoryName, triggerName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, factoryName, triggerName, options },
                spec: unsubscribeFromEventsOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Unsubscribe event trigger from events.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param options The options parameters.
     */
    beginUnsubscribeFromEventsAndWait(resourceGroupName, factoryName, triggerName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUnsubscribeFromEvents(resourceGroupName, factoryName, triggerName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Starts a trigger.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param options The options parameters.
     */
    beginStart(resourceGroupName, factoryName, triggerName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, factoryName, triggerName, options },
                spec: startOperationSpec$1
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Starts a trigger.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param options The options parameters.
     */
    beginStartAndWait(resourceGroupName, factoryName, triggerName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginStart(resourceGroupName, factoryName, triggerName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Stops a trigger.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param options The options parameters.
     */
    beginStop(resourceGroupName, factoryName, triggerName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, factoryName, triggerName, options },
                spec: stopOperationSpec$1
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Stops a trigger.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param options The options parameters.
     */
    beginStopAndWait(resourceGroupName, factoryName, triggerName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginStop(resourceGroupName, factoryName, triggerName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * ListByFactoryNext
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param nextLink The nextLink from the previous successful call to the ListByFactory method.
     * @param options The options parameters.
     */
    _listByFactoryNext(resourceGroupName, factoryName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, nextLink, options }, listByFactoryNextOperationSpec$7);
    }
}
// Operation Specifications
const serializer$b = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByFactoryOperationSpec$7 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: TriggerListResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName
    ],
    headerParameters: [accept],
    serializer: serializer$b
};
const queryByFactoryOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/querytriggers",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: TriggerQueryResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: filterParameters1,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$b
};
const createOrUpdateOperationSpec$7 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: TriggerResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: trigger,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        triggerName
    ],
    headerParameters: [
        accept,
        contentType,
        ifMatch
    ],
    mediaType: "json",
    serializer: serializer$b
};
const getOperationSpec$8 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: TriggerResource
        },
        304: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        triggerName
    ],
    headerParameters: [accept, ifNoneMatch],
    serializer: serializer$b
};
const deleteOperationSpec$7 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        triggerName
    ],
    headerParameters: [accept],
    serializer: serializer$b
};
const subscribeToEventsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}/subscribeToEvents",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: TriggerSubscriptionOperationStatus
        },
        201: {
            bodyMapper: TriggerSubscriptionOperationStatus
        },
        202: {
            bodyMapper: TriggerSubscriptionOperationStatus
        },
        204: {
            bodyMapper: TriggerSubscriptionOperationStatus
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        triggerName
    ],
    headerParameters: [accept],
    serializer: serializer$b
};
const getEventSubscriptionStatusOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}/getEventSubscriptionStatus",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: TriggerSubscriptionOperationStatus
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        triggerName
    ],
    headerParameters: [accept],
    serializer: serializer$b
};
const unsubscribeFromEventsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}/unsubscribeFromEvents",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: TriggerSubscriptionOperationStatus
        },
        201: {
            bodyMapper: TriggerSubscriptionOperationStatus
        },
        202: {
            bodyMapper: TriggerSubscriptionOperationStatus
        },
        204: {
            bodyMapper: TriggerSubscriptionOperationStatus
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        triggerName
    ],
    headerParameters: [accept],
    serializer: serializer$b
};
const startOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}/start",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        triggerName
    ],
    headerParameters: [accept],
    serializer: serializer$b
};
const stopOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}/stop",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        triggerName
    ],
    headerParameters: [accept],
    serializer: serializer$b
};
const listByFactoryNextOperationSpec$7 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: TriggerListResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        nextLink,
        subscriptionId,
        resourceGroupName,
        factoryName
    ],
    headerParameters: [accept],
    serializer: serializer$b
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing TriggerRuns operations. */
class TriggerRunsImpl {
    /**
     * Initialize a new instance of the class TriggerRuns class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Rerun single trigger instance by runId.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param runId The pipeline run identifier.
     * @param options The options parameters.
     */
    rerun(resourceGroupName, factoryName, triggerName, runId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, triggerName, runId, options }, rerunOperationSpec);
    }
    /**
     * Cancel a single trigger instance by runId.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param runId The pipeline run identifier.
     * @param options The options parameters.
     */
    cancel(resourceGroupName, factoryName, triggerName, runId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, triggerName, runId, options }, cancelOperationSpec);
    }
    /**
     * Query trigger runs.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param filterParameters Parameters to filter the pipeline run.
     * @param options The options parameters.
     */
    queryByFactory(resourceGroupName, factoryName, filterParameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, filterParameters, options }, queryByFactoryOperationSpec$1);
    }
}
// Operation Specifications
const serializer$a = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const rerunOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}/triggerRuns/{runId}/rerun",
    httpMethod: "POST",
    responses: {
        200: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        runId,
        triggerName
    ],
    headerParameters: [accept],
    serializer: serializer$a
};
const cancelOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}/triggerRuns/{runId}/cancel",
    httpMethod: "POST",
    responses: {
        200: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        runId,
        triggerName
    ],
    headerParameters: [accept],
    serializer: serializer$a
};
const queryByFactoryOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/queryTriggerRuns",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: TriggerRunsQueryResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: filterParameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$a
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing DataFlows operations. */
class DataFlowsImpl {
    /**
     * Initialize a new instance of the class DataFlows class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists data flows.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param options The options parameters.
     */
    listByFactory(resourceGroupName, factoryName, options) {
        const iter = this.listByFactoryPagingAll(resourceGroupName, factoryName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByFactoryPagingPage(resourceGroupName, factoryName, options, settings);
            }
        };
    }
    listByFactoryPagingPage(resourceGroupName, factoryName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByFactoryPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByFactory(resourceGroupName, factoryName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByFactoryNext(resourceGroupName, factoryName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByFactoryPagingAll(resourceGroupName, factoryName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByFactoryPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByFactoryPagingPage(resourceGroupName, factoryName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Creates or updates a data flow.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param dataFlowName The data flow name.
     * @param dataFlow Data flow resource definition.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, factoryName, dataFlowName, dataFlow, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, dataFlowName, dataFlow, options }, createOrUpdateOperationSpec$6);
    }
    /**
     * Gets a data flow.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param dataFlowName The data flow name.
     * @param options The options parameters.
     */
    get(resourceGroupName, factoryName, dataFlowName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, dataFlowName, options }, getOperationSpec$7);
    }
    /**
     * Deletes a data flow.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param dataFlowName The data flow name.
     * @param options The options parameters.
     */
    delete(resourceGroupName, factoryName, dataFlowName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, dataFlowName, options }, deleteOperationSpec$6);
    }
    /**
     * Lists data flows.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param options The options parameters.
     */
    _listByFactory(resourceGroupName, factoryName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, options }, listByFactoryOperationSpec$6);
    }
    /**
     * ListByFactoryNext
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param nextLink The nextLink from the previous successful call to the ListByFactory method.
     * @param options The options parameters.
     */
    _listByFactoryNext(resourceGroupName, factoryName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, nextLink, options }, listByFactoryNextOperationSpec$6);
    }
}
// Operation Specifications
const serializer$9 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const createOrUpdateOperationSpec$6 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/dataflows/{dataFlowName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: DataFlowResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: dataFlow,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        dataFlowName
    ],
    headerParameters: [
        accept,
        contentType,
        ifMatch
    ],
    mediaType: "json",
    serializer: serializer$9
};
const getOperationSpec$7 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/dataflows/{dataFlowName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DataFlowResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        dataFlowName
    ],
    headerParameters: [accept, ifNoneMatch],
    serializer: serializer$9
};
const deleteOperationSpec$6 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/dataflows/{dataFlowName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        dataFlowName
    ],
    headerParameters: [accept],
    serializer: serializer$9
};
const listByFactoryOperationSpec$6 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/dataflows",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DataFlowListResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName
    ],
    headerParameters: [accept],
    serializer: serializer$9
};
const listByFactoryNextOperationSpec$6 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DataFlowListResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        nextLink,
        subscriptionId,
        resourceGroupName,
        factoryName
    ],
    headerParameters: [accept],
    serializer: serializer$9
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing DataFlowDebugSession operations. */
class DataFlowDebugSessionImpl {
    /**
     * Initialize a new instance of the class DataFlowDebugSession class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Query all active data flow debug sessions.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param options The options parameters.
     */
    listQueryByFactory(resourceGroupName, factoryName, options) {
        const iter = this.queryByFactoryPagingAll(resourceGroupName, factoryName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.queryByFactoryPagingPage(resourceGroupName, factoryName, options, settings);
            }
        };
    }
    queryByFactoryPagingPage(resourceGroupName, factoryName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* queryByFactoryPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._queryByFactory(resourceGroupName, factoryName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._queryByFactoryNext(resourceGroupName, factoryName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    queryByFactoryPagingAll(resourceGroupName, factoryName, options) {
        return tslib.__asyncGenerator(this, arguments, function* queryByFactoryPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.queryByFactoryPagingPage(resourceGroupName, factoryName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Creates a data flow debug session.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param request Data flow debug session definition
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName, factoryName, request, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, factoryName, request, options },
                spec: createOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Creates a data flow debug session.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param request Data flow debug session definition
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName, factoryName, request, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreate(resourceGroupName, factoryName, request, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Query all active data flow debug sessions.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param options The options parameters.
     */
    _queryByFactory(resourceGroupName, factoryName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, options }, queryByFactoryOperationSpec);
    }
    /**
     * Add a data flow into debug session.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param request Data flow debug session definition with debug content.
     * @param options The options parameters.
     */
    addDataFlow(resourceGroupName, factoryName, request, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, request, options }, addDataFlowOperationSpec);
    }
    /**
     * Deletes a data flow debug session.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param request Data flow debug session definition for deletion
     * @param options The options parameters.
     */
    delete(resourceGroupName, factoryName, request, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, request, options }, deleteOperationSpec$5);
    }
    /**
     * Execute a data flow debug command.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param request Data flow debug command definition.
     * @param options The options parameters.
     */
    beginExecuteCommand(resourceGroupName, factoryName, request, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, factoryName, request, options },
                spec: executeCommandOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Execute a data flow debug command.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param request Data flow debug command definition.
     * @param options The options parameters.
     */
    beginExecuteCommandAndWait(resourceGroupName, factoryName, request, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginExecuteCommand(resourceGroupName, factoryName, request, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * QueryByFactoryNext
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param nextLink The nextLink from the previous successful call to the QueryByFactory method.
     * @param options The options parameters.
     */
    _queryByFactoryNext(resourceGroupName, factoryName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, nextLink, options }, queryByFactoryNextOperationSpec);
    }
}
// Operation Specifications
const serializer$8 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const createOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/createDataFlowDebugSession",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: CreateDataFlowDebugSessionResponse
        },
        201: {
            bodyMapper: CreateDataFlowDebugSessionResponse
        },
        202: {
            bodyMapper: CreateDataFlowDebugSessionResponse
        },
        204: {
            bodyMapper: CreateDataFlowDebugSessionResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: request,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$8
};
const queryByFactoryOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/queryDataFlowDebugSessions",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: QueryDataFlowDebugSessionsResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName
    ],
    headerParameters: [accept],
    serializer: serializer$8
};
const addDataFlowOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/addDataFlowToDebugSession",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: AddDataFlowToDebugSessionResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: request1,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$8
};
const deleteOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/deleteDataFlowDebugSession",
    httpMethod: "POST",
    responses: {
        200: {},
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: request2,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$8
};
const executeCommandOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/executeDataFlowDebugCommand",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: DataFlowDebugCommandResponse
        },
        201: {
            bodyMapper: DataFlowDebugCommandResponse
        },
        202: {
            bodyMapper: DataFlowDebugCommandResponse
        },
        204: {
            bodyMapper: DataFlowDebugCommandResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: request3,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$8
};
const queryByFactoryNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: QueryDataFlowDebugSessionsResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        nextLink,
        subscriptionId,
        resourceGroupName,
        factoryName
    ],
    headerParameters: [accept],
    serializer: serializer$8
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ManagedVirtualNetworks operations. */
class ManagedVirtualNetworksImpl {
    /**
     * Initialize a new instance of the class ManagedVirtualNetworks class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists managed Virtual Networks.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param options The options parameters.
     */
    listByFactory(resourceGroupName, factoryName, options) {
        const iter = this.listByFactoryPagingAll(resourceGroupName, factoryName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByFactoryPagingPage(resourceGroupName, factoryName, options, settings);
            }
        };
    }
    listByFactoryPagingPage(resourceGroupName, factoryName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByFactoryPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByFactory(resourceGroupName, factoryName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByFactoryNext(resourceGroupName, factoryName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByFactoryPagingAll(resourceGroupName, factoryName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByFactoryPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByFactoryPagingPage(resourceGroupName, factoryName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists managed Virtual Networks.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param options The options parameters.
     */
    _listByFactory(resourceGroupName, factoryName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, options }, listByFactoryOperationSpec$5);
    }
    /**
     * Creates or updates a managed Virtual Network.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param managedVirtualNetworkName Managed virtual network name
     * @param managedVirtualNetwork Managed Virtual Network resource definition.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, factoryName, managedVirtualNetworkName, managedVirtualNetwork, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            factoryName,
            managedVirtualNetworkName,
            managedVirtualNetwork,
            options
        }, createOrUpdateOperationSpec$5);
    }
    /**
     * Gets a managed Virtual Network.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param managedVirtualNetworkName Managed virtual network name
     * @param options The options parameters.
     */
    get(resourceGroupName, factoryName, managedVirtualNetworkName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, managedVirtualNetworkName, options }, getOperationSpec$6);
    }
    /**
     * ListByFactoryNext
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param nextLink The nextLink from the previous successful call to the ListByFactory method.
     * @param options The options parameters.
     */
    _listByFactoryNext(resourceGroupName, factoryName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, nextLink, options }, listByFactoryNextOperationSpec$5);
    }
}
// Operation Specifications
const serializer$7 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByFactoryOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/managedVirtualNetworks",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ManagedVirtualNetworkListResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName
    ],
    headerParameters: [accept],
    serializer: serializer$7
};
const createOrUpdateOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/managedVirtualNetworks/{managedVirtualNetworkName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ManagedVirtualNetworkResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: managedVirtualNetwork,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        managedVirtualNetworkName
    ],
    headerParameters: [
        accept,
        contentType,
        ifMatch
    ],
    mediaType: "json",
    serializer: serializer$7
};
const getOperationSpec$6 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/managedVirtualNetworks/{managedVirtualNetworkName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ManagedVirtualNetworkResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        managedVirtualNetworkName
    ],
    headerParameters: [accept, ifNoneMatch],
    serializer: serializer$7
};
const listByFactoryNextOperationSpec$5 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ManagedVirtualNetworkListResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        nextLink,
        subscriptionId,
        resourceGroupName,
        factoryName
    ],
    headerParameters: [accept],
    serializer: serializer$7
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ManagedPrivateEndpoints operations. */
class ManagedPrivateEndpointsImpl {
    /**
     * Initialize a new instance of the class ManagedPrivateEndpoints class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists managed private endpoints.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param managedVirtualNetworkName Managed virtual network name
     * @param options The options parameters.
     */
    listByFactory(resourceGroupName, factoryName, managedVirtualNetworkName, options) {
        const iter = this.listByFactoryPagingAll(resourceGroupName, factoryName, managedVirtualNetworkName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByFactoryPagingPage(resourceGroupName, factoryName, managedVirtualNetworkName, options, settings);
            }
        };
    }
    listByFactoryPagingPage(resourceGroupName, factoryName, managedVirtualNetworkName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByFactoryPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByFactory(resourceGroupName, factoryName, managedVirtualNetworkName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByFactoryNext(resourceGroupName, factoryName, managedVirtualNetworkName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByFactoryPagingAll(resourceGroupName, factoryName, managedVirtualNetworkName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByFactoryPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByFactoryPagingPage(resourceGroupName, factoryName, managedVirtualNetworkName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists managed private endpoints.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param managedVirtualNetworkName Managed virtual network name
     * @param options The options parameters.
     */
    _listByFactory(resourceGroupName, factoryName, managedVirtualNetworkName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, managedVirtualNetworkName, options }, listByFactoryOperationSpec$4);
    }
    /**
     * Creates or updates a managed private endpoint.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param managedVirtualNetworkName Managed virtual network name
     * @param managedPrivateEndpointName Managed private endpoint name
     * @param managedPrivateEndpoint Managed private endpoint resource definition.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, factoryName, managedVirtualNetworkName, managedPrivateEndpointName, managedPrivateEndpoint, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            factoryName,
            managedVirtualNetworkName,
            managedPrivateEndpointName,
            managedPrivateEndpoint,
            options
        }, createOrUpdateOperationSpec$4);
    }
    /**
     * Gets a managed private endpoint.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param managedVirtualNetworkName Managed virtual network name
     * @param managedPrivateEndpointName Managed private endpoint name
     * @param options The options parameters.
     */
    get(resourceGroupName, factoryName, managedVirtualNetworkName, managedPrivateEndpointName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            factoryName,
            managedVirtualNetworkName,
            managedPrivateEndpointName,
            options
        }, getOperationSpec$5);
    }
    /**
     * Deletes a managed private endpoint.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param managedVirtualNetworkName Managed virtual network name
     * @param managedPrivateEndpointName Managed private endpoint name
     * @param options The options parameters.
     */
    delete(resourceGroupName, factoryName, managedVirtualNetworkName, managedPrivateEndpointName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            factoryName,
            managedVirtualNetworkName,
            managedPrivateEndpointName,
            options
        }, deleteOperationSpec$4);
    }
    /**
     * ListByFactoryNext
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param managedVirtualNetworkName Managed virtual network name
     * @param nextLink The nextLink from the previous successful call to the ListByFactory method.
     * @param options The options parameters.
     */
    _listByFactoryNext(resourceGroupName, factoryName, managedVirtualNetworkName, nextLink, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            factoryName,
            managedVirtualNetworkName,
            nextLink,
            options
        }, listByFactoryNextOperationSpec$4);
    }
}
// Operation Specifications
const serializer$6 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByFactoryOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/managedVirtualNetworks/{managedVirtualNetworkName}/managedPrivateEndpoints",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ManagedPrivateEndpointListResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        managedVirtualNetworkName
    ],
    headerParameters: [accept],
    serializer: serializer$6
};
const createOrUpdateOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/managedVirtualNetworks/{managedVirtualNetworkName}/managedPrivateEndpoints/{managedPrivateEndpointName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ManagedPrivateEndpointResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: managedPrivateEndpoint,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        managedVirtualNetworkName,
        managedPrivateEndpointName
    ],
    headerParameters: [
        accept,
        contentType,
        ifMatch
    ],
    mediaType: "json",
    serializer: serializer$6
};
const getOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/managedVirtualNetworks/{managedVirtualNetworkName}/managedPrivateEndpoints/{managedPrivateEndpointName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ManagedPrivateEndpointResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        managedVirtualNetworkName,
        managedPrivateEndpointName
    ],
    headerParameters: [accept, ifNoneMatch],
    serializer: serializer$6
};
const deleteOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/managedVirtualNetworks/{managedVirtualNetworkName}/managedPrivateEndpoints/{managedPrivateEndpointName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        managedVirtualNetworkName,
        managedPrivateEndpointName
    ],
    headerParameters: [accept],
    serializer: serializer$6
};
const listByFactoryNextOperationSpec$4 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ManagedPrivateEndpointListResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        nextLink,
        subscriptionId,
        resourceGroupName,
        factoryName,
        managedVirtualNetworkName
    ],
    headerParameters: [accept],
    serializer: serializer$6
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing CredentialOperations operations. */
class CredentialOperationsImpl {
    /**
     * Initialize a new instance of the class CredentialOperations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List credentials.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param options The options parameters.
     */
    listByFactory(resourceGroupName, factoryName, options) {
        const iter = this.listByFactoryPagingAll(resourceGroupName, factoryName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByFactoryPagingPage(resourceGroupName, factoryName, options, settings);
            }
        };
    }
    listByFactoryPagingPage(resourceGroupName, factoryName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByFactoryPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByFactory(resourceGroupName, factoryName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByFactoryNext(resourceGroupName, factoryName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByFactoryPagingAll(resourceGroupName, factoryName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByFactoryPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByFactoryPagingPage(resourceGroupName, factoryName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List credentials.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param options The options parameters.
     */
    _listByFactory(resourceGroupName, factoryName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, options }, listByFactoryOperationSpec$3);
    }
    /**
     * Creates or updates a credential.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param credentialName Credential name
     * @param credential Credential resource definition.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, factoryName, credentialName, credential, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, credentialName, credential, options }, createOrUpdateOperationSpec$3);
    }
    /**
     * Gets a credential.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param credentialName Credential name
     * @param options The options parameters.
     */
    get(resourceGroupName, factoryName, credentialName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, credentialName, options }, getOperationSpec$4);
    }
    /**
     * Deletes a credential.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param credentialName Credential name
     * @param options The options parameters.
     */
    delete(resourceGroupName, factoryName, credentialName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, credentialName, options }, deleteOperationSpec$3);
    }
    /**
     * ListByFactoryNext
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param nextLink The nextLink from the previous successful call to the ListByFactory method.
     * @param options The options parameters.
     */
    _listByFactoryNext(resourceGroupName, factoryName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, nextLink, options }, listByFactoryNextOperationSpec$3);
    }
}
// Operation Specifications
const serializer$5 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByFactoryOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/credentials",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CredentialListResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const createOrUpdateOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/credentials/{credentialName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ManagedIdentityCredentialResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: credential,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        credentialName
    ],
    headerParameters: [
        accept,
        contentType,
        ifMatch
    ],
    mediaType: "json",
    serializer: serializer$5
};
const getOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/credentials/{credentialName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ManagedIdentityCredentialResource
        },
        304: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        credentialName
    ],
    headerParameters: [accept, ifNoneMatch],
    serializer: serializer$5
};
const deleteOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/credentials/{credentialName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        credentialName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const listByFactoryNextOperationSpec$3 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CredentialListResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        nextLink,
        subscriptionId,
        resourceGroupName,
        factoryName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing PrivateEndPointConnections operations. */
class PrivateEndPointConnectionsImpl {
    /**
     * Initialize a new instance of the class PrivateEndPointConnections class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists Private endpoint connections
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param options The options parameters.
     */
    listByFactory(resourceGroupName, factoryName, options) {
        const iter = this.listByFactoryPagingAll(resourceGroupName, factoryName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByFactoryPagingPage(resourceGroupName, factoryName, options, settings);
            }
        };
    }
    listByFactoryPagingPage(resourceGroupName, factoryName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByFactoryPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByFactory(resourceGroupName, factoryName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByFactoryNext(resourceGroupName, factoryName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByFactoryPagingAll(resourceGroupName, factoryName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByFactoryPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByFactoryPagingPage(resourceGroupName, factoryName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists Private endpoint connections
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param options The options parameters.
     */
    _listByFactory(resourceGroupName, factoryName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, options }, listByFactoryOperationSpec$2);
    }
    /**
     * ListByFactoryNext
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param nextLink The nextLink from the previous successful call to the ListByFactory method.
     * @param options The options parameters.
     */
    _listByFactoryNext(resourceGroupName, factoryName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, nextLink, options }, listByFactoryNextOperationSpec$2);
    }
}
// Operation Specifications
const serializer$4 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByFactoryOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/privateEndPointConnections",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PrivateEndpointConnectionListResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const listByFactoryNextOperationSpec$2 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PrivateEndpointConnectionListResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        nextLink,
        subscriptionId,
        resourceGroupName,
        factoryName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing PrivateEndpointConnection operations. */
class PrivateEndpointConnectionImpl {
    /**
     * Initialize a new instance of the class PrivateEndpointConnection class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Approves or rejects a private endpoint connection
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param privateEndpointConnectionName The private endpoint connection name.
     * @param privateEndpointWrapper Private Endpoint Connection Approval ARM resource.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, factoryName, privateEndpointConnectionName, privateEndpointWrapper, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            factoryName,
            privateEndpointConnectionName,
            privateEndpointWrapper,
            options
        }, createOrUpdateOperationSpec$2);
    }
    /**
     * Gets a private endpoint connection
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param privateEndpointConnectionName The private endpoint connection name.
     * @param options The options parameters.
     */
    get(resourceGroupName, factoryName, privateEndpointConnectionName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            factoryName,
            privateEndpointConnectionName,
            options
        }, getOperationSpec$3);
    }
    /**
     * Deletes a private endpoint connection
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param privateEndpointConnectionName The private endpoint connection name.
     * @param options The options parameters.
     */
    delete(resourceGroupName, factoryName, privateEndpointConnectionName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            factoryName,
            privateEndpointConnectionName,
            options
        }, deleteOperationSpec$2);
    }
}
// Operation Specifications
const serializer$3 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const createOrUpdateOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/privateEndpointConnections/{privateEndpointConnectionName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: PrivateEndpointConnectionResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: privateEndpointWrapper,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        privateEndpointConnectionName
    ],
    headerParameters: [
        accept,
        contentType,
        ifMatch
    ],
    mediaType: "json",
    serializer: serializer$3
};
const getOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/privateEndpointConnections/{privateEndpointConnectionName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PrivateEndpointConnectionResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        privateEndpointConnectionName
    ],
    headerParameters: [accept, ifNoneMatch],
    serializer: serializer$3
};
const deleteOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/privateEndpointConnections/{privateEndpointConnectionName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        privateEndpointConnectionName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing PrivateLinkResources operations. */
class PrivateLinkResourcesImpl {
    /**
     * Initialize a new instance of the class PrivateLinkResources class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets the private link resources
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param options The options parameters.
     */
    get(resourceGroupName, factoryName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, options }, getOperationSpec$2);
    }
}
// Operation Specifications
const serializer$2 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/privateLinkResources",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PrivateLinkResourcesWrapper
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing GlobalParameters operations. */
class GlobalParametersImpl {
    /**
     * Initialize a new instance of the class GlobalParameters class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists Global parameters
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param options The options parameters.
     */
    listByFactory(resourceGroupName, factoryName, options) {
        const iter = this.listByFactoryPagingAll(resourceGroupName, factoryName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByFactoryPagingPage(resourceGroupName, factoryName, options, settings);
            }
        };
    }
    listByFactoryPagingPage(resourceGroupName, factoryName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByFactoryPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByFactory(resourceGroupName, factoryName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByFactoryNext(resourceGroupName, factoryName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByFactoryPagingAll(resourceGroupName, factoryName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByFactoryPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByFactoryPagingPage(resourceGroupName, factoryName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists Global parameters
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param options The options parameters.
     */
    _listByFactory(resourceGroupName, factoryName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, options }, listByFactoryOperationSpec$1);
    }
    /**
     * Gets a Global parameter
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param globalParameterName The global parameter name.
     * @param options The options parameters.
     */
    get(resourceGroupName, factoryName, globalParameterName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, globalParameterName, options }, getOperationSpec$1);
    }
    /**
     * Creates or updates a Global parameter
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param globalParameterName The global parameter name.
     * @param defaultParam Global parameter resource definition.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, factoryName, globalParameterName, defaultParam, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            factoryName,
            globalParameterName,
            defaultParam,
            options
        }, createOrUpdateOperationSpec$1);
    }
    /**
     * Deletes a Global parameter
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param globalParameterName The global parameter name.
     * @param options The options parameters.
     */
    delete(resourceGroupName, factoryName, globalParameterName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, globalParameterName, options }, deleteOperationSpec$1);
    }
    /**
     * ListByFactoryNext
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param nextLink The nextLink from the previous successful call to the ListByFactory method.
     * @param options The options parameters.
     */
    _listByFactoryNext(resourceGroupName, factoryName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, nextLink, options }, listByFactoryNextOperationSpec$1);
    }
}
// Operation Specifications
const serializer$1 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByFactoryOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/globalParameters",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: GlobalParameterListResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const getOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/globalParameters/{globalParameterName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: GlobalParameterResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        globalParameterName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const createOrUpdateOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/globalParameters/{globalParameterName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: GlobalParameterResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: defaultParam,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        globalParameterName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$1
};
const deleteOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/globalParameters/{globalParameterName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        globalParameterName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listByFactoryNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: GlobalParameterListResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        nextLink,
        subscriptionId,
        resourceGroupName,
        factoryName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ChangeDataCapture operations. */
class ChangeDataCaptureImpl {
    /**
     * Initialize a new instance of the class ChangeDataCapture class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all resources of type change data capture.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param options The options parameters.
     */
    listByFactory(resourceGroupName, factoryName, options) {
        const iter = this.listByFactoryPagingAll(resourceGroupName, factoryName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByFactoryPagingPage(resourceGroupName, factoryName, options, settings);
            }
        };
    }
    listByFactoryPagingPage(resourceGroupName, factoryName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByFactoryPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByFactory(resourceGroupName, factoryName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByFactoryNext(resourceGroupName, factoryName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByFactoryPagingAll(resourceGroupName, factoryName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByFactoryPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByFactoryPagingPage(resourceGroupName, factoryName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists all resources of type change data capture.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param options The options parameters.
     */
    _listByFactory(resourceGroupName, factoryName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, options }, listByFactoryOperationSpec);
    }
    /**
     * Creates or updates a change data capture resource.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param changeDataCaptureName The change data capture name.
     * @param changeDataCapture Change data capture resource definition.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, factoryName, changeDataCaptureName, changeDataCapture, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            factoryName,
            changeDataCaptureName,
            changeDataCapture,
            options
        }, createOrUpdateOperationSpec);
    }
    /**
     * Gets a change data capture.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param changeDataCaptureName The change data capture name.
     * @param options The options parameters.
     */
    get(resourceGroupName, factoryName, changeDataCaptureName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, changeDataCaptureName, options }, getOperationSpec);
    }
    /**
     * Deletes a change data capture.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param changeDataCaptureName The change data capture name.
     * @param options The options parameters.
     */
    delete(resourceGroupName, factoryName, changeDataCaptureName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, changeDataCaptureName, options }, deleteOperationSpec);
    }
    /**
     * Starts a change data capture.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param changeDataCaptureName The change data capture name.
     * @param options The options parameters.
     */
    start(resourceGroupName, factoryName, changeDataCaptureName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, changeDataCaptureName, options }, startOperationSpec);
    }
    /**
     * Stops a change data capture.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param changeDataCaptureName The change data capture name.
     * @param options The options parameters.
     */
    stop(resourceGroupName, factoryName, changeDataCaptureName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, changeDataCaptureName, options }, stopOperationSpec);
    }
    /**
     * Gets the current status for the change data capture resource.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param changeDataCaptureName The change data capture name.
     * @param options The options parameters.
     */
    status(resourceGroupName, factoryName, changeDataCaptureName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, changeDataCaptureName, options }, statusOperationSpec);
    }
    /**
     * ListByFactoryNext
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param nextLink The nextLink from the previous successful call to the ListByFactory method.
     * @param options The options parameters.
     */
    _listByFactoryNext(resourceGroupName, factoryName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, nextLink, options }, listByFactoryNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByFactoryOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/adfcdcs",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ChangeDataCaptureListResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName
    ],
    headerParameters: [accept],
    serializer
};
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/adfcdcs/{changeDataCaptureName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ChangeDataCaptureResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: changeDataCapture,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        changeDataCaptureName
    ],
    headerParameters: [
        accept,
        contentType,
        ifMatch
    ],
    mediaType: "json",
    serializer
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/adfcdcs/{changeDataCaptureName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ChangeDataCaptureResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        changeDataCaptureName
    ],
    headerParameters: [accept, ifNoneMatch],
    serializer
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/adfcdcs/{changeDataCaptureName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        changeDataCaptureName
    ],
    headerParameters: [accept],
    serializer
};
const startOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/adfcdcs/{changeDataCaptureName}/start",
    httpMethod: "POST",
    responses: {
        200: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        changeDataCaptureName
    ],
    headerParameters: [accept],
    serializer
};
const stopOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/adfcdcs/{changeDataCaptureName}/stop",
    httpMethod: "POST",
    responses: {
        200: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        changeDataCaptureName
    ],
    headerParameters: [accept],
    serializer
};
const statusOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/adfcdcs/{changeDataCaptureName}/status",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: { type: { name: "String" } }
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        factoryName,
        changeDataCaptureName
    ],
    headerParameters: [accept],
    serializer
};
const listByFactoryNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ChangeDataCaptureListResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        nextLink,
        subscriptionId,
        resourceGroupName,
        factoryName
    ],
    headerParameters: [accept],
    serializer
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class DataFactoryManagementClient extends coreClient__namespace.ServiceClient {
    /**
     * Initializes a new instance of the DataFactoryManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The subscription identifier.
     * @param options The parameter options
     */
    constructor(credentials, subscriptionId, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        if (subscriptionId === undefined) {
            throw new Error("'subscriptionId' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-datafactory/12.0.0`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName
            });
            this.pipeline.addPolicy(coreRestPipeline__namespace.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient__namespace.authorizeRequestOnClaimChallenge
                }
            }));
        }
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.apiVersion = options.apiVersion || "2018-06-01";
        this.operations = new OperationsImpl(this);
        this.factories = new FactoriesImpl(this);
        this.exposureControl = new ExposureControlImpl(this);
        this.integrationRuntimes = new IntegrationRuntimesImpl(this);
        this.integrationRuntimeObjectMetadata = new IntegrationRuntimeObjectMetadataImpl(this);
        this.integrationRuntimeNodes = new IntegrationRuntimeNodesImpl(this);
        this.linkedServices = new LinkedServicesImpl(this);
        this.datasets = new DatasetsImpl(this);
        this.pipelines = new PipelinesImpl(this);
        this.pipelineRuns = new PipelineRunsImpl(this);
        this.activityRuns = new ActivityRunsImpl(this);
        this.triggers = new TriggersImpl(this);
        this.triggerRuns = new TriggerRunsImpl(this);
        this.dataFlows = new DataFlowsImpl(this);
        this.dataFlowDebugSession = new DataFlowDebugSessionImpl(this);
        this.managedVirtualNetworks = new ManagedVirtualNetworksImpl(this);
        this.managedPrivateEndpoints = new ManagedPrivateEndpointsImpl(this);
        this.credentialOperations = new CredentialOperationsImpl(this);
        this.privateEndPointConnections = new PrivateEndPointConnectionsImpl(this);
        this.privateEndpointConnection = new PrivateEndpointConnectionImpl(this);
        this.privateLinkResources = new PrivateLinkResourcesImpl(this);
        this.globalParameters = new GlobalParametersImpl(this);
        this.changeDataCapture = new ChangeDataCaptureImpl(this);
        this.addCustomApiVersionPolicy(options.apiVersion);
    }
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    addCustomApiVersionPolicy(apiVersion) {
        if (!apiVersion) {
            return;
        }
        const apiVersionPolicy = {
            name: "CustomApiVersionPolicy",
            sendRequest(request, next) {
                return tslib.__awaiter(this, void 0, void 0, function* () {
                    const param = request.url.split("?");
                    if (param.length > 1) {
                        const newParams = param[1].split("&").map((item) => {
                            if (item.indexOf("api-version") > -1) {
                                return "api-version=" + apiVersion;
                            }
                            else {
                                return item;
                            }
                        });
                        request.url = param[0] + "?" + newParams.join("&");
                    }
                    return next(request);
                });
            }
        };
        this.pipeline.addPolicy(apiVersionPolicy);
    }
}

exports.DataFactoryManagementClient = DataFactoryManagementClient;
exports.getContinuationToken = getContinuationToken;
//# sourceMappingURL=index.js.map
