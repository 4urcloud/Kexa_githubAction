import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { OperationState } from '@azure/core-lro';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { SimplePollerLike } from '@azure/core-lro';

/** Get Data Plane read only token response definition. */
export declare interface AccessPolicyResponse {
    /** The user access policy. */
    policy?: UserAccessPolicy;
    /** Data Plane read only access token. */
    accessToken?: string;
    /** Data Plane service base URL. */
    dataPlaneUrl?: string;
}

/** A pipeline activity. */
export declare interface Activity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Container" | "Execution" | "Copy" | "HDInsightHive" | "HDInsightPig" | "HDInsightMapReduce" | "HDInsightStreaming" | "HDInsightSpark" | "ExecuteSSISPackage" | "Custom" | "SqlServerStoredProcedure" | "ExecutePipeline" | "Delete" | "AzureDataExplorerCommand" | "Lookup" | "WebActivity" | "GetMetadata" | "IfCondition" | "Switch" | "ForEach" | "AzureMLBatchExecution" | "AzureMLUpdateResource" | "AzureMLExecutePipeline" | "DataLakeAnalyticsU-SQL" | "Wait" | "Fail" | "Until" | "Validation" | "Filter" | "DatabricksNotebook" | "DatabricksSparkJar" | "DatabricksSparkPython" | "SetVariable" | "AppendVariable" | "AzureFunctionActivity" | "WebHook" | "ExecuteDataFlow" | "ExecuteWranglingDataflow" | "Script" | "SynapseNotebook" | "SparkJob";
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /** Activity name. */
    name: string;
    /** Activity description. */
    description?: string;
    /** Activity state. This is an optional property and if not provided, the state will be Active by default. */
    state?: ActivityState;
    /** Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default. */
    onInactiveMarkAs?: ActivityOnInactiveMarkAs;
    /** Activity depends on condition. */
    dependsOn?: ActivityDependency[];
    /** Activity user properties. */
    userProperties?: UserProperty[];
}

/** Activity dependency information. */
export declare interface ActivityDependency {
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /** Activity name. */
    activity: string;
    /** Match-Condition for the dependency. */
    dependencyConditions: DependencyCondition[];
}

/**
 * Defines values for ActivityOnInactiveMarkAs. \
 * {@link KnownActivityOnInactiveMarkAs} can be used interchangeably with ActivityOnInactiveMarkAs,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Skipped**
 */
export declare type ActivityOnInactiveMarkAs = string;

/** Execution policy for an activity. */
export declare interface ActivityPolicy {
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /** Specifies the timeout for the activity to run. The default timeout is 7 days. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). */
    timeout?: any;
    /** Maximum ordinary retry attempts. Default is 0. Type: integer (or Expression with resultType integer), minimum: 0. */
    retry?: any;
    /** Interval between each retry attempt (in seconds). The default is 30 sec. */
    retryIntervalInSeconds?: number;
    /** When set to true, Input from activity is considered as secure and will not be logged to monitoring. */
    secureInput?: boolean;
    /** When set to true, Output from activity is considered as secure and will not be logged to monitoring. */
    secureOutput?: boolean;
}

/** Information about an activity run in a pipeline. */
export declare interface ActivityRun {
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /**
     * The name of the pipeline.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly pipelineName?: string;
    /**
     * The id of the pipeline run.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly pipelineRunId?: string;
    /**
     * The name of the activity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly activityName?: string;
    /**
     * The type of the activity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly activityType?: string;
    /**
     * The id of the activity run.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly activityRunId?: string;
    /**
     * The name of the compute linked service.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly linkedServiceName?: string;
    /**
     * The status of the activity run.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: string;
    /**
     * The start time of the activity run in 'ISO 8601' format.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly activityRunStart?: Date;
    /**
     * The end time of the activity run in 'ISO 8601' format.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly activityRunEnd?: Date;
    /**
     * The duration of the activity run.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly durationInMs?: number;
    /**
     * The input for the activity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly input?: any;
    /**
     * The output for the activity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly output?: any;
    /**
     * The error if any from the activity run.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly error?: any;
}

/** Interface representing a ActivityRuns. */
export declare interface ActivityRuns {
    /**
     * Query activity runs based on input filter conditions.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param runId The pipeline run identifier.
     * @param filterParameters Parameters to filter the activity runs.
     * @param options The options parameters.
     */
    queryByPipelineRun(resourceGroupName: string, factoryName: string, runId: string, filterParameters: RunFilterParameters, options?: ActivityRunsQueryByPipelineRunOptionalParams): Promise<ActivityRunsQueryByPipelineRunResponse>;
}

/** Optional parameters. */
export declare interface ActivityRunsQueryByPipelineRunOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the queryByPipelineRun operation. */
export declare type ActivityRunsQueryByPipelineRunResponse = ActivityRunsQueryResponse;

/** A list activity runs. */
export declare interface ActivityRunsQueryResponse {
    /** List of activity runs. */
    value: ActivityRun[];
    /** The continuation token for getting the next page of results, if any remaining results exist, null otherwise. */
    continuationToken?: string;
}

/**
 * Defines values for ActivityState. \
 * {@link KnownActivityState} can be used interchangeably with ActivityState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Active** \
 * **Inactive**
 */
export declare type ActivityState = string;

export declare type ActivityUnion = Activity | ControlActivityUnion | ExecutionActivityUnion | ExecuteWranglingDataflowActivity;

/** Response body structure for starting data flow debug session. */
export declare interface AddDataFlowToDebugSessionResponse {
    /** The ID of data flow debug job version. */
    jobVersion?: string;
}

/** Specify the column name and value of additional columns. */
export declare interface AdditionalColumns {
    /** Additional column name. Type: string (or Expression with resultType string). */
    name?: any;
    /** Additional column value. Type: string (or Expression with resultType string). */
    value?: any;
}

/** Amazon Marketplace Web Service linked service. */
export declare interface AmazonMWSLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AmazonMWS";
    /** The endpoint of the Amazon MWS server, (i.e. mws.amazonservices.com) */
    endpoint: any;
    /** The Amazon Marketplace ID you want to retrieve data from. To retrieve data from multiple Marketplace IDs, separate them with a comma (,). (i.e. A2EUQ1WTGCTBG2) */
    marketplaceID: any;
    /** The Amazon seller ID. */
    sellerID: any;
    /** The Amazon MWS authentication token. */
    mwsAuthToken?: SecretBaseUnion;
    /** The access key id used to access data. */
    accessKeyId: any;
    /** The secret key used to access data. */
    secretKey?: SecretBaseUnion;
    /** Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. */
    useEncryptedEndpoints?: any;
    /** Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. */
    useHostVerification?: any;
    /** Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. */
    usePeerVerification?: any;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** Amazon Marketplace Web Service dataset. */
export declare interface AmazonMWSObjectDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AmazonMWSObject";
    /** The table name. Type: string (or Expression with resultType string). */
    tableName?: any;
}

/** A copy activity Amazon Marketplace Web Service source. */
export declare interface AmazonMWSSource extends TabularSource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AmazonMWSSource";
    /** A query to retrieve data from source. Type: string (or Expression with resultType string). */
    query?: any;
}

/** AmazonRdsForOracle database. */
export declare interface AmazonRdsForOracleLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AmazonRdsForOracle";
    /** The connection string. Type: string, SecureString or AzureKeyVaultSecretReference. */
    connectionString: any;
    /** The Azure key vault secret reference of password in connection string. */
    password?: SecretBaseUnion;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/**
 * Defines values for AmazonRdsForOraclePartitionOption. \
 * {@link KnownAmazonRdsForOraclePartitionOption} can be used interchangeably with AmazonRdsForOraclePartitionOption,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **PhysicalPartitionsOfTable** \
 * **DynamicRange**
 */
export declare type AmazonRdsForOraclePartitionOption = string;

/** The settings that will be leveraged for AmazonRdsForOracle source partitioning. */
export declare interface AmazonRdsForOraclePartitionSettings {
    /** Names of the physical partitions of AmazonRdsForOracle table. */
    partitionNames?: any;
    /** The name of the column in integer type that will be used for proceeding range partitioning. Type: string (or Expression with resultType string). */
    partitionColumnName?: any;
    /** The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string). */
    partitionUpperBound?: any;
    /** The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string). */
    partitionLowerBound?: any;
}

/** A copy activity AmazonRdsForOracle source. */
export declare interface AmazonRdsForOracleSource extends CopySource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AmazonRdsForOracleSource";
    /** AmazonRdsForOracle reader query. Type: string (or Expression with resultType string). */
    oracleReaderQuery?: any;
    /** Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). */
    queryTimeout?: any;
    /** The partition mechanism that will be used for AmazonRdsForOracle read in parallel. Type: string (or Expression with resultType string). */
    partitionOption?: any;
    /** The settings that will be leveraged for AmazonRdsForOracle source partitioning. */
    partitionSettings?: AmazonRdsForOraclePartitionSettings;
    /** Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). */
    additionalColumns?: any;
}

/** The AmazonRdsForOracle database dataset. */
export declare interface AmazonRdsForOracleTableDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AmazonRdsForOracleTable";
    /** The schema name of the AmazonRdsForOracle database. Type: string (or Expression with resultType string). */
    schemaTypePropertiesSchema?: any;
    /** The table name of the AmazonRdsForOracle database. Type: string (or Expression with resultType string). */
    table?: any;
}

/** Amazon RDS for SQL Server linked service. */
export declare interface AmazonRdsForSqlServerLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AmazonRdsForSqlServer";
    /** The connection string. Type: string, SecureString or AzureKeyVaultSecretReference. */
    connectionString: any;
    /** The on-premises Windows authentication user name. Type: string (or Expression with resultType string). */
    userName?: any;
    /** The on-premises Windows authentication password. */
    password?: SecretBaseUnion;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
    /** Sql always encrypted properties. */
    alwaysEncryptedSettings?: SqlAlwaysEncryptedProperties;
}

/** A copy activity Amazon RDS for SQL Server source. */
export declare interface AmazonRdsForSqlServerSource extends TabularSource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AmazonRdsForSqlServerSource";
    /** SQL reader query. Type: string (or Expression with resultType string). */
    sqlReaderQuery?: any;
    /** Name of the stored procedure for a SQL Database source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string). */
    sqlReaderStoredProcedureName?: any;
    /** Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}". */
    storedProcedureParameters?: any;
    /** Specifies the transaction locking behavior for the SQL source. Allowed values: ReadCommitted/ReadUncommitted/RepeatableRead/Serializable/Snapshot. The default value is ReadCommitted. Type: string (or Expression with resultType string). */
    isolationLevel?: any;
    /** Which additional types to produce. */
    produceAdditionalTypes?: any;
    /** The partition mechanism that will be used for Sql read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange". */
    partitionOption?: any;
    /** The settings that will be leveraged for Sql source partitioning. */
    partitionSettings?: SqlPartitionSettings;
}

/** The Amazon RDS for SQL Server dataset. */
export declare interface AmazonRdsForSqlServerTableDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AmazonRdsForSqlServerTable";
    /** The schema name of the SQL Server dataset. Type: string (or Expression with resultType string). */
    schemaTypePropertiesSchema?: any;
    /** The table name of the SQL Server dataset. Type: string (or Expression with resultType string). */
    table?: any;
}

/** Linked service for Amazon Redshift. */
export declare interface AmazonRedshiftLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AmazonRedshift";
    /** The name of the Amazon Redshift server. Type: string (or Expression with resultType string). */
    server: any;
    /** The username of the Amazon Redshift source. Type: string (or Expression with resultType string). */
    username?: any;
    /** The password of the Amazon Redshift source. */
    password?: SecretBaseUnion;
    /** The database name of the Amazon Redshift source. Type: string (or Expression with resultType string). */
    database: any;
    /** The TCP port number that the Amazon Redshift server uses to listen for client connections. The default value is 5439. Type: integer (or Expression with resultType integer). */
    port?: any;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** A copy activity source for Amazon Redshift Source. */
export declare interface AmazonRedshiftSource extends TabularSource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AmazonRedshiftSource";
    /** Database query. Type: string (or Expression with resultType string). */
    query?: any;
    /** The Amazon S3 settings needed for the interim Amazon S3 when copying from Amazon Redshift with unload. With this, data from Amazon Redshift source will be unloaded into S3 first and then copied into the targeted sink from the interim S3. */
    redshiftUnloadSettings?: RedshiftUnloadSettings;
}

/** The Amazon Redshift table dataset. */
export declare interface AmazonRedshiftTableDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AmazonRedshiftTable";
    /** This property will be retired. Please consider using schema + table properties instead. */
    tableName?: any;
    /** The Amazon Redshift table name. Type: string (or Expression with resultType string). */
    table?: any;
    /** The Amazon Redshift schema name. Type: string (or Expression with resultType string). */
    schemaTypePropertiesSchema?: any;
}

/** Linked service for Amazon S3 Compatible. */
export declare interface AmazonS3CompatibleLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AmazonS3Compatible";
    /** The access key identifier of the Amazon S3 Compatible Identity and Access Management (IAM) user. Type: string (or Expression with resultType string). */
    accessKeyId?: any;
    /** The secret access key of the Amazon S3 Compatible Identity and Access Management (IAM) user. */
    secretAccessKey?: SecretBaseUnion;
    /** This value specifies the endpoint to access with the Amazon S3 Compatible Connector. This is an optional property; change it only if you want to try a different service endpoint or want to switch between https and http. Type: string (or Expression with resultType string). */
    serviceUrl?: any;
    /** If true, use S3 path-style access instead of virtual hosted-style access. Default value is false. Type: boolean (or Expression with resultType boolean). */
    forcePathStyle?: any;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** The location of Amazon S3 Compatible dataset. */
export declare interface AmazonS3CompatibleLocation extends DatasetLocation {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AmazonS3CompatibleLocation";
    /** Specify the bucketName of Amazon S3 Compatible. Type: string (or Expression with resultType string) */
    bucketName?: any;
    /** Specify the version of Amazon S3 Compatible. Type: string (or Expression with resultType string). */
    version?: any;
}

/** Amazon S3 Compatible read settings. */
export declare interface AmazonS3CompatibleReadSettings extends StoreReadSettings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AmazonS3CompatibleReadSettings";
    /** If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean). */
    recursive?: any;
    /** Amazon S3 Compatible wildcardFolderPath. Type: string (or Expression with resultType string). */
    wildcardFolderPath?: any;
    /** Amazon S3 Compatible wildcardFileName. Type: string (or Expression with resultType string). */
    wildcardFileName?: any;
    /** The prefix filter for the S3 Compatible object name. Type: string (or Expression with resultType string). */
    prefix?: any;
    /** Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string). */
    fileListPath?: any;
    /** Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean). */
    enablePartitionDiscovery?: any;
    /** Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string). */
    partitionRootPath?: any;
    /** Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean). */
    deleteFilesAfterCompletion?: any;
    /** The start of file's modified datetime. Type: string (or Expression with resultType string). */
    modifiedDatetimeStart?: any;
    /** The end of file's modified datetime. Type: string (or Expression with resultType string). */
    modifiedDatetimeEnd?: any;
}

/** A single Amazon Simple Storage Service (S3) object or a set of S3 objects. */
export declare interface AmazonS3Dataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AmazonS3Object";
    /** The name of the Amazon S3 bucket. Type: string (or Expression with resultType string). */
    bucketName: any;
    /** The key of the Amazon S3 object. Type: string (or Expression with resultType string). */
    key?: any;
    /** The prefix filter for the S3 object name. Type: string (or Expression with resultType string). */
    prefix?: any;
    /** The version for the S3 object. Type: string (or Expression with resultType string). */
    version?: any;
    /** The start of S3 object's modified datetime. Type: string (or Expression with resultType string). */
    modifiedDatetimeStart?: any;
    /** The end of S3 object's modified datetime. Type: string (or Expression with resultType string). */
    modifiedDatetimeEnd?: any;
    /** The format of files. */
    format?: DatasetStorageFormatUnion;
    /** The data compression method used for the Amazon S3 object. */
    compression?: DatasetCompression;
}

/** Linked service for Amazon S3. */
export declare interface AmazonS3LinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AmazonS3";
    /** The authentication type of S3. Allowed value: AccessKey (default) or TemporarySecurityCredentials. Type: string (or Expression with resultType string). */
    authenticationType?: any;
    /** The access key identifier of the Amazon S3 Identity and Access Management (IAM) user. Type: string (or Expression with resultType string). */
    accessKeyId?: any;
    /** The secret access key of the Amazon S3 Identity and Access Management (IAM) user. */
    secretAccessKey?: SecretBaseUnion;
    /** This value specifies the endpoint to access with the S3 Connector. This is an optional property; change it only if you want to try a different service endpoint or want to switch between https and http. Type: string (or Expression with resultType string). */
    serviceUrl?: any;
    /** The session token for the S3 temporary security credential. */
    sessionToken?: SecretBaseUnion;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** The location of amazon S3 dataset. */
export declare interface AmazonS3Location extends DatasetLocation {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AmazonS3Location";
    /** Specify the bucketName of amazon S3. Type: string (or Expression with resultType string) */
    bucketName?: any;
    /** Specify the version of amazon S3. Type: string (or Expression with resultType string). */
    version?: any;
}

/** Amazon S3 read settings. */
export declare interface AmazonS3ReadSettings extends StoreReadSettings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AmazonS3ReadSettings";
    /** If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean). */
    recursive?: any;
    /** AmazonS3 wildcardFolderPath. Type: string (or Expression with resultType string). */
    wildcardFolderPath?: any;
    /** AmazonS3 wildcardFileName. Type: string (or Expression with resultType string). */
    wildcardFileName?: any;
    /** The prefix filter for the S3 object name. Type: string (or Expression with resultType string). */
    prefix?: any;
    /** Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string). */
    fileListPath?: any;
    /** Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean). */
    enablePartitionDiscovery?: any;
    /** Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string). */
    partitionRootPath?: any;
    /** Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean). */
    deleteFilesAfterCompletion?: any;
    /** The start of file's modified datetime. Type: string (or Expression with resultType string). */
    modifiedDatetimeStart?: any;
    /** The end of file's modified datetime. Type: string (or Expression with resultType string). */
    modifiedDatetimeEnd?: any;
}

/** Append value for a Variable of type Array. */
export declare interface AppendVariableActivity extends ControlActivity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AppendVariable";
    /** Name of the variable whose value needs to be appended to. */
    variableName?: string;
    /** Value to be appended. Type: could be a static value matching type of the variable item or Expression with resultType matching type of the variable item */
    value?: any;
}

/** Linked service for AppFigures. */
export declare interface AppFiguresLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AppFigures";
    /** The username of the Appfigures source. Type: string (or Expression with resultType string). */
    userName: any;
    /** The password of the AppFigures source. */
    password: SecretBaseUnion;
    /** The client key for the AppFigures source. */
    clientKey: SecretBaseUnion;
}

/** A wrapper for an ARM resource id */
export declare interface ArmIdWrapper {
    /** NOTE: This property will not be serialized. It can only be populated by the server. */
    readonly id?: string;
}

/** Linked service for Asana. */
export declare interface AsanaLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Asana";
    /** The api token for the Asana source. */
    apiToken: SecretBaseUnion;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/**
 * Defines values for AvroCompressionCodec. \
 * {@link KnownAvroCompressionCodec} can be used interchangeably with AvroCompressionCodec,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **none** \
 * **deflate** \
 * **snappy** \
 * **xz** \
 * **bzip2**
 */
export declare type AvroCompressionCodec = string;

/** Avro dataset. */
export declare interface AvroDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Avro";
    /** The location of the avro storage. */
    location?: DatasetLocationUnion;
    /** The data avroCompressionCodec. Type: string (or Expression with resultType string). */
    avroCompressionCodec?: any;
    avroCompressionLevel?: number;
}

/** The data stored in Avro format. */
export declare interface AvroFormat extends DatasetStorageFormat {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AvroFormat";
}

/** A copy activity Avro sink. */
export declare interface AvroSink extends CopySink {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AvroSink";
    /** Avro store settings. */
    storeSettings?: StoreWriteSettingsUnion;
    /** Avro format settings. */
    formatSettings?: AvroWriteSettings;
}

/** A copy activity Avro source. */
export declare interface AvroSource extends CopySource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AvroSource";
    /** Avro store settings. */
    storeSettings?: StoreReadSettingsUnion;
    /** Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). */
    additionalColumns?: any;
}

/** Avro write settings. */
export declare interface AvroWriteSettings extends FormatWriteSettings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AvroWriteSettings";
    /** Top level record name in write result, which is required in AVRO spec. */
    recordName?: string;
    /** Record namespace in the write result. */
    recordNamespace?: string;
    /** Limit the written file's row count to be smaller than or equal to the specified count. Type: integer (or Expression with resultType integer). */
    maxRowsPerFile?: any;
    /** Specifies the file name pattern <fileNamePrefix>_<fileIndex>.<fileExtension> when copy from non-file based store without partitionOptions. Type: string (or Expression with resultType string). */
    fileNamePrefix?: any;
}

/** The express custom setup of installing Azure PowerShell. */
export declare interface AzPowerShellSetup extends CustomSetupBase {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzPowerShellSetup";
    /** The required version of Azure PowerShell to install. */
    version: string;
}

/** Azure Batch linked service. */
export declare interface AzureBatchLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureBatch";
    /** The Azure Batch account name. Type: string (or Expression with resultType string). */
    accountName: any;
    /** The Azure Batch account access key. */
    accessKey?: SecretBaseUnion;
    /** The Azure Batch URI. Type: string (or Expression with resultType string). */
    batchUri: any;
    /** The Azure Batch pool name. Type: string (or Expression with resultType string). */
    poolName: any;
    /** The Azure Storage linked service reference. */
    linkedServiceName: LinkedServiceReference;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
    /** The credential reference containing authentication information. */
    credential?: CredentialReference;
}

/** The Azure Blob storage. */
export declare interface AzureBlobDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureBlob";
    /** The path of the Azure Blob storage. Type: string (or Expression with resultType string). */
    folderPath?: any;
    /** The root of blob path. Type: string (or Expression with resultType string). */
    tableRootLocation?: any;
    /** The name of the Azure Blob. Type: string (or Expression with resultType string). */
    fileName?: any;
    /** The start of Azure Blob's modified datetime. Type: string (or Expression with resultType string). */
    modifiedDatetimeStart?: any;
    /** The end of Azure Blob's modified datetime. Type: string (or Expression with resultType string). */
    modifiedDatetimeEnd?: any;
    /** The format of the Azure Blob storage. */
    format?: DatasetStorageFormatUnion;
    /** The data compression method used for the blob storage. */
    compression?: DatasetCompression;
}

/** The Azure Data Lake Storage Gen2 storage. */
export declare interface AzureBlobFSDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureBlobFSFile";
    /** The path of the Azure Data Lake Storage Gen2 storage. Type: string (or Expression with resultType string). */
    folderPath?: any;
    /** The name of the Azure Data Lake Storage Gen2. Type: string (or Expression with resultType string). */
    fileName?: any;
    /** The format of the Azure Data Lake Storage Gen2 storage. */
    format?: DatasetStorageFormatUnion;
    /** The data compression method used for the blob storage. */
    compression?: DatasetCompression;
}

/** Azure Data Lake Storage Gen2 linked service. */
export declare interface AzureBlobFSLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureBlobFS";
    /** Endpoint for the Azure Data Lake Storage Gen2 service. Type: string (or Expression with resultType string). */
    url?: any;
    /** Account key for the Azure Data Lake Storage Gen2 service. Type: string (or Expression with resultType string). */
    accountKey?: any;
    /** The ID of the application used to authenticate against the Azure Data Lake Storage Gen2 account. Type: string (or Expression with resultType string). */
    servicePrincipalId?: any;
    /** The Key of the application used to authenticate against the Azure Data Lake Storage Gen2 account. */
    servicePrincipalKey?: SecretBaseUnion;
    /** The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string). */
    tenant?: any;
    /** Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string). */
    azureCloudType?: any;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
    /** The credential reference containing authentication information. */
    credential?: CredentialReference;
    /** The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string). */
    servicePrincipalCredentialType?: any;
    /** The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference. */
    servicePrincipalCredential?: SecretBaseUnion;
    /** SAS URI of the Azure Data Lake Storage Gen2 service. Type: string, SecureString or AzureKeyVaultSecretReference. */
    sasUri?: any;
    /** The Azure key vault secret reference of sasToken in sas uri. */
    sasToken?: SecretBaseUnion;
}

/** The location of azure blobFS dataset. */
export declare interface AzureBlobFSLocation extends DatasetLocation {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureBlobFSLocation";
    /** Specify the fileSystem of azure blobFS. Type: string (or Expression with resultType string). */
    fileSystem?: any;
}

/** Azure blobFS read settings. */
export declare interface AzureBlobFSReadSettings extends StoreReadSettings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureBlobFSReadSettings";
    /** If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean). */
    recursive?: any;
    /** Azure blobFS wildcardFolderPath. Type: string (or Expression with resultType string). */
    wildcardFolderPath?: any;
    /** Azure blobFS wildcardFileName. Type: string (or Expression with resultType string). */
    wildcardFileName?: any;
    /** Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string). */
    fileListPath?: any;
    /** Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean). */
    enablePartitionDiscovery?: any;
    /** Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string). */
    partitionRootPath?: any;
    /** Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean). */
    deleteFilesAfterCompletion?: any;
    /** The start of file's modified datetime. Type: string (or Expression with resultType string). */
    modifiedDatetimeStart?: any;
    /** The end of file's modified datetime. Type: string (or Expression with resultType string). */
    modifiedDatetimeEnd?: any;
}

/** A copy activity Azure Data Lake Storage Gen2 sink. */
export declare interface AzureBlobFSSink extends CopySink {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureBlobFSSink";
    /** The type of copy behavior for copy sink. Type: string (or Expression with resultType string). */
    copyBehavior?: any;
    /** Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects). */
    metadata?: MetadataItem[];
}

/** A copy activity Azure BlobFS source. */
export declare interface AzureBlobFSSource extends CopySource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureBlobFSSource";
    /** Treat empty as null. Type: boolean (or Expression with resultType boolean). */
    treatEmptyAsNull?: any;
    /** Number of header lines to skip from each blob. Type: integer (or Expression with resultType integer). */
    skipHeaderLineCount?: any;
    /** If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean). */
    recursive?: any;
}

/** Azure blobFS write settings. */
export declare interface AzureBlobFSWriteSettings extends StoreWriteSettings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureBlobFSWriteSettings";
    /** Indicates the block size(MB) when writing data to blob. Type: integer (or Expression with resultType integer). */
    blockSizeInMB?: any;
}

/** The azure blob storage linked service. */
export declare interface AzureBlobStorageLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureBlobStorage";
    /** The connection string. It is mutually exclusive with sasUri, serviceEndpoint property. Type: string, SecureString or AzureKeyVaultSecretReference. */
    connectionString?: any;
    /** The Azure key vault secret reference of accountKey in connection string. */
    accountKey?: AzureKeyVaultSecretReference;
    /** SAS URI of the Azure Blob Storage resource. It is mutually exclusive with connectionString, serviceEndpoint property. Type: string, SecureString or AzureKeyVaultSecretReference. */
    sasUri?: any;
    /** The Azure key vault secret reference of sasToken in sas uri. */
    sasToken?: AzureKeyVaultSecretReference;
    /** Blob service endpoint of the Azure Blob Storage resource. It is mutually exclusive with connectionString, sasUri property. */
    serviceEndpoint?: any;
    /** The ID of the service principal used to authenticate against Azure SQL Data Warehouse. Type: string (or Expression with resultType string). */
    servicePrincipalId?: any;
    /** The key of the service principal used to authenticate against Azure SQL Data Warehouse. */
    servicePrincipalKey?: SecretBaseUnion;
    /** The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string). */
    tenant?: any;
    /** Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string). */
    azureCloudType?: any;
    /** Specify the kind of your storage account. Allowed values are: Storage (general purpose v1), StorageV2 (general purpose v2), BlobStorage, or BlockBlobStorage. Type: string (or Expression with resultType string). */
    accountKind?: any;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
    /** The credential reference containing authentication information. */
    credential?: CredentialReference;
    /** The type used for authentication. Type: string. */
    authenticationType?: AzureStorageAuthenticationType;
    /** Container uri of the Azure Blob Storage resource only support for anonymous access. Type: string (or Expression with resultType string). */
    containerUri?: any;
}

/** The location of azure blob dataset. */
export declare interface AzureBlobStorageLocation extends DatasetLocation {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureBlobStorageLocation";
    /** Specify the container of azure blob. Type: string (or Expression with resultType string). */
    container?: any;
}

/** Azure blob read settings. */
export declare interface AzureBlobStorageReadSettings extends StoreReadSettings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureBlobStorageReadSettings";
    /** If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean). */
    recursive?: any;
    /** Azure blob wildcardFolderPath. Type: string (or Expression with resultType string). */
    wildcardFolderPath?: any;
    /** Azure blob wildcardFileName. Type: string (or Expression with resultType string). */
    wildcardFileName?: any;
    /** The prefix filter for the Azure Blob name. Type: string (or Expression with resultType string). */
    prefix?: any;
    /** Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string). */
    fileListPath?: any;
    /** Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean). */
    enablePartitionDiscovery?: any;
    /** Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string). */
    partitionRootPath?: any;
    /** Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean). */
    deleteFilesAfterCompletion?: any;
    /** The start of file's modified datetime. Type: string (or Expression with resultType string). */
    modifiedDatetimeStart?: any;
    /** The end of file's modified datetime. Type: string (or Expression with resultType string). */
    modifiedDatetimeEnd?: any;
}

/** Azure blob write settings. */
export declare interface AzureBlobStorageWriteSettings extends StoreWriteSettings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureBlobStorageWriteSettings";
    /** Indicates the block size(MB) when writing data to blob. Type: integer (or Expression with resultType integer). */
    blockSizeInMB?: any;
}

/** Azure Databricks Delta Lake dataset. */
export declare interface AzureDatabricksDeltaLakeDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureDatabricksDeltaLakeDataset";
    /** The name of delta table. Type: string (or Expression with resultType string). */
    table?: any;
    /** The database name of delta table. Type: string (or Expression with resultType string). */
    database?: any;
}

/** Azure Databricks Delta Lake export command settings. */
export declare interface AzureDatabricksDeltaLakeExportCommand extends ExportSettings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureDatabricksDeltaLakeExportCommand";
    /** Specify the date format for the csv in Azure Databricks Delta Lake Copy. Type: string (or Expression with resultType string). */
    dateFormat?: any;
    /** Specify the timestamp format for the csv in Azure Databricks Delta Lake Copy. Type: string (or Expression with resultType string). */
    timestampFormat?: any;
}

/** Azure Databricks Delta Lake import command settings. */
export declare interface AzureDatabricksDeltaLakeImportCommand extends ImportSettings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureDatabricksDeltaLakeImportCommand";
    /** Specify the date format for csv in Azure Databricks Delta Lake Copy. Type: string (or Expression with resultType string). */
    dateFormat?: any;
    /** Specify the timestamp format for csv in Azure Databricks Delta Lake Copy. Type: string (or Expression with resultType string). */
    timestampFormat?: any;
}

/** Azure Databricks Delta Lake linked service. */
export declare interface AzureDatabricksDeltaLakeLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureDatabricksDeltaLake";
    /** <REGION>.azuredatabricks.net, domain name of your Databricks deployment. Type: string (or Expression with resultType string). */
    domain: any;
    /** Access token for databricks REST API. Refer to https://docs.azuredatabricks.net/api/latest/authentication.html. Type: string, SecureString or AzureKeyVaultSecretReference. */
    accessToken?: SecretBaseUnion;
    /** The id of an existing interactive cluster that will be used for all runs of this job. Type: string (or Expression with resultType string). */
    clusterId?: any;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
    /** The credential reference containing authentication information. */
    credential?: CredentialReference;
    /** Workspace resource id for databricks REST API. Type: string (or Expression with resultType string). */
    workspaceResourceId?: any;
}

/** A copy activity Azure Databricks Delta Lake sink. */
export declare interface AzureDatabricksDeltaLakeSink extends CopySink {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureDatabricksDeltaLakeSink";
    /** SQL pre-copy script. Type: string (or Expression with resultType string). */
    preCopyScript?: any;
    /** Azure Databricks Delta Lake import settings. */
    importSettings?: AzureDatabricksDeltaLakeImportCommand;
}

/** A copy activity Azure Databricks Delta Lake source. */
export declare interface AzureDatabricksDeltaLakeSource extends CopySource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureDatabricksDeltaLakeSource";
    /** Azure Databricks Delta Lake Sql query. Type: string (or Expression with resultType string). */
    query?: any;
    /** Azure Databricks Delta Lake export settings. */
    exportSettings?: AzureDatabricksDeltaLakeExportCommand;
}

/** Azure Databricks linked service. */
export declare interface AzureDatabricksLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureDatabricks";
    /** <REGION>.azuredatabricks.net, domain name of your Databricks deployment. Type: string (or Expression with resultType string). */
    domain: any;
    /** Access token for databricks REST API. Refer to https://docs.azuredatabricks.net/api/latest/authentication.html. Type: string (or Expression with resultType string). */
    accessToken?: SecretBaseUnion;
    /** Required to specify MSI, if using Workspace resource id for databricks REST API. Type: string (or Expression with resultType string). */
    authentication?: any;
    /** Workspace resource id for databricks REST API. Type: string (or Expression with resultType string). */
    workspaceResourceId?: any;
    /** The id of an existing interactive cluster that will be used for all runs of this activity. Type: string (or Expression with resultType string). */
    existingClusterId?: any;
    /** The id of an existing instance pool that will be used for all runs of this activity. Type: string (or Expression with resultType string). */
    instancePoolId?: any;
    /** If not using an existing interactive cluster, this specifies the Spark version of a new job cluster or instance pool nodes created for each run of this activity. Required if instancePoolId is specified. Type: string (or Expression with resultType string). */
    newClusterVersion?: any;
    /** If not using an existing interactive cluster, this specifies the number of worker nodes to use for the new job cluster or instance pool. For new job clusters, this a string-formatted Int32, like '1' means numOfWorker is 1 or '1:10' means auto-scale from 1 (min) to 10 (max). For instance pools, this is a string-formatted Int32, and can only specify a fixed number of worker nodes, such as '2'. Required if newClusterVersion is specified. Type: string (or Expression with resultType string). */
    newClusterNumOfWorker?: any;
    /** The node type of the new job cluster. This property is required if newClusterVersion is specified and instancePoolId is not specified. If instancePoolId is specified, this property is ignored. Type: string (or Expression with resultType string). */
    newClusterNodeType?: any;
    /** A set of optional, user-specified Spark configuration key-value pairs. */
    newClusterSparkConf?: {
        [propertyName: string]: any;
    };
    /** A set of optional, user-specified Spark environment variables key-value pairs. */
    newClusterSparkEnvVars?: {
        [propertyName: string]: any;
    };
    /** Additional tags for cluster resources. This property is ignored in instance pool configurations. */
    newClusterCustomTags?: {
        [propertyName: string]: any;
    };
    /** Specify a location to deliver Spark driver, worker, and event logs. Type: string (or Expression with resultType string). */
    newClusterLogDestination?: any;
    /** The driver node type for the new job cluster. This property is ignored in instance pool configurations. Type: string (or Expression with resultType string). */
    newClusterDriverNodeType?: any;
    /** User-defined initialization scripts for the new cluster. Type: array of strings (or Expression with resultType array of strings). */
    newClusterInitScripts?: any;
    /** Enable the elastic disk on the new cluster. This property is now ignored, and takes the default elastic disk behavior in Databricks (elastic disks are always enabled). Type: boolean (or Expression with resultType boolean). */
    newClusterEnableElasticDisk?: any;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
    /** The policy id for limiting the ability to configure clusters based on a user defined set of rules. Type: string (or Expression with resultType string). */
    policyId?: any;
    /** The credential reference containing authentication information. */
    credential?: CredentialReference;
}

/** Azure Data Explorer command activity. */
export declare interface AzureDataExplorerCommandActivity extends ExecutionActivity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureDataExplorerCommand";
    /** A control command, according to the Azure Data Explorer command syntax. Type: string (or Expression with resultType string). */
    command: any;
    /** Control command timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9]))..) */
    commandTimeout?: any;
}

/** Azure Data Explorer (Kusto) linked service. */
export declare interface AzureDataExplorerLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureDataExplorer";
    /** The endpoint of Azure Data Explorer (the engine's endpoint). URL will be in the format https://<clusterName>.<regionName>.kusto.windows.net. Type: string (or Expression with resultType string) */
    endpoint: any;
    /** The ID of the service principal used to authenticate against Azure Data Explorer. Type: string (or Expression with resultType string). */
    servicePrincipalId?: any;
    /** The key of the service principal used to authenticate against Kusto. */
    servicePrincipalKey?: SecretBaseUnion;
    /** Database name for connection. Type: string (or Expression with resultType string). */
    database: any;
    /** The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string). */
    tenant?: any;
    /** The credential reference containing authentication information. */
    credential?: CredentialReference;
}

/** A copy activity Azure Data Explorer sink. */
export declare interface AzureDataExplorerSink extends CopySink {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureDataExplorerSink";
    /** A name of a pre-created csv mapping that was defined on the target Kusto table. Type: string. */
    ingestionMappingName?: any;
    /** An explicit column mapping description provided in a json format. Type: string. */
    ingestionMappingAsJson?: any;
    /** If set to true, any aggregation will be skipped. Default is false. Type: boolean. */
    flushImmediately?: any;
}

/** A copy activity Azure Data Explorer (Kusto) source. */
export declare interface AzureDataExplorerSource extends CopySource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureDataExplorerSource";
    /** Database query. Should be a Kusto Query Language (KQL) query. Type: string (or Expression with resultType string). */
    query: any;
    /** The name of the Boolean option that controls whether truncation is applied to result-sets that go beyond a certain row-count limit. */
    noTruncation?: any;
    /** Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).. */
    queryTimeout?: any;
    /** Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). */
    additionalColumns?: any;
}

/** The Azure Data Explorer (Kusto) dataset. */
export declare interface AzureDataExplorerTableDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureDataExplorerTable";
    /** The table name of the Azure Data Explorer database. Type: string (or Expression with resultType string). */
    table?: any;
}

/** Azure Data Lake Analytics linked service. */
export declare interface AzureDataLakeAnalyticsLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureDataLakeAnalytics";
    /** The Azure Data Lake Analytics account name. Type: string (or Expression with resultType string). */
    accountName: any;
    /** The ID of the application used to authenticate against the Azure Data Lake Analytics account. Type: string (or Expression with resultType string). */
    servicePrincipalId?: any;
    /** The Key of the application used to authenticate against the Azure Data Lake Analytics account. */
    servicePrincipalKey?: SecretBaseUnion;
    /** The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string). */
    tenant: any;
    /** Data Lake Analytics account subscription ID (if different from Data Factory account). Type: string (or Expression with resultType string). */
    subscriptionId?: any;
    /** Data Lake Analytics account resource group name (if different from Data Factory account). Type: string (or Expression with resultType string). */
    resourceGroupName?: any;
    /** Azure Data Lake Analytics URI Type: string (or Expression with resultType string). */
    dataLakeAnalyticsUri?: any;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** Azure Data Lake Store dataset. */
export declare interface AzureDataLakeStoreDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureDataLakeStoreFile";
    /** Path to the folder in the Azure Data Lake Store. Type: string (or Expression with resultType string). */
    folderPath?: any;
    /** The name of the file in the Azure Data Lake Store. Type: string (or Expression with resultType string). */
    fileName?: any;
    /** The format of the Data Lake Store. */
    format?: DatasetStorageFormatUnion;
    /** The data compression method used for the item(s) in the Azure Data Lake Store. */
    compression?: DatasetCompression;
}

/** Azure Data Lake Store linked service. */
export declare interface AzureDataLakeStoreLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureDataLakeStore";
    /** Data Lake Store service URI. Type: string (or Expression with resultType string). */
    dataLakeStoreUri: any;
    /** The ID of the application used to authenticate against the Azure Data Lake Store account. Type: string (or Expression with resultType string). */
    servicePrincipalId?: any;
    /** The Key of the application used to authenticate against the Azure Data Lake Store account. */
    servicePrincipalKey?: SecretBaseUnion;
    /** The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string). */
    tenant?: any;
    /** Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string). */
    azureCloudType?: any;
    /** Data Lake Store account name. Type: string (or Expression with resultType string). */
    accountName?: any;
    /** Data Lake Store account subscription ID (if different from Data Factory account). Type: string (or Expression with resultType string). */
    subscriptionId?: any;
    /** Data Lake Store account resource group name (if different from Data Factory account). Type: string (or Expression with resultType string). */
    resourceGroupName?: any;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
    /** The credential reference containing authentication information. */
    credential?: CredentialReference;
}

/** The location of azure data lake store dataset. */
export declare interface AzureDataLakeStoreLocation extends DatasetLocation {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureDataLakeStoreLocation";
}

/** Azure data lake store read settings. */
export declare interface AzureDataLakeStoreReadSettings extends StoreReadSettings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureDataLakeStoreReadSettings";
    /** If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean). */
    recursive?: any;
    /** ADLS wildcardFolderPath. Type: string (or Expression with resultType string). */
    wildcardFolderPath?: any;
    /** ADLS wildcardFileName. Type: string (or Expression with resultType string). */
    wildcardFileName?: any;
    /** Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string). */
    fileListPath?: any;
    /** Lists files after the value (exclusive) based on file/folder names’ lexicographical order. Applies under the folderPath in data set, and filter files/sub-folders under the folderPath. Type: string (or Expression with resultType string). */
    listAfter?: any;
    /** Lists files before the value (inclusive) based on file/folder names’ lexicographical order. Applies under the folderPath in data set, and filter files/sub-folders under the folderPath. Type: string (or Expression with resultType string). */
    listBefore?: any;
    /** Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean). */
    enablePartitionDiscovery?: any;
    /** Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string). */
    partitionRootPath?: any;
    /** Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean). */
    deleteFilesAfterCompletion?: any;
    /** The start of file's modified datetime. Type: string (or Expression with resultType string). */
    modifiedDatetimeStart?: any;
    /** The end of file's modified datetime. Type: string (or Expression with resultType string). */
    modifiedDatetimeEnd?: any;
}

/** A copy activity Azure Data Lake Store sink. */
export declare interface AzureDataLakeStoreSink extends CopySink {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureDataLakeStoreSink";
    /** The type of copy behavior for copy sink. Type: string (or Expression with resultType string). */
    copyBehavior?: any;
    /** Single File Parallel. */
    enableAdlsSingleFileParallel?: any;
}

/** A copy activity Azure Data Lake source. */
export declare interface AzureDataLakeStoreSource extends CopySource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureDataLakeStoreSource";
    /** If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean). */
    recursive?: any;
}

/** Azure data lake store write settings. */
export declare interface AzureDataLakeStoreWriteSettings extends StoreWriteSettings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureDataLakeStoreWriteSettings";
    /** Specifies the expiry time of the written files. The time is applied to the UTC time zone in the format of "2018-12-01T05:00:00Z". Default value is NULL. Type: string (or Expression with resultType string). */
    expiryDateTime?: any;
}

/** Azure File Storage linked service. */
export declare interface AzureFileStorageLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureFileStorage";
    /** Host name of the server. Type: string (or Expression with resultType string). */
    host?: any;
    /** User ID to logon the server. Type: string (or Expression with resultType string). */
    userId?: any;
    /** Password to logon the server. */
    password?: SecretBaseUnion;
    /** The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference. */
    connectionString?: any;
    /** The Azure key vault secret reference of accountKey in connection string. */
    accountKey?: AzureKeyVaultSecretReference;
    /** SAS URI of the Azure File resource. It is mutually exclusive with connectionString property. Type: string, SecureString or AzureKeyVaultSecretReference. */
    sasUri?: any;
    /** The Azure key vault secret reference of sasToken in sas uri. */
    sasToken?: AzureKeyVaultSecretReference;
    /** The azure file share name. It is required when auth with accountKey/sasToken. Type: string (or Expression with resultType string). */
    fileShare?: any;
    /** The azure file share snapshot version. Type: string (or Expression with resultType string). */
    snapshot?: any;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** The location of file server dataset. */
export declare interface AzureFileStorageLocation extends DatasetLocation {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureFileStorageLocation";
}

/** Azure File Storage read settings. */
export declare interface AzureFileStorageReadSettings extends StoreReadSettings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureFileStorageReadSettings";
    /** If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean). */
    recursive?: any;
    /** Azure File Storage wildcardFolderPath. Type: string (or Expression with resultType string). */
    wildcardFolderPath?: any;
    /** Azure File Storage wildcardFileName. Type: string (or Expression with resultType string). */
    wildcardFileName?: any;
    /** The prefix filter for the Azure File name starting from root path. Type: string (or Expression with resultType string). */
    prefix?: any;
    /** Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string). */
    fileListPath?: any;
    /** Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean). */
    enablePartitionDiscovery?: any;
    /** Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string). */
    partitionRootPath?: any;
    /** Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean). */
    deleteFilesAfterCompletion?: any;
    /** The start of file's modified datetime. Type: string (or Expression with resultType string). */
    modifiedDatetimeStart?: any;
    /** The end of file's modified datetime. Type: string (or Expression with resultType string). */
    modifiedDatetimeEnd?: any;
}

/** Azure File Storage write settings. */
export declare interface AzureFileStorageWriteSettings extends StoreWriteSettings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureFileStorageWriteSettings";
}

/** Azure Function activity. */
export declare interface AzureFunctionActivity extends ExecutionActivity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureFunctionActivity";
    /** Rest API method for target endpoint. */
    method: AzureFunctionActivityMethod;
    /** Name of the Function that the Azure Function Activity will call. Type: string (or Expression with resultType string) */
    functionName: any;
    /** Represents the headers that will be sent to the request. For example, to set the language and type on a request: "headers" : { "Accept-Language": "en-us", "Content-Type": "application/json" }. Type: string (or Expression with resultType string). */
    headers?: any;
    /** Represents the payload that will be sent to the endpoint. Required for POST/PUT method, not allowed for GET method Type: string (or Expression with resultType string). */
    body?: any;
}

/**
 * Defines values for AzureFunctionActivityMethod. \
 * {@link KnownAzureFunctionActivityMethod} can be used interchangeably with AzureFunctionActivityMethod,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **GET** \
 * **POST** \
 * **PUT** \
 * **DELETE** \
 * **OPTIONS** \
 * **HEAD** \
 * **TRACE**
 */
export declare type AzureFunctionActivityMethod = string;

/** Azure Function linked service. */
export declare interface AzureFunctionLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureFunction";
    /** The endpoint of the Azure Function App. URL will be in the format https://<accountName>.azurewebsites.net. */
    functionAppUrl: any;
    /** Function or Host key for Azure Function App. */
    functionKey?: SecretBaseUnion;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
    /** The credential reference containing authentication information. */
    credential?: CredentialReference;
    /** Allowed token audiences for azure function. */
    resourceId?: any;
    /** Type of authentication (Required to specify MSI) used to connect to AzureFunction. Type: string (or Expression with resultType string). */
    authentication?: any;
}

/** Azure Key Vault linked service. */
export declare interface AzureKeyVaultLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureKeyVault";
    /** The base URL of the Azure Key Vault. e.g. https://myakv.vault.azure.net Type: string (or Expression with resultType string). */
    baseUrl: any;
    /** The credential reference containing authentication information. */
    credential?: CredentialReference;
}

/** Azure Key Vault secret reference. */
export declare interface AzureKeyVaultSecretReference extends SecretBase {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureKeyVaultSecret";
    /** The Azure Key Vault linked service reference. */
    store: LinkedServiceReference;
    /** The name of the secret in Azure Key Vault. Type: string (or Expression with resultType string). */
    secretName: any;
    /** The version of the secret in Azure Key Vault. The default value is the latest version of the secret. Type: string (or Expression with resultType string). */
    secretVersion?: any;
}

/** Azure Database for MariaDB linked service. */
export declare interface AzureMariaDBLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureMariaDB";
    /** An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference. */
    connectionString?: any;
    /** The Azure key vault secret reference of password in connection string. */
    pwd?: AzureKeyVaultSecretReference;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** A copy activity Azure MariaDB source. */
export declare interface AzureMariaDBSource extends TabularSource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureMariaDBSource";
    /** A query to retrieve data from source. Type: string (or Expression with resultType string). */
    query?: any;
}

/** Azure Database for MariaDB dataset. */
export declare interface AzureMariaDBTableDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureMariaDBTable";
    /** The table name. Type: string (or Expression with resultType string). */
    tableName?: any;
}

/** Azure ML Batch Execution activity. */
export declare interface AzureMLBatchExecutionActivity extends ExecutionActivity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureMLBatchExecution";
    /** Key,Value pairs to be passed to the Azure ML Batch Execution Service endpoint. Keys must match the names of web service parameters defined in the published Azure ML web service. Values will be passed in the GlobalParameters property of the Azure ML batch execution request. */
    globalParameters?: {
        [propertyName: string]: any;
    };
    /** Key,Value pairs, mapping the names of Azure ML endpoint's Web Service Outputs to AzureMLWebServiceFile objects specifying the output Blob locations. This information will be passed in the WebServiceOutputs property of the Azure ML batch execution request. */
    webServiceOutputs?: {
        [propertyName: string]: AzureMLWebServiceFile;
    };
    /** Key,Value pairs, mapping the names of Azure ML endpoint's Web Service Inputs to AzureMLWebServiceFile objects specifying the input Blob locations.. This information will be passed in the WebServiceInputs property of the Azure ML batch execution request. */
    webServiceInputs?: {
        [propertyName: string]: AzureMLWebServiceFile;
    };
}

/** Azure ML Execute Pipeline activity. */
export declare interface AzureMLExecutePipelineActivity extends ExecutionActivity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureMLExecutePipeline";
    /** ID of the published Azure ML pipeline. Type: string (or Expression with resultType string). */
    mlPipelineId?: any;
    /** ID of the published Azure ML pipeline endpoint. Type: string (or Expression with resultType string). */
    mlPipelineEndpointId?: any;
    /** Version of the published Azure ML pipeline endpoint. Type: string (or Expression with resultType string). */
    version?: any;
    /** Run history experiment name of the pipeline run. This information will be passed in the ExperimentName property of the published pipeline execution request. Type: string (or Expression with resultType string). */
    experimentName?: any;
    /** Key,Value pairs to be passed to the published Azure ML pipeline endpoint. Keys must match the names of pipeline parameters defined in the published pipeline. Values will be passed in the ParameterAssignments property of the published pipeline execution request. Type: object with key value pairs (or Expression with resultType object). */
    mlPipelineParameters?: any;
    /** Dictionary used for changing data path assignments without retraining. Values will be passed in the dataPathAssignments property of the published pipeline execution request. Type: object with key value pairs (or Expression with resultType object). */
    dataPathAssignments?: any;
    /** The parent Azure ML Service pipeline run id. This information will be passed in the ParentRunId property of the published pipeline execution request. Type: string (or Expression with resultType string). */
    mlParentRunId?: any;
    /** Whether to continue execution of other steps in the PipelineRun if a step fails. This information will be passed in the continueOnStepFailure property of the published pipeline execution request. Type: boolean (or Expression with resultType boolean). */
    continueOnStepFailure?: any;
}

/** Azure ML Studio Web Service linked service. */
export declare interface AzureMLLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureML";
    /** The Batch Execution REST URL for an Azure ML Studio Web Service endpoint. Type: string (or Expression with resultType string). */
    mlEndpoint: any;
    /** The API key for accessing the Azure ML model endpoint. */
    apiKey: SecretBaseUnion;
    /** The Update Resource REST URL for an Azure ML Studio Web Service endpoint. Type: string (or Expression with resultType string). */
    updateResourceEndpoint?: any;
    /** The ID of the service principal used to authenticate against the ARM-based updateResourceEndpoint of an Azure ML Studio web service. Type: string (or Expression with resultType string). */
    servicePrincipalId?: any;
    /** The key of the service principal used to authenticate against the ARM-based updateResourceEndpoint of an Azure ML Studio web service. */
    servicePrincipalKey?: SecretBaseUnion;
    /** The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string). */
    tenant?: any;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
    /** Type of authentication (Required to specify MSI) used to connect to AzureML. Type: string (or Expression with resultType string). */
    authentication?: any;
}

/** Azure ML Service linked service. */
export declare interface AzureMLServiceLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureMLService";
    /** Azure ML Service workspace subscription ID. Type: string (or Expression with resultType string). */
    subscriptionId: any;
    /** Azure ML Service workspace resource group name. Type: string (or Expression with resultType string). */
    resourceGroupName: any;
    /** Azure ML Service workspace name. Type: string (or Expression with resultType string). */
    mlWorkspaceName: any;
    /** Type of authentication (Required to specify MSI) used to connect to AzureML. Type: string (or Expression with resultType string). */
    authentication?: any;
    /** The ID of the service principal used to authenticate against the endpoint of a published Azure ML Service pipeline. Type: string (or Expression with resultType string). */
    servicePrincipalId?: any;
    /** The key of the service principal used to authenticate against the endpoint of a published Azure ML Service pipeline. */
    servicePrincipalKey?: SecretBaseUnion;
    /** The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string). */
    tenant?: any;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** Azure ML Update Resource management activity. */
export declare interface AzureMLUpdateResourceActivity extends ExecutionActivity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureMLUpdateResource";
    /** Name of the Trained Model module in the Web Service experiment to be updated. Type: string (or Expression with resultType string). */
    trainedModelName: any;
    /** Name of Azure Storage linked service holding the .ilearner file that will be uploaded by the update operation. */
    trainedModelLinkedServiceName: LinkedServiceReference;
    /** The relative file path in trainedModelLinkedService to represent the .ilearner file that will be uploaded by the update operation.  Type: string (or Expression with resultType string). */
    trainedModelFilePath: any;
}

/** Azure ML WebService Input/Output file */
export declare interface AzureMLWebServiceFile {
    /** The relative file path, including container name, in the Azure Blob Storage specified by the LinkedService. Type: string (or Expression with resultType string). */
    filePath: any;
    /** Reference to an Azure Storage LinkedService, where Azure ML WebService Input/Output file located. */
    linkedServiceName: LinkedServiceReference;
}

/** Azure MySQL database linked service. */
export declare interface AzureMySqlLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureMySql";
    /** The connection string. Type: string, SecureString or AzureKeyVaultSecretReference. */
    connectionString: any;
    /** The Azure key vault secret reference of password in connection string. */
    password?: AzureKeyVaultSecretReference;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** A copy activity Azure MySql sink. */
export declare interface AzureMySqlSink extends CopySink {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureMySqlSink";
    /** A query to execute before starting the copy. Type: string (or Expression with resultType string). */
    preCopyScript?: any;
}

/** A copy activity Azure MySQL source. */
export declare interface AzureMySqlSource extends TabularSource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureMySqlSource";
    /** Database query. Type: string (or Expression with resultType string). */
    query?: any;
}

/** The Azure MySQL database dataset. */
export declare interface AzureMySqlTableDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureMySqlTable";
    /** The Azure MySQL database table name. Type: string (or Expression with resultType string). */
    tableName?: any;
    /** The name of Azure MySQL database table. Type: string (or Expression with resultType string). */
    table?: any;
}

/** Azure PostgreSQL linked service. */
export declare interface AzurePostgreSqlLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzurePostgreSql";
    /** An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference. */
    connectionString?: any;
    /** The Azure key vault secret reference of password in connection string. */
    password?: AzureKeyVaultSecretReference;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** A copy activity Azure PostgreSQL sink. */
export declare interface AzurePostgreSqlSink extends CopySink {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzurePostgreSqlSink";
    /** A query to execute before starting the copy. Type: string (or Expression with resultType string). */
    preCopyScript?: any;
}

/** A copy activity Azure PostgreSQL source. */
export declare interface AzurePostgreSqlSource extends TabularSource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzurePostgreSqlSource";
    /** A query to retrieve data from source. Type: string (or Expression with resultType string). */
    query?: any;
}

/** Azure PostgreSQL dataset. */
export declare interface AzurePostgreSqlTableDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzurePostgreSqlTable";
    /** The table name of the Azure PostgreSQL database which includes both schema and table. Type: string (or Expression with resultType string). */
    tableName?: any;
    /** The table name of the Azure PostgreSQL database. Type: string (or Expression with resultType string). */
    table?: any;
    /** The schema name of the Azure PostgreSQL database. Type: string (or Expression with resultType string). */
    schemaTypePropertiesSchema?: any;
}

/** A copy activity Azure Queue sink. */
export declare interface AzureQueueSink extends CopySink {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureQueueSink";
}

/** The Azure Search Index. */
export declare interface AzureSearchIndexDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureSearchIndex";
    /** The name of the Azure Search Index. Type: string (or Expression with resultType string). */
    indexName: any;
}

/** A copy activity Azure Search Index sink. */
export declare interface AzureSearchIndexSink extends CopySink {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureSearchIndexSink";
    /** Specify the write behavior when upserting documents into Azure Search Index. */
    writeBehavior?: AzureSearchIndexWriteBehaviorType;
}

/**
 * Defines values for AzureSearchIndexWriteBehaviorType. \
 * {@link KnownAzureSearchIndexWriteBehaviorType} can be used interchangeably with AzureSearchIndexWriteBehaviorType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Merge** \
 * **Upload**
 */
export declare type AzureSearchIndexWriteBehaviorType = string;

/** Linked service for Windows Azure Search Service. */
export declare interface AzureSearchLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureSearch";
    /** URL for Azure Search service. Type: string (or Expression with resultType string). */
    url: any;
    /** Admin Key for Azure Search service */
    key?: SecretBaseUnion;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** Microsoft Azure SQL Database linked service. */
export declare interface AzureSqlDatabaseLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureSqlDatabase";
    /** The connection string. Type: string, SecureString or AzureKeyVaultSecretReference. */
    connectionString: any;
    /** The Azure key vault secret reference of password in connection string. */
    password?: AzureKeyVaultSecretReference;
    /** The ID of the service principal used to authenticate against Azure SQL Database. Type: string (or Expression with resultType string). */
    servicePrincipalId?: any;
    /** The key of the service principal used to authenticate against Azure SQL Database. */
    servicePrincipalKey?: SecretBaseUnion;
    /** The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string). */
    tenant?: any;
    /** Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string). */
    azureCloudType?: any;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
    /** Sql always encrypted properties. */
    alwaysEncryptedSettings?: SqlAlwaysEncryptedProperties;
    /** The credential reference containing authentication information. */
    credential?: CredentialReference;
}

/** Azure SQL Data Warehouse linked service. */
export declare interface AzureSqlDWLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureSqlDW";
    /** The connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference. */
    connectionString: any;
    /** The Azure key vault secret reference of password in connection string. */
    password?: AzureKeyVaultSecretReference;
    /** The ID of the service principal used to authenticate against Azure SQL Data Warehouse. Type: string (or Expression with resultType string). */
    servicePrincipalId?: any;
    /** The key of the service principal used to authenticate against Azure SQL Data Warehouse. */
    servicePrincipalKey?: SecretBaseUnion;
    /** The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string). */
    tenant?: any;
    /** Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string). */
    azureCloudType?: any;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
    /** The credential reference containing authentication information. */
    credential?: CredentialReference;
}

/** The Azure SQL Data Warehouse dataset. */
export declare interface AzureSqlDWTableDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureSqlDWTable";
    /** This property will be retired. Please consider using schema + table properties instead. */
    tableName?: any;
    /** The schema name of the Azure SQL Data Warehouse. Type: string (or Expression with resultType string). */
    schemaTypePropertiesSchema?: any;
    /** The table name of the Azure SQL Data Warehouse. Type: string (or Expression with resultType string). */
    table?: any;
}

/** Azure SQL Managed Instance linked service. */
export declare interface AzureSqlMILinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureSqlMI";
    /** The connection string. Type: string, SecureString or AzureKeyVaultSecretReference. */
    connectionString: any;
    /** The Azure key vault secret reference of password in connection string. */
    password?: AzureKeyVaultSecretReference;
    /** The ID of the service principal used to authenticate against Azure SQL Managed Instance. Type: string (or Expression with resultType string). */
    servicePrincipalId?: any;
    /** The key of the service principal used to authenticate against Azure SQL Managed Instance. */
    servicePrincipalKey?: SecretBaseUnion;
    /** The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string). */
    tenant?: any;
    /** Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string). */
    azureCloudType?: any;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
    /** Sql always encrypted properties. */
    alwaysEncryptedSettings?: SqlAlwaysEncryptedProperties;
    /** The credential reference containing authentication information. */
    credential?: CredentialReference;
}

/** The Azure SQL Managed Instance dataset. */
export declare interface AzureSqlMITableDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureSqlMITable";
    /** This property will be retired. Please consider using schema + table properties instead. */
    tableName?: any;
    /** The schema name of the Azure SQL Managed Instance. Type: string (or Expression with resultType string). */
    schemaTypePropertiesSchema?: any;
    /** The table name of the Azure SQL Managed Instance dataset. Type: string (or Expression with resultType string). */
    table?: any;
}

/** A copy activity Azure SQL sink. */
export declare interface AzureSqlSink extends CopySink {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureSqlSink";
    /** SQL writer stored procedure name. Type: string (or Expression with resultType string). */
    sqlWriterStoredProcedureName?: any;
    /** SQL writer table type. Type: string (or Expression with resultType string). */
    sqlWriterTableType?: any;
    /** SQL pre-copy script. Type: string (or Expression with resultType string). */
    preCopyScript?: any;
    /** SQL stored procedure parameters. */
    storedProcedureParameters?: any;
    /** The stored procedure parameter name of the table type. Type: string (or Expression with resultType string). */
    storedProcedureTableTypeParameterName?: any;
    /** The option to handle sink table, such as autoCreate. For now only 'autoCreate' value is supported. Type: string (or Expression with resultType string). */
    tableOption?: any;
    /** Whether to use table lock during bulk copy. Type: boolean (or Expression with resultType boolean). */
    sqlWriterUseTableLock?: any;
    /** Write behavior when copying data into Azure SQL. Type: SqlWriteBehaviorEnum (or Expression with resultType SqlWriteBehaviorEnum) */
    writeBehavior?: any;
    /** SQL upsert settings. */
    upsertSettings?: SqlUpsertSettings;
}

/** A copy activity Azure SQL source. */
export declare interface AzureSqlSource extends TabularSource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureSqlSource";
    /** SQL reader query. Type: string (or Expression with resultType string). */
    sqlReaderQuery?: any;
    /** Name of the stored procedure for a SQL Database source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string). */
    sqlReaderStoredProcedureName?: any;
    /** Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}". */
    storedProcedureParameters?: any;
    /** Specifies the transaction locking behavior for the SQL source. Allowed values: ReadCommitted/ReadUncommitted/RepeatableRead/Serializable/Snapshot. The default value is ReadCommitted. Type: string (or Expression with resultType string). */
    isolationLevel?: any;
    /** Which additional types to produce. */
    produceAdditionalTypes?: any;
    /** The partition mechanism that will be used for Sql read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange". */
    partitionOption?: any;
    /** The settings that will be leveraged for Sql source partitioning. */
    partitionSettings?: SqlPartitionSettings;
}

/** The Azure SQL Server database dataset. */
export declare interface AzureSqlTableDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureSqlTable";
    /** This property will be retired. Please consider using schema + table properties instead. */
    tableName?: any;
    /** The schema name of the Azure SQL database. Type: string (or Expression with resultType string). */
    schemaTypePropertiesSchema?: any;
    /** The table name of the Azure SQL database. Type: string (or Expression with resultType string). */
    table?: any;
}

/**
 * Defines values for AzureStorageAuthenticationType. \
 * {@link KnownAzureStorageAuthenticationType} can be used interchangeably with AzureStorageAuthenticationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Anonymous** \
 * **AccountKey** \
 * **SasUri** \
 * **ServicePrincipal** \
 * **Msi**
 */
export declare type AzureStorageAuthenticationType = string;

/** The storage account linked service. */
export declare interface AzureStorageLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureStorage";
    /** The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference. */
    connectionString?: any;
    /** The Azure key vault secret reference of accountKey in connection string. */
    accountKey?: AzureKeyVaultSecretReference;
    /** SAS URI of the Azure Storage resource. It is mutually exclusive with connectionString property. Type: string, SecureString or AzureKeyVaultSecretReference. */
    sasUri?: any;
    /** The Azure key vault secret reference of sasToken in sas uri. */
    sasToken?: AzureKeyVaultSecretReference;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** Azure Synapse Analytics (Artifacts) linked service. */
export declare interface AzureSynapseArtifactsLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureSynapseArtifacts";
    /** https://<workspacename>.dev.azuresynapse.net, Azure Synapse Analytics workspace URL. Type: string (or Expression with resultType string). */
    endpoint: any;
    /** Required to specify MSI, if using system assigned managed identity as authentication method. Type: string (or Expression with resultType string). */
    authentication?: any;
    /** The resource ID of the Synapse workspace. The format should be: /subscriptions/{subscriptionID}/resourceGroups/{resourceGroup}/providers/Microsoft.Synapse/workspaces/{workspaceName}. Type: string (or Expression with resultType string). */
    workspaceResourceId?: any;
}

/** The Azure Table storage dataset. */
export declare interface AzureTableDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureTable";
    /** The table name of the Azure Table storage. Type: string (or Expression with resultType string). */
    tableName: any;
}

/** A copy activity Azure Table sink. */
export declare interface AzureTableSink extends CopySink {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureTableSink";
    /** Azure Table default partition key value. Type: string (or Expression with resultType string). */
    azureTableDefaultPartitionKeyValue?: any;
    /** Azure Table partition key name. Type: string (or Expression with resultType string). */
    azureTablePartitionKeyName?: any;
    /** Azure Table row key name. Type: string (or Expression with resultType string). */
    azureTableRowKeyName?: any;
    /** Azure Table insert type. Type: string (or Expression with resultType string). */
    azureTableInsertType?: any;
}

/** A copy activity Azure Table source. */
export declare interface AzureTableSource extends TabularSource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureTableSource";
    /** Azure Table source query. Type: string (or Expression with resultType string). */
    azureTableSourceQuery?: any;
    /** Azure Table source ignore table not found. Type: boolean (or Expression with resultType boolean). */
    azureTableSourceIgnoreTableNotFound?: any;
}

/** The azure table storage linked service. */
export declare interface AzureTableStorageLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureTableStorage";
    /** The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference. */
    connectionString?: any;
    /** The Azure key vault secret reference of accountKey in connection string. */
    accountKey?: AzureKeyVaultSecretReference;
    /** SAS URI of the Azure Storage resource. It is mutually exclusive with connectionString property. Type: string, SecureString or AzureKeyVaultSecretReference. */
    sasUri?: any;
    /** The Azure key vault secret reference of sasToken in sas uri. */
    sasToken?: AzureKeyVaultSecretReference;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** Big data pool reference type. */
export declare interface BigDataPoolParametrizationReference {
    /** Big data pool reference type. */
    type: BigDataPoolReferenceType;
    /** Reference big data pool name. Type: string (or Expression with resultType string). */
    referenceName: any;
}

/**
 * Defines values for BigDataPoolReferenceType. \
 * {@link KnownBigDataPoolReferenceType} can be used interchangeably with BigDataPoolReferenceType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **BigDataPoolReference**
 */
export declare type BigDataPoolReferenceType = string;

/** Binary dataset. */
export declare interface BinaryDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Binary";
    /** The location of the Binary storage. */
    location?: DatasetLocationUnion;
    /** The data compression method used for the binary dataset. */
    compression?: DatasetCompression;
}

/** Binary read settings. */
export declare interface BinaryReadSettings extends FormatReadSettings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "BinaryReadSettings";
    /** Compression settings. */
    compressionProperties?: CompressionReadSettingsUnion;
}

/** A copy activity Binary sink. */
export declare interface BinarySink extends CopySink {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "BinarySink";
    /** Binary store settings. */
    storeSettings?: StoreWriteSettingsUnion;
}

/** A copy activity Binary source. */
export declare interface BinarySource extends CopySource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "BinarySource";
    /** Binary store settings. */
    storeSettings?: StoreReadSettingsUnion;
    /** Binary format settings. */
    formatSettings?: BinaryReadSettings;
}

/** Trigger that runs every time a Blob event occurs. */
export declare interface BlobEventsTrigger extends MultiplePipelineTrigger {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "BlobEventsTrigger";
    /** The blob path must begin with the pattern provided for trigger to fire. For example, '/records/blobs/december/' will only fire the trigger for blobs in the december folder under the records container. At least one of these must be provided: blobPathBeginsWith, blobPathEndsWith. */
    blobPathBeginsWith?: string;
    /** The blob path must end with the pattern provided for trigger to fire. For example, 'december/boxes.csv' will only fire the trigger for blobs named boxes in a december folder. At least one of these must be provided: blobPathBeginsWith, blobPathEndsWith. */
    blobPathEndsWith?: string;
    /** If set to true, blobs with zero bytes will be ignored. */
    ignoreEmptyBlobs?: boolean;
    /** The type of events that cause this trigger to fire. */
    events: BlobEventTypes[];
    /** The ARM resource ID of the Storage Account. */
    scope: string;
}

/**
 * Defines values for BlobEventTypes. \
 * {@link KnownBlobEventTypes} can be used interchangeably with BlobEventTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Microsoft.Storage.BlobCreated** \
 * **Microsoft.Storage.BlobDeleted**
 */
export declare type BlobEventTypes = string;

/** A copy activity Azure Blob sink. */
export declare interface BlobSink extends CopySink {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "BlobSink";
    /** Blob writer overwrite files. Type: boolean (or Expression with resultType boolean). */
    blobWriterOverwriteFiles?: any;
    /** Blob writer date time format. Type: string (or Expression with resultType string). */
    blobWriterDateTimeFormat?: any;
    /** Blob writer add header. Type: boolean (or Expression with resultType boolean). */
    blobWriterAddHeader?: any;
    /** The type of copy behavior for copy sink. */
    copyBehavior?: any;
    /** Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects). */
    metadata?: MetadataItem[];
}

/** A copy activity Azure Blob source. */
export declare interface BlobSource extends CopySource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "BlobSource";
    /** Treat empty as null. Type: boolean (or Expression with resultType boolean). */
    treatEmptyAsNull?: any;
    /** Number of header lines to skip from each blob. Type: integer (or Expression with resultType integer). */
    skipHeaderLineCount?: any;
    /** If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean). */
    recursive?: any;
}

/** Trigger that runs every time the selected Blob container changes. */
export declare interface BlobTrigger extends MultiplePipelineTrigger {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "BlobTrigger";
    /** The path of the container/folder that will trigger the pipeline. */
    folderPath: string;
    /** The max number of parallel files to handle when it is triggered. */
    maxConcurrency: number;
    /** The Azure Storage linked service reference. */
    linkedService: LinkedServiceReference;
}

/** Linked service for Cassandra data source. */
export declare interface CassandraLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Cassandra";
    /** Host name for connection. Type: string (or Expression with resultType string). */
    host: any;
    /** AuthenticationType to be used for connection. Type: string (or Expression with resultType string). */
    authenticationType?: any;
    /** The port for the connection. Type: integer (or Expression with resultType integer). */
    port?: any;
    /** Username for authentication. Type: string (or Expression with resultType string). */
    username?: any;
    /** Password for authentication. */
    password?: SecretBaseUnion;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** A copy activity source for a Cassandra database. */
export declare interface CassandraSource extends TabularSource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "CassandraSource";
    /** Database query. Should be a SQL-92 query expression or Cassandra Query Language (CQL) command. Type: string (or Expression with resultType string). */
    query?: any;
    /** The consistency level specifies how many Cassandra servers must respond to a read request before returning data to the client application. Cassandra checks the specified number of Cassandra servers for data to satisfy the read request. Must be one of cassandraSourceReadConsistencyLevels. The default value is 'ONE'. It is case-insensitive. */
    consistencyLevel?: CassandraSourceReadConsistencyLevels;
}

/**
 * Defines values for CassandraSourceReadConsistencyLevels. \
 * {@link KnownCassandraSourceReadConsistencyLevels} can be used interchangeably with CassandraSourceReadConsistencyLevels,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ALL** \
 * **EACH_QUORUM** \
 * **QUORUM** \
 * **LOCAL_QUORUM** \
 * **ONE** \
 * **TWO** \
 * **THREE** \
 * **LOCAL_ONE** \
 * **SERIAL** \
 * **LOCAL_SERIAL**
 */
export declare type CassandraSourceReadConsistencyLevels = string;

/** The Cassandra database dataset. */
export declare interface CassandraTableDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "CassandraTable";
    /** The table name of the Cassandra database. Type: string (or Expression with resultType string). */
    tableName?: any;
    /** The keyspace of the Cassandra database. Type: string (or Expression with resultType string). */
    keyspace?: any;
}

/** Trigger that allows the referenced pipeline to depend on other pipeline runs based on runDimension Name/Value pairs. Upstream pipelines should declare the same runDimension Name and their runs should have the values for those runDimensions. The referenced pipeline run would be triggered if the values for the runDimension match for all upstream pipeline runs. */
export declare interface ChainingTrigger extends Trigger {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "ChainingTrigger";
    /** Pipeline for which runs are created when all upstream pipelines complete successfully. */
    pipeline: TriggerPipelineReference;
    /** Upstream Pipelines. */
    dependsOn: PipelineReference[];
    /** Run Dimension property that needs to be emitted by upstream pipelines. */
    runDimension: string;
}

/** Interface representing a ChangeDataCapture. */
export declare interface ChangeDataCapture {
    /**
     * Lists all resources of type change data capture.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param options The options parameters.
     */
    listByFactory(resourceGroupName: string, factoryName: string, options?: ChangeDataCaptureListByFactoryOptionalParams): PagedAsyncIterableIterator<ChangeDataCaptureResource>;
    /**
     * Creates or updates a change data capture resource.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param changeDataCaptureName The change data capture name.
     * @param changeDataCapture Change data capture resource definition.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, factoryName: string, changeDataCaptureName: string, changeDataCapture: ChangeDataCaptureResource, options?: ChangeDataCaptureCreateOrUpdateOptionalParams): Promise<ChangeDataCaptureCreateOrUpdateResponse>;
    /**
     * Gets a change data capture.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param changeDataCaptureName The change data capture name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, factoryName: string, changeDataCaptureName: string, options?: ChangeDataCaptureGetOptionalParams): Promise<ChangeDataCaptureGetResponse>;
    /**
     * Deletes a change data capture.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param changeDataCaptureName The change data capture name.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, factoryName: string, changeDataCaptureName: string, options?: ChangeDataCaptureDeleteOptionalParams): Promise<void>;
    /**
     * Starts a change data capture.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param changeDataCaptureName The change data capture name.
     * @param options The options parameters.
     */
    start(resourceGroupName: string, factoryName: string, changeDataCaptureName: string, options?: ChangeDataCaptureStartOptionalParams): Promise<void>;
    /**
     * Stops a change data capture.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param changeDataCaptureName The change data capture name.
     * @param options The options parameters.
     */
    stop(resourceGroupName: string, factoryName: string, changeDataCaptureName: string, options?: ChangeDataCaptureStopOptionalParams): Promise<void>;
    /**
     * Gets the current status for the change data capture resource.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param changeDataCaptureName The change data capture name.
     * @param options The options parameters.
     */
    status(resourceGroupName: string, factoryName: string, changeDataCaptureName: string, options?: ChangeDataCaptureStatusOptionalParams): Promise<ChangeDataCaptureStatusResponse>;
}

/** Optional parameters. */
export declare interface ChangeDataCaptureCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** ETag of the change data capture entity. Should only be specified for update, for which it should match existing entity or can be * for unconditional update. */
    ifMatch?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type ChangeDataCaptureCreateOrUpdateResponse = ChangeDataCaptureResource;

/** Optional parameters. */
export declare interface ChangeDataCaptureDeleteOptionalParams extends coreClient.OperationOptions {
}

/** The folder that this CDC is in. If not specified, CDC will appear at the root level. */
export declare interface ChangeDataCaptureFolder {
    /** The name of the folder that this CDC is in. */
    name?: string;
}

/** Optional parameters. */
export declare interface ChangeDataCaptureGetOptionalParams extends coreClient.OperationOptions {
    /** ETag of the change data capture entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. */
    ifNoneMatch?: string;
}

/** Contains response data for the get operation. */
export declare type ChangeDataCaptureGetResponse = ChangeDataCaptureResource;

/** Optional parameters. */
export declare interface ChangeDataCaptureListByFactoryNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByFactoryNext operation. */
export declare type ChangeDataCaptureListByFactoryNextResponse = ChangeDataCaptureListResponse;

/** Optional parameters. */
export declare interface ChangeDataCaptureListByFactoryOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByFactory operation. */
export declare type ChangeDataCaptureListByFactoryResponse = ChangeDataCaptureListResponse;

/** A list of change data capture resources. */
export declare interface ChangeDataCaptureListResponse {
    /** Lists all resources of type change data capture. */
    value: ChangeDataCaptureResource[];
    /** The link to the next page of results, if any remaining results exist. */
    nextLink?: string;
}

/** Change data capture resource type. */
export declare interface ChangeDataCaptureResource extends SubResource {
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /** The folder that this CDC is in. If not specified, CDC will appear at the root level. */
    folder?: ChangeDataCaptureFolder;
    /** The description of the change data capture. */
    description?: string;
    /** List of sources connections that can be used as sources in the CDC. */
    sourceConnectionsInfo: MapperSourceConnectionsInfo[];
    /** List of target connections that can be used as sources in the CDC. */
    targetConnectionsInfo: MapperTargetConnectionsInfo[];
    /** CDC policy */
    policy: MapperPolicy;
    /** A boolean to determine if the vnet configuration needs to be overwritten. */
    allowVNetOverride?: boolean;
    /** Status of the CDC as to if it is running or stopped. */
    status?: string;
}

/** Optional parameters. */
export declare interface ChangeDataCaptureStartOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface ChangeDataCaptureStatusOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the status operation. */
export declare type ChangeDataCaptureStatusResponse = {
    /** The parsed response body. */
    body: string;
};

/** Optional parameters. */
export declare interface ChangeDataCaptureStopOptionalParams extends coreClient.OperationOptions {
}

/** The object that defines the structure of an Azure Data Factory error response. */
export declare interface CloudError {
    /** Error code. */
    code: string;
    /** Error message. */
    message: string;
    /** Property name/path in request associated with error. */
    target?: string;
    /** Array with additional error details. */
    details?: CloudError[];
}

/** The custom setup of running cmdkey commands. */
export declare interface CmdkeySetup extends CustomSetupBase {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "CmdkeySetup";
    /** The server name of data source access. */
    targetName: any;
    /** The user name of data source access. */
    userName: any;
    /** The password of data source access. */
    password: SecretBaseUnion;
}

/** Managed Identity used for CMK. */
export declare interface CMKIdentityDefinition {
    /** The resource id of the user assigned identity to authenticate to customer's key vault. */
    userAssignedIdentity?: string;
}

/** The Common Data Service for Apps entity dataset. */
export declare interface CommonDataServiceForAppsEntityDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "CommonDataServiceForAppsEntity";
    /** The logical name of the entity. Type: string (or Expression with resultType string). */
    entityName?: any;
}

/** Common Data Service for Apps linked service. */
export declare interface CommonDataServiceForAppsLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "CommonDataServiceForApps";
    /** The deployment type of the Common Data Service for Apps instance. 'Online' for Common Data Service for Apps Online and 'OnPremisesWithIfd' for Common Data Service for Apps on-premises with Ifd. Type: string (or Expression with resultType string). */
    deploymentType: any;
    /** The host name of the on-premises Common Data Service for Apps server. The property is required for on-prem and not allowed for online. Type: string (or Expression with resultType string). */
    hostName?: any;
    /** The port of on-premises Common Data Service for Apps server. The property is required for on-prem and not allowed for online. Default is 443. Type: integer (or Expression with resultType integer), minimum: 0. */
    port?: any;
    /** The URL to the Microsoft Common Data Service for Apps server. The property is required for on-line and not allowed for on-prem. Type: string (or Expression with resultType string). */
    serviceUri?: any;
    /** The organization name of the Common Data Service for Apps instance. The property is required for on-prem and required for online when there are more than one Common Data Service for Apps instances associated with the user. Type: string (or Expression with resultType string). */
    organizationName?: any;
    /** The authentication type to connect to Common Data Service for Apps server. 'Office365' for online scenario, 'Ifd' for on-premises with Ifd scenario. 'AADServicePrincipal' for Server-To-Server authentication in online scenario. Type: string (or Expression with resultType string). */
    authenticationType: any;
    /** User name to access the Common Data Service for Apps instance. Type: string (or Expression with resultType string). */
    username?: any;
    /** Password to access the Common Data Service for Apps instance. */
    password?: SecretBaseUnion;
    /** The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string). */
    servicePrincipalId?: any;
    /** The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string). */
    servicePrincipalCredentialType?: any;
    /** The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference. */
    servicePrincipalCredential?: SecretBaseUnion;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** A copy activity Common Data Service for Apps sink. */
export declare interface CommonDataServiceForAppsSink extends CopySink {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "CommonDataServiceForAppsSink";
    /** The write behavior for the operation. */
    writeBehavior: DynamicsSinkWriteBehavior;
    /** The flag indicating whether to ignore null values from input dataset (except key fields) during write operation. Default is false. Type: boolean (or Expression with resultType boolean). */
    ignoreNullValues?: any;
    /** The logical name of the alternate key which will be used when upserting records. Type: string (or Expression with resultType string). */
    alternateKeyName?: any;
}

/** A copy activity Common Data Service for Apps source. */
export declare interface CommonDataServiceForAppsSource extends CopySource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "CommonDataServiceForAppsSource";
    /** FetchXML is a proprietary query language that is used in Microsoft Common Data Service for Apps (online & on-premises). Type: string (or Expression with resultType string). */
    query?: any;
    /** Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). */
    additionalColumns?: any;
}

/** The custom setup of installing 3rd party components. */
export declare interface ComponentSetup extends CustomSetupBase {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "ComponentSetup";
    /** The name of the 3rd party component. */
    componentName: string;
    /** The license key to activate the component. */
    licenseKey?: SecretBaseUnion;
}

/**
 * Defines values for CompressionCodec. \
 * {@link KnownCompressionCodec} can be used interchangeably with CompressionCodec,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **none** \
 * **lzo** \
 * **bzip2** \
 * **gzip** \
 * **deflate** \
 * **zipDeflate** \
 * **snappy** \
 * **lz4** \
 * **tar** \
 * **tarGZip**
 */
export declare type CompressionCodec = string;

/** Compression read settings. */
export declare interface CompressionReadSettings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "ZipDeflateReadSettings" | "TarReadSettings" | "TarGZipReadSettings";
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
}

export declare type CompressionReadSettingsUnion = CompressionReadSettings | ZipDeflateReadSettings | TarReadSettings | TarGZipReadSettings;

/** Concur Service linked service. */
export declare interface ConcurLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Concur";
    /** Properties used to connect to Concur. It is mutually exclusive with any other properties in the linked service. Type: object. */
    connectionProperties?: any;
    /** Application client_id supplied by Concur App Management. */
    clientId: any;
    /** The user name that you use to access Concur Service. */
    username: any;
    /** The password corresponding to the user name that you provided in the username field. */
    password?: SecretBaseUnion;
    /** Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. */
    useEncryptedEndpoints?: any;
    /** Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. */
    useHostVerification?: any;
    /** Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. */
    usePeerVerification?: any;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** Concur Service dataset. */
export declare interface ConcurObjectDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "ConcurObject";
    /** The table name. Type: string (or Expression with resultType string). */
    tableName?: any;
}

/** A copy activity Concur Service source. */
export declare interface ConcurSource extends TabularSource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "ConcurSource";
    /** A query to retrieve data from source. Type: string (or Expression with resultType string). */
    query?: any;
}

/**
 * Defines values for ConfigurationType. \
 * {@link KnownConfigurationType} can be used interchangeably with ConfigurationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Default** \
 * **Customized** \
 * **Artifact**
 */
export declare type ConfigurationType = string;

/** The connection state of a managed private endpoint */
export declare interface ConnectionStateProperties {
    /**
     * The actions required on the managed private endpoint
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly actionsRequired?: string;
    /**
     * The managed private endpoint description
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly description?: string;
    /**
     * The approval status
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: string;
}

/**
 * Defines values for ConnectionType. \
 * {@link KnownConnectionType} can be used interchangeably with ConnectionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **linkedservicetype**
 */
export declare type ConnectionType = string;

/** Base class for all control activities like IfCondition, ForEach , Until. */
export declare interface ControlActivity extends Activity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Container" | "ExecutePipeline" | "IfCondition" | "Switch" | "ForEach" | "Wait" | "Fail" | "Until" | "Validation" | "Filter" | "SetVariable" | "AppendVariable" | "WebHook";
}

export declare type ControlActivityUnion = ControlActivity | ExecutePipelineActivity | IfConditionActivity | SwitchActivity | ForEachActivity | WaitActivity | FailActivity | UntilActivity | ValidationActivity | FilterActivity | SetVariableActivity | AppendVariableActivity | WebHookActivity;

/** Copy activity. */
export declare interface CopyActivity extends ExecutionActivity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Copy";
    /** List of inputs for the activity. */
    inputs?: DatasetReference[];
    /** List of outputs for the activity. */
    outputs?: DatasetReference[];
    /** Copy activity source. */
    source: CopySourceUnion;
    /** Copy activity sink. */
    sink: CopySinkUnion;
    /** Copy activity translator. If not specified, tabular translator is used. */
    translator?: any;
    /** Specifies whether to copy data via an interim staging. Default value is false. Type: boolean (or Expression with resultType boolean). */
    enableStaging?: any;
    /** Specifies interim staging settings when EnableStaging is true. */
    stagingSettings?: StagingSettings;
    /** Maximum number of concurrent sessions opened on the source or sink to avoid overloading the data store. Type: integer (or Expression with resultType integer), minimum: 0. */
    parallelCopies?: any;
    /** Maximum number of data integration units that can be used to perform this data movement. Type: integer (or Expression with resultType integer), minimum: 0. */
    dataIntegrationUnits?: any;
    /** Whether to skip incompatible row. Default value is false. Type: boolean (or Expression with resultType boolean). */
    enableSkipIncompatibleRow?: any;
    /** Redirect incompatible row settings when EnableSkipIncompatibleRow is true. */
    redirectIncompatibleRowSettings?: RedirectIncompatibleRowSettings;
    /** (Deprecated. Please use LogSettings) Log storage settings customer need to provide when enabling session log. */
    logStorageSettings?: LogStorageSettings;
    /** Log settings customer needs provide when enabling log. */
    logSettings?: LogSettings;
    /** Preserve Rules. */
    preserveRules?: any[];
    /** Preserve rules. */
    preserve?: any[];
    /** Whether to enable Data Consistency validation. Type: boolean (or Expression with resultType boolean). */
    validateDataConsistency?: any;
    /** Specify the fault tolerance for data consistency. */
    skipErrorFile?: SkipErrorFile;
}

/** Settings for copy activity log. */
export declare interface CopyActivityLogSettings {
    /** Gets or sets the log level, support: Info, Warning. Type: string (or Expression with resultType string). */
    logLevel?: any;
    /** Specifies whether to enable reliable logging. Type: boolean (or Expression with resultType boolean). */
    enableReliableLogging?: any;
}

/**
 * Defines values for CopyBehaviorType. \
 * {@link KnownCopyBehaviorType} can be used interchangeably with CopyBehaviorType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **PreserveHierarchy** \
 * **FlattenHierarchy** \
 * **MergeFiles**
 */
export declare type CopyBehaviorType = string;

/** CopyComputeScale properties for managed integration runtime. */
export declare interface CopyComputeScaleProperties {
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /** DIU number setting reserved for copy activity execution. Supported values are multiples of 4 in range 4-256. */
    dataIntegrationUnit?: number;
    /** Time to live (in minutes) setting of integration runtime which will execute copy activity. */
    timeToLive?: number;
}

/** A copy activity sink. */
export declare interface CopySink {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "DelimitedTextSink" | "JsonSink" | "OrcSink" | "RestSink" | "AzurePostgreSqlSink" | "AzureMySqlSink" | "AzureDatabricksDeltaLakeSink" | "SapCloudForCustomerSink" | "AzureQueueSink" | "AzureTableSink" | "AvroSink" | "ParquetSink" | "BinarySink" | "BlobSink" | "FileSystemSink" | "DocumentDbCollectionSink" | "CosmosDbSqlApiSink" | "SqlSink" | "SqlServerSink" | "AzureSqlSink" | "SqlMISink" | "SqlDWSink" | "SnowflakeSink" | "OracleSink" | "AzureDataLakeStoreSink" | "AzureBlobFSSink" | "AzureSearchIndexSink" | "OdbcSink" | "InformixSink" | "MicrosoftAccessSink" | "DynamicsSink" | "DynamicsCrmSink" | "CommonDataServiceForAppsSink" | "AzureDataExplorerSink" | "SalesforceSink" | "SalesforceServiceCloudSink" | "MongoDbAtlasSink" | "MongoDbV2Sink" | "CosmosDbMongoDbApiSink" | "LakeHouseTableSink";
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /** Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. */
    writeBatchSize?: any;
    /** Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). */
    writeBatchTimeout?: any;
    /** Sink retry count. Type: integer (or Expression with resultType integer). */
    sinkRetryCount?: any;
    /** Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). */
    sinkRetryWait?: any;
    /** The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). */
    maxConcurrentConnections?: any;
    /** If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). */
    disableMetricsCollection?: any;
}

export declare type CopySinkUnion = CopySink | DelimitedTextSink | JsonSink | OrcSink | RestSink | AzurePostgreSqlSink | AzureMySqlSink | AzureDatabricksDeltaLakeSink | SapCloudForCustomerSink | AzureQueueSink | AzureTableSink | AvroSink | ParquetSink | BinarySink | BlobSink | FileSystemSink | DocumentDbCollectionSink | CosmosDbSqlApiSink | SqlSink | SqlServerSink | AzureSqlSink | SqlMISink | SqlDWSink | SnowflakeSink | OracleSink | AzureDataLakeStoreSink | AzureBlobFSSink | AzureSearchIndexSink | OdbcSink | InformixSink | MicrosoftAccessSink | DynamicsSink | DynamicsCrmSink | CommonDataServiceForAppsSink | AzureDataExplorerSink | SalesforceSink | SalesforceServiceCloudSink | MongoDbAtlasSink | MongoDbV2Sink | CosmosDbMongoDbApiSink | LakeHouseTableSink;

/** A copy activity source. */
export declare interface CopySource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AvroSource" | "ExcelSource" | "ParquetSource" | "DelimitedTextSource" | "JsonSource" | "XmlSource" | "OrcSource" | "BinarySource" | "TabularSource" | "AzureTableSource" | "BlobSource" | "DocumentDbCollectionSource" | "CosmosDbSqlApiSource" | "DynamicsSource" | "DynamicsCrmSource" | "CommonDataServiceForAppsSource" | "RelationalSource" | "InformixSource" | "MicrosoftAccessSource" | "Db2Source" | "OdbcSource" | "MySqlSource" | "PostgreSqlSource" | "SybaseSource" | "SapBwSource" | "ODataSource" | "SalesforceSource" | "SalesforceServiceCloudSource" | "SapCloudForCustomerSource" | "SapEccSource" | "SapHanaSource" | "SapOpenHubSource" | "SapOdpSource" | "SapTableSource" | "RestSource" | "SqlSource" | "SqlServerSource" | "AmazonRdsForSqlServerSource" | "AzureSqlSource" | "SqlMISource" | "SqlDWSource" | "FileSystemSource" | "HdfsSource" | "AzureMySqlSource" | "AzureDataExplorerSource" | "OracleSource" | "AmazonRdsForOracleSource" | "TeradataSource" | "WebSource" | "CassandraSource" | "MongoDbSource" | "MongoDbAtlasSource" | "MongoDbV2Source" | "CosmosDbMongoDbApiSource" | "Office365Source" | "AzureDataLakeStoreSource" | "AzureBlobFSSource" | "HttpSource" | "AmazonMWSSource" | "AzurePostgreSqlSource" | "ConcurSource" | "CouchbaseSource" | "DrillSource" | "EloquaSource" | "GoogleBigQuerySource" | "GreenplumSource" | "HBaseSource" | "HiveSource" | "HubspotSource" | "ImpalaSource" | "JiraSource" | "MagentoSource" | "MariaDBSource" | "AzureMariaDBSource" | "MarketoSource" | "PaypalSource" | "PhoenixSource" | "PrestoSource" | "QuickBooksSource" | "ServiceNowSource" | "ShopifySource" | "SparkSource" | "SquareSource" | "XeroSource" | "ZohoSource" | "NetezzaSource" | "VerticaSource" | "SalesforceMarketingCloudSource" | "ResponsysSource" | "DynamicsAXSource" | "OracleServiceCloudSource" | "GoogleAdWordsSource" | "AmazonRedshiftSource" | "LakeHouseTableSource" | "SnowflakeSource" | "AzureDatabricksDeltaLakeSource" | "SharePointOnlineListSource";
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /** Source retry count. Type: integer (or Expression with resultType integer). */
    sourceRetryCount?: any;
    /** Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). */
    sourceRetryWait?: any;
    /** The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). */
    maxConcurrentConnections?: any;
    /** If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). */
    disableMetricsCollection?: any;
}

export declare type CopySourceUnion = CopySource | AvroSource | ExcelSource | ParquetSource | DelimitedTextSource | JsonSource | XmlSource | OrcSource | BinarySource | TabularSourceUnion | BlobSource | DocumentDbCollectionSource | CosmosDbSqlApiSource | DynamicsSource | DynamicsCrmSource | CommonDataServiceForAppsSource | RelationalSource | MicrosoftAccessSource | ODataSource | SalesforceServiceCloudSource | RestSource | FileSystemSource | HdfsSource | AzureDataExplorerSource | OracleSource | AmazonRdsForOracleSource | WebSource | MongoDbSource | MongoDbAtlasSource | MongoDbV2Source | CosmosDbMongoDbApiSource | Office365Source | AzureDataLakeStoreSource | AzureBlobFSSource | HttpSource | LakeHouseTableSource | SnowflakeSource | AzureDatabricksDeltaLakeSource | SharePointOnlineListSource;

/** A copy activity translator. */
export declare interface CopyTranslator {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "TabularTranslator";
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
}

export declare type CopyTranslatorUnion = CopyTranslator | TabularTranslator;

/**
 * Defines values for CosmosDbConnectionMode. \
 * {@link KnownCosmosDbConnectionMode} can be used interchangeably with CosmosDbConnectionMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Gateway** \
 * **Direct**
 */
export declare type CosmosDbConnectionMode = string;

/** Microsoft Azure Cosmos Database (CosmosDB) linked service. */
export declare interface CosmosDbLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "CosmosDb";
    /** The connection string. Type: string, SecureString or AzureKeyVaultSecretReference. */
    connectionString?: any;
    /** The endpoint of the Azure CosmosDB account. Type: string (or Expression with resultType string) */
    accountEndpoint?: any;
    /** The name of the database. Type: string (or Expression with resultType string) */
    database?: any;
    /** The account key of the Azure CosmosDB account. Type: SecureString or AzureKeyVaultSecretReference. */
    accountKey?: SecretBaseUnion;
    /** The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string). */
    servicePrincipalId?: any;
    /** The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string. */
    servicePrincipalCredentialType?: any;
    /** The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference. */
    servicePrincipalCredential?: SecretBaseUnion;
    /** The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string). */
    tenant?: any;
    /** Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string). */
    azureCloudType?: any;
    /** The connection mode used to access CosmosDB account. Type: string. */
    connectionMode?: CosmosDbConnectionMode;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
    /** The credential reference containing authentication information. */
    credential?: CredentialReference;
}

/** The CosmosDB (MongoDB API) database dataset. */
export declare interface CosmosDbMongoDbApiCollectionDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "CosmosDbMongoDbApiCollection";
    /** The collection name of the CosmosDB (MongoDB API) database. Type: string (or Expression with resultType string). */
    collection: any;
}

/** Linked service for CosmosDB (MongoDB API) data source. */
export declare interface CosmosDbMongoDbApiLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "CosmosDbMongoDbApi";
    /** Whether the CosmosDB (MongoDB API) server version is higher than 3.2. The default value is false. Type: boolean (or Expression with resultType boolean). */
    isServerVersionAbove32?: any;
    /** The CosmosDB (MongoDB API) connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference. */
    connectionString: any;
    /** The name of the CosmosDB (MongoDB API) database that you want to access. Type: string (or Expression with resultType string). */
    database: any;
}

/** A copy activity sink for a CosmosDB (MongoDB API) database. */
export declare interface CosmosDbMongoDbApiSink extends CopySink {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "CosmosDbMongoDbApiSink";
    /** Specifies whether the document with same key to be overwritten (upsert) rather than throw exception (insert). The default value is "insert". Type: string (or Expression with resultType string). Type: string (or Expression with resultType string). */
    writeBehavior?: any;
}

/** A copy activity source for a CosmosDB (MongoDB API) database. */
export declare interface CosmosDbMongoDbApiSource extends CopySource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "CosmosDbMongoDbApiSource";
    /** Specifies selection filter using query operators. To return all documents in a collection, omit this parameter or pass an empty document ({}). Type: string (or Expression with resultType string). */
    filter?: any;
    /** Cursor methods for Mongodb query. */
    cursorMethods?: MongoDbCursorMethodsProperties;
    /** Specifies the number of documents to return in each batch of the response from MongoDB instance. In most cases, modifying the batch size will not affect the user or the application. This property's main purpose is to avoid hit the limitation of response size. Type: integer (or Expression with resultType integer). */
    batchSize?: any;
    /** Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). */
    queryTimeout?: any;
    /** Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). */
    additionalColumns?: any;
}

/** Microsoft Azure CosmosDB (SQL API) Collection dataset. */
export declare interface CosmosDbSqlApiCollectionDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "CosmosDbSqlApiCollection";
    /** CosmosDB (SQL API) collection name. Type: string (or Expression with resultType string). */
    collectionName: any;
}

/** A copy activity Azure CosmosDB (SQL API) Collection sink. */
export declare interface CosmosDbSqlApiSink extends CopySink {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "CosmosDbSqlApiSink";
    /** Describes how to write data to Azure Cosmos DB. Type: string (or Expression with resultType string). Allowed values: insert and upsert. */
    writeBehavior?: any;
}

/** A copy activity Azure CosmosDB (SQL API) Collection source. */
export declare interface CosmosDbSqlApiSource extends CopySource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "CosmosDbSqlApiSource";
    /** SQL API query. Type: string (or Expression with resultType string). */
    query?: any;
    /** Page size of the result. Type: integer (or Expression with resultType integer). */
    pageSize?: any;
    /** Preferred regions. Type: array of strings (or Expression with resultType array of strings). */
    preferredRegions?: any;
    /** Whether detect primitive values as datetime values. Type: boolean (or Expression with resultType boolean). */
    detectDatetime?: any;
    /** Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). */
    additionalColumns?: any;
}

/** Couchbase server linked service. */
export declare interface CouchbaseLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Couchbase";
    /** An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference. */
    connectionString?: any;
    /** The Azure key vault secret reference of credString in connection string. */
    credString?: AzureKeyVaultSecretReference;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** A copy activity Couchbase server source. */
export declare interface CouchbaseSource extends TabularSource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "CouchbaseSource";
    /** A query to retrieve data from source. Type: string (or Expression with resultType string). */
    query?: any;
}

/** Couchbase server dataset. */
export declare interface CouchbaseTableDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "CouchbaseTable";
    /** The table name. Type: string (or Expression with resultType string). */
    tableName?: any;
}

/** Request body structure for creating data flow debug session. */
export declare interface CreateDataFlowDebugSessionRequest {
    /** Compute type of the cluster. The value will be overwritten by the same setting in integration runtime if provided. */
    computeType?: string;
    /** Core count of the cluster. The value will be overwritten by the same setting in integration runtime if provided. */
    coreCount?: number;
    /** Time to live setting of the cluster in minutes. */
    timeToLive?: number;
    /** Set to use integration runtime setting for data flow debug session. */
    integrationRuntime?: IntegrationRuntimeDebugResource;
}

/** Response body structure for creating data flow debug session. */
export declare interface CreateDataFlowDebugSessionResponse {
    /** The state of the debug session. */
    status?: string;
    /** The ID of data flow debug session. */
    sessionId?: string;
}

/** The linked integration runtime information. */
export declare interface CreateLinkedIntegrationRuntimeRequest {
    /** The name of the linked integration runtime. */
    name?: string;
    /** The ID of the subscription that the linked integration runtime belongs to. */
    subscriptionId?: string;
    /** The name of the data factory that the linked integration runtime belongs to. */
    dataFactoryName?: string;
    /** The location of the data factory that the linked integration runtime belongs to. */
    dataFactoryLocation?: string;
}

/** Response body with a run identifier. */
export declare interface CreateRunResponse {
    /** Identifier of a run. */
    runId: string;
}

/** The Azure Data Factory nested object which contains the information and credential which can be used to connect with related store or compute resource. */
declare interface Credential_2 {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "ManagedIdentity" | "ServicePrincipal";
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /** Credential description. */
    description?: string;
    /** List of tags that can be used for describing the Credential. */
    annotations?: any[];
}
export { Credential_2 as Credential }

/** A list of credential resources. */
export declare interface CredentialListResponse {
    /** List of credentials. */
    value: ManagedIdentityCredentialResource[];
    /** The link to the next page of results, if any remaining results exist. */
    nextLink?: string;
}

/** Interface representing a CredentialOperations. */
export declare interface CredentialOperations {
    /**
     * List credentials.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param options The options parameters.
     */
    listByFactory(resourceGroupName: string, factoryName: string, options?: CredentialOperationsListByFactoryOptionalParams): PagedAsyncIterableIterator<ManagedIdentityCredentialResource>;
    /**
     * Creates or updates a credential.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param credentialName Credential name
     * @param credential Credential resource definition.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, factoryName: string, credentialName: string, credential: ManagedIdentityCredentialResource, options?: CredentialOperationsCreateOrUpdateOptionalParams): Promise<CredentialOperationsCreateOrUpdateResponse>;
    /**
     * Gets a credential.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param credentialName Credential name
     * @param options The options parameters.
     */
    get(resourceGroupName: string, factoryName: string, credentialName: string, options?: CredentialOperationsGetOptionalParams): Promise<CredentialOperationsGetResponse>;
    /**
     * Deletes a credential.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param credentialName Credential name
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, factoryName: string, credentialName: string, options?: CredentialOperationsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface CredentialOperationsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** ETag of the credential entity. Should only be specified for update, for which it should match existing entity or can be * for unconditional update. */
    ifMatch?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type CredentialOperationsCreateOrUpdateResponse = ManagedIdentityCredentialResource;

/** Optional parameters. */
export declare interface CredentialOperationsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface CredentialOperationsGetOptionalParams extends coreClient.OperationOptions {
    /** ETag of the credential entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. */
    ifNoneMatch?: string;
}

/** Contains response data for the get operation. */
export declare type CredentialOperationsGetResponse = ManagedIdentityCredentialResource;

/** Optional parameters. */
export declare interface CredentialOperationsListByFactoryNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByFactoryNext operation. */
export declare type CredentialOperationsListByFactoryNextResponse = CredentialListResponse;

/** Optional parameters. */
export declare interface CredentialOperationsListByFactoryOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByFactory operation. */
export declare type CredentialOperationsListByFactoryResponse = CredentialListResponse;

/** Credential reference type. */
export declare interface CredentialReference {
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /** Credential reference type. */
    type: CredentialReferenceType;
    /** Reference credential name. */
    referenceName: string;
}

/**
 * Defines values for CredentialReferenceType. \
 * {@link KnownCredentialReferenceType} can be used interchangeably with CredentialReferenceType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **CredentialReference**
 */
export declare type CredentialReferenceType = string;

/** Credential resource type. */
export declare interface CredentialResource extends SubResource {
    /** Properties of credentials. */
    properties: CredentialUnion;
}

export declare type CredentialUnion = Credential_2 | ManagedIdentityCredential | ServicePrincipalCredential;

/** Custom activity type. */
export declare interface CustomActivity extends ExecutionActivity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Custom";
    /** Command for custom activity Type: string (or Expression with resultType string). */
    command: any;
    /** Resource linked service reference. */
    resourceLinkedService?: LinkedServiceReference;
    /** Folder path for resource files Type: string (or Expression with resultType string). */
    folderPath?: any;
    /** Reference objects */
    referenceObjects?: CustomActivityReferenceObject;
    /** User defined property bag. There is no restriction on the keys or values that can be used. The user specified custom activity has the full responsibility to consume and interpret the content defined. */
    extendedProperties?: {
        [propertyName: string]: any;
    };
    /** The retention time for the files submitted for custom activity. Type: double (or Expression with resultType double). */
    retentionTimeInDays?: any;
    /** Elevation level and scope for the user, default is nonadmin task. Type: string (or Expression with resultType double). */
    autoUserSpecification?: any;
}

/** Reference objects for custom activity */
export declare interface CustomActivityReferenceObject {
    /** Linked service references. */
    linkedServices?: LinkedServiceReference[];
    /** Dataset references. */
    datasets?: DatasetReference[];
}

/** The custom dataset. */
export declare interface CustomDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "CustomDataset";
    /** Custom dataset properties. */
    typeProperties?: any;
}

/** Custom linked service. */
export declare interface CustomDataSourceLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "CustomDataSource";
    /** Custom linked service properties. */
    typeProperties: any;
}

/** Trigger that runs every time a custom event is received. */
export declare interface CustomEventsTrigger extends MultiplePipelineTrigger {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "CustomEventsTrigger";
    /** The event subject must begin with the pattern provided for trigger to fire. At least one of these must be provided: subjectBeginsWith, subjectEndsWith. */
    subjectBeginsWith?: string;
    /** The event subject must end with the pattern provided for trigger to fire. At least one of these must be provided: subjectBeginsWith, subjectEndsWith. */
    subjectEndsWith?: string;
    /** The list of event types that cause this trigger to fire. */
    events: any[];
    /** The ARM resource ID of the Azure Event Grid Topic. */
    scope: string;
}

/** The base definition of the custom setup. */
export declare interface CustomSetupBase {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "CmdkeySetup" | "EnvironmentVariableSetup" | "ComponentSetup" | "AzPowerShellSetup";
}

export declare type CustomSetupBaseUnion = CustomSetupBase | CmdkeySetup | EnvironmentVariableSetup | ComponentSetup | AzPowerShellSetup;

/** DatabricksNotebook activity. */
export declare interface DatabricksNotebookActivity extends ExecutionActivity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "DatabricksNotebook";
    /** The absolute path of the notebook to be run in the Databricks Workspace. This path must begin with a slash. Type: string (or Expression with resultType string). */
    notebookPath: any;
    /** Base parameters to be used for each run of this job.If the notebook takes a parameter that is not specified, the default value from the notebook will be used. */
    baseParameters?: {
        [propertyName: string]: any;
    };
    /** A list of libraries to be installed on the cluster that will execute the job. */
    libraries?: {
        [propertyName: string]: any;
    }[];
}

/** DatabricksSparkJar activity. */
export declare interface DatabricksSparkJarActivity extends ExecutionActivity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "DatabricksSparkJar";
    /** The full name of the class containing the main method to be executed. This class must be contained in a JAR provided as a library. Type: string (or Expression with resultType string). */
    mainClassName: any;
    /** Parameters that will be passed to the main method. */
    parameters?: any[];
    /** A list of libraries to be installed on the cluster that will execute the job. */
    libraries?: {
        [propertyName: string]: any;
    }[];
}

/** DatabricksSparkPython activity. */
export declare interface DatabricksSparkPythonActivity extends ExecutionActivity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "DatabricksSparkPython";
    /** The URI of the Python file to be executed. DBFS paths are supported. Type: string (or Expression with resultType string). */
    pythonFile: any;
    /** Command line parameters that will be passed to the Python file. */
    parameters?: any[];
    /** A list of libraries to be installed on the cluster that will execute the job. */
    libraries?: {
        [propertyName: string]: any;
    }[];
}

export declare class DataFactoryManagementClient extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the DataFactoryManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The subscription identifier.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: DataFactoryManagementClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    operations: Operations;
    factories: Factories;
    exposureControl: ExposureControl;
    integrationRuntimes: IntegrationRuntimes;
    integrationRuntimeObjectMetadata: IntegrationRuntimeObjectMetadata;
    integrationRuntimeNodes: IntegrationRuntimeNodes;
    linkedServices: LinkedServices;
    datasets: Datasets;
    pipelines: Pipelines;
    pipelineRuns: PipelineRuns;
    activityRuns: ActivityRuns;
    triggers: Triggers;
    triggerRuns: TriggerRuns;
    dataFlows: DataFlows;
    dataFlowDebugSession: DataFlowDebugSession;
    managedVirtualNetworks: ManagedVirtualNetworks;
    managedPrivateEndpoints: ManagedPrivateEndpoints;
    credentialOperations: CredentialOperations;
    privateEndPointConnections: PrivateEndPointConnections;
    privateEndpointConnection: PrivateEndpointConnection;
    privateLinkResources: PrivateLinkResources;
    globalParameters: GlobalParameters;
    changeDataCapture: ChangeDataCapture;
}

/** Optional parameters. */
export declare interface DataFactoryManagementClientOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** Azure Data Factory nested object which contains a flow with data movements and transformations. */
export declare interface DataFlow {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "MappingDataFlow" | "Flowlet" | "WranglingDataFlow";
    /** The description of the data flow. */
    description?: string;
    /** List of tags that can be used for describing the data flow. */
    annotations?: any[];
    /** The folder that this data flow is in. If not specified, Data flow will appear at the root level. */
    folder?: DataFlowFolder;
}

/**
 * Defines values for DataFlowComputeType. \
 * {@link KnownDataFlowComputeType} can be used interchangeably with DataFlowComputeType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **General** \
 * **MemoryOptimized** \
 * **ComputeOptimized**
 */
export declare type DataFlowComputeType = string;

/** Structure of command payload. */
export declare interface DataFlowDebugCommandPayload {
    /** The stream name which is used for preview. */
    streamName: string;
    /** Row limits for preview response. */
    rowLimits?: number;
    /** Array of column names. */
    columns?: string[];
    /** The expression which is used for preview. */
    expression?: string;
}

/** Request body structure for data flow debug command. */
export declare interface DataFlowDebugCommandRequest {
    /** The ID of data flow debug session. */
    sessionId?: string;
    /** The command type. */
    command?: DataFlowDebugCommandType;
    /** The command payload object. */
    commandPayload?: DataFlowDebugCommandPayload;
}

/** Response body structure of data flow result for data preview, statistics or expression preview. */
export declare interface DataFlowDebugCommandResponse {
    /** The run status of data preview, statistics or expression preview. */
    status?: string;
    /** The result data of data preview, statistics or expression preview. */
    data?: string;
}

/**
 * Defines values for DataFlowDebugCommandType. \
 * {@link KnownDataFlowDebugCommandType} can be used interchangeably with DataFlowDebugCommandType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **executePreviewQuery** \
 * **executeStatisticsQuery** \
 * **executeExpressionQuery**
 */
export declare type DataFlowDebugCommandType = string;

/** Request body structure for starting data flow debug session. */
export declare interface DataFlowDebugPackage {
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /** The ID of data flow debug session. */
    sessionId?: string;
    /** Data flow instance. */
    dataFlow?: DataFlowDebugResource;
    /** List of Data flows */
    dataFlows?: DataFlowDebugResource[];
    /** List of datasets. */
    datasets?: DatasetDebugResource[];
    /** List of linked services. */
    linkedServices?: LinkedServiceDebugResource[];
    /** Staging info for debug session. */
    staging?: DataFlowStagingInfo;
    /** Data flow debug settings. */
    debugSettings?: DataFlowDebugPackageDebugSettings;
}

/** Data flow debug settings. */
export declare interface DataFlowDebugPackageDebugSettings {
    /** Source setting for data flow debug. */
    sourceSettings?: DataFlowSourceSetting[];
    /** Data flow parameters. */
    parameters?: {
        [propertyName: string]: any;
    };
    /** Parameters for dataset. */
    datasetParameters?: any;
}

/** Data flow debug resource. */
export declare interface DataFlowDebugResource extends SubResourceDebugResource {
    /** Data flow properties. */
    properties: DataFlowUnion;
}

/** Interface representing a DataFlowDebugSession. */
export declare interface DataFlowDebugSession {
    /**
     * Query all active data flow debug sessions.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param options The options parameters.
     */
    listQueryByFactory(resourceGroupName: string, factoryName: string, options?: DataFlowDebugSessionQueryByFactoryOptionalParams): PagedAsyncIterableIterator<DataFlowDebugSessionInfo>;
    /**
     * Creates a data flow debug session.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param request Data flow debug session definition
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName: string, factoryName: string, request: CreateDataFlowDebugSessionRequest, options?: DataFlowDebugSessionCreateOptionalParams): Promise<SimplePollerLike<OperationState<DataFlowDebugSessionCreateResponse>, DataFlowDebugSessionCreateResponse>>;
    /**
     * Creates a data flow debug session.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param request Data flow debug session definition
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName: string, factoryName: string, request: CreateDataFlowDebugSessionRequest, options?: DataFlowDebugSessionCreateOptionalParams): Promise<DataFlowDebugSessionCreateResponse>;
    /**
     * Add a data flow into debug session.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param request Data flow debug session definition with debug content.
     * @param options The options parameters.
     */
    addDataFlow(resourceGroupName: string, factoryName: string, request: DataFlowDebugPackage, options?: DataFlowDebugSessionAddDataFlowOptionalParams): Promise<DataFlowDebugSessionAddDataFlowResponse>;
    /**
     * Deletes a data flow debug session.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param request Data flow debug session definition for deletion
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, factoryName: string, request: DeleteDataFlowDebugSessionRequest, options?: DataFlowDebugSessionDeleteOptionalParams): Promise<void>;
    /**
     * Execute a data flow debug command.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param request Data flow debug command definition.
     * @param options The options parameters.
     */
    beginExecuteCommand(resourceGroupName: string, factoryName: string, request: DataFlowDebugCommandRequest, options?: DataFlowDebugSessionExecuteCommandOptionalParams): Promise<SimplePollerLike<OperationState<DataFlowDebugSessionExecuteCommandResponse>, DataFlowDebugSessionExecuteCommandResponse>>;
    /**
     * Execute a data flow debug command.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param request Data flow debug command definition.
     * @param options The options parameters.
     */
    beginExecuteCommandAndWait(resourceGroupName: string, factoryName: string, request: DataFlowDebugCommandRequest, options?: DataFlowDebugSessionExecuteCommandOptionalParams): Promise<DataFlowDebugSessionExecuteCommandResponse>;
}

/** Optional parameters. */
export declare interface DataFlowDebugSessionAddDataFlowOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the addDataFlow operation. */
export declare type DataFlowDebugSessionAddDataFlowResponse = AddDataFlowToDebugSessionResponse;

/** Defines headers for DataFlowDebugSession_create operation. */
export declare interface DataFlowDebugSessionCreateHeaders {
    /** URI to poll for asynchronous operation status. */
    location?: string;
}

/** Optional parameters. */
export declare interface DataFlowDebugSessionCreateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the create operation. */
export declare type DataFlowDebugSessionCreateResponse = CreateDataFlowDebugSessionResponse;

/** Optional parameters. */
export declare interface DataFlowDebugSessionDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Defines headers for DataFlowDebugSession_executeCommand operation. */
export declare interface DataFlowDebugSessionExecuteCommandHeaders {
    /** URI to poll for asynchronous operation status. */
    location?: string;
}

/** Optional parameters. */
export declare interface DataFlowDebugSessionExecuteCommandOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the executeCommand operation. */
export declare type DataFlowDebugSessionExecuteCommandResponse = DataFlowDebugCommandResponse;

/** Data flow debug session info. */
export declare interface DataFlowDebugSessionInfo {
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /** The name of the data flow. */
    dataFlowName?: string;
    /** Compute type of the cluster. */
    computeType?: string;
    /** Core count of the cluster. */
    coreCount?: number;
    /** Node count of the cluster. (deprecated property) */
    nodeCount?: number;
    /** Attached integration runtime name of data flow debug session. */
    integrationRuntimeName?: string;
    /** The ID of data flow debug session. */
    sessionId?: string;
    /** Start time of data flow debug session. */
    startTime?: string;
    /** Compute type of the cluster. */
    timeToLiveInMinutes?: number;
    /** Last activity time of data flow debug session. */
    lastActivityTime?: string;
}

/** Optional parameters. */
export declare interface DataFlowDebugSessionQueryByFactoryNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the queryByFactoryNext operation. */
export declare type DataFlowDebugSessionQueryByFactoryNextResponse = QueryDataFlowDebugSessionsResponse;

/** Optional parameters. */
export declare interface DataFlowDebugSessionQueryByFactoryOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the queryByFactory operation. */
export declare type DataFlowDebugSessionQueryByFactoryResponse = QueryDataFlowDebugSessionsResponse;

/** The folder that this data flow is in. If not specified, Data flow will appear at the root level. */
export declare interface DataFlowFolder {
    /** The name of the folder that this data flow is in. */
    name?: string;
}

/** A list of data flow resources. */
export declare interface DataFlowListResponse {
    /** List of data flows. */
    value: DataFlowResource[];
    /** The link to the next page of results, if any remaining results exist. */
    nextLink?: string;
}

/** Data flow reference type. */
export declare interface DataFlowReference {
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /** Data flow reference type. */
    type: DataFlowReferenceType;
    /** Reference data flow name. */
    referenceName: string;
    /** Reference data flow parameters from dataset. */
    datasetParameters?: any;
    /** Data flow parameters */
    parameters?: {
        [propertyName: string]: any;
    };
}

/**
 * Defines values for DataFlowReferenceType. \
 * {@link KnownDataFlowReferenceType} can be used interchangeably with DataFlowReferenceType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **DataFlowReference**
 */
export declare type DataFlowReferenceType = string;

/** Data flow resource type. */
export declare interface DataFlowResource extends SubResource {
    /** Data flow properties. */
    properties: DataFlowUnion;
}

/** Interface representing a DataFlows. */
export declare interface DataFlows {
    /**
     * Lists data flows.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param options The options parameters.
     */
    listByFactory(resourceGroupName: string, factoryName: string, options?: DataFlowsListByFactoryOptionalParams): PagedAsyncIterableIterator<DataFlowResource>;
    /**
     * Creates or updates a data flow.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param dataFlowName The data flow name.
     * @param dataFlow Data flow resource definition.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, factoryName: string, dataFlowName: string, dataFlow: DataFlowResource, options?: DataFlowsCreateOrUpdateOptionalParams): Promise<DataFlowsCreateOrUpdateResponse>;
    /**
     * Gets a data flow.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param dataFlowName The data flow name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, factoryName: string, dataFlowName: string, options?: DataFlowsGetOptionalParams): Promise<DataFlowsGetResponse>;
    /**
     * Deletes a data flow.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param dataFlowName The data flow name.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, factoryName: string, dataFlowName: string, options?: DataFlowsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface DataFlowsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** ETag of the data flow entity. Should only be specified for update, for which it should match existing entity or can be * for unconditional update. */
    ifMatch?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type DataFlowsCreateOrUpdateResponse = DataFlowResource;

/** Optional parameters. */
export declare interface DataFlowsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface DataFlowsGetOptionalParams extends coreClient.OperationOptions {
    /** ETag of the data flow entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. */
    ifNoneMatch?: string;
}

/** Contains response data for the get operation. */
export declare type DataFlowsGetResponse = DataFlowResource;

/** Transformation for data flow sink. */
export declare interface DataFlowSink extends Transformation {
    /** Schema linked service reference. */
    schemaLinkedService?: LinkedServiceReference;
    /** Rejected data linked service reference. */
    rejectedDataLinkedService?: LinkedServiceReference;
}

/** Optional parameters. */
export declare interface DataFlowsListByFactoryNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByFactoryNext operation. */
export declare type DataFlowsListByFactoryNextResponse = DataFlowListResponse;

/** Optional parameters. */
export declare interface DataFlowsListByFactoryOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByFactory operation. */
export declare type DataFlowsListByFactoryResponse = DataFlowListResponse;

/** Transformation for data flow source. */
export declare interface DataFlowSource extends Transformation {
    /** Schema linked service reference. */
    schemaLinkedService?: LinkedServiceReference;
}

/** Definition of data flow source setting for debug. */
export declare interface DataFlowSourceSetting {
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /** The data flow source name. */
    sourceName?: string;
    /** Defines the row limit of data flow source in debug. */
    rowLimit?: number;
}

/** Staging info for execute data flow activity. */
export declare interface DataFlowStagingInfo {
    /** Staging linked service reference. */
    linkedService?: LinkedServiceReference;
    /** Folder path for staging blob. Type: string (or Expression with resultType string) */
    folderPath?: any;
}

export declare type DataFlowUnion = DataFlow | MappingDataFlow | Flowlet | WranglingDataFlow;

/** Data Lake Analytics U-SQL activity. */
export declare interface DataLakeAnalyticsUsqlActivity extends ExecutionActivity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "DataLakeAnalyticsU-SQL";
    /** Case-sensitive path to folder that contains the U-SQL script. Type: string (or Expression with resultType string). */
    scriptPath: any;
    /** Script linked service reference. */
    scriptLinkedService: LinkedServiceReference;
    /** The maximum number of nodes simultaneously used to run the job. Default value is 1. Type: integer (or Expression with resultType integer), minimum: 1. */
    degreeOfParallelism?: any;
    /** Determines which jobs out of all that are queued should be selected to run first. The lower the number, the higher the priority. Default value is 1000. Type: integer (or Expression with resultType integer), minimum: 1. */
    priority?: any;
    /** Parameters for U-SQL job request. */
    parameters?: {
        [propertyName: string]: any;
    };
    /** Runtime version of the U-SQL engine to use. Type: string (or Expression with resultType string). */
    runtimeVersion?: any;
    /** Compilation mode of U-SQL. Must be one of these values : Semantic, Full and SingleBox. Type: string (or Expression with resultType string). */
    compilationMode?: any;
}

/** Source and target table mapping details. */
export declare interface DataMapperMapping {
    /** Name of the target table */
    targetEntityName?: string;
    /** Name of the source table */
    sourceEntityName?: string;
    /** The connection reference for the source connection. */
    sourceConnectionReference?: MapperConnectionReference;
    /** This holds the user provided attribute mapping information. */
    attributeMappingInfo?: MapperAttributeMappings;
    /** This holds the source denormalization information used while joining multiple sources. */
    sourceDenormalizeInfo?: any;
}

/** The Azure Data Factory nested object which identifies data within different data stores, such as tables, files, folders, and documents. */
export declare interface Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AmazonS3Object" | "Avro" | "Excel" | "Parquet" | "DelimitedText" | "Json" | "Xml" | "Orc" | "Binary" | "AzureBlob" | "AzureTable" | "AzureSqlTable" | "AzureSqlMITable" | "AzureSqlDWTable" | "CassandraTable" | "CustomDataset" | "CosmosDbSqlApiCollection" | "DocumentDbCollection" | "DynamicsEntity" | "DynamicsCrmEntity" | "CommonDataServiceForAppsEntity" | "AzureDataLakeStoreFile" | "AzureBlobFSFile" | "Office365Table" | "FileShare" | "MongoDbCollection" | "MongoDbAtlasCollection" | "MongoDbV2Collection" | "CosmosDbMongoDbApiCollection" | "ODataResource" | "OracleTable" | "AmazonRdsForOracleTable" | "TeradataTable" | "AzureMySqlTable" | "AmazonRedshiftTable" | "Db2Table" | "RelationalTable" | "InformixTable" | "OdbcTable" | "MySqlTable" | "PostgreSqlTable" | "MicrosoftAccessTable" | "SalesforceObject" | "SalesforceServiceCloudObject" | "SybaseTable" | "SapBwCube" | "SapCloudForCustomerResource" | "SapEccResource" | "SapHanaTable" | "SapOpenHubTable" | "SqlServerTable" | "AmazonRdsForSqlServerTable" | "RestResource" | "SapTableResource" | "SapOdpResource" | "WebTable" | "AzureSearchIndex" | "HttpFile" | "AmazonMWSObject" | "AzurePostgreSqlTable" | "ConcurObject" | "CouchbaseTable" | "DrillTable" | "EloquaObject" | "GoogleBigQueryObject" | "GreenplumTable" | "HBaseObject" | "HiveObject" | "HubspotObject" | "ImpalaObject" | "JiraObject" | "MagentoObject" | "MariaDBTable" | "AzureMariaDBTable" | "MarketoObject" | "PaypalObject" | "PhoenixObject" | "PrestoObject" | "QuickBooksObject" | "ServiceNowObject" | "ShopifyObject" | "SparkObject" | "SquareObject" | "XeroObject" | "ZohoObject" | "NetezzaTable" | "VerticaTable" | "SalesforceMarketingCloudObject" | "ResponsysObject" | "DynamicsAXResource" | "OracleServiceCloudObject" | "AzureDataExplorerTable" | "GoogleAdWordsObject" | "SnowflakeTable" | "SharePointOnlineListResource" | "AzureDatabricksDeltaLakeDataset" | "LakeHouseTable";
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /** Dataset description. */
    description?: string;
    /** Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. */
    structure?: any;
    /** Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. */
    schema?: any;
    /** Linked service reference. */
    linkedServiceName: LinkedServiceReference;
    /** Parameters for dataset. */
    parameters?: {
        [propertyName: string]: ParameterSpecification;
    };
    /** List of tags that can be used for describing the Dataset. */
    annotations?: any[];
    /** The folder that this Dataset is in. If not specified, Dataset will appear at the root level. */
    folder?: DatasetFolder;
}

/** The compression method used on a dataset. */
export declare interface DatasetCompression {
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /** Type of dataset compression. Type: string (or Expression with resultType string). */
    type: any;
    /** The dataset compression level. Type: string (or Expression with resultType string). */
    level?: any;
}

/**
 * Defines values for DatasetCompressionLevel. \
 * {@link KnownDatasetCompressionLevel} can be used interchangeably with DatasetCompressionLevel,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Optimal** \
 * **Fastest**
 */
export declare type DatasetCompressionLevel = string;

/** Columns that define the structure of the dataset. */
export declare interface DatasetDataElement {
    /** Name of the column. Type: string (or Expression with resultType string). */
    name?: any;
    /** Type of the column. Type: string (or Expression with resultType string). */
    type?: any;
}

/** Dataset debug resource. */
export declare interface DatasetDebugResource extends SubResourceDebugResource {
    /** Dataset properties. */
    properties: DatasetUnion;
}

/** The folder that this Dataset is in. If not specified, Dataset will appear at the root level. */
export declare interface DatasetFolder {
    /** The name of the folder that this Dataset is in. */
    name?: string;
}

/** A list of dataset resources. */
export declare interface DatasetListResponse {
    /** List of datasets. */
    value: DatasetResource[];
    /** The link to the next page of results, if any remaining results exist. */
    nextLink?: string;
}

/** Dataset location. */
export declare interface DatasetLocation {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureBlobStorageLocation" | "AzureBlobFSLocation" | "AzureDataLakeStoreLocation" | "AmazonS3Location" | "FileServerLocation" | "AzureFileStorageLocation" | "AmazonS3CompatibleLocation" | "OracleCloudStorageLocation" | "GoogleCloudStorageLocation" | "FtpServerLocation" | "SftpLocation" | "HttpServerLocation" | "HdfsLocation" | "LakeHouseLocation";
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /** Specify the folder path of dataset. Type: string (or Expression with resultType string) */
    folderPath?: any;
    /** Specify the file name of dataset. Type: string (or Expression with resultType string). */
    fileName?: any;
}

export declare type DatasetLocationUnion = DatasetLocation | AzureBlobStorageLocation | AzureBlobFSLocation | AzureDataLakeStoreLocation | AmazonS3Location | FileServerLocation | AzureFileStorageLocation | AmazonS3CompatibleLocation | OracleCloudStorageLocation | GoogleCloudStorageLocation | FtpServerLocation | SftpLocation | HttpServerLocation | HdfsLocation | LakeHouseLocation;

/** Dataset reference type. */
export declare interface DatasetReference {
    /** Dataset reference type. */
    type: "DatasetReference";
    /** Reference dataset name. */
    referenceName: string;
    /** Arguments for dataset. */
    parameters?: {
        [propertyName: string]: any;
    };
}

/** Dataset resource type. */
export declare interface DatasetResource extends SubResource {
    /** Dataset properties. */
    properties: DatasetUnion;
}

/** Interface representing a Datasets. */
export declare interface Datasets {
    /**
     * Lists datasets.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param options The options parameters.
     */
    listByFactory(resourceGroupName: string, factoryName: string, options?: DatasetsListByFactoryOptionalParams): PagedAsyncIterableIterator<DatasetResource>;
    /**
     * Creates or updates a dataset.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param datasetName The dataset name.
     * @param dataset Dataset resource definition.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, factoryName: string, datasetName: string, dataset: DatasetResource, options?: DatasetsCreateOrUpdateOptionalParams): Promise<DatasetsCreateOrUpdateResponse>;
    /**
     * Gets a dataset.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param datasetName The dataset name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, factoryName: string, datasetName: string, options?: DatasetsGetOptionalParams): Promise<DatasetsGetResponse>;
    /**
     * Deletes a dataset.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param datasetName The dataset name.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, factoryName: string, datasetName: string, options?: DatasetsDeleteOptionalParams): Promise<void>;
}

/** Columns that define the physical type schema of the dataset. */
export declare interface DatasetSchemaDataElement {
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /** Name of the schema column. Type: string (or Expression with resultType string). */
    name?: any;
    /** Type of the schema column. Type: string (or Expression with resultType string). */
    type?: any;
}

/** Optional parameters. */
export declare interface DatasetsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** ETag of the dataset entity.  Should only be specified for update, for which it should match existing entity or can be * for unconditional update. */
    ifMatch?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type DatasetsCreateOrUpdateResponse = DatasetResource;

/** Optional parameters. */
export declare interface DatasetsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface DatasetsGetOptionalParams extends coreClient.OperationOptions {
    /** ETag of the dataset entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. */
    ifNoneMatch?: string;
}

/** Contains response data for the get operation. */
export declare type DatasetsGetResponse = DatasetResource;

/** Optional parameters. */
export declare interface DatasetsListByFactoryNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByFactoryNext operation. */
export declare type DatasetsListByFactoryNextResponse = DatasetListResponse;

/** Optional parameters. */
export declare interface DatasetsListByFactoryOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByFactory operation. */
export declare type DatasetsListByFactoryResponse = DatasetListResponse;

/** The format definition of a storage. */
export declare interface DatasetStorageFormat {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "TextFormat" | "JsonFormat" | "AvroFormat" | "OrcFormat" | "ParquetFormat";
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /** Serializer. Type: string (or Expression with resultType string). */
    serializer?: any;
    /** Deserializer. Type: string (or Expression with resultType string). */
    deserializer?: any;
}

export declare type DatasetStorageFormatUnion = DatasetStorageFormat | TextFormat | JsonFormat | AvroFormat | OrcFormat | ParquetFormat;

export declare type DatasetUnion = Dataset | AmazonS3Dataset | AvroDataset | ExcelDataset | ParquetDataset | DelimitedTextDataset | JsonDataset | XmlDataset | OrcDataset | BinaryDataset | AzureBlobDataset | AzureTableDataset | AzureSqlTableDataset | AzureSqlMITableDataset | AzureSqlDWTableDataset | CassandraTableDataset | CustomDataset | CosmosDbSqlApiCollectionDataset | DocumentDbCollectionDataset | DynamicsEntityDataset | DynamicsCrmEntityDataset | CommonDataServiceForAppsEntityDataset | AzureDataLakeStoreDataset | AzureBlobFSDataset | Office365Dataset | FileShareDataset | MongoDbCollectionDataset | MongoDbAtlasCollectionDataset | MongoDbV2CollectionDataset | CosmosDbMongoDbApiCollectionDataset | ODataResourceDataset | OracleTableDataset | AmazonRdsForOracleTableDataset | TeradataTableDataset | AzureMySqlTableDataset | AmazonRedshiftTableDataset | Db2TableDataset | RelationalTableDataset | InformixTableDataset | OdbcTableDataset | MySqlTableDataset | PostgreSqlTableDataset | MicrosoftAccessTableDataset | SalesforceObjectDataset | SalesforceServiceCloudObjectDataset | SybaseTableDataset | SapBwCubeDataset | SapCloudForCustomerResourceDataset | SapEccResourceDataset | SapHanaTableDataset | SapOpenHubTableDataset | SqlServerTableDataset | AmazonRdsForSqlServerTableDataset | RestResourceDataset | SapTableResourceDataset | SapOdpResourceDataset | WebTableDataset | AzureSearchIndexDataset | HttpDataset | AmazonMWSObjectDataset | AzurePostgreSqlTableDataset | ConcurObjectDataset | CouchbaseTableDataset | DrillTableDataset | EloquaObjectDataset | GoogleBigQueryObjectDataset | GreenplumTableDataset | HBaseObjectDataset | HiveObjectDataset | HubspotObjectDataset | ImpalaObjectDataset | JiraObjectDataset | MagentoObjectDataset | MariaDBTableDataset | AzureMariaDBTableDataset | MarketoObjectDataset | PaypalObjectDataset | PhoenixObjectDataset | PrestoObjectDataset | QuickBooksObjectDataset | ServiceNowObjectDataset | ShopifyObjectDataset | SparkObjectDataset | SquareObjectDataset | XeroObjectDataset | ZohoObjectDataset | NetezzaTableDataset | VerticaTableDataset | SalesforceMarketingCloudObjectDataset | ResponsysObjectDataset | DynamicsAXResourceDataset | OracleServiceCloudObjectDataset | AzureDataExplorerTableDataset | GoogleAdWordsObjectDataset | SnowflakeDataset | SharePointOnlineListResourceDataset | AzureDatabricksDeltaLakeDataset | LakeHouseTableDataset;

/** Linked service for Dataworld. */
export declare interface DataworldLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Dataworld";
    /** The api token for the Dataworld source. */
    apiToken: SecretBaseUnion;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** Defines values for DayOfWeek. */
export declare type DayOfWeek = "Sunday" | "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday";

/** Defines values for DaysOfWeek. */
export declare type DaysOfWeek = "Sunday" | "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday";

/**
 * Defines values for Db2AuthenticationType. \
 * {@link KnownDb2AuthenticationType} can be used interchangeably with Db2AuthenticationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Basic**
 */
export declare type Db2AuthenticationType = string;

/** Linked service for DB2 data source. */
export declare interface Db2LinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Db2";
    /** The connection string. It is mutually exclusive with server, database, authenticationType, userName, packageCollection and certificateCommonName property. Type: string, SecureString or AzureKeyVaultSecretReference. */
    connectionString?: any;
    /** Server name for connection. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string). */
    server?: any;
    /** Database name for connection. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string). */
    database?: any;
    /** AuthenticationType to be used for connection. It is mutually exclusive with connectionString property. */
    authenticationType?: Db2AuthenticationType;
    /** Username for authentication. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string). */
    username?: any;
    /** Password for authentication. */
    password?: SecretBaseUnion;
    /** Under where packages are created when querying database. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string). */
    packageCollection?: any;
    /** Certificate Common Name when TLS is enabled. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string). */
    certificateCommonName?: any;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. It is mutually exclusive with connectionString property. Type: string. */
    encryptedCredential?: string;
}

/** A copy activity source for Db2 databases. */
export declare interface Db2Source extends TabularSource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Db2Source";
    /** Database query. Type: string (or Expression with resultType string). */
    query?: any;
}

/** The Db2 table dataset. */
export declare interface Db2TableDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Db2Table";
    /** This property will be retired. Please consider using schema + table properties instead. */
    tableName?: any;
    /** The Db2 schema name. Type: string (or Expression with resultType string). */
    schemaTypePropertiesSchema?: any;
    /** The Db2 table name. Type: string (or Expression with resultType string). */
    table?: any;
}

/** Delete activity. */
export declare interface DeleteActivity extends ExecutionActivity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Delete";
    /** If true, files or sub-folders under current folder path will be deleted recursively. Default is false. Type: boolean (or Expression with resultType boolean). */
    recursive?: any;
    /** The max concurrent connections to connect data source at the same time. */
    maxConcurrentConnections?: number;
    /** Whether to record detailed logs of delete-activity execution. Default value is false. Type: boolean (or Expression with resultType boolean). */
    enableLogging?: any;
    /** Log storage settings customer need to provide when enableLogging is true. */
    logStorageSettings?: LogStorageSettings;
    /** Delete activity dataset reference. */
    dataset: DatasetReference;
    /** Delete activity store settings. */
    storeSettings?: StoreReadSettingsUnion;
}

/** Request body structure for deleting data flow debug session. */
export declare interface DeleteDataFlowDebugSessionRequest {
    /** The ID of data flow debug session. */
    sessionId?: string;
}

/** Delimited text dataset. */
export declare interface DelimitedTextDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "DelimitedText";
    /** The location of the delimited text storage. */
    location?: DatasetLocationUnion;
    /** The column delimiter. Type: string (or Expression with resultType string). */
    columnDelimiter?: any;
    /** The row delimiter. Type: string (or Expression with resultType string). */
    rowDelimiter?: any;
    /** The code page name of the preferred encoding. If miss, the default value is UTF-8, unless BOM denotes another Unicode encoding. Refer to the name column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string). */
    encodingName?: any;
    /** The data compressionCodec. Type: string (or Expression with resultType string). */
    compressionCodec?: any;
    /** The data compression method used for DelimitedText. */
    compressionLevel?: any;
    /** The quote character. Type: string (or Expression with resultType string). */
    quoteChar?: any;
    /** The escape character. Type: string (or Expression with resultType string). */
    escapeChar?: any;
    /** When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean). */
    firstRowAsHeader?: any;
    /** The null value string. Type: string (or Expression with resultType string). */
    nullValue?: any;
}

/** Delimited text read settings. */
export declare interface DelimitedTextReadSettings extends FormatReadSettings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "DelimitedTextReadSettings";
    /** Indicates the number of non-empty rows to skip when reading data from input files. Type: integer (or Expression with resultType integer). */
    skipLineCount?: any;
    /** Compression settings. */
    compressionProperties?: CompressionReadSettingsUnion;
}

/** A copy activity DelimitedText sink. */
export declare interface DelimitedTextSink extends CopySink {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "DelimitedTextSink";
    /** DelimitedText store settings. */
    storeSettings?: StoreWriteSettingsUnion;
    /** DelimitedText format settings. */
    formatSettings?: DelimitedTextWriteSettings;
}

/** A copy activity DelimitedText source. */
export declare interface DelimitedTextSource extends CopySource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "DelimitedTextSource";
    /** DelimitedText store settings. */
    storeSettings?: StoreReadSettingsUnion;
    /** DelimitedText format settings. */
    formatSettings?: DelimitedTextReadSettings;
    /** Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). */
    additionalColumns?: any;
}

/** Delimited text write settings. */
export declare interface DelimitedTextWriteSettings extends FormatWriteSettings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "DelimitedTextWriteSettings";
    /** Indicates whether string values should always be enclosed with quotes. Type: boolean (or Expression with resultType boolean). */
    quoteAllText?: any;
    /** The file extension used to create the files. Type: string (or Expression with resultType string). */
    fileExtension: any;
    /** Limit the written file's row count to be smaller than or equal to the specified count. Type: integer (or Expression with resultType integer). */
    maxRowsPerFile?: any;
    /** Specifies the file name pattern <fileNamePrefix>_<fileIndex>.<fileExtension> when copy from non-file based store without partitionOptions. Type: string (or Expression with resultType string). */
    fileNamePrefix?: any;
}

/**
 * Defines values for DependencyCondition. \
 * {@link KnownDependencyCondition} can be used interchangeably with DependencyCondition,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Skipped** \
 * **Completed**
 */
export declare type DependencyCondition = string;

/** Referenced dependency. */
export declare interface DependencyReference {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "TriggerDependencyReference" | "TumblingWindowTriggerDependencyReference" | "SelfDependencyTumblingWindowTriggerReference";
}

export declare type DependencyReferenceUnion = DependencyReference | TriggerDependencyReferenceUnion | SelfDependencyTumblingWindowTriggerReference;

/** Distcp settings. */
export declare interface DistcpSettings {
    /** Specifies the Yarn ResourceManager endpoint. Type: string (or Expression with resultType string). */
    resourceManagerEndpoint: any;
    /** Specifies an existing folder path which will be used to store temp Distcp command script. The script file is generated by ADF and will be removed after Copy job finished. Type: string (or Expression with resultType string). */
    tempScriptPath: any;
    /** Specifies the Distcp options. Type: string (or Expression with resultType string). */
    distcpOptions?: any;
}

/** Microsoft Azure Document Database Collection dataset. */
export declare interface DocumentDbCollectionDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "DocumentDbCollection";
    /** Document Database collection name. Type: string (or Expression with resultType string). */
    collectionName: any;
}

/** A copy activity Document Database Collection sink. */
export declare interface DocumentDbCollectionSink extends CopySink {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "DocumentDbCollectionSink";
    /** Nested properties separator. Default is . (dot). Type: string (or Expression with resultType string). */
    nestingSeparator?: any;
    /** Describes how to write data to Azure Cosmos DB. Type: string (or Expression with resultType string). Allowed values: insert and upsert. */
    writeBehavior?: any;
}

/** A copy activity Document Database Collection source. */
export declare interface DocumentDbCollectionSource extends CopySource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "DocumentDbCollectionSource";
    /** Documents query. Type: string (or Expression with resultType string). */
    query?: any;
    /** Nested properties separator. Type: string (or Expression with resultType string). */
    nestingSeparator?: any;
    /** Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). */
    queryTimeout?: any;
    /** Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). */
    additionalColumns?: any;
}

/** Drill server linked service. */
export declare interface DrillLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Drill";
    /** An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference. */
    connectionString?: any;
    /** The Azure key vault secret reference of password in connection string. */
    pwd?: AzureKeyVaultSecretReference;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** A copy activity Drill server source. */
export declare interface DrillSource extends TabularSource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "DrillSource";
    /** A query to retrieve data from source. Type: string (or Expression with resultType string). */
    query?: any;
}

/** Drill server dataset. */
export declare interface DrillTableDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "DrillTable";
    /** This property will be retired. Please consider using schema + table properties instead. */
    tableName?: any;
    /** The table name of the Drill. Type: string (or Expression with resultType string). */
    table?: any;
    /** The schema name of the Drill. Type: string (or Expression with resultType string). */
    schemaTypePropertiesSchema?: any;
}

/** Default value. */
export declare interface DWCopyCommandDefaultValue {
    /** Column name. Type: object (or Expression with resultType string). */
    columnName?: any;
    /** The default value of the column. Type: object (or Expression with resultType string). */
    defaultValue?: any;
}

/** DW Copy Command settings. */
export declare interface DWCopyCommandSettings {
    /** Specifies the default values for each target column in SQL DW. The default values in the property overwrite the DEFAULT constraint set in the DB, and identity column cannot have a default value. Type: array of objects (or Expression with resultType array of objects). */
    defaultValues?: DWCopyCommandDefaultValue[];
    /** Additional options directly passed to SQL DW in Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: "additionalOptions": { "MAXERRORS": "1000", "DATEFORMAT": "'ymd'" } */
    additionalOptions?: {
        [propertyName: string]: string;
    };
}

/**
 * Defines values for DynamicsAuthenticationType. \
 * {@link KnownDynamicsAuthenticationType} can be used interchangeably with DynamicsAuthenticationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Office365** \
 * **Ifd** \
 * **AADServicePrincipal**
 */
export declare type DynamicsAuthenticationType = string;

/** Dynamics AX linked service. */
export declare interface DynamicsAXLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "DynamicsAX";
    /** The Dynamics AX (or Dynamics 365 Finance and Operations) instance OData endpoint. */
    url: any;
    /** Specify the application's client ID. Type: string (or Expression with resultType string). */
    servicePrincipalId: any;
    /** Specify the application's key. Mark this field as a SecureString to store it securely in Data Factory, or reference a secret stored in Azure Key Vault. Type: string (or Expression with resultType string). */
    servicePrincipalKey: SecretBaseUnion;
    /** Specify the tenant information (domain name or tenant ID) under which your application resides. Retrieve it by hovering the mouse in the top-right corner of the Azure portal. Type: string (or Expression with resultType string). */
    tenant: any;
    /** Specify the resource you are requesting authorization. Type: string (or Expression with resultType string). */
    aadResourceId: any;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** The path of the Dynamics AX OData entity. */
export declare interface DynamicsAXResourceDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "DynamicsAXResource";
    /** The path of the Dynamics AX OData entity. Type: string (or Expression with resultType string). */
    path: any;
}

/** A copy activity Dynamics AX source. */
export declare interface DynamicsAXSource extends TabularSource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "DynamicsAXSource";
    /** A query to retrieve data from source. Type: string (or Expression with resultType string). */
    query?: any;
    /** The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:05:00. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). */
    httpRequestTimeout?: any;
}

/** The Dynamics CRM entity dataset. */
export declare interface DynamicsCrmEntityDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "DynamicsCrmEntity";
    /** The logical name of the entity. Type: string (or Expression with resultType string). */
    entityName?: any;
}

/** Dynamics CRM linked service. */
export declare interface DynamicsCrmLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "DynamicsCrm";
    /** The deployment type of the Dynamics CRM instance. 'Online' for Dynamics CRM Online and 'OnPremisesWithIfd' for Dynamics CRM on-premises with Ifd. Type: string (or Expression with resultType string). */
    deploymentType: any;
    /** The host name of the on-premises Dynamics CRM server. The property is required for on-prem and not allowed for online. Type: string (or Expression with resultType string). */
    hostName?: any;
    /** The port of on-premises Dynamics CRM server. The property is required for on-prem and not allowed for online. Default is 443. Type: integer (or Expression with resultType integer), minimum: 0. */
    port?: any;
    /** The URL to the Microsoft Dynamics CRM server. The property is required for on-line and not allowed for on-prem. Type: string (or Expression with resultType string). */
    serviceUri?: any;
    /** The organization name of the Dynamics CRM instance. The property is required for on-prem and required for online when there are more than one Dynamics CRM instances associated with the user. Type: string (or Expression with resultType string). */
    organizationName?: any;
    /** The authentication type to connect to Dynamics CRM server. 'Office365' for online scenario, 'Ifd' for on-premises with Ifd scenario, 'AADServicePrincipal' for Server-To-Server authentication in online scenario. Type: string (or Expression with resultType string). */
    authenticationType: any;
    /** User name to access the Dynamics CRM instance. Type: string (or Expression with resultType string). */
    username?: any;
    /** Password to access the Dynamics CRM instance. */
    password?: SecretBaseUnion;
    /** The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string). */
    servicePrincipalId?: any;
    /** The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string). */
    servicePrincipalCredentialType?: any;
    /** The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference. */
    servicePrincipalCredential?: SecretBaseUnion;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** A copy activity Dynamics CRM sink. */
export declare interface DynamicsCrmSink extends CopySink {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "DynamicsCrmSink";
    /** The write behavior for the operation. */
    writeBehavior: DynamicsSinkWriteBehavior;
    /** The flag indicating whether to ignore null values from input dataset (except key fields) during write operation. Default is false. Type: boolean (or Expression with resultType boolean). */
    ignoreNullValues?: any;
    /** The logical name of the alternate key which will be used when upserting records. Type: string (or Expression with resultType string). */
    alternateKeyName?: any;
}

/** A copy activity Dynamics CRM source. */
export declare interface DynamicsCrmSource extends CopySource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "DynamicsCrmSource";
    /** FetchXML is a proprietary query language that is used in Microsoft Dynamics CRM (online & on-premises). Type: string (or Expression with resultType string). */
    query?: any;
    /** Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). */
    additionalColumns?: any;
}

/**
 * Defines values for DynamicsDeploymentType. \
 * {@link KnownDynamicsDeploymentType} can be used interchangeably with DynamicsDeploymentType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Online** \
 * **OnPremisesWithIfd**
 */
export declare type DynamicsDeploymentType = string;

/** The Dynamics entity dataset. */
export declare interface DynamicsEntityDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "DynamicsEntity";
    /** The logical name of the entity. Type: string (or Expression with resultType string). */
    entityName?: any;
}

/** Dynamics linked service. */
export declare interface DynamicsLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Dynamics";
    /** The deployment type of the Dynamics instance. 'Online' for Dynamics Online and 'OnPremisesWithIfd' for Dynamics on-premises with Ifd. Type: string (or Expression with resultType string). */
    deploymentType: any;
    /** The host name of the on-premises Dynamics server. The property is required for on-prem and not allowed for online. Type: string (or Expression with resultType string). */
    hostName?: any;
    /** The port of on-premises Dynamics server. The property is required for on-prem and not allowed for online. Default is 443. Type: integer (or Expression with resultType integer), minimum: 0. */
    port?: any;
    /** The URL to the Microsoft Dynamics server. The property is required for on-line and not allowed for on-prem. Type: string (or Expression with resultType string). */
    serviceUri?: any;
    /** The organization name of the Dynamics instance. The property is required for on-prem and required for online when there are more than one Dynamics instances associated with the user. Type: string (or Expression with resultType string). */
    organizationName?: any;
    /** The authentication type to connect to Dynamics server. 'Office365' for online scenario, 'Ifd' for on-premises with Ifd scenario, 'AADServicePrincipal' for Server-To-Server authentication in online scenario. Type: string (or Expression with resultType string). */
    authenticationType: any;
    /** User name to access the Dynamics instance. Type: string (or Expression with resultType string). */
    username?: any;
    /** Password to access the Dynamics instance. */
    password?: SecretBaseUnion;
    /** The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string). */
    servicePrincipalId?: any;
    /** The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string). */
    servicePrincipalCredentialType?: any;
    /** The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference. */
    servicePrincipalCredential?: SecretBaseUnion;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
    /** The credential reference containing authentication information. */
    credential?: CredentialReference;
}

/** A copy activity Dynamics sink. */
export declare interface DynamicsSink extends CopySink {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "DynamicsSink";
    /** The write behavior for the operation. */
    writeBehavior: DynamicsSinkWriteBehavior;
    /** The flag indicating whether ignore null values from input dataset (except key fields) during write operation. Default is false. Type: boolean (or Expression with resultType boolean). */
    ignoreNullValues?: any;
    /** The logical name of the alternate key which will be used when upserting records. Type: string (or Expression with resultType string). */
    alternateKeyName?: any;
}

/**
 * Defines values for DynamicsSinkWriteBehavior. \
 * {@link KnownDynamicsSinkWriteBehavior} can be used interchangeably with DynamicsSinkWriteBehavior,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Upsert**
 */
export declare type DynamicsSinkWriteBehavior = string;

/** A copy activity Dynamics source. */
export declare interface DynamicsSource extends CopySource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "DynamicsSource";
    /** FetchXML is a proprietary query language that is used in Microsoft Dynamics (online & on-premises). Type: string (or Expression with resultType string). */
    query?: any;
    /** Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). */
    additionalColumns?: any;
}

/** Eloqua server linked service. */
export declare interface EloquaLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Eloqua";
    /** The endpoint of the Eloqua server. (i.e. eloqua.example.com) */
    endpoint: any;
    /** The site name and user name of your Eloqua account in the form: sitename/username. (i.e. Eloqua/Alice) */
    username: any;
    /** The password corresponding to the user name. */
    password?: SecretBaseUnion;
    /** Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. */
    useEncryptedEndpoints?: any;
    /** Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. */
    useHostVerification?: any;
    /** Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. */
    usePeerVerification?: any;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** Eloqua server dataset. */
export declare interface EloquaObjectDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "EloquaObject";
    /** The table name. Type: string (or Expression with resultType string). */
    tableName?: any;
}

/** A copy activity Eloqua server source. */
export declare interface EloquaSource extends TabularSource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "EloquaSource";
    /** A query to retrieve data from source. Type: string (or Expression with resultType string). */
    query?: any;
}

/** Definition of CMK for the factory. */
export declare interface EncryptionConfiguration {
    /** The name of the key in Azure Key Vault to use as Customer Managed Key. */
    keyName: string;
    /** The url of the Azure Key Vault used for CMK. */
    vaultBaseUrl: string;
    /** The version of the key used for CMK. If not provided, latest version will be used. */
    keyVersion?: string;
    /** User assigned identity to use to authenticate to customer's key vault. If not provided Managed Service Identity will be used. */
    identity?: CMKIdentityDefinition;
}

/** The entity reference. */
export declare interface EntityReference {
    /** The type of this referenced entity. */
    type?: IntegrationRuntimeEntityReferenceType;
    /** The name of this referenced entity. */
    referenceName?: string;
}

/** The custom setup of setting environment variable. */
export declare interface EnvironmentVariableSetup extends CustomSetupBase {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "EnvironmentVariableSetup";
    /** The name of the environment variable. */
    variableName: string;
    /** The value of the environment variable. */
    variableValue: string;
}

/**
 * Defines values for EventSubscriptionStatus. \
 * {@link KnownEventSubscriptionStatus} can be used interchangeably with EventSubscriptionStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Provisioning** \
 * **Deprovisioning** \
 * **Disabled** \
 * **Unknown**
 */
export declare type EventSubscriptionStatus = string;

/** Excel dataset. */
export declare interface ExcelDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Excel";
    /** The location of the excel storage. */
    location?: DatasetLocationUnion;
    /** The sheet name of excel file. Type: string (or Expression with resultType string). */
    sheetName?: any;
    /** The sheet index of excel file and default value is 0. Type: integer (or Expression with resultType integer) */
    sheetIndex?: any;
    /** The partial data of one sheet. Type: string (or Expression with resultType string). */
    range?: any;
    /** When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean). */
    firstRowAsHeader?: any;
    /** The data compression method used for the json dataset. */
    compression?: DatasetCompression;
    /** The null value string. Type: string (or Expression with resultType string). */
    nullValue?: any;
}

/** A copy activity excel source. */
export declare interface ExcelSource extends CopySource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "ExcelSource";
    /** Excel store settings. */
    storeSettings?: StoreReadSettingsUnion;
    /** Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). */
    additionalColumns?: any;
}

/** Execute data flow activity. */
export declare interface ExecuteDataFlowActivity extends ExecutionActivity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "ExecuteDataFlow";
    /** Data flow reference. */
    dataFlow: DataFlowReference;
    /** Staging info for execute data flow activity. */
    staging?: DataFlowStagingInfo;
    /** The integration runtime reference. */
    integrationRuntime?: IntegrationRuntimeReference;
    /** Compute properties for data flow activity. */
    compute?: ExecuteDataFlowActivityTypePropertiesCompute;
    /** Trace level setting used for data flow monitoring output. Supported values are: 'coarse', 'fine', and 'none'. Type: string (or Expression with resultType string) */
    traceLevel?: any;
    /** Continue on error setting used for data flow execution. Enables processing to continue if a sink fails. Type: boolean (or Expression with resultType boolean) */
    continueOnError?: any;
    /** Concurrent run setting used for data flow execution. Allows sinks with the same save order to be processed concurrently. Type: boolean (or Expression with resultType boolean) */
    runConcurrently?: any;
    /** Specify number of parallel staging for sources applicable to the sink. Type: integer (or Expression with resultType integer) */
    sourceStagingConcurrency?: any;
}

/** Execute data flow activity properties. */
export declare interface ExecuteDataFlowActivityTypeProperties {
    /** Data flow reference. */
    dataFlow: DataFlowReference;
    /** Staging info for execute data flow activity. */
    staging?: DataFlowStagingInfo;
    /** The integration runtime reference. */
    integrationRuntime?: IntegrationRuntimeReference;
    /** Compute properties for data flow activity. */
    compute?: ExecuteDataFlowActivityTypePropertiesCompute;
    /** Trace level setting used for data flow monitoring output. Supported values are: 'coarse', 'fine', and 'none'. Type: string (or Expression with resultType string) */
    traceLevel?: any;
    /** Continue on error setting used for data flow execution. Enables processing to continue if a sink fails. Type: boolean (or Expression with resultType boolean) */
    continueOnError?: any;
    /** Concurrent run setting used for data flow execution. Allows sinks with the same save order to be processed concurrently. Type: boolean (or Expression with resultType boolean) */
    runConcurrently?: any;
    /** Specify number of parallel staging for sources applicable to the sink. Type: integer (or Expression with resultType integer) */
    sourceStagingConcurrency?: any;
}

/** Compute properties for data flow activity. */
export declare interface ExecuteDataFlowActivityTypePropertiesCompute {
    /** Compute type of the cluster which will execute data flow job. Possible values include: 'General', 'MemoryOptimized', 'ComputeOptimized'. Type: string (or Expression with resultType string) */
    computeType?: any;
    /** Core count of the cluster which will execute data flow job. Supported values are: 8, 16, 32, 48, 80, 144 and 272. Type: integer (or Expression with resultType integer) */
    coreCount?: any;
}

/** Execute pipeline activity. */
export declare interface ExecutePipelineActivity extends ControlActivity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "ExecutePipeline";
    /** Execute pipeline activity policy. */
    policy?: ExecutePipelineActivityPolicy;
    /** Pipeline reference. */
    pipeline: PipelineReference;
    /** Pipeline parameters. */
    parameters?: {
        [propertyName: string]: any;
    };
    /** Defines whether activity execution will wait for the dependent pipeline execution to finish. Default is false. */
    waitOnCompletion?: boolean;
}

/** Execution policy for an execute pipeline activity. */
export declare interface ExecutePipelineActivityPolicy {
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /** When set to true, Input from activity is considered as secure and will not be logged to monitoring. */
    secureInput?: boolean;
}

/** Execute power query data flow activity properties. */
export declare interface ExecutePowerQueryActivityTypeProperties extends ExecuteDataFlowActivityTypeProperties {
    /** (Deprecated. Please use Queries). List of Power Query activity sinks mapped to a queryName. */
    sinks?: {
        [propertyName: string]: PowerQuerySink;
    };
    /** List of mapping for Power Query mashup query to sink dataset(s). */
    queries?: PowerQuerySinkMapping[];
}

/** Execute SSIS package activity. */
export declare interface ExecuteSsisPackageActivity extends ExecutionActivity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "ExecuteSSISPackage";
    /** SSIS package location. */
    packageLocation: SsisPackageLocation;
    /** Specifies the runtime to execute SSIS package. The value should be "x86" or "x64". Type: string (or Expression with resultType string). */
    runtime?: any;
    /** The logging level of SSIS package execution. Type: string (or Expression with resultType string). */
    loggingLevel?: any;
    /** The environment path to execute the SSIS package. Type: string (or Expression with resultType string). */
    environmentPath?: any;
    /** The package execution credential. */
    executionCredential?: SsisExecutionCredential;
    /** The integration runtime reference. */
    connectVia: IntegrationRuntimeReference;
    /** The project level parameters to execute the SSIS package. */
    projectParameters?: {
        [propertyName: string]: SsisExecutionParameter;
    };
    /** The package level parameters to execute the SSIS package. */
    packageParameters?: {
        [propertyName: string]: SsisExecutionParameter;
    };
    /** The project level connection managers to execute the SSIS package. */
    projectConnectionManagers?: {
        [propertyName: string]: {
            [propertyName: string]: SsisExecutionParameter;
        };
    };
    /** The package level connection managers to execute the SSIS package. */
    packageConnectionManagers?: {
        [propertyName: string]: {
            [propertyName: string]: SsisExecutionParameter;
        };
    };
    /** The property overrides to execute the SSIS package. */
    propertyOverrides?: {
        [propertyName: string]: SsisPropertyOverride;
    };
    /** SSIS package execution log location. */
    logLocation?: SsisLogLocation;
}

/** Execute power query activity. */
export declare interface ExecuteWranglingDataflowActivity extends Activity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "ExecuteWranglingDataflow";
    /** Activity policy. */
    policy?: ActivityPolicy;
    /** Data flow reference. */
    dataFlow: DataFlowReference;
    /** Staging info for execute data flow activity. */
    staging?: DataFlowStagingInfo;
    /** The integration runtime reference. */
    integrationRuntime?: IntegrationRuntimeReference;
    /** Compute properties for data flow activity. */
    compute?: ExecuteDataFlowActivityTypePropertiesCompute;
    /** Trace level setting used for data flow monitoring output. Supported values are: 'coarse', 'fine', and 'none'. Type: string (or Expression with resultType string) */
    traceLevel?: any;
    /** Continue on error setting used for data flow execution. Enables processing to continue if a sink fails. Type: boolean (or Expression with resultType boolean) */
    continueOnError?: any;
    /** Concurrent run setting used for data flow execution. Allows sinks with the same save order to be processed concurrently. Type: boolean (or Expression with resultType boolean) */
    runConcurrently?: any;
    /** Specify number of parallel staging for sources applicable to the sink. Type: integer (or Expression with resultType integer) */
    sourceStagingConcurrency?: any;
    /** (Deprecated. Please use Queries). List of Power Query activity sinks mapped to a queryName. */
    sinks?: {
        [propertyName: string]: PowerQuerySink;
    };
    /** List of mapping for Power Query mashup query to sink dataset(s). */
    queries?: PowerQuerySinkMapping[];
}

/** Base class for all execution activities. */
export declare interface ExecutionActivity extends Activity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Execution" | "Copy" | "HDInsightHive" | "HDInsightPig" | "HDInsightMapReduce" | "HDInsightStreaming" | "HDInsightSpark" | "ExecuteSSISPackage" | "Custom" | "SqlServerStoredProcedure" | "Delete" | "AzureDataExplorerCommand" | "Lookup" | "WebActivity" | "GetMetadata" | "AzureMLBatchExecution" | "AzureMLUpdateResource" | "AzureMLExecutePipeline" | "DataLakeAnalyticsU-SQL" | "DatabricksNotebook" | "DatabricksSparkJar" | "DatabricksSparkPython" | "AzureFunctionActivity" | "ExecuteDataFlow" | "Script" | "SynapseNotebook" | "SparkJob";
    /** Linked service reference. */
    linkedServiceName?: LinkedServiceReference;
    /** Activity policy. */
    policy?: ActivityPolicy;
}

export declare type ExecutionActivityUnion = ExecutionActivity | CopyActivity | HDInsightHiveActivity | HDInsightPigActivity | HDInsightMapReduceActivity | HDInsightStreamingActivity | HDInsightSparkActivity | ExecuteSsisPackageActivity | CustomActivity | SqlServerStoredProcedureActivity | DeleteActivity | AzureDataExplorerCommandActivity | LookupActivity | WebActivity | GetMetadataActivity | AzureMLBatchExecutionActivity | AzureMLUpdateResourceActivity | AzureMLExecutePipelineActivity | DataLakeAnalyticsUsqlActivity | DatabricksNotebookActivity | DatabricksSparkJarActivity | DatabricksSparkPythonActivity | AzureFunctionActivity | ExecuteDataFlowActivity | ScriptActivity | SynapseNotebookActivity | SynapseSparkJobDefinitionActivity;

/** Export command settings. */
export declare interface ExportSettings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SnowflakeExportCopyCommand" | "AzureDatabricksDeltaLakeExportCommand";
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
}

export declare type ExportSettingsUnion = ExportSettings | SnowflakeExportCopyCommand | AzureDatabricksDeltaLakeExportCommand;

/** Interface representing a ExposureControl. */
export declare interface ExposureControl {
    /**
     * Get exposure control feature for specific location.
     * @param locationId The location identifier.
     * @param exposureControlRequest The exposure control request.
     * @param options The options parameters.
     */
    getFeatureValue(locationId: string, exposureControlRequest: ExposureControlRequest, options?: ExposureControlGetFeatureValueOptionalParams): Promise<ExposureControlGetFeatureValueResponse>;
    /**
     * Get exposure control feature for specific factory.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param exposureControlRequest The exposure control request.
     * @param options The options parameters.
     */
    getFeatureValueByFactory(resourceGroupName: string, factoryName: string, exposureControlRequest: ExposureControlRequest, options?: ExposureControlGetFeatureValueByFactoryOptionalParams): Promise<ExposureControlGetFeatureValueByFactoryResponse>;
    /**
     * Get list of exposure control features for specific factory.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param exposureControlBatchRequest The exposure control request for list of features.
     * @param options The options parameters.
     */
    queryFeatureValuesByFactory(resourceGroupName: string, factoryName: string, exposureControlBatchRequest: ExposureControlBatchRequest, options?: ExposureControlQueryFeatureValuesByFactoryOptionalParams): Promise<ExposureControlQueryFeatureValuesByFactoryResponse>;
}

/** A list of exposure control features. */
export declare interface ExposureControlBatchRequest {
    /** List of exposure control features. */
    exposureControlRequests: ExposureControlRequest[];
}

/** A list of exposure control feature values. */
export declare interface ExposureControlBatchResponse {
    /** List of exposure control feature values. */
    exposureControlResponses: ExposureControlResponse[];
}

/** Optional parameters. */
export declare interface ExposureControlGetFeatureValueByFactoryOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getFeatureValueByFactory operation. */
export declare type ExposureControlGetFeatureValueByFactoryResponse = ExposureControlResponse;

/** Optional parameters. */
export declare interface ExposureControlGetFeatureValueOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getFeatureValue operation. */
export declare type ExposureControlGetFeatureValueResponse = ExposureControlResponse;

/** Optional parameters. */
export declare interface ExposureControlQueryFeatureValuesByFactoryOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the queryFeatureValuesByFactory operation. */
export declare type ExposureControlQueryFeatureValuesByFactoryResponse = ExposureControlBatchResponse;

/** The exposure control request. */
export declare interface ExposureControlRequest {
    /** The feature name. */
    featureName?: string;
    /** The feature type. */
    featureType?: string;
}

/** The exposure control response. */
export declare interface ExposureControlResponse {
    /**
     * The feature name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly featureName?: string;
    /**
     * The feature value.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: string;
}

/** Azure Data Factory expression definition. */
export declare interface Expression {
    /** Expression type. */
    type: "Expression";
    /** Expression value. */
    value: string;
}

/** Interface representing a Factories. */
export declare interface Factories {
    /**
     * Lists factories under the specified subscription.
     * @param options The options parameters.
     */
    list(options?: FactoriesListOptionalParams): PagedAsyncIterableIterator<Factory>;
    /**
     * Lists factories.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: FactoriesListByResourceGroupOptionalParams): PagedAsyncIterableIterator<Factory>;
    /**
     * Updates a factory's repo information.
     * @param locationId The location identifier.
     * @param factoryRepoUpdate Update factory repo request definition.
     * @param options The options parameters.
     */
    configureFactoryRepo(locationId: string, factoryRepoUpdate: FactoryRepoUpdate, options?: FactoriesConfigureFactoryRepoOptionalParams): Promise<FactoriesConfigureFactoryRepoResponse>;
    /**
     * Creates or updates a factory.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param factory Factory resource definition.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, factoryName: string, factory: Factory, options?: FactoriesCreateOrUpdateOptionalParams): Promise<FactoriesCreateOrUpdateResponse>;
    /**
     * Updates a factory.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param factoryUpdateParameters The parameters for updating a factory.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, factoryName: string, factoryUpdateParameters: FactoryUpdateParameters, options?: FactoriesUpdateOptionalParams): Promise<FactoriesUpdateResponse>;
    /**
     * Gets a factory.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, factoryName: string, options?: FactoriesGetOptionalParams): Promise<FactoriesGetResponse>;
    /**
     * Deletes a factory.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, factoryName: string, options?: FactoriesDeleteOptionalParams): Promise<void>;
    /**
     * Get GitHub Access Token.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param gitHubAccessTokenRequest Get GitHub access token request definition.
     * @param options The options parameters.
     */
    getGitHubAccessToken(resourceGroupName: string, factoryName: string, gitHubAccessTokenRequest: GitHubAccessTokenRequest, options?: FactoriesGetGitHubAccessTokenOptionalParams): Promise<FactoriesGetGitHubAccessTokenResponse>;
    /**
     * Get Data Plane access.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param policy Data Plane user access policy definition.
     * @param options The options parameters.
     */
    getDataPlaneAccess(resourceGroupName: string, factoryName: string, policy: UserAccessPolicy, options?: FactoriesGetDataPlaneAccessOptionalParams): Promise<FactoriesGetDataPlaneAccessResponse>;
}

/** Optional parameters. */
export declare interface FactoriesConfigureFactoryRepoOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the configureFactoryRepo operation. */
export declare type FactoriesConfigureFactoryRepoResponse = Factory;

/** Optional parameters. */
export declare interface FactoriesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** ETag of the factory entity. Should only be specified for update, for which it should match existing entity or can be * for unconditional update. */
    ifMatch?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type FactoriesCreateOrUpdateResponse = Factory;

/** Optional parameters. */
export declare interface FactoriesDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface FactoriesGetDataPlaneAccessOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getDataPlaneAccess operation. */
export declare type FactoriesGetDataPlaneAccessResponse = AccessPolicyResponse;

/** Optional parameters. */
export declare interface FactoriesGetGitHubAccessTokenOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getGitHubAccessToken operation. */
export declare type FactoriesGetGitHubAccessTokenResponse = GitHubAccessTokenResponse;

/** Optional parameters. */
export declare interface FactoriesGetOptionalParams extends coreClient.OperationOptions {
    /** ETag of the factory entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. */
    ifNoneMatch?: string;
}

/** Contains response data for the get operation. */
export declare type FactoriesGetResponse = Factory;

/** Optional parameters. */
export declare interface FactoriesListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type FactoriesListByResourceGroupNextResponse = FactoryListResponse;

/** Optional parameters. */
export declare interface FactoriesListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type FactoriesListByResourceGroupResponse = FactoryListResponse;

/** Optional parameters. */
export declare interface FactoriesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type FactoriesListNextResponse = FactoryListResponse;

/** Optional parameters. */
export declare interface FactoriesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type FactoriesListResponse = FactoryListResponse;

/** Optional parameters. */
export declare interface FactoriesUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type FactoriesUpdateResponse = Factory;

/** Factory resource type. */
export declare interface Factory extends Resource {
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /** Managed service identity of the factory. */
    identity?: FactoryIdentity;
    /**
     * Factory provisioning state, example Succeeded.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /**
     * Time the factory was created in ISO8601 format.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createTime?: Date;
    /**
     * Version of the factory.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly version?: string;
    /** Purview information of the factory. */
    purviewConfiguration?: PurviewConfiguration;
    /** Git repo information of the factory. */
    repoConfiguration?: FactoryRepoConfigurationUnion;
    /** List of parameters for factory. */
    globalParameters?: {
        [propertyName: string]: GlobalParameterSpecification;
    };
    /** Properties to enable Customer Managed Key for the factory. */
    encryption?: EncryptionConfiguration;
    /** Whether or not public network access is allowed for the data factory. */
    publicNetworkAccess?: PublicNetworkAccess;
}

/** Factory's GitHub repo information. */
export declare interface FactoryGitHubConfiguration extends FactoryRepoConfiguration {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "FactoryGitHubConfiguration";
    /** GitHub Enterprise host name. For example: `https://github.mydomain.com` */
    hostName?: string;
    /** GitHub bring your own app client id. */
    clientId?: string;
    /** GitHub bring your own app client secret information. */
    clientSecret?: GitHubClientSecret;
}

/** Identity properties of the factory resource. */
export declare interface FactoryIdentity {
    /** The identity type. */
    type: FactoryIdentityType;
    /**
     * The principal id of the identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
    /**
     * The client tenant id of the identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
    /** List of user assigned identities for the factory. */
    userAssignedIdentities?: {
        [propertyName: string]: any;
    };
}

/**
 * Defines values for FactoryIdentityType. \
 * {@link KnownFactoryIdentityType} can be used interchangeably with FactoryIdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SystemAssigned** \
 * **UserAssigned** \
 * **SystemAssigned,UserAssigned**
 */
export declare type FactoryIdentityType = string;

/** A list of factory resources. */
export declare interface FactoryListResponse {
    /** List of factories. */
    value: Factory[];
    /** The link to the next page of results, if any remaining results exist. */
    nextLink?: string;
}

/** Factory's git repo information. */
export declare interface FactoryRepoConfiguration {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "FactoryVSTSConfiguration" | "FactoryGitHubConfiguration";
    /** Account name. */
    accountName: string;
    /** Repository name. */
    repositoryName: string;
    /** Collaboration branch. */
    collaborationBranch: string;
    /** Root folder. */
    rootFolder: string;
    /** Last commit id. */
    lastCommitId?: string;
    /** Disable manual publish operation in ADF studio to favor automated publish. */
    disablePublish?: boolean;
}

export declare type FactoryRepoConfigurationUnion = FactoryRepoConfiguration | FactoryVstsConfiguration | FactoryGitHubConfiguration;

/** Factory's git repo information. */
export declare interface FactoryRepoUpdate {
    /** The factory resource id. */
    factoryResourceId?: string;
    /** Git repo information of the factory. */
    repoConfiguration?: FactoryRepoConfigurationUnion;
}

/** Parameters for updating a factory resource. */
export declare interface FactoryUpdateParameters {
    /** The resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** Managed service identity of the factory. */
    identity?: FactoryIdentity;
    /** Whether or not public network access is allowed for the data factory. */
    publicNetworkAccess?: PublicNetworkAccess;
}

/** Factory's VSTS repo information. */
export declare interface FactoryVstsConfiguration extends FactoryRepoConfiguration {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "FactoryVSTSConfiguration";
    /** VSTS project name. */
    projectName: string;
    /** VSTS tenant id. */
    tenantId?: string;
}

/** This activity will fail within its own scope and output a custom error message and error code. The error message and code can provided either as a string literal or as an expression that can be evaluated to a string at runtime. The activity scope can be the whole pipeline or a control activity (e.g. foreach, switch, until), if the fail activity is contained in it. */
export declare interface FailActivity extends ControlActivity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Fail";
    /** The error message that surfaced in the Fail activity. It can be dynamic content that's evaluated to a non empty/blank string at runtime. Type: string (or Expression with resultType string). */
    message: any;
    /** The error code that categorizes the error type of the Fail activity. It can be dynamic content that's evaluated to a non empty/blank string at runtime. Type: string (or Expression with resultType string). */
    errorCode: any;
}

/** File system linked service. */
export declare interface FileServerLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "FileServer";
    /** Host name of the server. Type: string (or Expression with resultType string). */
    host: any;
    /** User ID to logon the server. Type: string (or Expression with resultType string). */
    userId?: any;
    /** Password to logon the server. */
    password?: SecretBaseUnion;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** The location of file server dataset. */
export declare interface FileServerLocation extends DatasetLocation {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "FileServerLocation";
}

/** File server read settings. */
export declare interface FileServerReadSettings extends StoreReadSettings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "FileServerReadSettings";
    /** If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean). */
    recursive?: any;
    /** FileServer wildcardFolderPath. Type: string (or Expression with resultType string). */
    wildcardFolderPath?: any;
    /** FileServer wildcardFileName. Type: string (or Expression with resultType string). */
    wildcardFileName?: any;
    /** Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string). */
    fileListPath?: any;
    /** Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean). */
    enablePartitionDiscovery?: any;
    /** Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string). */
    partitionRootPath?: any;
    /** Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean). */
    deleteFilesAfterCompletion?: any;
    /** The start of file's modified datetime. Type: string (or Expression with resultType string). */
    modifiedDatetimeStart?: any;
    /** The end of file's modified datetime. Type: string (or Expression with resultType string). */
    modifiedDatetimeEnd?: any;
    /** Specify a filter to be used to select a subset of files in the folderPath rather than all files. Type: string (or Expression with resultType string). */
    fileFilter?: any;
}

/** File server write settings. */
export declare interface FileServerWriteSettings extends StoreWriteSettings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "FileServerWriteSettings";
}

/** An on-premises file system dataset. */
export declare interface FileShareDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "FileShare";
    /** The path of the on-premises file system. Type: string (or Expression with resultType string). */
    folderPath?: any;
    /** The name of the on-premises file system. Type: string (or Expression with resultType string). */
    fileName?: any;
    /** The start of file's modified datetime. Type: string (or Expression with resultType string). */
    modifiedDatetimeStart?: any;
    /** The end of file's modified datetime. Type: string (or Expression with resultType string). */
    modifiedDatetimeEnd?: any;
    /** The format of the files. */
    format?: DatasetStorageFormatUnion;
    /** Specify a filter to be used to select a subset of files in the folderPath rather than all files. Type: string (or Expression with resultType string). */
    fileFilter?: any;
    /** The data compression method used for the file system. */
    compression?: DatasetCompression;
}

/** A copy activity file system sink. */
export declare interface FileSystemSink extends CopySink {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "FileSystemSink";
    /** The type of copy behavior for copy sink. */
    copyBehavior?: any;
}

/** A copy activity file system source. */
export declare interface FileSystemSource extends CopySource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "FileSystemSource";
    /** If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean). */
    recursive?: any;
    /** Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). */
    additionalColumns?: any;
}

/** Filter and return results from input array based on the conditions. */
export declare interface FilterActivity extends ControlActivity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Filter";
    /** Input array on which filter should be applied. */
    items: Expression;
    /** Condition to be used for filtering the input. */
    condition: Expression;
}

/** Data flow flowlet */
export declare interface Flowlet extends DataFlow {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Flowlet";
    /** List of sources in Flowlet. */
    sources?: DataFlowSource[];
    /** List of sinks in Flowlet. */
    sinks?: DataFlowSink[];
    /** List of transformations in Flowlet. */
    transformations?: Transformation[];
    /** Flowlet script. */
    script?: string;
    /** Flowlet script lines. */
    scriptLines?: string[];
}

/** This activity is used for iterating over a collection and execute given activities. */
export declare interface ForEachActivity extends ControlActivity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "ForEach";
    /** Should the loop be executed in sequence or in parallel (max 50) */
    isSequential?: boolean;
    /** Batch count to be used for controlling the number of parallel execution (when isSequential is set to false). */
    batchCount?: number;
    /** Collection to iterate. */
    items: Expression;
    /** List of activities to execute . */
    activities: ActivityUnion[];
}

/** Format read settings. */
export declare interface FormatReadSettings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "ParquetReadSettings" | "DelimitedTextReadSettings" | "JsonReadSettings" | "XmlReadSettings" | "BinaryReadSettings";
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
}

export declare type FormatReadSettingsUnion = FormatReadSettings | ParquetReadSettings | DelimitedTextReadSettings | JsonReadSettings | XmlReadSettings | BinaryReadSettings;

/** Format write settings. */
export declare interface FormatWriteSettings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AvroWriteSettings" | "OrcWriteSettings" | "ParquetWriteSettings" | "DelimitedTextWriteSettings" | "JsonWriteSettings";
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
}

export declare type FormatWriteSettingsUnion = FormatWriteSettings | AvroWriteSettings | OrcWriteSettings | ParquetWriteSettings | DelimitedTextWriteSettings | JsonWriteSettings;

/**
 * Defines values for FrequencyType. \
 * {@link KnownFrequencyType} can be used interchangeably with FrequencyType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Hour** \
 * **Minute** \
 * **Second**
 */
export declare type FrequencyType = string;

/**
 * Defines values for FtpAuthenticationType. \
 * {@link KnownFtpAuthenticationType} can be used interchangeably with FtpAuthenticationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Basic** \
 * **Anonymous**
 */
export declare type FtpAuthenticationType = string;

/** Ftp read settings. */
export declare interface FtpReadSettings extends StoreReadSettings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "FtpReadSettings";
    /** If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean). */
    recursive?: any;
    /** Ftp wildcardFolderPath. Type: string (or Expression with resultType string). */
    wildcardFolderPath?: any;
    /** Ftp wildcardFileName. Type: string (or Expression with resultType string). */
    wildcardFileName?: any;
    /** Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean). */
    enablePartitionDiscovery?: any;
    /** Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string). */
    partitionRootPath?: any;
    /** Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean). */
    deleteFilesAfterCompletion?: any;
    /** Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string). */
    fileListPath?: any;
    /** Specify whether to use binary transfer mode for FTP stores. Type: boolean (or Expression with resultType boolean). */
    useBinaryTransfer?: any;
    /** If true, disable parallel reading within each file. Default is false. Type: boolean (or Expression with resultType boolean). */
    disableChunking?: any;
}

/** A FTP server Linked Service. */
export declare interface FtpServerLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "FtpServer";
    /** Host name of the FTP server. Type: string (or Expression with resultType string). */
    host: any;
    /** The TCP port number that the FTP server uses to listen for client connections. Default value is 21. Type: integer (or Expression with resultType integer), minimum: 0. */
    port?: any;
    /** The authentication type to be used to connect to the FTP server. */
    authenticationType?: FtpAuthenticationType;
    /** Username to logon the FTP server. Type: string (or Expression with resultType string). */
    userName?: any;
    /** Password to logon the FTP server. */
    password?: SecretBaseUnion;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
    /** If true, connect to the FTP server over SSL/TLS channel. Default value is true. Type: boolean (or Expression with resultType boolean). */
    enableSsl?: any;
    /** If true, validate the FTP server SSL certificate when connect over SSL/TLS channel. Default value is true. Type: boolean (or Expression with resultType boolean). */
    enableServerCertificateValidation?: any;
}

/** The location of ftp server dataset. */
export declare interface FtpServerLocation extends DatasetLocation {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "FtpServerLocation";
}

/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/** Response body structure for get data factory operation status. */
export declare interface GetDataFactoryOperationStatusResponse {
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /** Status of the operation. */
    status?: string;
}

/** Activity to get metadata of dataset */
export declare interface GetMetadataActivity extends ExecutionActivity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "GetMetadata";
    /** GetMetadata activity dataset reference. */
    dataset: DatasetReference;
    /** Fields of metadata to get from dataset. */
    fieldList?: any[];
    /** GetMetadata activity store settings. */
    storeSettings?: StoreReadSettingsUnion;
    /** GetMetadata activity format settings. */
    formatSettings?: FormatReadSettingsUnion;
}

/** The request payload of get SSIS object metadata. */
export declare interface GetSsisObjectMetadataRequest {
    /** Metadata path. */
    metadataPath?: string;
}

/** Get GitHub access token request definition. */
export declare interface GitHubAccessTokenRequest {
    /** GitHub access code. */
    gitHubAccessCode: string;
    /** GitHub application client ID. */
    gitHubClientId?: string;
    /** GitHub bring your own app client secret information. */
    gitHubClientSecret?: GitHubClientSecret;
    /** GitHub access token base URL. */
    gitHubAccessTokenBaseUrl: string;
}

/** Get GitHub access token response definition. */
export declare interface GitHubAccessTokenResponse {
    /** GitHub access token. */
    gitHubAccessToken?: string;
}

/** Client secret information for factory's bring your own app repository configuration. */
export declare interface GitHubClientSecret {
    /** Bring your own app client secret AKV URL. */
    byoaSecretAkvUrl?: string;
    /** Bring your own app client secret name in AKV. */
    byoaSecretName?: string;
}

/** A list of Global parameters. */
export declare interface GlobalParameterListResponse {
    /** List of global parameters. */
    value: GlobalParameterResource[];
    /** The link to the next page of results, if any remaining results exist. */
    nextLink?: string;
}

/** Global parameters resource type. */
export declare interface GlobalParameterResource extends SubResource {
    /** Properties of the global parameter. */
    properties: {
        [propertyName: string]: GlobalParameterSpecification;
    };
}

/** Interface representing a GlobalParameters. */
export declare interface GlobalParameters {
    /**
     * Lists Global parameters
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param options The options parameters.
     */
    listByFactory(resourceGroupName: string, factoryName: string, options?: GlobalParametersListByFactoryOptionalParams): PagedAsyncIterableIterator<GlobalParameterResource>;
    /**
     * Gets a Global parameter
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param globalParameterName The global parameter name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, factoryName: string, globalParameterName: string, options?: GlobalParametersGetOptionalParams): Promise<GlobalParametersGetResponse>;
    /**
     * Creates or updates a Global parameter
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param globalParameterName The global parameter name.
     * @param defaultParam Global parameter resource definition.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, factoryName: string, globalParameterName: string, defaultParam: GlobalParameterResource, options?: GlobalParametersCreateOrUpdateOptionalParams): Promise<GlobalParametersCreateOrUpdateResponse>;
    /**
     * Deletes a Global parameter
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param globalParameterName The global parameter name.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, factoryName: string, globalParameterName: string, options?: GlobalParametersDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface GlobalParametersCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type GlobalParametersCreateOrUpdateResponse = GlobalParameterResource;

/** Optional parameters. */
export declare interface GlobalParametersDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface GlobalParametersGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type GlobalParametersGetResponse = GlobalParameterResource;

/** Optional parameters. */
export declare interface GlobalParametersListByFactoryNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByFactoryNext operation. */
export declare type GlobalParametersListByFactoryNextResponse = GlobalParameterListResponse;

/** Optional parameters. */
export declare interface GlobalParametersListByFactoryOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByFactory operation. */
export declare type GlobalParametersListByFactoryResponse = GlobalParameterListResponse;

/** Definition of a single parameter for an entity. */
export declare interface GlobalParameterSpecification {
    /** Global Parameter type. */
    type: GlobalParameterType;
    /** Value of parameter. */
    value: any;
}

/**
 * Defines values for GlobalParameterType. \
 * {@link KnownGlobalParameterType} can be used interchangeably with GlobalParameterType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Object** \
 * **String** \
 * **Int** \
 * **Float** \
 * **Bool** \
 * **Array**
 */
export declare type GlobalParameterType = string;

/**
 * Defines values for GoogleAdWordsAuthenticationType. \
 * {@link KnownGoogleAdWordsAuthenticationType} can be used interchangeably with GoogleAdWordsAuthenticationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ServiceAuthentication** \
 * **UserAuthentication**
 */
export declare type GoogleAdWordsAuthenticationType = string;

/** Google AdWords service linked service. */
export declare interface GoogleAdWordsLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "GoogleAdWords";
    /** (Deprecated) Properties used to connect to GoogleAds. It is mutually exclusive with any other properties in the linked service. Type: object. */
    connectionProperties?: any;
    /** The Client customer ID of the AdWords account that you want to fetch report data for. Type: string (or Expression with resultType string). */
    clientCustomerID?: any;
    /** The developer token associated with the manager account that you use to grant access to the AdWords API. */
    developerToken?: SecretBaseUnion;
    /** The OAuth 2.0 authentication mechanism used for authentication. ServiceAuthentication can only be used on self-hosted IR. */
    authenticationType?: GoogleAdWordsAuthenticationType;
    /** The refresh token obtained from Google for authorizing access to AdWords for UserAuthentication. */
    refreshToken?: SecretBaseUnion;
    /** The client id of the google application used to acquire the refresh token. Type: string (or Expression with resultType string). */
    clientId?: any;
    /** The client secret of the google application used to acquire the refresh token. */
    clientSecret?: SecretBaseUnion;
    /** The service account email ID that is used for ServiceAuthentication and can only be used on self-hosted IR. Type: string (or Expression with resultType string). */
    email?: any;
    /** (Deprecated) The full path to the .p12 key file that is used to authenticate the service account email address and can only be used on self-hosted IR. Type: string (or Expression with resultType string). */
    keyFilePath?: any;
    /** (Deprecated) The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR. Type: string (or Expression with resultType string). */
    trustedCertPath?: any;
    /** (Deprecated) Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false. Type: boolean (or Expression with resultType boolean). */
    useSystemTrustStore?: any;
    /** The private key that is used to authenticate the service account email address and can only be used on self-hosted IR. */
    privateKey?: SecretBaseUnion;
    /** The customer ID of the Google Ads Manager account through which you want to fetch report data of specific Customer. Type: string (or Expression with resultType string). */
    loginCustomerID?: any;
    /** The Google Ads API major version such as v14. The supported major versions could be found on https://developers.google.com/google-ads/api/docs/release-notes. Type: string (or Expression with resultType string). */
    googleAdsApiVersion?: any;
    /** Specifies whether to use the legacy data type mappings, which maps float, int32 and int64 from Google to string. Do not set this to true unless you want to keep backward compatibility with legacy driver's data type mappings. Type: boolean (or Expression with resultType boolean). */
    supportLegacyDataTypes?: any;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** Google AdWords service dataset. */
export declare interface GoogleAdWordsObjectDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "GoogleAdWordsObject";
    /** The table name. Type: string (or Expression with resultType string). */
    tableName?: any;
}

/** A copy activity Google AdWords service source. */
export declare interface GoogleAdWordsSource extends TabularSource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "GoogleAdWordsSource";
    /** A query to retrieve data from source. Type: string (or Expression with resultType string). */
    query?: any;
}

/**
 * Defines values for GoogleBigQueryAuthenticationType. \
 * {@link KnownGoogleBigQueryAuthenticationType} can be used interchangeably with GoogleBigQueryAuthenticationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ServiceAuthentication** \
 * **UserAuthentication**
 */
export declare type GoogleBigQueryAuthenticationType = string;

/** Google BigQuery service linked service. */
export declare interface GoogleBigQueryLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "GoogleBigQuery";
    /** The default BigQuery project to query against. Type: string (or Expression with resultType string). */
    project: any;
    /** A comma-separated list of public BigQuery projects to access. Type: string (or Expression with resultType string). */
    additionalProjects?: any;
    /** Whether to request access to Google Drive. Allowing Google Drive access enables support for federated tables that combine BigQuery data with data from Google Drive. The default value is false. Type: string (or Expression with resultType string). */
    requestGoogleDriveScope?: any;
    /** The OAuth 2.0 authentication mechanism used for authentication. ServiceAuthentication can only be used on self-hosted IR. */
    authenticationType: GoogleBigQueryAuthenticationType;
    /** The refresh token obtained from Google for authorizing access to BigQuery for UserAuthentication. */
    refreshToken?: SecretBaseUnion;
    /** The client id of the google application used to acquire the refresh token. Type: string (or Expression with resultType string). */
    clientId?: any;
    /** The client secret of the google application used to acquire the refresh token. */
    clientSecret?: SecretBaseUnion;
    /** The service account email ID that is used for ServiceAuthentication and can only be used on self-hosted IR. Type: string (or Expression with resultType string). */
    email?: any;
    /** The full path to the .p12 key file that is used to authenticate the service account email address and can only be used on self-hosted IR. Type: string (or Expression with resultType string). */
    keyFilePath?: any;
    /** The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR. Type: string (or Expression with resultType string). */
    trustedCertPath?: any;
    /** Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.Type: boolean (or Expression with resultType boolean). */
    useSystemTrustStore?: any;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** Google BigQuery service dataset. */
export declare interface GoogleBigQueryObjectDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "GoogleBigQueryObject";
    /** This property will be retired. Please consider using database + table properties instead. */
    tableName?: any;
    /** The table name of the Google BigQuery. Type: string (or Expression with resultType string). */
    table?: any;
    /** The database name of the Google BigQuery. Type: string (or Expression with resultType string). */
    dataset?: any;
}

/** A copy activity Google BigQuery service source. */
export declare interface GoogleBigQuerySource extends TabularSource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "GoogleBigQuerySource";
    /** A query to retrieve data from source. Type: string (or Expression with resultType string). */
    query?: any;
}

/** Linked service for Google Cloud Storage. */
export declare interface GoogleCloudStorageLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "GoogleCloudStorage";
    /** The access key identifier of the Google Cloud Storage Identity and Access Management (IAM) user. Type: string (or Expression with resultType string). */
    accessKeyId?: any;
    /** The secret access key of the Google Cloud Storage Identity and Access Management (IAM) user. */
    secretAccessKey?: SecretBaseUnion;
    /** This value specifies the endpoint to access with the Google Cloud Storage Connector. This is an optional property; change it only if you want to try a different service endpoint or want to switch between https and http. Type: string (or Expression with resultType string). */
    serviceUrl?: any;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** The location of Google Cloud Storage dataset. */
export declare interface GoogleCloudStorageLocation extends DatasetLocation {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "GoogleCloudStorageLocation";
    /** Specify the bucketName of Google Cloud Storage. Type: string (or Expression with resultType string) */
    bucketName?: any;
    /** Specify the version of Google Cloud Storage. Type: string (or Expression with resultType string). */
    version?: any;
}

/** Google Cloud Storage read settings. */
export declare interface GoogleCloudStorageReadSettings extends StoreReadSettings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "GoogleCloudStorageReadSettings";
    /** If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean). */
    recursive?: any;
    /** Google Cloud Storage wildcardFolderPath. Type: string (or Expression with resultType string). */
    wildcardFolderPath?: any;
    /** Google Cloud Storage wildcardFileName. Type: string (or Expression with resultType string). */
    wildcardFileName?: any;
    /** The prefix filter for the Google Cloud Storage object name. Type: string (or Expression with resultType string). */
    prefix?: any;
    /** Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string). */
    fileListPath?: any;
    /** Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean). */
    enablePartitionDiscovery?: any;
    /** Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string). */
    partitionRootPath?: any;
    /** Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean). */
    deleteFilesAfterCompletion?: any;
    /** The start of file's modified datetime. Type: string (or Expression with resultType string). */
    modifiedDatetimeStart?: any;
    /** The end of file's modified datetime. Type: string (or Expression with resultType string). */
    modifiedDatetimeEnd?: any;
}

/** Linked service for GoogleSheets. */
export declare interface GoogleSheetsLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "GoogleSheets";
    /** The api token for the GoogleSheets source. */
    apiToken: SecretBaseUnion;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** Greenplum Database linked service. */
export declare interface GreenplumLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Greenplum";
    /** An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference. */
    connectionString?: any;
    /** The Azure key vault secret reference of password in connection string. */
    pwd?: AzureKeyVaultSecretReference;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** A copy activity Greenplum Database source. */
export declare interface GreenplumSource extends TabularSource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "GreenplumSource";
    /** A query to retrieve data from source. Type: string (or Expression with resultType string). */
    query?: any;
}

/** Greenplum Database dataset. */
export declare interface GreenplumTableDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "GreenplumTable";
    /** This property will be retired. Please consider using schema + table properties instead. */
    tableName?: any;
    /** The table name of Greenplum. Type: string (or Expression with resultType string). */
    table?: any;
    /** The schema name of Greenplum. Type: string (or Expression with resultType string). */
    schemaTypePropertiesSchema?: any;
}

/**
 * Defines values for HBaseAuthenticationType. \
 * {@link KnownHBaseAuthenticationType} can be used interchangeably with HBaseAuthenticationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Anonymous** \
 * **Basic**
 */
export declare type HBaseAuthenticationType = string;

/** HBase server linked service. */
export declare interface HBaseLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "HBase";
    /** The IP address or host name of the HBase server. (i.e. 192.168.222.160) */
    host: any;
    /** The TCP port that the HBase instance uses to listen for client connections. The default value is 9090. */
    port?: any;
    /** The partial URL corresponding to the HBase server. (i.e. /gateway/sandbox/hbase/version) */
    httpPath?: any;
    /** The authentication mechanism to use to connect to the HBase server. */
    authenticationType: HBaseAuthenticationType;
    /** The user name used to connect to the HBase instance. */
    username?: any;
    /** The password corresponding to the user name. */
    password?: SecretBaseUnion;
    /** Specifies whether the connections to the server are encrypted using SSL. The default value is false. */
    enableSsl?: any;
    /** The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR. */
    trustedCertPath?: any;
    /** Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false. */
    allowHostNameCNMismatch?: any;
    /** Specifies whether to allow self-signed certificates from the server. The default value is false. */
    allowSelfSignedServerCert?: any;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** HBase server dataset. */
export declare interface HBaseObjectDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "HBaseObject";
    /** The table name. Type: string (or Expression with resultType string). */
    tableName?: any;
}

/** A copy activity HBase server source. */
export declare interface HBaseSource extends TabularSource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "HBaseSource";
    /** A query to retrieve data from source. Type: string (or Expression with resultType string). */
    query?: any;
}

/** Hadoop Distributed File System (HDFS) linked service. */
export declare interface HdfsLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Hdfs";
    /** The URL of the HDFS service endpoint, e.g. http://myhostname:50070/webhdfs/v1 . Type: string (or Expression with resultType string). */
    url: any;
    /** Type of authentication used to connect to the HDFS. Possible values are: Anonymous and Windows. Type: string (or Expression with resultType string). */
    authenticationType?: any;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
    /** User name for Windows authentication. Type: string (or Expression with resultType string). */
    userName?: any;
    /** Password for Windows authentication. */
    password?: SecretBaseUnion;
}

/** The location of HDFS. */
export declare interface HdfsLocation extends DatasetLocation {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "HdfsLocation";
}

/** HDFS read settings. */
export declare interface HdfsReadSettings extends StoreReadSettings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "HdfsReadSettings";
    /** If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean). */
    recursive?: any;
    /** HDFS wildcardFolderPath. Type: string (or Expression with resultType string). */
    wildcardFolderPath?: any;
    /** HDFS wildcardFileName. Type: string (or Expression with resultType string). */
    wildcardFileName?: any;
    /** Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string). */
    fileListPath?: any;
    /** Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean). */
    enablePartitionDiscovery?: any;
    /** Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string). */
    partitionRootPath?: any;
    /** The start of file's modified datetime. Type: string (or Expression with resultType string). */
    modifiedDatetimeStart?: any;
    /** The end of file's modified datetime. Type: string (or Expression with resultType string). */
    modifiedDatetimeEnd?: any;
    /** Specifies Distcp-related settings. */
    distcpSettings?: DistcpSettings;
    /** Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean). */
    deleteFilesAfterCompletion?: any;
}

/** A copy activity HDFS source. */
export declare interface HdfsSource extends CopySource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "HdfsSource";
    /** If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean). */
    recursive?: any;
    /** Specifies Distcp-related settings. */
    distcpSettings?: DistcpSettings;
}

/**
 * Defines values for HdiNodeTypes. \
 * {@link KnownHdiNodeTypes} can be used interchangeably with HdiNodeTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Headnode** \
 * **Workernode** \
 * **Zookeeper**
 */
export declare type HdiNodeTypes = string;

/**
 * Defines values for HDInsightActivityDebugInfoOption. \
 * {@link KnownHDInsightActivityDebugInfoOption} can be used interchangeably with HDInsightActivityDebugInfoOption,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Always** \
 * **Failure**
 */
export declare type HDInsightActivityDebugInfoOption = string;

/** HDInsight Hive activity type. */
export declare interface HDInsightHiveActivity extends ExecutionActivity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "HDInsightHive";
    /** Storage linked service references. */
    storageLinkedServices?: LinkedServiceReference[];
    /** User specified arguments to HDInsightActivity. */
    arguments?: any[];
    /** Debug info option. */
    getDebugInfo?: HDInsightActivityDebugInfoOption;
    /** Script path. Type: string (or Expression with resultType string). */
    scriptPath?: any;
    /** Script linked service reference. */
    scriptLinkedService?: LinkedServiceReference;
    /** Allows user to specify defines for Hive job request. */
    defines?: {
        [propertyName: string]: any;
    };
    /** User specified arguments under hivevar namespace. */
    variables?: {
        [propertyName: string]: any;
    };
    /** Query timeout value (in minutes).  Effective when the HDInsight cluster is with ESP (Enterprise Security Package) */
    queryTimeout?: number;
}

/** HDInsight linked service. */
export declare interface HDInsightLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "HDInsight";
    /** HDInsight cluster URI. Type: string (or Expression with resultType string). */
    clusterUri: any;
    /** HDInsight cluster user name. Type: string (or Expression with resultType string). */
    userName?: any;
    /** HDInsight cluster password. */
    password?: SecretBaseUnion;
    /** The Azure Storage linked service reference. */
    linkedServiceName?: LinkedServiceReference;
    /** A reference to the Azure SQL linked service that points to the HCatalog database. */
    hcatalogLinkedServiceName?: LinkedServiceReference;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
    /** Specify if the HDInsight is created with ESP (Enterprise Security Package). Type: Boolean. */
    isEspEnabled?: any;
    /** Specify the FileSystem if the main storage for the HDInsight is ADLS Gen2. Type: string (or Expression with resultType string). */
    fileSystem?: any;
}

/** HDInsight MapReduce activity type. */
export declare interface HDInsightMapReduceActivity extends ExecutionActivity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "HDInsightMapReduce";
    /** Storage linked service references. */
    storageLinkedServices?: LinkedServiceReference[];
    /** User specified arguments to HDInsightActivity. */
    arguments?: any[];
    /** Debug info option. */
    getDebugInfo?: HDInsightActivityDebugInfoOption;
    /** Class name. Type: string (or Expression with resultType string). */
    className: any;
    /** Jar path. Type: string (or Expression with resultType string). */
    jarFilePath: any;
    /** Jar linked service reference. */
    jarLinkedService?: LinkedServiceReference;
    /** Jar libs. */
    jarLibs?: any[];
    /** Allows user to specify defines for the MapReduce job request. */
    defines?: {
        [propertyName: string]: any;
    };
}

/** HDInsight ondemand linked service. */
export declare interface HDInsightOnDemandLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "HDInsightOnDemand";
    /** Number of worker/data nodes in the cluster. Suggestion value: 4. Type: string (or Expression with resultType string). */
    clusterSize: any;
    /** The allowed idle time for the on-demand HDInsight cluster. Specifies how long the on-demand HDInsight cluster stays alive after completion of an activity run if there are no other active jobs in the cluster. The minimum value is 5 mins. Type: string (or Expression with resultType string). */
    timeToLive: any;
    /** Version of the HDInsight cluster.  Type: string (or Expression with resultType string). */
    version: any;
    /** Azure Storage linked service to be used by the on-demand cluster for storing and processing data. */
    linkedServiceName: LinkedServiceReference;
    /** The customer’s subscription to host the cluster. Type: string (or Expression with resultType string). */
    hostSubscriptionId: any;
    /** The service principal id for the hostSubscriptionId. Type: string (or Expression with resultType string). */
    servicePrincipalId?: any;
    /** The key for the service principal id. */
    servicePrincipalKey?: SecretBaseUnion;
    /** The Tenant id/name to which the service principal belongs. Type: string (or Expression with resultType string). */
    tenant: any;
    /** The resource group where the cluster belongs. Type: string (or Expression with resultType string). */
    clusterResourceGroup: any;
    /** The prefix of cluster name, postfix will be distinct with timestamp. Type: string (or Expression with resultType string). */
    clusterNamePrefix?: any;
    /** The username to access the cluster. Type: string (or Expression with resultType string). */
    clusterUserName?: any;
    /** The password to access the cluster. */
    clusterPassword?: SecretBaseUnion;
    /** The username to SSH remotely connect to cluster’s node (for Linux). Type: string (or Expression with resultType string). */
    clusterSshUserName?: any;
    /** The password to SSH remotely connect cluster’s node (for Linux). */
    clusterSshPassword?: SecretBaseUnion;
    /** Specifies additional storage accounts for the HDInsight linked service so that the Data Factory service can register them on your behalf. */
    additionalLinkedServiceNames?: LinkedServiceReference[];
    /** The name of Azure SQL linked service that point to the HCatalog database. The on-demand HDInsight cluster is created by using the Azure SQL database as the metastore. */
    hcatalogLinkedServiceName?: LinkedServiceReference;
    /** The cluster type. Type: string (or Expression with resultType string). */
    clusterType?: any;
    /** The version of spark if the cluster type is 'spark'. Type: string (or Expression with resultType string). */
    sparkVersion?: any;
    /** Specifies the core configuration parameters (as in core-site.xml) for the HDInsight cluster to be created. */
    coreConfiguration?: any;
    /** Specifies the HBase configuration parameters (hbase-site.xml) for the HDInsight cluster. */
    hBaseConfiguration?: any;
    /** Specifies the HDFS configuration parameters (hdfs-site.xml) for the HDInsight cluster. */
    hdfsConfiguration?: any;
    /** Specifies the hive configuration parameters (hive-site.xml) for the HDInsight cluster. */
    hiveConfiguration?: any;
    /** Specifies the MapReduce configuration parameters (mapred-site.xml) for the HDInsight cluster. */
    mapReduceConfiguration?: any;
    /** Specifies the Oozie configuration parameters (oozie-site.xml) for the HDInsight cluster. */
    oozieConfiguration?: any;
    /** Specifies the Storm configuration parameters (storm-site.xml) for the HDInsight cluster. */
    stormConfiguration?: any;
    /** Specifies the Yarn configuration parameters (yarn-site.xml) for the HDInsight cluster. */
    yarnConfiguration?: any;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
    /** Specifies the size of the head node for the HDInsight cluster. */
    headNodeSize?: any;
    /** Specifies the size of the data node for the HDInsight cluster. */
    dataNodeSize?: any;
    /** Specifies the size of the Zoo Keeper node for the HDInsight cluster. */
    zookeeperNodeSize?: any;
    /** Custom script actions to run on HDI ondemand cluster once it's up. Please refer to https://docs.microsoft.com/en-us/azure/hdinsight/hdinsight-hadoop-customize-cluster-linux?toc=%2Fen-us%2Fazure%2Fhdinsight%2Fr-server%2FTOC.json&bc=%2Fen-us%2Fazure%2Fbread%2Ftoc.json#understanding-script-actions. */
    scriptActions?: ScriptAction[];
    /** The ARM resource ID for the vNet to which the cluster should be joined after creation. Type: string (or Expression with resultType string). */
    virtualNetworkId?: any;
    /** The ARM resource ID for the subnet in the vNet. If virtualNetworkId was specified, then this property is required. Type: string (or Expression with resultType string). */
    subnetName?: any;
    /** The credential reference containing authentication information. */
    credential?: CredentialReference;
}

/** HDInsight Pig activity type. */
export declare interface HDInsightPigActivity extends ExecutionActivity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "HDInsightPig";
    /** Storage linked service references. */
    storageLinkedServices?: LinkedServiceReference[];
    /** User specified arguments to HDInsightActivity. Type: array (or Expression with resultType array). */
    arguments?: any;
    /** Debug info option. */
    getDebugInfo?: HDInsightActivityDebugInfoOption;
    /** Script path. Type: string (or Expression with resultType string). */
    scriptPath?: any;
    /** Script linked service reference. */
    scriptLinkedService?: LinkedServiceReference;
    /** Allows user to specify defines for Pig job request. */
    defines?: {
        [propertyName: string]: any;
    };
}

/** HDInsight Spark activity. */
export declare interface HDInsightSparkActivity extends ExecutionActivity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "HDInsightSpark";
    /** The root path in 'sparkJobLinkedService' for all the job’s files. Type: string (or Expression with resultType string). */
    rootPath: any;
    /** The relative path to the root folder of the code/package to be executed. Type: string (or Expression with resultType string). */
    entryFilePath: any;
    /** The user-specified arguments to HDInsightSparkActivity. */
    arguments?: any[];
    /** Debug info option. */
    getDebugInfo?: HDInsightActivityDebugInfoOption;
    /** The storage linked service for uploading the entry file and dependencies, and for receiving logs. */
    sparkJobLinkedService?: LinkedServiceReference;
    /** The application's Java/Spark main class. */
    className?: string;
    /** The user to impersonate that will execute the job. Type: string (or Expression with resultType string). */
    proxyUser?: any;
    /** Spark configuration property. */
    sparkConfig?: {
        [propertyName: string]: any;
    };
}

/** HDInsight streaming activity type. */
export declare interface HDInsightStreamingActivity extends ExecutionActivity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "HDInsightStreaming";
    /** Storage linked service references. */
    storageLinkedServices?: LinkedServiceReference[];
    /** User specified arguments to HDInsightActivity. */
    arguments?: any[];
    /** Debug info option. */
    getDebugInfo?: HDInsightActivityDebugInfoOption;
    /** Mapper executable name. Type: string (or Expression with resultType string). */
    mapper: any;
    /** Reducer executable name. Type: string (or Expression with resultType string). */
    reducer: any;
    /** Input blob path. Type: string (or Expression with resultType string). */
    input: any;
    /** Output blob path. Type: string (or Expression with resultType string). */
    output: any;
    /** Paths to streaming job files. Can be directories. */
    filePaths: any[];
    /** Linked service reference where the files are located. */
    fileLinkedService?: LinkedServiceReference;
    /** Combiner executable name. Type: string (or Expression with resultType string). */
    combiner?: any;
    /** Command line environment values. */
    commandEnvironment?: any[];
    /** Allows user to specify defines for streaming job request. */
    defines?: {
        [propertyName: string]: any;
    };
}

/**
 * Defines values for HiveAuthenticationType. \
 * {@link KnownHiveAuthenticationType} can be used interchangeably with HiveAuthenticationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Anonymous** \
 * **Username** \
 * **UsernameAndPassword** \
 * **WindowsAzureHDInsightService**
 */
export declare type HiveAuthenticationType = string;

/** Hive Server linked service. */
export declare interface HiveLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Hive";
    /** IP address or host name of the Hive server, separated by ';' for multiple hosts (only when serviceDiscoveryMode is enable). */
    host: any;
    /** The TCP port that the Hive server uses to listen for client connections. */
    port?: any;
    /** The type of Hive server. */
    serverType?: HiveServerType;
    /** The transport protocol to use in the Thrift layer. */
    thriftTransportProtocol?: HiveThriftTransportProtocol;
    /** The authentication method used to access the Hive server. */
    authenticationType: HiveAuthenticationType;
    /** true to indicate using the ZooKeeper service, false not. */
    serviceDiscoveryMode?: any;
    /** The namespace on ZooKeeper under which Hive Server 2 nodes are added. */
    zooKeeperNameSpace?: any;
    /** Specifies whether the driver uses native HiveQL queries,or converts them into an equivalent form in HiveQL. */
    useNativeQuery?: any;
    /** The user name that you use to access Hive Server. */
    username?: any;
    /** The password corresponding to the user name that you provided in the Username field */
    password?: SecretBaseUnion;
    /** The partial URL corresponding to the Hive server. */
    httpPath?: any;
    /** Specifies whether the connections to the server are encrypted using SSL. The default value is false. */
    enableSsl?: any;
    /** The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR. */
    trustedCertPath?: any;
    /** Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false. */
    useSystemTrustStore?: any;
    /** Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false. */
    allowHostNameCNMismatch?: any;
    /** Specifies whether to allow self-signed certificates from the server. The default value is false. */
    allowSelfSignedServerCert?: any;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** Hive Server dataset. */
export declare interface HiveObjectDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "HiveObject";
    /** This property will be retired. Please consider using schema + table properties instead. */
    tableName?: any;
    /** The table name of the Hive. Type: string (or Expression with resultType string). */
    table?: any;
    /** The schema name of the Hive. Type: string (or Expression with resultType string). */
    schemaTypePropertiesSchema?: any;
}

/**
 * Defines values for HiveServerType. \
 * {@link KnownHiveServerType} can be used interchangeably with HiveServerType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **HiveServer1** \
 * **HiveServer2** \
 * **HiveThriftServer**
 */
export declare type HiveServerType = string;

/** A copy activity Hive Server source. */
export declare interface HiveSource extends TabularSource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "HiveSource";
    /** A query to retrieve data from source. Type: string (or Expression with resultType string). */
    query?: any;
}

/**
 * Defines values for HiveThriftTransportProtocol. \
 * {@link KnownHiveThriftTransportProtocol} can be used interchangeably with HiveThriftTransportProtocol,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Binary** \
 * **SASL** \
 * **HTTP **
 */
export declare type HiveThriftTransportProtocol = string;

/**
 * Defines values for HttpAuthenticationType. \
 * {@link KnownHttpAuthenticationType} can be used interchangeably with HttpAuthenticationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Basic** \
 * **Anonymous** \
 * **Digest** \
 * **Windows** \
 * **ClientCertificate**
 */
export declare type HttpAuthenticationType = string;

/** A file in an HTTP web server. */
export declare interface HttpDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "HttpFile";
    /** The relative URL based on the URL in the HttpLinkedService refers to an HTTP file Type: string (or Expression with resultType string). */
    relativeUrl?: any;
    /** The HTTP method for the HTTP request. Type: string (or Expression with resultType string). */
    requestMethod?: any;
    /** The body for the HTTP request. Type: string (or Expression with resultType string). */
    requestBody?: any;
    /**
     * The headers for the HTTP Request. e.g. request-header-name-1:request-header-value-1
     * ...
     * request-header-name-n:request-header-value-n Type: string (or Expression with resultType string).
     */
    additionalHeaders?: any;
    /** The format of files. */
    format?: DatasetStorageFormatUnion;
    /** The data compression method used on files. */
    compression?: DatasetCompression;
}

/** Linked service for an HTTP source. */
export declare interface HttpLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "HttpServer";
    /** The base URL of the HTTP endpoint, e.g. https://www.microsoft.com. Type: string (or Expression with resultType string). */
    url: any;
    /** The authentication type to be used to connect to the HTTP server. */
    authenticationType?: HttpAuthenticationType;
    /** User name for Basic, Digest, or Windows authentication. Type: string (or Expression with resultType string). */
    userName?: any;
    /** Password for Basic, Digest, Windows, or ClientCertificate with EmbeddedCertData authentication. */
    password?: SecretBaseUnion;
    /** The additional HTTP headers in the request to RESTful API used for authorization. Type: object (or Expression with resultType object). */
    authHeaders?: any;
    /** Base64 encoded certificate data for ClientCertificate authentication. For on-premises copy with ClientCertificate authentication, either CertThumbprint or EmbeddedCertData/Password should be specified. Type: string (or Expression with resultType string). */
    embeddedCertData?: any;
    /** Thumbprint of certificate for ClientCertificate authentication. Only valid for on-premises copy. For on-premises copy with ClientCertificate authentication, either CertThumbprint or EmbeddedCertData/Password should be specified. Type: string (or Expression with resultType string). */
    certThumbprint?: any;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
    /** If true, validate the HTTPS server SSL certificate. Default value is true. Type: boolean (or Expression with resultType boolean). */
    enableServerCertificateValidation?: any;
}

/** Http read settings. */
export declare interface HttpReadSettings extends StoreReadSettings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "HttpReadSettings";
    /** The HTTP method used to call the RESTful API. The default is GET. Type: string (or Expression with resultType string). */
    requestMethod?: any;
    /** The HTTP request body to the RESTful API if requestMethod is POST. Type: string (or Expression with resultType string). */
    requestBody?: any;
    /** The additional HTTP headers in the request to the RESTful API. Type: string (or Expression with resultType string). */
    additionalHeaders?: any;
    /** Specifies the timeout for a HTTP client to get HTTP response from HTTP server. Type: string (or Expression with resultType string). */
    requestTimeout?: any;
    /** Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). */
    additionalColumns?: any;
}

/** The location of http server. */
export declare interface HttpServerLocation extends DatasetLocation {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "HttpServerLocation";
    /** Specify the relativeUrl of http server. Type: string (or Expression with resultType string) */
    relativeUrl?: any;
}

/** A copy activity source for an HTTP file. */
export declare interface HttpSource extends CopySource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "HttpSource";
    /** Specifies the timeout for a HTTP client to get HTTP response from HTTP server. The default value is equivalent to System.Net.HttpWebRequest.Timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). */
    httpRequestTimeout?: any;
}

/** Hubspot Service linked service. */
export declare interface HubspotLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Hubspot";
    /** The client ID associated with your Hubspot application. */
    clientId: any;
    /** The client secret associated with your Hubspot application. */
    clientSecret?: SecretBaseUnion;
    /** The access token obtained when initially authenticating your OAuth integration. */
    accessToken?: SecretBaseUnion;
    /** The refresh token obtained when initially authenticating your OAuth integration. */
    refreshToken?: SecretBaseUnion;
    /** Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. */
    useEncryptedEndpoints?: any;
    /** Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. */
    useHostVerification?: any;
    /** Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. */
    usePeerVerification?: any;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** Hubspot Service dataset. */
export declare interface HubspotObjectDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "HubspotObject";
    /** The table name. Type: string (or Expression with resultType string). */
    tableName?: any;
}

/** A copy activity Hubspot Service source. */
export declare interface HubspotSource extends TabularSource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "HubspotSource";
    /** A query to retrieve data from source. Type: string (or Expression with resultType string). */
    query?: any;
}

/** This activity evaluates a boolean expression and executes either the activities under the ifTrueActivities property or the ifFalseActivities property depending on the result of the expression. */
export declare interface IfConditionActivity extends ControlActivity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "IfCondition";
    /** An expression that would evaluate to Boolean. This is used to determine the block of activities (ifTrueActivities or ifFalseActivities) that will be executed. */
    expression: Expression;
    /** List of activities to execute if expression is evaluated to true. This is an optional property and if not provided, the activity will exit without any action. */
    ifTrueActivities?: ActivityUnion[];
    /** List of activities to execute if expression is evaluated to false. This is an optional property and if not provided, the activity will exit without any action. */
    ifFalseActivities?: ActivityUnion[];
}

/**
 * Defines values for ImpalaAuthenticationType. \
 * {@link KnownImpalaAuthenticationType} can be used interchangeably with ImpalaAuthenticationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Anonymous** \
 * **SASLUsername** \
 * **UsernameAndPassword**
 */
export declare type ImpalaAuthenticationType = string;

/** Impala server linked service. */
export declare interface ImpalaLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Impala";
    /** The IP address or host name of the Impala server. (i.e. 192.168.222.160) */
    host: any;
    /** The TCP port that the Impala server uses to listen for client connections. The default value is 21050. */
    port?: any;
    /** The authentication type to use. */
    authenticationType: ImpalaAuthenticationType;
    /** The user name used to access the Impala server. The default value is anonymous when using SASLUsername. */
    username?: any;
    /** The password corresponding to the user name when using UsernameAndPassword. */
    password?: SecretBaseUnion;
    /** Specifies whether the connections to the server are encrypted using SSL. The default value is false. */
    enableSsl?: any;
    /** The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR. */
    trustedCertPath?: any;
    /** Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false. */
    useSystemTrustStore?: any;
    /** Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false. */
    allowHostNameCNMismatch?: any;
    /** Specifies whether to allow self-signed certificates from the server. The default value is false. */
    allowSelfSignedServerCert?: any;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** Impala server dataset. */
export declare interface ImpalaObjectDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "ImpalaObject";
    /** This property will be retired. Please consider using schema + table properties instead. */
    tableName?: any;
    /** The table name of the Impala. Type: string (or Expression with resultType string). */
    table?: any;
    /** The schema name of the Impala. Type: string (or Expression with resultType string). */
    schemaTypePropertiesSchema?: any;
}

/** A copy activity Impala server source. */
export declare interface ImpalaSource extends TabularSource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "ImpalaSource";
    /** A query to retrieve data from source. Type: string (or Expression with resultType string). */
    query?: any;
}

/** Import command settings. */
export declare interface ImportSettings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureDatabricksDeltaLakeImportCommand" | "SnowflakeImportCopyCommand";
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
}

export declare type ImportSettingsUnion = ImportSettings | AzureDatabricksDeltaLakeImportCommand | SnowflakeImportCopyCommand;

/** Informix linked service. */
export declare interface InformixLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Informix";
    /** The non-access credential portion of the connection string as well as an optional encrypted credential. Type: string, or SecureString, or AzureKeyVaultSecretReference, or Expression with resultType string. */
    connectionString: any;
    /** Type of authentication used to connect to the Informix as ODBC data store. Possible values are: Anonymous and Basic. Type: string (or Expression with resultType string). */
    authenticationType?: any;
    /** The access credential portion of the connection string specified in driver-specific property-value format. */
    credential?: SecretBaseUnion;
    /** User name for Basic authentication. Type: string (or Expression with resultType string). */
    userName?: any;
    /** Password for Basic authentication. */
    password?: SecretBaseUnion;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** A copy activity Informix sink. */
export declare interface InformixSink extends CopySink {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "InformixSink";
    /** A query to execute before starting the copy. Type: string (or Expression with resultType string). */
    preCopyScript?: any;
}

/** A copy activity source for Informix. */
export declare interface InformixSource extends TabularSource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "InformixSource";
    /** Database query. Type: string (or Expression with resultType string). */
    query?: any;
}

/** The Informix table dataset. */
export declare interface InformixTableDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "InformixTable";
    /** The Informix table name. Type: string (or Expression with resultType string). */
    tableName?: any;
}

/** Azure Data Factory nested object which serves as a compute resource for activities. */
export declare interface IntegrationRuntime {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Managed" | "SelfHosted";
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /** Integration runtime description. */
    description?: string;
}

/**
 * Defines values for IntegrationRuntimeAuthKeyName. \
 * {@link KnownIntegrationRuntimeAuthKeyName} can be used interchangeably with IntegrationRuntimeAuthKeyName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **authKey1** \
 * **authKey2**
 */
export declare type IntegrationRuntimeAuthKeyName = string;

/** The integration runtime authentication keys. */
export declare interface IntegrationRuntimeAuthKeys {
    /** The primary integration runtime authentication key. */
    authKey1?: string;
    /** The secondary integration runtime authentication key. */
    authKey2?: string;
}

/**
 * Defines values for IntegrationRuntimeAutoUpdate. \
 * {@link KnownIntegrationRuntimeAutoUpdate} can be used interchangeably with IntegrationRuntimeAutoUpdate,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **On** \
 * **Off**
 */
export declare type IntegrationRuntimeAutoUpdate = string;

/** The compute resource properties for managed integration runtime. */
export declare interface IntegrationRuntimeComputeProperties {
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /** The location for managed integration runtime. The supported regions could be found on https://docs.microsoft.com/en-us/azure/data-factory/data-factory-data-movement-activities */
    location?: string;
    /** The node size requirement to managed integration runtime. */
    nodeSize?: string;
    /** The required number of nodes for managed integration runtime. */
    numberOfNodes?: number;
    /** Maximum parallel executions count per node for managed integration runtime. */
    maxParallelExecutionsPerNode?: number;
    /** Data flow properties for managed integration runtime. */
    dataFlowProperties?: IntegrationRuntimeDataFlowProperties;
    /** VNet properties for managed integration runtime. */
    vNetProperties?: IntegrationRuntimeVNetProperties;
    /** CopyComputeScale properties for managed integration runtime. */
    copyComputeScaleProperties?: CopyComputeScaleProperties;
    /** PipelineExternalComputeScale properties for managed integration runtime. */
    pipelineExternalComputeScaleProperties?: PipelineExternalComputeScaleProperties;
}

/** Connection information for encrypting the on-premises data source credentials. */
export declare interface IntegrationRuntimeConnectionInfo {
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /**
     * The token generated in service. Callers use this token to authenticate to integration runtime.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly serviceToken?: string;
    /**
     * The integration runtime SSL certificate thumbprint. Click-Once application uses it to do server validation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly identityCertThumbprint?: string;
    /**
     * The on-premises integration runtime host URL.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly hostServiceUri?: string;
    /**
     * The integration runtime version.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly version?: string;
    /**
     * The public key for encrypting a credential when transferring the credential to the integration runtime.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly publicKey?: string;
    /**
     * Whether the identity certificate is expired.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isIdentityCertExprired?: boolean;
}

/** The definition and properties of virtual network to which Azure-SSIS integration runtime will join. */
export declare interface IntegrationRuntimeCustomerVirtualNetwork {
    /** The ID of subnet to which Azure-SSIS integration runtime will join. */
    subnetId?: string;
}

/** Custom setup script properties for a managed dedicated integration runtime. */
export declare interface IntegrationRuntimeCustomSetupScriptProperties {
    /** The URI of the Azure blob container that contains the custom setup script. */
    blobContainerUri?: string;
    /** The SAS token of the Azure blob container. */
    sasToken?: SecureString;
}

/** Data flow properties for managed integration runtime. */
export declare interface IntegrationRuntimeDataFlowProperties {
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /** Compute type of the cluster which will execute data flow job. */
    computeType?: DataFlowComputeType;
    /** Core count of the cluster which will execute data flow job. Supported values are: 8, 16, 32, 48, 80, 144 and 272. */
    coreCount?: number;
    /** Time to live (in minutes) setting of the cluster which will execute data flow job. */
    timeToLive?: number;
    /** Cluster will not be recycled and it will be used in next data flow activity run until TTL (time to live) is reached if this is set as false. Default is true. */
    cleanup?: boolean;
    /** Custom properties are used to tune the data flow runtime performance. */
    customProperties?: IntegrationRuntimeDataFlowPropertiesCustomPropertiesItem[];
}

export declare interface IntegrationRuntimeDataFlowPropertiesCustomPropertiesItem {
    /** Name of custom property. */
    name?: string;
    /** Value of custom property. */
    value?: string;
}

/** Data proxy properties for a managed dedicated integration runtime. */
export declare interface IntegrationRuntimeDataProxyProperties {
    /** The self-hosted integration runtime reference. */
    connectVia?: EntityReference;
    /** The staging linked service reference. */
    stagingLinkedService?: EntityReference;
    /** The path to contain the staged data in the Blob storage. */
    path?: string;
}

/** Integration runtime debug resource. */
export declare interface IntegrationRuntimeDebugResource extends SubResourceDebugResource {
    /** Integration runtime properties. */
    properties: IntegrationRuntimeUnion;
}

/**
 * Defines values for IntegrationRuntimeEdition. \
 * {@link KnownIntegrationRuntimeEdition} can be used interchangeably with IntegrationRuntimeEdition,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Standard** \
 * **Enterprise**
 */
export declare type IntegrationRuntimeEdition = string;

/**
 * Defines values for IntegrationRuntimeEntityReferenceType. \
 * {@link KnownIntegrationRuntimeEntityReferenceType} can be used interchangeably with IntegrationRuntimeEntityReferenceType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **IntegrationRuntimeReference** \
 * **LinkedServiceReference**
 */
export declare type IntegrationRuntimeEntityReferenceType = string;

/**
 * Defines values for IntegrationRuntimeInternalChannelEncryptionMode. \
 * {@link KnownIntegrationRuntimeInternalChannelEncryptionMode} can be used interchangeably with IntegrationRuntimeInternalChannelEncryptionMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSet** \
 * **SslEncrypted** \
 * **NotEncrypted**
 */
export declare type IntegrationRuntimeInternalChannelEncryptionMode = string;

/**
 * Defines values for IntegrationRuntimeLicenseType. \
 * {@link KnownIntegrationRuntimeLicenseType} can be used interchangeably with IntegrationRuntimeLicenseType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **BasePrice** \
 * **LicenseIncluded**
 */
export declare type IntegrationRuntimeLicenseType = string;

/** A list of integration runtime resources. */
export declare interface IntegrationRuntimeListResponse {
    /** List of integration runtimes. */
    value: IntegrationRuntimeResource[];
    /** The link to the next page of results, if any remaining results exist. */
    nextLink?: string;
}

/** Get monitoring data response. */
export declare interface IntegrationRuntimeMonitoringData {
    /** Integration runtime name. */
    name?: string;
    /** Integration runtime node monitoring data. */
    nodes?: IntegrationRuntimeNodeMonitoringData[];
}

/** The IP address of self-hosted integration runtime node. */
export declare interface IntegrationRuntimeNodeIpAddress {
    /**
     * The IP address of self-hosted integration runtime node.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly ipAddress?: string;
}

/** Monitoring data for integration runtime node. */
export declare interface IntegrationRuntimeNodeMonitoringData {
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /**
     * Name of the integration runtime node.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nodeName?: string;
    /**
     * Available memory (MB) on the integration runtime node.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly availableMemoryInMB?: number;
    /**
     * CPU percentage on the integration runtime node.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly cpuUtilization?: number;
    /**
     * Maximum concurrent jobs on the integration runtime node.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly concurrentJobsLimit?: number;
    /**
     * The number of jobs currently running on the integration runtime node.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly concurrentJobsRunning?: number;
    /**
     * The maximum concurrent jobs in this integration runtime.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly maxConcurrentJobs?: number;
    /**
     * Sent bytes on the integration runtime node.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly sentBytes?: number;
    /**
     * Received bytes on the integration runtime node.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly receivedBytes?: number;
}

/** Interface representing a IntegrationRuntimeNodes. */
export declare interface IntegrationRuntimeNodes {
    /**
     * Gets a self-hosted integration runtime node.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param nodeName The integration runtime node name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, nodeName: string, options?: IntegrationRuntimeNodesGetOptionalParams): Promise<IntegrationRuntimeNodesGetResponse>;
    /**
     * Deletes a self-hosted integration runtime node.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param nodeName The integration runtime node name.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, nodeName: string, options?: IntegrationRuntimeNodesDeleteOptionalParams): Promise<void>;
    /**
     * Updates a self-hosted integration runtime node.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param nodeName The integration runtime node name.
     * @param updateIntegrationRuntimeNodeRequest The parameters for updating an integration runtime node.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, nodeName: string, updateIntegrationRuntimeNodeRequest: UpdateIntegrationRuntimeNodeRequest, options?: IntegrationRuntimeNodesUpdateOptionalParams): Promise<IntegrationRuntimeNodesUpdateResponse>;
    /**
     * Get the IP address of self-hosted integration runtime node.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param nodeName The integration runtime node name.
     * @param options The options parameters.
     */
    getIpAddress(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, nodeName: string, options?: IntegrationRuntimeNodesGetIpAddressOptionalParams): Promise<IntegrationRuntimeNodesGetIpAddressResponse>;
}

/** Optional parameters. */
export declare interface IntegrationRuntimeNodesDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface IntegrationRuntimeNodesGetIpAddressOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getIpAddress operation. */
export declare type IntegrationRuntimeNodesGetIpAddressResponse = IntegrationRuntimeNodeIpAddress;

/** Optional parameters. */
export declare interface IntegrationRuntimeNodesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type IntegrationRuntimeNodesGetResponse = SelfHostedIntegrationRuntimeNode;

/** Optional parameters. */
export declare interface IntegrationRuntimeNodesUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type IntegrationRuntimeNodesUpdateResponse = SelfHostedIntegrationRuntimeNode;

/** Interface representing a IntegrationRuntimeObjectMetadata. */
export declare interface IntegrationRuntimeObjectMetadata {
    /**
     * Refresh a SSIS integration runtime object metadata.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param options The options parameters.
     */
    beginRefresh(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, options?: IntegrationRuntimeObjectMetadataRefreshOptionalParams): Promise<SimplePollerLike<OperationState<IntegrationRuntimeObjectMetadataRefreshResponse>, IntegrationRuntimeObjectMetadataRefreshResponse>>;
    /**
     * Refresh a SSIS integration runtime object metadata.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param options The options parameters.
     */
    beginRefreshAndWait(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, options?: IntegrationRuntimeObjectMetadataRefreshOptionalParams): Promise<IntegrationRuntimeObjectMetadataRefreshResponse>;
    /**
     * Get a SSIS integration runtime object metadata by specified path. The return is pageable metadata
     * list.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, options?: IntegrationRuntimeObjectMetadataGetOptionalParams): Promise<IntegrationRuntimeObjectMetadataGetResponse>;
}

/** Optional parameters. */
export declare interface IntegrationRuntimeObjectMetadataGetOptionalParams extends coreClient.OperationOptions {
    /** The parameters for getting a SSIS object metadata. */
    getMetadataRequest?: GetSsisObjectMetadataRequest;
}

/** Contains response data for the get operation. */
export declare type IntegrationRuntimeObjectMetadataGetResponse = SsisObjectMetadataListResponse;

/** Optional parameters. */
export declare interface IntegrationRuntimeObjectMetadataRefreshOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the refresh operation. */
export declare type IntegrationRuntimeObjectMetadataRefreshResponse = SsisObjectMetadataStatusResponse;

/** Azure-SSIS integration runtime outbound network dependency endpoints for one category. */
export declare interface IntegrationRuntimeOutboundNetworkDependenciesCategoryEndpoint {
    /** The category of outbound network dependency. */
    category?: string;
    /** The endpoints for outbound network dependency. */
    endpoints?: IntegrationRuntimeOutboundNetworkDependenciesEndpoint[];
}

/** The endpoint for Azure-SSIS integration runtime outbound network dependency. */
export declare interface IntegrationRuntimeOutboundNetworkDependenciesEndpoint {
    /** The domain name of endpoint. */
    domainName?: string;
    /** The details of endpoint. */
    endpointDetails?: IntegrationRuntimeOutboundNetworkDependenciesEndpointDetails[];
}

/** The details of Azure-SSIS integration runtime outbound network dependency endpoint. */
export declare interface IntegrationRuntimeOutboundNetworkDependenciesEndpointDetails {
    /** The port of endpoint. */
    port?: number;
}

/** Azure-SSIS integration runtime outbound network dependency endpoints. */
export declare interface IntegrationRuntimeOutboundNetworkDependenciesEndpointsResponse {
    /** The list of outbound network dependency endpoints. */
    value?: IntegrationRuntimeOutboundNetworkDependenciesCategoryEndpoint[];
}

/** Integration runtime reference type. */
export declare interface IntegrationRuntimeReference {
    /** Type of integration runtime. */
    type: "IntegrationRuntimeReference";
    /** Reference integration runtime name. */
    referenceName: string;
    /** Arguments for integration runtime. */
    parameters?: {
        [propertyName: string]: any;
    };
}

/** Parameters to regenerate the authentication key. */
export declare interface IntegrationRuntimeRegenerateKeyParameters {
    /** The name of the authentication key to regenerate. */
    keyName?: IntegrationRuntimeAuthKeyName;
}

/** Integration runtime resource type. */
export declare interface IntegrationRuntimeResource extends SubResource {
    /** Integration runtime properties. */
    properties: IntegrationRuntimeUnion;
}

/** Interface representing a IntegrationRuntimes. */
export declare interface IntegrationRuntimes {
    /**
     * Lists integration runtimes.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param options The options parameters.
     */
    listByFactory(resourceGroupName: string, factoryName: string, options?: IntegrationRuntimesListByFactoryOptionalParams): PagedAsyncIterableIterator<IntegrationRuntimeResource>;
    /**
     * Creates or updates an integration runtime.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param integrationRuntime Integration runtime resource definition.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, integrationRuntime: IntegrationRuntimeResource, options?: IntegrationRuntimesCreateOrUpdateOptionalParams): Promise<IntegrationRuntimesCreateOrUpdateResponse>;
    /**
     * Gets an integration runtime.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, options?: IntegrationRuntimesGetOptionalParams): Promise<IntegrationRuntimesGetResponse>;
    /**
     * Updates an integration runtime.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param updateIntegrationRuntimeRequest The parameters for updating an integration runtime.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, updateIntegrationRuntimeRequest: UpdateIntegrationRuntimeRequest, options?: IntegrationRuntimesUpdateOptionalParams): Promise<IntegrationRuntimesUpdateResponse>;
    /**
     * Deletes an integration runtime.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, options?: IntegrationRuntimesDeleteOptionalParams): Promise<void>;
    /**
     * Gets detailed status information for an integration runtime.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param options The options parameters.
     */
    getStatus(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, options?: IntegrationRuntimesGetStatusOptionalParams): Promise<IntegrationRuntimesGetStatusResponse>;
    /**
     * Gets the list of outbound network dependencies for a given Azure-SSIS integration runtime.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param options The options parameters.
     */
    listOutboundNetworkDependenciesEndpoints(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, options?: IntegrationRuntimesListOutboundNetworkDependenciesEndpointsOptionalParams): Promise<IntegrationRuntimesListOutboundNetworkDependenciesEndpointsResponse>;
    /**
     * Gets the on-premises integration runtime connection information for encrypting the on-premises data
     * source credentials.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param options The options parameters.
     */
    getConnectionInfo(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, options?: IntegrationRuntimesGetConnectionInfoOptionalParams): Promise<IntegrationRuntimesGetConnectionInfoResponse>;
    /**
     * Regenerates the authentication key for an integration runtime.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param regenerateKeyParameters The parameters for regenerating integration runtime authentication
     *                                key.
     * @param options The options parameters.
     */
    regenerateAuthKey(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, regenerateKeyParameters: IntegrationRuntimeRegenerateKeyParameters, options?: IntegrationRuntimesRegenerateAuthKeyOptionalParams): Promise<IntegrationRuntimesRegenerateAuthKeyResponse>;
    /**
     * Retrieves the authentication keys for an integration runtime.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param options The options parameters.
     */
    listAuthKeys(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, options?: IntegrationRuntimesListAuthKeysOptionalParams): Promise<IntegrationRuntimesListAuthKeysResponse>;
    /**
     * Starts a ManagedReserved type integration runtime.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param options The options parameters.
     */
    beginStart(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, options?: IntegrationRuntimesStartOptionalParams): Promise<SimplePollerLike<OperationState<IntegrationRuntimesStartResponse>, IntegrationRuntimesStartResponse>>;
    /**
     * Starts a ManagedReserved type integration runtime.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param options The options parameters.
     */
    beginStartAndWait(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, options?: IntegrationRuntimesStartOptionalParams): Promise<IntegrationRuntimesStartResponse>;
    /**
     * Stops a ManagedReserved type integration runtime.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param options The options parameters.
     */
    beginStop(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, options?: IntegrationRuntimesStopOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Stops a ManagedReserved type integration runtime.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param options The options parameters.
     */
    beginStopAndWait(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, options?: IntegrationRuntimesStopOptionalParams): Promise<void>;
    /**
     * Force the integration runtime to synchronize credentials across integration runtime nodes, and this
     * will override the credentials across all worker nodes with those available on the dispatcher node.
     * If you already have the latest credential backup file, you should manually import it (preferred) on
     * any self-hosted integration runtime node than using this API directly.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param options The options parameters.
     */
    syncCredentials(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, options?: IntegrationRuntimesSyncCredentialsOptionalParams): Promise<void>;
    /**
     * Get the integration runtime monitoring data, which includes the monitor data for all the nodes under
     * this integration runtime.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param options The options parameters.
     */
    getMonitoringData(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, options?: IntegrationRuntimesGetMonitoringDataOptionalParams): Promise<IntegrationRuntimesGetMonitoringDataResponse>;
    /**
     * Upgrade self-hosted integration runtime to latest version if availability.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param options The options parameters.
     */
    upgrade(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, options?: IntegrationRuntimesUpgradeOptionalParams): Promise<void>;
    /**
     * Remove all linked integration runtimes under specific data factory in a self-hosted integration
     * runtime.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param linkedIntegrationRuntimeRequest The data factory name for the linked integration runtime.
     * @param options The options parameters.
     */
    removeLinks(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, linkedIntegrationRuntimeRequest: LinkedIntegrationRuntimeRequest, options?: IntegrationRuntimesRemoveLinksOptionalParams): Promise<void>;
    /**
     * Create a linked integration runtime entry in a shared integration runtime.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param createLinkedIntegrationRuntimeRequest The linked integration runtime properties.
     * @param options The options parameters.
     */
    createLinkedIntegrationRuntime(resourceGroupName: string, factoryName: string, integrationRuntimeName: string, createLinkedIntegrationRuntimeRequest: CreateLinkedIntegrationRuntimeRequest, options?: IntegrationRuntimesCreateLinkedIntegrationRuntimeOptionalParams): Promise<IntegrationRuntimesCreateLinkedIntegrationRuntimeResponse>;
}

/** Optional parameters. */
export declare interface IntegrationRuntimesCreateLinkedIntegrationRuntimeOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createLinkedIntegrationRuntime operation. */
export declare type IntegrationRuntimesCreateLinkedIntegrationRuntimeResponse = IntegrationRuntimeStatusResponse;

/** Optional parameters. */
export declare interface IntegrationRuntimesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** ETag of the integration runtime entity. Should only be specified for update, for which it should match existing entity or can be * for unconditional update. */
    ifMatch?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type IntegrationRuntimesCreateOrUpdateResponse = IntegrationRuntimeResource;

/** Optional parameters. */
export declare interface IntegrationRuntimesDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface IntegrationRuntimesGetConnectionInfoOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getConnectionInfo operation. */
export declare type IntegrationRuntimesGetConnectionInfoResponse = IntegrationRuntimeConnectionInfo;

/** Optional parameters. */
export declare interface IntegrationRuntimesGetMonitoringDataOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getMonitoringData operation. */
export declare type IntegrationRuntimesGetMonitoringDataResponse = IntegrationRuntimeMonitoringData;

/** Optional parameters. */
export declare interface IntegrationRuntimesGetOptionalParams extends coreClient.OperationOptions {
    /** ETag of the integration runtime entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. */
    ifNoneMatch?: string;
}

/** Contains response data for the get operation. */
export declare type IntegrationRuntimesGetResponse = IntegrationRuntimeResource;

/** Optional parameters. */
export declare interface IntegrationRuntimesGetStatusOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getStatus operation. */
export declare type IntegrationRuntimesGetStatusResponse = IntegrationRuntimeStatusResponse;

/** Optional parameters. */
export declare interface IntegrationRuntimesListAuthKeysOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listAuthKeys operation. */
export declare type IntegrationRuntimesListAuthKeysResponse = IntegrationRuntimeAuthKeys;

/** Optional parameters. */
export declare interface IntegrationRuntimesListByFactoryNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByFactoryNext operation. */
export declare type IntegrationRuntimesListByFactoryNextResponse = IntegrationRuntimeListResponse;

/** Optional parameters. */
export declare interface IntegrationRuntimesListByFactoryOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByFactory operation. */
export declare type IntegrationRuntimesListByFactoryResponse = IntegrationRuntimeListResponse;

/** Optional parameters. */
export declare interface IntegrationRuntimesListOutboundNetworkDependenciesEndpointsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listOutboundNetworkDependenciesEndpoints operation. */
export declare type IntegrationRuntimesListOutboundNetworkDependenciesEndpointsResponse = IntegrationRuntimeOutboundNetworkDependenciesEndpointsResponse;

/** Optional parameters. */
export declare interface IntegrationRuntimesRegenerateAuthKeyOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the regenerateAuthKey operation. */
export declare type IntegrationRuntimesRegenerateAuthKeyResponse = IntegrationRuntimeAuthKeys;

/** Optional parameters. */
export declare interface IntegrationRuntimesRemoveLinksOptionalParams extends coreClient.OperationOptions {
}

/** Catalog information for managed dedicated integration runtime. */
export declare interface IntegrationRuntimeSsisCatalogInfo {
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /** The catalog database server URL. */
    catalogServerEndpoint?: string;
    /** The administrator user name of catalog database. */
    catalogAdminUserName?: string;
    /** The password of the administrator user account of the catalog database. */
    catalogAdminPassword?: SecureString;
    /** The pricing tier for the catalog database. The valid values could be found in https://azure.microsoft.com/en-us/pricing/details/sql-database/ */
    catalogPricingTier?: IntegrationRuntimeSsisCatalogPricingTier;
    /** The dual standby pair name of Azure-SSIS Integration Runtimes to support SSISDB failover. */
    dualStandbyPairName?: string;
}

/**
 * Defines values for IntegrationRuntimeSsisCatalogPricingTier. \
 * {@link KnownIntegrationRuntimeSsisCatalogPricingTier} can be used interchangeably with IntegrationRuntimeSsisCatalogPricingTier,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Basic** \
 * **Standard** \
 * **Premium** \
 * **PremiumRS**
 */
export declare type IntegrationRuntimeSsisCatalogPricingTier = string;

/** SSIS properties for managed integration runtime. */
export declare interface IntegrationRuntimeSsisProperties {
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /** Catalog information for managed dedicated integration runtime. */
    catalogInfo?: IntegrationRuntimeSsisCatalogInfo;
    /** License type for bringing your own license scenario. */
    licenseType?: IntegrationRuntimeLicenseType;
    /** Custom setup script properties for a managed dedicated integration runtime. */
    customSetupScriptProperties?: IntegrationRuntimeCustomSetupScriptProperties;
    /** Data proxy properties for a managed dedicated integration runtime. */
    dataProxyProperties?: IntegrationRuntimeDataProxyProperties;
    /** The edition for the SSIS Integration Runtime */
    edition?: IntegrationRuntimeEdition;
    /** Custom setup without script properties for a SSIS integration runtime. */
    expressCustomSetupProperties?: CustomSetupBaseUnion[];
    /** Package stores for the SSIS Integration Runtime. */
    packageStores?: PackageStore[];
    /** The credential reference containing authentication information. */
    credential?: CredentialReference;
}

/** Optional parameters. */
export declare interface IntegrationRuntimesStartOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the start operation. */
export declare type IntegrationRuntimesStartResponse = IntegrationRuntimeStatusResponse;

/** Optional parameters. */
export declare interface IntegrationRuntimesStopOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface IntegrationRuntimesSyncCredentialsOptionalParams extends coreClient.OperationOptions {
}

/**
 * Defines values for IntegrationRuntimeState. \
 * {@link KnownIntegrationRuntimeState} can be used interchangeably with IntegrationRuntimeState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Initial** \
 * **Stopped** \
 * **Started** \
 * **Starting** \
 * **Stopping** \
 * **NeedRegistration** \
 * **Online** \
 * **Limited** \
 * **Offline** \
 * **AccessDenied**
 */
export declare type IntegrationRuntimeState = string;

/** Integration runtime status. */
export declare interface IntegrationRuntimeStatus {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Managed" | "SelfHosted";
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /**
     * The data factory name which the integration runtime belong to.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dataFactoryName?: string;
    /**
     * The state of integration runtime.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly state?: IntegrationRuntimeState;
}

/** A list of integration runtime status. */
export declare interface IntegrationRuntimeStatusListResponse {
    /** List of integration runtime status. */
    value: IntegrationRuntimeStatusResponse[];
    /** The link to the next page of results, if any remaining results exist. */
    nextLink?: string;
}

/** Integration runtime status response. */
export declare interface IntegrationRuntimeStatusResponse {
    /**
     * The integration runtime name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /** Integration runtime properties. */
    properties: IntegrationRuntimeStatusUnion;
}

export declare type IntegrationRuntimeStatusUnion = IntegrationRuntimeStatus | ManagedIntegrationRuntimeStatus | SelfHostedIntegrationRuntimeStatus;

/** Optional parameters. */
export declare interface IntegrationRuntimesUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type IntegrationRuntimesUpdateResponse = IntegrationRuntimeResource;

/** Optional parameters. */
export declare interface IntegrationRuntimesUpgradeOptionalParams extends coreClient.OperationOptions {
}

/**
 * Defines values for IntegrationRuntimeType. \
 * {@link KnownIntegrationRuntimeType} can be used interchangeably with IntegrationRuntimeType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Managed** \
 * **SelfHosted**
 */
export declare type IntegrationRuntimeType = string;

export declare type IntegrationRuntimeUnion = IntegrationRuntime | ManagedIntegrationRuntime | SelfHostedIntegrationRuntime;

/**
 * Defines values for IntegrationRuntimeUpdateResult. \
 * {@link KnownIntegrationRuntimeUpdateResult} can be used interchangeably with IntegrationRuntimeUpdateResult,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Succeed** \
 * **Fail**
 */
export declare type IntegrationRuntimeUpdateResult = string;

/** VNet properties for managed integration runtime. */
export declare interface IntegrationRuntimeVNetProperties {
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /** The ID of the VNet that this integration runtime will join. */
    vNetId?: string;
    /** The name of the subnet this integration runtime will join. */
    subnet?: string;
    /** Resource IDs of the public IP addresses that this integration runtime will use. */
    publicIPs?: string[];
    /** The ID of subnet, to which this Azure-SSIS integration runtime will be joined. */
    subnetId?: string;
}

/** Jira Service linked service. */
export declare interface JiraLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Jira";
    /** The IP address or host name of the Jira service. (e.g. jira.example.com) */
    host: any;
    /** The TCP port that the Jira server uses to listen for client connections. The default value is 443 if connecting through HTTPS, or 8080 if connecting through HTTP. */
    port?: any;
    /** The user name that you use to access Jira Service. */
    username: any;
    /** The password corresponding to the user name that you provided in the username field. */
    password?: SecretBaseUnion;
    /** Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. */
    useEncryptedEndpoints?: any;
    /** Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. */
    useHostVerification?: any;
    /** Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. */
    usePeerVerification?: any;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** Jira Service dataset. */
export declare interface JiraObjectDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "JiraObject";
    /** The table name. Type: string (or Expression with resultType string). */
    tableName?: any;
}

/** A copy activity Jira Service source. */
export declare interface JiraSource extends TabularSource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "JiraSource";
    /** A query to retrieve data from source. Type: string (or Expression with resultType string). */
    query?: any;
}

/** Json dataset. */
export declare interface JsonDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Json";
    /** The location of the json data storage. */
    location?: DatasetLocationUnion;
    /** The code page name of the preferred encoding. If not specified, the default value is UTF-8, unless BOM denotes another Unicode encoding. Refer to the name column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string). */
    encodingName?: any;
    /** The data compression method used for the json dataset. */
    compression?: DatasetCompression;
}

/** The data stored in JSON format. */
export declare interface JsonFormat extends DatasetStorageFormat {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "JsonFormat";
    /** File pattern of JSON. To be more specific, the way of separating a collection of JSON objects. The default value is 'setOfObjects'. It is case-sensitive. */
    filePattern?: any;
    /** The character used to separate nesting levels. Default value is '.' (dot). Type: string (or Expression with resultType string). */
    nestingSeparator?: any;
    /** The code page name of the preferred encoding. If not provided, the default value is 'utf-8', unless the byte order mark (BOM) denotes another Unicode encoding. The full list of supported values can be found in the 'Name' column of the table of encodings in the following reference: https://go.microsoft.com/fwlink/?linkid=861078. Type: string (or Expression with resultType string). */
    encodingName?: any;
    /** The JSONPath of the JSON array element to be flattened. Example: "$.ArrayPath". Type: string (or Expression with resultType string). */
    jsonNodeReference?: any;
    /** The JSONPath definition for each column mapping with a customized column name to extract data from JSON file. For fields under root object, start with "$"; for fields inside the array chosen by jsonNodeReference property, start from the array element. Example: {"Column1": "$.Column1Path", "Column2": "Column2PathInArray"}. Type: object (or Expression with resultType object). */
    jsonPathDefinition?: any;
}

/**
 * Defines values for JsonFormatFilePattern. \
 * {@link KnownJsonFormatFilePattern} can be used interchangeably with JsonFormatFilePattern,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **setOfObjects** \
 * **arrayOfObjects**
 */
export declare type JsonFormatFilePattern = string;

/** Json read settings. */
export declare interface JsonReadSettings extends FormatReadSettings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "JsonReadSettings";
    /** Compression settings. */
    compressionProperties?: CompressionReadSettingsUnion;
}

/** A copy activity Json sink. */
export declare interface JsonSink extends CopySink {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "JsonSink";
    /** Json store settings. */
    storeSettings?: StoreWriteSettingsUnion;
    /** Json format settings. */
    formatSettings?: JsonWriteSettings;
}

/** A copy activity Json source. */
export declare interface JsonSource extends CopySource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "JsonSource";
    /** Json store settings. */
    storeSettings?: StoreReadSettingsUnion;
    /** Json format settings. */
    formatSettings?: JsonReadSettings;
    /** Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). */
    additionalColumns?: any;
}

/**
 * Defines values for JsonWriteFilePattern. \
 * {@link KnownJsonWriteFilePattern} can be used interchangeably with JsonWriteFilePattern,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **setOfObjects** \
 * **arrayOfObjects**
 */
export declare type JsonWriteFilePattern = string;

/** Json write settings. */
export declare interface JsonWriteSettings extends FormatWriteSettings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "JsonWriteSettings";
    /** File pattern of JSON. This setting controls the way a collection of JSON objects will be treated. The default value is 'setOfObjects'. It is case-sensitive. */
    filePattern?: any;
}

/** Known values of {@link ActivityOnInactiveMarkAs} that the service accepts. */
export declare enum KnownActivityOnInactiveMarkAs {
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Skipped */
    Skipped = "Skipped"
}

/** Known values of {@link ActivityState} that the service accepts. */
export declare enum KnownActivityState {
    /** Active */
    Active = "Active",
    /** Inactive */
    Inactive = "Inactive"
}

/** Known values of {@link AmazonRdsForOraclePartitionOption} that the service accepts. */
export declare enum KnownAmazonRdsForOraclePartitionOption {
    /** None */
    None = "None",
    /** PhysicalPartitionsOfTable */
    PhysicalPartitionsOfTable = "PhysicalPartitionsOfTable",
    /** DynamicRange */
    DynamicRange = "DynamicRange"
}

/** Known values of {@link AvroCompressionCodec} that the service accepts. */
export declare enum KnownAvroCompressionCodec {
    /** None */
    None = "none",
    /** Deflate */
    Deflate = "deflate",
    /** Snappy */
    Snappy = "snappy",
    /** Xz */
    Xz = "xz",
    /** Bzip2 */
    Bzip2 = "bzip2"
}

/** Known values of {@link AzureFunctionActivityMethod} that the service accepts. */
export declare enum KnownAzureFunctionActivityMethod {
    /** GET */
    GET = "GET",
    /** Post */
    Post = "POST",
    /** PUT */
    PUT = "PUT",
    /** Delete */
    Delete = "DELETE",
    /** Options */
    Options = "OPTIONS",
    /** Head */
    Head = "HEAD",
    /** Trace */
    Trace = "TRACE"
}

/** Known values of {@link AzureSearchIndexWriteBehaviorType} that the service accepts. */
export declare enum KnownAzureSearchIndexWriteBehaviorType {
    /** Merge */
    Merge = "Merge",
    /** Upload */
    Upload = "Upload"
}

/** Known values of {@link AzureStorageAuthenticationType} that the service accepts. */
export declare enum KnownAzureStorageAuthenticationType {
    /** Anonymous */
    Anonymous = "Anonymous",
    /** AccountKey */
    AccountKey = "AccountKey",
    /** SasUri */
    SasUri = "SasUri",
    /** ServicePrincipal */
    ServicePrincipal = "ServicePrincipal",
    /** Msi */
    Msi = "Msi"
}

/** Known values of {@link BigDataPoolReferenceType} that the service accepts. */
export declare enum KnownBigDataPoolReferenceType {
    /** BigDataPoolReference */
    BigDataPoolReference = "BigDataPoolReference"
}

/** Known values of {@link BlobEventTypes} that the service accepts. */
export declare enum KnownBlobEventTypes {
    /** MicrosoftStorageBlobCreated */
    MicrosoftStorageBlobCreated = "Microsoft.Storage.BlobCreated",
    /** MicrosoftStorageBlobDeleted */
    MicrosoftStorageBlobDeleted = "Microsoft.Storage.BlobDeleted"
}

/** Known values of {@link CassandraSourceReadConsistencyLevels} that the service accepts. */
export declare enum KnownCassandraSourceReadConsistencyLevels {
    /** ALL */
    ALL = "ALL",
    /** EachQuorum */
    EachQuorum = "EACH_QUORUM",
    /** Quorum */
    Quorum = "QUORUM",
    /** LocalQuorum */
    LocalQuorum = "LOCAL_QUORUM",
    /** ONE */
    ONE = "ONE",
    /** TWO */
    TWO = "TWO",
    /** Three */
    Three = "THREE",
    /** LocalONE */
    LocalONE = "LOCAL_ONE",
    /** Serial */
    Serial = "SERIAL",
    /** LocalSerial */
    LocalSerial = "LOCAL_SERIAL"
}

/** Known values of {@link CompressionCodec} that the service accepts. */
export declare enum KnownCompressionCodec {
    /** None */
    None = "none",
    /** Lzo */
    Lzo = "lzo",
    /** Bzip2 */
    Bzip2 = "bzip2",
    /** Gzip */
    Gzip = "gzip",
    /** Deflate */
    Deflate = "deflate",
    /** ZipDeflate */
    ZipDeflate = "zipDeflate",
    /** Snappy */
    Snappy = "snappy",
    /** Lz4 */
    Lz4 = "lz4",
    /** Tar */
    Tar = "tar",
    /** TarGZip */
    TarGZip = "tarGZip"
}

/** Known values of {@link ConfigurationType} that the service accepts. */
export declare enum KnownConfigurationType {
    /** Default */
    Default = "Default",
    /** Customized */
    Customized = "Customized",
    /** Artifact */
    Artifact = "Artifact"
}

/** Known values of {@link ConnectionType} that the service accepts. */
export declare enum KnownConnectionType {
    /** Linkedservicetype */
    Linkedservicetype = "linkedservicetype"
}

/** Known values of {@link CopyBehaviorType} that the service accepts. */
export declare enum KnownCopyBehaviorType {
    /** PreserveHierarchy */
    PreserveHierarchy = "PreserveHierarchy",
    /** FlattenHierarchy */
    FlattenHierarchy = "FlattenHierarchy",
    /** MergeFiles */
    MergeFiles = "MergeFiles"
}

/** Known values of {@link CosmosDbConnectionMode} that the service accepts. */
export declare enum KnownCosmosDbConnectionMode {
    /** Gateway */
    Gateway = "Gateway",
    /** Direct */
    Direct = "Direct"
}

/** Known values of {@link CredentialReferenceType} that the service accepts. */
export declare enum KnownCredentialReferenceType {
    /** CredentialReference */
    CredentialReference = "CredentialReference"
}

/** Known values of {@link DataFlowComputeType} that the service accepts. */
export declare enum KnownDataFlowComputeType {
    /** General */
    General = "General",
    /** MemoryOptimized */
    MemoryOptimized = "MemoryOptimized",
    /** ComputeOptimized */
    ComputeOptimized = "ComputeOptimized"
}

/** Known values of {@link DataFlowDebugCommandType} that the service accepts. */
export declare enum KnownDataFlowDebugCommandType {
    /** ExecutePreviewQuery */
    ExecutePreviewQuery = "executePreviewQuery",
    /** ExecuteStatisticsQuery */
    ExecuteStatisticsQuery = "executeStatisticsQuery",
    /** ExecuteExpressionQuery */
    ExecuteExpressionQuery = "executeExpressionQuery"
}

/** Known values of {@link DataFlowReferenceType} that the service accepts. */
export declare enum KnownDataFlowReferenceType {
    /** DataFlowReference */
    DataFlowReference = "DataFlowReference"
}

/** Known values of {@link DatasetCompressionLevel} that the service accepts. */
export declare enum KnownDatasetCompressionLevel {
    /** Optimal */
    Optimal = "Optimal",
    /** Fastest */
    Fastest = "Fastest"
}

/** Known values of {@link Db2AuthenticationType} that the service accepts. */
export declare enum KnownDb2AuthenticationType {
    /** Basic */
    Basic = "Basic"
}

/** Known values of {@link DependencyCondition} that the service accepts. */
export declare enum KnownDependencyCondition {
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Skipped */
    Skipped = "Skipped",
    /** Completed */
    Completed = "Completed"
}

/** Known values of {@link DynamicsAuthenticationType} that the service accepts. */
export declare enum KnownDynamicsAuthenticationType {
    /** Office365 */
    Office365 = "Office365",
    /** Ifd */
    Ifd = "Ifd",
    /** AADServicePrincipal */
    AADServicePrincipal = "AADServicePrincipal"
}

/** Known values of {@link DynamicsDeploymentType} that the service accepts. */
export declare enum KnownDynamicsDeploymentType {
    /** Online */
    Online = "Online",
    /** OnPremisesWithIfd */
    OnPremisesWithIfd = "OnPremisesWithIfd"
}

/** Known values of {@link DynamicsSinkWriteBehavior} that the service accepts. */
export declare enum KnownDynamicsSinkWriteBehavior {
    /** Upsert */
    Upsert = "Upsert"
}

/** Known values of {@link EventSubscriptionStatus} that the service accepts. */
export declare enum KnownEventSubscriptionStatus {
    /** Enabled */
    Enabled = "Enabled",
    /** Provisioning */
    Provisioning = "Provisioning",
    /** Deprovisioning */
    Deprovisioning = "Deprovisioning",
    /** Disabled */
    Disabled = "Disabled",
    /** Unknown */
    Unknown = "Unknown"
}

/** Known values of {@link FactoryIdentityType} that the service accepts. */
export declare enum KnownFactoryIdentityType {
    /** SystemAssigned */
    SystemAssigned = "SystemAssigned",
    /** UserAssigned */
    UserAssigned = "UserAssigned",
    /** SystemAssignedUserAssigned */
    SystemAssignedUserAssigned = "SystemAssigned,UserAssigned"
}

/** Known values of {@link FrequencyType} that the service accepts. */
export declare enum KnownFrequencyType {
    /** Hour */
    Hour = "Hour",
    /** Minute */
    Minute = "Minute",
    /** Second */
    Second = "Second"
}

/** Known values of {@link FtpAuthenticationType} that the service accepts. */
export declare enum KnownFtpAuthenticationType {
    /** Basic */
    Basic = "Basic",
    /** Anonymous */
    Anonymous = "Anonymous"
}

/** Known values of {@link GlobalParameterType} that the service accepts. */
export declare enum KnownGlobalParameterType {
    /** Object */
    Object = "Object",
    /** String */
    String = "String",
    /** Int */
    Int = "Int",
    /** Float */
    Float = "Float",
    /** Bool */
    Bool = "Bool",
    /** Array */
    Array = "Array"
}

/** Known values of {@link GoogleAdWordsAuthenticationType} that the service accepts. */
export declare enum KnownGoogleAdWordsAuthenticationType {
    /** ServiceAuthentication */
    ServiceAuthentication = "ServiceAuthentication",
    /** UserAuthentication */
    UserAuthentication = "UserAuthentication"
}

/** Known values of {@link GoogleBigQueryAuthenticationType} that the service accepts. */
export declare enum KnownGoogleBigQueryAuthenticationType {
    /** ServiceAuthentication */
    ServiceAuthentication = "ServiceAuthentication",
    /** UserAuthentication */
    UserAuthentication = "UserAuthentication"
}

/** Known values of {@link HBaseAuthenticationType} that the service accepts. */
export declare enum KnownHBaseAuthenticationType {
    /** Anonymous */
    Anonymous = "Anonymous",
    /** Basic */
    Basic = "Basic"
}

/** Known values of {@link HdiNodeTypes} that the service accepts. */
export declare enum KnownHdiNodeTypes {
    /** Headnode */
    Headnode = "Headnode",
    /** Workernode */
    Workernode = "Workernode",
    /** Zookeeper */
    Zookeeper = "Zookeeper"
}

/** Known values of {@link HDInsightActivityDebugInfoOption} that the service accepts. */
export declare enum KnownHDInsightActivityDebugInfoOption {
    /** None */
    None = "None",
    /** Always */
    Always = "Always",
    /** Failure */
    Failure = "Failure"
}

/** Known values of {@link HiveAuthenticationType} that the service accepts. */
export declare enum KnownHiveAuthenticationType {
    /** Anonymous */
    Anonymous = "Anonymous",
    /** Username */
    Username = "Username",
    /** UsernameAndPassword */
    UsernameAndPassword = "UsernameAndPassword",
    /** WindowsAzureHDInsightService */
    WindowsAzureHDInsightService = "WindowsAzureHDInsightService"
}

/** Known values of {@link HiveServerType} that the service accepts. */
export declare enum KnownHiveServerType {
    /** HiveServer1 */
    HiveServer1 = "HiveServer1",
    /** HiveServer2 */
    HiveServer2 = "HiveServer2",
    /** HiveThriftServer */
    HiveThriftServer = "HiveThriftServer"
}

/** Known values of {@link HiveThriftTransportProtocol} that the service accepts. */
export declare enum KnownHiveThriftTransportProtocol {
    /** Binary */
    Binary = "Binary",
    /** Sasl */
    Sasl = "SASL",
    /** Http */
    Http = "HTTP "
}

/** Known values of {@link HttpAuthenticationType} that the service accepts. */
export declare enum KnownHttpAuthenticationType {
    /** Basic */
    Basic = "Basic",
    /** Anonymous */
    Anonymous = "Anonymous",
    /** Digest */
    Digest = "Digest",
    /** Windows */
    Windows = "Windows",
    /** ClientCertificate */
    ClientCertificate = "ClientCertificate"
}

/** Known values of {@link ImpalaAuthenticationType} that the service accepts. */
export declare enum KnownImpalaAuthenticationType {
    /** Anonymous */
    Anonymous = "Anonymous",
    /** SaslUsername */
    SaslUsername = "SASLUsername",
    /** UsernameAndPassword */
    UsernameAndPassword = "UsernameAndPassword"
}

/** Known values of {@link IntegrationRuntimeAuthKeyName} that the service accepts. */
export declare enum KnownIntegrationRuntimeAuthKeyName {
    /** AuthKey1 */
    AuthKey1 = "authKey1",
    /** AuthKey2 */
    AuthKey2 = "authKey2"
}

/** Known values of {@link IntegrationRuntimeAutoUpdate} that the service accepts. */
export declare enum KnownIntegrationRuntimeAutoUpdate {
    /** On */
    On = "On",
    /** Off */
    Off = "Off"
}

/** Known values of {@link IntegrationRuntimeEdition} that the service accepts. */
export declare enum KnownIntegrationRuntimeEdition {
    /** Standard */
    Standard = "Standard",
    /** Enterprise */
    Enterprise = "Enterprise"
}

/** Known values of {@link IntegrationRuntimeEntityReferenceType} that the service accepts. */
export declare enum KnownIntegrationRuntimeEntityReferenceType {
    /** IntegrationRuntimeReference */
    IntegrationRuntimeReference = "IntegrationRuntimeReference",
    /** LinkedServiceReference */
    LinkedServiceReference = "LinkedServiceReference"
}

/** Known values of {@link IntegrationRuntimeInternalChannelEncryptionMode} that the service accepts. */
export declare enum KnownIntegrationRuntimeInternalChannelEncryptionMode {
    /** NotSet */
    NotSet = "NotSet",
    /** SslEncrypted */
    SslEncrypted = "SslEncrypted",
    /** NotEncrypted */
    NotEncrypted = "NotEncrypted"
}

/** Known values of {@link IntegrationRuntimeLicenseType} that the service accepts. */
export declare enum KnownIntegrationRuntimeLicenseType {
    /** BasePrice */
    BasePrice = "BasePrice",
    /** LicenseIncluded */
    LicenseIncluded = "LicenseIncluded"
}

/** Known values of {@link IntegrationRuntimeSsisCatalogPricingTier} that the service accepts. */
export declare enum KnownIntegrationRuntimeSsisCatalogPricingTier {
    /** Basic */
    Basic = "Basic",
    /** Standard */
    Standard = "Standard",
    /** Premium */
    Premium = "Premium",
    /** PremiumRS */
    PremiumRS = "PremiumRS"
}

/** Known values of {@link IntegrationRuntimeState} that the service accepts. */
export declare enum KnownIntegrationRuntimeState {
    /** Initial */
    Initial = "Initial",
    /** Stopped */
    Stopped = "Stopped",
    /** Started */
    Started = "Started",
    /** Starting */
    Starting = "Starting",
    /** Stopping */
    Stopping = "Stopping",
    /** NeedRegistration */
    NeedRegistration = "NeedRegistration",
    /** Online */
    Online = "Online",
    /** Limited */
    Limited = "Limited",
    /** Offline */
    Offline = "Offline",
    /** AccessDenied */
    AccessDenied = "AccessDenied"
}

/** Known values of {@link IntegrationRuntimeType} that the service accepts. */
export declare enum KnownIntegrationRuntimeType {
    /** Managed */
    Managed = "Managed",
    /** SelfHosted */
    SelfHosted = "SelfHosted"
}

/** Known values of {@link IntegrationRuntimeUpdateResult} that the service accepts. */
export declare enum KnownIntegrationRuntimeUpdateResult {
    /** None */
    None = "None",
    /** Succeed */
    Succeed = "Succeed",
    /** Fail */
    Fail = "Fail"
}

/** Known values of {@link JsonFormatFilePattern} that the service accepts. */
export declare enum KnownJsonFormatFilePattern {
    /** SetOfObjects */
    SetOfObjects = "setOfObjects",
    /** ArrayOfObjects */
    ArrayOfObjects = "arrayOfObjects"
}

/** Known values of {@link JsonWriteFilePattern} that the service accepts. */
export declare enum KnownJsonWriteFilePattern {
    /** SetOfObjects */
    SetOfObjects = "setOfObjects",
    /** ArrayOfObjects */
    ArrayOfObjects = "arrayOfObjects"
}

/** Known values of {@link ManagedIntegrationRuntimeNodeStatus} that the service accepts. */
export declare enum KnownManagedIntegrationRuntimeNodeStatus {
    /** Starting */
    Starting = "Starting",
    /** Available */
    Available = "Available",
    /** Recycling */
    Recycling = "Recycling",
    /** Unavailable */
    Unavailable = "Unavailable"
}

/** Known values of {@link ManagedVirtualNetworkReferenceType} that the service accepts. */
export declare enum KnownManagedVirtualNetworkReferenceType {
    /** ManagedVirtualNetworkReference */
    ManagedVirtualNetworkReference = "ManagedVirtualNetworkReference"
}

/** Known values of {@link MappingType} that the service accepts. */
export declare enum KnownMappingType {
    /** Direct */
    Direct = "Direct",
    /** Derived */
    Derived = "Derived",
    /** Aggregate */
    Aggregate = "Aggregate"
}

/** Known values of {@link MongoDbAuthenticationType} that the service accepts. */
export declare enum KnownMongoDbAuthenticationType {
    /** Basic */
    Basic = "Basic",
    /** Anonymous */
    Anonymous = "Anonymous"
}

/** Known values of {@link NetezzaPartitionOption} that the service accepts. */
export declare enum KnownNetezzaPartitionOption {
    /** None */
    None = "None",
    /** DataSlice */
    DataSlice = "DataSlice",
    /** DynamicRange */
    DynamicRange = "DynamicRange"
}

/** Known values of {@link NotebookParameterType} that the service accepts. */
export declare enum KnownNotebookParameterType {
    /** String */
    String = "string",
    /** Int */
    Int = "int",
    /** Float */
    Float = "float",
    /** Bool */
    Bool = "bool"
}

/** Known values of {@link NotebookReferenceType} that the service accepts. */
export declare enum KnownNotebookReferenceType {
    /** NotebookReference */
    NotebookReference = "NotebookReference"
}

/** Known values of {@link ODataAadServicePrincipalCredentialType} that the service accepts. */
export declare enum KnownODataAadServicePrincipalCredentialType {
    /** ServicePrincipalKey */
    ServicePrincipalKey = "ServicePrincipalKey",
    /** ServicePrincipalCert */
    ServicePrincipalCert = "ServicePrincipalCert"
}

/** Known values of {@link ODataAuthenticationType} that the service accepts. */
export declare enum KnownODataAuthenticationType {
    /** Basic */
    Basic = "Basic",
    /** Anonymous */
    Anonymous = "Anonymous",
    /** Windows */
    Windows = "Windows",
    /** AadServicePrincipal */
    AadServicePrincipal = "AadServicePrincipal",
    /** ManagedServiceIdentity */
    ManagedServiceIdentity = "ManagedServiceIdentity"
}

/** Known values of {@link OraclePartitionOption} that the service accepts. */
export declare enum KnownOraclePartitionOption {
    /** None */
    None = "None",
    /** PhysicalPartitionsOfTable */
    PhysicalPartitionsOfTable = "PhysicalPartitionsOfTable",
    /** DynamicRange */
    DynamicRange = "DynamicRange"
}

/** Known values of {@link OrcCompressionCodec} that the service accepts. */
export declare enum KnownOrcCompressionCodec {
    /** None */
    None = "none",
    /** Zlib */
    Zlib = "zlib",
    /** Snappy */
    Snappy = "snappy",
    /** Lzo */
    Lzo = "lzo"
}

/** Known values of {@link ParameterType} that the service accepts. */
export declare enum KnownParameterType {
    /** Object */
    Object = "Object",
    /** String */
    String = "String",
    /** Int */
    Int = "Int",
    /** Float */
    Float = "Float",
    /** Bool */
    Bool = "Bool",
    /** Array */
    Array = "Array",
    /** SecureString */
    SecureString = "SecureString"
}

/** Known values of {@link PhoenixAuthenticationType} that the service accepts. */
export declare enum KnownPhoenixAuthenticationType {
    /** Anonymous */
    Anonymous = "Anonymous",
    /** UsernameAndPassword */
    UsernameAndPassword = "UsernameAndPassword",
    /** WindowsAzureHDInsightService */
    WindowsAzureHDInsightService = "WindowsAzureHDInsightService"
}

/** Known values of {@link PolybaseSettingsRejectType} that the service accepts. */
export declare enum KnownPolybaseSettingsRejectType {
    /** Value */
    Value = "value",
    /** Percentage */
    Percentage = "percentage"
}

/** Known values of {@link PrestoAuthenticationType} that the service accepts. */
export declare enum KnownPrestoAuthenticationType {
    /** Anonymous */
    Anonymous = "Anonymous",
    /** Ldap */
    Ldap = "LDAP"
}

/** Known values of {@link PublicNetworkAccess} that the service accepts. */
export declare enum KnownPublicNetworkAccess {
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled"
}

/** Known values of {@link RecurrenceFrequency} that the service accepts. */
export declare enum KnownRecurrenceFrequency {
    /** NotSpecified */
    NotSpecified = "NotSpecified",
    /** Minute */
    Minute = "Minute",
    /** Hour */
    Hour = "Hour",
    /** Day */
    Day = "Day",
    /** Week */
    Week = "Week",
    /** Month */
    Month = "Month",
    /** Year */
    Year = "Year"
}

/** Known values of {@link RestServiceAuthenticationType} that the service accepts. */
export declare enum KnownRestServiceAuthenticationType {
    /** Anonymous */
    Anonymous = "Anonymous",
    /** Basic */
    Basic = "Basic",
    /** AadServicePrincipal */
    AadServicePrincipal = "AadServicePrincipal",
    /** ManagedServiceIdentity */
    ManagedServiceIdentity = "ManagedServiceIdentity",
    /** OAuth2ClientCredential */
    OAuth2ClientCredential = "OAuth2ClientCredential"
}

/** Known values of {@link RunQueryFilterOperand} that the service accepts. */
export declare enum KnownRunQueryFilterOperand {
    /** PipelineName */
    PipelineName = "PipelineName",
    /** Status */
    Status = "Status",
    /** RunStart */
    RunStart = "RunStart",
    /** RunEnd */
    RunEnd = "RunEnd",
    /** ActivityName */
    ActivityName = "ActivityName",
    /** ActivityRunStart */
    ActivityRunStart = "ActivityRunStart",
    /** ActivityRunEnd */
    ActivityRunEnd = "ActivityRunEnd",
    /** ActivityType */
    ActivityType = "ActivityType",
    /** TriggerName */
    TriggerName = "TriggerName",
    /** TriggerRunTimestamp */
    TriggerRunTimestamp = "TriggerRunTimestamp",
    /** RunGroupId */
    RunGroupId = "RunGroupId",
    /** LatestOnly */
    LatestOnly = "LatestOnly"
}

/** Known values of {@link RunQueryFilterOperator} that the service accepts. */
export declare enum KnownRunQueryFilterOperator {
    /** Equals */
    Equals = "Equals",
    /** NotEquals */
    NotEquals = "NotEquals",
    /** In */
    In = "In",
    /** NotIn */
    NotIn = "NotIn"
}

/** Known values of {@link RunQueryOrder} that the service accepts. */
export declare enum KnownRunQueryOrder {
    /** ASC */
    ASC = "ASC",
    /** Desc */
    Desc = "DESC"
}

/** Known values of {@link RunQueryOrderByField} that the service accepts. */
export declare enum KnownRunQueryOrderByField {
    /** RunStart */
    RunStart = "RunStart",
    /** RunEnd */
    RunEnd = "RunEnd",
    /** PipelineName */
    PipelineName = "PipelineName",
    /** Status */
    Status = "Status",
    /** ActivityName */
    ActivityName = "ActivityName",
    /** ActivityRunStart */
    ActivityRunStart = "ActivityRunStart",
    /** ActivityRunEnd */
    ActivityRunEnd = "ActivityRunEnd",
    /** TriggerName */
    TriggerName = "TriggerName",
    /** TriggerRunTimestamp */
    TriggerRunTimestamp = "TriggerRunTimestamp"
}

/** Known values of {@link SalesforceSinkWriteBehavior} that the service accepts. */
export declare enum KnownSalesforceSinkWriteBehavior {
    /** Insert */
    Insert = "Insert",
    /** Upsert */
    Upsert = "Upsert"
}

/** Known values of {@link SalesforceSourceReadBehavior} that the service accepts. */
export declare enum KnownSalesforceSourceReadBehavior {
    /** Query */
    Query = "Query",
    /** QueryAll */
    QueryAll = "QueryAll"
}

/** Known values of {@link SapCloudForCustomerSinkWriteBehavior} that the service accepts. */
export declare enum KnownSapCloudForCustomerSinkWriteBehavior {
    /** Insert */
    Insert = "Insert",
    /** Update */
    Update = "Update"
}

/** Known values of {@link SapHanaAuthenticationType} that the service accepts. */
export declare enum KnownSapHanaAuthenticationType {
    /** Basic */
    Basic = "Basic",
    /** Windows */
    Windows = "Windows"
}

/** Known values of {@link SapHanaPartitionOption} that the service accepts. */
export declare enum KnownSapHanaPartitionOption {
    /** None */
    None = "None",
    /** PhysicalPartitionsOfTable */
    PhysicalPartitionsOfTable = "PhysicalPartitionsOfTable",
    /** SapHanaDynamicRange */
    SapHanaDynamicRange = "SapHanaDynamicRange"
}

/** Known values of {@link SapTablePartitionOption} that the service accepts. */
export declare enum KnownSapTablePartitionOption {
    /** None */
    None = "None",
    /** PartitionOnInt */
    PartitionOnInt = "PartitionOnInt",
    /** PartitionOnCalendarYear */
    PartitionOnCalendarYear = "PartitionOnCalendarYear",
    /** PartitionOnCalendarMonth */
    PartitionOnCalendarMonth = "PartitionOnCalendarMonth",
    /** PartitionOnCalendarDate */
    PartitionOnCalendarDate = "PartitionOnCalendarDate",
    /** PartitionOnTime */
    PartitionOnTime = "PartitionOnTime"
}

/** Known values of {@link ScriptActivityLogDestination} that the service accepts. */
export declare enum KnownScriptActivityLogDestination {
    /** ActivityOutput */
    ActivityOutput = "ActivityOutput",
    /** ExternalStore */
    ExternalStore = "ExternalStore"
}

/** Known values of {@link ScriptActivityParameterDirection} that the service accepts. */
export declare enum KnownScriptActivityParameterDirection {
    /** Input */
    Input = "Input",
    /** Output */
    Output = "Output",
    /** InputOutput */
    InputOutput = "InputOutput"
}

/** Known values of {@link ScriptActivityParameterType} that the service accepts. */
export declare enum KnownScriptActivityParameterType {
    /** Boolean */
    Boolean = "Boolean",
    /** DateTime */
    DateTime = "DateTime",
    /** DateTimeOffset */
    DateTimeOffset = "DateTimeOffset",
    /** Decimal */
    Decimal = "Decimal",
    /** Double */
    Double = "Double",
    /** Guid */
    Guid = "Guid",
    /** Int16 */
    Int16 = "Int16",
    /** Int32 */
    Int32 = "Int32",
    /** Int64 */
    Int64 = "Int64",
    /** Single */
    Single = "Single",
    /** String */
    String = "String",
    /** Timespan */
    Timespan = "Timespan"
}

/** Known values of {@link ScriptType} that the service accepts. */
export declare enum KnownScriptType {
    /** Query */
    Query = "Query",
    /** NonQuery */
    NonQuery = "NonQuery"
}

/** Known values of {@link SelfHostedIntegrationRuntimeNodeStatus} that the service accepts. */
export declare enum KnownSelfHostedIntegrationRuntimeNodeStatus {
    /** NeedRegistration */
    NeedRegistration = "NeedRegistration",
    /** Online */
    Online = "Online",
    /** Limited */
    Limited = "Limited",
    /** Offline */
    Offline = "Offline",
    /** Upgrading */
    Upgrading = "Upgrading",
    /** Initializing */
    Initializing = "Initializing",
    /** InitializeFailed */
    InitializeFailed = "InitializeFailed"
}

/** Known values of {@link ServiceNowAuthenticationType} that the service accepts. */
export declare enum KnownServiceNowAuthenticationType {
    /** Basic */
    Basic = "Basic",
    /** OAuth2 */
    OAuth2 = "OAuth2"
}

/** Known values of {@link ServicePrincipalCredentialType} that the service accepts. */
export declare enum KnownServicePrincipalCredentialType {
    /** ServicePrincipalKey */
    ServicePrincipalKey = "ServicePrincipalKey",
    /** ServicePrincipalCert */
    ServicePrincipalCert = "ServicePrincipalCert"
}

/** Known values of {@link SftpAuthenticationType} that the service accepts. */
export declare enum KnownSftpAuthenticationType {
    /** Basic */
    Basic = "Basic",
    /** SshPublicKey */
    SshPublicKey = "SshPublicKey",
    /** MultiFactor */
    MultiFactor = "MultiFactor"
}

/** Known values of {@link SparkAuthenticationType} that the service accepts. */
export declare enum KnownSparkAuthenticationType {
    /** Anonymous */
    Anonymous = "Anonymous",
    /** Username */
    Username = "Username",
    /** UsernameAndPassword */
    UsernameAndPassword = "UsernameAndPassword",
    /** WindowsAzureHDInsightService */
    WindowsAzureHDInsightService = "WindowsAzureHDInsightService"
}

/** Known values of {@link SparkConfigurationReferenceType} that the service accepts. */
export declare enum KnownSparkConfigurationReferenceType {
    /** SparkConfigurationReference */
    SparkConfigurationReference = "SparkConfigurationReference"
}

/** Known values of {@link SparkJobReferenceType} that the service accepts. */
export declare enum KnownSparkJobReferenceType {
    /** SparkJobDefinitionReference */
    SparkJobDefinitionReference = "SparkJobDefinitionReference"
}

/** Known values of {@link SparkServerType} that the service accepts. */
export declare enum KnownSparkServerType {
    /** SharkServer */
    SharkServer = "SharkServer",
    /** SharkServer2 */
    SharkServer2 = "SharkServer2",
    /** SparkThriftServer */
    SparkThriftServer = "SparkThriftServer"
}

/** Known values of {@link SparkThriftTransportProtocol} that the service accepts. */
export declare enum KnownSparkThriftTransportProtocol {
    /** Binary */
    Binary = "Binary",
    /** Sasl */
    Sasl = "SASL",
    /** Http */
    Http = "HTTP "
}

/** Known values of {@link SqlAlwaysEncryptedAkvAuthType} that the service accepts. */
export declare enum KnownSqlAlwaysEncryptedAkvAuthType {
    /** ServicePrincipal */
    ServicePrincipal = "ServicePrincipal",
    /** ManagedIdentity */
    ManagedIdentity = "ManagedIdentity",
    /** UserAssignedManagedIdentity */
    UserAssignedManagedIdentity = "UserAssignedManagedIdentity"
}

/** Known values of {@link SqlDWWriteBehaviorEnum} that the service accepts. */
export declare enum KnownSqlDWWriteBehaviorEnum {
    /** Insert */
    Insert = "Insert",
    /** Upsert */
    Upsert = "Upsert"
}

/** Known values of {@link SqlPartitionOption} that the service accepts. */
export declare enum KnownSqlPartitionOption {
    /** None */
    None = "None",
    /** PhysicalPartitionsOfTable */
    PhysicalPartitionsOfTable = "PhysicalPartitionsOfTable",
    /** DynamicRange */
    DynamicRange = "DynamicRange"
}

/** Known values of {@link SqlWriteBehaviorEnum} that the service accepts. */
export declare enum KnownSqlWriteBehaviorEnum {
    /** Insert */
    Insert = "Insert",
    /** Upsert */
    Upsert = "Upsert",
    /** StoredProcedure */
    StoredProcedure = "StoredProcedure"
}

/** Known values of {@link SsisLogLocationType} that the service accepts. */
export declare enum KnownSsisLogLocationType {
    /** File */
    File = "File"
}

/** Known values of {@link SsisObjectMetadataType} that the service accepts. */
export declare enum KnownSsisObjectMetadataType {
    /** Folder */
    Folder = "Folder",
    /** Project */
    Project = "Project",
    /** Package */
    Package = "Package",
    /** Environment */
    Environment = "Environment"
}

/** Known values of {@link SsisPackageLocationType} that the service accepts. */
export declare enum KnownSsisPackageLocationType {
    /** Ssisdb */
    Ssisdb = "SSISDB",
    /** File */
    File = "File",
    /** InlinePackage */
    InlinePackage = "InlinePackage",
    /** PackageStore */
    PackageStore = "PackageStore"
}

/** Known values of {@link StoredProcedureParameterType} that the service accepts. */
export declare enum KnownStoredProcedureParameterType {
    /** String */
    String = "String",
    /** Int */
    Int = "Int",
    /** Int64 */
    Int64 = "Int64",
    /** Decimal */
    Decimal = "Decimal",
    /** Guid */
    Guid = "Guid",
    /** Boolean */
    Boolean = "Boolean",
    /** Date */
    Date = "Date"
}

/** Known values of {@link SybaseAuthenticationType} that the service accepts. */
export declare enum KnownSybaseAuthenticationType {
    /** Basic */
    Basic = "Basic",
    /** Windows */
    Windows = "Windows"
}

/** Known values of {@link TeamDeskAuthenticationType} that the service accepts. */
export declare enum KnownTeamDeskAuthenticationType {
    /** Basic */
    Basic = "Basic",
    /** Token */
    Token = "Token"
}

/** Known values of {@link TeradataAuthenticationType} that the service accepts. */
export declare enum KnownTeradataAuthenticationType {
    /** Basic */
    Basic = "Basic",
    /** Windows */
    Windows = "Windows"
}

/** Known values of {@link TeradataPartitionOption} that the service accepts. */
export declare enum KnownTeradataPartitionOption {
    /** None */
    None = "None",
    /** Hash */
    Hash = "Hash",
    /** DynamicRange */
    DynamicRange = "DynamicRange"
}

/** Known values of {@link TriggerReferenceType} that the service accepts. */
export declare enum KnownTriggerReferenceType {
    /** TriggerReference */
    TriggerReference = "TriggerReference"
}

/** Known values of {@link TriggerRunStatus} that the service accepts. */
export declare enum KnownTriggerRunStatus {
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Inprogress */
    Inprogress = "Inprogress"
}

/** Known values of {@link TriggerRuntimeState} that the service accepts. */
export declare enum KnownTriggerRuntimeState {
    /** Started */
    Started = "Started",
    /** Stopped */
    Stopped = "Stopped",
    /** Disabled */
    Disabled = "Disabled"
}

/** Known values of {@link TumblingWindowFrequency} that the service accepts. */
export declare enum KnownTumblingWindowFrequency {
    /** Minute */
    Minute = "Minute",
    /** Hour */
    Hour = "Hour",
    /** Month */
    Month = "Month"
}

/** Known values of {@link Type} that the service accepts. */
export declare enum KnownType {
    /** LinkedServiceReference */
    LinkedServiceReference = "LinkedServiceReference"
}

/** Known values of {@link VariableType} that the service accepts. */
export declare enum KnownVariableType {
    /** String */
    String = "String",
    /** Bool */
    Bool = "Bool",
    /** Array */
    Array = "Array"
}

/** Known values of {@link WebActivityMethod} that the service accepts. */
export declare enum KnownWebActivityMethod {
    /** GET */
    GET = "GET",
    /** Post */
    Post = "POST",
    /** PUT */
    PUT = "PUT",
    /** Delete */
    Delete = "DELETE"
}

/** Known values of {@link WebAuthenticationType} that the service accepts. */
export declare enum KnownWebAuthenticationType {
    /** Basic */
    Basic = "Basic",
    /** Anonymous */
    Anonymous = "Anonymous",
    /** ClientCertificate */
    ClientCertificate = "ClientCertificate"
}

/** Known values of {@link WebHookActivityMethod} that the service accepts. */
export declare enum KnownWebHookActivityMethod {
    /** Post */
    Post = "POST"
}

/** Known values of {@link ZendeskAuthenticationType} that the service accepts. */
export declare enum KnownZendeskAuthenticationType {
    /** Basic */
    Basic = "Basic",
    /** Token */
    Token = "Token"
}

/** Microsoft Fabric LakeHouse linked service. */
export declare interface LakeHouseLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "LakeHouse";
    /** The ID of Microsoft Fabric workspace. Type: string (or Expression with resultType string). */
    workspaceId?: any;
    /** The ID of Microsoft Fabric LakeHouse artifact. Type: string (or Expression with resultType string). */
    artifactId?: any;
    /** The ID of the application used to authenticate against Microsoft Fabric LakeHouse. Type: string (or Expression with resultType string). */
    servicePrincipalId?: any;
    /** The Key of the application used to authenticate against Microsoft Fabric LakeHouse. */
    servicePrincipalKey?: SecretBaseUnion;
    /** The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string). */
    tenant?: any;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
    /** The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string). */
    servicePrincipalCredentialType?: any;
    /** The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference. */
    servicePrincipalCredential?: SecretBaseUnion;
}

/** The location of Microsoft Fabric LakeHouse Files dataset. */
export declare interface LakeHouseLocation extends DatasetLocation {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "LakeHouseLocation";
}

/** Microsoft Fabric LakeHouse Files read settings. */
export declare interface LakeHouseReadSettings extends StoreReadSettings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "LakeHouseReadSettings";
    /** If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean). */
    recursive?: any;
    /** Microsoft Fabric LakeHouse Files wildcardFolderPath. Type: string (or Expression with resultType string). */
    wildcardFolderPath?: any;
    /** Microsoft Fabric LakeHouse Files wildcardFileName. Type: string (or Expression with resultType string). */
    wildcardFileName?: any;
    /** Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string). */
    fileListPath?: any;
    /** Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean). */
    enablePartitionDiscovery?: any;
    /** Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string). */
    partitionRootPath?: any;
    /** Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean). */
    deleteFilesAfterCompletion?: any;
    /** The start of file's modified datetime. Type: string (or Expression with resultType string). */
    modifiedDatetimeStart?: any;
    /** The end of file's modified datetime. Type: string (or Expression with resultType string). */
    modifiedDatetimeEnd?: any;
}

/** Microsoft Fabric LakeHouse Table. */
export declare interface LakeHouseTableDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "LakeHouseTable";
    /** The name of Microsoft Fabric LakeHouse Table. Type: string (or Expression with resultType string). */
    table?: any;
}

/** A copy activity for Microsoft Fabric LakeHouse Table sink. */
export declare interface LakeHouseTableSink extends CopySink {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "LakeHouseTableSink";
    /** The type of table action for LakeHouse Table sink. Possible values include: "None", "Append", "Overwrite". */
    tableActionOption?: any;
    /** Create partitions in folder structure based on one or multiple columns. Each distinct column value (pair) will be a new partition. Possible values include: "None", "PartitionByKey". */
    partitionOption?: any;
    /** Specify the partition column names from sink columns. Type: array of objects (or Expression with resultType array of objects). */
    partitionNameList?: any;
}

/** A copy activity source for Microsoft Fabric LakeHouse Table. */
export declare interface LakeHouseTableSource extends CopySource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "LakeHouseTableSource";
    /** Query an older snapshot by timestamp. Type: string (or Expression with resultType string). */
    timestampAsOf?: any;
    /** Query an older snapshot by version. Type: integer (or Expression with resultType integer). */
    versionAsOf?: any;
    /** Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). */
    additionalColumns?: any;
}

/** Microsoft Fabric LakeHouse Files write settings. */
export declare interface LakeHouseWriteSettings extends StoreWriteSettings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "LakeHouseWriteSettings";
}

/** The linked integration runtime information. */
export declare interface LinkedIntegrationRuntime {
    /**
     * The name of the linked integration runtime.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The subscription ID for which the linked integration runtime belong to.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly subscriptionId?: string;
    /**
     * The name of the data factory for which the linked integration runtime belong to.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dataFactoryName?: string;
    /**
     * The location of the data factory for which the linked integration runtime belong to.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dataFactoryLocation?: string;
    /**
     * The creating time of the linked integration runtime.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createTime?: Date;
}

/** The key authorization type integration runtime. */
export declare interface LinkedIntegrationRuntimeKeyAuthorization extends LinkedIntegrationRuntimeType {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    authorizationType: "Key";
    /** The key used for authorization. */
    key: SecureString;
}

/** The role based access control (RBAC) authorization type integration runtime. */
export declare interface LinkedIntegrationRuntimeRbacAuthorization extends LinkedIntegrationRuntimeType {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    authorizationType: "RBAC";
    /** The resource identifier of the integration runtime to be shared. */
    resourceId: string;
    /** The credential reference containing authentication information. */
    credential?: CredentialReference;
}

/** Data factory name for linked integration runtime request. */
export declare interface LinkedIntegrationRuntimeRequest {
    /** The data factory name for linked integration runtime. */
    linkedFactoryName: string;
}

/** The base definition of a linked integration runtime. */
export declare interface LinkedIntegrationRuntimeType {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    authorizationType: "Key" | "RBAC";
}

export declare type LinkedIntegrationRuntimeTypeUnion = LinkedIntegrationRuntimeType | LinkedIntegrationRuntimeKeyAuthorization | LinkedIntegrationRuntimeRbacAuthorization;

/** The nested object which contains the information and credential which can be used to connect with related store or compute resource. */
export declare interface LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureStorage" | "AzureBlobStorage" | "AzureTableStorage" | "AzureSqlDW" | "SqlServer" | "AmazonRdsForSqlServer" | "AzureSqlDatabase" | "AzureSqlMI" | "AzureBatch" | "AzureKeyVault" | "CosmosDb" | "Dynamics" | "DynamicsCrm" | "CommonDataServiceForApps" | "HDInsight" | "FileServer" | "AzureFileStorage" | "AmazonS3Compatible" | "OracleCloudStorage" | "GoogleCloudStorage" | "Oracle" | "AmazonRdsForOracle" | "AzureMySql" | "MySql" | "PostgreSql" | "Sybase" | "Db2" | "Teradata" | "AzureML" | "AzureMLService" | "Odbc" | "Informix" | "MicrosoftAccess" | "Hdfs" | "OData" | "Web" | "Cassandra" | "MongoDb" | "MongoDbAtlas" | "MongoDbV2" | "CosmosDbMongoDbApi" | "AzureDataLakeStore" | "AzureBlobFS" | "Office365" | "Salesforce" | "SalesforceServiceCloud" | "SapCloudForCustomer" | "SapEcc" | "SapOpenHub" | "SapOdp" | "RestService" | "TeamDesk" | "Quickbase" | "Smartsheet" | "Zendesk" | "Dataworld" | "AppFigures" | "Asana" | "Twilio" | "GoogleSheets" | "AmazonS3" | "AmazonRedshift" | "CustomDataSource" | "AzureSearch" | "HttpServer" | "FtpServer" | "Sftp" | "SapBW" | "SapHana" | "AmazonMWS" | "AzurePostgreSql" | "Concur" | "Couchbase" | "Drill" | "Eloqua" | "GoogleBigQuery" | "Greenplum" | "HBase" | "Hive" | "Hubspot" | "Impala" | "Jira" | "Magento" | "MariaDB" | "AzureMariaDB" | "Marketo" | "Paypal" | "Phoenix" | "Presto" | "QuickBooks" | "ServiceNow" | "Shopify" | "Spark" | "Square" | "Xero" | "Zoho" | "Vertica" | "Netezza" | "SalesforceMarketingCloud" | "HDInsightOnDemand" | "AzureDataLakeAnalytics" | "AzureDatabricks" | "AzureDatabricksDeltaLake" | "Responsys" | "DynamicsAX" | "OracleServiceCloud" | "GoogleAdWords" | "SapTable" | "AzureDataExplorer" | "AzureFunction" | "Snowflake" | "SharePointOnlineList" | "AzureSynapseArtifacts" | "LakeHouse";
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /** The integration runtime reference. */
    connectVia?: IntegrationRuntimeReference;
    /** Linked service description. */
    description?: string;
    /** Parameters for linked service. */
    parameters?: {
        [propertyName: string]: ParameterSpecification;
    };
    /** List of tags that can be used for describing the linked service. */
    annotations?: any[];
}

/** Linked service debug resource. */
export declare interface LinkedServiceDebugResource extends SubResourceDebugResource {
    /** Properties of linked service. */
    properties: LinkedServiceUnion;
}

/** A list of linked service resources. */
export declare interface LinkedServiceListResponse {
    /** List of linked services. */
    value: LinkedServiceResource[];
    /** The link to the next page of results, if any remaining results exist. */
    nextLink?: string;
}

/** Linked service reference type. */
export declare interface LinkedServiceReference {
    /** Linked service reference type. */
    type: Type;
    /** Reference LinkedService name. */
    referenceName: string;
    /** Arguments for LinkedService. */
    parameters?: {
        [propertyName: string]: any;
    };
}

/** Linked service resource type. */
export declare interface LinkedServiceResource extends SubResource {
    /** Properties of linked service. */
    properties: LinkedServiceUnion;
}

/** Interface representing a LinkedServices. */
export declare interface LinkedServices {
    /**
     * Lists linked services.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param options The options parameters.
     */
    listByFactory(resourceGroupName: string, factoryName: string, options?: LinkedServicesListByFactoryOptionalParams): PagedAsyncIterableIterator<LinkedServiceResource>;
    /**
     * Creates or updates a linked service.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param linkedServiceName The linked service name.
     * @param linkedService Linked service resource definition.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, factoryName: string, linkedServiceName: string, linkedService: LinkedServiceResource, options?: LinkedServicesCreateOrUpdateOptionalParams): Promise<LinkedServicesCreateOrUpdateResponse>;
    /**
     * Gets a linked service.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param linkedServiceName The linked service name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, factoryName: string, linkedServiceName: string, options?: LinkedServicesGetOptionalParams): Promise<LinkedServicesGetResponse>;
    /**
     * Deletes a linked service.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param linkedServiceName The linked service name.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, factoryName: string, linkedServiceName: string, options?: LinkedServicesDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface LinkedServicesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** ETag of the linkedService entity.  Should only be specified for update, for which it should match existing entity or can be * for unconditional update. */
    ifMatch?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type LinkedServicesCreateOrUpdateResponse = LinkedServiceResource;

/** Optional parameters. */
export declare interface LinkedServicesDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface LinkedServicesGetOptionalParams extends coreClient.OperationOptions {
    /** ETag of the linked service entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. */
    ifNoneMatch?: string;
}

/** Contains response data for the get operation. */
export declare type LinkedServicesGetResponse = LinkedServiceResource;

/** Optional parameters. */
export declare interface LinkedServicesListByFactoryNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByFactoryNext operation. */
export declare type LinkedServicesListByFactoryNextResponse = LinkedServiceListResponse;

/** Optional parameters. */
export declare interface LinkedServicesListByFactoryOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByFactory operation. */
export declare type LinkedServicesListByFactoryResponse = LinkedServiceListResponse;

export declare type LinkedServiceUnion = LinkedService | AzureStorageLinkedService | AzureBlobStorageLinkedService | AzureTableStorageLinkedService | AzureSqlDWLinkedService | SqlServerLinkedService | AmazonRdsForSqlServerLinkedService | AzureSqlDatabaseLinkedService | AzureSqlMILinkedService | AzureBatchLinkedService | AzureKeyVaultLinkedService | CosmosDbLinkedService | DynamicsLinkedService | DynamicsCrmLinkedService | CommonDataServiceForAppsLinkedService | HDInsightLinkedService | FileServerLinkedService | AzureFileStorageLinkedService | AmazonS3CompatibleLinkedService | OracleCloudStorageLinkedService | GoogleCloudStorageLinkedService | OracleLinkedService | AmazonRdsForOracleLinkedService | AzureMySqlLinkedService | MySqlLinkedService | PostgreSqlLinkedService | SybaseLinkedService | Db2LinkedService | TeradataLinkedService | AzureMLLinkedService | AzureMLServiceLinkedService | OdbcLinkedService | InformixLinkedService | MicrosoftAccessLinkedService | HdfsLinkedService | ODataLinkedService | WebLinkedService | CassandraLinkedService | MongoDbLinkedService | MongoDbAtlasLinkedService | MongoDbV2LinkedService | CosmosDbMongoDbApiLinkedService | AzureDataLakeStoreLinkedService | AzureBlobFSLinkedService | Office365LinkedService | SalesforceLinkedService | SalesforceServiceCloudLinkedService | SapCloudForCustomerLinkedService | SapEccLinkedService | SapOpenHubLinkedService | SapOdpLinkedService | RestServiceLinkedService | TeamDeskLinkedService | QuickbaseLinkedService | SmartsheetLinkedService | ZendeskLinkedService | DataworldLinkedService | AppFiguresLinkedService | AsanaLinkedService | TwilioLinkedService | GoogleSheetsLinkedService | AmazonS3LinkedService | AmazonRedshiftLinkedService | CustomDataSourceLinkedService | AzureSearchLinkedService | HttpLinkedService | FtpServerLinkedService | SftpServerLinkedService | SapBWLinkedService | SapHanaLinkedService | AmazonMWSLinkedService | AzurePostgreSqlLinkedService | ConcurLinkedService | CouchbaseLinkedService | DrillLinkedService | EloquaLinkedService | GoogleBigQueryLinkedService | GreenplumLinkedService | HBaseLinkedService | HiveLinkedService | HubspotLinkedService | ImpalaLinkedService | JiraLinkedService | MagentoLinkedService | MariaDBLinkedService | AzureMariaDBLinkedService | MarketoLinkedService | PaypalLinkedService | PhoenixLinkedService | PrestoLinkedService | QuickBooksLinkedService | ServiceNowLinkedService | ShopifyLinkedService | SparkLinkedService | SquareLinkedService | XeroLinkedService | ZohoLinkedService | VerticaLinkedService | NetezzaLinkedService | SalesforceMarketingCloudLinkedService | HDInsightOnDemandLinkedService | AzureDataLakeAnalyticsLinkedService | AzureDatabricksLinkedService | AzureDatabricksDeltaLakeLinkedService | ResponsysLinkedService | DynamicsAXLinkedService | OracleServiceCloudLinkedService | GoogleAdWordsLinkedService | SapTableLinkedService | AzureDataExplorerLinkedService | AzureFunctionLinkedService | SnowflakeLinkedService | SharePointOnlineListLinkedService | AzureSynapseArtifactsLinkedService | LakeHouseLinkedService;

/** Log location settings. */
export declare interface LogLocationSettings {
    /** Log storage linked service reference. */
    linkedServiceName: LinkedServiceReference;
    /** The path to storage for storing detailed logs of activity execution. Type: string (or Expression with resultType string). */
    path?: any;
}

/** Log settings. */
export declare interface LogSettings {
    /** Specifies whether to enable copy activity log. Type: boolean (or Expression with resultType boolean). */
    enableCopyActivityLog?: any;
    /** Specifies settings for copy activity log. */
    copyActivityLogSettings?: CopyActivityLogSettings;
    /** Log location settings customer needs to provide when enabling log. */
    logLocationSettings: LogLocationSettings;
}

/** (Deprecated. Please use LogSettings) Log storage settings. */
export declare interface LogStorageSettings {
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /** Log storage linked service reference. */
    linkedServiceName: LinkedServiceReference;
    /** The path to storage for storing detailed logs of activity execution. Type: string (or Expression with resultType string). */
    path?: any;
    /** Gets or sets the log level, support: Info, Warning. Type: string (or Expression with resultType string). */
    logLevel?: any;
    /** Specifies whether to enable reliable logging. Type: boolean (or Expression with resultType boolean). */
    enableReliableLogging?: any;
}

/** Lookup activity. */
export declare interface LookupActivity extends ExecutionActivity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Lookup";
    /** Dataset-specific source properties, same as copy activity source. */
    source: CopySourceUnion;
    /** Lookup activity dataset reference. */
    dataset: DatasetReference;
    /** Whether to return first row or all rows. Default value is true. Type: boolean (or Expression with resultType boolean). */
    firstRowOnly?: any;
}

/** Magento server linked service. */
export declare interface MagentoLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Magento";
    /** The URL of the Magento instance. (i.e. 192.168.222.110/magento3) */
    host: any;
    /** The access token from Magento. */
    accessToken?: SecretBaseUnion;
    /** Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. */
    useEncryptedEndpoints?: any;
    /** Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. */
    useHostVerification?: any;
    /** Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. */
    usePeerVerification?: any;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** Magento server dataset. */
export declare interface MagentoObjectDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "MagentoObject";
    /** The table name. Type: string (or Expression with resultType string). */
    tableName?: any;
}

/** A copy activity Magento server source. */
export declare interface MagentoSource extends TabularSource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "MagentoSource";
    /** A query to retrieve data from source. Type: string (or Expression with resultType string). */
    query?: any;
}

/** Managed identity credential. */
export declare interface ManagedIdentityCredential extends Credential_2 {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "ManagedIdentity";
    /** The resource id of user assigned managed identity */
    resourceId?: string;
}

/** Credential resource type. */
export declare interface ManagedIdentityCredentialResource extends SubResource {
    /** Managed Identity Credential properties. */
    properties: ManagedIdentityCredential;
}

/** Managed integration runtime, including managed elastic and managed dedicated integration runtimes. */
export declare interface ManagedIntegrationRuntime extends IntegrationRuntime {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Managed";
    /**
     * Integration runtime state, only valid for managed dedicated integration runtime.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly state?: IntegrationRuntimeState;
    /** Managed Virtual Network reference. */
    managedVirtualNetwork?: ManagedVirtualNetworkReference;
    /** The compute resource for managed integration runtime. */
    computeProperties?: IntegrationRuntimeComputeProperties;
    /** SSIS properties for managed integration runtime. */
    ssisProperties?: IntegrationRuntimeSsisProperties;
    /** The name of virtual network to which Azure-SSIS integration runtime will join */
    customerVirtualNetwork?: IntegrationRuntimeCustomerVirtualNetwork;
}

/** Error definition for managed integration runtime. */
export declare interface ManagedIntegrationRuntimeError {
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /**
     * The time when the error occurred.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly time?: Date;
    /**
     * Error code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * Managed integration runtime error parameters.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly parameters?: string[];
    /**
     * Error message.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
}

/** Properties of integration runtime node. */
export declare interface ManagedIntegrationRuntimeNode {
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /**
     * The managed integration runtime node id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nodeId?: string;
    /**
     * The managed integration runtime node status.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: ManagedIntegrationRuntimeNodeStatus;
    /** The errors that occurred on this integration runtime node. */
    errors?: ManagedIntegrationRuntimeError[];
}

/**
 * Defines values for ManagedIntegrationRuntimeNodeStatus. \
 * {@link KnownManagedIntegrationRuntimeNodeStatus} can be used interchangeably with ManagedIntegrationRuntimeNodeStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Starting** \
 * **Available** \
 * **Recycling** \
 * **Unavailable**
 */
export declare type ManagedIntegrationRuntimeNodeStatus = string;

/** Properties of managed integration runtime operation result. */
export declare interface ManagedIntegrationRuntimeOperationResult {
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /**
     * The operation type. Could be start or stop.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The start time of the operation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly startTime?: Date;
    /**
     * The operation result.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly result?: string;
    /**
     * The error code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly errorCode?: string;
    /**
     * Managed integration runtime error parameters.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly parameters?: string[];
    /**
     * The activity id for the operation request.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly activityId?: string;
}

/** Managed integration runtime status. */
export declare interface ManagedIntegrationRuntimeStatus extends IntegrationRuntimeStatus {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Managed";
    /**
     * The time at which the integration runtime was created, in ISO8601 format.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createTime?: Date;
    /**
     * The list of nodes for managed integration runtime.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nodes?: ManagedIntegrationRuntimeNode[];
    /**
     * The errors that occurred on this integration runtime.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly otherErrors?: ManagedIntegrationRuntimeError[];
    /**
     * The last operation result that occurred on this integration runtime.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastOperation?: ManagedIntegrationRuntimeOperationResult;
}

/** Properties of a managed private endpoint */
export declare interface ManagedPrivateEndpoint {
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /** The managed private endpoint connection state */
    connectionState?: ConnectionStateProperties;
    /** Fully qualified domain names */
    fqdns?: string[];
    /** The groupId to which the managed private endpoint is created */
    groupId?: string;
    /**
     * Denotes whether the managed private endpoint is reserved
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isReserved?: boolean;
    /** The ARM resource ID of the resource to which the managed private endpoint is created */
    privateLinkResourceId?: string;
    /**
     * The managed private endpoint provisioning state
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
}

/** A list of managed private endpoint resources. */
export declare interface ManagedPrivateEndpointListResponse {
    /** List of managed private endpoints. */
    value: ManagedPrivateEndpointResource[];
    /** The link to the next page of results, if any remaining results exist. */
    nextLink?: string;
}

/** Managed private endpoint resource type. */
export declare interface ManagedPrivateEndpointResource extends SubResource {
    /** Managed private endpoint properties. */
    properties: ManagedPrivateEndpoint;
}

/** Interface representing a ManagedPrivateEndpoints. */
export declare interface ManagedPrivateEndpoints {
    /**
     * Lists managed private endpoints.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param managedVirtualNetworkName Managed virtual network name
     * @param options The options parameters.
     */
    listByFactory(resourceGroupName: string, factoryName: string, managedVirtualNetworkName: string, options?: ManagedPrivateEndpointsListByFactoryOptionalParams): PagedAsyncIterableIterator<ManagedPrivateEndpointResource>;
    /**
     * Creates or updates a managed private endpoint.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param managedVirtualNetworkName Managed virtual network name
     * @param managedPrivateEndpointName Managed private endpoint name
     * @param managedPrivateEndpoint Managed private endpoint resource definition.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, factoryName: string, managedVirtualNetworkName: string, managedPrivateEndpointName: string, managedPrivateEndpoint: ManagedPrivateEndpointResource, options?: ManagedPrivateEndpointsCreateOrUpdateOptionalParams): Promise<ManagedPrivateEndpointsCreateOrUpdateResponse>;
    /**
     * Gets a managed private endpoint.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param managedVirtualNetworkName Managed virtual network name
     * @param managedPrivateEndpointName Managed private endpoint name
     * @param options The options parameters.
     */
    get(resourceGroupName: string, factoryName: string, managedVirtualNetworkName: string, managedPrivateEndpointName: string, options?: ManagedPrivateEndpointsGetOptionalParams): Promise<ManagedPrivateEndpointsGetResponse>;
    /**
     * Deletes a managed private endpoint.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param managedVirtualNetworkName Managed virtual network name
     * @param managedPrivateEndpointName Managed private endpoint name
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, factoryName: string, managedVirtualNetworkName: string, managedPrivateEndpointName: string, options?: ManagedPrivateEndpointsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface ManagedPrivateEndpointsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** ETag of the managed private endpoint entity. Should only be specified for update, for which it should match existing entity or can be * for unconditional update. */
    ifMatch?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type ManagedPrivateEndpointsCreateOrUpdateResponse = ManagedPrivateEndpointResource;

/** Optional parameters. */
export declare interface ManagedPrivateEndpointsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface ManagedPrivateEndpointsGetOptionalParams extends coreClient.OperationOptions {
    /** ETag of the managed private endpoint entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. */
    ifNoneMatch?: string;
}

/** Contains response data for the get operation. */
export declare type ManagedPrivateEndpointsGetResponse = ManagedPrivateEndpointResource;

/** Optional parameters. */
export declare interface ManagedPrivateEndpointsListByFactoryNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByFactoryNext operation. */
export declare type ManagedPrivateEndpointsListByFactoryNextResponse = ManagedPrivateEndpointListResponse;

/** Optional parameters. */
export declare interface ManagedPrivateEndpointsListByFactoryOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByFactory operation. */
export declare type ManagedPrivateEndpointsListByFactoryResponse = ManagedPrivateEndpointListResponse;

/** A managed Virtual Network associated with the Azure Data Factory */
export declare interface ManagedVirtualNetwork {
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /**
     * Managed Virtual Network ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly vNetId?: string;
    /**
     * Managed Virtual Network alias.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly alias?: string;
}

/** A list of managed Virtual Network resources. */
export declare interface ManagedVirtualNetworkListResponse {
    /** List of managed Virtual Networks. */
    value: ManagedVirtualNetworkResource[];
    /** The link to the next page of results, if any remaining results exist. */
    nextLink?: string;
}

/** Managed Virtual Network reference type. */
export declare interface ManagedVirtualNetworkReference {
    /** Managed Virtual Network reference type. */
    type: ManagedVirtualNetworkReferenceType;
    /** Reference ManagedVirtualNetwork name. */
    referenceName: string;
}

/**
 * Defines values for ManagedVirtualNetworkReferenceType. \
 * {@link KnownManagedVirtualNetworkReferenceType} can be used interchangeably with ManagedVirtualNetworkReferenceType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ManagedVirtualNetworkReference**
 */
export declare type ManagedVirtualNetworkReferenceType = string;

/** Managed Virtual Network resource type. */
export declare interface ManagedVirtualNetworkResource extends SubResource {
    /** Managed Virtual Network properties. */
    properties: ManagedVirtualNetwork;
}

/** Interface representing a ManagedVirtualNetworks. */
export declare interface ManagedVirtualNetworks {
    /**
     * Lists managed Virtual Networks.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param options The options parameters.
     */
    listByFactory(resourceGroupName: string, factoryName: string, options?: ManagedVirtualNetworksListByFactoryOptionalParams): PagedAsyncIterableIterator<ManagedVirtualNetworkResource>;
    /**
     * Creates or updates a managed Virtual Network.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param managedVirtualNetworkName Managed virtual network name
     * @param managedVirtualNetwork Managed Virtual Network resource definition.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, factoryName: string, managedVirtualNetworkName: string, managedVirtualNetwork: ManagedVirtualNetworkResource, options?: ManagedVirtualNetworksCreateOrUpdateOptionalParams): Promise<ManagedVirtualNetworksCreateOrUpdateResponse>;
    /**
     * Gets a managed Virtual Network.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param managedVirtualNetworkName Managed virtual network name
     * @param options The options parameters.
     */
    get(resourceGroupName: string, factoryName: string, managedVirtualNetworkName: string, options?: ManagedVirtualNetworksGetOptionalParams): Promise<ManagedVirtualNetworksGetResponse>;
}

/** Optional parameters. */
export declare interface ManagedVirtualNetworksCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** ETag of the managed Virtual Network entity. Should only be specified for update, for which it should match existing entity or can be * for unconditional update. */
    ifMatch?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type ManagedVirtualNetworksCreateOrUpdateResponse = ManagedVirtualNetworkResource;

/** Optional parameters. */
export declare interface ManagedVirtualNetworksGetOptionalParams extends coreClient.OperationOptions {
    /** ETag of the managed Virtual Network entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. */
    ifNoneMatch?: string;
}

/** Contains response data for the get operation. */
export declare type ManagedVirtualNetworksGetResponse = ManagedVirtualNetworkResource;

/** Optional parameters. */
export declare interface ManagedVirtualNetworksListByFactoryNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByFactoryNext operation. */
export declare type ManagedVirtualNetworksListByFactoryNextResponse = ManagedVirtualNetworkListResponse;

/** Optional parameters. */
export declare interface ManagedVirtualNetworksListByFactoryOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByFactory operation. */
export declare type ManagedVirtualNetworksListByFactoryResponse = ManagedVirtualNetworkListResponse;

/** Source and target column mapping details. */
export declare interface MapperAttributeMapping {
    /** Name of the target column. */
    name?: string;
    /** Type of the CDC attribute mapping. Note: 'Advanced' mapping type is also saved as 'Derived'. */
    type?: MappingType;
    /** Name of the function used for 'Aggregate' and 'Derived' (except 'Advanced') type mapping. */
    functionName?: string;
    /** Expression used for 'Aggregate' and 'Derived' type mapping. */
    expression?: string;
    /** Reference of the source column used in the mapping. It is used for 'Direct' mapping type only. */
    attributeReference?: MapperAttributeReference;
    /** List of references for source columns. It is used for 'Derived' and 'Aggregate' type mappings only. */
    attributeReferences?: MapperAttributeReference[];
}

/** Attribute mapping details. */
export declare interface MapperAttributeMappings {
    /** List of attribute mappings. */
    attributeMappings?: MapperAttributeMapping[];
}

/** Attribute reference details for the referred column. */
export declare interface MapperAttributeReference {
    /** Name of the column. */
    name?: string;
    /** Name of the table. */
    entity?: string;
    /** The connection reference for the connection. */
    entityConnectionReference?: MapperConnectionReference;
}

/** Source connection details. */
export declare interface MapperConnection {
    /** Linked service reference. */
    linkedService?: LinkedServiceReference;
    /** Type of the linked service e.g.: AzureBlobFS. */
    linkedServiceType?: string;
    /** Type of connection via linked service or dataset. */
    type: ConnectionType;
    /** A boolean indicating whether linked service is of type inline dataset. Currently only inline datasets are supported. */
    isInlineDataset?: boolean;
    /** List of name/value pairs for connection properties. */
    commonDslConnectorProperties?: MapperDslConnectorProperties[];
}

/** Source or target connection reference details. */
export declare interface MapperConnectionReference {
    /** Name of the connection */
    connectionName?: string;
    /** Type of connection via linked service or dataset. */
    type?: ConnectionType;
}

/** Connector properties of a CDC table in terms of name / value pairs. */
export declare interface MapperDslConnectorProperties {
    /** Name of the property. */
    name?: string;
    /** Value of the property. */
    value?: any;
}

/** CDC Policy. */
export declare interface MapperPolicy {
    /** Mode of running the CDC: batch vs continuous. */
    mode?: string;
    /** Defines the frequency and interval for running the CDC for batch mode. */
    recurrence?: MapperPolicyRecurrence;
}

/** CDC policy recurrence details. */
export declare interface MapperPolicyRecurrence {
    /** Frequency of period in terms of 'Hour', 'Minute' or 'Second'. */
    frequency?: FrequencyType;
    /** Actual interval value as per chosen frequency. */
    interval?: number;
}

/** A object which contains list of tables and connection details for a source connection. */
export declare interface MapperSourceConnectionsInfo {
    /** List of source tables for a source connection. */
    sourceEntities?: MapperTable[];
    /** Source connection details. */
    connection?: MapperConnection;
}

/** CDC table details. */
export declare interface MapperTable {
    /** Name of the table. */
    name?: string;
    /** List of columns for the source table. */
    schema?: MapperTableSchema[];
    /** List of name/value pairs for connection properties. */
    dslConnectorProperties?: MapperDslConnectorProperties[];
}

/** Schema of a CDC table in terms of column names and their corresponding data types. */
export declare interface MapperTableSchema {
    /** Name of the column. */
    name?: string;
    /** Data type of the column. */
    dataType?: string;
}

/** A object which contains list of tables and connection details for a target connection. */
export declare interface MapperTargetConnectionsInfo {
    /** List of source tables for a target connection. */
    targetEntities?: MapperTable[];
    /** Source connection details. */
    connection?: MapperConnection;
    /** List of table mappings. */
    dataMapperMappings?: DataMapperMapping[];
    /** List of relationship info among the tables. */
    relationships?: any[];
}

/** Mapping data flow. */
export declare interface MappingDataFlow extends DataFlow {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "MappingDataFlow";
    /** List of sources in data flow. */
    sources?: DataFlowSource[];
    /** List of sinks in data flow. */
    sinks?: DataFlowSink[];
    /** List of transformations in data flow. */
    transformations?: Transformation[];
    /** DataFlow script. */
    script?: string;
    /** Data flow script lines. */
    scriptLines?: string[];
}

/**
 * Defines values for MappingType. \
 * {@link KnownMappingType} can be used interchangeably with MappingType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Direct** \
 * **Derived** \
 * **Aggregate**
 */
export declare type MappingType = string;

/** MariaDB server linked service. */
export declare interface MariaDBLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "MariaDB";
    /** An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference. */
    connectionString?: any;
    /** The Azure key vault secret reference of password in connection string. */
    pwd?: AzureKeyVaultSecretReference;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** A copy activity MariaDB server source. */
export declare interface MariaDBSource extends TabularSource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "MariaDBSource";
    /** A query to retrieve data from source. Type: string (or Expression with resultType string). */
    query?: any;
}

/** MariaDB server dataset. */
export declare interface MariaDBTableDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "MariaDBTable";
    /** The table name. Type: string (or Expression with resultType string). */
    tableName?: any;
}

/** Marketo server linked service. */
export declare interface MarketoLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Marketo";
    /** The endpoint of the Marketo server. (i.e. 123-ABC-321.mktorest.com) */
    endpoint: any;
    /** The client Id of your Marketo service. */
    clientId: any;
    /** The client secret of your Marketo service. */
    clientSecret?: SecretBaseUnion;
    /** Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. */
    useEncryptedEndpoints?: any;
    /** Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. */
    useHostVerification?: any;
    /** Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. */
    usePeerVerification?: any;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** Marketo server dataset. */
export declare interface MarketoObjectDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "MarketoObject";
    /** The table name. Type: string (or Expression with resultType string). */
    tableName?: any;
}

/** A copy activity Marketo server source. */
export declare interface MarketoSource extends TabularSource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "MarketoSource";
    /** A query to retrieve data from source. Type: string (or Expression with resultType string). */
    query?: any;
}

/** Specify the name and value of custom metadata item. */
export declare interface MetadataItem {
    /** Metadata item key name. Type: string (or Expression with resultType string). */
    name?: any;
    /** Metadata item value. Type: string (or Expression with resultType string). */
    value?: any;
}

/** Microsoft Access linked service. */
export declare interface MicrosoftAccessLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "MicrosoftAccess";
    /** The non-access credential portion of the connection string as well as an optional encrypted credential. Type: string, or SecureString, or AzureKeyVaultSecretReference, or Expression with resultType string. */
    connectionString: any;
    /** Type of authentication used to connect to the Microsoft Access as ODBC data store. Possible values are: Anonymous and Basic. Type: string (or Expression with resultType string). */
    authenticationType?: any;
    /** The access credential portion of the connection string specified in driver-specific property-value format. */
    credential?: SecretBaseUnion;
    /** User name for Basic authentication. Type: string (or Expression with resultType string). */
    userName?: any;
    /** Password for Basic authentication. */
    password?: SecretBaseUnion;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** A copy activity Microsoft Access sink. */
export declare interface MicrosoftAccessSink extends CopySink {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "MicrosoftAccessSink";
    /** A query to execute before starting the copy. Type: string (or Expression with resultType string). */
    preCopyScript?: any;
}

/** A copy activity source for Microsoft Access. */
export declare interface MicrosoftAccessSource extends CopySource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "MicrosoftAccessSource";
    /** Database query. Type: string (or Expression with resultType string). */
    query?: any;
    /** Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). */
    additionalColumns?: any;
}

/** The Microsoft Access table dataset. */
export declare interface MicrosoftAccessTableDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "MicrosoftAccessTable";
    /** The Microsoft Access table name. Type: string (or Expression with resultType string). */
    tableName?: any;
}

/** The MongoDB Atlas database dataset. */
export declare interface MongoDbAtlasCollectionDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "MongoDbAtlasCollection";
    /** The collection name of the MongoDB Atlas database. Type: string (or Expression with resultType string). */
    collection: any;
}

/** Linked service for MongoDB Atlas data source. */
export declare interface MongoDbAtlasLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "MongoDbAtlas";
    /** The MongoDB Atlas connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference. */
    connectionString: any;
    /** The name of the MongoDB Atlas database that you want to access. Type: string (or Expression with resultType string). */
    database: any;
    /** The driver version that you want to choose. Allowed value are v1 and v2. Type: string (or Expression with resultType string). */
    driverVersion?: any;
}

/** A copy activity MongoDB Atlas sink. */
export declare interface MongoDbAtlasSink extends CopySink {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "MongoDbAtlasSink";
    /** Specifies whether the document with same key to be overwritten (upsert) rather than throw exception (insert). The default value is "insert". Type: string (or Expression with resultType string). Type: string (or Expression with resultType string). */
    writeBehavior?: any;
}

/** A copy activity source for a MongoDB Atlas database. */
export declare interface MongoDbAtlasSource extends CopySource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "MongoDbAtlasSource";
    /** Specifies selection filter using query operators. To return all documents in a collection, omit this parameter or pass an empty document ({}). Type: string (or Expression with resultType string). */
    filter?: any;
    /** Cursor methods for Mongodb query */
    cursorMethods?: MongoDbCursorMethodsProperties;
    /** Specifies the number of documents to return in each batch of the response from MongoDB Atlas instance. In most cases, modifying the batch size will not affect the user or the application. This property's main purpose is to avoid hit the limitation of response size. Type: integer (or Expression with resultType integer). */
    batchSize?: any;
    /** Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). */
    queryTimeout?: any;
    /** Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). */
    additionalColumns?: any;
}

/**
 * Defines values for MongoDbAuthenticationType. \
 * {@link KnownMongoDbAuthenticationType} can be used interchangeably with MongoDbAuthenticationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Basic** \
 * **Anonymous**
 */
export declare type MongoDbAuthenticationType = string;

/** The MongoDB database dataset. */
export declare interface MongoDbCollectionDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "MongoDbCollection";
    /** The table name of the MongoDB database. Type: string (or Expression with resultType string). */
    collectionName: any;
}

/** Cursor methods for Mongodb query */
export declare interface MongoDbCursorMethodsProperties {
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /** Specifies the fields to return in the documents that match the query filter. To return all fields in the matching documents, omit this parameter. Type: string (or Expression with resultType string). */
    project?: any;
    /** Specifies the order in which the query returns matching documents. Type: string (or Expression with resultType string). Type: string (or Expression with resultType string). */
    sort?: any;
    /** Specifies the how many documents skipped and where MongoDB begins returning results. This approach may be useful in implementing paginated results. Type: integer (or Expression with resultType integer). */
    skip?: any;
    /** Specifies the maximum number of documents the server returns. limit() is analogous to the LIMIT statement in a SQL database. Type: integer (or Expression with resultType integer). */
    limit?: any;
}

/** Linked service for MongoDb data source. */
export declare interface MongoDbLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "MongoDb";
    /** The IP address or server name of the MongoDB server. Type: string (or Expression with resultType string). */
    server: any;
    /** The authentication type to be used to connect to the MongoDB database. */
    authenticationType?: MongoDbAuthenticationType;
    /** The name of the MongoDB database that you want to access. Type: string (or Expression with resultType string). */
    databaseName: any;
    /** Username for authentication. Type: string (or Expression with resultType string). */
    username?: any;
    /** Password for authentication. */
    password?: SecretBaseUnion;
    /** Database to verify the username and password. Type: string (or Expression with resultType string). */
    authSource?: any;
    /** The TCP port number that the MongoDB server uses to listen for client connections. The default value is 27017. Type: integer (or Expression with resultType integer), minimum: 0. */
    port?: any;
    /** Specifies whether the connections to the server are encrypted using SSL. The default value is false. Type: boolean (or Expression with resultType boolean). */
    enableSsl?: any;
    /** Specifies whether to allow self-signed certificates from the server. The default value is false. Type: boolean (or Expression with resultType boolean). */
    allowSelfSignedServerCert?: any;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** A copy activity source for a MongoDB database. */
export declare interface MongoDbSource extends CopySource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "MongoDbSource";
    /** Database query. Should be a SQL-92 query expression. Type: string (or Expression with resultType string). */
    query?: any;
    /** Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). */
    additionalColumns?: any;
}

/** The MongoDB database dataset. */
export declare interface MongoDbV2CollectionDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "MongoDbV2Collection";
    /** The collection name of the MongoDB database. Type: string (or Expression with resultType string). */
    collection: any;
}

/** Linked service for MongoDB data source. */
export declare interface MongoDbV2LinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "MongoDbV2";
    /** The MongoDB connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference. */
    connectionString: any;
    /** The name of the MongoDB database that you want to access. Type: string (or Expression with resultType string). */
    database: any;
}

/** A copy activity MongoDB sink. */
export declare interface MongoDbV2Sink extends CopySink {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "MongoDbV2Sink";
    /** Specifies whether the document with same key to be overwritten (upsert) rather than throw exception (insert). The default value is "insert". Type: string (or Expression with resultType string). Type: string (or Expression with resultType string). */
    writeBehavior?: any;
}

/** A copy activity source for a MongoDB database. */
export declare interface MongoDbV2Source extends CopySource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "MongoDbV2Source";
    /** Specifies selection filter using query operators. To return all documents in a collection, omit this parameter or pass an empty document ({}). Type: string (or Expression with resultType string). */
    filter?: any;
    /** Cursor methods for Mongodb query */
    cursorMethods?: MongoDbCursorMethodsProperties;
    /** Specifies the number of documents to return in each batch of the response from MongoDB instance. In most cases, modifying the batch size will not affect the user or the application. This property's main purpose is to avoid hit the limitation of response size. Type: integer (or Expression with resultType integer). */
    batchSize?: any;
    /** Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). */
    queryTimeout?: any;
    /** Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). */
    additionalColumns?: any;
}

/** Base class for all triggers that support one to many model for trigger to pipeline. */
export declare interface MultiplePipelineTrigger extends Trigger {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "MultiplePipelineTrigger" | "ScheduleTrigger" | "BlobTrigger" | "BlobEventsTrigger" | "CustomEventsTrigger";
    /** Pipelines that need to be started. */
    pipelines?: TriggerPipelineReference[];
}

export declare type MultiplePipelineTriggerUnion = MultiplePipelineTrigger | ScheduleTrigger | BlobTrigger | BlobEventsTrigger | CustomEventsTrigger;

/** Linked service for MySQL data source. */
export declare interface MySqlLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "MySql";
    /** The connection string. Type: string, SecureString or AzureKeyVaultSecretReference. */
    connectionString: any;
    /** The Azure key vault secret reference of password in connection string. */
    password?: AzureKeyVaultSecretReference;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** A copy activity source for MySQL databases. */
export declare interface MySqlSource extends TabularSource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "MySqlSource";
    /** Database query. Type: string (or Expression with resultType string). */
    query?: any;
}

/** The MySQL table dataset. */
export declare interface MySqlTableDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "MySqlTable";
    /** The MySQL table name. Type: string (or Expression with resultType string). */
    tableName?: any;
}

/** Netezza linked service. */
export declare interface NetezzaLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Netezza";
    /** An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference. */
    connectionString?: any;
    /** The Azure key vault secret reference of password in connection string. */
    pwd?: AzureKeyVaultSecretReference;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/**
 * Defines values for NetezzaPartitionOption. \
 * {@link KnownNetezzaPartitionOption} can be used interchangeably with NetezzaPartitionOption,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **DataSlice** \
 * **DynamicRange**
 */
export declare type NetezzaPartitionOption = string;

/** The settings that will be leveraged for Netezza source partitioning. */
export declare interface NetezzaPartitionSettings {
    /** The name of the column in integer type that will be used for proceeding range partitioning. Type: string (or Expression with resultType string). */
    partitionColumnName?: any;
    /** The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string). */
    partitionUpperBound?: any;
    /** The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string). */
    partitionLowerBound?: any;
}

/** A copy activity Netezza source. */
export declare interface NetezzaSource extends TabularSource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "NetezzaSource";
    /** A query to retrieve data from source. Type: string (or Expression with resultType string). */
    query?: any;
    /** The partition mechanism that will be used for Netezza read in parallel. Possible values include: "None", "DataSlice", "DynamicRange". */
    partitionOption?: any;
    /** The settings that will be leveraged for Netezza source partitioning. */
    partitionSettings?: NetezzaPartitionSettings;
}

/** Netezza dataset. */
export declare interface NetezzaTableDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "NetezzaTable";
    /** This property will be retired. Please consider using schema + table properties instead. */
    tableName?: any;
    /** The table name of the Netezza. Type: string (or Expression with resultType string). */
    table?: any;
    /** The schema name of the Netezza. Type: string (or Expression with resultType string). */
    schemaTypePropertiesSchema?: any;
}

/** Notebook parameter. */
export declare interface NotebookParameter {
    /** Notebook parameter value. Type: string (or Expression with resultType string). */
    value?: any;
    /** Notebook parameter type. */
    type?: NotebookParameterType;
}

/**
 * Defines values for NotebookParameterType. \
 * {@link KnownNotebookParameterType} can be used interchangeably with NotebookParameterType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **string** \
 * **int** \
 * **float** \
 * **bool**
 */
export declare type NotebookParameterType = string;

/**
 * Defines values for NotebookReferenceType. \
 * {@link KnownNotebookReferenceType} can be used interchangeably with NotebookReferenceType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotebookReference**
 */
export declare type NotebookReferenceType = string;

/**
 * Defines values for ODataAadServicePrincipalCredentialType. \
 * {@link KnownODataAadServicePrincipalCredentialType} can be used interchangeably with ODataAadServicePrincipalCredentialType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ServicePrincipalKey** \
 * **ServicePrincipalCert**
 */
export declare type ODataAadServicePrincipalCredentialType = string;

/**
 * Defines values for ODataAuthenticationType. \
 * {@link KnownODataAuthenticationType} can be used interchangeably with ODataAuthenticationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Basic** \
 * **Anonymous** \
 * **Windows** \
 * **AadServicePrincipal** \
 * **ManagedServiceIdentity**
 */
export declare type ODataAuthenticationType = string;

/** Open Data Protocol (OData) linked service. */
export declare interface ODataLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "OData";
    /** The URL of the OData service endpoint. Type: string (or Expression with resultType string). */
    url: any;
    /** Type of authentication used to connect to the OData service. */
    authenticationType?: ODataAuthenticationType;
    /** User name of the OData service. Type: string (or Expression with resultType string). */
    userName?: any;
    /** Password of the OData service. */
    password?: SecretBaseUnion;
    /** The additional HTTP headers in the request to RESTful API used for authorization. Type: object (or Expression with resultType object). */
    authHeaders?: any;
    /** Specify the tenant information (domain name or tenant ID) under which your application resides. Type: string (or Expression with resultType string). */
    tenant?: any;
    /** Specify the application id of your application registered in Azure Active Directory. Type: string (or Expression with resultType string). */
    servicePrincipalId?: any;
    /** Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string). */
    azureCloudType?: any;
    /** Specify the resource you are requesting authorization to use Directory. Type: string (or Expression with resultType string). */
    aadResourceId?: any;
    /** Specify the credential type (key or cert) is used for service principal. */
    aadServicePrincipalCredentialType?: ODataAadServicePrincipalCredentialType;
    /** Specify the secret of your application registered in Azure Active Directory. Type: string (or Expression with resultType string). */
    servicePrincipalKey?: SecretBaseUnion;
    /** Specify the base64 encoded certificate of your application registered in Azure Active Directory. Type: string (or Expression with resultType string). */
    servicePrincipalEmbeddedCert?: SecretBaseUnion;
    /** Specify the password of your certificate if your certificate has a password and you are using AadServicePrincipal authentication. Type: string (or Expression with resultType string). */
    servicePrincipalEmbeddedCertPassword?: SecretBaseUnion;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** The Open Data Protocol (OData) resource dataset. */
export declare interface ODataResourceDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "ODataResource";
    /** The OData resource path. Type: string (or Expression with resultType string). */
    path?: any;
}

/** A copy activity source for OData source. */
export declare interface ODataSource extends CopySource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "ODataSource";
    /** OData query. For example, "$top=1". Type: string (or Expression with resultType string). */
    query?: any;
    /** The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:05:00. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). */
    httpRequestTimeout?: any;
    /** Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). */
    additionalColumns?: any;
}

/** Open Database Connectivity (ODBC) linked service. */
export declare interface OdbcLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Odbc";
    /** The non-access credential portion of the connection string as well as an optional encrypted credential. Type: string, or SecureString, or AzureKeyVaultSecretReference, or Expression with resultType string. */
    connectionString: any;
    /** Type of authentication used to connect to the ODBC data store. Possible values are: Anonymous and Basic. Type: string (or Expression with resultType string). */
    authenticationType?: any;
    /** The access credential portion of the connection string specified in driver-specific property-value format. */
    credential?: SecretBaseUnion;
    /** User name for Basic authentication. Type: string (or Expression with resultType string). */
    userName?: any;
    /** Password for Basic authentication. */
    password?: SecretBaseUnion;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** A copy activity ODBC sink. */
export declare interface OdbcSink extends CopySink {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "OdbcSink";
    /** A query to execute before starting the copy. Type: string (or Expression with resultType string). */
    preCopyScript?: any;
}

/** A copy activity source for ODBC databases. */
export declare interface OdbcSource extends TabularSource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "OdbcSource";
    /** Database query. Type: string (or Expression with resultType string). */
    query?: any;
}

/** The ODBC table dataset. */
export declare interface OdbcTableDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "OdbcTable";
    /** The ODBC table name. Type: string (or Expression with resultType string). */
    tableName?: any;
}

/** The Office365 account. */
export declare interface Office365Dataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Office365Table";
    /** Name of the dataset to extract from Office 365. Type: string (or Expression with resultType string). */
    tableName: any;
    /** A predicate expression that can be used to filter the specific rows to extract from Office 365. Type: string (or Expression with resultType string). */
    predicate?: any;
}

/** Office365 linked service. */
export declare interface Office365LinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Office365";
    /** Azure tenant ID to which the Office 365 account belongs. Type: string (or Expression with resultType string). */
    office365TenantId: any;
    /** Specify the tenant information under which your Azure AD web application resides. Type: string (or Expression with resultType string). */
    servicePrincipalTenantId: any;
    /** Specify the application's client ID. Type: string (or Expression with resultType string). */
    servicePrincipalId: any;
    /** Specify the application's key. */
    servicePrincipalKey: SecretBaseUnion;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** A copy activity source for an Office 365 service. */
export declare interface Office365Source extends CopySource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Office365Source";
    /** The groups containing all the users. Type: array of strings (or Expression with resultType array of strings). */
    allowedGroups?: any;
    /** The user scope uri. Type: string (or Expression with resultType string). */
    userScopeFilterUri?: any;
    /** The Column to apply the <paramref name="StartTime"/> and <paramref name="EndTime"/>. Type: string (or Expression with resultType string). */
    dateFilterColumn?: any;
    /** Start time of the requested range for this dataset. Type: string (or Expression with resultType string). */
    startTime?: any;
    /** End time of the requested range for this dataset. Type: string (or Expression with resultType string). */
    endTime?: any;
    /** The columns to be read out from the Office 365 table. Type: array of objects (or Expression with resultType array of objects). itemType: OutputColumn. Example: [ { "name": "Id" }, { "name": "CreatedDateTime" } ] */
    outputColumns?: any;
}

/** Azure Data Factory API operation definition. */
export declare interface Operation {
    /** Operation name: {provider}/{resource}/{operation} */
    name?: string;
    /** The intended executor of the operation. */
    origin?: string;
    /** Metadata associated with the operation. */
    display?: OperationDisplay;
    /** Details about a service operation. */
    serviceSpecification?: OperationServiceSpecification;
}

/** Metadata associated with the operation. */
export declare interface OperationDisplay {
    /** The description of the operation. */
    description?: string;
    /** The name of the provider. */
    provider?: string;
    /** The name of the resource type on which the operation is performed. */
    resource?: string;
    /** The type of operation: get, read, delete, etc. */
    operation?: string;
}

/** A list of operations that can be performed by the Data Factory service. */
export declare interface OperationListResponse {
    /** List of Data Factory operations supported by the Data Factory resource provider. */
    value?: Operation[];
    /** The link to the next page of results, if any remaining results exist. */
    nextLink?: string;
}

/** Details about an operation related to logs. */
export declare interface OperationLogSpecification {
    /** The name of the log category. */
    name?: string;
    /** Localized display name. */
    displayName?: string;
    /** Blobs created in the customer storage account, per hour. */
    blobDuration?: string;
}

/** Defines how often data for a metric becomes available. */
export declare interface OperationMetricAvailability {
    /** The granularity for the metric. */
    timeGrain?: string;
    /** Blob created in the customer storage account, per hour. */
    blobDuration?: string;
}

/** Defines the metric dimension. */
export declare interface OperationMetricDimension {
    /** The name of the dimension for the metric. */
    name?: string;
    /** The display name of the metric dimension. */
    displayName?: string;
    /** Whether the dimension should be exported to Azure Monitor. */
    toBeExportedForShoebox?: boolean;
}

/** Details about an operation related to metrics. */
export declare interface OperationMetricSpecification {
    /** The name of the metric. */
    name?: string;
    /** Localized display name of the metric. */
    displayName?: string;
    /** The description of the metric. */
    displayDescription?: string;
    /** The unit that the metric is measured in. */
    unit?: string;
    /** The type of metric aggregation. */
    aggregationType?: string;
    /** Whether or not the service is using regional MDM accounts. */
    enableRegionalMdmAccount?: string;
    /** The name of the MDM account. */
    sourceMdmAccount?: string;
    /** The name of the MDM namespace. */
    sourceMdmNamespace?: string;
    /** Defines how often data for metrics becomes available. */
    availabilities?: OperationMetricAvailability[];
    /** Defines the metric dimension. */
    dimensions?: OperationMetricDimension[];
}

/** Interface representing a Operations. */
export declare interface Operations {
    /**
     * Lists the available Azure Data Factory API operations.
     * @param options The options parameters.
     */
    list(options?: OperationsListOptionalParams): PagedAsyncIterableIterator<Operation>;
}

/** Details about a service operation. */
export declare interface OperationServiceSpecification {
    /** Details about operations related to logs. */
    logSpecifications?: OperationLogSpecification[];
    /** Details about operations related to metrics. */
    metricSpecifications?: OperationMetricSpecification[];
}

/** Optional parameters. */
export declare interface OperationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type OperationsListNextResponse = OperationListResponse;

/** Optional parameters. */
export declare interface OperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OperationsListResponse = OperationListResponse;

/** Linked service for Oracle Cloud Storage. */
export declare interface OracleCloudStorageLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "OracleCloudStorage";
    /** The access key identifier of the Oracle Cloud Storage Identity and Access Management (IAM) user. Type: string (or Expression with resultType string). */
    accessKeyId?: any;
    /** The secret access key of the Oracle Cloud Storage Identity and Access Management (IAM) user. */
    secretAccessKey?: SecretBaseUnion;
    /** This value specifies the endpoint to access with the Oracle Cloud Storage Connector. This is an optional property; change it only if you want to try a different service endpoint or want to switch between https and http. Type: string (or Expression with resultType string). */
    serviceUrl?: any;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** The location of Oracle Cloud Storage dataset. */
export declare interface OracleCloudStorageLocation extends DatasetLocation {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "OracleCloudStorageLocation";
    /** Specify the bucketName of Oracle Cloud Storage. Type: string (or Expression with resultType string) */
    bucketName?: any;
    /** Specify the version of Oracle Cloud Storage. Type: string (or Expression with resultType string). */
    version?: any;
}

/** Oracle Cloud Storage read settings. */
export declare interface OracleCloudStorageReadSettings extends StoreReadSettings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "OracleCloudStorageReadSettings";
    /** If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean). */
    recursive?: any;
    /** Oracle Cloud Storage wildcardFolderPath. Type: string (or Expression with resultType string). */
    wildcardFolderPath?: any;
    /** Oracle Cloud Storage wildcardFileName. Type: string (or Expression with resultType string). */
    wildcardFileName?: any;
    /** The prefix filter for the Oracle Cloud Storage object name. Type: string (or Expression with resultType string). */
    prefix?: any;
    /** Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string). */
    fileListPath?: any;
    /** Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean). */
    enablePartitionDiscovery?: any;
    /** Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string). */
    partitionRootPath?: any;
    /** Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean). */
    deleteFilesAfterCompletion?: any;
    /** The start of file's modified datetime. Type: string (or Expression with resultType string). */
    modifiedDatetimeStart?: any;
    /** The end of file's modified datetime. Type: string (or Expression with resultType string). */
    modifiedDatetimeEnd?: any;
}

/** Oracle database. */
export declare interface OracleLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Oracle";
    /** The connection string. Type: string, SecureString or AzureKeyVaultSecretReference. */
    connectionString: any;
    /** The Azure key vault secret reference of password in connection string. */
    password?: AzureKeyVaultSecretReference;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/**
 * Defines values for OraclePartitionOption. \
 * {@link KnownOraclePartitionOption} can be used interchangeably with OraclePartitionOption,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **PhysicalPartitionsOfTable** \
 * **DynamicRange**
 */
export declare type OraclePartitionOption = string;

/** The settings that will be leveraged for Oracle source partitioning. */
export declare interface OraclePartitionSettings {
    /** Names of the physical partitions of Oracle table. */
    partitionNames?: any;
    /** The name of the column in integer type that will be used for proceeding range partitioning. Type: string (or Expression with resultType string). */
    partitionColumnName?: any;
    /** The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string). */
    partitionUpperBound?: any;
    /** The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string). */
    partitionLowerBound?: any;
}

/** Oracle Service Cloud linked service. */
export declare interface OracleServiceCloudLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "OracleServiceCloud";
    /** The URL of the Oracle Service Cloud instance. */
    host: any;
    /** The user name that you use to access Oracle Service Cloud server. */
    username: any;
    /** The password corresponding to the user name that you provided in the username key. */
    password: SecretBaseUnion;
    /** Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean). */
    useEncryptedEndpoints?: any;
    /** Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean). */
    useHostVerification?: any;
    /** Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean). */
    usePeerVerification?: any;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** Oracle Service Cloud dataset. */
export declare interface OracleServiceCloudObjectDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "OracleServiceCloudObject";
    /** The table name. Type: string (or Expression with resultType string). */
    tableName?: any;
}

/** A copy activity Oracle Service Cloud source. */
export declare interface OracleServiceCloudSource extends TabularSource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "OracleServiceCloudSource";
    /** A query to retrieve data from source. Type: string (or Expression with resultType string). */
    query?: any;
}

/** A copy activity Oracle sink. */
export declare interface OracleSink extends CopySink {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "OracleSink";
    /** SQL pre-copy script. Type: string (or Expression with resultType string). */
    preCopyScript?: any;
}

/** A copy activity Oracle source. */
export declare interface OracleSource extends CopySource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "OracleSource";
    /** Oracle reader query. Type: string (or Expression with resultType string). */
    oracleReaderQuery?: any;
    /** Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). */
    queryTimeout?: any;
    /** The partition mechanism that will be used for Oracle read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange". */
    partitionOption?: any;
    /** The settings that will be leveraged for Oracle source partitioning. */
    partitionSettings?: OraclePartitionSettings;
    /** Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). */
    additionalColumns?: any;
}

/** The on-premises Oracle database dataset. */
export declare interface OracleTableDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "OracleTable";
    /** This property will be retired. Please consider using schema + table properties instead. */
    tableName?: any;
    /** The schema name of the on-premises Oracle database. Type: string (or Expression with resultType string). */
    schemaTypePropertiesSchema?: any;
    /** The table name of the on-premises Oracle database. Type: string (or Expression with resultType string). */
    table?: any;
}

/**
 * Defines values for OrcCompressionCodec. \
 * {@link KnownOrcCompressionCodec} can be used interchangeably with OrcCompressionCodec,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **none** \
 * **zlib** \
 * **snappy** \
 * **lzo**
 */
export declare type OrcCompressionCodec = string;

/** ORC dataset. */
export declare interface OrcDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Orc";
    /** The location of the ORC data storage. */
    location?: DatasetLocationUnion;
    /** The data orcCompressionCodec. Type: string (or Expression with resultType string). */
    orcCompressionCodec?: any;
}

/** The data stored in Optimized Row Columnar (ORC) format. */
export declare interface OrcFormat extends DatasetStorageFormat {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "OrcFormat";
}

/** A copy activity ORC sink. */
export declare interface OrcSink extends CopySink {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "OrcSink";
    /** ORC store settings. */
    storeSettings?: StoreWriteSettingsUnion;
    /** ORC format settings. */
    formatSettings?: OrcWriteSettings;
}

/** A copy activity ORC source. */
export declare interface OrcSource extends CopySource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "OrcSource";
    /** ORC store settings. */
    storeSettings?: StoreReadSettingsUnion;
    /** Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). */
    additionalColumns?: any;
}

/** Orc write settings. */
export declare interface OrcWriteSettings extends FormatWriteSettings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "OrcWriteSettings";
    /** Limit the written file's row count to be smaller than or equal to the specified count. Type: integer (or Expression with resultType integer). */
    maxRowsPerFile?: any;
    /** Specifies the file name pattern <fileNamePrefix>_<fileIndex>.<fileExtension> when copy from non-file based store without partitionOptions. Type: string (or Expression with resultType string). */
    fileNamePrefix?: any;
}

/** The columns to be read out from the Office 365 table. */
export declare interface OutputColumn {
    /** Name of the table column. Type: string. */
    name?: string;
}

/** Package store for the SSIS integration runtime. */
export declare interface PackageStore {
    /** The name of the package store */
    name: string;
    /** The package store linked service reference. */
    packageStoreLinkedService: EntityReference;
}

/** Definition of a single parameter for an entity. */
export declare interface ParameterSpecification {
    /** Parameter type. */
    type: ParameterType;
    /** Default value of parameter. */
    defaultValue?: any;
}

/**
 * Defines values for ParameterType. \
 * {@link KnownParameterType} can be used interchangeably with ParameterType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Object** \
 * **String** \
 * **Int** \
 * **Float** \
 * **Bool** \
 * **Array** \
 * **SecureString**
 */
export declare type ParameterType = string;

/** Parquet dataset. */
export declare interface ParquetDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Parquet";
    /** The location of the parquet storage. */
    location?: DatasetLocationUnion;
    /** The data compressionCodec. Type: string (or Expression with resultType string). */
    compressionCodec?: any;
}

/** The data stored in Parquet format. */
export declare interface ParquetFormat extends DatasetStorageFormat {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "ParquetFormat";
}

/** Parquet read settings. */
export declare interface ParquetReadSettings extends FormatReadSettings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "ParquetReadSettings";
    /** Compression settings. */
    compressionProperties?: CompressionReadSettingsUnion;
}

/** A copy activity Parquet sink. */
export declare interface ParquetSink extends CopySink {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "ParquetSink";
    /** Parquet store settings. */
    storeSettings?: StoreWriteSettingsUnion;
    /** Parquet format settings. */
    formatSettings?: ParquetWriteSettings;
}

/** A copy activity Parquet source. */
export declare interface ParquetSource extends CopySource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "ParquetSource";
    /** Parquet store settings. */
    storeSettings?: StoreReadSettingsUnion;
    /** Parquet format settings. */
    formatSettings?: ParquetReadSettings;
    /** Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). */
    additionalColumns?: any;
}

/** Parquet write settings. */
export declare interface ParquetWriteSettings extends FormatWriteSettings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "ParquetWriteSettings";
    /** Limit the written file's row count to be smaller than or equal to the specified count. Type: integer (or Expression with resultType integer). */
    maxRowsPerFile?: any;
    /** Specifies the file name pattern <fileNamePrefix>_<fileIndex>.<fileExtension> when copy from non-file based store without partitionOptions. Type: string (or Expression with resultType string). */
    fileNamePrefix?: any;
}

/** Paypal Service linked service. */
export declare interface PaypalLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Paypal";
    /** The URL of the PayPal instance. (i.e. api.sandbox.paypal.com) */
    host: any;
    /** The client ID associated with your PayPal application. */
    clientId: any;
    /** The client secret associated with your PayPal application. */
    clientSecret?: SecretBaseUnion;
    /** Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. */
    useEncryptedEndpoints?: any;
    /** Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. */
    useHostVerification?: any;
    /** Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. */
    usePeerVerification?: any;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** Paypal Service dataset. */
export declare interface PaypalObjectDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "PaypalObject";
    /** The table name. Type: string (or Expression with resultType string). */
    tableName?: any;
}

/** A copy activity Paypal Service source. */
export declare interface PaypalSource extends TabularSource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "PaypalSource";
    /** A query to retrieve data from source. Type: string (or Expression with resultType string). */
    query?: any;
}

/**
 * Defines values for PhoenixAuthenticationType. \
 * {@link KnownPhoenixAuthenticationType} can be used interchangeably with PhoenixAuthenticationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Anonymous** \
 * **UsernameAndPassword** \
 * **WindowsAzureHDInsightService**
 */
export declare type PhoenixAuthenticationType = string;

/** Phoenix server linked service. */
export declare interface PhoenixLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Phoenix";
    /** The IP address or host name of the Phoenix server. (i.e. 192.168.222.160) */
    host: any;
    /** The TCP port that the Phoenix server uses to listen for client connections. The default value is 8765. */
    port?: any;
    /** The partial URL corresponding to the Phoenix server. (i.e. /gateway/sandbox/phoenix/version). The default value is hbasephoenix if using WindowsAzureHDInsightService. */
    httpPath?: any;
    /** The authentication mechanism used to connect to the Phoenix server. */
    authenticationType: PhoenixAuthenticationType;
    /** The user name used to connect to the Phoenix server. */
    username?: any;
    /** The password corresponding to the user name. */
    password?: SecretBaseUnion;
    /** Specifies whether the connections to the server are encrypted using SSL. The default value is false. */
    enableSsl?: any;
    /** The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR. */
    trustedCertPath?: any;
    /** Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false. */
    useSystemTrustStore?: any;
    /** Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false. */
    allowHostNameCNMismatch?: any;
    /** Specifies whether to allow self-signed certificates from the server. The default value is false. */
    allowSelfSignedServerCert?: any;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** Phoenix server dataset. */
export declare interface PhoenixObjectDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "PhoenixObject";
    /** This property will be retired. Please consider using schema + table properties instead. */
    tableName?: any;
    /** The table name of the Phoenix. Type: string (or Expression with resultType string). */
    table?: any;
    /** The schema name of the Phoenix. Type: string (or Expression with resultType string). */
    schemaTypePropertiesSchema?: any;
}

/** A copy activity Phoenix server source. */
export declare interface PhoenixSource extends TabularSource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "PhoenixSource";
    /** A query to retrieve data from source. Type: string (or Expression with resultType string). */
    query?: any;
}

/** Pipeline ElapsedTime Metric Policy. */
export declare interface PipelineElapsedTimeMetricPolicy {
    /** TimeSpan value, after which an Azure Monitoring Metric is fired. */
    duration?: any;
}

/** PipelineExternalComputeScale properties for managed integration runtime. */
export declare interface PipelineExternalComputeScaleProperties {
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /** Time to live (in minutes) setting of integration runtime which will execute pipeline and external activity. */
    timeToLive?: number;
    /** Number of the pipeline nodes, which should be greater than 0 and less than 11. */
    numberOfPipelineNodes?: number;
    /** Number of the the external nodes, which should be greater than 0 and less than 11. */
    numberOfExternalNodes?: number;
}

/** The folder that this Pipeline is in. If not specified, Pipeline will appear at the root level. */
export declare interface PipelineFolder {
    /** The name of the folder that this Pipeline is in. */
    name?: string;
}

/** A list of pipeline resources. */
export declare interface PipelineListResponse {
    /** List of pipelines. */
    value: PipelineResource[];
    /** The link to the next page of results, if any remaining results exist. */
    nextLink?: string;
}

/** Pipeline Policy. */
export declare interface PipelinePolicy {
    /** Pipeline ElapsedTime Metric Policy. */
    elapsedTimeMetric?: PipelineElapsedTimeMetricPolicy;
}

/** Pipeline reference type. */
export declare interface PipelineReference {
    /** Pipeline reference type. */
    type: "PipelineReference";
    /** Reference pipeline name. */
    referenceName: string;
    /** Reference name. */
    name?: string;
}

/** Pipeline resource type. */
export declare interface PipelineResource extends SubResource {
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /** The description of the pipeline. */
    description?: string;
    /** List of activities in pipeline. */
    activities?: ActivityUnion[];
    /** List of parameters for pipeline. */
    parameters?: {
        [propertyName: string]: ParameterSpecification;
    };
    /** List of variables for pipeline. */
    variables?: {
        [propertyName: string]: VariableSpecification;
    };
    /** The max number of concurrent runs for the pipeline. */
    concurrency?: number;
    /** List of tags that can be used for describing the Pipeline. */
    annotations?: any[];
    /** Dimensions emitted by Pipeline. */
    runDimensions?: {
        [propertyName: string]: any;
    };
    /** The folder that this Pipeline is in. If not specified, Pipeline will appear at the root level. */
    folder?: PipelineFolder;
    /** Pipeline Policy. */
    policy?: PipelinePolicy;
}

/** Information about a pipeline run. */
export declare interface PipelineRun {
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /**
     * Identifier of a run.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly runId?: string;
    /**
     * Identifier that correlates all the recovery runs of a pipeline run.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly runGroupId?: string;
    /**
     * Indicates if the recovered pipeline run is the latest in its group.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isLatest?: boolean;
    /**
     * The pipeline name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly pipelineName?: string;
    /**
     * The full or partial list of parameter name, value pair used in the pipeline run.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly parameters?: {
        [propertyName: string]: string;
    };
    /**
     * Run dimensions emitted by Pipeline run.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly runDimensions?: {
        [propertyName: string]: string;
    };
    /**
     * Entity that started the pipeline run.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly invokedBy?: PipelineRunInvokedBy;
    /**
     * The last updated timestamp for the pipeline run event in ISO8601 format.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastUpdated?: Date;
    /**
     * The start time of a pipeline run in ISO8601 format.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly runStart?: Date;
    /**
     * The end time of a pipeline run in ISO8601 format.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly runEnd?: Date;
    /**
     * The duration of a pipeline run.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly durationInMs?: number;
    /**
     * The status of a pipeline run. Possible values: Queued, InProgress, Succeeded, Failed, Canceling, Cancelled
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: string;
    /**
     * The message from a pipeline run.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
}

/** Provides entity name and id that started the pipeline run. */
export declare interface PipelineRunInvokedBy {
    /**
     * Name of the entity that started the pipeline run.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The ID of the entity that started the run.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The type of the entity that started the run.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly invokedByType?: string;
    /**
     * The name of the pipeline that triggered the run, if any.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly pipelineName?: string;
    /**
     * The run id of the pipeline that triggered the run, if any.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly pipelineRunId?: string;
}

/** Interface representing a PipelineRuns. */
export declare interface PipelineRuns {
    /**
     * Query pipeline runs in the factory based on input filter conditions.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param filterParameters Parameters to filter the pipeline run.
     * @param options The options parameters.
     */
    queryByFactory(resourceGroupName: string, factoryName: string, filterParameters: RunFilterParameters, options?: PipelineRunsQueryByFactoryOptionalParams): Promise<PipelineRunsQueryByFactoryResponse>;
    /**
     * Get a pipeline run by its run ID.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param runId The pipeline run identifier.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, factoryName: string, runId: string, options?: PipelineRunsGetOptionalParams): Promise<PipelineRunsGetResponse>;
    /**
     * Cancel a pipeline run by its run ID.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param runId The pipeline run identifier.
     * @param options The options parameters.
     */
    cancel(resourceGroupName: string, factoryName: string, runId: string, options?: PipelineRunsCancelOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface PipelineRunsCancelOptionalParams extends coreClient.OperationOptions {
    /** If true, cancel all the Child pipelines that are triggered by the current pipeline. */
    isRecursive?: boolean;
}

/** Optional parameters. */
export declare interface PipelineRunsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type PipelineRunsGetResponse = PipelineRun;

/** Optional parameters. */
export declare interface PipelineRunsQueryByFactoryOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the queryByFactory operation. */
export declare type PipelineRunsQueryByFactoryResponse = PipelineRunsQueryResponse;

/** A list pipeline runs. */
export declare interface PipelineRunsQueryResponse {
    /** List of pipeline runs. */
    value: PipelineRun[];
    /** The continuation token for getting the next page of results, if any remaining results exist, null otherwise. */
    continuationToken?: string;
}

/** Interface representing a Pipelines. */
export declare interface Pipelines {
    /**
     * Lists pipelines.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param options The options parameters.
     */
    listByFactory(resourceGroupName: string, factoryName: string, options?: PipelinesListByFactoryOptionalParams): PagedAsyncIterableIterator<PipelineResource>;
    /**
     * Creates or updates a pipeline.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param pipelineName The pipeline name.
     * @param pipeline Pipeline resource definition.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, factoryName: string, pipelineName: string, pipeline: PipelineResource, options?: PipelinesCreateOrUpdateOptionalParams): Promise<PipelinesCreateOrUpdateResponse>;
    /**
     * Gets a pipeline.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param pipelineName The pipeline name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, factoryName: string, pipelineName: string, options?: PipelinesGetOptionalParams): Promise<PipelinesGetResponse>;
    /**
     * Deletes a pipeline.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param pipelineName The pipeline name.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, factoryName: string, pipelineName: string, options?: PipelinesDeleteOptionalParams): Promise<void>;
    /**
     * Creates a run of a pipeline.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param pipelineName The pipeline name.
     * @param options The options parameters.
     */
    createRun(resourceGroupName: string, factoryName: string, pipelineName: string, options?: PipelinesCreateRunOptionalParams): Promise<PipelinesCreateRunResponse>;
}

/** Optional parameters. */
export declare interface PipelinesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** ETag of the pipeline entity.  Should only be specified for update, for which it should match existing entity or can be * for unconditional update. */
    ifMatch?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type PipelinesCreateOrUpdateResponse = PipelineResource;

/** Optional parameters. */
export declare interface PipelinesCreateRunOptionalParams extends coreClient.OperationOptions {
    /** Parameters of the pipeline run. These parameters will be used only if the runId is not specified. */
    parameters?: {
        [propertyName: string]: any;
    };
    /** The pipeline run identifier. If run ID is specified the parameters of the specified run will be used to create a new run. */
    referencePipelineRunId?: string;
    /** Recovery mode flag. If recovery mode is set to true, the specified referenced pipeline run and the new run will be grouped under the same groupId. */
    isRecovery?: boolean;
    /** In recovery mode, the rerun will start from this activity. If not specified, all activities will run. */
    startActivityName?: string;
    /** In recovery mode, if set to true, the rerun will start from failed activities. The property will be used only if startActivityName is not specified. */
    startFromFailure?: boolean;
}

/** Contains response data for the createRun operation. */
export declare type PipelinesCreateRunResponse = CreateRunResponse;

/** Optional parameters. */
export declare interface PipelinesDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface PipelinesGetOptionalParams extends coreClient.OperationOptions {
    /** ETag of the pipeline entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. */
    ifNoneMatch?: string;
}

/** Contains response data for the get operation. */
export declare type PipelinesGetResponse = PipelineResource;

/** Optional parameters. */
export declare interface PipelinesListByFactoryNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByFactoryNext operation. */
export declare type PipelinesListByFactoryNextResponse = PipelineListResponse;

/** Optional parameters. */
export declare interface PipelinesListByFactoryOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByFactory operation. */
export declare type PipelinesListByFactoryResponse = PipelineListResponse;

/** PolyBase settings. */
export declare interface PolybaseSettings {
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /** Reject type. */
    rejectType?: PolybaseSettingsRejectType;
    /** Specifies the value or the percentage of rows that can be rejected before the query fails. Type: number (or Expression with resultType number), minimum: 0. */
    rejectValue?: any;
    /** Determines the number of rows to attempt to retrieve before the PolyBase recalculates the percentage of rejected rows. Type: integer (or Expression with resultType integer), minimum: 0. */
    rejectSampleValue?: any;
    /** Specifies how to handle missing values in delimited text files when PolyBase retrieves data from the text file. Type: boolean (or Expression with resultType boolean). */
    useTypeDefault?: any;
}

/**
 * Defines values for PolybaseSettingsRejectType. \
 * {@link KnownPolybaseSettingsRejectType} can be used interchangeably with PolybaseSettingsRejectType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **value** \
 * **percentage**
 */
export declare type PolybaseSettingsRejectType = string;

/** Linked service for PostgreSQL data source. */
export declare interface PostgreSqlLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "PostgreSql";
    /** The connection string. Type: string, SecureString or AzureKeyVaultSecretReference. */
    connectionString: any;
    /** The Azure key vault secret reference of password in connection string. */
    password?: AzureKeyVaultSecretReference;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** A copy activity source for PostgreSQL databases. */
export declare interface PostgreSqlSource extends TabularSource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "PostgreSqlSource";
    /** Database query. Type: string (or Expression with resultType string). */
    query?: any;
}

/** The PostgreSQL table dataset. */
export declare interface PostgreSqlTableDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "PostgreSqlTable";
    /** This property will be retired. Please consider using schema + table properties instead. */
    tableName?: any;
    /** The PostgreSQL table name. Type: string (or Expression with resultType string). */
    table?: any;
    /** The PostgreSQL schema name. Type: string (or Expression with resultType string). */
    schemaTypePropertiesSchema?: any;
}

/** Power query sink. */
export declare interface PowerQuerySink extends DataFlowSink {
    /** sink script. */
    script?: string;
}

/** Map Power Query mashup query to sink dataset(s). */
export declare interface PowerQuerySinkMapping {
    /** Name of the query in Power Query mashup document. */
    queryName?: string;
    /** List of sinks mapped to Power Query mashup query. */
    dataflowSinks?: PowerQuerySink[];
}

/** Power query source. */
export declare interface PowerQuerySource extends DataFlowSource {
    /** source script. */
    script?: string;
}

/**
 * Defines values for PrestoAuthenticationType. \
 * {@link KnownPrestoAuthenticationType} can be used interchangeably with PrestoAuthenticationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Anonymous** \
 * **LDAP**
 */
export declare type PrestoAuthenticationType = string;

/** Presto server linked service. */
export declare interface PrestoLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Presto";
    /** The IP address or host name of the Presto server. (i.e. 192.168.222.160) */
    host: any;
    /** The version of the Presto server. (i.e. 0.148-t) */
    serverVersion: any;
    /** The catalog context for all request against the server. */
    catalog: any;
    /** The TCP port that the Presto server uses to listen for client connections. The default value is 8080. */
    port?: any;
    /** The authentication mechanism used to connect to the Presto server. */
    authenticationType: PrestoAuthenticationType;
    /** The user name used to connect to the Presto server. */
    username?: any;
    /** The password corresponding to the user name. */
    password?: SecretBaseUnion;
    /** Specifies whether the connections to the server are encrypted using SSL. The default value is false. */
    enableSsl?: any;
    /** The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR. */
    trustedCertPath?: any;
    /** Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false. */
    useSystemTrustStore?: any;
    /** Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false. */
    allowHostNameCNMismatch?: any;
    /** Specifies whether to allow self-signed certificates from the server. The default value is false. */
    allowSelfSignedServerCert?: any;
    /** The local time zone used by the connection. Valid values for this option are specified in the IANA Time Zone Database. The default value is the system time zone. */
    timeZoneID?: any;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** Presto server dataset. */
export declare interface PrestoObjectDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "PrestoObject";
    /** This property will be retired. Please consider using schema + table properties instead. */
    tableName?: any;
    /** The table name of the Presto. Type: string (or Expression with resultType string). */
    table?: any;
    /** The schema name of the Presto. Type: string (or Expression with resultType string). */
    schemaTypePropertiesSchema?: any;
}

/** A copy activity Presto server source. */
export declare interface PrestoSource extends TabularSource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "PrestoSource";
    /** A query to retrieve data from source. Type: string (or Expression with resultType string). */
    query?: any;
}

/** Private endpoint which a connection belongs to. */
export declare interface PrivateEndpoint {
    /** The resource Id for private endpoint */
    id?: string;
}

/** Interface representing a PrivateEndpointConnection. */
export declare interface PrivateEndpointConnection {
    /**
     * Approves or rejects a private endpoint connection
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param privateEndpointConnectionName The private endpoint connection name.
     * @param privateEndpointWrapper Private Endpoint Connection Approval ARM resource.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, factoryName: string, privateEndpointConnectionName: string, privateEndpointWrapper: PrivateLinkConnectionApprovalRequestResource, options?: PrivateEndpointConnectionCreateOrUpdateOptionalParams): Promise<PrivateEndpointConnectionCreateOrUpdateResponse>;
    /**
     * Gets a private endpoint connection
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param privateEndpointConnectionName The private endpoint connection name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, factoryName: string, privateEndpointConnectionName: string, options?: PrivateEndpointConnectionGetOptionalParams): Promise<PrivateEndpointConnectionGetResponse>;
    /**
     * Deletes a private endpoint connection
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param privateEndpointConnectionName The private endpoint connection name.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, factoryName: string, privateEndpointConnectionName: string, options?: PrivateEndpointConnectionDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface PrivateEndpointConnectionCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** ETag of the private endpoint connection entity.  Should only be specified for update, for which it should match existing entity or can be * for unconditional update. */
    ifMatch?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type PrivateEndpointConnectionCreateOrUpdateResponse = PrivateEndpointConnectionResource;

/** Optional parameters. */
export declare interface PrivateEndpointConnectionDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface PrivateEndpointConnectionGetOptionalParams extends coreClient.OperationOptions {
    /** ETag of the private endpoint connection entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. */
    ifNoneMatch?: string;
}

/** Contains response data for the get operation. */
export declare type PrivateEndpointConnectionGetResponse = PrivateEndpointConnectionResource;

/** A list of linked service resources. */
export declare interface PrivateEndpointConnectionListResponse {
    /** List of Private Endpoint Connections. */
    value: PrivateEndpointConnectionResource[];
    /** The link to the next page of results, if any remaining results exist. */
    nextLink?: string;
}

/** Private Endpoint Connection ARM resource. */
export declare interface PrivateEndpointConnectionResource extends SubResource {
    /** Core resource properties */
    properties?: RemotePrivateEndpointConnection;
}

/** Interface representing a PrivateEndPointConnections. */
export declare interface PrivateEndPointConnections {
    /**
     * Lists Private endpoint connections
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param options The options parameters.
     */
    listByFactory(resourceGroupName: string, factoryName: string, options?: PrivateEndPointConnectionsListByFactoryOptionalParams): PagedAsyncIterableIterator<PrivateEndpointConnectionResource>;
}

/** Optional parameters. */
export declare interface PrivateEndPointConnectionsListByFactoryNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByFactoryNext operation. */
export declare type PrivateEndPointConnectionsListByFactoryNextResponse = PrivateEndpointConnectionListResponse;

/** Optional parameters. */
export declare interface PrivateEndPointConnectionsListByFactoryOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByFactory operation. */
export declare type PrivateEndPointConnectionsListByFactoryResponse = PrivateEndpointConnectionListResponse;

/** A request to approve or reject a private endpoint connection */
export declare interface PrivateLinkConnectionApprovalRequest {
    /** The state of a private link connection */
    privateLinkServiceConnectionState?: PrivateLinkConnectionState;
    /** The resource of private endpoint. */
    privateEndpoint?: PrivateEndpoint;
}

/** Private Endpoint Connection Approval ARM resource. */
export declare interface PrivateLinkConnectionApprovalRequestResource extends SubResource {
    /** Core resource properties */
    properties?: PrivateLinkConnectionApprovalRequest;
}

/** The state of a private link connection */
export declare interface PrivateLinkConnectionState {
    /** Status of a private link connection */
    status?: string;
    /** Description of a private link connection */
    description?: string;
    /** ActionsRequired for a private link connection */
    actionsRequired?: string;
}

/** A private link resource */
export declare interface PrivateLinkResource extends SubResource {
    /** Core resource properties */
    properties?: PrivateLinkResourceProperties;
}

/** Properties of a private link resource */
export declare interface PrivateLinkResourceProperties {
    /**
     * GroupId of a private link resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly groupId?: string;
    /**
     * RequiredMembers of a private link resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly requiredMembers?: string[];
    /**
     * RequiredZoneNames of a private link resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly requiredZoneNames?: string[];
}

/** Interface representing a PrivateLinkResources. */
export declare interface PrivateLinkResources {
    /**
     * Gets the private link resources
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, factoryName: string, options?: PrivateLinkResourcesGetOptionalParams): Promise<PrivateLinkResourcesGetResponse>;
}

/** Optional parameters. */
export declare interface PrivateLinkResourcesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type PrivateLinkResourcesGetResponse = PrivateLinkResourcesWrapper;

/** Wrapper for a collection of private link resources */
export declare interface PrivateLinkResourcesWrapper {
    value: PrivateLinkResource[];
}

/**
 * Defines values for PublicNetworkAccess. \
 * {@link KnownPublicNetworkAccess} can be used interchangeably with PublicNetworkAccess,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export declare type PublicNetworkAccess = string;

/** Purview configuration. */
export declare interface PurviewConfiguration {
    /** Purview resource id. */
    purviewResourceId?: string;
}

/** A list of active debug sessions. */
export declare interface QueryDataFlowDebugSessionsResponse {
    /** Array with all active debug sessions. */
    value?: DataFlowDebugSessionInfo[];
    /** The link to the next page of results, if any remaining results exist. */
    nextLink?: string;
}

/** Linked service for Quickbase. */
export declare interface QuickbaseLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Quickbase";
    /** The url to connect Quickbase source. Type: string (or Expression with resultType string). */
    url: any;
    /** The user token for the Quickbase source. */
    userToken: SecretBaseUnion;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** QuickBooks server linked service. */
export declare interface QuickBooksLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "QuickBooks";
    /** Properties used to connect to QuickBooks. It is mutually exclusive with any other properties in the linked service. Type: object. */
    connectionProperties?: any;
    /** The endpoint of the QuickBooks server. (i.e. quickbooks.api.intuit.com) */
    endpoint?: any;
    /** The company ID of the QuickBooks company to authorize. */
    companyId?: any;
    /** The consumer key for OAuth 1.0 authentication. */
    consumerKey?: any;
    /** The consumer secret for OAuth 1.0 authentication. */
    consumerSecret?: SecretBaseUnion;
    /** The access token for OAuth 1.0 authentication. */
    accessToken?: SecretBaseUnion;
    /** The access token secret for OAuth 1.0 authentication. */
    accessTokenSecret?: SecretBaseUnion;
    /** Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. */
    useEncryptedEndpoints?: any;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** QuickBooks server dataset. */
export declare interface QuickBooksObjectDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "QuickBooksObject";
    /** The table name. Type: string (or Expression with resultType string). */
    tableName?: any;
}

/** A copy activity QuickBooks server source. */
export declare interface QuickBooksSource extends TabularSource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "QuickBooksSource";
    /** A query to retrieve data from source. Type: string (or Expression with resultType string). */
    query?: any;
}

/**
 * Defines values for RecurrenceFrequency. \
 * {@link KnownRecurrenceFrequency} can be used interchangeably with RecurrenceFrequency,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **Minute** \
 * **Hour** \
 * **Day** \
 * **Week** \
 * **Month** \
 * **Year**
 */
export declare type RecurrenceFrequency = string;

/** The recurrence schedule. */
export declare interface RecurrenceSchedule {
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /** The minutes. */
    minutes?: number[];
    /** The hours. */
    hours?: number[];
    /** The days of the week. */
    weekDays?: DaysOfWeek[];
    /** The month days. */
    monthDays?: number[];
    /** The monthly occurrences. */
    monthlyOccurrences?: RecurrenceScheduleOccurrence[];
}

/** The recurrence schedule occurrence. */
export declare interface RecurrenceScheduleOccurrence {
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /** The day of the week. */
    day?: DayOfWeek;
    /** The occurrence. */
    occurrence?: number;
}

/** Redirect incompatible row settings */
export declare interface RedirectIncompatibleRowSettings {
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /** Name of the Azure Storage, Storage SAS, or Azure Data Lake Store linked service used for redirecting incompatible row. Must be specified if redirectIncompatibleRowSettings is specified. Type: string (or Expression with resultType string). */
    linkedServiceName: any;
    /** The path for storing the redirect incompatible row data. Type: string (or Expression with resultType string). */
    path?: any;
}

/** The Amazon S3 settings needed for the interim Amazon S3 when copying from Amazon Redshift with unload. With this, data from Amazon Redshift source will be unloaded into S3 first and then copied into the targeted sink from the interim S3. */
export declare interface RedshiftUnloadSettings {
    /** The name of the Amazon S3 linked service which will be used for the unload operation when copying from the Amazon Redshift source. */
    s3LinkedServiceName: LinkedServiceReference;
    /** The bucket of the interim Amazon S3 which will be used to store the unloaded data from Amazon Redshift source. The bucket must be in the same region as the Amazon Redshift source. Type: string (or Expression with resultType string). */
    bucketName: any;
}

/** A copy activity source for various relational databases. */
export declare interface RelationalSource extends CopySource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "RelationalSource";
    /** Database query. Type: string (or Expression with resultType string). */
    query?: any;
    /** Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). */
    additionalColumns?: any;
}

/** The relational table dataset. */
export declare interface RelationalTableDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "RelationalTable";
    /** The relational table name. Type: string (or Expression with resultType string). */
    tableName?: any;
}

/** A remote private endpoint connection */
export declare interface RemotePrivateEndpointConnection {
    /** NOTE: This property will not be serialized. It can only be populated by the server. */
    readonly provisioningState?: string;
    /** PrivateEndpoint of a remote private endpoint connection */
    privateEndpoint?: ArmIdWrapper;
    /** The state of a private link connection */
    privateLinkServiceConnectionState?: PrivateLinkConnectionState;
}

/** Trigger that schedules pipeline reruns for all fixed time interval windows from a requested start time to requested end time. */
export declare interface RerunTumblingWindowTrigger extends Trigger {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "RerunTumblingWindowTrigger";
    /** The parent trigger reference. */
    parentTrigger: any;
    /** The start time for the time period for which restatement is initiated. Only UTC time is currently supported. */
    requestedStartTime: Date;
    /** The end time for the time period for which restatement is initiated. Only UTC time is currently supported. */
    requestedEndTime: Date;
    /** The max number of parallel time windows (ready for execution) for which a rerun is triggered. */
    rerunConcurrency: number;
}

/** Azure Data Factory top-level resource. */
export declare interface Resource {
    /**
     * The resource identifier.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The resource name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The resource type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** The resource location. */
    location?: string;
    /** The resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /**
     * Etag identifies change in the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly eTag?: string;
}

/** Responsys linked service. */
export declare interface ResponsysLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Responsys";
    /** The endpoint of the Responsys server. */
    endpoint: any;
    /** The client ID associated with the Responsys application. Type: string (or Expression with resultType string). */
    clientId: any;
    /** The client secret associated with the Responsys application. Type: string (or Expression with resultType string). */
    clientSecret?: SecretBaseUnion;
    /** Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean). */
    useEncryptedEndpoints?: any;
    /** Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean). */
    useHostVerification?: any;
    /** Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean). */
    usePeerVerification?: any;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** Responsys dataset. */
export declare interface ResponsysObjectDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "ResponsysObject";
    /** The table name. Type: string (or Expression with resultType string). */
    tableName?: any;
}

/** A copy activity Responsys source. */
export declare interface ResponsysSource extends TabularSource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "ResponsysSource";
    /** A query to retrieve data from source. Type: string (or Expression with resultType string). */
    query?: any;
}

/** A Rest service dataset. */
export declare interface RestResourceDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "RestResource";
    /** The relative URL to the resource that the RESTful API provides. Type: string (or Expression with resultType string). */
    relativeUrl?: any;
    /** The HTTP method used to call the RESTful API. The default is GET. Type: string (or Expression with resultType string). */
    requestMethod?: any;
    /** The HTTP request body to the RESTful API if requestMethod is POST. Type: string (or Expression with resultType string). */
    requestBody?: any;
    /** The additional HTTP headers in the request to the RESTful API. */
    additionalHeaders?: {
        [propertyName: string]: any;
    };
    /** The pagination rules to compose next page requests. */
    paginationRules?: {
        [propertyName: string]: any;
    };
}

/**
 * Defines values for RestServiceAuthenticationType. \
 * {@link KnownRestServiceAuthenticationType} can be used interchangeably with RestServiceAuthenticationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Anonymous** \
 * **Basic** \
 * **AadServicePrincipal** \
 * **ManagedServiceIdentity** \
 * **OAuth2ClientCredential**
 */
export declare type RestServiceAuthenticationType = string;

/** Rest Service linked service. */
export declare interface RestServiceLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "RestService";
    /** The base URL of the REST service. Type: string (or Expression with resultType string). */
    url: any;
    /** Whether to validate server side SSL certificate when connecting to the endpoint.The default value is true. Type: boolean (or Expression with resultType boolean). */
    enableServerCertificateValidation?: any;
    /** Type of authentication used to connect to the REST service. */
    authenticationType: RestServiceAuthenticationType;
    /** The user name used in Basic authentication type. Type: string (or Expression with resultType string). */
    userName?: any;
    /** The password used in Basic authentication type. */
    password?: SecretBaseUnion;
    /** The additional HTTP headers in the request to RESTful API used for authorization. Type: object (or Expression with resultType object). */
    authHeaders?: any;
    /** The application's client ID used in AadServicePrincipal authentication type. Type: string (or Expression with resultType string). */
    servicePrincipalId?: any;
    /** The application's key used in AadServicePrincipal authentication type. */
    servicePrincipalKey?: SecretBaseUnion;
    /** The tenant information (domain name or tenant ID) used in AadServicePrincipal authentication type under which your application resides. Type: string (or Expression with resultType string). */
    tenant?: any;
    /** Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string). */
    azureCloudType?: any;
    /** The resource you are requesting authorization to use. Type: string (or Expression with resultType string). */
    aadResourceId?: any;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
    /** The credential reference containing authentication information. */
    credential?: CredentialReference;
    /** The client ID associated with your application. Type: string (or Expression with resultType string). */
    clientId?: any;
    /** The client secret associated with your application. */
    clientSecret?: SecretBaseUnion;
    /** The token endpoint of the authorization server to acquire access token. Type: string (or Expression with resultType string). */
    tokenEndpoint?: any;
    /** The target service or resource to which the access will be requested. Type: string (or Expression with resultType string). */
    resource?: any;
    /** The scope of the access required. It describes what kind of access will be requested. Type: string (or Expression with resultType string). */
    scope?: any;
}

/** A copy activity Rest service Sink. */
export declare interface RestSink extends CopySink {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "RestSink";
    /** The HTTP method used to call the RESTful API. The default is POST. Type: string (or Expression with resultType string). */
    requestMethod?: any;
    /** The additional HTTP headers in the request to the RESTful API. Type: string (or Expression with resultType string). */
    additionalHeaders?: any;
    /** The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:01:40. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). */
    httpRequestTimeout?: any;
    /** The time to await before sending next request, in milliseconds */
    requestInterval?: any;
    /** Http Compression Type to Send data in compressed format with Optimal Compression Level, Default is None. And The Only Supported option is Gzip. */
    httpCompressionType?: any;
}

/** A copy activity Rest service source. */
export declare interface RestSource extends CopySource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "RestSource";
    /** The HTTP method used to call the RESTful API. The default is GET. Type: string (or Expression with resultType string). */
    requestMethod?: any;
    /** The HTTP request body to the RESTful API if requestMethod is POST. Type: string (or Expression with resultType string). */
    requestBody?: any;
    /** The additional HTTP headers in the request to the RESTful API. Type: string (or Expression with resultType string). */
    additionalHeaders?: any;
    /** The pagination rules to compose next page requests. Type: string (or Expression with resultType string). */
    paginationRules?: any;
    /** The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:01:40. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). */
    httpRequestTimeout?: any;
    /** The time to await before sending next page request. */
    requestInterval?: any;
    /** Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). */
    additionalColumns?: any;
}

/** Execution policy for an activity. */
export declare interface RetryPolicy {
    /** Maximum ordinary retry attempts. Default is 0. Type: integer (or Expression with resultType integer), minimum: 0. */
    count?: any;
    /** Interval between retries in seconds. Default is 30. */
    intervalInSeconds?: number;
}

/** Query parameters for listing runs. */
export declare interface RunFilterParameters {
    /** The continuation token for getting the next page of results. Null for first page. */
    continuationToken?: string;
    /** The time at or after which the run event was updated in 'ISO 8601' format. */
    lastUpdatedAfter: Date;
    /** The time at or before which the run event was updated in 'ISO 8601' format. */
    lastUpdatedBefore: Date;
    /** List of filters. */
    filters?: RunQueryFilter[];
    /** List of OrderBy option. */
    orderBy?: RunQueryOrderBy[];
}

/** Query filter option for listing runs. */
export declare interface RunQueryFilter {
    /** Parameter name to be used for filter. The allowed operands to query pipeline runs are PipelineName, RunStart, RunEnd and Status; to query activity runs are ActivityName, ActivityRunStart, ActivityRunEnd, ActivityType and Status, and to query trigger runs are TriggerName, TriggerRunTimestamp and Status. */
    operand: RunQueryFilterOperand;
    /** Operator to be used for filter. */
    operator: RunQueryFilterOperator;
    /** List of filter values. */
    values: string[];
}

/**
 * Defines values for RunQueryFilterOperand. \
 * {@link KnownRunQueryFilterOperand} can be used interchangeably with RunQueryFilterOperand,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **PipelineName** \
 * **Status** \
 * **RunStart** \
 * **RunEnd** \
 * **ActivityName** \
 * **ActivityRunStart** \
 * **ActivityRunEnd** \
 * **ActivityType** \
 * **TriggerName** \
 * **TriggerRunTimestamp** \
 * **RunGroupId** \
 * **LatestOnly**
 */
export declare type RunQueryFilterOperand = string;

/**
 * Defines values for RunQueryFilterOperator. \
 * {@link KnownRunQueryFilterOperator} can be used interchangeably with RunQueryFilterOperator,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Equals** \
 * **NotEquals** \
 * **In** \
 * **NotIn**
 */
export declare type RunQueryFilterOperator = string;

/**
 * Defines values for RunQueryOrder. \
 * {@link KnownRunQueryOrder} can be used interchangeably with RunQueryOrder,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ASC** \
 * **DESC**
 */
export declare type RunQueryOrder = string;

/** An object to provide order by options for listing runs. */
export declare interface RunQueryOrderBy {
    /** Parameter name to be used for order by. The allowed parameters to order by for pipeline runs are PipelineName, RunStart, RunEnd and Status; for activity runs are ActivityName, ActivityRunStart, ActivityRunEnd and Status; for trigger runs are TriggerName, TriggerRunTimestamp and Status. */
    orderBy: RunQueryOrderByField;
    /** Sorting order of the parameter. */
    order: RunQueryOrder;
}

/**
 * Defines values for RunQueryOrderByField. \
 * {@link KnownRunQueryOrderByField} can be used interchangeably with RunQueryOrderByField,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **RunStart** \
 * **RunEnd** \
 * **PipelineName** \
 * **Status** \
 * **ActivityName** \
 * **ActivityRunStart** \
 * **ActivityRunEnd** \
 * **TriggerName** \
 * **TriggerRunTimestamp**
 */
export declare type RunQueryOrderByField = string;

/** Linked service for Salesforce. */
export declare interface SalesforceLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Salesforce";
    /** The URL of Salesforce instance. Default is 'https://login.salesforce.com'. To copy data from sandbox, specify 'https://test.salesforce.com'. To copy data from custom domain, specify, for example, 'https://[domain].my.salesforce.com'. Type: string (or Expression with resultType string). */
    environmentUrl?: any;
    /** The username for Basic authentication of the Salesforce instance. Type: string (or Expression with resultType string). */
    username?: any;
    /** The password for Basic authentication of the Salesforce instance. */
    password?: SecretBaseUnion;
    /** The security token is optional to remotely access Salesforce instance. */
    securityToken?: SecretBaseUnion;
    /** The Salesforce API version used in ADF. Type: string (or Expression with resultType string). */
    apiVersion?: any;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** Salesforce Marketing Cloud linked service. */
export declare interface SalesforceMarketingCloudLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SalesforceMarketingCloud";
    /** Properties used to connect to Salesforce Marketing Cloud. It is mutually exclusive with any other properties in the linked service. Type: object. */
    connectionProperties?: any;
    /** The client ID associated with the Salesforce Marketing Cloud application. Type: string (or Expression with resultType string). */
    clientId?: any;
    /** The client secret associated with the Salesforce Marketing Cloud application. Type: string (or Expression with resultType string). */
    clientSecret?: SecretBaseUnion;
    /** Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean). */
    useEncryptedEndpoints?: any;
    /** Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean). */
    useHostVerification?: any;
    /** Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean). */
    usePeerVerification?: any;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** Salesforce Marketing Cloud dataset. */
export declare interface SalesforceMarketingCloudObjectDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SalesforceMarketingCloudObject";
    /** The table name. Type: string (or Expression with resultType string). */
    tableName?: any;
}

/** A copy activity Salesforce Marketing Cloud source. */
export declare interface SalesforceMarketingCloudSource extends TabularSource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SalesforceMarketingCloudSource";
    /** A query to retrieve data from source. Type: string (or Expression with resultType string). */
    query?: any;
}

/** The Salesforce object dataset. */
export declare interface SalesforceObjectDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SalesforceObject";
    /** The Salesforce object API name. Type: string (or Expression with resultType string). */
    objectApiName?: any;
}

/** Linked service for Salesforce Service Cloud. */
export declare interface SalesforceServiceCloudLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SalesforceServiceCloud";
    /** The URL of Salesforce Service Cloud instance. Default is 'https://login.salesforce.com'. To copy data from sandbox, specify 'https://test.salesforce.com'. To copy data from custom domain, specify, for example, 'https://[domain].my.salesforce.com'. Type: string (or Expression with resultType string). */
    environmentUrl?: any;
    /** The username for Basic authentication of the Salesforce instance. Type: string (or Expression with resultType string). */
    username?: any;
    /** The password for Basic authentication of the Salesforce instance. */
    password?: SecretBaseUnion;
    /** The security token is optional to remotely access Salesforce instance. */
    securityToken?: SecretBaseUnion;
    /** The Salesforce API version used in ADF. Type: string (or Expression with resultType string). */
    apiVersion?: any;
    /** Extended properties appended to the connection string. Type: string (or Expression with resultType string). */
    extendedProperties?: any;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** The Salesforce Service Cloud object dataset. */
export declare interface SalesforceServiceCloudObjectDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SalesforceServiceCloudObject";
    /** The Salesforce Service Cloud object API name. Type: string (or Expression with resultType string). */
    objectApiName?: any;
}

/** A copy activity Salesforce Service Cloud sink. */
export declare interface SalesforceServiceCloudSink extends CopySink {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SalesforceServiceCloudSink";
    /** The write behavior for the operation. Default is Insert. */
    writeBehavior?: SalesforceSinkWriteBehavior;
    /** The name of the external ID field for upsert operation. Default value is 'Id' column. Type: string (or Expression with resultType string). */
    externalIdFieldName?: any;
    /** The flag indicating whether or not to ignore null values from input dataset (except key fields) during write operation. Default value is false. If set it to true, it means ADF will leave the data in the destination object unchanged when doing upsert/update operation and insert defined default value when doing insert operation, versus ADF will update the data in the destination object to NULL when doing upsert/update operation and insert NULL value when doing insert operation. Type: boolean (or Expression with resultType boolean). */
    ignoreNullValues?: any;
}

/** A copy activity Salesforce Service Cloud source. */
export declare interface SalesforceServiceCloudSource extends CopySource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SalesforceServiceCloudSource";
    /** Database query. Type: string (or Expression with resultType string). */
    query?: any;
    /** The read behavior for the operation. Default is Query. Allowed values: Query/QueryAll. Type: string (or Expression with resultType string). */
    readBehavior?: any;
    /** Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). */
    additionalColumns?: any;
}

/** A copy activity Salesforce sink. */
export declare interface SalesforceSink extends CopySink {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SalesforceSink";
    /** The write behavior for the operation. Default is Insert. */
    writeBehavior?: SalesforceSinkWriteBehavior;
    /** The name of the external ID field for upsert operation. Default value is 'Id' column. Type: string (or Expression with resultType string). */
    externalIdFieldName?: any;
    /** The flag indicating whether or not to ignore null values from input dataset (except key fields) during write operation. Default value is false. If set it to true, it means ADF will leave the data in the destination object unchanged when doing upsert/update operation and insert defined default value when doing insert operation, versus ADF will update the data in the destination object to NULL when doing upsert/update operation and insert NULL value when doing insert operation. Type: boolean (or Expression with resultType boolean). */
    ignoreNullValues?: any;
}

/**
 * Defines values for SalesforceSinkWriteBehavior. \
 * {@link KnownSalesforceSinkWriteBehavior} can be used interchangeably with SalesforceSinkWriteBehavior,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Insert** \
 * **Upsert**
 */
export declare type SalesforceSinkWriteBehavior = string;

/** A copy activity Salesforce source. */
export declare interface SalesforceSource extends TabularSource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SalesforceSource";
    /** Database query. Type: string (or Expression with resultType string). */
    query?: any;
    /** The read behavior for the operation. Default is Query. Allowed values: Query/QueryAll. Type: string (or Expression with resultType string). */
    readBehavior?: any;
}

/**
 * Defines values for SalesforceSourceReadBehavior. \
 * {@link KnownSalesforceSourceReadBehavior} can be used interchangeably with SalesforceSourceReadBehavior,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Query** \
 * **QueryAll**
 */
export declare type SalesforceSourceReadBehavior = string;

/** The SAP BW cube dataset. */
export declare interface SapBwCubeDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SapBwCube";
}

/** SAP Business Warehouse Linked Service. */
export declare interface SapBWLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SapBW";
    /** Host name of the SAP BW instance. Type: string (or Expression with resultType string). */
    server: any;
    /** System number of the BW system. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string). */
    systemNumber: any;
    /** Client ID of the client on the BW system. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string). */
    clientId: any;
    /** Username to access the SAP BW server. Type: string (or Expression with resultType string). */
    userName?: any;
    /** Password to access the SAP BW server. */
    password?: SecretBaseUnion;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** A copy activity source for SapBW server via MDX. */
export declare interface SapBwSource extends TabularSource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SapBwSource";
    /** MDX query. Type: string (or Expression with resultType string). */
    query?: any;
}

/** Linked service for SAP Cloud for Customer. */
export declare interface SapCloudForCustomerLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SapCloudForCustomer";
    /** The URL of SAP Cloud for Customer OData API. For example, '[https://[tenantname].crm.ondemand.com/sap/c4c/odata/v1]'. Type: string (or Expression with resultType string). */
    url: any;
    /** The username for Basic authentication. Type: string (or Expression with resultType string). */
    username?: any;
    /** The password for Basic authentication. */
    password?: SecretBaseUnion;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Either encryptedCredential or username/password must be provided. Type: string. */
    encryptedCredential?: string;
}

/** The path of the SAP Cloud for Customer OData entity. */
export declare interface SapCloudForCustomerResourceDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SapCloudForCustomerResource";
    /** The path of the SAP Cloud for Customer OData entity. Type: string (or Expression with resultType string). */
    path: any;
}

/** A copy activity SAP Cloud for Customer sink. */
export declare interface SapCloudForCustomerSink extends CopySink {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SapCloudForCustomerSink";
    /** The write behavior for the operation. Default is 'Insert'. */
    writeBehavior?: SapCloudForCustomerSinkWriteBehavior;
    /** The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:05:00. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). */
    httpRequestTimeout?: any;
}

/**
 * Defines values for SapCloudForCustomerSinkWriteBehavior. \
 * {@link KnownSapCloudForCustomerSinkWriteBehavior} can be used interchangeably with SapCloudForCustomerSinkWriteBehavior,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Insert** \
 * **Update**
 */
export declare type SapCloudForCustomerSinkWriteBehavior = string;

/** A copy activity source for SAP Cloud for Customer source. */
export declare interface SapCloudForCustomerSource extends TabularSource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SapCloudForCustomerSource";
    /** SAP Cloud for Customer OData query. For example, "$top=1". Type: string (or Expression with resultType string). */
    query?: any;
    /** The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:05:00. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). */
    httpRequestTimeout?: any;
}

/** Linked service for SAP ERP Central Component(SAP ECC). */
export declare interface SapEccLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SapEcc";
    /** The URL of SAP ECC OData API. For example, '[https://hostname:port/sap/opu/odata/sap/servicename/]'. Type: string (or Expression with resultType string). */
    url: any;
    /** The username for Basic authentication. Type: string (or Expression with resultType string). */
    username?: any;
    /** The password for Basic authentication. */
    password?: SecretBaseUnion;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Either encryptedCredential or username/password must be provided. Type: string. */
    encryptedCredential?: string;
}

/** The path of the SAP ECC OData entity. */
export declare interface SapEccResourceDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SapEccResource";
    /** The path of the SAP ECC OData entity. Type: string (or Expression with resultType string). */
    path: any;
}

/** A copy activity source for SAP ECC source. */
export declare interface SapEccSource extends TabularSource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SapEccSource";
    /** SAP ECC OData query. For example, "$top=1". Type: string (or Expression with resultType string). */
    query?: any;
    /** The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:05:00. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). */
    httpRequestTimeout?: any;
}

/**
 * Defines values for SapHanaAuthenticationType. \
 * {@link KnownSapHanaAuthenticationType} can be used interchangeably with SapHanaAuthenticationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Basic** \
 * **Windows**
 */
export declare type SapHanaAuthenticationType = string;

/** SAP HANA Linked Service. */
export declare interface SapHanaLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SapHana";
    /** SAP HANA ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference. */
    connectionString?: any;
    /** Host name of the SAP HANA server. Type: string (or Expression with resultType string). */
    server?: any;
    /** The authentication type to be used to connect to the SAP HANA server. */
    authenticationType?: SapHanaAuthenticationType;
    /** Username to access the SAP HANA server. Type: string (or Expression with resultType string). */
    userName?: any;
    /** Password to access the SAP HANA server. */
    password?: SecretBaseUnion;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/**
 * Defines values for SapHanaPartitionOption. \
 * {@link KnownSapHanaPartitionOption} can be used interchangeably with SapHanaPartitionOption,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **PhysicalPartitionsOfTable** \
 * **SapHanaDynamicRange**
 */
export declare type SapHanaPartitionOption = string;

/** The settings that will be leveraged for SAP HANA source partitioning. */
export declare interface SapHanaPartitionSettings {
    /** The name of the column that will be used for proceeding range partitioning. Type: string (or Expression with resultType string). */
    partitionColumnName?: any;
}

/** A copy activity source for SAP HANA source. */
export declare interface SapHanaSource extends TabularSource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SapHanaSource";
    /** SAP HANA Sql query. Type: string (or Expression with resultType string). */
    query?: any;
    /** The packet size of data read from SAP HANA. Type: integer(or Expression with resultType integer). */
    packetSize?: any;
    /** The partition mechanism that will be used for SAP HANA read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "SapHanaDynamicRange". */
    partitionOption?: any;
    /** The settings that will be leveraged for SAP HANA source partitioning. */
    partitionSettings?: SapHanaPartitionSettings;
}

/** SAP HANA Table properties. */
export declare interface SapHanaTableDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SapHanaTable";
    /** The schema name of SAP HANA. Type: string (or Expression with resultType string). */
    schemaTypePropertiesSchema?: any;
    /** The table name of SAP HANA. Type: string (or Expression with resultType string). */
    table?: any;
}

/** SAP ODP Linked Service. */
export declare interface SapOdpLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SapOdp";
    /** Host name of the SAP instance where the table is located. Type: string (or Expression with resultType string). */
    server?: any;
    /** System number of the SAP system where the table is located. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string). */
    systemNumber?: any;
    /** Client ID of the client on the SAP system where the table is located. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string). */
    clientId?: any;
    /** Language of the SAP system where the table is located. The default value is EN. Type: string (or Expression with resultType string). */
    language?: any;
    /** SystemID of the SAP system where the table is located. Type: string (or Expression with resultType string). */
    systemId?: any;
    /** Username to access the SAP server where the table is located. Type: string (or Expression with resultType string). */
    userName?: any;
    /** Password to access the SAP server where the table is located. */
    password?: SecretBaseUnion;
    /** The hostname of the SAP Message Server. Type: string (or Expression with resultType string). */
    messageServer?: any;
    /** The service name or port number of the Message Server. Type: string (or Expression with resultType string). */
    messageServerService?: any;
    /** SNC activation indicator to access the SAP server where the table is located. Must be either 0 (off) or 1 (on). Type: string (or Expression with resultType string). */
    sncMode?: any;
    /** Initiator's SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string). */
    sncMyName?: any;
    /** Communication partner's SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string). */
    sncPartnerName?: any;
    /** External security product's library to access the SAP server where the table is located. Type: string (or Expression with resultType string). */
    sncLibraryPath?: any;
    /** SNC Quality of Protection. Allowed value include: 1, 2, 3, 8, 9. Type: string (or Expression with resultType string). */
    sncQop?: any;
    /** SNC X509 certificate file path. Type: string (or Expression with resultType string). */
    x509CertificatePath?: any;
    /** The Logon Group for the SAP System. Type: string (or Expression with resultType string). */
    logonGroup?: any;
    /** The subscriber name. Type: string (or Expression with resultType string). */
    subscriberName?: any;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** SAP ODP Resource properties. */
export declare interface SapOdpResourceDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SapOdpResource";
    /** The context of the SAP ODP Object. Type: string (or Expression with resultType string). */
    context: any;
    /** The name of the SAP ODP Object. Type: string (or Expression with resultType string). */
    objectName: any;
}

/** A copy activity source for SAP ODP source. */
export declare interface SapOdpSource extends TabularSource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SapOdpSource";
    /** The extraction mode. Allowed value include: Full, Delta and Recovery. The default value is Full. Type: string (or Expression with resultType string). */
    extractionMode?: any;
    /** The subscriber process to manage the delta process. Type: string (or Expression with resultType string). */
    subscriberProcess?: any;
    /** Specifies the selection conditions from source data. Type: array of objects(selection) (or Expression with resultType array of objects). */
    selection?: any;
    /** Specifies the columns to be selected from source data. Type: array of objects(projection) (or Expression with resultType array of objects). */
    projection?: any;
}

/** SAP Business Warehouse Open Hub Destination Linked Service. */
export declare interface SapOpenHubLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SapOpenHub";
    /** Host name of the SAP BW instance where the open hub destination is located. Type: string (or Expression with resultType string). */
    server?: any;
    /** System number of the BW system where the open hub destination is located. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string). */
    systemNumber?: any;
    /** Client ID of the client on the BW system where the open hub destination is located. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string). */
    clientId?: any;
    /** Language of the BW system where the open hub destination is located. The default value is EN. Type: string (or Expression with resultType string). */
    language?: any;
    /** SystemID of the SAP system where the table is located. Type: string (or Expression with resultType string). */
    systemId?: any;
    /** Username to access the SAP BW server where the open hub destination is located. Type: string (or Expression with resultType string). */
    userName?: any;
    /** Password to access the SAP BW server where the open hub destination is located. */
    password?: SecretBaseUnion;
    /** The hostname of the SAP Message Server. Type: string (or Expression with resultType string). */
    messageServer?: any;
    /** The service name or port number of the Message Server. Type: string (or Expression with resultType string). */
    messageServerService?: any;
    /** The Logon Group for the SAP System. Type: string (or Expression with resultType string). */
    logonGroup?: any;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** A copy activity source for SAP Business Warehouse Open Hub Destination source. */
export declare interface SapOpenHubSource extends TabularSource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SapOpenHubSource";
    /** Whether to exclude the records of the last request. The default value is true. Type: boolean (or Expression with resultType boolean). */
    excludeLastRequest?: any;
    /** The ID of request for delta loading. Once it is set, only data with requestId larger than the value of this property will be retrieved. The default value is 0. Type: integer (or Expression with resultType integer ). */
    baseRequestId?: any;
    /** Specifies the custom RFC function module that will be used to read data from SAP Table. Type: string (or Expression with resultType string). */
    customRfcReadTableFunctionModule?: any;
    /** The single character that will be used as delimiter passed to SAP RFC as well as splitting the output data retrieved. Type: string (or Expression with resultType string). */
    sapDataColumnDelimiter?: any;
}

/** Sap Business Warehouse Open Hub Destination Table properties. */
export declare interface SapOpenHubTableDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SapOpenHubTable";
    /** The name of the Open Hub Destination with destination type as Database Table. Type: string (or Expression with resultType string). */
    openHubDestinationName: any;
    /** Whether to exclude the records of the last request. The default value is true. Type: boolean (or Expression with resultType boolean). */
    excludeLastRequest?: any;
    /** The ID of request for delta loading. Once it is set, only data with requestId larger than the value of this property will be retrieved. The default value is 0. Type: integer (or Expression with resultType integer ). */
    baseRequestId?: any;
}

/** SAP Table Linked Service. */
export declare interface SapTableLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SapTable";
    /** Host name of the SAP instance where the table is located. Type: string (or Expression with resultType string). */
    server?: any;
    /** System number of the SAP system where the table is located. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string). */
    systemNumber?: any;
    /** Client ID of the client on the SAP system where the table is located. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string). */
    clientId?: any;
    /** Language of the SAP system where the table is located. The default value is EN. Type: string (or Expression with resultType string). */
    language?: any;
    /** SystemID of the SAP system where the table is located. Type: string (or Expression with resultType string). */
    systemId?: any;
    /** Username to access the SAP server where the table is located. Type: string (or Expression with resultType string). */
    userName?: any;
    /** Password to access the SAP server where the table is located. */
    password?: SecretBaseUnion;
    /** The hostname of the SAP Message Server. Type: string (or Expression with resultType string). */
    messageServer?: any;
    /** The service name or port number of the Message Server. Type: string (or Expression with resultType string). */
    messageServerService?: any;
    /** SNC activation indicator to access the SAP server where the table is located. Must be either 0 (off) or 1 (on). Type: string (or Expression with resultType string). */
    sncMode?: any;
    /** Initiator's SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string). */
    sncMyName?: any;
    /** Communication partner's SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string). */
    sncPartnerName?: any;
    /** External security product's library to access the SAP server where the table is located. Type: string (or Expression with resultType string). */
    sncLibraryPath?: any;
    /** SNC Quality of Protection. Allowed value include: 1, 2, 3, 8, 9. Type: string (or Expression with resultType string). */
    sncQop?: any;
    /** The Logon Group for the SAP System. Type: string (or Expression with resultType string). */
    logonGroup?: any;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/**
 * Defines values for SapTablePartitionOption. \
 * {@link KnownSapTablePartitionOption} can be used interchangeably with SapTablePartitionOption,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **PartitionOnInt** \
 * **PartitionOnCalendarYear** \
 * **PartitionOnCalendarMonth** \
 * **PartitionOnCalendarDate** \
 * **PartitionOnTime**
 */
export declare type SapTablePartitionOption = string;

/** The settings that will be leveraged for SAP table source partitioning. */
export declare interface SapTablePartitionSettings {
    /** The name of the column that will be used for proceeding range partitioning. Type: string (or Expression with resultType string). */
    partitionColumnName?: any;
    /** The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string). */
    partitionUpperBound?: any;
    /** The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string). */
    partitionLowerBound?: any;
    /** The maximum value of partitions the table will be split into. Type: integer (or Expression with resultType string). */
    maxPartitionsNumber?: any;
}

/** SAP Table Resource properties. */
export declare interface SapTableResourceDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SapTableResource";
    /** The name of the SAP Table. Type: string (or Expression with resultType string). */
    tableName: any;
}

/** A copy activity source for SAP Table source. */
export declare interface SapTableSource extends TabularSource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SapTableSource";
    /** The number of rows to be retrieved. Type: integer(or Expression with resultType integer). */
    rowCount?: any;
    /** The number of rows that will be skipped. Type: integer (or Expression with resultType integer). */
    rowSkips?: any;
    /** The fields of the SAP table that will be retrieved. For example, column0, column1. Type: string (or Expression with resultType string). */
    rfcTableFields?: any;
    /** The options for the filtering of the SAP Table. For example, COLUMN0 EQ SOME VALUE. Type: string (or Expression with resultType string). */
    rfcTableOptions?: any;
    /** Specifies the maximum number of rows that will be retrieved at a time when retrieving data from SAP Table. Type: integer (or Expression with resultType integer). */
    batchSize?: any;
    /** Specifies the custom RFC function module that will be used to read data from SAP Table. Type: string (or Expression with resultType string). */
    customRfcReadTableFunctionModule?: any;
    /** The single character that will be used as delimiter passed to SAP RFC as well as splitting the output data retrieved. Type: string (or Expression with resultType string). */
    sapDataColumnDelimiter?: any;
    /** The partition mechanism that will be used for SAP table read in parallel. Possible values include: "None", "PartitionOnInt", "PartitionOnCalendarYear", "PartitionOnCalendarMonth", "PartitionOnCalendarDate", "PartitionOnTime". */
    partitionOption?: any;
    /** The settings that will be leveraged for SAP table source partitioning. */
    partitionSettings?: SapTablePartitionSettings;
}

/** Trigger that creates pipeline runs periodically, on schedule. */
export declare interface ScheduleTrigger extends MultiplePipelineTrigger {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "ScheduleTrigger";
    /** Recurrence schedule configuration. */
    recurrence: ScheduleTriggerRecurrence;
}

/** The workflow trigger recurrence. */
export declare interface ScheduleTriggerRecurrence {
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /** The frequency. */
    frequency?: RecurrenceFrequency;
    /** The interval. */
    interval?: number;
    /** The start time. */
    startTime?: Date;
    /** The end time. */
    endTime?: Date;
    /** The time zone. */
    timeZone?: string;
    /** The recurrence schedule. */
    schedule?: RecurrenceSchedule;
}

/** Custom script action to run on HDI ondemand cluster once it's up. */
export declare interface ScriptAction {
    /** The user provided name of the script action. */
    name: string;
    /** The URI for the script action. */
    uri: string;
    /** The node types on which the script action should be executed. */
    roles: any;
    /** The parameters for the script action. */
    parameters?: string;
}

/** Script activity type. */
export declare interface ScriptActivity extends ExecutionActivity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Script";
    /** ScriptBlock execution timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). */
    scriptBlockExecutionTimeout?: any;
    /** Array of script blocks. Type: array. */
    scripts?: ScriptActivityScriptBlock[];
    /** Log settings of script activity. */
    logSettings?: ScriptActivityTypePropertiesLogSettings;
}

/**
 * Defines values for ScriptActivityLogDestination. \
 * {@link KnownScriptActivityLogDestination} can be used interchangeably with ScriptActivityLogDestination,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ActivityOutput** \
 * **ExternalStore**
 */
export declare type ScriptActivityLogDestination = string;

/** Parameters of a script block. */
export declare interface ScriptActivityParameter {
    /** The name of the parameter. Type: string (or Expression with resultType string). */
    name?: any;
    /** The type of the parameter. */
    type?: ScriptActivityParameterType;
    /** The value of the parameter. Type: string (or Expression with resultType string). */
    value?: any;
    /** The direction of the parameter. */
    direction?: ScriptActivityParameterDirection;
    /** The size of the output direction parameter. */
    size?: number;
}

/**
 * Defines values for ScriptActivityParameterDirection. \
 * {@link KnownScriptActivityParameterDirection} can be used interchangeably with ScriptActivityParameterDirection,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Input** \
 * **Output** \
 * **InputOutput**
 */
export declare type ScriptActivityParameterDirection = string;

/**
 * Defines values for ScriptActivityParameterType. \
 * {@link KnownScriptActivityParameterType} can be used interchangeably with ScriptActivityParameterType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Boolean** \
 * **DateTime** \
 * **DateTimeOffset** \
 * **Decimal** \
 * **Double** \
 * **Guid** \
 * **Int16** \
 * **Int32** \
 * **Int64** \
 * **Single** \
 * **String** \
 * **Timespan**
 */
export declare type ScriptActivityParameterType = string;

/** Script block of scripts. */
export declare interface ScriptActivityScriptBlock {
    /** The query text. Type: string (or Expression with resultType string). */
    text: any;
    /** The type of the query. Type: string. */
    type: ScriptType;
    /** Array of script parameters. Type: array. */
    parameters?: ScriptActivityParameter[];
}

/** Log settings of script activity. */
export declare interface ScriptActivityTypePropertiesLogSettings {
    /** The destination of logs. Type: string. */
    logDestination: ScriptActivityLogDestination;
    /** Log location settings customer needs to provide when enabling log. */
    logLocationSettings?: LogLocationSettings;
}

/**
 * Defines values for ScriptType. \
 * {@link KnownScriptType} can be used interchangeably with ScriptType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Query** \
 * **NonQuery**
 */
export declare type ScriptType = string;

/** The base definition of a secret type. */
export declare interface SecretBase {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SecureString" | "AzureKeyVaultSecret";
}

export declare type SecretBaseUnion = SecretBase | SecureString | AzureKeyVaultSecretReference;

/** Execution policy for an activity that supports secure input and output. */
export declare interface SecureInputOutputPolicy {
    /** When set to true, Input from activity is considered as secure and will not be logged to monitoring. */
    secureInput?: boolean;
    /** When set to true, Output from activity is considered as secure and will not be logged to monitoring. */
    secureOutput?: boolean;
}

/** Azure Data Factory secure string definition. The string value will be masked with asterisks '*' during Get or List API calls. */
export declare interface SecureString extends SecretBase {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SecureString";
    /** Value of secure string. */
    value: string;
}

/** Self referenced tumbling window trigger dependency. */
export declare interface SelfDependencyTumblingWindowTriggerReference extends DependencyReference {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SelfDependencyTumblingWindowTriggerReference";
    /** Timespan applied to the start time of a tumbling window when evaluating dependency. */
    offset: string;
    /** The size of the window when evaluating the dependency. If undefined the frequency of the tumbling window will be used. */
    size?: string;
}

/** Self-hosted integration runtime. */
export declare interface SelfHostedIntegrationRuntime extends IntegrationRuntime {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SelfHosted";
    /** The base definition of a linked integration runtime. */
    linkedInfo?: LinkedIntegrationRuntimeTypeUnion;
    /** An alternative option to ensure interactive authoring function when your self-hosted integration runtime is unable to establish a connection with Azure Relay. */
    selfContainedInteractiveAuthoringEnabled?: boolean;
}

/** Properties of Self-hosted integration runtime node. */
export declare interface SelfHostedIntegrationRuntimeNode {
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /**
     * Name of the integration runtime node.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nodeName?: string;
    /**
     * Machine name of the integration runtime node.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly machineName?: string;
    /**
     * URI for the host machine of the integration runtime.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly hostServiceUri?: string;
    /**
     * Status of the integration runtime node.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: SelfHostedIntegrationRuntimeNodeStatus;
    /**
     * The integration runtime capabilities dictionary
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly capabilities?: {
        [propertyName: string]: string;
    };
    /**
     * Status of the integration runtime node version.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly versionStatus?: string;
    /**
     * Version of the integration runtime node.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly version?: string;
    /**
     * The time at which the integration runtime node was registered in ISO8601 format.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly registerTime?: Date;
    /**
     * The most recent time at which the integration runtime was connected in ISO8601 format.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastConnectTime?: Date;
    /**
     * The time at which the integration runtime will expire in ISO8601 format.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly expiryTime?: Date;
    /**
     * The time the node last started up.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastStartTime?: Date;
    /**
     * The integration runtime node last stop time.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastStopTime?: Date;
    /**
     * The result of the last integration runtime node update.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastUpdateResult?: IntegrationRuntimeUpdateResult;
    /**
     * The last time for the integration runtime node update start.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastStartUpdateTime?: Date;
    /**
     * The last time for the integration runtime node update end.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastEndUpdateTime?: Date;
    /**
     * Indicates whether this node is the active dispatcher for integration runtime requests.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isActiveDispatcher?: boolean;
    /**
     * Maximum concurrent jobs on the integration runtime node.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly concurrentJobsLimit?: number;
    /**
     * The maximum concurrent jobs in this integration runtime.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly maxConcurrentJobs?: number;
}

/**
 * Defines values for SelfHostedIntegrationRuntimeNodeStatus. \
 * {@link KnownSelfHostedIntegrationRuntimeNodeStatus} can be used interchangeably with SelfHostedIntegrationRuntimeNodeStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NeedRegistration** \
 * **Online** \
 * **Limited** \
 * **Offline** \
 * **Upgrading** \
 * **Initializing** \
 * **InitializeFailed**
 */
export declare type SelfHostedIntegrationRuntimeNodeStatus = string;

/** Self-hosted integration runtime status. */
export declare interface SelfHostedIntegrationRuntimeStatus extends IntegrationRuntimeStatus {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SelfHosted";
    /**
     * The time at which the integration runtime was created, in ISO8601 format.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createTime?: Date;
    /**
     * The task queue id of the integration runtime.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly taskQueueId?: string;
    /**
     * It is used to set the encryption mode for node-node communication channel (when more than 2 self-hosted integration runtime nodes exist).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly internalChannelEncryption?: IntegrationRuntimeInternalChannelEncryptionMode;
    /**
     * Version of the integration runtime.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly version?: string;
    /** The list of nodes for this integration runtime. */
    nodes?: SelfHostedIntegrationRuntimeNode[];
    /**
     * The date at which the integration runtime will be scheduled to update, in ISO8601 format.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly scheduledUpdateDate?: Date;
    /**
     * The time in the date scheduled by service to update the integration runtime, e.g., PT03H is 3 hours
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly updateDelayOffset?: string;
    /**
     * The local time zone offset in hours.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly localTimeZoneOffset?: string;
    /**
     * Object with additional information about integration runtime capabilities.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly capabilities?: {
        [propertyName: string]: string;
    };
    /**
     * The URLs for the services used in integration runtime backend service.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly serviceUrls?: string[];
    /**
     * Whether Self-hosted integration runtime auto update has been turned on.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly autoUpdate?: IntegrationRuntimeAutoUpdate;
    /**
     * Status of the integration runtime version.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly versionStatus?: string;
    /** The list of linked integration runtimes that are created to share with this integration runtime. */
    links?: LinkedIntegrationRuntime[];
    /**
     * The version that the integration runtime is going to update to.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly pushedVersion?: string;
    /**
     * The latest version on download center.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly latestVersion?: string;
    /**
     * The estimated time when the self-hosted integration runtime will be updated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly autoUpdateETA?: Date;
    /**
     * An alternative option to ensure interactive authoring function when your self-hosted integration runtime is unable to establish a connection with Azure Relay.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly selfContainedInteractiveAuthoringEnabled?: boolean;
}

/**
 * Defines values for ServiceNowAuthenticationType. \
 * {@link KnownServiceNowAuthenticationType} can be used interchangeably with ServiceNowAuthenticationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Basic** \
 * **OAuth2**
 */
export declare type ServiceNowAuthenticationType = string;

/** ServiceNow server linked service. */
export declare interface ServiceNowLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "ServiceNow";
    /** The endpoint of the ServiceNow server. (i.e. <instance>.service-now.com) */
    endpoint: any;
    /** The authentication type to use. */
    authenticationType: ServiceNowAuthenticationType;
    /** The user name used to connect to the ServiceNow server for Basic and OAuth2 authentication. */
    username?: any;
    /** The password corresponding to the user name for Basic and OAuth2 authentication. */
    password?: SecretBaseUnion;
    /** The client id for OAuth2 authentication. */
    clientId?: any;
    /** The client secret for OAuth2 authentication. */
    clientSecret?: SecretBaseUnion;
    /** Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. */
    useEncryptedEndpoints?: any;
    /** Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. */
    useHostVerification?: any;
    /** Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. */
    usePeerVerification?: any;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** ServiceNow server dataset. */
export declare interface ServiceNowObjectDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "ServiceNowObject";
    /** The table name. Type: string (or Expression with resultType string). */
    tableName?: any;
}

/** A copy activity ServiceNow server source. */
export declare interface ServiceNowSource extends TabularSource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "ServiceNowSource";
    /** A query to retrieve data from source. Type: string (or Expression with resultType string). */
    query?: any;
}

/** Service principal credential. */
export declare interface ServicePrincipalCredential extends Credential_2 {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "ServicePrincipal";
    /** The app ID of the service principal used to authenticate */
    servicePrincipalId?: any;
    /** The key of the service principal used to authenticate. */
    servicePrincipalKey?: AzureKeyVaultSecretReference;
    /** The ID of the tenant to which the service principal belongs */
    tenant?: any;
}

/**
 * Defines values for ServicePrincipalCredentialType. \
 * {@link KnownServicePrincipalCredentialType} can be used interchangeably with ServicePrincipalCredentialType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ServicePrincipalKey** \
 * **ServicePrincipalCert**
 */
export declare type ServicePrincipalCredentialType = string;

/** Set value for a Variable. */
export declare interface SetVariableActivity extends ControlActivity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SetVariable";
    /** Activity policy. */
    policy?: SecureInputOutputPolicy;
    /** Name of the variable whose value needs to be set. */
    variableName?: string;
    /** Value to be set. Could be a static value or Expression. */
    value?: any;
    /** If set to true, it sets the pipeline run return value. */
    setSystemVariable?: boolean;
}

/**
 * Defines values for SftpAuthenticationType. \
 * {@link KnownSftpAuthenticationType} can be used interchangeably with SftpAuthenticationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Basic** \
 * **SshPublicKey** \
 * **MultiFactor**
 */
export declare type SftpAuthenticationType = string;

/** The location of SFTP dataset. */
export declare interface SftpLocation extends DatasetLocation {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SftpLocation";
}

/** Sftp read settings. */
export declare interface SftpReadSettings extends StoreReadSettings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SftpReadSettings";
    /** If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean). */
    recursive?: any;
    /** Sftp wildcardFolderPath. Type: string (or Expression with resultType string). */
    wildcardFolderPath?: any;
    /** Sftp wildcardFileName. Type: string (or Expression with resultType string). */
    wildcardFileName?: any;
    /** Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean). */
    enablePartitionDiscovery?: any;
    /** Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string). */
    partitionRootPath?: any;
    /** Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string). */
    fileListPath?: any;
    /** Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean). */
    deleteFilesAfterCompletion?: any;
    /** The start of file's modified datetime. Type: string (or Expression with resultType string). */
    modifiedDatetimeStart?: any;
    /** The end of file's modified datetime. Type: string (or Expression with resultType string). */
    modifiedDatetimeEnd?: any;
    /** If true, disable parallel reading within each file. Default is false. Type: boolean (or Expression with resultType boolean). */
    disableChunking?: any;
}

/** A linked service for an SSH File Transfer Protocol (SFTP) server. */
export declare interface SftpServerLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Sftp";
    /** The SFTP server host name. Type: string (or Expression with resultType string). */
    host: any;
    /** The TCP port number that the SFTP server uses to listen for client connections. Default value is 22. Type: integer (or Expression with resultType integer), minimum: 0. */
    port?: any;
    /** The authentication type to be used to connect to the FTP server. */
    authenticationType?: SftpAuthenticationType;
    /** The username used to log on to the SFTP server. Type: string (or Expression with resultType string). */
    userName?: any;
    /** Password to logon the SFTP server for Basic authentication. */
    password?: SecretBaseUnion;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
    /** The SSH private key file path for SshPublicKey authentication. Only valid for on-premises copy. For on-premises copy with SshPublicKey authentication, either PrivateKeyPath or PrivateKeyContent should be specified. SSH private key should be OpenSSH format. Type: string (or Expression with resultType string). */
    privateKeyPath?: any;
    /** Base64 encoded SSH private key content for SshPublicKey authentication. For on-premises copy with SshPublicKey authentication, either PrivateKeyPath or PrivateKeyContent should be specified. SSH private key should be OpenSSH format. */
    privateKeyContent?: SecretBaseUnion;
    /** The password to decrypt the SSH private key if the SSH private key is encrypted. */
    passPhrase?: SecretBaseUnion;
    /** If true, skip the SSH host key validation. Default value is false. Type: boolean (or Expression with resultType boolean). */
    skipHostKeyValidation?: any;
    /** The host key finger-print of the SFTP server. When SkipHostKeyValidation is false, HostKeyFingerprint should be specified. Type: string (or Expression with resultType string). */
    hostKeyFingerprint?: any;
}

/** Sftp write settings. */
export declare interface SftpWriteSettings extends StoreWriteSettings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SftpWriteSettings";
    /** Specifies the timeout for writing each chunk to SFTP server. Default value: 01:00:00 (one hour). Type: string (or Expression with resultType string). */
    operationTimeout?: any;
    /** Upload to temporary file(s) and rename. Disable this option if your SFTP server doesn't support rename operation. Type: boolean (or Expression with resultType boolean). */
    useTempFileRename?: any;
}

/** SharePoint Online List linked service. */
export declare interface SharePointOnlineListLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SharePointOnlineList";
    /** The URL of the SharePoint Online site. For example, https://contoso.sharepoint.com/sites/siteName. Type: string (or Expression with resultType string). */
    siteUrl: any;
    /** The tenant ID under which your application resides. You can find it from Azure portal Active Directory overview page. Type: string (or Expression with resultType string). */
    tenantId: any;
    /** The application (client) ID of your application registered in Azure Active Directory. Make sure to grant SharePoint site permission to this application. Type: string (or Expression with resultType string). */
    servicePrincipalId: any;
    /** The client secret of your application registered in Azure Active Directory. Type: string (or Expression with resultType string). */
    servicePrincipalKey: SecretBaseUnion;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** The sharepoint online list resource dataset. */
export declare interface SharePointOnlineListResourceDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SharePointOnlineListResource";
    /** The name of the SharePoint Online list. Type: string (or Expression with resultType string). */
    listName?: any;
}

/** A copy activity source for sharePoint online list source. */
export declare interface SharePointOnlineListSource extends CopySource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SharePointOnlineListSource";
    /** The OData query to filter the data in SharePoint Online list. For example, "$top=1". Type: string (or Expression with resultType string). */
    query?: any;
    /** The wait time to get a response from SharePoint Online. Default value is 5 minutes (00:05:00). Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). */
    httpRequestTimeout?: any;
}

/** Shopify Service linked service. */
export declare interface ShopifyLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Shopify";
    /** The endpoint of the Shopify server. (i.e. mystore.myshopify.com) */
    host: any;
    /** The API access token that can be used to access Shopify’s data. The token won't expire if it is offline mode. */
    accessToken?: SecretBaseUnion;
    /** Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. */
    useEncryptedEndpoints?: any;
    /** Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. */
    useHostVerification?: any;
    /** Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. */
    usePeerVerification?: any;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** Shopify Service dataset. */
export declare interface ShopifyObjectDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "ShopifyObject";
    /** The table name. Type: string (or Expression with resultType string). */
    tableName?: any;
}

/** A copy activity Shopify Service source. */
export declare interface ShopifySource extends TabularSource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "ShopifySource";
    /** A query to retrieve data from source. Type: string (or Expression with resultType string). */
    query?: any;
}

/** Skip error file. */
export declare interface SkipErrorFile {
    /** Skip if file is deleted by other client during copy. Default is true. Type: boolean (or Expression with resultType boolean). */
    fileMissing?: any;
    /** Skip if source/sink file changed by other concurrent write. Default is false. Type: boolean (or Expression with resultType boolean). */
    dataInconsistency?: any;
}

/** Linked service for Smartsheet. */
export declare interface SmartsheetLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Smartsheet";
    /** The api token for the Smartsheet source. */
    apiToken: SecretBaseUnion;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** The snowflake dataset. */
export declare interface SnowflakeDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SnowflakeTable";
    /** The schema name of the Snowflake database. Type: string (or Expression with resultType string). */
    schemaTypePropertiesSchema?: any;
    /** The table name of the Snowflake database. Type: string (or Expression with resultType string). */
    table?: any;
}

/** Snowflake export command settings. */
export declare interface SnowflakeExportCopyCommand extends ExportSettings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SnowflakeExportCopyCommand";
    /** Additional copy options directly passed to snowflake Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: "additionalCopyOptions": { "DATE_FORMAT": "MM/DD/YYYY", "TIME_FORMAT": "'HH24:MI:SS.FF'" } */
    additionalCopyOptions?: {
        [propertyName: string]: any;
    };
    /** Additional format options directly passed to snowflake Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: "additionalFormatOptions": { "OVERWRITE": "TRUE", "MAX_FILE_SIZE": "'FALSE'" } */
    additionalFormatOptions?: {
        [propertyName: string]: any;
    };
}

/** Snowflake import command settings. */
export declare interface SnowflakeImportCopyCommand extends ImportSettings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SnowflakeImportCopyCommand";
    /** Additional copy options directly passed to snowflake Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: "additionalCopyOptions": { "DATE_FORMAT": "MM/DD/YYYY", "TIME_FORMAT": "'HH24:MI:SS.FF'" } */
    additionalCopyOptions?: {
        [propertyName: string]: any;
    };
    /** Additional format options directly passed to snowflake Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: "additionalFormatOptions": { "FORCE": "TRUE", "LOAD_UNCERTAIN_FILES": "'FALSE'" } */
    additionalFormatOptions?: {
        [propertyName: string]: any;
    };
}

/** Snowflake linked service. */
export declare interface SnowflakeLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Snowflake";
    /** The connection string of snowflake. Type: string, SecureString. */
    connectionString: any;
    /** The Azure key vault secret reference of password in connection string. */
    password?: AzureKeyVaultSecretReference;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** A copy activity snowflake sink. */
export declare interface SnowflakeSink extends CopySink {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SnowflakeSink";
    /** SQL pre-copy script. Type: string (or Expression with resultType string). */
    preCopyScript?: any;
    /** Snowflake import settings. */
    importSettings?: SnowflakeImportCopyCommand;
}

/** A copy activity snowflake source. */
export declare interface SnowflakeSource extends CopySource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SnowflakeSource";
    /** Snowflake Sql query. Type: string (or Expression with resultType string). */
    query?: any;
    /** Snowflake export settings. */
    exportSettings: SnowflakeExportCopyCommand;
}

/**
 * Defines values for SparkAuthenticationType. \
 * {@link KnownSparkAuthenticationType} can be used interchangeably with SparkAuthenticationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Anonymous** \
 * **Username** \
 * **UsernameAndPassword** \
 * **WindowsAzureHDInsightService**
 */
export declare type SparkAuthenticationType = string;

/** Spark configuration reference. */
export declare interface SparkConfigurationParametrizationReference {
    /** Spark configuration reference type. */
    type: SparkConfigurationReferenceType;
    /** Reference spark configuration name. Type: string (or Expression with resultType string). */
    referenceName: any;
}

/**
 * Defines values for SparkConfigurationReferenceType. \
 * {@link KnownSparkConfigurationReferenceType} can be used interchangeably with SparkConfigurationReferenceType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SparkConfigurationReference**
 */
export declare type SparkConfigurationReferenceType = string;

/**
 * Defines values for SparkJobReferenceType. \
 * {@link KnownSparkJobReferenceType} can be used interchangeably with SparkJobReferenceType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SparkJobDefinitionReference**
 */
export declare type SparkJobReferenceType = string;

/** Spark Server linked service. */
export declare interface SparkLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Spark";
    /** IP address or host name of the Spark server */
    host: any;
    /** The TCP port that the Spark server uses to listen for client connections. */
    port: any;
    /** The type of Spark server. */
    serverType?: SparkServerType;
    /** The transport protocol to use in the Thrift layer. */
    thriftTransportProtocol?: SparkThriftTransportProtocol;
    /** The authentication method used to access the Spark server. */
    authenticationType: SparkAuthenticationType;
    /** The user name that you use to access Spark Server. */
    username?: any;
    /** The password corresponding to the user name that you provided in the Username field */
    password?: SecretBaseUnion;
    /** The partial URL corresponding to the Spark server. */
    httpPath?: any;
    /** Specifies whether the connections to the server are encrypted using SSL. The default value is false. */
    enableSsl?: any;
    /** The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR. */
    trustedCertPath?: any;
    /** Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false. */
    useSystemTrustStore?: any;
    /** Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false. */
    allowHostNameCNMismatch?: any;
    /** Specifies whether to allow self-signed certificates from the server. The default value is false. */
    allowSelfSignedServerCert?: any;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** Spark Server dataset. */
export declare interface SparkObjectDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SparkObject";
    /** This property will be retired. Please consider using schema + table properties instead. */
    tableName?: any;
    /** The table name of the Spark. Type: string (or Expression with resultType string). */
    table?: any;
    /** The schema name of the Spark. Type: string (or Expression with resultType string). */
    schemaTypePropertiesSchema?: any;
}

/**
 * Defines values for SparkServerType. \
 * {@link KnownSparkServerType} can be used interchangeably with SparkServerType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SharkServer** \
 * **SharkServer2** \
 * **SparkThriftServer**
 */
export declare type SparkServerType = string;

/** A copy activity Spark Server source. */
export declare interface SparkSource extends TabularSource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SparkSource";
    /** A query to retrieve data from source. Type: string (or Expression with resultType string). */
    query?: any;
}

/**
 * Defines values for SparkThriftTransportProtocol. \
 * {@link KnownSparkThriftTransportProtocol} can be used interchangeably with SparkThriftTransportProtocol,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Binary** \
 * **SASL** \
 * **HTTP **
 */
export declare type SparkThriftTransportProtocol = string;

/**
 * Defines values for SqlAlwaysEncryptedAkvAuthType. \
 * {@link KnownSqlAlwaysEncryptedAkvAuthType} can be used interchangeably with SqlAlwaysEncryptedAkvAuthType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ServicePrincipal** \
 * **ManagedIdentity** \
 * **UserAssignedManagedIdentity**
 */
export declare type SqlAlwaysEncryptedAkvAuthType = string;

/** Sql always encrypted properties. */
export declare interface SqlAlwaysEncryptedProperties {
    /** Sql always encrypted AKV authentication type. Type: string. */
    alwaysEncryptedAkvAuthType: SqlAlwaysEncryptedAkvAuthType;
    /** The client ID of the application in Azure Active Directory used for Azure Key Vault authentication. Type: string (or Expression with resultType string). */
    servicePrincipalId?: any;
    /** The key of the service principal used to authenticate against Azure Key Vault. */
    servicePrincipalKey?: SecretBaseUnion;
    /** The credential reference containing authentication information. */
    credential?: CredentialReference;
}

/** A copy activity SQL Data Warehouse sink. */
export declare interface SqlDWSink extends CopySink {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SqlDWSink";
    /** SQL pre-copy script. Type: string (or Expression with resultType string). */
    preCopyScript?: any;
    /** Indicates to use PolyBase to copy data into SQL Data Warehouse when applicable. Type: boolean (or Expression with resultType boolean). */
    allowPolyBase?: any;
    /** Specifies PolyBase-related settings when allowPolyBase is true. */
    polyBaseSettings?: PolybaseSettings;
    /** Indicates to use Copy Command to copy data into SQL Data Warehouse. Type: boolean (or Expression with resultType boolean). */
    allowCopyCommand?: any;
    /** Specifies Copy Command related settings when allowCopyCommand is true. */
    copyCommandSettings?: DWCopyCommandSettings;
    /** The option to handle sink table, such as autoCreate. For now only 'autoCreate' value is supported. Type: string (or Expression with resultType string). */
    tableOption?: any;
    /** Whether to use table lock during bulk copy. Type: boolean (or Expression with resultType boolean). */
    sqlWriterUseTableLock?: any;
    /** Write behavior when copying data into azure SQL DW. Type: SqlDWWriteBehaviorEnum (or Expression with resultType SqlDWWriteBehaviorEnum) */
    writeBehavior?: any;
    /** SQL DW upsert settings. */
    upsertSettings?: SqlDWUpsertSettings;
}

/** A copy activity SQL Data Warehouse source. */
export declare interface SqlDWSource extends TabularSource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SqlDWSource";
    /** SQL Data Warehouse reader query. Type: string (or Expression with resultType string). */
    sqlReaderQuery?: any;
    /** Name of the stored procedure for a SQL Data Warehouse source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string). */
    sqlReaderStoredProcedureName?: any;
    /** Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}". Type: object (or Expression with resultType object), itemType: StoredProcedureParameter. */
    storedProcedureParameters?: any;
    /** Specifies the transaction locking behavior for the SQL source. Allowed values: ReadCommitted/ReadUncommitted/RepeatableRead/Serializable/Snapshot. The default value is ReadCommitted. Type: string (or Expression with resultType string). */
    isolationLevel?: any;
    /** The partition mechanism that will be used for Sql read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange". */
    partitionOption?: any;
    /** The settings that will be leveraged for Sql source partitioning. */
    partitionSettings?: SqlPartitionSettings;
}

/** Sql DW upsert option settings */
export declare interface SqlDWUpsertSettings {
    /** Schema name for interim table. Type: string (or Expression with resultType string). */
    interimSchemaName?: any;
    /** Key column names for unique row identification. Type: array of strings (or Expression with resultType array of strings). */
    keys?: any;
}

/**
 * Defines values for SqlDWWriteBehaviorEnum. \
 * {@link KnownSqlDWWriteBehaviorEnum} can be used interchangeably with SqlDWWriteBehaviorEnum,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Insert** \
 * **Upsert**
 */
export declare type SqlDWWriteBehaviorEnum = string;

/** A copy activity Azure SQL Managed Instance sink. */
export declare interface SqlMISink extends CopySink {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SqlMISink";
    /** SQL writer stored procedure name. Type: string (or Expression with resultType string). */
    sqlWriterStoredProcedureName?: any;
    /** SQL writer table type. Type: string (or Expression with resultType string). */
    sqlWriterTableType?: any;
    /** SQL pre-copy script. Type: string (or Expression with resultType string). */
    preCopyScript?: any;
    /** SQL stored procedure parameters. */
    storedProcedureParameters?: any;
    /** The stored procedure parameter name of the table type. Type: string (or Expression with resultType string). */
    storedProcedureTableTypeParameterName?: any;
    /** The option to handle sink table, such as autoCreate. For now only 'autoCreate' value is supported. Type: string (or Expression with resultType string). */
    tableOption?: any;
    /** Whether to use table lock during bulk copy. Type: boolean (or Expression with resultType boolean). */
    sqlWriterUseTableLock?: any;
    /** White behavior when copying data into azure SQL MI. Type: SqlWriteBehaviorEnum (or Expression with resultType SqlWriteBehaviorEnum) */
    writeBehavior?: any;
    /** SQL upsert settings. */
    upsertSettings?: SqlUpsertSettings;
}

/** A copy activity Azure SQL Managed Instance source. */
export declare interface SqlMISource extends TabularSource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SqlMISource";
    /** SQL reader query. Type: string (or Expression with resultType string). */
    sqlReaderQuery?: any;
    /** Name of the stored procedure for a Azure SQL Managed Instance source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string). */
    sqlReaderStoredProcedureName?: any;
    /** Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}". */
    storedProcedureParameters?: any;
    /** Specifies the transaction locking behavior for the SQL source. Allowed values: ReadCommitted/ReadUncommitted/RepeatableRead/Serializable/Snapshot. The default value is ReadCommitted. Type: string (or Expression with resultType string). */
    isolationLevel?: any;
    /** Which additional types to produce. */
    produceAdditionalTypes?: any;
    /** The partition mechanism that will be used for Sql read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange". */
    partitionOption?: any;
    /** The settings that will be leveraged for Sql source partitioning. */
    partitionSettings?: SqlPartitionSettings;
}

/**
 * Defines values for SqlPartitionOption. \
 * {@link KnownSqlPartitionOption} can be used interchangeably with SqlPartitionOption,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **PhysicalPartitionsOfTable** \
 * **DynamicRange**
 */
export declare type SqlPartitionOption = string;

/** The settings that will be leveraged for Sql source partitioning. */
export declare interface SqlPartitionSettings {
    /** The name of the column in integer or datetime type that will be used for proceeding partitioning. If not specified, the primary key of the table is auto-detected and used as the partition column. Type: string (or Expression with resultType string). */
    partitionColumnName?: any;
    /** The maximum value of the partition column for partition range splitting. This value is used to decide the partition stride, not for filtering the rows in table. All rows in the table or query result will be partitioned and copied. Type: string (or Expression with resultType string). */
    partitionUpperBound?: any;
    /** The minimum value of the partition column for partition range splitting. This value is used to decide the partition stride, not for filtering the rows in table. All rows in the table or query result will be partitioned and copied. Type: string (or Expression with resultType string). */
    partitionLowerBound?: any;
}

/** SQL Server linked service. */
export declare interface SqlServerLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SqlServer";
    /** The connection string. Type: string, SecureString or AzureKeyVaultSecretReference. */
    connectionString: any;
    /** The on-premises Windows authentication user name. Type: string (or Expression with resultType string). */
    userName?: any;
    /** The on-premises Windows authentication password. */
    password?: SecretBaseUnion;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
    /** Sql always encrypted properties. */
    alwaysEncryptedSettings?: SqlAlwaysEncryptedProperties;
}

/** A copy activity SQL server sink. */
export declare interface SqlServerSink extends CopySink {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SqlServerSink";
    /** SQL writer stored procedure name. Type: string (or Expression with resultType string). */
    sqlWriterStoredProcedureName?: any;
    /** SQL writer table type. Type: string (or Expression with resultType string). */
    sqlWriterTableType?: any;
    /** SQL pre-copy script. Type: string (or Expression with resultType string). */
    preCopyScript?: any;
    /** SQL stored procedure parameters. */
    storedProcedureParameters?: any;
    /** The stored procedure parameter name of the table type. Type: string (or Expression with resultType string). */
    storedProcedureTableTypeParameterName?: any;
    /** The option to handle sink table, such as autoCreate. For now only 'autoCreate' value is supported. Type: string (or Expression with resultType string). */
    tableOption?: any;
    /** Whether to use table lock during bulk copy. Type: boolean (or Expression with resultType boolean). */
    sqlWriterUseTableLock?: any;
    /** Write behavior when copying data into sql server. Type: SqlWriteBehaviorEnum (or Expression with resultType SqlWriteBehaviorEnum) */
    writeBehavior?: any;
    /** SQL upsert settings. */
    upsertSettings?: SqlUpsertSettings;
}

/** A copy activity SQL server source. */
export declare interface SqlServerSource extends TabularSource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SqlServerSource";
    /** SQL reader query. Type: string (or Expression with resultType string). */
    sqlReaderQuery?: any;
    /** Name of the stored procedure for a SQL Database source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string). */
    sqlReaderStoredProcedureName?: any;
    /** Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}". */
    storedProcedureParameters?: any;
    /** Specifies the transaction locking behavior for the SQL source. Allowed values: ReadCommitted/ReadUncommitted/RepeatableRead/Serializable/Snapshot. The default value is ReadCommitted. Type: string (or Expression with resultType string). */
    isolationLevel?: any;
    /** Which additional types to produce. */
    produceAdditionalTypes?: any;
    /** The partition mechanism that will be used for Sql read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange". */
    partitionOption?: any;
    /** The settings that will be leveraged for Sql source partitioning. */
    partitionSettings?: SqlPartitionSettings;
}

/** SQL stored procedure activity type. */
export declare interface SqlServerStoredProcedureActivity extends ExecutionActivity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SqlServerStoredProcedure";
    /** Stored procedure name. Type: string (or Expression with resultType string). */
    storedProcedureName: any;
    /** Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}". */
    storedProcedureParameters?: any;
}

/** The on-premises SQL Server dataset. */
export declare interface SqlServerTableDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SqlServerTable";
    /** This property will be retired. Please consider using schema + table properties instead. */
    tableName?: any;
    /** The schema name of the SQL Server dataset. Type: string (or Expression with resultType string). */
    schemaTypePropertiesSchema?: any;
    /** The table name of the SQL Server dataset. Type: string (or Expression with resultType string). */
    table?: any;
}

/** A copy activity SQL sink. */
export declare interface SqlSink extends CopySink {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SqlSink";
    /** SQL writer stored procedure name. Type: string (or Expression with resultType string). */
    sqlWriterStoredProcedureName?: any;
    /** SQL writer table type. Type: string (or Expression with resultType string). */
    sqlWriterTableType?: any;
    /** SQL pre-copy script. Type: string (or Expression with resultType string). */
    preCopyScript?: any;
    /** SQL stored procedure parameters. */
    storedProcedureParameters?: any;
    /** The stored procedure parameter name of the table type. Type: string (or Expression with resultType string). */
    storedProcedureTableTypeParameterName?: any;
    /** The option to handle sink table, such as autoCreate. For now only 'autoCreate' value is supported. Type: string (or Expression with resultType string). */
    tableOption?: any;
    /** Whether to use table lock during bulk copy. Type: boolean (or Expression with resultType boolean). */
    sqlWriterUseTableLock?: any;
    /** Write behavior when copying data into sql. Type: SqlWriteBehaviorEnum (or Expression with resultType SqlWriteBehaviorEnum) */
    writeBehavior?: any;
    /** SQL upsert settings. */
    upsertSettings?: SqlUpsertSettings;
}

/** A copy activity SQL source. */
export declare interface SqlSource extends TabularSource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SqlSource";
    /** SQL reader query. Type: string (or Expression with resultType string). */
    sqlReaderQuery?: any;
    /** Name of the stored procedure for a SQL Database source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string). */
    sqlReaderStoredProcedureName?: any;
    /** Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}". */
    storedProcedureParameters?: any;
    /** Specifies the transaction locking behavior for the SQL source. Allowed values: ReadCommitted/ReadUncommitted/RepeatableRead/Serializable/Snapshot. The default value is ReadCommitted. Type: string (or Expression with resultType string). */
    isolationLevel?: any;
    /** The partition mechanism that will be used for Sql read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange". */
    partitionOption?: any;
    /** The settings that will be leveraged for Sql source partitioning. */
    partitionSettings?: SqlPartitionSettings;
}

/** Sql upsert option settings */
export declare interface SqlUpsertSettings {
    /** Specifies whether to use temp db for upsert interim table. Type: boolean (or Expression with resultType boolean). */
    useTempDB?: any;
    /** Schema name for interim table. Type: string (or Expression with resultType string). */
    interimSchemaName?: any;
    /** Key column names for unique row identification. Type: array of strings (or Expression with resultType array of strings). */
    keys?: any;
}

/**
 * Defines values for SqlWriteBehaviorEnum. \
 * {@link KnownSqlWriteBehaviorEnum} can be used interchangeably with SqlWriteBehaviorEnum,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Insert** \
 * **Upsert** \
 * **StoredProcedure**
 */
export declare type SqlWriteBehaviorEnum = string;

/** Square Service linked service. */
export declare interface SquareLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Square";
    /** Properties used to connect to Square. It is mutually exclusive with any other properties in the linked service. Type: object. */
    connectionProperties?: any;
    /** The URL of the Square instance. (i.e. mystore.mysquare.com) */
    host?: any;
    /** The client ID associated with your Square application. */
    clientId?: any;
    /** The client secret associated with your Square application. */
    clientSecret?: SecretBaseUnion;
    /** The redirect URL assigned in the Square application dashboard. (i.e. http://localhost:2500) */
    redirectUri?: any;
    /** Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. */
    useEncryptedEndpoints?: any;
    /** Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. */
    useHostVerification?: any;
    /** Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. */
    usePeerVerification?: any;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** Square Service dataset. */
export declare interface SquareObjectDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SquareObject";
    /** The table name. Type: string (or Expression with resultType string). */
    tableName?: any;
}

/** A copy activity Square Service source. */
export declare interface SquareSource extends TabularSource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SquareSource";
    /** A query to retrieve data from source. Type: string (or Expression with resultType string). */
    query?: any;
}

/** SSIS access credential. */
export declare interface SsisAccessCredential {
    /** Domain for windows authentication. Type: string (or Expression with resultType string). */
    domain: any;
    /** UseName for windows authentication. Type: string (or Expression with resultType string). */
    userName: any;
    /** Password for windows authentication. */
    password: SecretBaseUnion;
}

/** SSIS embedded child package. */
export declare interface SsisChildPackage {
    /** Path for embedded child package. Type: string (or Expression with resultType string). */
    packagePath: any;
    /** Name for embedded child package. */
    packageName?: string;
    /** Content for embedded child package. Type: string (or Expression with resultType string). */
    packageContent: any;
    /** Last modified date for embedded child package. */
    packageLastModifiedDate?: string;
}

/** Ssis environment. */
export declare interface SsisEnvironment extends SsisObjectMetadata {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Environment";
    /** Folder id which contains environment. */
    folderId?: number;
    /** Variable in environment */
    variables?: SsisVariable[];
}

/** Ssis environment reference. */
export declare interface SsisEnvironmentReference {
    /** Environment reference id. */
    id?: number;
    /** Environment folder name. */
    environmentFolderName?: string;
    /** Environment name. */
    environmentName?: string;
    /** Reference type */
    referenceType?: string;
}

/** SSIS package execution credential. */
export declare interface SsisExecutionCredential {
    /** Domain for windows authentication. Type: string (or Expression with resultType string). */
    domain: any;
    /** UseName for windows authentication. Type: string (or Expression with resultType string). */
    userName: any;
    /** Password for windows authentication. */
    password: SecureString;
}

/** SSIS execution parameter. */
export declare interface SsisExecutionParameter {
    /** SSIS package execution parameter value. Type: string (or Expression with resultType string). */
    value: any;
}

/** Ssis folder. */
export declare interface SsisFolder extends SsisObjectMetadata {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Folder";
}

/** SSIS package execution log location */
export declare interface SsisLogLocation {
    /** The SSIS package execution log path. Type: string (or Expression with resultType string). */
    logPath: any;
    /** The type of SSIS log location. */
    type: SsisLogLocationType;
    /** The package execution log access credential. */
    accessCredential?: SsisAccessCredential;
    /** Specifies the interval to refresh log. The default interval is 5 minutes. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). */
    logRefreshInterval?: any;
}

/**
 * Defines values for SsisLogLocationType. \
 * {@link KnownSsisLogLocationType} can be used interchangeably with SsisLogLocationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **File**
 */
export declare type SsisLogLocationType = string;

/** SSIS object metadata. */
export declare interface SsisObjectMetadata {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Folder" | "Project" | "Package" | "Environment";
    /** Metadata id. */
    id?: number;
    /** Metadata name. */
    name?: string;
    /** Metadata description. */
    description?: string;
}

/** A list of SSIS object metadata. */
export declare interface SsisObjectMetadataListResponse {
    /** List of SSIS object metadata. */
    value?: SsisObjectMetadataUnion[];
    /** The link to the next page of results, if any remaining results exist. */
    nextLink?: string;
}

/** The status of the operation. */
export declare interface SsisObjectMetadataStatusResponse {
    /** The status of the operation. */
    status?: string;
    /** The operation name. */
    name?: string;
    /** The operation properties. */
    properties?: string;
    /** The operation error message. */
    error?: string;
}

/**
 * Defines values for SsisObjectMetadataType. \
 * {@link KnownSsisObjectMetadataType} can be used interchangeably with SsisObjectMetadataType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Folder** \
 * **Project** \
 * **Package** \
 * **Environment**
 */
export declare type SsisObjectMetadataType = string;

export declare type SsisObjectMetadataUnion = SsisObjectMetadata | SsisFolder | SsisProject | SsisPackage | SsisEnvironment;

/** Ssis Package. */
export declare interface SsisPackage extends SsisObjectMetadata {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Package";
    /** Folder id which contains package. */
    folderId?: number;
    /** Project version which contains package. */
    projectVersion?: number;
    /** Project id which contains package. */
    projectId?: number;
    /** Parameters in package */
    parameters?: SsisParameter[];
}

/** SSIS package location. */
export declare interface SsisPackageLocation {
    /** The SSIS package path. Type: string (or Expression with resultType string). */
    packagePath?: any;
    /** The type of SSIS package location. */
    type?: SsisPackageLocationType;
    /** Password of the package. */
    packagePassword?: SecretBaseUnion;
    /** The package access credential. */
    accessCredential?: SsisAccessCredential;
    /** The configuration file of the package execution. Type: string (or Expression with resultType string). */
    configurationPath?: any;
    /** The configuration file access credential. */
    configurationAccessCredential?: SsisAccessCredential;
    /** The package name. */
    packageName?: string;
    /** The embedded package content. Type: string (or Expression with resultType string). */
    packageContent?: any;
    /** The embedded package last modified date. */
    packageLastModifiedDate?: string;
    /** The embedded child package list. */
    childPackages?: SsisChildPackage[];
}

/**
 * Defines values for SsisPackageLocationType. \
 * {@link KnownSsisPackageLocationType} can be used interchangeably with SsisPackageLocationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SSISDB** \
 * **File** \
 * **InlinePackage** \
 * **PackageStore**
 */
export declare type SsisPackageLocationType = string;

/** Ssis parameter. */
export declare interface SsisParameter {
    /** Parameter id. */
    id?: number;
    /** Parameter name. */
    name?: string;
    /** Parameter description. */
    description?: string;
    /** Parameter type. */
    dataType?: string;
    /** Whether parameter is required. */
    required?: boolean;
    /** Whether parameter is sensitive. */
    sensitive?: boolean;
    /** Design default value of parameter. */
    designDefaultValue?: string;
    /** Default value of parameter. */
    defaultValue?: string;
    /** Default sensitive value of parameter. */
    sensitiveDefaultValue?: string;
    /** Parameter value type. */
    valueType?: string;
    /** Parameter value set. */
    valueSet?: boolean;
    /** Parameter reference variable. */
    variable?: string;
}

/** Ssis project. */
export declare interface SsisProject extends SsisObjectMetadata {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Project";
    /** Folder id which contains project. */
    folderId?: number;
    /** Project version. */
    version?: number;
    /** Environment reference in project */
    environmentRefs?: SsisEnvironmentReference[];
    /** Parameters in project */
    parameters?: SsisParameter[];
}

/** SSIS property override. */
export declare interface SsisPropertyOverride {
    /** SSIS package property override value. Type: string (or Expression with resultType string). */
    value: any;
    /** Whether SSIS package property override value is sensitive data. Value will be encrypted in SSISDB if it is true */
    isSensitive?: boolean;
}

/** Ssis variable. */
export declare interface SsisVariable {
    /** Variable id. */
    id?: number;
    /** Variable name. */
    name?: string;
    /** Variable description. */
    description?: string;
    /** Variable type. */
    dataType?: string;
    /** Whether variable is sensitive. */
    sensitive?: boolean;
    /** Variable value. */
    value?: string;
    /** Variable sensitive value. */
    sensitiveValue?: string;
}

/** Staging settings. */
export declare interface StagingSettings {
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /** Staging linked service reference. */
    linkedServiceName: LinkedServiceReference;
    /** The path to storage for storing the interim data. Type: string (or Expression with resultType string). */
    path?: any;
    /** Specifies whether to use compression when copying data via an interim staging. Default value is false. Type: boolean (or Expression with resultType boolean). */
    enableCompression?: any;
}

/** SQL stored procedure parameter. */
export declare interface StoredProcedureParameter {
    /** Stored procedure parameter value. Type: string (or Expression with resultType string). */
    value?: any;
    /** Stored procedure parameter type. */
    type?: StoredProcedureParameterType;
}

/**
 * Defines values for StoredProcedureParameterType. \
 * {@link KnownStoredProcedureParameterType} can be used interchangeably with StoredProcedureParameterType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **String** \
 * **Int** \
 * **Int64** \
 * **Decimal** \
 * **Guid** \
 * **Boolean** \
 * **Date**
 */
export declare type StoredProcedureParameterType = string;

/** Connector read setting. */
export declare interface StoreReadSettings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureBlobStorageReadSettings" | "AzureBlobFSReadSettings" | "AzureDataLakeStoreReadSettings" | "AmazonS3ReadSettings" | "FileServerReadSettings" | "AzureFileStorageReadSettings" | "AmazonS3CompatibleReadSettings" | "OracleCloudStorageReadSettings" | "GoogleCloudStorageReadSettings" | "FtpReadSettings" | "SftpReadSettings" | "HttpReadSettings" | "HdfsReadSettings" | "LakeHouseReadSettings";
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /** The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). */
    maxConcurrentConnections?: any;
    /** If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). */
    disableMetricsCollection?: any;
}

export declare type StoreReadSettingsUnion = StoreReadSettings | AzureBlobStorageReadSettings | AzureBlobFSReadSettings | AzureDataLakeStoreReadSettings | AmazonS3ReadSettings | FileServerReadSettings | AzureFileStorageReadSettings | AmazonS3CompatibleReadSettings | OracleCloudStorageReadSettings | GoogleCloudStorageReadSettings | FtpReadSettings | SftpReadSettings | HttpReadSettings | HdfsReadSettings | LakeHouseReadSettings;

/** Connector write settings. */
export declare interface StoreWriteSettings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SftpWriteSettings" | "AzureBlobStorageWriteSettings" | "AzureBlobFSWriteSettings" | "AzureDataLakeStoreWriteSettings" | "FileServerWriteSettings" | "AzureFileStorageWriteSettings" | "LakeHouseWriteSettings";
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /** The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). */
    maxConcurrentConnections?: any;
    /** If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). */
    disableMetricsCollection?: any;
    /** The type of copy behavior for copy sink. */
    copyBehavior?: any;
}

export declare type StoreWriteSettingsUnion = StoreWriteSettings | SftpWriteSettings | AzureBlobStorageWriteSettings | AzureBlobFSWriteSettings | AzureDataLakeStoreWriteSettings | FileServerWriteSettings | AzureFileStorageWriteSettings | LakeHouseWriteSettings;

/** Azure Data Factory nested resource, which belongs to a factory. */
export declare interface SubResource {
    /**
     * The resource identifier.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The resource name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The resource type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * Etag identifies change in the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly etag?: string;
}

/** Azure Data Factory nested debug resource. */
export declare interface SubResourceDebugResource {
    /** The resource name. */
    name?: string;
}

/** This activity evaluates an expression and executes activities under the cases property that correspond to the expression evaluation expected in the equals property. */
export declare interface SwitchActivity extends ControlActivity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Switch";
    /** An expression that would evaluate to a string or integer. This is used to determine the block of activities in cases that will be executed. */
    on: Expression;
    /** List of cases that correspond to expected values of the 'on' property. This is an optional property and if not provided, the activity will execute activities provided in defaultActivities. */
    cases?: SwitchCase[];
    /** List of activities to execute if no case condition is satisfied. This is an optional property and if not provided, the activity will exit without any action. */
    defaultActivities?: ActivityUnion[];
}

/** Switch cases with have a value and corresponding activities. */
export declare interface SwitchCase {
    /** Expected value that satisfies the expression result of the 'on' property. */
    value?: string;
    /** List of activities to execute for satisfied case condition. */
    activities?: ActivityUnion[];
}

/**
 * Defines values for SybaseAuthenticationType. \
 * {@link KnownSybaseAuthenticationType} can be used interchangeably with SybaseAuthenticationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Basic** \
 * **Windows**
 */
export declare type SybaseAuthenticationType = string;

/** Linked service for Sybase data source. */
export declare interface SybaseLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Sybase";
    /** Server name for connection. Type: string (or Expression with resultType string). */
    server: any;
    /** Database name for connection. Type: string (or Expression with resultType string). */
    database: any;
    /** Schema name for connection. Type: string (or Expression with resultType string). */
    schema?: any;
    /** AuthenticationType to be used for connection. */
    authenticationType?: SybaseAuthenticationType;
    /** Username for authentication. Type: string (or Expression with resultType string). */
    username?: any;
    /** Password for authentication. */
    password?: SecretBaseUnion;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** A copy activity source for Sybase databases. */
export declare interface SybaseSource extends TabularSource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SybaseSource";
    /** Database query. Type: string (or Expression with resultType string). */
    query?: any;
}

/** The Sybase table dataset. */
export declare interface SybaseTableDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SybaseTable";
    /** The Sybase table name. Type: string (or Expression with resultType string). */
    tableName?: any;
}

/** Execute Synapse notebook activity. */
export declare interface SynapseNotebookActivity extends ExecutionActivity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SynapseNotebook";
    /** Synapse notebook reference. */
    notebook: SynapseNotebookReference;
    /** The name of the big data pool which will be used to execute the notebook. */
    sparkPool?: BigDataPoolParametrizationReference;
    /** Notebook parameters. */
    parameters?: {
        [propertyName: string]: NotebookParameter;
    };
    /** Number of core and memory to be used for executors allocated in the specified Spark pool for the session, which will be used for overriding 'executorCores' and 'executorMemory' of the notebook you provide. Type: string (or Expression with resultType string). */
    executorSize?: any;
    /** Spark configuration properties, which will override the 'conf' of the notebook you provide. */
    conf?: any;
    /** Number of core and memory to be used for driver allocated in the specified Spark pool for the session, which will be used for overriding 'driverCores' and 'driverMemory' of the notebook you provide. Type: string (or Expression with resultType string). */
    driverSize?: any;
    /** Number of executors to launch for this session, which will override the 'numExecutors' of the notebook you provide. Type: integer (or Expression with resultType integer). */
    numExecutors?: any;
    /** The type of the spark config. */
    configurationType?: ConfigurationType;
    /** The spark configuration of the spark job. */
    targetSparkConfiguration?: SparkConfigurationParametrizationReference;
    /** Spark configuration property. */
    sparkConfig?: {
        [propertyName: string]: any;
    };
}

/** Synapse notebook reference type. */
export declare interface SynapseNotebookReference {
    /** Synapse notebook reference type. */
    type: NotebookReferenceType;
    /** Reference notebook name. Type: string (or Expression with resultType string). */
    referenceName: any;
}

/** Execute spark job activity. */
export declare interface SynapseSparkJobDefinitionActivity extends ExecutionActivity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SparkJob";
    /** Synapse spark job reference. */
    sparkJob: SynapseSparkJobReference;
    /** User specified arguments to SynapseSparkJobDefinitionActivity. */
    arguments?: any[];
    /** The main file used for the job, which will override the 'file' of the spark job definition you provide. Type: string (or Expression with resultType string). */
    file?: any;
    /** Scanning subfolders from the root folder of the main definition file, these files will be added as reference files. The folders named 'jars', 'pyFiles', 'files' or 'archives' will be scanned, and the folders name are case sensitive. Type: boolean (or Expression with resultType boolean). */
    scanFolder?: any;
    /** The fully-qualified identifier or the main class that is in the main definition file, which will override the 'className' of the spark job definition you provide. Type: string (or Expression with resultType string). */
    className?: any;
    /** (Deprecated. Please use pythonCodeReference and filesV2) Additional files used for reference in the main definition file, which will override the 'files' of the spark job definition you provide. */
    files?: any[];
    /** Additional python code files used for reference in the main definition file, which will override the 'pyFiles' of the spark job definition you provide. */
    pythonCodeReference?: any[];
    /** Additional files used for reference in the main definition file, which will override the 'jars' and 'files' of the spark job definition you provide. */
    filesV2?: any[];
    /** The name of the big data pool which will be used to execute the spark batch job, which will override the 'targetBigDataPool' of the spark job definition you provide. */
    targetBigDataPool?: BigDataPoolParametrizationReference;
    /** Number of core and memory to be used for executors allocated in the specified Spark pool for the job, which will be used for overriding 'executorCores' and 'executorMemory' of the spark job definition you provide. Type: string (or Expression with resultType string). */
    executorSize?: any;
    /** Spark configuration properties, which will override the 'conf' of the spark job definition you provide. */
    conf?: any;
    /** Number of core and memory to be used for driver allocated in the specified Spark pool for the job, which will be used for overriding 'driverCores' and 'driverMemory' of the spark job definition you provide. Type: string (or Expression with resultType string). */
    driverSize?: any;
    /** Number of executors to launch for this job, which will override the 'numExecutors' of the spark job definition you provide. Type: integer (or Expression with resultType integer). */
    numExecutors?: any;
    /** The type of the spark config. */
    configurationType?: ConfigurationType;
    /** The spark configuration of the spark job. */
    targetSparkConfiguration?: SparkConfigurationParametrizationReference;
    /** Spark configuration property. */
    sparkConfig?: {
        [propertyName: string]: any;
    };
}

/** Synapse spark job reference type. */
export declare interface SynapseSparkJobReference {
    /** Synapse spark job reference type. */
    type: SparkJobReferenceType;
    /** Reference spark job name. Expression with resultType string. */
    referenceName: any;
}

/** Copy activity sources of tabular type. */
export declare interface TabularSource extends CopySource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "TabularSource" | "AzureTableSource" | "InformixSource" | "Db2Source" | "OdbcSource" | "MySqlSource" | "PostgreSqlSource" | "SybaseSource" | "SapBwSource" | "SalesforceSource" | "SapCloudForCustomerSource" | "SapEccSource" | "SapHanaSource" | "SapOpenHubSource" | "SapOdpSource" | "SapTableSource" | "SqlSource" | "SqlServerSource" | "AmazonRdsForSqlServerSource" | "AzureSqlSource" | "SqlMISource" | "SqlDWSource" | "AzureMySqlSource" | "TeradataSource" | "CassandraSource" | "AmazonMWSSource" | "AzurePostgreSqlSource" | "ConcurSource" | "CouchbaseSource" | "DrillSource" | "EloquaSource" | "GoogleBigQuerySource" | "GreenplumSource" | "HBaseSource" | "HiveSource" | "HubspotSource" | "ImpalaSource" | "JiraSource" | "MagentoSource" | "MariaDBSource" | "AzureMariaDBSource" | "MarketoSource" | "PaypalSource" | "PhoenixSource" | "PrestoSource" | "QuickBooksSource" | "ServiceNowSource" | "ShopifySource" | "SparkSource" | "SquareSource" | "XeroSource" | "ZohoSource" | "NetezzaSource" | "VerticaSource" | "SalesforceMarketingCloudSource" | "ResponsysSource" | "DynamicsAXSource" | "OracleServiceCloudSource" | "GoogleAdWordsSource" | "AmazonRedshiftSource";
    /** Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). */
    queryTimeout?: any;
    /** Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). */
    additionalColumns?: any;
}

export declare type TabularSourceUnion = TabularSource | AzureTableSource | InformixSource | Db2Source | OdbcSource | MySqlSource | PostgreSqlSource | SybaseSource | SapBwSource | SalesforceSource | SapCloudForCustomerSource | SapEccSource | SapHanaSource | SapOpenHubSource | SapOdpSource | SapTableSource | SqlSource | SqlServerSource | AmazonRdsForSqlServerSource | AzureSqlSource | SqlMISource | SqlDWSource | AzureMySqlSource | TeradataSource | CassandraSource | AmazonMWSSource | AzurePostgreSqlSource | ConcurSource | CouchbaseSource | DrillSource | EloquaSource | GoogleBigQuerySource | GreenplumSource | HBaseSource | HiveSource | HubspotSource | ImpalaSource | JiraSource | MagentoSource | MariaDBSource | AzureMariaDBSource | MarketoSource | PaypalSource | PhoenixSource | PrestoSource | QuickBooksSource | ServiceNowSource | ShopifySource | SparkSource | SquareSource | XeroSource | ZohoSource | NetezzaSource | VerticaSource | SalesforceMarketingCloudSource | ResponsysSource | DynamicsAXSource | OracleServiceCloudSource | GoogleAdWordsSource | AmazonRedshiftSource;

/** A copy activity tabular translator. */
export declare interface TabularTranslator extends CopyTranslator {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "TabularTranslator";
    /** Column mappings. Example: "UserId: MyUserId, Group: MyGroup, Name: MyName" Type: string (or Expression with resultType string). This property will be retired. Please use mappings property. */
    columnMappings?: any;
    /** The schema mapping to map between tabular data and hierarchical data. Example: {"Column1": "$.Column1", "Column2": "$.Column2.Property1", "Column3": "$.Column2.Property2"}. Type: object (or Expression with resultType object). This property will be retired. Please use mappings property. */
    schemaMapping?: any;
    /** The JSON Path of the Nested Array that is going to do cross-apply. Type: object (or Expression with resultType object). */
    collectionReference?: any;
    /** Whether to map complex (array and object) values to simple strings in json format. Type: boolean (or Expression with resultType boolean). */
    mapComplexValuesToString?: any;
    /** Column mappings with logical types. Tabular->tabular example: [{"source":{"name":"CustomerName","type":"String"},"sink":{"name":"ClientName","type":"String"}},{"source":{"name":"CustomerAddress","type":"String"},"sink":{"name":"ClientAddress","type":"String"}}].  Hierarchical->tabular example: [{"source":{"path":"$.CustomerName","type":"String"},"sink":{"name":"ClientName","type":"String"}},{"source":{"path":"$.CustomerAddress","type":"String"},"sink":{"name":"ClientAddress","type":"String"}}]. Type: object (or Expression with resultType object). */
    mappings?: any;
    /** Whether to enable the advanced type conversion feature in the Copy activity. Type: boolean (or Expression with resultType boolean). */
    typeConversion?: any;
    /** Type conversion settings */
    typeConversionSettings?: TypeConversionSettings;
}

/** The TarGZip compression read settings. */
export declare interface TarGZipReadSettings extends CompressionReadSettings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "TarGZipReadSettings";
    /** Preserve the compression file name as folder path. Type: boolean (or Expression with resultType boolean). */
    preserveCompressionFileNameAsFolder?: any;
}

/** The Tar compression read settings. */
export declare interface TarReadSettings extends CompressionReadSettings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "TarReadSettings";
    /** Preserve the compression file name as folder path. Type: boolean (or Expression with resultType boolean). */
    preserveCompressionFileNameAsFolder?: any;
}

/**
 * Defines values for TeamDeskAuthenticationType. \
 * {@link KnownTeamDeskAuthenticationType} can be used interchangeably with TeamDeskAuthenticationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Basic** \
 * **Token**
 */
export declare type TeamDeskAuthenticationType = string;

/** Linked service for TeamDesk. */
export declare interface TeamDeskLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "TeamDesk";
    /** The authentication type to use. */
    authenticationType: TeamDeskAuthenticationType;
    /** The url to connect TeamDesk source. Type: string (or Expression with resultType string). */
    url: any;
    /** The username of the TeamDesk source. Type: string (or Expression with resultType string). */
    userName?: any;
    /** The password of the TeamDesk source. */
    password?: SecretBaseUnion;
    /** The api token for the TeamDesk source. */
    apiToken?: SecretBaseUnion;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/**
 * Defines values for TeradataAuthenticationType. \
 * {@link KnownTeradataAuthenticationType} can be used interchangeably with TeradataAuthenticationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Basic** \
 * **Windows**
 */
export declare type TeradataAuthenticationType = string;

/** Linked service for Teradata data source. */
export declare interface TeradataLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Teradata";
    /** Teradata ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference. */
    connectionString?: any;
    /** Server name for connection. Type: string (or Expression with resultType string). */
    server?: any;
    /** AuthenticationType to be used for connection. */
    authenticationType?: TeradataAuthenticationType;
    /** Username for authentication. Type: string (or Expression with resultType string). */
    username?: any;
    /** Password for authentication. */
    password?: SecretBaseUnion;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/**
 * Defines values for TeradataPartitionOption. \
 * {@link KnownTeradataPartitionOption} can be used interchangeably with TeradataPartitionOption,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Hash** \
 * **DynamicRange**
 */
export declare type TeradataPartitionOption = string;

/** The settings that will be leveraged for teradata source partitioning. */
export declare interface TeradataPartitionSettings {
    /** The name of the column that will be used for proceeding range or hash partitioning. Type: string (or Expression with resultType string). */
    partitionColumnName?: any;
    /** The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string). */
    partitionUpperBound?: any;
    /** The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string). */
    partitionLowerBound?: any;
}

/** A copy activity Teradata source. */
export declare interface TeradataSource extends TabularSource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "TeradataSource";
    /** Teradata query. Type: string (or Expression with resultType string). */
    query?: any;
    /** The partition mechanism that will be used for teradata read in parallel. Possible values include: "None", "Hash", "DynamicRange". */
    partitionOption?: any;
    /** The settings that will be leveraged for teradata source partitioning. */
    partitionSettings?: TeradataPartitionSettings;
}

/** The Teradata database dataset. */
export declare interface TeradataTableDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "TeradataTable";
    /** The database name of Teradata. Type: string (or Expression with resultType string). */
    database?: any;
    /** The table name of Teradata. Type: string (or Expression with resultType string). */
    table?: any;
}

/** The data stored in text format. */
export declare interface TextFormat extends DatasetStorageFormat {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "TextFormat";
    /** The column delimiter. Type: string (or Expression with resultType string). */
    columnDelimiter?: any;
    /** The row delimiter. Type: string (or Expression with resultType string). */
    rowDelimiter?: any;
    /** The escape character. Type: string (or Expression with resultType string). */
    escapeChar?: any;
    /** The quote character. Type: string (or Expression with resultType string). */
    quoteChar?: any;
    /** The null value string. Type: string (or Expression with resultType string). */
    nullValue?: any;
    /** The code page name of the preferred encoding. If miss, the default value is ΓÇ£utf-8ΓÇ¥, unless BOM denotes another Unicode encoding. Refer to the ΓÇ£NameΓÇ¥ column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string). */
    encodingName?: any;
    /** Treat empty column values in the text file as null. The default value is true. Type: boolean (or Expression with resultType boolean). */
    treatEmptyAsNull?: any;
    /** The number of lines/rows to be skipped when parsing text files. The default value is 0. Type: integer (or Expression with resultType integer). */
    skipLineCount?: any;
    /** When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean). */
    firstRowAsHeader?: any;
}

/** A data flow transformation. */
export declare interface Transformation {
    /** Transformation name. */
    name: string;
    /** Transformation description. */
    description?: string;
    /** Dataset reference. */
    dataset?: DatasetReference;
    /** Linked service reference. */
    linkedService?: LinkedServiceReference;
    /** Flowlet Reference */
    flowlet?: DataFlowReference;
}

/** Azure data factory nested object which contains information about creating pipeline run */
export declare interface Trigger {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "MultiplePipelineTrigger" | "ScheduleTrigger" | "BlobTrigger" | "BlobEventsTrigger" | "CustomEventsTrigger" | "TumblingWindowTrigger" | "RerunTumblingWindowTrigger" | "ChainingTrigger";
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /** Trigger description. */
    description?: string;
    /**
     * Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly runtimeState?: TriggerRuntimeState;
    /** List of tags that can be used for describing the trigger. */
    annotations?: any[];
}

/** Trigger referenced dependency. */
export declare interface TriggerDependencyReference extends DependencyReference {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "TriggerDependencyReference" | "TumblingWindowTriggerDependencyReference";
    /** Referenced trigger. */
    referenceTrigger: TriggerReference;
}

export declare type TriggerDependencyReferenceUnion = TriggerDependencyReference | TumblingWindowTriggerDependencyReference;

/** Query parameters for triggers. */
export declare interface TriggerFilterParameters {
    /** The continuation token for getting the next page of results. Null for first page. */
    continuationToken?: string;
    /** The name of the parent TumblingWindowTrigger to get the child rerun triggers */
    parentTriggerName?: string;
}

/** A list of trigger resources. */
export declare interface TriggerListResponse {
    /** List of triggers. */
    value: TriggerResource[];
    /** The link to the next page of results, if any remaining results exist. */
    nextLink?: string;
}

/** Pipeline that needs to be triggered with the given parameters. */
export declare interface TriggerPipelineReference {
    /** Pipeline reference. */
    pipelineReference?: PipelineReference;
    /** Pipeline parameters. */
    parameters?: {
        [propertyName: string]: any;
    };
}

/** A query of triggers. */
export declare interface TriggerQueryResponse {
    /** List of triggers. */
    value: TriggerResource[];
    /** The continuation token for getting the next page of results, if any remaining results exist, null otherwise. */
    continuationToken?: string;
}

/** Trigger reference type. */
export declare interface TriggerReference {
    /** Trigger reference type. */
    type: TriggerReferenceType;
    /** Reference trigger name. */
    referenceName: string;
}

/**
 * Defines values for TriggerReferenceType. \
 * {@link KnownTriggerReferenceType} can be used interchangeably with TriggerReferenceType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **TriggerReference**
 */
export declare type TriggerReferenceType = string;

/** Trigger resource type. */
export declare interface TriggerResource extends SubResource {
    /** Properties of the trigger. */
    properties: TriggerUnion;
}

/** Trigger runs. */
export declare interface TriggerRun {
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /**
     * Trigger run id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly triggerRunId?: string;
    /**
     * Trigger name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly triggerName?: string;
    /**
     * Trigger type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly triggerType?: string;
    /**
     * Trigger run start time.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly triggerRunTimestamp?: Date;
    /**
     * Trigger run status.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: TriggerRunStatus;
    /**
     * Trigger error message.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
    /**
     * List of property name and value related to trigger run. Name, value pair depends on type of trigger.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly properties?: {
        [propertyName: string]: string;
    };
    /**
     * List of pipeline name and run Id triggered by the trigger run.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly triggeredPipelines?: {
        [propertyName: string]: string;
    };
    /**
     * Run dimension for which trigger was fired.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly runDimension?: {
        [propertyName: string]: string;
    };
    /**
     * Status of the upstream pipelines.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dependencyStatus?: {
        [propertyName: string]: any;
    };
}

/** Interface representing a TriggerRuns. */
export declare interface TriggerRuns {
    /**
     * Rerun single trigger instance by runId.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param runId The pipeline run identifier.
     * @param options The options parameters.
     */
    rerun(resourceGroupName: string, factoryName: string, triggerName: string, runId: string, options?: TriggerRunsRerunOptionalParams): Promise<void>;
    /**
     * Cancel a single trigger instance by runId.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param runId The pipeline run identifier.
     * @param options The options parameters.
     */
    cancel(resourceGroupName: string, factoryName: string, triggerName: string, runId: string, options?: TriggerRunsCancelOptionalParams): Promise<void>;
    /**
     * Query trigger runs.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param filterParameters Parameters to filter the pipeline run.
     * @param options The options parameters.
     */
    queryByFactory(resourceGroupName: string, factoryName: string, filterParameters: RunFilterParameters, options?: TriggerRunsQueryByFactoryOptionalParams): Promise<TriggerRunsQueryByFactoryResponse>;
}

/** Optional parameters. */
export declare interface TriggerRunsCancelOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface TriggerRunsQueryByFactoryOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the queryByFactory operation. */
export declare type TriggerRunsQueryByFactoryResponse = TriggerRunsQueryResponse;

/** A list of trigger runs. */
export declare interface TriggerRunsQueryResponse {
    /** List of trigger runs. */
    value: TriggerRun[];
    /** The continuation token for getting the next page of results, if any remaining results exist, null otherwise. */
    continuationToken?: string;
}

/** Optional parameters. */
export declare interface TriggerRunsRerunOptionalParams extends coreClient.OperationOptions {
}

/**
 * Defines values for TriggerRunStatus. \
 * {@link KnownTriggerRunStatus} can be used interchangeably with TriggerRunStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Inprogress**
 */
export declare type TriggerRunStatus = string;

/**
 * Defines values for TriggerRuntimeState. \
 * {@link KnownTriggerRuntimeState} can be used interchangeably with TriggerRuntimeState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Started** \
 * **Stopped** \
 * **Disabled**
 */
export declare type TriggerRuntimeState = string;

/** Interface representing a Triggers. */
export declare interface Triggers {
    /**
     * Lists triggers.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param options The options parameters.
     */
    listByFactory(resourceGroupName: string, factoryName: string, options?: TriggersListByFactoryOptionalParams): PagedAsyncIterableIterator<TriggerResource>;
    /**
     * Query triggers.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param filterParameters Parameters to filter the triggers.
     * @param options The options parameters.
     */
    queryByFactory(resourceGroupName: string, factoryName: string, filterParameters: TriggerFilterParameters, options?: TriggersQueryByFactoryOptionalParams): Promise<TriggersQueryByFactoryResponse>;
    /**
     * Creates or updates a trigger.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param trigger Trigger resource definition.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, factoryName: string, triggerName: string, trigger: TriggerResource, options?: TriggersCreateOrUpdateOptionalParams): Promise<TriggersCreateOrUpdateResponse>;
    /**
     * Gets a trigger.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, factoryName: string, triggerName: string, options?: TriggersGetOptionalParams): Promise<TriggersGetResponse>;
    /**
     * Deletes a trigger.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, factoryName: string, triggerName: string, options?: TriggersDeleteOptionalParams): Promise<void>;
    /**
     * Subscribe event trigger to events.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param options The options parameters.
     */
    beginSubscribeToEvents(resourceGroupName: string, factoryName: string, triggerName: string, options?: TriggersSubscribeToEventsOptionalParams): Promise<SimplePollerLike<OperationState<TriggersSubscribeToEventsResponse>, TriggersSubscribeToEventsResponse>>;
    /**
     * Subscribe event trigger to events.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param options The options parameters.
     */
    beginSubscribeToEventsAndWait(resourceGroupName: string, factoryName: string, triggerName: string, options?: TriggersSubscribeToEventsOptionalParams): Promise<TriggersSubscribeToEventsResponse>;
    /**
     * Get a trigger's event subscription status.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param options The options parameters.
     */
    getEventSubscriptionStatus(resourceGroupName: string, factoryName: string, triggerName: string, options?: TriggersGetEventSubscriptionStatusOptionalParams): Promise<TriggersGetEventSubscriptionStatusResponse>;
    /**
     * Unsubscribe event trigger from events.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param options The options parameters.
     */
    beginUnsubscribeFromEvents(resourceGroupName: string, factoryName: string, triggerName: string, options?: TriggersUnsubscribeFromEventsOptionalParams): Promise<SimplePollerLike<OperationState<TriggersUnsubscribeFromEventsResponse>, TriggersUnsubscribeFromEventsResponse>>;
    /**
     * Unsubscribe event trigger from events.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param options The options parameters.
     */
    beginUnsubscribeFromEventsAndWait(resourceGroupName: string, factoryName: string, triggerName: string, options?: TriggersUnsubscribeFromEventsOptionalParams): Promise<TriggersUnsubscribeFromEventsResponse>;
    /**
     * Starts a trigger.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param options The options parameters.
     */
    beginStart(resourceGroupName: string, factoryName: string, triggerName: string, options?: TriggersStartOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Starts a trigger.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param options The options parameters.
     */
    beginStartAndWait(resourceGroupName: string, factoryName: string, triggerName: string, options?: TriggersStartOptionalParams): Promise<void>;
    /**
     * Stops a trigger.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param options The options parameters.
     */
    beginStop(resourceGroupName: string, factoryName: string, triggerName: string, options?: TriggersStopOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Stops a trigger.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param options The options parameters.
     */
    beginStopAndWait(resourceGroupName: string, factoryName: string, triggerName: string, options?: TriggersStopOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface TriggersCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** ETag of the trigger entity.  Should only be specified for update, for which it should match existing entity or can be * for unconditional update. */
    ifMatch?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type TriggersCreateOrUpdateResponse = TriggerResource;

/** Optional parameters. */
export declare interface TriggersDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface TriggersGetEventSubscriptionStatusOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getEventSubscriptionStatus operation. */
export declare type TriggersGetEventSubscriptionStatusResponse = TriggerSubscriptionOperationStatus;

/** Optional parameters. */
export declare interface TriggersGetOptionalParams extends coreClient.OperationOptions {
    /** ETag of the trigger entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. */
    ifNoneMatch?: string;
}

/** Contains response data for the get operation. */
export declare type TriggersGetResponse = TriggerResource;

/** Optional parameters. */
export declare interface TriggersListByFactoryNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByFactoryNext operation. */
export declare type TriggersListByFactoryNextResponse = TriggerListResponse;

/** Optional parameters. */
export declare interface TriggersListByFactoryOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByFactory operation. */
export declare type TriggersListByFactoryResponse = TriggerListResponse;

/** Optional parameters. */
export declare interface TriggersQueryByFactoryOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the queryByFactory operation. */
export declare type TriggersQueryByFactoryResponse = TriggerQueryResponse;

/** Optional parameters. */
export declare interface TriggersStartOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface TriggersStopOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface TriggersSubscribeToEventsOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the subscribeToEvents operation. */
export declare type TriggersSubscribeToEventsResponse = TriggerSubscriptionOperationStatus;

/** Defines the response of a trigger subscription operation. */
export declare interface TriggerSubscriptionOperationStatus {
    /**
     * Trigger name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly triggerName?: string;
    /**
     * Event Subscription Status.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: EventSubscriptionStatus;
}

/** Optional parameters. */
export declare interface TriggersUnsubscribeFromEventsOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the unsubscribeFromEvents operation. */
export declare type TriggersUnsubscribeFromEventsResponse = TriggerSubscriptionOperationStatus;

export declare type TriggerUnion = Trigger | MultiplePipelineTriggerUnion | TumblingWindowTrigger | RerunTumblingWindowTrigger | ChainingTrigger;

/**
 * Defines values for TumblingWindowFrequency. \
 * {@link KnownTumblingWindowFrequency} can be used interchangeably with TumblingWindowFrequency,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Minute** \
 * **Hour** \
 * **Month**
 */
export declare type TumblingWindowFrequency = string;

/** Trigger that schedules pipeline runs for all fixed time interval windows from a start time without gaps and also supports backfill scenarios (when start time is in the past). */
export declare interface TumblingWindowTrigger extends Trigger {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "TumblingWindowTrigger";
    /** Pipeline for which runs are created when an event is fired for trigger window that is ready. */
    pipeline: TriggerPipelineReference;
    /** The frequency of the time windows. */
    frequency: TumblingWindowFrequency;
    /** The interval of the time windows. The minimum interval allowed is 15 Minutes. */
    interval: number;
    /** The start time for the time period for the trigger during which events are fired for windows that are ready. Only UTC time is currently supported. */
    startTime: Date;
    /** The end time for the time period for the trigger during which events are fired for windows that are ready. Only UTC time is currently supported. */
    endTime?: Date;
    /** Specifies how long the trigger waits past due time before triggering new run. It doesn't alter window start and end time. The default is 0. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). */
    delay?: any;
    /** The max number of parallel time windows (ready for execution) for which a new run is triggered. */
    maxConcurrency: number;
    /** Retry policy that will be applied for failed pipeline runs. */
    retryPolicy?: RetryPolicy;
    /** Triggers that this trigger depends on. Only tumbling window triggers are supported. */
    dependsOn?: DependencyReferenceUnion[];
}

/** Referenced tumbling window trigger dependency. */
export declare interface TumblingWindowTriggerDependencyReference extends TriggerDependencyReference {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "TumblingWindowTriggerDependencyReference";
    /** Timespan applied to the start time of a tumbling window when evaluating dependency. */
    offset?: string;
    /** The size of the window when evaluating the dependency. If undefined the frequency of the tumbling window will be used. */
    size?: string;
}

/** Linked service for Twilio. */
export declare interface TwilioLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Twilio";
    /** The Account SID of Twilio service. Type: string (or Expression with resultType string). */
    userName: any;
    /** The auth token of Twilio service. */
    password: SecretBaseUnion;
}

/**
 * Defines values for Type. \
 * {@link KnownType} can be used interchangeably with Type,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **LinkedServiceReference**
 */
export declare type Type = string;

/** Type conversion settings */
export declare interface TypeConversionSettings {
    /** Whether to allow data truncation when converting the data. Type: boolean (or Expression with resultType boolean). */
    allowDataTruncation?: any;
    /** Whether to treat boolean values as numbers. Type: boolean (or Expression with resultType boolean). */
    treatBooleanAsNumber?: any;
    /** The format for DateTime values. Type: string (or Expression with resultType string). */
    dateTimeFormat?: any;
    /** The format for DateTimeOffset values. Type: string (or Expression with resultType string). */
    dateTimeOffsetFormat?: any;
    /** The format for TimeSpan values. Type: string (or Expression with resultType string). */
    timeSpanFormat?: any;
    /** The culture used to convert data from/to string. Type: string (or Expression with resultType string). */
    culture?: any;
}

/** This activity executes inner activities until the specified boolean expression results to true or timeout is reached, whichever is earlier. */
export declare interface UntilActivity extends ControlActivity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Until";
    /** An expression that would evaluate to Boolean. The loop will continue until this expression evaluates to true */
    expression: Expression;
    /** Specifies the timeout for the activity to run. If there is no value specified, it takes the value of TimeSpan.FromDays(7) which is 1 week as default. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). */
    timeout?: any;
    /** List of activities to execute. */
    activities: ActivityUnion[];
}

/** Update integration runtime node request. */
export declare interface UpdateIntegrationRuntimeNodeRequest {
    /** The number of concurrent jobs permitted to run on the integration runtime node. Values between 1 and maxConcurrentJobs(inclusive) are allowed. */
    concurrentJobsLimit?: number;
}

/** Update integration runtime request. */
export declare interface UpdateIntegrationRuntimeRequest {
    /** Enables or disables the auto-update feature of the self-hosted integration runtime. See https://go.microsoft.com/fwlink/?linkid=854189. */
    autoUpdate?: IntegrationRuntimeAutoUpdate;
    /** The time offset (in hours) in the day, e.g., PT03H is 3 hours. The integration runtime auto update will happen on that time. */
    updateDelayOffset?: string;
}

/** Get Data Plane read only token request definition. */
export declare interface UserAccessPolicy {
    /** The string with permissions for Data Plane access. Currently only 'r' is supported which grants read only access. */
    permissions?: string;
    /** The resource path to get access relative to factory. Currently only empty string is supported which corresponds to the factory resource. */
    accessResourcePath?: string;
    /** The name of the profile. Currently only the default is supported. The default value is DefaultProfile. */
    profileName?: string;
    /** Start time for the token. If not specified the current time will be used. */
    startTime?: string;
    /** Expiration time for the token. Maximum duration for the token is eight hours and by default the token will expire in eight hours. */
    expireTime?: string;
}

/** User property. */
export declare interface UserProperty {
    /** User property name. */
    name: string;
    /** User property value. Type: string (or Expression with resultType string). */
    value: any;
}

/** This activity verifies that an external resource exists. */
export declare interface ValidationActivity extends ControlActivity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Validation";
    /** Specifies the timeout for the activity to run. If there is no value specified, it takes the value of TimeSpan.FromDays(7) which is 1 week as default. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). */
    timeout?: any;
    /** A delay in seconds between validation attempts. If no value is specified, 10 seconds will be used as the default. Type: integer (or Expression with resultType integer). */
    sleep?: any;
    /** Can be used if dataset points to a file. The file must be greater than or equal in size to the value specified. Type: integer (or Expression with resultType integer). */
    minimumSize?: any;
    /** Can be used if dataset points to a folder. If set to true, the folder must have at least one file. If set to false, the folder must be empty. Type: boolean (or Expression with resultType boolean). */
    childItems?: any;
    /** Validation activity dataset reference. */
    dataset: DatasetReference;
}

/** Definition of a single variable for a Pipeline. */
export declare interface VariableSpecification {
    /** Variable type. */
    type: VariableType;
    /** Default value of variable. */
    defaultValue?: any;
}

/**
 * Defines values for VariableType. \
 * {@link KnownVariableType} can be used interchangeably with VariableType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **String** \
 * **Bool** \
 * **Array**
 */
export declare type VariableType = string;

/** Vertica linked service. */
export declare interface VerticaLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Vertica";
    /** An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference. */
    connectionString?: any;
    /** The Azure key vault secret reference of password in connection string. */
    pwd?: AzureKeyVaultSecretReference;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** A copy activity Vertica source. */
export declare interface VerticaSource extends TabularSource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "VerticaSource";
    /** A query to retrieve data from source. Type: string (or Expression with resultType string). */
    query?: any;
}

/** Vertica dataset. */
export declare interface VerticaTableDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "VerticaTable";
    /** This property will be retired. Please consider using schema + table properties instead. */
    tableName?: any;
    /** The table name of the Vertica. Type: string (or Expression with resultType string). */
    table?: any;
    /** The schema name of the Vertica. Type: string (or Expression with resultType string). */
    schemaTypePropertiesSchema?: any;
}

/** This activity suspends pipeline execution for the specified interval. */
export declare interface WaitActivity extends ControlActivity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Wait";
    /** Duration in seconds. Type: integer (or Expression with resultType integer). */
    waitTimeInSeconds: any;
}

/** Web activity. */
export declare interface WebActivity extends ExecutionActivity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "WebActivity";
    /** Rest API method for target endpoint. */
    method: WebActivityMethod;
    /** Web activity target endpoint and path. Type: string (or Expression with resultType string). */
    url: any;
    /** Represents the headers that will be sent to the request. For example, to set the language and type on a request: "headers" : { "Accept-Language": "en-us", "Content-Type": "application/json" }. Type: string (or Expression with resultType string). */
    headers?: any;
    /** Represents the payload that will be sent to the endpoint. Required for POST/PUT method, not allowed for GET method Type: string (or Expression with resultType string). */
    body?: any;
    /** Authentication method used for calling the endpoint. */
    authentication?: WebActivityAuthentication;
    /** When set to true, Certificate validation will be disabled. */
    disableCertValidation?: boolean;
    /** List of datasets passed to web endpoint. */
    datasets?: DatasetReference[];
    /** List of linked services passed to web endpoint. */
    linkedServices?: LinkedServiceReference[];
    /** The integration runtime reference. */
    connectVia?: IntegrationRuntimeReference;
}

/** Web activity authentication properties. */
export declare interface WebActivityAuthentication {
    /** Web activity authentication (Basic/ClientCertificate/MSI/ServicePrincipal) */
    type?: string;
    /** Base64-encoded contents of a PFX file or Certificate when used for ServicePrincipal */
    pfx?: SecretBaseUnion;
    /** Web activity authentication user name for basic authentication or ClientID when used for ServicePrincipal. Type: string (or Expression with resultType string). */
    username?: any;
    /** Password for the PFX file or basic authentication / Secret when used for ServicePrincipal */
    password?: SecretBaseUnion;
    /** Resource for which Azure Auth token will be requested when using MSI Authentication. Type: string (or Expression with resultType string). */
    resource?: any;
    /** TenantId for which Azure Auth token will be requested when using ServicePrincipal Authentication. Type: string (or Expression with resultType string). */
    userTenant?: any;
    /** The credential reference containing authentication information. */
    credential?: CredentialReference;
}

/**
 * Defines values for WebActivityMethod. \
 * {@link KnownWebActivityMethod} can be used interchangeably with WebActivityMethod,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **GET** \
 * **POST** \
 * **PUT** \
 * **DELETE**
 */
export declare type WebActivityMethod = string;

/** A WebLinkedService that uses anonymous authentication to communicate with an HTTP endpoint. */
export declare interface WebAnonymousAuthentication extends WebLinkedServiceTypeProperties {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    authenticationType: "Anonymous";
}

/**
 * Defines values for WebAuthenticationType. \
 * {@link KnownWebAuthenticationType} can be used interchangeably with WebAuthenticationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Basic** \
 * **Anonymous** \
 * **ClientCertificate**
 */
export declare type WebAuthenticationType = string;

/** A WebLinkedService that uses basic authentication to communicate with an HTTP endpoint. */
export declare interface WebBasicAuthentication extends WebLinkedServiceTypeProperties {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    authenticationType: "Basic";
    /** User name for Basic authentication. Type: string (or Expression with resultType string). */
    username: any;
    /** The password for Basic authentication. */
    password: SecretBaseUnion;
}

/** A WebLinkedService that uses client certificate based authentication to communicate with an HTTP endpoint. This scheme follows mutual authentication; the server must also provide valid credentials to the client. */
export declare interface WebClientCertificateAuthentication extends WebLinkedServiceTypeProperties {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    authenticationType: "ClientCertificate";
    /** Base64-encoded contents of a PFX file. */
    pfx: SecretBaseUnion;
    /** Password for the PFX file. */
    password: SecretBaseUnion;
}

/** WebHook activity. */
export declare interface WebHookActivity extends ControlActivity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "WebHook";
    /** Activity policy. */
    policy?: SecureInputOutputPolicy;
    /** Rest API method for target endpoint. */
    method: WebHookActivityMethod;
    /** WebHook activity target endpoint and path. Type: string (or Expression with resultType string). */
    url: any;
    /** The timeout within which the webhook should be called back. If there is no value specified, it defaults to 10 minutes. Type: string. Pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). */
    timeout?: string;
    /** Represents the headers that will be sent to the request. For example, to set the language and type on a request: "headers" : { "Accept-Language": "en-us", "Content-Type": "application/json" }. Type: string (or Expression with resultType string). */
    headers?: any;
    /** Represents the payload that will be sent to the endpoint. Required for POST/PUT method, not allowed for GET method Type: string (or Expression with resultType string). */
    body?: any;
    /** Authentication method used for calling the endpoint. */
    authentication?: WebActivityAuthentication;
    /** When set to true, statusCode, output and error in callback request body will be consumed by activity. The activity can be marked as failed by setting statusCode >= 400 in callback request. Default is false. Type: boolean (or Expression with resultType boolean). */
    reportStatusOnCallBack?: any;
}

/**
 * Defines values for WebHookActivityMethod. \
 * {@link KnownWebHookActivityMethod} can be used interchangeably with WebHookActivityMethod,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **POST**
 */
export declare type WebHookActivityMethod = string;

/** Web linked service. */
export declare interface WebLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Web";
    /** Web linked service properties. */
    typeProperties: WebLinkedServiceTypePropertiesUnion;
}

/** Base definition of WebLinkedServiceTypeProperties, this typeProperties is polymorphic based on authenticationType, so not flattened in SDK models. */
export declare interface WebLinkedServiceTypeProperties {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    authenticationType: "Anonymous" | "Basic" | "ClientCertificate";
    /** The URL of the web service endpoint, e.g. https://www.microsoft.com . Type: string (or Expression with resultType string). */
    url: any;
}

export declare type WebLinkedServiceTypePropertiesUnion = WebLinkedServiceTypeProperties | WebAnonymousAuthentication | WebBasicAuthentication | WebClientCertificateAuthentication;

/** A copy activity source for web page table. */
export declare interface WebSource extends CopySource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "WebSource";
    /** Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). */
    additionalColumns?: any;
}

/** The dataset points to a HTML table in the web page. */
export declare interface WebTableDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "WebTable";
    /** The zero-based index of the table in the web page. Type: integer (or Expression with resultType integer), minimum: 0. */
    index: any;
    /** The relative URL to the web page from the linked service URL. Type: string (or Expression with resultType string). */
    path?: any;
}

/** Power Query data flow. */
export declare interface WranglingDataFlow extends DataFlow {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "WranglingDataFlow";
    /** List of sources in Power Query. */
    sources?: PowerQuerySource[];
    /** Power query mashup script. */
    script?: string;
    /** Locale of the Power query mashup document. */
    documentLocale?: string;
}

/** Xero Service linked service. */
export declare interface XeroLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Xero";
    /** Properties used to connect to Xero. It is mutually exclusive with any other properties in the linked service. Type: object. */
    connectionProperties?: any;
    /** The endpoint of the Xero server. (i.e. api.xero.com) */
    host?: any;
    /** The consumer key associated with the Xero application. */
    consumerKey?: SecretBaseUnion;
    /**
     * The private key from the .pem file that was generated for your Xero private application. You must include all the text from the .pem file, including the Unix line endings(
     * ).
     */
    privateKey?: SecretBaseUnion;
    /** Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. */
    useEncryptedEndpoints?: any;
    /** Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. */
    useHostVerification?: any;
    /** Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. */
    usePeerVerification?: any;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** Xero Service dataset. */
export declare interface XeroObjectDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "XeroObject";
    /** The table name. Type: string (or Expression with resultType string). */
    tableName?: any;
}

/** A copy activity Xero Service source. */
export declare interface XeroSource extends TabularSource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "XeroSource";
    /** A query to retrieve data from source. Type: string (or Expression with resultType string). */
    query?: any;
}

/** Xml dataset. */
export declare interface XmlDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Xml";
    /** The location of the json data storage. */
    location?: DatasetLocationUnion;
    /** The code page name of the preferred encoding. If not specified, the default value is UTF-8, unless BOM denotes another Unicode encoding. Refer to the name column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string). */
    encodingName?: any;
    /** The null value string. Type: string (or Expression with resultType string). */
    nullValue?: any;
    /** The data compression method used for the json dataset. */
    compression?: DatasetCompression;
}

/** Xml read settings. */
export declare interface XmlReadSettings extends FormatReadSettings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "XmlReadSettings";
    /** Compression settings. */
    compressionProperties?: CompressionReadSettingsUnion;
    /** Indicates what validation method is used when reading the xml files. Allowed values: 'none', 'xsd', or 'dtd'. Type: string (or Expression with resultType string). */
    validationMode?: any;
    /** Indicates whether type detection is enabled when reading the xml files. Type: boolean (or Expression with resultType boolean). */
    detectDataType?: any;
    /** Indicates whether namespace is enabled when reading the xml files. Type: boolean (or Expression with resultType boolean). */
    namespaces?: any;
    /** Namespace uri to prefix mappings to override the prefixes in column names when namespace is enabled, if no prefix is defined for a namespace uri, the prefix of xml element/attribute name in the xml data file will be used. Example: "{"http://www.example.com/xml":"prefix"}" Type: object (or Expression with resultType object). */
    namespacePrefixes?: any;
}

/** A copy activity Xml source. */
export declare interface XmlSource extends CopySource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "XmlSource";
    /** Xml store settings. */
    storeSettings?: StoreReadSettingsUnion;
    /** Xml format settings. */
    formatSettings?: XmlReadSettings;
    /** Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). */
    additionalColumns?: any;
}

/**
 * Defines values for ZendeskAuthenticationType. \
 * {@link KnownZendeskAuthenticationType} can be used interchangeably with ZendeskAuthenticationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Basic** \
 * **Token**
 */
export declare type ZendeskAuthenticationType = string;

/** Linked service for Zendesk. */
export declare interface ZendeskLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Zendesk";
    /** The authentication type to use. */
    authenticationType: ZendeskAuthenticationType;
    /** The url to connect Zendesk source. Type: string (or Expression with resultType string). */
    url: any;
    /** The username of the Zendesk source. Type: string (or Expression with resultType string). */
    userName?: any;
    /** The password of the Zendesk source. */
    password?: SecretBaseUnion;
    /** The api token for the Zendesk source. */
    apiToken?: SecretBaseUnion;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** The ZipDeflate compression read settings. */
export declare interface ZipDeflateReadSettings extends CompressionReadSettings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "ZipDeflateReadSettings";
    /** Preserve the zip file name as folder path. Type: boolean (or Expression with resultType boolean). */
    preserveZipFileNameAsFolder?: any;
}

/** Zoho server linked service. */
export declare interface ZohoLinkedService extends LinkedService {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Zoho";
    /** Properties used to connect to Zoho. It is mutually exclusive with any other properties in the linked service. Type: object. */
    connectionProperties?: any;
    /** The endpoint of the Zoho server. (i.e. crm.zoho.com/crm/private) */
    endpoint?: any;
    /** The access token for Zoho authentication. */
    accessToken?: SecretBaseUnion;
    /** Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. */
    useEncryptedEndpoints?: any;
    /** Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. */
    useHostVerification?: any;
    /** Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. */
    usePeerVerification?: any;
    /** The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string. */
    encryptedCredential?: string;
}

/** Zoho server dataset. */
export declare interface ZohoObjectDataset extends Dataset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "ZohoObject";
    /** The table name. Type: string (or Expression with resultType string). */
    tableName?: any;
}

/** A copy activity Zoho server source. */
export declare interface ZohoSource extends TabularSource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "ZohoSource";
    /** A query to retrieve data from source. Type: string (or Expression with resultType string). */
    query?: any;
}

export { }
