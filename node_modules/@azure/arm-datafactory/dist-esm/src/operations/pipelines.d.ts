import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Pipelines } from "../operationsInterfaces";
import { DataFactoryManagementClient } from "../dataFactoryManagementClient";
import { PipelineResource, PipelinesListByFactoryOptionalParams, PipelinesCreateOrUpdateOptionalParams, PipelinesCreateOrUpdateResponse, PipelinesGetOptionalParams, PipelinesGetResponse, PipelinesDeleteOptionalParams, PipelinesCreateRunOptionalParams, PipelinesCreateRunResponse } from "../models";
/** Class containing Pipelines operations. */
export declare class PipelinesImpl implements Pipelines {
    private readonly client;
    /**
     * Initialize a new instance of the class Pipelines class.
     * @param client Reference to the service client
     */
    constructor(client: DataFactoryManagementClient);
    /**
     * Lists pipelines.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param options The options parameters.
     */
    listByFactory(resourceGroupName: string, factoryName: string, options?: PipelinesListByFactoryOptionalParams): PagedAsyncIterableIterator<PipelineResource>;
    private listByFactoryPagingPage;
    private listByFactoryPagingAll;
    /**
     * Lists pipelines.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param options The options parameters.
     */
    private _listByFactory;
    /**
     * Creates or updates a pipeline.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param pipelineName The pipeline name.
     * @param pipeline Pipeline resource definition.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, factoryName: string, pipelineName: string, pipeline: PipelineResource, options?: PipelinesCreateOrUpdateOptionalParams): Promise<PipelinesCreateOrUpdateResponse>;
    /**
     * Gets a pipeline.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param pipelineName The pipeline name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, factoryName: string, pipelineName: string, options?: PipelinesGetOptionalParams): Promise<PipelinesGetResponse>;
    /**
     * Deletes a pipeline.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param pipelineName The pipeline name.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, factoryName: string, pipelineName: string, options?: PipelinesDeleteOptionalParams): Promise<void>;
    /**
     * Creates a run of a pipeline.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param pipelineName The pipeline name.
     * @param options The options parameters.
     */
    createRun(resourceGroupName: string, factoryName: string, pipelineName: string, options?: PipelinesCreateRunOptionalParams): Promise<PipelinesCreateRunResponse>;
    /**
     * ListByFactoryNext
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param nextLink The nextLink from the previous successful call to the ListByFactory method.
     * @param options The options parameters.
     */
    private _listByFactoryNext;
}
//# sourceMappingURL=pipelines.d.ts.map