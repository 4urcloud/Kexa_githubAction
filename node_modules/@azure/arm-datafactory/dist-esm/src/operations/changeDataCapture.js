/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from "tslib";
import { setContinuationToken } from "../pagingHelper";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/// <reference lib="esnext.asynciterable" />
/** Class containing ChangeDataCapture operations. */
export class ChangeDataCaptureImpl {
    /**
     * Initialize a new instance of the class ChangeDataCapture class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all resources of type change data capture.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param options The options parameters.
     */
    listByFactory(resourceGroupName, factoryName, options) {
        const iter = this.listByFactoryPagingAll(resourceGroupName, factoryName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByFactoryPagingPage(resourceGroupName, factoryName, options, settings);
            }
        };
    }
    listByFactoryPagingPage(resourceGroupName, factoryName, options, settings) {
        return __asyncGenerator(this, arguments, function* listByFactoryPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listByFactory(resourceGroupName, factoryName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listByFactoryNext(resourceGroupName, factoryName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listByFactoryPagingAll(resourceGroupName, factoryName, options) {
        return __asyncGenerator(this, arguments, function* listByFactoryPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.listByFactoryPagingPage(resourceGroupName, factoryName, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists all resources of type change data capture.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param options The options parameters.
     */
    _listByFactory(resourceGroupName, factoryName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, options }, listByFactoryOperationSpec);
    }
    /**
     * Creates or updates a change data capture resource.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param changeDataCaptureName The change data capture name.
     * @param changeDataCapture Change data capture resource definition.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, factoryName, changeDataCaptureName, changeDataCapture, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            factoryName,
            changeDataCaptureName,
            changeDataCapture,
            options
        }, createOrUpdateOperationSpec);
    }
    /**
     * Gets a change data capture.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param changeDataCaptureName The change data capture name.
     * @param options The options parameters.
     */
    get(resourceGroupName, factoryName, changeDataCaptureName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, changeDataCaptureName, options }, getOperationSpec);
    }
    /**
     * Deletes a change data capture.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param changeDataCaptureName The change data capture name.
     * @param options The options parameters.
     */
    delete(resourceGroupName, factoryName, changeDataCaptureName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, changeDataCaptureName, options }, deleteOperationSpec);
    }
    /**
     * Starts a change data capture.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param changeDataCaptureName The change data capture name.
     * @param options The options parameters.
     */
    start(resourceGroupName, factoryName, changeDataCaptureName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, changeDataCaptureName, options }, startOperationSpec);
    }
    /**
     * Stops a change data capture.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param changeDataCaptureName The change data capture name.
     * @param options The options parameters.
     */
    stop(resourceGroupName, factoryName, changeDataCaptureName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, changeDataCaptureName, options }, stopOperationSpec);
    }
    /**
     * Gets the current status for the change data capture resource.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param changeDataCaptureName The change data capture name.
     * @param options The options parameters.
     */
    status(resourceGroupName, factoryName, changeDataCaptureName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, changeDataCaptureName, options }, statusOperationSpec);
    }
    /**
     * ListByFactoryNext
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param nextLink The nextLink from the previous successful call to the ListByFactory method.
     * @param options The options parameters.
     */
    _listByFactoryNext(resourceGroupName, factoryName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, nextLink, options }, listByFactoryNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listByFactoryOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/adfcdcs",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ChangeDataCaptureListResponse
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/adfcdcs/{changeDataCaptureName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.ChangeDataCaptureResource
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    requestBody: Parameters.changeDataCapture,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName,
        Parameters.changeDataCaptureName
    ],
    headerParameters: [
        Parameters.accept,
        Parameters.contentType,
        Parameters.ifMatch
    ],
    mediaType: "json",
    serializer
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/adfcdcs/{changeDataCaptureName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ChangeDataCaptureResource
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName,
        Parameters.changeDataCaptureName
    ],
    headerParameters: [Parameters.accept, Parameters.ifNoneMatch],
    serializer
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/adfcdcs/{changeDataCaptureName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName,
        Parameters.changeDataCaptureName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const startOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/adfcdcs/{changeDataCaptureName}/start",
    httpMethod: "POST",
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName,
        Parameters.changeDataCaptureName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const stopOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/adfcdcs/{changeDataCaptureName}/stop",
    httpMethod: "POST",
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName,
        Parameters.changeDataCaptureName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const statusOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/adfcdcs/{changeDataCaptureName}/status",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: { type: { name: "String" } }
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName,
        Parameters.changeDataCaptureName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listByFactoryNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ChangeDataCaptureListResponse
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.nextLink,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=changeDataCapture.js.map