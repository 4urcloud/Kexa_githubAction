/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/** Class containing IntegrationRuntimeNodes operations. */
export class IntegrationRuntimeNodesImpl {
    /**
     * Initialize a new instance of the class IntegrationRuntimeNodes class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets a self-hosted integration runtime node.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param nodeName The integration runtime node name.
     * @param options The options parameters.
     */
    get(resourceGroupName, factoryName, integrationRuntimeName, nodeName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            factoryName,
            integrationRuntimeName,
            nodeName,
            options
        }, getOperationSpec);
    }
    /**
     * Deletes a self-hosted integration runtime node.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param nodeName The integration runtime node name.
     * @param options The options parameters.
     */
    delete(resourceGroupName, factoryName, integrationRuntimeName, nodeName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            factoryName,
            integrationRuntimeName,
            nodeName,
            options
        }, deleteOperationSpec);
    }
    /**
     * Updates a self-hosted integration runtime node.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param nodeName The integration runtime node name.
     * @param updateIntegrationRuntimeNodeRequest The parameters for updating an integration runtime node.
     * @param options The options parameters.
     */
    update(resourceGroupName, factoryName, integrationRuntimeName, nodeName, updateIntegrationRuntimeNodeRequest, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            factoryName,
            integrationRuntimeName,
            nodeName,
            updateIntegrationRuntimeNodeRequest,
            options
        }, updateOperationSpec);
    }
    /**
     * Get the IP address of self-hosted integration runtime node.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param nodeName The integration runtime node name.
     * @param options The options parameters.
     */
    getIpAddress(resourceGroupName, factoryName, integrationRuntimeName, nodeName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            factoryName,
            integrationRuntimeName,
            nodeName,
            options
        }, getIpAddressOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/nodes/{nodeName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.SelfHostedIntegrationRuntimeNode
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName,
        Parameters.integrationRuntimeName,
        Parameters.nodeName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/nodes/{nodeName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName,
        Parameters.integrationRuntimeName,
        Parameters.nodeName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/nodes/{nodeName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Mappers.SelfHostedIntegrationRuntimeNode
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    requestBody: Parameters.updateIntegrationRuntimeNodeRequest,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName,
        Parameters.integrationRuntimeName,
        Parameters.nodeName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const getIpAddressOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/nodes/{nodeName}/ipAddress",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.IntegrationRuntimeNodeIpAddress
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName,
        Parameters.integrationRuntimeName,
        Parameters.nodeName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=integrationRuntimeNodes.js.map