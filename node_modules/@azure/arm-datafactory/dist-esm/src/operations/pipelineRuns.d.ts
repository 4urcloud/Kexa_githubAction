import { PipelineRuns } from "../operationsInterfaces";
import { DataFactoryManagementClient } from "../dataFactoryManagementClient";
import { RunFilterParameters, PipelineRunsQueryByFactoryOptionalParams, PipelineRunsQueryByFactoryResponse, PipelineRunsGetOptionalParams, PipelineRunsGetResponse, PipelineRunsCancelOptionalParams } from "../models";
/** Class containing PipelineRuns operations. */
export declare class PipelineRunsImpl implements PipelineRuns {
    private readonly client;
    /**
     * Initialize a new instance of the class PipelineRuns class.
     * @param client Reference to the service client
     */
    constructor(client: DataFactoryManagementClient);
    /**
     * Query pipeline runs in the factory based on input filter conditions.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param filterParameters Parameters to filter the pipeline run.
     * @param options The options parameters.
     */
    queryByFactory(resourceGroupName: string, factoryName: string, filterParameters: RunFilterParameters, options?: PipelineRunsQueryByFactoryOptionalParams): Promise<PipelineRunsQueryByFactoryResponse>;
    /**
     * Get a pipeline run by its run ID.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param runId The pipeline run identifier.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, factoryName: string, runId: string, options?: PipelineRunsGetOptionalParams): Promise<PipelineRunsGetResponse>;
    /**
     * Cancel a pipeline run by its run ID.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param runId The pipeline run identifier.
     * @param options The options parameters.
     */
    cancel(resourceGroupName: string, factoryName: string, runId: string, options?: PipelineRunsCancelOptionalParams): Promise<void>;
}
//# sourceMappingURL=pipelineRuns.d.ts.map