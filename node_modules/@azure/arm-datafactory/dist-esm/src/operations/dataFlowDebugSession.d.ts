import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { DataFlowDebugSession } from "../operationsInterfaces";
import { DataFactoryManagementClient } from "../dataFactoryManagementClient";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import { DataFlowDebugSessionInfo, DataFlowDebugSessionQueryByFactoryOptionalParams, CreateDataFlowDebugSessionRequest, DataFlowDebugSessionCreateOptionalParams, DataFlowDebugSessionCreateResponse, DataFlowDebugPackage, DataFlowDebugSessionAddDataFlowOptionalParams, DataFlowDebugSessionAddDataFlowResponse, DeleteDataFlowDebugSessionRequest, DataFlowDebugSessionDeleteOptionalParams, DataFlowDebugCommandRequest, DataFlowDebugSessionExecuteCommandOptionalParams, DataFlowDebugSessionExecuteCommandResponse } from "../models";
/** Class containing DataFlowDebugSession operations. */
export declare class DataFlowDebugSessionImpl implements DataFlowDebugSession {
    private readonly client;
    /**
     * Initialize a new instance of the class DataFlowDebugSession class.
     * @param client Reference to the service client
     */
    constructor(client: DataFactoryManagementClient);
    /**
     * Query all active data flow debug sessions.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param options The options parameters.
     */
    listQueryByFactory(resourceGroupName: string, factoryName: string, options?: DataFlowDebugSessionQueryByFactoryOptionalParams): PagedAsyncIterableIterator<DataFlowDebugSessionInfo>;
    private queryByFactoryPagingPage;
    private queryByFactoryPagingAll;
    /**
     * Creates a data flow debug session.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param request Data flow debug session definition
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName: string, factoryName: string, request: CreateDataFlowDebugSessionRequest, options?: DataFlowDebugSessionCreateOptionalParams): Promise<SimplePollerLike<OperationState<DataFlowDebugSessionCreateResponse>, DataFlowDebugSessionCreateResponse>>;
    /**
     * Creates a data flow debug session.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param request Data flow debug session definition
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName: string, factoryName: string, request: CreateDataFlowDebugSessionRequest, options?: DataFlowDebugSessionCreateOptionalParams): Promise<DataFlowDebugSessionCreateResponse>;
    /**
     * Query all active data flow debug sessions.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param options The options parameters.
     */
    private _queryByFactory;
    /**
     * Add a data flow into debug session.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param request Data flow debug session definition with debug content.
     * @param options The options parameters.
     */
    addDataFlow(resourceGroupName: string, factoryName: string, request: DataFlowDebugPackage, options?: DataFlowDebugSessionAddDataFlowOptionalParams): Promise<DataFlowDebugSessionAddDataFlowResponse>;
    /**
     * Deletes a data flow debug session.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param request Data flow debug session definition for deletion
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, factoryName: string, request: DeleteDataFlowDebugSessionRequest, options?: DataFlowDebugSessionDeleteOptionalParams): Promise<void>;
    /**
     * Execute a data flow debug command.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param request Data flow debug command definition.
     * @param options The options parameters.
     */
    beginExecuteCommand(resourceGroupName: string, factoryName: string, request: DataFlowDebugCommandRequest, options?: DataFlowDebugSessionExecuteCommandOptionalParams): Promise<SimplePollerLike<OperationState<DataFlowDebugSessionExecuteCommandResponse>, DataFlowDebugSessionExecuteCommandResponse>>;
    /**
     * Execute a data flow debug command.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param request Data flow debug command definition.
     * @param options The options parameters.
     */
    beginExecuteCommandAndWait(resourceGroupName: string, factoryName: string, request: DataFlowDebugCommandRequest, options?: DataFlowDebugSessionExecuteCommandOptionalParams): Promise<DataFlowDebugSessionExecuteCommandResponse>;
    /**
     * QueryByFactoryNext
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param nextLink The nextLink from the previous successful call to the QueryByFactory method.
     * @param options The options parameters.
     */
    private _queryByFactoryNext;
}
//# sourceMappingURL=dataFlowDebugSession.d.ts.map