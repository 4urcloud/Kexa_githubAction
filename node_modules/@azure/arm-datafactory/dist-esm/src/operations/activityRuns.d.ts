import { ActivityRuns } from "../operationsInterfaces";
import { DataFactoryManagementClient } from "../dataFactoryManagementClient";
import { RunFilterParameters, ActivityRunsQueryByPipelineRunOptionalParams, ActivityRunsQueryByPipelineRunResponse } from "../models";
/** Class containing ActivityRuns operations. */
export declare class ActivityRunsImpl implements ActivityRuns {
    private readonly client;
    /**
     * Initialize a new instance of the class ActivityRuns class.
     * @param client Reference to the service client
     */
    constructor(client: DataFactoryManagementClient);
    /**
     * Query activity runs based on input filter conditions.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param runId The pipeline run identifier.
     * @param filterParameters Parameters to filter the activity runs.
     * @param options The options parameters.
     */
    queryByPipelineRun(resourceGroupName: string, factoryName: string, runId: string, filterParameters: RunFilterParameters, options?: ActivityRunsQueryByPipelineRunOptionalParams): Promise<ActivityRunsQueryByPipelineRunResponse>;
}
//# sourceMappingURL=activityRuns.d.ts.map