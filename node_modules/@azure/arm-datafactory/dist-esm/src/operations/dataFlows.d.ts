import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { DataFlows } from "../operationsInterfaces";
import { DataFactoryManagementClient } from "../dataFactoryManagementClient";
import { DataFlowResource, DataFlowsListByFactoryOptionalParams, DataFlowsCreateOrUpdateOptionalParams, DataFlowsCreateOrUpdateResponse, DataFlowsGetOptionalParams, DataFlowsGetResponse, DataFlowsDeleteOptionalParams } from "../models";
/** Class containing DataFlows operations. */
export declare class DataFlowsImpl implements DataFlows {
    private readonly client;
    /**
     * Initialize a new instance of the class DataFlows class.
     * @param client Reference to the service client
     */
    constructor(client: DataFactoryManagementClient);
    /**
     * Lists data flows.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param options The options parameters.
     */
    listByFactory(resourceGroupName: string, factoryName: string, options?: DataFlowsListByFactoryOptionalParams): PagedAsyncIterableIterator<DataFlowResource>;
    private listByFactoryPagingPage;
    private listByFactoryPagingAll;
    /**
     * Creates or updates a data flow.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param dataFlowName The data flow name.
     * @param dataFlow Data flow resource definition.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, factoryName: string, dataFlowName: string, dataFlow: DataFlowResource, options?: DataFlowsCreateOrUpdateOptionalParams): Promise<DataFlowsCreateOrUpdateResponse>;
    /**
     * Gets a data flow.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param dataFlowName The data flow name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, factoryName: string, dataFlowName: string, options?: DataFlowsGetOptionalParams): Promise<DataFlowsGetResponse>;
    /**
     * Deletes a data flow.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param dataFlowName The data flow name.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, factoryName: string, dataFlowName: string, options?: DataFlowsDeleteOptionalParams): Promise<void>;
    /**
     * Lists data flows.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param options The options parameters.
     */
    private _listByFactory;
    /**
     * ListByFactoryNext
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param nextLink The nextLink from the previous successful call to the ListByFactory method.
     * @param options The options parameters.
     */
    private _listByFactoryNext;
}
//# sourceMappingURL=dataFlows.d.ts.map