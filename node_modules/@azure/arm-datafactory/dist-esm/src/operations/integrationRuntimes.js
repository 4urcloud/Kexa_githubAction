/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await, __awaiter } from "tslib";
import { setContinuationToken } from "../pagingHelper";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { createHttpPoller } from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
/// <reference lib="esnext.asynciterable" />
/** Class containing IntegrationRuntimes operations. */
export class IntegrationRuntimesImpl {
    /**
     * Initialize a new instance of the class IntegrationRuntimes class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists integration runtimes.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param options The options parameters.
     */
    listByFactory(resourceGroupName, factoryName, options) {
        const iter = this.listByFactoryPagingAll(resourceGroupName, factoryName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByFactoryPagingPage(resourceGroupName, factoryName, options, settings);
            }
        };
    }
    listByFactoryPagingPage(resourceGroupName, factoryName, options, settings) {
        return __asyncGenerator(this, arguments, function* listByFactoryPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listByFactory(resourceGroupName, factoryName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listByFactoryNext(resourceGroupName, factoryName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listByFactoryPagingAll(resourceGroupName, factoryName, options) {
        return __asyncGenerator(this, arguments, function* listByFactoryPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.listByFactoryPagingPage(resourceGroupName, factoryName, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists integration runtimes.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param options The options parameters.
     */
    _listByFactory(resourceGroupName, factoryName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, options }, listByFactoryOperationSpec);
    }
    /**
     * Creates or updates an integration runtime.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param integrationRuntime Integration runtime resource definition.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, factoryName, integrationRuntimeName, integrationRuntime, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            factoryName,
            integrationRuntimeName,
            integrationRuntime,
            options
        }, createOrUpdateOperationSpec);
    }
    /**
     * Gets an integration runtime.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param options The options parameters.
     */
    get(resourceGroupName, factoryName, integrationRuntimeName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, integrationRuntimeName, options }, getOperationSpec);
    }
    /**
     * Updates an integration runtime.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param updateIntegrationRuntimeRequest The parameters for updating an integration runtime.
     * @param options The options parameters.
     */
    update(resourceGroupName, factoryName, integrationRuntimeName, updateIntegrationRuntimeRequest, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            factoryName,
            integrationRuntimeName,
            updateIntegrationRuntimeRequest,
            options
        }, updateOperationSpec);
    }
    /**
     * Deletes an integration runtime.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param options The options parameters.
     */
    delete(resourceGroupName, factoryName, integrationRuntimeName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, integrationRuntimeName, options }, deleteOperationSpec);
    }
    /**
     * Gets detailed status information for an integration runtime.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param options The options parameters.
     */
    getStatus(resourceGroupName, factoryName, integrationRuntimeName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, integrationRuntimeName, options }, getStatusOperationSpec);
    }
    /**
     * Gets the list of outbound network dependencies for a given Azure-SSIS integration runtime.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param options The options parameters.
     */
    listOutboundNetworkDependenciesEndpoints(resourceGroupName, factoryName, integrationRuntimeName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, integrationRuntimeName, options }, listOutboundNetworkDependenciesEndpointsOperationSpec);
    }
    /**
     * Gets the on-premises integration runtime connection information for encrypting the on-premises data
     * source credentials.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param options The options parameters.
     */
    getConnectionInfo(resourceGroupName, factoryName, integrationRuntimeName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, integrationRuntimeName, options }, getConnectionInfoOperationSpec);
    }
    /**
     * Regenerates the authentication key for an integration runtime.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param regenerateKeyParameters The parameters for regenerating integration runtime authentication
     *                                key.
     * @param options The options parameters.
     */
    regenerateAuthKey(resourceGroupName, factoryName, integrationRuntimeName, regenerateKeyParameters, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            factoryName,
            integrationRuntimeName,
            regenerateKeyParameters,
            options
        }, regenerateAuthKeyOperationSpec);
    }
    /**
     * Retrieves the authentication keys for an integration runtime.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param options The options parameters.
     */
    listAuthKeys(resourceGroupName, factoryName, integrationRuntimeName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, integrationRuntimeName, options }, listAuthKeysOperationSpec);
    }
    /**
     * Starts a ManagedReserved type integration runtime.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param options The options parameters.
     */
    beginStart(resourceGroupName, factoryName, integrationRuntimeName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, factoryName, integrationRuntimeName, options },
                spec: startOperationSpec
            });
            const poller = yield createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Starts a ManagedReserved type integration runtime.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param options The options parameters.
     */
    beginStartAndWait(resourceGroupName, factoryName, integrationRuntimeName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginStart(resourceGroupName, factoryName, integrationRuntimeName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Stops a ManagedReserved type integration runtime.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param options The options parameters.
     */
    beginStop(resourceGroupName, factoryName, integrationRuntimeName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, factoryName, integrationRuntimeName, options },
                spec: stopOperationSpec
            });
            const poller = yield createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Stops a ManagedReserved type integration runtime.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param options The options parameters.
     */
    beginStopAndWait(resourceGroupName, factoryName, integrationRuntimeName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginStop(resourceGroupName, factoryName, integrationRuntimeName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Force the integration runtime to synchronize credentials across integration runtime nodes, and this
     * will override the credentials across all worker nodes with those available on the dispatcher node.
     * If you already have the latest credential backup file, you should manually import it (preferred) on
     * any self-hosted integration runtime node than using this API directly.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param options The options parameters.
     */
    syncCredentials(resourceGroupName, factoryName, integrationRuntimeName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, integrationRuntimeName, options }, syncCredentialsOperationSpec);
    }
    /**
     * Get the integration runtime monitoring data, which includes the monitor data for all the nodes under
     * this integration runtime.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param options The options parameters.
     */
    getMonitoringData(resourceGroupName, factoryName, integrationRuntimeName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, integrationRuntimeName, options }, getMonitoringDataOperationSpec);
    }
    /**
     * Upgrade self-hosted integration runtime to latest version if availability.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param options The options parameters.
     */
    upgrade(resourceGroupName, factoryName, integrationRuntimeName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, integrationRuntimeName, options }, upgradeOperationSpec);
    }
    /**
     * Remove all linked integration runtimes under specific data factory in a self-hosted integration
     * runtime.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param linkedIntegrationRuntimeRequest The data factory name for the linked integration runtime.
     * @param options The options parameters.
     */
    removeLinks(resourceGroupName, factoryName, integrationRuntimeName, linkedIntegrationRuntimeRequest, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            factoryName,
            integrationRuntimeName,
            linkedIntegrationRuntimeRequest,
            options
        }, removeLinksOperationSpec);
    }
    /**
     * Create a linked integration runtime entry in a shared integration runtime.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param integrationRuntimeName The integration runtime name.
     * @param createLinkedIntegrationRuntimeRequest The linked integration runtime properties.
     * @param options The options parameters.
     */
    createLinkedIntegrationRuntime(resourceGroupName, factoryName, integrationRuntimeName, createLinkedIntegrationRuntimeRequest, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            factoryName,
            integrationRuntimeName,
            createLinkedIntegrationRuntimeRequest,
            options
        }, createLinkedIntegrationRuntimeOperationSpec);
    }
    /**
     * ListByFactoryNext
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param nextLink The nextLink from the previous successful call to the ListByFactory method.
     * @param options The options parameters.
     */
    _listByFactoryNext(resourceGroupName, factoryName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, factoryName, nextLink, options }, listByFactoryNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listByFactoryOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.IntegrationRuntimeListResponse
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.IntegrationRuntimeResource
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    requestBody: Parameters.integrationRuntime,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName,
        Parameters.integrationRuntimeName
    ],
    headerParameters: [
        Parameters.accept,
        Parameters.contentType,
        Parameters.ifMatch
    ],
    mediaType: "json",
    serializer
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.IntegrationRuntimeResource
        },
        304: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName,
        Parameters.integrationRuntimeName
    ],
    headerParameters: [Parameters.accept, Parameters.ifNoneMatch],
    serializer
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Mappers.IntegrationRuntimeResource
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    requestBody: Parameters.updateIntegrationRuntimeRequest,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName,
        Parameters.integrationRuntimeName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName,
        Parameters.integrationRuntimeName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getStatusOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/getStatus",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.IntegrationRuntimeStatusResponse
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName,
        Parameters.integrationRuntimeName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listOutboundNetworkDependenciesEndpointsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/outboundNetworkDependenciesEndpoints",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.IntegrationRuntimeOutboundNetworkDependenciesEndpointsResponse
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName,
        Parameters.integrationRuntimeName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getConnectionInfoOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/getConnectionInfo",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.IntegrationRuntimeConnectionInfo
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName,
        Parameters.integrationRuntimeName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const regenerateAuthKeyOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/regenerateAuthKey",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.IntegrationRuntimeAuthKeys
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    requestBody: Parameters.regenerateKeyParameters,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName,
        Parameters.integrationRuntimeName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const listAuthKeysOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/listAuthKeys",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.IntegrationRuntimeAuthKeys
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName,
        Parameters.integrationRuntimeName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const startOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/start",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.IntegrationRuntimeStatusResponse
        },
        201: {
            bodyMapper: Mappers.IntegrationRuntimeStatusResponse
        },
        202: {
            bodyMapper: Mappers.IntegrationRuntimeStatusResponse
        },
        204: {
            bodyMapper: Mappers.IntegrationRuntimeStatusResponse
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName,
        Parameters.integrationRuntimeName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const stopOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/stop",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName,
        Parameters.integrationRuntimeName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const syncCredentialsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/syncCredentials",
    httpMethod: "POST",
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName,
        Parameters.integrationRuntimeName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getMonitoringDataOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/monitoringData",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.IntegrationRuntimeMonitoringData
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName,
        Parameters.integrationRuntimeName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const upgradeOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/upgrade",
    httpMethod: "POST",
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName,
        Parameters.integrationRuntimeName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const removeLinksOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/removeLinks",
    httpMethod: "POST",
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    requestBody: Parameters.linkedIntegrationRuntimeRequest,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName,
        Parameters.integrationRuntimeName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const createLinkedIntegrationRuntimeOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/linkedIntegrationRuntime",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.IntegrationRuntimeStatusResponse
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    requestBody: Parameters.createLinkedIntegrationRuntimeRequest,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName,
        Parameters.integrationRuntimeName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const listByFactoryNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.IntegrationRuntimeListResponse
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.nextLink,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.factoryName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=integrationRuntimes.js.map