import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { CredentialOperations } from "../operationsInterfaces";
import { DataFactoryManagementClient } from "../dataFactoryManagementClient";
import { ManagedIdentityCredentialResource, CredentialOperationsListByFactoryOptionalParams, CredentialOperationsCreateOrUpdateOptionalParams, CredentialOperationsCreateOrUpdateResponse, CredentialOperationsGetOptionalParams, CredentialOperationsGetResponse, CredentialOperationsDeleteOptionalParams } from "../models";
/** Class containing CredentialOperations operations. */
export declare class CredentialOperationsImpl implements CredentialOperations {
    private readonly client;
    /**
     * Initialize a new instance of the class CredentialOperations class.
     * @param client Reference to the service client
     */
    constructor(client: DataFactoryManagementClient);
    /**
     * List credentials.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param options The options parameters.
     */
    listByFactory(resourceGroupName: string, factoryName: string, options?: CredentialOperationsListByFactoryOptionalParams): PagedAsyncIterableIterator<ManagedIdentityCredentialResource>;
    private listByFactoryPagingPage;
    private listByFactoryPagingAll;
    /**
     * List credentials.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param options The options parameters.
     */
    private _listByFactory;
    /**
     * Creates or updates a credential.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param credentialName Credential name
     * @param credential Credential resource definition.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, factoryName: string, credentialName: string, credential: ManagedIdentityCredentialResource, options?: CredentialOperationsCreateOrUpdateOptionalParams): Promise<CredentialOperationsCreateOrUpdateResponse>;
    /**
     * Gets a credential.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param credentialName Credential name
     * @param options The options parameters.
     */
    get(resourceGroupName: string, factoryName: string, credentialName: string, options?: CredentialOperationsGetOptionalParams): Promise<CredentialOperationsGetResponse>;
    /**
     * Deletes a credential.
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param credentialName Credential name
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, factoryName: string, credentialName: string, options?: CredentialOperationsDeleteOptionalParams): Promise<void>;
    /**
     * ListByFactoryNext
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param nextLink The nextLink from the previous successful call to the ListByFactory method.
     * @param options The options parameters.
     */
    private _listByFactoryNext;
}
//# sourceMappingURL=credentialOperations.d.ts.map