/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
export const OperationListResponse = {
    type: {
        name: "Composite",
        className: "OperationListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Operation"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const Operation = {
    type: {
        name: "Composite",
        className: "Operation",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            origin: {
                serializedName: "origin",
                type: {
                    name: "String"
                }
            },
            display: {
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "OperationDisplay"
                }
            },
            serviceSpecification: {
                serializedName: "properties.serviceSpecification",
                type: {
                    name: "Composite",
                    className: "OperationServiceSpecification"
                }
            }
        }
    }
};
export const OperationDisplay = {
    type: {
        name: "Composite",
        className: "OperationDisplay",
        modelProperties: {
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            provider: {
                serializedName: "provider",
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "resource",
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const OperationServiceSpecification = {
    type: {
        name: "Composite",
        className: "OperationServiceSpecification",
        modelProperties: {
            logSpecifications: {
                serializedName: "logSpecifications",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "OperationLogSpecification"
                        }
                    }
                }
            },
            metricSpecifications: {
                serializedName: "metricSpecifications",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "OperationMetricSpecification"
                        }
                    }
                }
            }
        }
    }
};
export const OperationLogSpecification = {
    type: {
        name: "Composite",
        className: "OperationLogSpecification",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            },
            blobDuration: {
                serializedName: "blobDuration",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const OperationMetricSpecification = {
    type: {
        name: "Composite",
        className: "OperationMetricSpecification",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            },
            displayDescription: {
                serializedName: "displayDescription",
                type: {
                    name: "String"
                }
            },
            unit: {
                serializedName: "unit",
                type: {
                    name: "String"
                }
            },
            aggregationType: {
                serializedName: "aggregationType",
                type: {
                    name: "String"
                }
            },
            enableRegionalMdmAccount: {
                serializedName: "enableRegionalMdmAccount",
                type: {
                    name: "String"
                }
            },
            sourceMdmAccount: {
                serializedName: "sourceMdmAccount",
                type: {
                    name: "String"
                }
            },
            sourceMdmNamespace: {
                serializedName: "sourceMdmNamespace",
                type: {
                    name: "String"
                }
            },
            availabilities: {
                serializedName: "availabilities",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "OperationMetricAvailability"
                        }
                    }
                }
            },
            dimensions: {
                serializedName: "dimensions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "OperationMetricDimension"
                        }
                    }
                }
            }
        }
    }
};
export const OperationMetricAvailability = {
    type: {
        name: "Composite",
        className: "OperationMetricAvailability",
        modelProperties: {
            timeGrain: {
                serializedName: "timeGrain",
                type: {
                    name: "String"
                }
            },
            blobDuration: {
                serializedName: "blobDuration",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const OperationMetricDimension = {
    type: {
        name: "Composite",
        className: "OperationMetricDimension",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            },
            toBeExportedForShoebox: {
                serializedName: "toBeExportedForShoebox",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
export const CloudError = {
    type: {
        name: "Composite",
        className: "CloudError",
        modelProperties: {
            code: {
                serializedName: "error.code",
                required: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "error.message",
                required: true,
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "error.target",
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "error.details",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CloudError"
                        }
                    }
                }
            }
        }
    }
};
export const FactoryListResponse = {
    type: {
        name: "Composite",
        className: "FactoryListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Factory"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const FactoryIdentity = {
    type: {
        name: "Composite",
        className: "FactoryIdentity",
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            principalId: {
                serializedName: "principalId",
                readOnly: true,
                type: {
                    name: "Uuid"
                }
            },
            tenantId: {
                serializedName: "tenantId",
                readOnly: true,
                type: {
                    name: "Uuid"
                }
            },
            userAssignedIdentities: {
                serializedName: "userAssignedIdentities",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
export const PurviewConfiguration = {
    type: {
        name: "Composite",
        className: "PurviewConfiguration",
        modelProperties: {
            purviewResourceId: {
                serializedName: "purviewResourceId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const FactoryRepoConfiguration = {
    type: {
        name: "Composite",
        className: "FactoryRepoConfiguration",
        uberParent: "FactoryRepoConfiguration",
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            accountName: {
                serializedName: "accountName",
                required: true,
                type: {
                    name: "String"
                }
            },
            repositoryName: {
                serializedName: "repositoryName",
                required: true,
                type: {
                    name: "String"
                }
            },
            collaborationBranch: {
                serializedName: "collaborationBranch",
                required: true,
                type: {
                    name: "String"
                }
            },
            rootFolder: {
                serializedName: "rootFolder",
                required: true,
                type: {
                    name: "String"
                }
            },
            lastCommitId: {
                serializedName: "lastCommitId",
                type: {
                    name: "String"
                }
            },
            disablePublish: {
                serializedName: "disablePublish",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
export const GlobalParameterSpecification = {
    type: {
        name: "Composite",
        className: "GlobalParameterSpecification",
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "any"
                }
            }
        }
    }
};
export const EncryptionConfiguration = {
    type: {
        name: "Composite",
        className: "EncryptionConfiguration",
        modelProperties: {
            keyName: {
                serializedName: "keyName",
                required: true,
                type: {
                    name: "String"
                }
            },
            vaultBaseUrl: {
                serializedName: "vaultBaseUrl",
                required: true,
                type: {
                    name: "String"
                }
            },
            keyVersion: {
                serializedName: "keyVersion",
                type: {
                    name: "String"
                }
            },
            identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "CMKIdentityDefinition"
                }
            }
        }
    }
};
export const CMKIdentityDefinition = {
    type: {
        name: "Composite",
        className: "CMKIdentityDefinition",
        modelProperties: {
            userAssignedIdentity: {
                serializedName: "userAssignedIdentity",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const Resource = {
    type: {
        name: "Composite",
        className: "Resource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            eTag: {
                serializedName: "eTag",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const FactoryRepoUpdate = {
    type: {
        name: "Composite",
        className: "FactoryRepoUpdate",
        modelProperties: {
            factoryResourceId: {
                serializedName: "factoryResourceId",
                type: {
                    name: "String"
                }
            },
            repoConfiguration: {
                serializedName: "repoConfiguration",
                type: {
                    name: "Composite",
                    className: "FactoryRepoConfiguration"
                }
            }
        }
    }
};
export const ExposureControlRequest = {
    type: {
        name: "Composite",
        className: "ExposureControlRequest",
        modelProperties: {
            featureName: {
                serializedName: "featureName",
                type: {
                    name: "String"
                }
            },
            featureType: {
                serializedName: "featureType",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ExposureControlResponse = {
    type: {
        name: "Composite",
        className: "ExposureControlResponse",
        modelProperties: {
            featureName: {
                serializedName: "featureName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ExposureControlBatchRequest = {
    type: {
        name: "Composite",
        className: "ExposureControlBatchRequest",
        modelProperties: {
            exposureControlRequests: {
                serializedName: "exposureControlRequests",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ExposureControlRequest"
                        }
                    }
                }
            }
        }
    }
};
export const ExposureControlBatchResponse = {
    type: {
        name: "Composite",
        className: "ExposureControlBatchResponse",
        modelProperties: {
            exposureControlResponses: {
                serializedName: "exposureControlResponses",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ExposureControlResponse"
                        }
                    }
                }
            }
        }
    }
};
export const FactoryUpdateParameters = {
    type: {
        name: "Composite",
        className: "FactoryUpdateParameters",
        modelProperties: {
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "FactoryIdentity"
                }
            },
            publicNetworkAccess: {
                serializedName: "properties.publicNetworkAccess",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const GitHubAccessTokenRequest = {
    type: {
        name: "Composite",
        className: "GitHubAccessTokenRequest",
        modelProperties: {
            gitHubAccessCode: {
                serializedName: "gitHubAccessCode",
                required: true,
                type: {
                    name: "String"
                }
            },
            gitHubClientId: {
                serializedName: "gitHubClientId",
                type: {
                    name: "String"
                }
            },
            gitHubClientSecret: {
                serializedName: "gitHubClientSecret",
                type: {
                    name: "Composite",
                    className: "GitHubClientSecret"
                }
            },
            gitHubAccessTokenBaseUrl: {
                serializedName: "gitHubAccessTokenBaseUrl",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const GitHubClientSecret = {
    type: {
        name: "Composite",
        className: "GitHubClientSecret",
        modelProperties: {
            byoaSecretAkvUrl: {
                serializedName: "byoaSecretAkvUrl",
                type: {
                    name: "String"
                }
            },
            byoaSecretName: {
                serializedName: "byoaSecretName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const GitHubAccessTokenResponse = {
    type: {
        name: "Composite",
        className: "GitHubAccessTokenResponse",
        modelProperties: {
            gitHubAccessToken: {
                serializedName: "gitHubAccessToken",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const UserAccessPolicy = {
    type: {
        name: "Composite",
        className: "UserAccessPolicy",
        modelProperties: {
            permissions: {
                serializedName: "permissions",
                type: {
                    name: "String"
                }
            },
            accessResourcePath: {
                serializedName: "accessResourcePath",
                type: {
                    name: "String"
                }
            },
            profileName: {
                serializedName: "profileName",
                type: {
                    name: "String"
                }
            },
            startTime: {
                serializedName: "startTime",
                type: {
                    name: "String"
                }
            },
            expireTime: {
                serializedName: "expireTime",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const AccessPolicyResponse = {
    type: {
        name: "Composite",
        className: "AccessPolicyResponse",
        modelProperties: {
            policy: {
                serializedName: "policy",
                type: {
                    name: "Composite",
                    className: "UserAccessPolicy"
                }
            },
            accessToken: {
                serializedName: "accessToken",
                type: {
                    name: "String"
                }
            },
            dataPlaneUrl: {
                serializedName: "dataPlaneUrl",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const IntegrationRuntimeListResponse = {
    type: {
        name: "Composite",
        className: "IntegrationRuntimeListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "IntegrationRuntimeResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const IntegrationRuntime = {
    serializedName: "IntegrationRuntime",
    type: {
        name: "Composite",
        className: "IntegrationRuntime",
        uberParent: "IntegrationRuntime",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const SubResource = {
    type: {
        name: "Composite",
        className: "SubResource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            etag: {
                serializedName: "etag",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const UpdateIntegrationRuntimeRequest = {
    type: {
        name: "Composite",
        className: "UpdateIntegrationRuntimeRequest",
        modelProperties: {
            autoUpdate: {
                serializedName: "autoUpdate",
                type: {
                    name: "String"
                }
            },
            updateDelayOffset: {
                serializedName: "updateDelayOffset",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const IntegrationRuntimeStatusResponse = {
    type: {
        name: "Composite",
        className: "IntegrationRuntimeStatusResponse",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "IntegrationRuntimeStatus"
                }
            }
        }
    }
};
export const IntegrationRuntimeStatus = {
    serializedName: "IntegrationRuntimeStatus",
    type: {
        name: "Composite",
        className: "IntegrationRuntimeStatus",
        uberParent: "IntegrationRuntimeStatus",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            dataFactoryName: {
                serializedName: "dataFactoryName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            state: {
                serializedName: "state",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const IntegrationRuntimeOutboundNetworkDependenciesEndpointsResponse = {
    type: {
        name: "Composite",
        className: "IntegrationRuntimeOutboundNetworkDependenciesEndpointsResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "IntegrationRuntimeOutboundNetworkDependenciesCategoryEndpoint"
                        }
                    }
                }
            }
        }
    }
};
export const IntegrationRuntimeOutboundNetworkDependenciesCategoryEndpoint = {
    type: {
        name: "Composite",
        className: "IntegrationRuntimeOutboundNetworkDependenciesCategoryEndpoint",
        modelProperties: {
            category: {
                serializedName: "category",
                type: {
                    name: "String"
                }
            },
            endpoints: {
                serializedName: "endpoints",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "IntegrationRuntimeOutboundNetworkDependenciesEndpoint"
                        }
                    }
                }
            }
        }
    }
};
export const IntegrationRuntimeOutboundNetworkDependenciesEndpoint = {
    type: {
        name: "Composite",
        className: "IntegrationRuntimeOutboundNetworkDependenciesEndpoint",
        modelProperties: {
            domainName: {
                serializedName: "domainName",
                type: {
                    name: "String"
                }
            },
            endpointDetails: {
                serializedName: "endpointDetails",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "IntegrationRuntimeOutboundNetworkDependenciesEndpointDetails"
                        }
                    }
                }
            }
        }
    }
};
export const IntegrationRuntimeOutboundNetworkDependenciesEndpointDetails = {
    type: {
        name: "Composite",
        className: "IntegrationRuntimeOutboundNetworkDependenciesEndpointDetails",
        modelProperties: {
            port: {
                serializedName: "port",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export const IntegrationRuntimeConnectionInfo = {
    type: {
        name: "Composite",
        className: "IntegrationRuntimeConnectionInfo",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            serviceToken: {
                serializedName: "serviceToken",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            identityCertThumbprint: {
                serializedName: "identityCertThumbprint",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            hostServiceUri: {
                serializedName: "hostServiceUri",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "version",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            publicKey: {
                serializedName: "publicKey",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            isIdentityCertExprired: {
                serializedName: "isIdentityCertExprired",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
export const IntegrationRuntimeRegenerateKeyParameters = {
    type: {
        name: "Composite",
        className: "IntegrationRuntimeRegenerateKeyParameters",
        modelProperties: {
            keyName: {
                serializedName: "keyName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const IntegrationRuntimeAuthKeys = {
    type: {
        name: "Composite",
        className: "IntegrationRuntimeAuthKeys",
        modelProperties: {
            authKey1: {
                serializedName: "authKey1",
                type: {
                    name: "String"
                }
            },
            authKey2: {
                serializedName: "authKey2",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const IntegrationRuntimeMonitoringData = {
    type: {
        name: "Composite",
        className: "IntegrationRuntimeMonitoringData",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            nodes: {
                serializedName: "nodes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "IntegrationRuntimeNodeMonitoringData"
                        }
                    }
                }
            }
        }
    }
};
export const IntegrationRuntimeNodeMonitoringData = {
    type: {
        name: "Composite",
        className: "IntegrationRuntimeNodeMonitoringData",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            nodeName: {
                serializedName: "nodeName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            availableMemoryInMB: {
                serializedName: "availableMemoryInMB",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            cpuUtilization: {
                serializedName: "cpuUtilization",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            concurrentJobsLimit: {
                serializedName: "concurrentJobsLimit",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            concurrentJobsRunning: {
                serializedName: "concurrentJobsRunning",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            maxConcurrentJobs: {
                serializedName: "maxConcurrentJobs",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            sentBytes: {
                serializedName: "sentBytes",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            receivedBytes: {
                serializedName: "receivedBytes",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export const LinkedIntegrationRuntimeRequest = {
    type: {
        name: "Composite",
        className: "LinkedIntegrationRuntimeRequest",
        modelProperties: {
            linkedFactoryName: {
                serializedName: "factoryName",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const CreateLinkedIntegrationRuntimeRequest = {
    type: {
        name: "Composite",
        className: "CreateLinkedIntegrationRuntimeRequest",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            subscriptionId: {
                serializedName: "subscriptionId",
                type: {
                    name: "String"
                }
            },
            dataFactoryName: {
                serializedName: "dataFactoryName",
                type: {
                    name: "String"
                }
            },
            dataFactoryLocation: {
                serializedName: "dataFactoryLocation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const SsisObjectMetadataStatusResponse = {
    type: {
        name: "Composite",
        className: "SsisObjectMetadataStatusResponse",
        modelProperties: {
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "String"
                }
            },
            error: {
                serializedName: "error",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const GetSsisObjectMetadataRequest = {
    type: {
        name: "Composite",
        className: "GetSsisObjectMetadataRequest",
        modelProperties: {
            metadataPath: {
                serializedName: "metadataPath",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const SsisObjectMetadataListResponse = {
    type: {
        name: "Composite",
        className: "SsisObjectMetadataListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SsisObjectMetadata"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const SsisObjectMetadata = {
    type: {
        name: "Composite",
        className: "SsisObjectMetadata",
        uberParent: "SsisObjectMetadata",
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            id: {
                serializedName: "id",
                type: {
                    name: "Number"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const SelfHostedIntegrationRuntimeNode = {
    type: {
        name: "Composite",
        className: "SelfHostedIntegrationRuntimeNode",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            nodeName: {
                serializedName: "nodeName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            machineName: {
                serializedName: "machineName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            hostServiceUri: {
                serializedName: "hostServiceUri",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            capabilities: {
                serializedName: "capabilities",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            versionStatus: {
                serializedName: "versionStatus",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "version",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            registerTime: {
                serializedName: "registerTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            lastConnectTime: {
                serializedName: "lastConnectTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            expiryTime: {
                serializedName: "expiryTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            lastStartTime: {
                serializedName: "lastStartTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            lastStopTime: {
                serializedName: "lastStopTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            lastUpdateResult: {
                serializedName: "lastUpdateResult",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            lastStartUpdateTime: {
                serializedName: "lastStartUpdateTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            lastEndUpdateTime: {
                serializedName: "lastEndUpdateTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            isActiveDispatcher: {
                serializedName: "isActiveDispatcher",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            concurrentJobsLimit: {
                serializedName: "concurrentJobsLimit",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            maxConcurrentJobs: {
                serializedName: "maxConcurrentJobs",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export const UpdateIntegrationRuntimeNodeRequest = {
    type: {
        name: "Composite",
        className: "UpdateIntegrationRuntimeNodeRequest",
        modelProperties: {
            concurrentJobsLimit: {
                constraints: {
                    InclusiveMinimum: 1
                },
                serializedName: "concurrentJobsLimit",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export const IntegrationRuntimeNodeIpAddress = {
    type: {
        name: "Composite",
        className: "IntegrationRuntimeNodeIpAddress",
        modelProperties: {
            ipAddress: {
                serializedName: "ipAddress",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const LinkedServiceListResponse = {
    type: {
        name: "Composite",
        className: "LinkedServiceListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LinkedServiceResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const LinkedService = {
    serializedName: "LinkedService",
    type: {
        name: "Composite",
        className: "LinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            connectVia: {
                serializedName: "connectVia",
                type: {
                    name: "Composite",
                    className: "IntegrationRuntimeReference"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            parameters: {
                serializedName: "parameters",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Composite", className: "ParameterSpecification" }
                    }
                }
            },
            annotations: {
                serializedName: "annotations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any"
                        }
                    }
                }
            }
        }
    }
};
export const IntegrationRuntimeReference = {
    type: {
        name: "Composite",
        className: "IntegrationRuntimeReference",
        modelProperties: {
            type: {
                defaultValue: "IntegrationRuntimeReference",
                isConstant: true,
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            referenceName: {
                serializedName: "referenceName",
                required: true,
                type: {
                    name: "String"
                }
            },
            parameters: {
                serializedName: "parameters",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
export const ParameterSpecification = {
    type: {
        name: "Composite",
        className: "ParameterSpecification",
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            defaultValue: {
                serializedName: "defaultValue",
                type: {
                    name: "any"
                }
            }
        }
    }
};
export const DatasetListResponse = {
    type: {
        name: "Composite",
        className: "DatasetListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DatasetResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const Dataset = {
    serializedName: "Dataset",
    type: {
        name: "Composite",
        className: "Dataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            structure: {
                serializedName: "structure",
                type: {
                    name: "any"
                }
            },
            schema: {
                serializedName: "schema",
                type: {
                    name: "any"
                }
            },
            linkedServiceName: {
                serializedName: "linkedServiceName",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            },
            parameters: {
                serializedName: "parameters",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Composite", className: "ParameterSpecification" }
                    }
                }
            },
            annotations: {
                serializedName: "annotations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any"
                        }
                    }
                }
            },
            folder: {
                serializedName: "folder",
                type: {
                    name: "Composite",
                    className: "DatasetFolder"
                }
            }
        }
    }
};
export const LinkedServiceReference = {
    type: {
        name: "Composite",
        className: "LinkedServiceReference",
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            referenceName: {
                serializedName: "referenceName",
                required: true,
                type: {
                    name: "String"
                }
            },
            parameters: {
                serializedName: "parameters",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
export const DatasetFolder = {
    type: {
        name: "Composite",
        className: "DatasetFolder",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const PipelineListResponse = {
    type: {
        name: "Composite",
        className: "PipelineListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PipelineResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const Activity = {
    serializedName: "Activity",
    type: {
        name: "Composite",
        className: "Activity",
        uberParent: "Activity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            state: {
                serializedName: "state",
                type: {
                    name: "String"
                }
            },
            onInactiveMarkAs: {
                serializedName: "onInactiveMarkAs",
                type: {
                    name: "String"
                }
            },
            dependsOn: {
                serializedName: "dependsOn",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ActivityDependency"
                        }
                    }
                }
            },
            userProperties: {
                serializedName: "userProperties",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "UserProperty"
                        }
                    }
                }
            }
        }
    }
};
export const ActivityDependency = {
    type: {
        name: "Composite",
        className: "ActivityDependency",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            activity: {
                serializedName: "activity",
                required: true,
                type: {
                    name: "String"
                }
            },
            dependencyConditions: {
                serializedName: "dependencyConditions",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
export const UserProperty = {
    type: {
        name: "Composite",
        className: "UserProperty",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "any"
                }
            }
        }
    }
};
export const VariableSpecification = {
    type: {
        name: "Composite",
        className: "VariableSpecification",
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            defaultValue: {
                serializedName: "defaultValue",
                type: {
                    name: "any"
                }
            }
        }
    }
};
export const PipelineFolder = {
    type: {
        name: "Composite",
        className: "PipelineFolder",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const PipelinePolicy = {
    type: {
        name: "Composite",
        className: "PipelinePolicy",
        modelProperties: {
            elapsedTimeMetric: {
                serializedName: "elapsedTimeMetric",
                type: {
                    name: "Composite",
                    className: "PipelineElapsedTimeMetricPolicy"
                }
            }
        }
    }
};
export const PipelineElapsedTimeMetricPolicy = {
    type: {
        name: "Composite",
        className: "PipelineElapsedTimeMetricPolicy",
        modelProperties: {
            duration: {
                serializedName: "duration",
                type: {
                    name: "any"
                }
            }
        }
    }
};
export const CreateRunResponse = {
    type: {
        name: "Composite",
        className: "CreateRunResponse",
        modelProperties: {
            runId: {
                serializedName: "runId",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const RunFilterParameters = {
    type: {
        name: "Composite",
        className: "RunFilterParameters",
        modelProperties: {
            continuationToken: {
                serializedName: "continuationToken",
                type: {
                    name: "String"
                }
            },
            lastUpdatedAfter: {
                serializedName: "lastUpdatedAfter",
                required: true,
                type: {
                    name: "DateTime"
                }
            },
            lastUpdatedBefore: {
                serializedName: "lastUpdatedBefore",
                required: true,
                type: {
                    name: "DateTime"
                }
            },
            filters: {
                serializedName: "filters",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RunQueryFilter"
                        }
                    }
                }
            },
            orderBy: {
                serializedName: "orderBy",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RunQueryOrderBy"
                        }
                    }
                }
            }
        }
    }
};
export const RunQueryFilter = {
    type: {
        name: "Composite",
        className: "RunQueryFilter",
        modelProperties: {
            operand: {
                serializedName: "operand",
                required: true,
                type: {
                    name: "String"
                }
            },
            operator: {
                serializedName: "operator",
                required: true,
                type: {
                    name: "String"
                }
            },
            values: {
                serializedName: "values",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
export const RunQueryOrderBy = {
    type: {
        name: "Composite",
        className: "RunQueryOrderBy",
        modelProperties: {
            orderBy: {
                serializedName: "orderBy",
                required: true,
                type: {
                    name: "String"
                }
            },
            order: {
                serializedName: "order",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const PipelineRunsQueryResponse = {
    type: {
        name: "Composite",
        className: "PipelineRunsQueryResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PipelineRun"
                        }
                    }
                }
            },
            continuationToken: {
                serializedName: "continuationToken",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const PipelineRun = {
    type: {
        name: "Composite",
        className: "PipelineRun",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            runId: {
                serializedName: "runId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            runGroupId: {
                serializedName: "runGroupId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            isLatest: {
                serializedName: "isLatest",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            pipelineName: {
                serializedName: "pipelineName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            parameters: {
                serializedName: "parameters",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            runDimensions: {
                serializedName: "runDimensions",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            invokedBy: {
                serializedName: "invokedBy",
                type: {
                    name: "Composite",
                    className: "PipelineRunInvokedBy"
                }
            },
            lastUpdated: {
                serializedName: "lastUpdated",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            runStart: {
                serializedName: "runStart",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            runEnd: {
                serializedName: "runEnd",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            durationInMs: {
                serializedName: "durationInMs",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const PipelineRunInvokedBy = {
    type: {
        name: "Composite",
        className: "PipelineRunInvokedBy",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            invokedByType: {
                serializedName: "invokedByType",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            pipelineName: {
                serializedName: "pipelineName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            pipelineRunId: {
                serializedName: "pipelineRunId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ActivityRunsQueryResponse = {
    type: {
        name: "Composite",
        className: "ActivityRunsQueryResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ActivityRun"
                        }
                    }
                }
            },
            continuationToken: {
                serializedName: "continuationToken",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ActivityRun = {
    type: {
        name: "Composite",
        className: "ActivityRun",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            pipelineName: {
                serializedName: "pipelineName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            pipelineRunId: {
                serializedName: "pipelineRunId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            activityName: {
                serializedName: "activityName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            activityType: {
                serializedName: "activityType",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            activityRunId: {
                serializedName: "activityRunId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            linkedServiceName: {
                serializedName: "linkedServiceName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            activityRunStart: {
                serializedName: "activityRunStart",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            activityRunEnd: {
                serializedName: "activityRunEnd",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            durationInMs: {
                serializedName: "durationInMs",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            input: {
                serializedName: "input",
                readOnly: true,
                type: {
                    name: "any"
                }
            },
            output: {
                serializedName: "output",
                readOnly: true,
                type: {
                    name: "any"
                }
            },
            error: {
                serializedName: "error",
                readOnly: true,
                type: {
                    name: "any"
                }
            }
        }
    }
};
export const TriggerListResponse = {
    type: {
        name: "Composite",
        className: "TriggerListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TriggerResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const Trigger = {
    serializedName: "Trigger",
    type: {
        name: "Composite",
        className: "Trigger",
        uberParent: "Trigger",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            runtimeState: {
                serializedName: "runtimeState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            annotations: {
                serializedName: "annotations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any"
                        }
                    }
                }
            }
        }
    }
};
export const TriggerFilterParameters = {
    type: {
        name: "Composite",
        className: "TriggerFilterParameters",
        modelProperties: {
            continuationToken: {
                serializedName: "continuationToken",
                type: {
                    name: "String"
                }
            },
            parentTriggerName: {
                serializedName: "parentTriggerName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const TriggerQueryResponse = {
    type: {
        name: "Composite",
        className: "TriggerQueryResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TriggerResource"
                        }
                    }
                }
            },
            continuationToken: {
                serializedName: "continuationToken",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const TriggerSubscriptionOperationStatus = {
    type: {
        name: "Composite",
        className: "TriggerSubscriptionOperationStatus",
        modelProperties: {
            triggerName: {
                serializedName: "triggerName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const TriggerRunsQueryResponse = {
    type: {
        name: "Composite",
        className: "TriggerRunsQueryResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TriggerRun"
                        }
                    }
                }
            },
            continuationToken: {
                serializedName: "continuationToken",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const TriggerRun = {
    type: {
        name: "Composite",
        className: "TriggerRun",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            triggerRunId: {
                serializedName: "triggerRunId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            triggerName: {
                serializedName: "triggerName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            triggerType: {
                serializedName: "triggerType",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            triggerRunTimestamp: {
                serializedName: "triggerRunTimestamp",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            triggeredPipelines: {
                serializedName: "triggeredPipelines",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            runDimension: {
                serializedName: "runDimension",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            dependencyStatus: {
                serializedName: "dependencyStatus",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
export const DataFlow = {
    type: {
        name: "Composite",
        className: "DataFlow",
        uberParent: "DataFlow",
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            annotations: {
                serializedName: "annotations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any"
                        }
                    }
                }
            },
            folder: {
                serializedName: "folder",
                type: {
                    name: "Composite",
                    className: "DataFlowFolder"
                }
            }
        }
    }
};
export const DataFlowFolder = {
    type: {
        name: "Composite",
        className: "DataFlowFolder",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const DataFlowListResponse = {
    type: {
        name: "Composite",
        className: "DataFlowListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DataFlowResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const CreateDataFlowDebugSessionRequest = {
    type: {
        name: "Composite",
        className: "CreateDataFlowDebugSessionRequest",
        modelProperties: {
            computeType: {
                serializedName: "computeType",
                type: {
                    name: "String"
                }
            },
            coreCount: {
                serializedName: "coreCount",
                type: {
                    name: "Number"
                }
            },
            timeToLive: {
                serializedName: "timeToLive",
                type: {
                    name: "Number"
                }
            },
            integrationRuntime: {
                serializedName: "integrationRuntime",
                type: {
                    name: "Composite",
                    className: "IntegrationRuntimeDebugResource"
                }
            }
        }
    }
};
export const SubResourceDebugResource = {
    type: {
        name: "Composite",
        className: "SubResourceDebugResource",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const CreateDataFlowDebugSessionResponse = {
    type: {
        name: "Composite",
        className: "CreateDataFlowDebugSessionResponse",
        modelProperties: {
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            sessionId: {
                serializedName: "sessionId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const QueryDataFlowDebugSessionsResponse = {
    type: {
        name: "Composite",
        className: "QueryDataFlowDebugSessionsResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DataFlowDebugSessionInfo"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const DataFlowDebugSessionInfo = {
    type: {
        name: "Composite",
        className: "DataFlowDebugSessionInfo",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            dataFlowName: {
                serializedName: "dataFlowName",
                type: {
                    name: "String"
                }
            },
            computeType: {
                serializedName: "computeType",
                type: {
                    name: "String"
                }
            },
            coreCount: {
                serializedName: "coreCount",
                type: {
                    name: "Number"
                }
            },
            nodeCount: {
                serializedName: "nodeCount",
                type: {
                    name: "Number"
                }
            },
            integrationRuntimeName: {
                serializedName: "integrationRuntimeName",
                type: {
                    name: "String"
                }
            },
            sessionId: {
                serializedName: "sessionId",
                type: {
                    name: "String"
                }
            },
            startTime: {
                serializedName: "startTime",
                type: {
                    name: "String"
                }
            },
            timeToLiveInMinutes: {
                serializedName: "timeToLiveInMinutes",
                type: {
                    name: "Number"
                }
            },
            lastActivityTime: {
                serializedName: "lastActivityTime",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const DataFlowDebugPackage = {
    type: {
        name: "Composite",
        className: "DataFlowDebugPackage",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            sessionId: {
                serializedName: "sessionId",
                type: {
                    name: "String"
                }
            },
            dataFlow: {
                serializedName: "dataFlow",
                type: {
                    name: "Composite",
                    className: "DataFlowDebugResource"
                }
            },
            dataFlows: {
                serializedName: "dataFlows",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DataFlowDebugResource"
                        }
                    }
                }
            },
            datasets: {
                serializedName: "datasets",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DatasetDebugResource"
                        }
                    }
                }
            },
            linkedServices: {
                serializedName: "linkedServices",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LinkedServiceDebugResource"
                        }
                    }
                }
            },
            staging: {
                serializedName: "staging",
                type: {
                    name: "Composite",
                    className: "DataFlowStagingInfo"
                }
            },
            debugSettings: {
                serializedName: "debugSettings",
                type: {
                    name: "Composite",
                    className: "DataFlowDebugPackageDebugSettings"
                }
            }
        }
    }
};
export const DataFlowStagingInfo = {
    type: {
        name: "Composite",
        className: "DataFlowStagingInfo",
        modelProperties: {
            linkedService: {
                serializedName: "linkedService",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            },
            folderPath: {
                serializedName: "folderPath",
                type: {
                    name: "any"
                }
            }
        }
    }
};
export const DataFlowDebugPackageDebugSettings = {
    type: {
        name: "Composite",
        className: "DataFlowDebugPackageDebugSettings",
        modelProperties: {
            sourceSettings: {
                serializedName: "sourceSettings",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DataFlowSourceSetting"
                        }
                    }
                }
            },
            parameters: {
                serializedName: "parameters",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            },
            datasetParameters: {
                serializedName: "datasetParameters",
                type: {
                    name: "any"
                }
            }
        }
    }
};
export const DataFlowSourceSetting = {
    type: {
        name: "Composite",
        className: "DataFlowSourceSetting",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            sourceName: {
                serializedName: "sourceName",
                type: {
                    name: "String"
                }
            },
            rowLimit: {
                serializedName: "rowLimit",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export const AddDataFlowToDebugSessionResponse = {
    type: {
        name: "Composite",
        className: "AddDataFlowToDebugSessionResponse",
        modelProperties: {
            jobVersion: {
                serializedName: "jobVersion",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const DeleteDataFlowDebugSessionRequest = {
    type: {
        name: "Composite",
        className: "DeleteDataFlowDebugSessionRequest",
        modelProperties: {
            sessionId: {
                serializedName: "sessionId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const DataFlowDebugCommandRequest = {
    type: {
        name: "Composite",
        className: "DataFlowDebugCommandRequest",
        modelProperties: {
            sessionId: {
                serializedName: "sessionId",
                type: {
                    name: "String"
                }
            },
            command: {
                serializedName: "command",
                type: {
                    name: "String"
                }
            },
            commandPayload: {
                serializedName: "commandPayload",
                type: {
                    name: "Composite",
                    className: "DataFlowDebugCommandPayload"
                }
            }
        }
    }
};
export const DataFlowDebugCommandPayload = {
    type: {
        name: "Composite",
        className: "DataFlowDebugCommandPayload",
        modelProperties: {
            streamName: {
                serializedName: "streamName",
                required: true,
                type: {
                    name: "String"
                }
            },
            rowLimits: {
                serializedName: "rowLimits",
                type: {
                    name: "Number"
                }
            },
            columns: {
                serializedName: "columns",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            expression: {
                serializedName: "expression",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const DataFlowDebugCommandResponse = {
    type: {
        name: "Composite",
        className: "DataFlowDebugCommandResponse",
        modelProperties: {
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            data: {
                serializedName: "data",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ManagedVirtualNetworkListResponse = {
    type: {
        name: "Composite",
        className: "ManagedVirtualNetworkListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ManagedVirtualNetworkResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ManagedVirtualNetwork = {
    type: {
        name: "Composite",
        className: "ManagedVirtualNetwork",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            vNetId: {
                serializedName: "vNetId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            alias: {
                serializedName: "alias",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ManagedPrivateEndpointListResponse = {
    type: {
        name: "Composite",
        className: "ManagedPrivateEndpointListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ManagedPrivateEndpointResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ManagedPrivateEndpoint = {
    type: {
        name: "Composite",
        className: "ManagedPrivateEndpoint",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            connectionState: {
                serializedName: "connectionState",
                type: {
                    name: "Composite",
                    className: "ConnectionStateProperties"
                }
            },
            fqdns: {
                serializedName: "fqdns",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            groupId: {
                serializedName: "groupId",
                type: {
                    name: "String"
                }
            },
            isReserved: {
                serializedName: "isReserved",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            privateLinkResourceId: {
                serializedName: "privateLinkResourceId",
                type: {
                    name: "String"
                }
            },
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ConnectionStateProperties = {
    type: {
        name: "Composite",
        className: "ConnectionStateProperties",
        modelProperties: {
            actionsRequired: {
                serializedName: "actionsRequired",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const CredentialListResponse = {
    type: {
        name: "Composite",
        className: "CredentialListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ManagedIdentityCredentialResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const Credential = {
    serializedName: "Credential",
    type: {
        name: "Composite",
        className: "Credential",
        uberParent: "Credential",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            annotations: {
                serializedName: "annotations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any"
                        }
                    }
                }
            }
        }
    }
};
export const PrivateEndpointConnectionListResponse = {
    type: {
        name: "Composite",
        className: "PrivateEndpointConnectionListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrivateEndpointConnectionResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const RemotePrivateEndpointConnection = {
    type: {
        name: "Composite",
        className: "RemotePrivateEndpointConnection",
        modelProperties: {
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            privateEndpoint: {
                serializedName: "privateEndpoint",
                type: {
                    name: "Composite",
                    className: "ArmIdWrapper"
                }
            },
            privateLinkServiceConnectionState: {
                serializedName: "privateLinkServiceConnectionState",
                type: {
                    name: "Composite",
                    className: "PrivateLinkConnectionState"
                }
            }
        }
    }
};
export const ArmIdWrapper = {
    type: {
        name: "Composite",
        className: "ArmIdWrapper",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const PrivateLinkConnectionState = {
    type: {
        name: "Composite",
        className: "PrivateLinkConnectionState",
        modelProperties: {
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            actionsRequired: {
                serializedName: "actionsRequired",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const PrivateLinkConnectionApprovalRequest = {
    type: {
        name: "Composite",
        className: "PrivateLinkConnectionApprovalRequest",
        modelProperties: {
            privateLinkServiceConnectionState: {
                serializedName: "privateLinkServiceConnectionState",
                type: {
                    name: "Composite",
                    className: "PrivateLinkConnectionState"
                }
            },
            privateEndpoint: {
                serializedName: "privateEndpoint",
                type: {
                    name: "Composite",
                    className: "PrivateEndpoint"
                }
            }
        }
    }
};
export const PrivateEndpoint = {
    type: {
        name: "Composite",
        className: "PrivateEndpoint",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const PrivateLinkResourcesWrapper = {
    type: {
        name: "Composite",
        className: "PrivateLinkResourcesWrapper",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrivateLinkResource"
                        }
                    }
                }
            }
        }
    }
};
export const PrivateLinkResourceProperties = {
    type: {
        name: "Composite",
        className: "PrivateLinkResourceProperties",
        modelProperties: {
            groupId: {
                serializedName: "groupId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            requiredMembers: {
                serializedName: "requiredMembers",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            requiredZoneNames: {
                serializedName: "requiredZoneNames",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
export const GlobalParameterListResponse = {
    type: {
        name: "Composite",
        className: "GlobalParameterListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "GlobalParameterResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ChangeDataCaptureListResponse = {
    type: {
        name: "Composite",
        className: "ChangeDataCaptureListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ChangeDataCaptureResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ChangeDataCaptureFolder = {
    type: {
        name: "Composite",
        className: "ChangeDataCaptureFolder",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const MapperSourceConnectionsInfo = {
    type: {
        name: "Composite",
        className: "MapperSourceConnectionsInfo",
        modelProperties: {
            sourceEntities: {
                serializedName: "sourceEntities",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MapperTable"
                        }
                    }
                }
            },
            connection: {
                serializedName: "connection",
                type: {
                    name: "Composite",
                    className: "MapperConnection"
                }
            }
        }
    }
};
export const MapperTable = {
    type: {
        name: "Composite",
        className: "MapperTable",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            schema: {
                serializedName: "properties.schema",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MapperTableSchema"
                        }
                    }
                }
            },
            dslConnectorProperties: {
                serializedName: "properties.dslConnectorProperties",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MapperDslConnectorProperties"
                        }
                    }
                }
            }
        }
    }
};
export const MapperTableSchema = {
    type: {
        name: "Composite",
        className: "MapperTableSchema",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            dataType: {
                serializedName: "dataType",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const MapperDslConnectorProperties = {
    type: {
        name: "Composite",
        className: "MapperDslConnectorProperties",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "any"
                }
            }
        }
    }
};
export const MapperConnection = {
    type: {
        name: "Composite",
        className: "MapperConnection",
        modelProperties: {
            linkedService: {
                serializedName: "linkedService",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            },
            linkedServiceType: {
                serializedName: "linkedServiceType",
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            isInlineDataset: {
                serializedName: "isInlineDataset",
                type: {
                    name: "Boolean"
                }
            },
            commonDslConnectorProperties: {
                serializedName: "commonDslConnectorProperties",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MapperDslConnectorProperties"
                        }
                    }
                }
            }
        }
    }
};
export const MapperTargetConnectionsInfo = {
    type: {
        name: "Composite",
        className: "MapperTargetConnectionsInfo",
        modelProperties: {
            targetEntities: {
                serializedName: "targetEntities",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MapperTable"
                        }
                    }
                }
            },
            connection: {
                serializedName: "connection",
                type: {
                    name: "Composite",
                    className: "MapperConnection"
                }
            },
            dataMapperMappings: {
                serializedName: "dataMapperMappings",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DataMapperMapping"
                        }
                    }
                }
            },
            relationships: {
                serializedName: "relationships",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any"
                        }
                    }
                }
            }
        }
    }
};
export const DataMapperMapping = {
    type: {
        name: "Composite",
        className: "DataMapperMapping",
        modelProperties: {
            targetEntityName: {
                serializedName: "targetEntityName",
                type: {
                    name: "String"
                }
            },
            sourceEntityName: {
                serializedName: "sourceEntityName",
                type: {
                    name: "String"
                }
            },
            sourceConnectionReference: {
                serializedName: "sourceConnectionReference",
                type: {
                    name: "Composite",
                    className: "MapperConnectionReference"
                }
            },
            attributeMappingInfo: {
                serializedName: "attributeMappingInfo",
                type: {
                    name: "Composite",
                    className: "MapperAttributeMappings"
                }
            },
            sourceDenormalizeInfo: {
                serializedName: "sourceDenormalizeInfo",
                type: {
                    name: "any"
                }
            }
        }
    }
};
export const MapperConnectionReference = {
    type: {
        name: "Composite",
        className: "MapperConnectionReference",
        modelProperties: {
            connectionName: {
                serializedName: "connectionName",
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const MapperAttributeMappings = {
    type: {
        name: "Composite",
        className: "MapperAttributeMappings",
        modelProperties: {
            attributeMappings: {
                serializedName: "attributeMappings",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MapperAttributeMapping"
                        }
                    }
                }
            }
        }
    }
};
export const MapperAttributeMapping = {
    type: {
        name: "Composite",
        className: "MapperAttributeMapping",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            functionName: {
                serializedName: "functionName",
                type: {
                    name: "String"
                }
            },
            expression: {
                serializedName: "expression",
                type: {
                    name: "String"
                }
            },
            attributeReference: {
                serializedName: "attributeReference",
                type: {
                    name: "Composite",
                    className: "MapperAttributeReference"
                }
            },
            attributeReferences: {
                serializedName: "attributeReferences",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MapperAttributeReference"
                        }
                    }
                }
            }
        }
    }
};
export const MapperAttributeReference = {
    type: {
        name: "Composite",
        className: "MapperAttributeReference",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            entity: {
                serializedName: "entity",
                type: {
                    name: "String"
                }
            },
            entityConnectionReference: {
                serializedName: "entityConnectionReference",
                type: {
                    name: "Composite",
                    className: "MapperConnectionReference"
                }
            }
        }
    }
};
export const MapperPolicy = {
    type: {
        name: "Composite",
        className: "MapperPolicy",
        modelProperties: {
            mode: {
                serializedName: "mode",
                type: {
                    name: "String"
                }
            },
            recurrence: {
                serializedName: "recurrence",
                type: {
                    name: "Composite",
                    className: "MapperPolicyRecurrence"
                }
            }
        }
    }
};
export const MapperPolicyRecurrence = {
    type: {
        name: "Composite",
        className: "MapperPolicyRecurrence",
        modelProperties: {
            frequency: {
                serializedName: "frequency",
                type: {
                    name: "String"
                }
            },
            interval: {
                serializedName: "interval",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export const Expression = {
    type: {
        name: "Composite",
        className: "Expression",
        modelProperties: {
            type: {
                defaultValue: "Expression",
                isConstant: true,
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const SecretBase = {
    type: {
        name: "Composite",
        className: "SecretBase",
        uberParent: "SecretBase",
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const IntegrationRuntimeStatusListResponse = {
    type: {
        name: "Composite",
        className: "IntegrationRuntimeStatusListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "IntegrationRuntimeStatusResponse"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const PipelineReference = {
    type: {
        name: "Composite",
        className: "PipelineReference",
        modelProperties: {
            type: {
                defaultValue: "PipelineReference",
                isConstant: true,
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            referenceName: {
                serializedName: "referenceName",
                required: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const TriggerPipelineReference = {
    type: {
        name: "Composite",
        className: "TriggerPipelineReference",
        modelProperties: {
            pipelineReference: {
                serializedName: "pipelineReference",
                type: {
                    name: "Composite",
                    className: "PipelineReference"
                }
            },
            parameters: {
                serializedName: "parameters",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
export const DatasetReference = {
    type: {
        name: "Composite",
        className: "DatasetReference",
        modelProperties: {
            type: {
                defaultValue: "DatasetReference",
                isConstant: true,
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            referenceName: {
                serializedName: "referenceName",
                required: true,
                type: {
                    name: "String"
                }
            },
            parameters: {
                serializedName: "parameters",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
export const GetDataFactoryOperationStatusResponse = {
    type: {
        name: "Composite",
        className: "GetDataFactoryOperationStatusResponse",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const DataFlowReference = {
    type: {
        name: "Composite",
        className: "DataFlowReference",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            referenceName: {
                serializedName: "referenceName",
                required: true,
                type: {
                    name: "String"
                }
            },
            datasetParameters: {
                serializedName: "datasetParameters",
                type: {
                    name: "any"
                }
            },
            parameters: {
                serializedName: "parameters",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
export const ManagedVirtualNetworkReference = {
    type: {
        name: "Composite",
        className: "ManagedVirtualNetworkReference",
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            referenceName: {
                serializedName: "referenceName",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const CredentialReference = {
    type: {
        name: "Composite",
        className: "CredentialReference",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            referenceName: {
                serializedName: "referenceName",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const Transformation = {
    type: {
        name: "Composite",
        className: "Transformation",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            dataset: {
                serializedName: "dataset",
                type: {
                    name: "Composite",
                    className: "DatasetReference"
                }
            },
            linkedService: {
                serializedName: "linkedService",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            },
            flowlet: {
                serializedName: "flowlet",
                type: {
                    name: "Composite",
                    className: "DataFlowReference"
                }
            }
        }
    }
};
export const DatasetLocation = {
    serializedName: "DatasetLocation",
    type: {
        name: "Composite",
        className: "DatasetLocation",
        uberParent: "DatasetLocation",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            folderPath: {
                serializedName: "folderPath",
                type: {
                    name: "any"
                }
            },
            fileName: {
                serializedName: "fileName",
                type: {
                    name: "any"
                }
            }
        }
    }
};
export const DatasetDataElement = {
    type: {
        name: "Composite",
        className: "DatasetDataElement",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "any"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "any"
                }
            }
        }
    }
};
export const DatasetSchemaDataElement = {
    type: {
        name: "Composite",
        className: "DatasetSchemaDataElement",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "any"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "any"
                }
            }
        }
    }
};
export const DatasetStorageFormat = {
    serializedName: "DatasetStorageFormat",
    type: {
        name: "Composite",
        className: "DatasetStorageFormat",
        uberParent: "DatasetStorageFormat",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            serializer: {
                serializedName: "serializer",
                type: {
                    name: "any"
                }
            },
            deserializer: {
                serializedName: "deserializer",
                type: {
                    name: "any"
                }
            }
        }
    }
};
export const DatasetCompression = {
    type: {
        name: "Composite",
        className: "DatasetCompression",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "any"
                }
            },
            level: {
                serializedName: "level",
                type: {
                    name: "any"
                }
            }
        }
    }
};
export const IntegrationRuntimeComputeProperties = {
    type: {
        name: "Composite",
        className: "IntegrationRuntimeComputeProperties",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            nodeSize: {
                serializedName: "nodeSize",
                type: {
                    name: "String"
                }
            },
            numberOfNodes: {
                constraints: {
                    InclusiveMinimum: 1
                },
                serializedName: "numberOfNodes",
                type: {
                    name: "Number"
                }
            },
            maxParallelExecutionsPerNode: {
                constraints: {
                    InclusiveMinimum: 1
                },
                serializedName: "maxParallelExecutionsPerNode",
                type: {
                    name: "Number"
                }
            },
            dataFlowProperties: {
                serializedName: "dataFlowProperties",
                type: {
                    name: "Composite",
                    className: "IntegrationRuntimeDataFlowProperties"
                }
            },
            vNetProperties: {
                serializedName: "vNetProperties",
                type: {
                    name: "Composite",
                    className: "IntegrationRuntimeVNetProperties"
                }
            },
            copyComputeScaleProperties: {
                serializedName: "copyComputeScaleProperties",
                type: {
                    name: "Composite",
                    className: "CopyComputeScaleProperties"
                }
            },
            pipelineExternalComputeScaleProperties: {
                serializedName: "pipelineExternalComputeScaleProperties",
                type: {
                    name: "Composite",
                    className: "PipelineExternalComputeScaleProperties"
                }
            }
        }
    }
};
export const IntegrationRuntimeDataFlowProperties = {
    type: {
        name: "Composite",
        className: "IntegrationRuntimeDataFlowProperties",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            computeType: {
                serializedName: "computeType",
                type: {
                    name: "String"
                }
            },
            coreCount: {
                serializedName: "coreCount",
                type: {
                    name: "Number"
                }
            },
            timeToLive: {
                constraints: {
                    InclusiveMinimum: 0
                },
                serializedName: "timeToLive",
                type: {
                    name: "Number"
                }
            },
            cleanup: {
                serializedName: "cleanup",
                type: {
                    name: "Boolean"
                }
            },
            customProperties: {
                serializedName: "customProperties",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "IntegrationRuntimeDataFlowPropertiesCustomPropertiesItem"
                        }
                    }
                }
            }
        }
    }
};
export const IntegrationRuntimeDataFlowPropertiesCustomPropertiesItem = {
    type: {
        name: "Composite",
        className: "IntegrationRuntimeDataFlowPropertiesCustomPropertiesItem",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const IntegrationRuntimeVNetProperties = {
    type: {
        name: "Composite",
        className: "IntegrationRuntimeVNetProperties",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            vNetId: {
                serializedName: "vNetId",
                type: {
                    name: "String"
                }
            },
            subnet: {
                serializedName: "subnet",
                type: {
                    name: "String"
                }
            },
            publicIPs: {
                serializedName: "publicIPs",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            subnetId: {
                serializedName: "subnetId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const CopyComputeScaleProperties = {
    type: {
        name: "Composite",
        className: "CopyComputeScaleProperties",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            dataIntegrationUnit: {
                constraints: {
                    InclusiveMinimum: 4
                },
                serializedName: "dataIntegrationUnit",
                type: {
                    name: "Number"
                }
            },
            timeToLive: {
                constraints: {
                    InclusiveMinimum: 5
                },
                serializedName: "timeToLive",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export const PipelineExternalComputeScaleProperties = {
    type: {
        name: "Composite",
        className: "PipelineExternalComputeScaleProperties",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            timeToLive: {
                constraints: {
                    InclusiveMinimum: 5
                },
                serializedName: "timeToLive",
                type: {
                    name: "Number"
                }
            },
            numberOfPipelineNodes: {
                constraints: {
                    InclusiveMaximum: 10,
                    InclusiveMinimum: 1
                },
                serializedName: "numberOfPipelineNodes",
                type: {
                    name: "Number"
                }
            },
            numberOfExternalNodes: {
                constraints: {
                    InclusiveMaximum: 10,
                    InclusiveMinimum: 1
                },
                serializedName: "numberOfExternalNodes",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export const IntegrationRuntimeSsisProperties = {
    type: {
        name: "Composite",
        className: "IntegrationRuntimeSsisProperties",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            catalogInfo: {
                serializedName: "catalogInfo",
                type: {
                    name: "Composite",
                    className: "IntegrationRuntimeSsisCatalogInfo"
                }
            },
            licenseType: {
                serializedName: "licenseType",
                type: {
                    name: "String"
                }
            },
            customSetupScriptProperties: {
                serializedName: "customSetupScriptProperties",
                type: {
                    name: "Composite",
                    className: "IntegrationRuntimeCustomSetupScriptProperties"
                }
            },
            dataProxyProperties: {
                serializedName: "dataProxyProperties",
                type: {
                    name: "Composite",
                    className: "IntegrationRuntimeDataProxyProperties"
                }
            },
            edition: {
                serializedName: "edition",
                type: {
                    name: "String"
                }
            },
            expressCustomSetupProperties: {
                serializedName: "expressCustomSetupProperties",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CustomSetupBase"
                        }
                    }
                }
            },
            packageStores: {
                serializedName: "packageStores",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PackageStore"
                        }
                    }
                }
            },
            credential: {
                serializedName: "credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference"
                }
            }
        }
    }
};
export const IntegrationRuntimeSsisCatalogInfo = {
    type: {
        name: "Composite",
        className: "IntegrationRuntimeSsisCatalogInfo",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            catalogServerEndpoint: {
                serializedName: "catalogServerEndpoint",
                type: {
                    name: "String"
                }
            },
            catalogAdminUserName: {
                constraints: {
                    MaxLength: 128,
                    MinLength: 1
                },
                serializedName: "catalogAdminUserName",
                type: {
                    name: "String"
                }
            },
            catalogAdminPassword: {
                serializedName: "catalogAdminPassword",
                type: {
                    name: "Composite",
                    className: "SecureString"
                }
            },
            catalogPricingTier: {
                serializedName: "catalogPricingTier",
                type: {
                    name: "String"
                }
            },
            dualStandbyPairName: {
                serializedName: "dualStandbyPairName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const IntegrationRuntimeCustomSetupScriptProperties = {
    type: {
        name: "Composite",
        className: "IntegrationRuntimeCustomSetupScriptProperties",
        modelProperties: {
            blobContainerUri: {
                serializedName: "blobContainerUri",
                type: {
                    name: "String"
                }
            },
            sasToken: {
                serializedName: "sasToken",
                type: {
                    name: "Composite",
                    className: "SecureString"
                }
            }
        }
    }
};
export const IntegrationRuntimeDataProxyProperties = {
    type: {
        name: "Composite",
        className: "IntegrationRuntimeDataProxyProperties",
        modelProperties: {
            connectVia: {
                serializedName: "connectVia",
                type: {
                    name: "Composite",
                    className: "EntityReference"
                }
            },
            stagingLinkedService: {
                serializedName: "stagingLinkedService",
                type: {
                    name: "Composite",
                    className: "EntityReference"
                }
            },
            path: {
                serializedName: "path",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const EntityReference = {
    type: {
        name: "Composite",
        className: "EntityReference",
        modelProperties: {
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            referenceName: {
                serializedName: "referenceName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const CustomSetupBase = {
    type: {
        name: "Composite",
        className: "CustomSetupBase",
        uberParent: "CustomSetupBase",
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const PackageStore = {
    type: {
        name: "Composite",
        className: "PackageStore",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            packageStoreLinkedService: {
                serializedName: "packageStoreLinkedService",
                type: {
                    name: "Composite",
                    className: "EntityReference"
                }
            }
        }
    }
};
export const IntegrationRuntimeCustomerVirtualNetwork = {
    type: {
        name: "Composite",
        className: "IntegrationRuntimeCustomerVirtualNetwork",
        modelProperties: {
            subnetId: {
                serializedName: "subnetId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const LinkedIntegrationRuntimeType = {
    type: {
        name: "Composite",
        className: "LinkedIntegrationRuntimeType",
        uberParent: "LinkedIntegrationRuntimeType",
        polymorphicDiscriminator: {
            serializedName: "authorizationType",
            clientName: "authorizationType"
        },
        modelProperties: {
            authorizationType: {
                serializedName: "authorizationType",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ManagedIntegrationRuntimeNode = {
    type: {
        name: "Composite",
        className: "ManagedIntegrationRuntimeNode",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            nodeId: {
                serializedName: "nodeId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            errors: {
                serializedName: "errors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ManagedIntegrationRuntimeError"
                        }
                    }
                }
            }
        }
    }
};
export const ManagedIntegrationRuntimeError = {
    type: {
        name: "Composite",
        className: "ManagedIntegrationRuntimeError",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            time: {
                serializedName: "time",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            code: {
                serializedName: "code",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            parameters: {
                serializedName: "parameters",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ManagedIntegrationRuntimeOperationResult = {
    type: {
        name: "Composite",
        className: "ManagedIntegrationRuntimeOperationResult",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            startTime: {
                serializedName: "startTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            result: {
                serializedName: "result",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            errorCode: {
                serializedName: "errorCode",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            parameters: {
                serializedName: "parameters",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            activityId: {
                serializedName: "activityId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const LinkedIntegrationRuntime = {
    type: {
        name: "Composite",
        className: "LinkedIntegrationRuntime",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            subscriptionId: {
                serializedName: "subscriptionId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            dataFactoryName: {
                serializedName: "dataFactoryName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            dataFactoryLocation: {
                serializedName: "dataFactoryLocation",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            createTime: {
                serializedName: "createTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
export const SsisEnvironmentReference = {
    type: {
        name: "Composite",
        className: "SsisEnvironmentReference",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "Number"
                }
            },
            environmentFolderName: {
                serializedName: "environmentFolderName",
                type: {
                    name: "String"
                }
            },
            environmentName: {
                serializedName: "environmentName",
                type: {
                    name: "String"
                }
            },
            referenceType: {
                serializedName: "referenceType",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const SsisParameter = {
    type: {
        name: "Composite",
        className: "SsisParameter",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "Number"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            dataType: {
                serializedName: "dataType",
                type: {
                    name: "String"
                }
            },
            required: {
                serializedName: "required",
                type: {
                    name: "Boolean"
                }
            },
            sensitive: {
                serializedName: "sensitive",
                type: {
                    name: "Boolean"
                }
            },
            designDefaultValue: {
                serializedName: "designDefaultValue",
                type: {
                    name: "String"
                }
            },
            defaultValue: {
                serializedName: "defaultValue",
                type: {
                    name: "String"
                }
            },
            sensitiveDefaultValue: {
                serializedName: "sensitiveDefaultValue",
                type: {
                    name: "String"
                }
            },
            valueType: {
                serializedName: "valueType",
                type: {
                    name: "String"
                }
            },
            valueSet: {
                serializedName: "valueSet",
                type: {
                    name: "Boolean"
                }
            },
            variable: {
                serializedName: "variable",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const SsisVariable = {
    type: {
        name: "Composite",
        className: "SsisVariable",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "Number"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            dataType: {
                serializedName: "dataType",
                type: {
                    name: "String"
                }
            },
            sensitive: {
                serializedName: "sensitive",
                type: {
                    name: "Boolean"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "String"
                }
            },
            sensitiveValue: {
                serializedName: "sensitiveValue",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const SqlAlwaysEncryptedProperties = {
    type: {
        name: "Composite",
        className: "SqlAlwaysEncryptedProperties",
        modelProperties: {
            alwaysEncryptedAkvAuthType: {
                serializedName: "alwaysEncryptedAkvAuthType",
                required: true,
                type: {
                    name: "String"
                }
            },
            servicePrincipalId: {
                serializedName: "servicePrincipalId",
                type: {
                    name: "any"
                }
            },
            servicePrincipalKey: {
                serializedName: "servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            },
            credential: {
                serializedName: "credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference"
                }
            }
        }
    }
};
export const WebLinkedServiceTypeProperties = {
    type: {
        name: "Composite",
        className: "WebLinkedServiceTypeProperties",
        uberParent: "WebLinkedServiceTypeProperties",
        polymorphicDiscriminator: {
            serializedName: "authenticationType",
            clientName: "authenticationType"
        },
        modelProperties: {
            url: {
                serializedName: "url",
                required: true,
                type: {
                    name: "any"
                }
            },
            authenticationType: {
                serializedName: "authenticationType",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ScriptAction = {
    type: {
        name: "Composite",
        className: "ScriptAction",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            uri: {
                serializedName: "uri",
                required: true,
                type: {
                    name: "String"
                }
            },
            roles: {
                serializedName: "roles",
                required: true,
                type: {
                    name: "any"
                }
            },
            parameters: {
                serializedName: "parameters",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ActivityPolicy = {
    type: {
        name: "Composite",
        className: "ActivityPolicy",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            timeout: {
                serializedName: "timeout",
                type: {
                    name: "any"
                }
            },
            retry: {
                serializedName: "retry",
                type: {
                    name: "any"
                }
            },
            retryIntervalInSeconds: {
                constraints: {
                    InclusiveMaximum: 86400,
                    InclusiveMinimum: 30
                },
                serializedName: "retryIntervalInSeconds",
                type: {
                    name: "Number"
                }
            },
            secureInput: {
                serializedName: "secureInput",
                type: {
                    name: "Boolean"
                }
            },
            secureOutput: {
                serializedName: "secureOutput",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
export const StoreReadSettings = {
    serializedName: "StoreReadSettings",
    type: {
        name: "Composite",
        className: "StoreReadSettings",
        uberParent: "StoreReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            maxConcurrentConnections: {
                serializedName: "maxConcurrentConnections",
                type: {
                    name: "any"
                }
            },
            disableMetricsCollection: {
                serializedName: "disableMetricsCollection",
                type: {
                    name: "any"
                }
            }
        }
    }
};
export const StoreWriteSettings = {
    serializedName: "StoreWriteSettings",
    type: {
        name: "Composite",
        className: "StoreWriteSettings",
        uberParent: "StoreWriteSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            maxConcurrentConnections: {
                serializedName: "maxConcurrentConnections",
                type: {
                    name: "any"
                }
            },
            disableMetricsCollection: {
                serializedName: "disableMetricsCollection",
                type: {
                    name: "any"
                }
            },
            copyBehavior: {
                serializedName: "copyBehavior",
                type: {
                    name: "any"
                }
            }
        }
    }
};
export const DistcpSettings = {
    type: {
        name: "Composite",
        className: "DistcpSettings",
        modelProperties: {
            resourceManagerEndpoint: {
                serializedName: "resourceManagerEndpoint",
                required: true,
                type: {
                    name: "any"
                }
            },
            tempScriptPath: {
                serializedName: "tempScriptPath",
                required: true,
                type: {
                    name: "any"
                }
            },
            distcpOptions: {
                serializedName: "distcpOptions",
                type: {
                    name: "any"
                }
            }
        }
    }
};
export const FormatReadSettings = {
    serializedName: "FormatReadSettings",
    type: {
        name: "Composite",
        className: "FormatReadSettings",
        uberParent: "FormatReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const CompressionReadSettings = {
    serializedName: "CompressionReadSettings",
    type: {
        name: "Composite",
        className: "CompressionReadSettings",
        uberParent: "CompressionReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const FormatWriteSettings = {
    serializedName: "FormatWriteSettings",
    type: {
        name: "Composite",
        className: "FormatWriteSettings",
        uberParent: "FormatWriteSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const CopySource = {
    serializedName: "CopySource",
    type: {
        name: "Composite",
        className: "CopySource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            sourceRetryCount: {
                serializedName: "sourceRetryCount",
                type: {
                    name: "any"
                }
            },
            sourceRetryWait: {
                serializedName: "sourceRetryWait",
                type: {
                    name: "any"
                }
            },
            maxConcurrentConnections: {
                serializedName: "maxConcurrentConnections",
                type: {
                    name: "any"
                }
            },
            disableMetricsCollection: {
                serializedName: "disableMetricsCollection",
                type: {
                    name: "any"
                }
            }
        }
    }
};
export const CopySink = {
    serializedName: "CopySink",
    type: {
        name: "Composite",
        className: "CopySink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            writeBatchSize: {
                serializedName: "writeBatchSize",
                type: {
                    name: "any"
                }
            },
            writeBatchTimeout: {
                serializedName: "writeBatchTimeout",
                type: {
                    name: "any"
                }
            },
            sinkRetryCount: {
                serializedName: "sinkRetryCount",
                type: {
                    name: "any"
                }
            },
            sinkRetryWait: {
                serializedName: "sinkRetryWait",
                type: {
                    name: "any"
                }
            },
            maxConcurrentConnections: {
                serializedName: "maxConcurrentConnections",
                type: {
                    name: "any"
                }
            },
            disableMetricsCollection: {
                serializedName: "disableMetricsCollection",
                type: {
                    name: "any"
                }
            }
        }
    }
};
export const StagingSettings = {
    type: {
        name: "Composite",
        className: "StagingSettings",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            linkedServiceName: {
                serializedName: "linkedServiceName",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            },
            path: {
                serializedName: "path",
                type: {
                    name: "any"
                }
            },
            enableCompression: {
                serializedName: "enableCompression",
                type: {
                    name: "any"
                }
            }
        }
    }
};
export const RedirectIncompatibleRowSettings = {
    type: {
        name: "Composite",
        className: "RedirectIncompatibleRowSettings",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            linkedServiceName: {
                serializedName: "linkedServiceName",
                required: true,
                type: {
                    name: "any"
                }
            },
            path: {
                serializedName: "path",
                type: {
                    name: "any"
                }
            }
        }
    }
};
export const LogStorageSettings = {
    type: {
        name: "Composite",
        className: "LogStorageSettings",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            linkedServiceName: {
                serializedName: "linkedServiceName",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            },
            path: {
                serializedName: "path",
                type: {
                    name: "any"
                }
            },
            logLevel: {
                serializedName: "logLevel",
                type: {
                    name: "any"
                }
            },
            enableReliableLogging: {
                serializedName: "enableReliableLogging",
                type: {
                    name: "any"
                }
            }
        }
    }
};
export const LogSettings = {
    type: {
        name: "Composite",
        className: "LogSettings",
        modelProperties: {
            enableCopyActivityLog: {
                serializedName: "enableCopyActivityLog",
                type: {
                    name: "any"
                }
            },
            copyActivityLogSettings: {
                serializedName: "copyActivityLogSettings",
                type: {
                    name: "Composite",
                    className: "CopyActivityLogSettings"
                }
            },
            logLocationSettings: {
                serializedName: "logLocationSettings",
                type: {
                    name: "Composite",
                    className: "LogLocationSettings"
                }
            }
        }
    }
};
export const CopyActivityLogSettings = {
    type: {
        name: "Composite",
        className: "CopyActivityLogSettings",
        modelProperties: {
            logLevel: {
                serializedName: "logLevel",
                type: {
                    name: "any"
                }
            },
            enableReliableLogging: {
                serializedName: "enableReliableLogging",
                type: {
                    name: "any"
                }
            }
        }
    }
};
export const LogLocationSettings = {
    type: {
        name: "Composite",
        className: "LogLocationSettings",
        modelProperties: {
            linkedServiceName: {
                serializedName: "linkedServiceName",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            },
            path: {
                serializedName: "path",
                type: {
                    name: "any"
                }
            }
        }
    }
};
export const SkipErrorFile = {
    type: {
        name: "Composite",
        className: "SkipErrorFile",
        modelProperties: {
            fileMissing: {
                serializedName: "fileMissing",
                type: {
                    name: "any"
                }
            },
            dataInconsistency: {
                serializedName: "dataInconsistency",
                type: {
                    name: "any"
                }
            }
        }
    }
};
export const SapHanaPartitionSettings = {
    type: {
        name: "Composite",
        className: "SapHanaPartitionSettings",
        modelProperties: {
            partitionColumnName: {
                serializedName: "partitionColumnName",
                type: {
                    name: "any"
                }
            }
        }
    }
};
export const SapTablePartitionSettings = {
    type: {
        name: "Composite",
        className: "SapTablePartitionSettings",
        modelProperties: {
            partitionColumnName: {
                serializedName: "partitionColumnName",
                type: {
                    name: "any"
                }
            },
            partitionUpperBound: {
                serializedName: "partitionUpperBound",
                type: {
                    name: "any"
                }
            },
            partitionLowerBound: {
                serializedName: "partitionLowerBound",
                type: {
                    name: "any"
                }
            },
            maxPartitionsNumber: {
                serializedName: "maxPartitionsNumber",
                type: {
                    name: "any"
                }
            }
        }
    }
};
export const SqlPartitionSettings = {
    type: {
        name: "Composite",
        className: "SqlPartitionSettings",
        modelProperties: {
            partitionColumnName: {
                serializedName: "partitionColumnName",
                type: {
                    name: "any"
                }
            },
            partitionUpperBound: {
                serializedName: "partitionUpperBound",
                type: {
                    name: "any"
                }
            },
            partitionLowerBound: {
                serializedName: "partitionLowerBound",
                type: {
                    name: "any"
                }
            }
        }
    }
};
export const OraclePartitionSettings = {
    type: {
        name: "Composite",
        className: "OraclePartitionSettings",
        modelProperties: {
            partitionNames: {
                serializedName: "partitionNames",
                type: {
                    name: "any"
                }
            },
            partitionColumnName: {
                serializedName: "partitionColumnName",
                type: {
                    name: "any"
                }
            },
            partitionUpperBound: {
                serializedName: "partitionUpperBound",
                type: {
                    name: "any"
                }
            },
            partitionLowerBound: {
                serializedName: "partitionLowerBound",
                type: {
                    name: "any"
                }
            }
        }
    }
};
export const AmazonRdsForOraclePartitionSettings = {
    type: {
        name: "Composite",
        className: "AmazonRdsForOraclePartitionSettings",
        modelProperties: {
            partitionNames: {
                serializedName: "partitionNames",
                type: {
                    name: "any"
                }
            },
            partitionColumnName: {
                serializedName: "partitionColumnName",
                type: {
                    name: "any"
                }
            },
            partitionUpperBound: {
                serializedName: "partitionUpperBound",
                type: {
                    name: "any"
                }
            },
            partitionLowerBound: {
                serializedName: "partitionLowerBound",
                type: {
                    name: "any"
                }
            }
        }
    }
};
export const TeradataPartitionSettings = {
    type: {
        name: "Composite",
        className: "TeradataPartitionSettings",
        modelProperties: {
            partitionColumnName: {
                serializedName: "partitionColumnName",
                type: {
                    name: "any"
                }
            },
            partitionUpperBound: {
                serializedName: "partitionUpperBound",
                type: {
                    name: "any"
                }
            },
            partitionLowerBound: {
                serializedName: "partitionLowerBound",
                type: {
                    name: "any"
                }
            }
        }
    }
};
export const MongoDbCursorMethodsProperties = {
    type: {
        name: "Composite",
        className: "MongoDbCursorMethodsProperties",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            project: {
                serializedName: "project",
                type: {
                    name: "any"
                }
            },
            sort: {
                serializedName: "sort",
                type: {
                    name: "any"
                }
            },
            skip: {
                serializedName: "skip",
                type: {
                    name: "any"
                }
            },
            limit: {
                serializedName: "limit",
                type: {
                    name: "any"
                }
            }
        }
    }
};
export const OutputColumn = {
    type: {
        name: "Composite",
        className: "OutputColumn",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const NetezzaPartitionSettings = {
    type: {
        name: "Composite",
        className: "NetezzaPartitionSettings",
        modelProperties: {
            partitionColumnName: {
                serializedName: "partitionColumnName",
                type: {
                    name: "any"
                }
            },
            partitionUpperBound: {
                serializedName: "partitionUpperBound",
                type: {
                    name: "any"
                }
            },
            partitionLowerBound: {
                serializedName: "partitionLowerBound",
                type: {
                    name: "any"
                }
            }
        }
    }
};
export const RedshiftUnloadSettings = {
    type: {
        name: "Composite",
        className: "RedshiftUnloadSettings",
        modelProperties: {
            s3LinkedServiceName: {
                serializedName: "s3LinkedServiceName",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            },
            bucketName: {
                serializedName: "bucketName",
                required: true,
                type: {
                    name: "any"
                }
            }
        }
    }
};
export const ExportSettings = {
    serializedName: "ExportSettings",
    type: {
        name: "Composite",
        className: "ExportSettings",
        uberParent: "ExportSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ImportSettings = {
    serializedName: "ImportSettings",
    type: {
        name: "Composite",
        className: "ImportSettings",
        uberParent: "ImportSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const StoredProcedureParameter = {
    type: {
        name: "Composite",
        className: "StoredProcedureParameter",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "any"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const MetadataItem = {
    type: {
        name: "Composite",
        className: "MetadataItem",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "any"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "any"
                }
            }
        }
    }
};
export const SqlUpsertSettings = {
    type: {
        name: "Composite",
        className: "SqlUpsertSettings",
        modelProperties: {
            useTempDB: {
                serializedName: "useTempDB",
                type: {
                    name: "any"
                }
            },
            interimSchemaName: {
                serializedName: "interimSchemaName",
                type: {
                    name: "any"
                }
            },
            keys: {
                serializedName: "keys",
                type: {
                    name: "any"
                }
            }
        }
    }
};
export const PolybaseSettings = {
    type: {
        name: "Composite",
        className: "PolybaseSettings",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            rejectType: {
                serializedName: "rejectType",
                type: {
                    name: "String"
                }
            },
            rejectValue: {
                serializedName: "rejectValue",
                type: {
                    name: "any"
                }
            },
            rejectSampleValue: {
                serializedName: "rejectSampleValue",
                type: {
                    name: "any"
                }
            },
            useTypeDefault: {
                serializedName: "useTypeDefault",
                type: {
                    name: "any"
                }
            }
        }
    }
};
export const DWCopyCommandSettings = {
    type: {
        name: "Composite",
        className: "DWCopyCommandSettings",
        modelProperties: {
            defaultValues: {
                serializedName: "defaultValues",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DWCopyCommandDefaultValue"
                        }
                    }
                }
            },
            additionalOptions: {
                serializedName: "additionalOptions",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }
        }
    }
};
export const DWCopyCommandDefaultValue = {
    type: {
        name: "Composite",
        className: "DWCopyCommandDefaultValue",
        modelProperties: {
            columnName: {
                serializedName: "columnName",
                type: {
                    name: "any"
                }
            },
            defaultValue: {
                serializedName: "defaultValue",
                type: {
                    name: "any"
                }
            }
        }
    }
};
export const SqlDWUpsertSettings = {
    type: {
        name: "Composite",
        className: "SqlDWUpsertSettings",
        modelProperties: {
            interimSchemaName: {
                serializedName: "interimSchemaName",
                type: {
                    name: "any"
                }
            },
            keys: {
                serializedName: "keys",
                type: {
                    name: "any"
                }
            }
        }
    }
};
export const AdditionalColumns = {
    type: {
        name: "Composite",
        className: "AdditionalColumns",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "any"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "any"
                }
            }
        }
    }
};
export const CopyTranslator = {
    serializedName: "CopyTranslator",
    type: {
        name: "Composite",
        className: "CopyTranslator",
        uberParent: "CopyTranslator",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const TypeConversionSettings = {
    type: {
        name: "Composite",
        className: "TypeConversionSettings",
        modelProperties: {
            allowDataTruncation: {
                serializedName: "allowDataTruncation",
                type: {
                    name: "any"
                }
            },
            treatBooleanAsNumber: {
                serializedName: "treatBooleanAsNumber",
                type: {
                    name: "any"
                }
            },
            dateTimeFormat: {
                serializedName: "dateTimeFormat",
                type: {
                    name: "any"
                }
            },
            dateTimeOffsetFormat: {
                serializedName: "dateTimeOffsetFormat",
                type: {
                    name: "any"
                }
            },
            timeSpanFormat: {
                serializedName: "timeSpanFormat",
                type: {
                    name: "any"
                }
            },
            culture: {
                serializedName: "culture",
                type: {
                    name: "any"
                }
            }
        }
    }
};
export const SsisPackageLocation = {
    type: {
        name: "Composite",
        className: "SsisPackageLocation",
        modelProperties: {
            packagePath: {
                serializedName: "packagePath",
                type: {
                    name: "any"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            packagePassword: {
                serializedName: "typeProperties.packagePassword",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            },
            accessCredential: {
                serializedName: "typeProperties.accessCredential",
                type: {
                    name: "Composite",
                    className: "SsisAccessCredential"
                }
            },
            configurationPath: {
                serializedName: "typeProperties.configurationPath",
                type: {
                    name: "any"
                }
            },
            configurationAccessCredential: {
                serializedName: "typeProperties.configurationAccessCredential",
                type: {
                    name: "Composite",
                    className: "SsisAccessCredential"
                }
            },
            packageName: {
                serializedName: "typeProperties.packageName",
                type: {
                    name: "String"
                }
            },
            packageContent: {
                serializedName: "typeProperties.packageContent",
                type: {
                    name: "any"
                }
            },
            packageLastModifiedDate: {
                serializedName: "typeProperties.packageLastModifiedDate",
                type: {
                    name: "String"
                }
            },
            childPackages: {
                serializedName: "typeProperties.childPackages",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SsisChildPackage"
                        }
                    }
                }
            }
        }
    }
};
export const SsisAccessCredential = {
    type: {
        name: "Composite",
        className: "SsisAccessCredential",
        modelProperties: {
            domain: {
                serializedName: "domain",
                required: true,
                type: {
                    name: "any"
                }
            },
            userName: {
                serializedName: "userName",
                required: true,
                type: {
                    name: "any"
                }
            },
            password: {
                serializedName: "password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }
        }
    }
};
export const SsisChildPackage = {
    type: {
        name: "Composite",
        className: "SsisChildPackage",
        modelProperties: {
            packagePath: {
                serializedName: "packagePath",
                required: true,
                type: {
                    name: "any"
                }
            },
            packageName: {
                serializedName: "packageName",
                type: {
                    name: "String"
                }
            },
            packageContent: {
                serializedName: "packageContent",
                required: true,
                type: {
                    name: "any"
                }
            },
            packageLastModifiedDate: {
                serializedName: "packageLastModifiedDate",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const SsisExecutionCredential = {
    type: {
        name: "Composite",
        className: "SsisExecutionCredential",
        modelProperties: {
            domain: {
                serializedName: "domain",
                required: true,
                type: {
                    name: "any"
                }
            },
            userName: {
                serializedName: "userName",
                required: true,
                type: {
                    name: "any"
                }
            },
            password: {
                serializedName: "password",
                type: {
                    name: "Composite",
                    className: "SecureString"
                }
            }
        }
    }
};
export const SsisExecutionParameter = {
    type: {
        name: "Composite",
        className: "SsisExecutionParameter",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "any"
                }
            }
        }
    }
};
export const SsisPropertyOverride = {
    type: {
        name: "Composite",
        className: "SsisPropertyOverride",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "any"
                }
            },
            isSensitive: {
                serializedName: "isSensitive",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
export const SsisLogLocation = {
    type: {
        name: "Composite",
        className: "SsisLogLocation",
        modelProperties: {
            logPath: {
                serializedName: "logPath",
                required: true,
                type: {
                    name: "any"
                }
            },
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            accessCredential: {
                serializedName: "typeProperties.accessCredential",
                type: {
                    name: "Composite",
                    className: "SsisAccessCredential"
                }
            },
            logRefreshInterval: {
                serializedName: "typeProperties.logRefreshInterval",
                type: {
                    name: "any"
                }
            }
        }
    }
};
export const CustomActivityReferenceObject = {
    type: {
        name: "Composite",
        className: "CustomActivityReferenceObject",
        modelProperties: {
            linkedServices: {
                serializedName: "linkedServices",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LinkedServiceReference"
                        }
                    }
                }
            },
            datasets: {
                serializedName: "datasets",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DatasetReference"
                        }
                    }
                }
            }
        }
    }
};
export const ExecutePipelineActivityPolicy = {
    type: {
        name: "Composite",
        className: "ExecutePipelineActivityPolicy",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            secureInput: {
                serializedName: "secureInput",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
export const WebActivityAuthentication = {
    type: {
        name: "Composite",
        className: "WebActivityAuthentication",
        modelProperties: {
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            pfx: {
                serializedName: "pfx",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            },
            username: {
                serializedName: "username",
                type: {
                    name: "any"
                }
            },
            password: {
                serializedName: "password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            },
            resource: {
                serializedName: "resource",
                type: {
                    name: "any"
                }
            },
            userTenant: {
                serializedName: "userTenant",
                type: {
                    name: "any"
                }
            },
            credential: {
                serializedName: "credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference"
                }
            }
        }
    }
};
export const SwitchCase = {
    type: {
        name: "Composite",
        className: "SwitchCase",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "String"
                }
            },
            activities: {
                serializedName: "activities",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Activity"
                        }
                    }
                }
            }
        }
    }
};
export const AzureMLWebServiceFile = {
    type: {
        name: "Composite",
        className: "AzureMLWebServiceFile",
        modelProperties: {
            filePath: {
                serializedName: "filePath",
                required: true,
                type: {
                    name: "any"
                }
            },
            linkedServiceName: {
                serializedName: "linkedServiceName",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            }
        }
    }
};
export const SecureInputOutputPolicy = {
    type: {
        name: "Composite",
        className: "SecureInputOutputPolicy",
        modelProperties: {
            secureInput: {
                serializedName: "secureInput",
                type: {
                    name: "Boolean"
                }
            },
            secureOutput: {
                serializedName: "secureOutput",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
export const ExecuteDataFlowActivityTypeProperties = {
    type: {
        name: "Composite",
        className: "ExecuteDataFlowActivityTypeProperties",
        modelProperties: {
            dataFlow: {
                serializedName: "dataFlow",
                type: {
                    name: "Composite",
                    className: "DataFlowReference"
                }
            },
            staging: {
                serializedName: "staging",
                type: {
                    name: "Composite",
                    className: "DataFlowStagingInfo"
                }
            },
            integrationRuntime: {
                serializedName: "integrationRuntime",
                type: {
                    name: "Composite",
                    className: "IntegrationRuntimeReference"
                }
            },
            compute: {
                serializedName: "compute",
                type: {
                    name: "Composite",
                    className: "ExecuteDataFlowActivityTypePropertiesCompute"
                }
            },
            traceLevel: {
                serializedName: "traceLevel",
                type: {
                    name: "any"
                }
            },
            continueOnError: {
                serializedName: "continueOnError",
                type: {
                    name: "any"
                }
            },
            runConcurrently: {
                serializedName: "runConcurrently",
                type: {
                    name: "any"
                }
            },
            sourceStagingConcurrency: {
                serializedName: "sourceStagingConcurrency",
                type: {
                    name: "any"
                }
            }
        }
    }
};
export const ExecuteDataFlowActivityTypePropertiesCompute = {
    type: {
        name: "Composite",
        className: "ExecuteDataFlowActivityTypePropertiesCompute",
        modelProperties: {
            computeType: {
                serializedName: "computeType",
                type: {
                    name: "any"
                }
            },
            coreCount: {
                serializedName: "coreCount",
                type: {
                    name: "any"
                }
            }
        }
    }
};
export const PowerQuerySinkMapping = {
    type: {
        name: "Composite",
        className: "PowerQuerySinkMapping",
        modelProperties: {
            queryName: {
                serializedName: "queryName",
                type: {
                    name: "String"
                }
            },
            dataflowSinks: {
                serializedName: "dataflowSinks",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PowerQuerySink"
                        }
                    }
                }
            }
        }
    }
};
export const ScriptActivityScriptBlock = {
    type: {
        name: "Composite",
        className: "ScriptActivityScriptBlock",
        modelProperties: {
            text: {
                serializedName: "text",
                required: true,
                type: {
                    name: "any"
                }
            },
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            parameters: {
                serializedName: "parameters",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ScriptActivityParameter"
                        }
                    }
                }
            }
        }
    }
};
export const ScriptActivityParameter = {
    type: {
        name: "Composite",
        className: "ScriptActivityParameter",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "any"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "any"
                }
            },
            direction: {
                serializedName: "direction",
                type: {
                    name: "String"
                }
            },
            size: {
                serializedName: "size",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export const ScriptActivityTypePropertiesLogSettings = {
    type: {
        name: "Composite",
        className: "ScriptActivityTypePropertiesLogSettings",
        modelProperties: {
            logDestination: {
                serializedName: "logDestination",
                required: true,
                type: {
                    name: "String"
                }
            },
            logLocationSettings: {
                serializedName: "logLocationSettings",
                type: {
                    name: "Composite",
                    className: "LogLocationSettings"
                }
            }
        }
    }
};
export const SynapseNotebookReference = {
    type: {
        name: "Composite",
        className: "SynapseNotebookReference",
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            referenceName: {
                serializedName: "referenceName",
                required: true,
                type: {
                    name: "any"
                }
            }
        }
    }
};
export const BigDataPoolParametrizationReference = {
    type: {
        name: "Composite",
        className: "BigDataPoolParametrizationReference",
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            referenceName: {
                serializedName: "referenceName",
                required: true,
                type: {
                    name: "any"
                }
            }
        }
    }
};
export const NotebookParameter = {
    type: {
        name: "Composite",
        className: "NotebookParameter",
        modelProperties: {
            value: {
                serializedName: "value",
                nullable: true,
                type: {
                    name: "any"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const SparkConfigurationParametrizationReference = {
    type: {
        name: "Composite",
        className: "SparkConfigurationParametrizationReference",
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            referenceName: {
                serializedName: "referenceName",
                required: true,
                type: {
                    name: "any"
                }
            }
        }
    }
};
export const SynapseSparkJobReference = {
    type: {
        name: "Composite",
        className: "SynapseSparkJobReference",
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            referenceName: {
                serializedName: "referenceName",
                required: true,
                type: {
                    name: "any"
                }
            }
        }
    }
};
export const ScheduleTriggerRecurrence = {
    type: {
        name: "Composite",
        className: "ScheduleTriggerRecurrence",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            frequency: {
                serializedName: "frequency",
                type: {
                    name: "String"
                }
            },
            interval: {
                serializedName: "interval",
                type: {
                    name: "Number"
                }
            },
            startTime: {
                serializedName: "startTime",
                type: {
                    name: "DateTime"
                }
            },
            endTime: {
                serializedName: "endTime",
                type: {
                    name: "DateTime"
                }
            },
            timeZone: {
                serializedName: "timeZone",
                type: {
                    name: "String"
                }
            },
            schedule: {
                serializedName: "schedule",
                type: {
                    name: "Composite",
                    className: "RecurrenceSchedule"
                }
            }
        }
    }
};
export const RecurrenceSchedule = {
    type: {
        name: "Composite",
        className: "RecurrenceSchedule",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            minutes: {
                serializedName: "minutes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Number"
                        }
                    }
                }
            },
            hours: {
                serializedName: "hours",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Number"
                        }
                    }
                }
            },
            weekDays: {
                serializedName: "weekDays",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Enum",
                            allowedValues: [
                                "Sunday",
                                "Monday",
                                "Tuesday",
                                "Wednesday",
                                "Thursday",
                                "Friday",
                                "Saturday"
                            ]
                        }
                    }
                }
            },
            monthDays: {
                serializedName: "monthDays",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Number"
                        }
                    }
                }
            },
            monthlyOccurrences: {
                serializedName: "monthlyOccurrences",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RecurrenceScheduleOccurrence"
                        }
                    }
                }
            }
        }
    }
};
export const RecurrenceScheduleOccurrence = {
    type: {
        name: "Composite",
        className: "RecurrenceScheduleOccurrence",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            day: {
                serializedName: "day",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Sunday",
                        "Monday",
                        "Tuesday",
                        "Wednesday",
                        "Thursday",
                        "Friday",
                        "Saturday"
                    ]
                }
            },
            occurrence: {
                serializedName: "occurrence",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export const RetryPolicy = {
    type: {
        name: "Composite",
        className: "RetryPolicy",
        modelProperties: {
            count: {
                serializedName: "count",
                type: {
                    name: "any"
                }
            },
            intervalInSeconds: {
                constraints: {
                    InclusiveMaximum: 86400,
                    InclusiveMinimum: 30
                },
                serializedName: "intervalInSeconds",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export const DependencyReference = {
    type: {
        name: "Composite",
        className: "DependencyReference",
        uberParent: "DependencyReference",
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const TriggerReference = {
    type: {
        name: "Composite",
        className: "TriggerReference",
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            referenceName: {
                serializedName: "referenceName",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const FactoryVstsConfiguration = {
    serializedName: "FactoryVSTSConfiguration",
    type: {
        name: "Composite",
        className: "FactoryVstsConfiguration",
        uberParent: "FactoryRepoConfiguration",
        polymorphicDiscriminator: FactoryRepoConfiguration.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, FactoryRepoConfiguration.type.modelProperties), { projectName: {
                serializedName: "projectName",
                required: true,
                type: {
                    name: "String"
                }
            }, tenantId: {
                serializedName: "tenantId",
                type: {
                    name: "String"
                }
            } })
    }
};
export const FactoryGitHubConfiguration = {
    serializedName: "FactoryGitHubConfiguration",
    type: {
        name: "Composite",
        className: "FactoryGitHubConfiguration",
        uberParent: "FactoryRepoConfiguration",
        polymorphicDiscriminator: FactoryRepoConfiguration.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, FactoryRepoConfiguration.type.modelProperties), { hostName: {
                serializedName: "hostName",
                type: {
                    name: "String"
                }
            }, clientId: {
                serializedName: "clientId",
                type: {
                    name: "String"
                }
            }, clientSecret: {
                serializedName: "clientSecret",
                type: {
                    name: "Composite",
                    className: "GitHubClientSecret"
                }
            } })
    }
};
export const Factory = {
    type: {
        name: "Composite",
        className: "Factory",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "FactoryIdentity"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, createTime: {
                serializedName: "properties.createTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, version: {
                serializedName: "properties.version",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, purviewConfiguration: {
                serializedName: "properties.purviewConfiguration",
                type: {
                    name: "Composite",
                    className: "PurviewConfiguration"
                }
            }, repoConfiguration: {
                serializedName: "properties.repoConfiguration",
                type: {
                    name: "Composite",
                    className: "FactoryRepoConfiguration"
                }
            }, globalParameters: {
                serializedName: "properties.globalParameters",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Composite",
                            className: "GlobalParameterSpecification"
                        }
                    }
                }
            }, encryption: {
                serializedName: "properties.encryption",
                type: {
                    name: "Composite",
                    className: "EncryptionConfiguration"
                }
            }, publicNetworkAccess: {
                serializedName: "properties.publicNetworkAccess",
                type: {
                    name: "String"
                }
            } })
    }
};
export const ManagedIntegrationRuntime = {
    serializedName: "Managed",
    type: {
        name: "Composite",
        className: "ManagedIntegrationRuntime",
        uberParent: "IntegrationRuntime",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: IntegrationRuntime.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, IntegrationRuntime.type.modelProperties), { state: {
                serializedName: "state",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, managedVirtualNetwork: {
                serializedName: "managedVirtualNetwork",
                type: {
                    name: "Composite",
                    className: "ManagedVirtualNetworkReference"
                }
            }, computeProperties: {
                serializedName: "typeProperties.computeProperties",
                type: {
                    name: "Composite",
                    className: "IntegrationRuntimeComputeProperties"
                }
            }, ssisProperties: {
                serializedName: "typeProperties.ssisProperties",
                type: {
                    name: "Composite",
                    className: "IntegrationRuntimeSsisProperties"
                }
            }, customerVirtualNetwork: {
                serializedName: "typeProperties.customerVirtualNetwork",
                type: {
                    name: "Composite",
                    className: "IntegrationRuntimeCustomerVirtualNetwork"
                }
            } })
    }
};
export const SelfHostedIntegrationRuntime = {
    serializedName: "SelfHosted",
    type: {
        name: "Composite",
        className: "SelfHostedIntegrationRuntime",
        uberParent: "IntegrationRuntime",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: IntegrationRuntime.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, IntegrationRuntime.type.modelProperties), { linkedInfo: {
                serializedName: "typeProperties.linkedInfo",
                type: {
                    name: "Composite",
                    className: "LinkedIntegrationRuntimeType"
                }
            }, selfContainedInteractiveAuthoringEnabled: {
                serializedName: "typeProperties.selfContainedInteractiveAuthoringEnabled",
                type: {
                    name: "Boolean"
                }
            } })
    }
};
export const IntegrationRuntimeResource = {
    type: {
        name: "Composite",
        className: "IntegrationRuntimeResource",
        modelProperties: Object.assign(Object.assign({}, SubResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "IntegrationRuntime"
                }
            } })
    }
};
export const LinkedServiceResource = {
    type: {
        name: "Composite",
        className: "LinkedServiceResource",
        modelProperties: Object.assign(Object.assign({}, SubResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "LinkedService"
                }
            } })
    }
};
export const DatasetResource = {
    type: {
        name: "Composite",
        className: "DatasetResource",
        modelProperties: Object.assign(Object.assign({}, SubResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "Dataset"
                }
            } })
    }
};
export const PipelineResource = {
    type: {
        name: "Composite",
        className: "PipelineResource",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, SubResource.type.modelProperties), { description: {
                serializedName: "properties.description",
                type: {
                    name: "String"
                }
            }, activities: {
                serializedName: "properties.activities",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Activity"
                        }
                    }
                }
            }, parameters: {
                serializedName: "properties.parameters",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Composite", className: "ParameterSpecification" }
                    }
                }
            }, variables: {
                serializedName: "properties.variables",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Composite", className: "VariableSpecification" }
                    }
                }
            }, concurrency: {
                constraints: {
                    InclusiveMinimum: 1
                },
                serializedName: "properties.concurrency",
                type: {
                    name: "Number"
                }
            }, annotations: {
                serializedName: "properties.annotations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any"
                        }
                    }
                }
            }, runDimensions: {
                serializedName: "properties.runDimensions",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }, folder: {
                serializedName: "properties.folder",
                type: {
                    name: "Composite",
                    className: "PipelineFolder"
                }
            }, policy: {
                serializedName: "properties.policy",
                type: {
                    name: "Composite",
                    className: "PipelinePolicy"
                }
            } })
    }
};
export const TriggerResource = {
    type: {
        name: "Composite",
        className: "TriggerResource",
        modelProperties: Object.assign(Object.assign({}, SubResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "Trigger"
                }
            } })
    }
};
export const DataFlowResource = {
    type: {
        name: "Composite",
        className: "DataFlowResource",
        modelProperties: Object.assign(Object.assign({}, SubResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "DataFlow"
                }
            } })
    }
};
export const ManagedVirtualNetworkResource = {
    type: {
        name: "Composite",
        className: "ManagedVirtualNetworkResource",
        modelProperties: Object.assign(Object.assign({}, SubResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "ManagedVirtualNetwork"
                }
            } })
    }
};
export const ManagedPrivateEndpointResource = {
    type: {
        name: "Composite",
        className: "ManagedPrivateEndpointResource",
        modelProperties: Object.assign(Object.assign({}, SubResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "ManagedPrivateEndpoint"
                }
            } })
    }
};
export const ManagedIdentityCredentialResource = {
    type: {
        name: "Composite",
        className: "ManagedIdentityCredentialResource",
        modelProperties: Object.assign(Object.assign({}, SubResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "ManagedIdentityCredential"
                }
            } })
    }
};
export const PrivateEndpointConnectionResource = {
    type: {
        name: "Composite",
        className: "PrivateEndpointConnectionResource",
        modelProperties: Object.assign(Object.assign({}, SubResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "RemotePrivateEndpointConnection"
                }
            } })
    }
};
export const PrivateLinkConnectionApprovalRequestResource = {
    type: {
        name: "Composite",
        className: "PrivateLinkConnectionApprovalRequestResource",
        modelProperties: Object.assign(Object.assign({}, SubResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "PrivateLinkConnectionApprovalRequest"
                }
            } })
    }
};
export const PrivateLinkResource = {
    type: {
        name: "Composite",
        className: "PrivateLinkResource",
        modelProperties: Object.assign(Object.assign({}, SubResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "PrivateLinkResourceProperties"
                }
            } })
    }
};
export const GlobalParameterResource = {
    type: {
        name: "Composite",
        className: "GlobalParameterResource",
        modelProperties: Object.assign(Object.assign({}, SubResource.type.modelProperties), { properties: {
                serializedName: "properties",
                required: true,
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Composite",
                            className: "GlobalParameterSpecification"
                        }
                    }
                }
            } })
    }
};
export const ChangeDataCaptureResource = {
    type: {
        name: "Composite",
        className: "ChangeDataCaptureResource",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, SubResource.type.modelProperties), { folder: {
                serializedName: "properties.folder",
                type: {
                    name: "Composite",
                    className: "ChangeDataCaptureFolder"
                }
            }, description: {
                serializedName: "properties.description",
                type: {
                    name: "String"
                }
            }, sourceConnectionsInfo: {
                serializedName: "properties.sourceConnectionsInfo",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MapperSourceConnectionsInfo"
                        }
                    }
                }
            }, targetConnectionsInfo: {
                serializedName: "properties.targetConnectionsInfo",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MapperTargetConnectionsInfo"
                        }
                    }
                }
            }, policy: {
                serializedName: "properties.policy",
                type: {
                    name: "Composite",
                    className: "MapperPolicy"
                }
            }, allowVNetOverride: {
                serializedName: "properties.allowVNetOverride",
                type: {
                    name: "Boolean"
                }
            }, status: {
                serializedName: "properties.status",
                type: {
                    name: "String"
                }
            } })
    }
};
export const CredentialResource = {
    type: {
        name: "Composite",
        className: "CredentialResource",
        modelProperties: Object.assign(Object.assign({}, SubResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "Credential"
                }
            } })
    }
};
export const ManagedIntegrationRuntimeStatus = {
    serializedName: "Managed",
    type: {
        name: "Composite",
        className: "ManagedIntegrationRuntimeStatus",
        uberParent: "IntegrationRuntimeStatus",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: IntegrationRuntimeStatus.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, IntegrationRuntimeStatus.type.modelProperties), { createTime: {
                serializedName: "typeProperties.createTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, nodes: {
                serializedName: "typeProperties.nodes",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ManagedIntegrationRuntimeNode"
                        }
                    }
                }
            }, otherErrors: {
                serializedName: "typeProperties.otherErrors",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ManagedIntegrationRuntimeError"
                        }
                    }
                }
            }, lastOperation: {
                serializedName: "typeProperties.lastOperation",
                type: {
                    name: "Composite",
                    className: "ManagedIntegrationRuntimeOperationResult"
                }
            } })
    }
};
export const SelfHostedIntegrationRuntimeStatus = {
    serializedName: "SelfHosted",
    type: {
        name: "Composite",
        className: "SelfHostedIntegrationRuntimeStatus",
        uberParent: "IntegrationRuntimeStatus",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: IntegrationRuntimeStatus.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, IntegrationRuntimeStatus.type.modelProperties), { createTime: {
                serializedName: "typeProperties.createTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, taskQueueId: {
                serializedName: "typeProperties.taskQueueId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, internalChannelEncryption: {
                serializedName: "typeProperties.internalChannelEncryption",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, version: {
                serializedName: "typeProperties.version",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, nodes: {
                serializedName: "typeProperties.nodes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SelfHostedIntegrationRuntimeNode"
                        }
                    }
                }
            }, scheduledUpdateDate: {
                serializedName: "typeProperties.scheduledUpdateDate",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, updateDelayOffset: {
                serializedName: "typeProperties.updateDelayOffset",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, localTimeZoneOffset: {
                serializedName: "typeProperties.localTimeZoneOffset",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, capabilities: {
                serializedName: "typeProperties.capabilities",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }, serviceUrls: {
                serializedName: "typeProperties.serviceUrls",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, autoUpdate: {
                serializedName: "typeProperties.autoUpdate",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, versionStatus: {
                serializedName: "typeProperties.versionStatus",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, links: {
                serializedName: "typeProperties.links",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LinkedIntegrationRuntime"
                        }
                    }
                }
            }, pushedVersion: {
                serializedName: "typeProperties.pushedVersion",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, latestVersion: {
                serializedName: "typeProperties.latestVersion",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, autoUpdateETA: {
                serializedName: "typeProperties.autoUpdateETA",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, selfContainedInteractiveAuthoringEnabled: {
                serializedName: "typeProperties.selfContainedInteractiveAuthoringEnabled",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            } })
    }
};
export const SsisFolder = {
    serializedName: "Folder",
    type: {
        name: "Composite",
        className: "SsisFolder",
        uberParent: "SsisObjectMetadata",
        polymorphicDiscriminator: SsisObjectMetadata.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, SsisObjectMetadata.type.modelProperties)
    }
};
export const SsisProject = {
    serializedName: "Project",
    type: {
        name: "Composite",
        className: "SsisProject",
        uberParent: "SsisObjectMetadata",
        polymorphicDiscriminator: SsisObjectMetadata.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, SsisObjectMetadata.type.modelProperties), { folderId: {
                serializedName: "folderId",
                type: {
                    name: "Number"
                }
            }, version: {
                serializedName: "version",
                type: {
                    name: "Number"
                }
            }, environmentRefs: {
                serializedName: "environmentRefs",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SsisEnvironmentReference"
                        }
                    }
                }
            }, parameters: {
                serializedName: "parameters",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SsisParameter"
                        }
                    }
                }
            } })
    }
};
export const SsisPackage = {
    serializedName: "Package",
    type: {
        name: "Composite",
        className: "SsisPackage",
        uberParent: "SsisObjectMetadata",
        polymorphicDiscriminator: SsisObjectMetadata.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, SsisObjectMetadata.type.modelProperties), { folderId: {
                serializedName: "folderId",
                type: {
                    name: "Number"
                }
            }, projectVersion: {
                serializedName: "projectVersion",
                type: {
                    name: "Number"
                }
            }, projectId: {
                serializedName: "projectId",
                type: {
                    name: "Number"
                }
            }, parameters: {
                serializedName: "parameters",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SsisParameter"
                        }
                    }
                }
            } })
    }
};
export const SsisEnvironment = {
    serializedName: "Environment",
    type: {
        name: "Composite",
        className: "SsisEnvironment",
        uberParent: "SsisObjectMetadata",
        polymorphicDiscriminator: SsisObjectMetadata.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, SsisObjectMetadata.type.modelProperties), { folderId: {
                serializedName: "folderId",
                type: {
                    name: "Number"
                }
            }, variables: {
                serializedName: "variables",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SsisVariable"
                        }
                    }
                }
            } })
    }
};
export const AzureStorageLinkedService = {
    serializedName: "AzureStorage",
    type: {
        name: "Composite",
        className: "AzureStorageLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "any"
                }
            }, accountKey: {
                serializedName: "typeProperties.accountKey",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, sasUri: {
                serializedName: "typeProperties.sasUri",
                type: {
                    name: "any"
                }
            }, sasToken: {
                serializedName: "typeProperties.sasToken",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const AzureBlobStorageLinkedService = {
    serializedName: "AzureBlobStorage",
    type: {
        name: "Composite",
        className: "AzureBlobStorageLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "any"
                }
            }, accountKey: {
                serializedName: "typeProperties.accountKey",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, sasUri: {
                serializedName: "typeProperties.sasUri",
                type: {
                    name: "any"
                }
            }, sasToken: {
                serializedName: "typeProperties.sasToken",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, serviceEndpoint: {
                serializedName: "typeProperties.serviceEndpoint",
                type: {
                    name: "any"
                }
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                type: {
                    name: "any"
                }
            }, servicePrincipalKey: {
                serializedName: "typeProperties.servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, tenant: {
                serializedName: "typeProperties.tenant",
                type: {
                    name: "any"
                }
            }, azureCloudType: {
                serializedName: "typeProperties.azureCloudType",
                type: {
                    name: "any"
                }
            }, accountKind: {
                serializedName: "typeProperties.accountKind",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            }, credential: {
                serializedName: "typeProperties.credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "String"
                }
            }, containerUri: {
                serializedName: "typeProperties.containerUri",
                type: {
                    name: "any"
                }
            } })
    }
};
export const AzureTableStorageLinkedService = {
    serializedName: "AzureTableStorage",
    type: {
        name: "Composite",
        className: "AzureTableStorageLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "any"
                }
            }, accountKey: {
                serializedName: "typeProperties.accountKey",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, sasUri: {
                serializedName: "typeProperties.sasUri",
                type: {
                    name: "any"
                }
            }, sasToken: {
                serializedName: "typeProperties.sasToken",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const AzureSqlDWLinkedService = {
    serializedName: "AzureSqlDW",
    type: {
        name: "Composite",
        className: "AzureSqlDWLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                required: true,
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                type: {
                    name: "any"
                }
            }, servicePrincipalKey: {
                serializedName: "typeProperties.servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, tenant: {
                serializedName: "typeProperties.tenant",
                type: {
                    name: "any"
                }
            }, azureCloudType: {
                serializedName: "typeProperties.azureCloudType",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            }, credential: {
                serializedName: "typeProperties.credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference"
                }
            } })
    }
};
export const SqlServerLinkedService = {
    serializedName: "SqlServer",
    type: {
        name: "Composite",
        className: "SqlServerLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                required: true,
                type: {
                    name: "any"
                }
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            }, alwaysEncryptedSettings: {
                serializedName: "typeProperties.alwaysEncryptedSettings",
                type: {
                    name: "Composite",
                    className: "SqlAlwaysEncryptedProperties"
                }
            } })
    }
};
export const AmazonRdsForSqlServerLinkedService = {
    serializedName: "AmazonRdsForSqlServer",
    type: {
        name: "Composite",
        className: "AmazonRdsForSqlServerLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                required: true,
                type: {
                    name: "any"
                }
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            }, alwaysEncryptedSettings: {
                serializedName: "typeProperties.alwaysEncryptedSettings",
                type: {
                    name: "Composite",
                    className: "SqlAlwaysEncryptedProperties"
                }
            } })
    }
};
export const AzureSqlDatabaseLinkedService = {
    serializedName: "AzureSqlDatabase",
    type: {
        name: "Composite",
        className: "AzureSqlDatabaseLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                required: true,
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                type: {
                    name: "any"
                }
            }, servicePrincipalKey: {
                serializedName: "typeProperties.servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, tenant: {
                serializedName: "typeProperties.tenant",
                type: {
                    name: "any"
                }
            }, azureCloudType: {
                serializedName: "typeProperties.azureCloudType",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            }, alwaysEncryptedSettings: {
                serializedName: "typeProperties.alwaysEncryptedSettings",
                type: {
                    name: "Composite",
                    className: "SqlAlwaysEncryptedProperties"
                }
            }, credential: {
                serializedName: "typeProperties.credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference"
                }
            } })
    }
};
export const AzureSqlMILinkedService = {
    serializedName: "AzureSqlMI",
    type: {
        name: "Composite",
        className: "AzureSqlMILinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                required: true,
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                type: {
                    name: "any"
                }
            }, servicePrincipalKey: {
                serializedName: "typeProperties.servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, tenant: {
                serializedName: "typeProperties.tenant",
                type: {
                    name: "any"
                }
            }, azureCloudType: {
                serializedName: "typeProperties.azureCloudType",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            }, alwaysEncryptedSettings: {
                serializedName: "typeProperties.alwaysEncryptedSettings",
                type: {
                    name: "Composite",
                    className: "SqlAlwaysEncryptedProperties"
                }
            }, credential: {
                serializedName: "typeProperties.credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference"
                }
            } })
    }
};
export const AzureBatchLinkedService = {
    serializedName: "AzureBatch",
    type: {
        name: "Composite",
        className: "AzureBatchLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { accountName: {
                serializedName: "typeProperties.accountName",
                required: true,
                type: {
                    name: "any"
                }
            }, accessKey: {
                serializedName: "typeProperties.accessKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, batchUri: {
                serializedName: "typeProperties.batchUri",
                required: true,
                type: {
                    name: "any"
                }
            }, poolName: {
                serializedName: "typeProperties.poolName",
                required: true,
                type: {
                    name: "any"
                }
            }, linkedServiceName: {
                serializedName: "typeProperties.linkedServiceName",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            }, credential: {
                serializedName: "typeProperties.credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference"
                }
            } })
    }
};
export const AzureKeyVaultLinkedService = {
    serializedName: "AzureKeyVault",
    type: {
        name: "Composite",
        className: "AzureKeyVaultLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { baseUrl: {
                serializedName: "typeProperties.baseUrl",
                required: true,
                type: {
                    name: "any"
                }
            }, credential: {
                serializedName: "typeProperties.credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference"
                }
            } })
    }
};
export const CosmosDbLinkedService = {
    serializedName: "CosmosDb",
    type: {
        name: "Composite",
        className: "CosmosDbLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "any"
                }
            }, accountEndpoint: {
                serializedName: "typeProperties.accountEndpoint",
                type: {
                    name: "any"
                }
            }, database: {
                serializedName: "typeProperties.database",
                type: {
                    name: "any"
                }
            }, accountKey: {
                serializedName: "typeProperties.accountKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                type: {
                    name: "any"
                }
            }, servicePrincipalCredentialType: {
                serializedName: "typeProperties.servicePrincipalCredentialType",
                type: {
                    name: "any"
                }
            }, servicePrincipalCredential: {
                serializedName: "typeProperties.servicePrincipalCredential",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, tenant: {
                serializedName: "typeProperties.tenant",
                type: {
                    name: "any"
                }
            }, azureCloudType: {
                serializedName: "typeProperties.azureCloudType",
                type: {
                    name: "any"
                }
            }, connectionMode: {
                serializedName: "typeProperties.connectionMode",
                type: {
                    name: "String"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            }, credential: {
                serializedName: "typeProperties.credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference"
                }
            } })
    }
};
export const DynamicsLinkedService = {
    serializedName: "Dynamics",
    type: {
        name: "Composite",
        className: "DynamicsLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { deploymentType: {
                serializedName: "typeProperties.deploymentType",
                required: true,
                type: {
                    name: "any"
                }
            }, hostName: {
                serializedName: "typeProperties.hostName",
                type: {
                    name: "any"
                }
            }, port: {
                serializedName: "typeProperties.port",
                type: {
                    name: "any"
                }
            }, serviceUri: {
                serializedName: "typeProperties.serviceUri",
                type: {
                    name: "any"
                }
            }, organizationName: {
                serializedName: "typeProperties.organizationName",
                type: {
                    name: "any"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                required: true,
                type: {
                    name: "any"
                }
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                type: {
                    name: "any"
                }
            }, servicePrincipalCredentialType: {
                serializedName: "typeProperties.servicePrincipalCredentialType",
                type: {
                    name: "any"
                }
            }, servicePrincipalCredential: {
                serializedName: "typeProperties.servicePrincipalCredential",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            }, credential: {
                serializedName: "typeProperties.credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference"
                }
            } })
    }
};
export const DynamicsCrmLinkedService = {
    serializedName: "DynamicsCrm",
    type: {
        name: "Composite",
        className: "DynamicsCrmLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { deploymentType: {
                serializedName: "typeProperties.deploymentType",
                required: true,
                type: {
                    name: "any"
                }
            }, hostName: {
                serializedName: "typeProperties.hostName",
                type: {
                    name: "any"
                }
            }, port: {
                serializedName: "typeProperties.port",
                type: {
                    name: "any"
                }
            }, serviceUri: {
                serializedName: "typeProperties.serviceUri",
                type: {
                    name: "any"
                }
            }, organizationName: {
                serializedName: "typeProperties.organizationName",
                type: {
                    name: "any"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                required: true,
                type: {
                    name: "any"
                }
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                type: {
                    name: "any"
                }
            }, servicePrincipalCredentialType: {
                serializedName: "typeProperties.servicePrincipalCredentialType",
                type: {
                    name: "any"
                }
            }, servicePrincipalCredential: {
                serializedName: "typeProperties.servicePrincipalCredential",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const CommonDataServiceForAppsLinkedService = {
    serializedName: "CommonDataServiceForApps",
    type: {
        name: "Composite",
        className: "CommonDataServiceForAppsLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { deploymentType: {
                serializedName: "typeProperties.deploymentType",
                required: true,
                type: {
                    name: "any"
                }
            }, hostName: {
                serializedName: "typeProperties.hostName",
                type: {
                    name: "any"
                }
            }, port: {
                serializedName: "typeProperties.port",
                type: {
                    name: "any"
                }
            }, serviceUri: {
                serializedName: "typeProperties.serviceUri",
                type: {
                    name: "any"
                }
            }, organizationName: {
                serializedName: "typeProperties.organizationName",
                type: {
                    name: "any"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                required: true,
                type: {
                    name: "any"
                }
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                type: {
                    name: "any"
                }
            }, servicePrincipalCredentialType: {
                serializedName: "typeProperties.servicePrincipalCredentialType",
                type: {
                    name: "any"
                }
            }, servicePrincipalCredential: {
                serializedName: "typeProperties.servicePrincipalCredential",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const HDInsightLinkedService = {
    serializedName: "HDInsight",
    type: {
        name: "Composite",
        className: "HDInsightLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { clusterUri: {
                serializedName: "typeProperties.clusterUri",
                required: true,
                type: {
                    name: "any"
                }
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, linkedServiceName: {
                serializedName: "typeProperties.linkedServiceName",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            }, hcatalogLinkedServiceName: {
                serializedName: "typeProperties.hcatalogLinkedServiceName",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            }, isEspEnabled: {
                serializedName: "typeProperties.isEspEnabled",
                type: {
                    name: "any"
                }
            }, fileSystem: {
                serializedName: "typeProperties.fileSystem",
                type: {
                    name: "any"
                }
            } })
    }
};
export const FileServerLinkedService = {
    serializedName: "FileServer",
    type: {
        name: "Composite",
        className: "FileServerLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { host: {
                serializedName: "typeProperties.host",
                required: true,
                type: {
                    name: "any"
                }
            }, userId: {
                serializedName: "typeProperties.userId",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const AzureFileStorageLinkedService = {
    serializedName: "AzureFileStorage",
    type: {
        name: "Composite",
        className: "AzureFileStorageLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { host: {
                serializedName: "typeProperties.host",
                type: {
                    name: "any"
                }
            }, userId: {
                serializedName: "typeProperties.userId",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, connectionString: {
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "any"
                }
            }, accountKey: {
                serializedName: "typeProperties.accountKey",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, sasUri: {
                serializedName: "typeProperties.sasUri",
                type: {
                    name: "any"
                }
            }, sasToken: {
                serializedName: "typeProperties.sasToken",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, fileShare: {
                serializedName: "typeProperties.fileShare",
                type: {
                    name: "any"
                }
            }, snapshot: {
                serializedName: "typeProperties.snapshot",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const AmazonS3CompatibleLinkedService = {
    serializedName: "AmazonS3Compatible",
    type: {
        name: "Composite",
        className: "AmazonS3CompatibleLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { accessKeyId: {
                serializedName: "typeProperties.accessKeyId",
                type: {
                    name: "any"
                }
            }, secretAccessKey: {
                serializedName: "typeProperties.secretAccessKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, serviceUrl: {
                serializedName: "typeProperties.serviceUrl",
                type: {
                    name: "any"
                }
            }, forcePathStyle: {
                serializedName: "typeProperties.forcePathStyle",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const OracleCloudStorageLinkedService = {
    serializedName: "OracleCloudStorage",
    type: {
        name: "Composite",
        className: "OracleCloudStorageLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { accessKeyId: {
                serializedName: "typeProperties.accessKeyId",
                type: {
                    name: "any"
                }
            }, secretAccessKey: {
                serializedName: "typeProperties.secretAccessKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, serviceUrl: {
                serializedName: "typeProperties.serviceUrl",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const GoogleCloudStorageLinkedService = {
    serializedName: "GoogleCloudStorage",
    type: {
        name: "Composite",
        className: "GoogleCloudStorageLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { accessKeyId: {
                serializedName: "typeProperties.accessKeyId",
                type: {
                    name: "any"
                }
            }, secretAccessKey: {
                serializedName: "typeProperties.secretAccessKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, serviceUrl: {
                serializedName: "typeProperties.serviceUrl",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const OracleLinkedService = {
    serializedName: "Oracle",
    type: {
        name: "Composite",
        className: "OracleLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                required: true,
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const AmazonRdsForOracleLinkedService = {
    serializedName: "AmazonRdsForOracle",
    type: {
        name: "Composite",
        className: "AmazonRdsForOracleLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                required: true,
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const AzureMySqlLinkedService = {
    serializedName: "AzureMySql",
    type: {
        name: "Composite",
        className: "AzureMySqlLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                required: true,
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const MySqlLinkedService = {
    serializedName: "MySql",
    type: {
        name: "Composite",
        className: "MySqlLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                required: true,
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const PostgreSqlLinkedService = {
    serializedName: "PostgreSql",
    type: {
        name: "Composite",
        className: "PostgreSqlLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                required: true,
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const SybaseLinkedService = {
    serializedName: "Sybase",
    type: {
        name: "Composite",
        className: "SybaseLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { server: {
                serializedName: "typeProperties.server",
                required: true,
                type: {
                    name: "any"
                }
            }, database: {
                serializedName: "typeProperties.database",
                required: true,
                type: {
                    name: "any"
                }
            }, schema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "String"
                }
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const Db2LinkedService = {
    serializedName: "Db2",
    type: {
        name: "Composite",
        className: "Db2LinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "any"
                }
            }, server: {
                serializedName: "typeProperties.server",
                type: {
                    name: "any"
                }
            }, database: {
                serializedName: "typeProperties.database",
                type: {
                    name: "any"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "String"
                }
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, packageCollection: {
                serializedName: "typeProperties.packageCollection",
                type: {
                    name: "any"
                }
            }, certificateCommonName: {
                serializedName: "typeProperties.certificateCommonName",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const TeradataLinkedService = {
    serializedName: "Teradata",
    type: {
        name: "Composite",
        className: "TeradataLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "any"
                }
            }, server: {
                serializedName: "typeProperties.server",
                type: {
                    name: "any"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "String"
                }
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const AzureMLLinkedService = {
    serializedName: "AzureML",
    type: {
        name: "Composite",
        className: "AzureMLLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { mlEndpoint: {
                serializedName: "typeProperties.mlEndpoint",
                required: true,
                type: {
                    name: "any"
                }
            }, apiKey: {
                serializedName: "typeProperties.apiKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, updateResourceEndpoint: {
                serializedName: "typeProperties.updateResourceEndpoint",
                type: {
                    name: "any"
                }
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                type: {
                    name: "any"
                }
            }, servicePrincipalKey: {
                serializedName: "typeProperties.servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, tenant: {
                serializedName: "typeProperties.tenant",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            }, authentication: {
                serializedName: "typeProperties.authentication",
                type: {
                    name: "any"
                }
            } })
    }
};
export const AzureMLServiceLinkedService = {
    serializedName: "AzureMLService",
    type: {
        name: "Composite",
        className: "AzureMLServiceLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { subscriptionId: {
                serializedName: "typeProperties.subscriptionId",
                required: true,
                type: {
                    name: "any"
                }
            }, resourceGroupName: {
                serializedName: "typeProperties.resourceGroupName",
                required: true,
                type: {
                    name: "any"
                }
            }, mlWorkspaceName: {
                serializedName: "typeProperties.mlWorkspaceName",
                required: true,
                type: {
                    name: "any"
                }
            }, authentication: {
                serializedName: "typeProperties.authentication",
                type: {
                    name: "any"
                }
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                type: {
                    name: "any"
                }
            }, servicePrincipalKey: {
                serializedName: "typeProperties.servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, tenant: {
                serializedName: "typeProperties.tenant",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const OdbcLinkedService = {
    serializedName: "Odbc",
    type: {
        name: "Composite",
        className: "OdbcLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                required: true,
                type: {
                    name: "any"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "any"
                }
            }, credential: {
                serializedName: "typeProperties.credential",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const InformixLinkedService = {
    serializedName: "Informix",
    type: {
        name: "Composite",
        className: "InformixLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                required: true,
                type: {
                    name: "any"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "any"
                }
            }, credential: {
                serializedName: "typeProperties.credential",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const MicrosoftAccessLinkedService = {
    serializedName: "MicrosoftAccess",
    type: {
        name: "Composite",
        className: "MicrosoftAccessLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                required: true,
                type: {
                    name: "any"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "any"
                }
            }, credential: {
                serializedName: "typeProperties.credential",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const HdfsLinkedService = {
    serializedName: "Hdfs",
    type: {
        name: "Composite",
        className: "HdfsLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { url: {
                serializedName: "typeProperties.url",
                required: true,
                type: {
                    name: "any"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            } })
    }
};
export const ODataLinkedService = {
    serializedName: "OData",
    type: {
        name: "Composite",
        className: "ODataLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { url: {
                serializedName: "typeProperties.url",
                required: true,
                type: {
                    name: "any"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "String"
                }
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, authHeaders: {
                serializedName: "typeProperties.authHeaders",
                type: {
                    name: "any"
                }
            }, tenant: {
                serializedName: "typeProperties.tenant",
                type: {
                    name: "any"
                }
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                type: {
                    name: "any"
                }
            }, azureCloudType: {
                serializedName: "typeProperties.azureCloudType",
                type: {
                    name: "any"
                }
            }, aadResourceId: {
                serializedName: "typeProperties.aadResourceId",
                type: {
                    name: "any"
                }
            }, aadServicePrincipalCredentialType: {
                serializedName: "typeProperties.aadServicePrincipalCredentialType",
                type: {
                    name: "String"
                }
            }, servicePrincipalKey: {
                serializedName: "typeProperties.servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, servicePrincipalEmbeddedCert: {
                serializedName: "typeProperties.servicePrincipalEmbeddedCert",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, servicePrincipalEmbeddedCertPassword: {
                serializedName: "typeProperties.servicePrincipalEmbeddedCertPassword",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const WebLinkedService = {
    serializedName: "Web",
    type: {
        name: "Composite",
        className: "WebLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { typeProperties: {
                serializedName: "typeProperties",
                type: {
                    name: "Composite",
                    className: "WebLinkedServiceTypeProperties"
                }
            } })
    }
};
export const CassandraLinkedService = {
    serializedName: "Cassandra",
    type: {
        name: "Composite",
        className: "CassandraLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { host: {
                serializedName: "typeProperties.host",
                required: true,
                type: {
                    name: "any"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "any"
                }
            }, port: {
                serializedName: "typeProperties.port",
                type: {
                    name: "any"
                }
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const MongoDbLinkedService = {
    serializedName: "MongoDb",
    type: {
        name: "Composite",
        className: "MongoDbLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { server: {
                serializedName: "typeProperties.server",
                required: true,
                type: {
                    name: "any"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "String"
                }
            }, databaseName: {
                serializedName: "typeProperties.databaseName",
                required: true,
                type: {
                    name: "any"
                }
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, authSource: {
                serializedName: "typeProperties.authSource",
                type: {
                    name: "any"
                }
            }, port: {
                serializedName: "typeProperties.port",
                type: {
                    name: "any"
                }
            }, enableSsl: {
                serializedName: "typeProperties.enableSsl",
                type: {
                    name: "any"
                }
            }, allowSelfSignedServerCert: {
                serializedName: "typeProperties.allowSelfSignedServerCert",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const MongoDbAtlasLinkedService = {
    serializedName: "MongoDbAtlas",
    type: {
        name: "Composite",
        className: "MongoDbAtlasLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                required: true,
                type: {
                    name: "any"
                }
            }, database: {
                serializedName: "typeProperties.database",
                required: true,
                type: {
                    name: "any"
                }
            }, driverVersion: {
                serializedName: "typeProperties.driverVersion",
                type: {
                    name: "any"
                }
            } })
    }
};
export const MongoDbV2LinkedService = {
    serializedName: "MongoDbV2",
    type: {
        name: "Composite",
        className: "MongoDbV2LinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                required: true,
                type: {
                    name: "any"
                }
            }, database: {
                serializedName: "typeProperties.database",
                required: true,
                type: {
                    name: "any"
                }
            } })
    }
};
export const CosmosDbMongoDbApiLinkedService = {
    serializedName: "CosmosDbMongoDbApi",
    type: {
        name: "Composite",
        className: "CosmosDbMongoDbApiLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { isServerVersionAbove32: {
                serializedName: "typeProperties.isServerVersionAbove32",
                type: {
                    name: "any"
                }
            }, connectionString: {
                serializedName: "typeProperties.connectionString",
                required: true,
                type: {
                    name: "any"
                }
            }, database: {
                serializedName: "typeProperties.database",
                required: true,
                type: {
                    name: "any"
                }
            } })
    }
};
export const AzureDataLakeStoreLinkedService = {
    serializedName: "AzureDataLakeStore",
    type: {
        name: "Composite",
        className: "AzureDataLakeStoreLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { dataLakeStoreUri: {
                serializedName: "typeProperties.dataLakeStoreUri",
                required: true,
                type: {
                    name: "any"
                }
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                type: {
                    name: "any"
                }
            }, servicePrincipalKey: {
                serializedName: "typeProperties.servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, tenant: {
                serializedName: "typeProperties.tenant",
                type: {
                    name: "any"
                }
            }, azureCloudType: {
                serializedName: "typeProperties.azureCloudType",
                type: {
                    name: "any"
                }
            }, accountName: {
                serializedName: "typeProperties.accountName",
                type: {
                    name: "any"
                }
            }, subscriptionId: {
                serializedName: "typeProperties.subscriptionId",
                type: {
                    name: "any"
                }
            }, resourceGroupName: {
                serializedName: "typeProperties.resourceGroupName",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            }, credential: {
                serializedName: "typeProperties.credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference"
                }
            } })
    }
};
export const AzureBlobFSLinkedService = {
    serializedName: "AzureBlobFS",
    type: {
        name: "Composite",
        className: "AzureBlobFSLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { url: {
                serializedName: "typeProperties.url",
                type: {
                    name: "any"
                }
            }, accountKey: {
                serializedName: "typeProperties.accountKey",
                type: {
                    name: "any"
                }
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                type: {
                    name: "any"
                }
            }, servicePrincipalKey: {
                serializedName: "typeProperties.servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, tenant: {
                serializedName: "typeProperties.tenant",
                type: {
                    name: "any"
                }
            }, azureCloudType: {
                serializedName: "typeProperties.azureCloudType",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            }, credential: {
                serializedName: "typeProperties.credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference"
                }
            }, servicePrincipalCredentialType: {
                serializedName: "typeProperties.servicePrincipalCredentialType",
                type: {
                    name: "any"
                }
            }, servicePrincipalCredential: {
                serializedName: "typeProperties.servicePrincipalCredential",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, sasUri: {
                serializedName: "typeProperties.sasUri",
                type: {
                    name: "any"
                }
            }, sasToken: {
                serializedName: "typeProperties.sasToken",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            } })
    }
};
export const Office365LinkedService = {
    serializedName: "Office365",
    type: {
        name: "Composite",
        className: "Office365LinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { office365TenantId: {
                serializedName: "typeProperties.office365TenantId",
                required: true,
                type: {
                    name: "any"
                }
            }, servicePrincipalTenantId: {
                serializedName: "typeProperties.servicePrincipalTenantId",
                required: true,
                type: {
                    name: "any"
                }
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                required: true,
                type: {
                    name: "any"
                }
            }, servicePrincipalKey: {
                serializedName: "typeProperties.servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const SalesforceLinkedService = {
    serializedName: "Salesforce",
    type: {
        name: "Composite",
        className: "SalesforceLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { environmentUrl: {
                serializedName: "typeProperties.environmentUrl",
                type: {
                    name: "any"
                }
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, securityToken: {
                serializedName: "typeProperties.securityToken",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, apiVersion: {
                serializedName: "typeProperties.apiVersion",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const SalesforceServiceCloudLinkedService = {
    serializedName: "SalesforceServiceCloud",
    type: {
        name: "Composite",
        className: "SalesforceServiceCloudLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { environmentUrl: {
                serializedName: "typeProperties.environmentUrl",
                type: {
                    name: "any"
                }
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, securityToken: {
                serializedName: "typeProperties.securityToken",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, apiVersion: {
                serializedName: "typeProperties.apiVersion",
                type: {
                    name: "any"
                }
            }, extendedProperties: {
                serializedName: "typeProperties.extendedProperties",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const SapCloudForCustomerLinkedService = {
    serializedName: "SapCloudForCustomer",
    type: {
        name: "Composite",
        className: "SapCloudForCustomerLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { url: {
                serializedName: "typeProperties.url",
                required: true,
                type: {
                    name: "any"
                }
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const SapEccLinkedService = {
    serializedName: "SapEcc",
    type: {
        name: "Composite",
        className: "SapEccLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { url: {
                serializedName: "typeProperties.url",
                required: true,
                type: {
                    name: "any"
                }
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const SapOpenHubLinkedService = {
    serializedName: "SapOpenHub",
    type: {
        name: "Composite",
        className: "SapOpenHubLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { server: {
                serializedName: "typeProperties.server",
                type: {
                    name: "any"
                }
            }, systemNumber: {
                serializedName: "typeProperties.systemNumber",
                type: {
                    name: "any"
                }
            }, clientId: {
                serializedName: "typeProperties.clientId",
                type: {
                    name: "any"
                }
            }, language: {
                serializedName: "typeProperties.language",
                type: {
                    name: "any"
                }
            }, systemId: {
                serializedName: "typeProperties.systemId",
                type: {
                    name: "any"
                }
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, messageServer: {
                serializedName: "typeProperties.messageServer",
                type: {
                    name: "any"
                }
            }, messageServerService: {
                serializedName: "typeProperties.messageServerService",
                type: {
                    name: "any"
                }
            }, logonGroup: {
                serializedName: "typeProperties.logonGroup",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const SapOdpLinkedService = {
    serializedName: "SapOdp",
    type: {
        name: "Composite",
        className: "SapOdpLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { server: {
                serializedName: "typeProperties.server",
                type: {
                    name: "any"
                }
            }, systemNumber: {
                serializedName: "typeProperties.systemNumber",
                type: {
                    name: "any"
                }
            }, clientId: {
                serializedName: "typeProperties.clientId",
                type: {
                    name: "any"
                }
            }, language: {
                serializedName: "typeProperties.language",
                type: {
                    name: "any"
                }
            }, systemId: {
                serializedName: "typeProperties.systemId",
                type: {
                    name: "any"
                }
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, messageServer: {
                serializedName: "typeProperties.messageServer",
                type: {
                    name: "any"
                }
            }, messageServerService: {
                serializedName: "typeProperties.messageServerService",
                type: {
                    name: "any"
                }
            }, sncMode: {
                serializedName: "typeProperties.sncMode",
                type: {
                    name: "any"
                }
            }, sncMyName: {
                serializedName: "typeProperties.sncMyName",
                type: {
                    name: "any"
                }
            }, sncPartnerName: {
                serializedName: "typeProperties.sncPartnerName",
                type: {
                    name: "any"
                }
            }, sncLibraryPath: {
                serializedName: "typeProperties.sncLibraryPath",
                type: {
                    name: "any"
                }
            }, sncQop: {
                serializedName: "typeProperties.sncQop",
                type: {
                    name: "any"
                }
            }, x509CertificatePath: {
                serializedName: "typeProperties.x509CertificatePath",
                type: {
                    name: "any"
                }
            }, logonGroup: {
                serializedName: "typeProperties.logonGroup",
                type: {
                    name: "any"
                }
            }, subscriberName: {
                serializedName: "typeProperties.subscriberName",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const RestServiceLinkedService = {
    serializedName: "RestService",
    type: {
        name: "Composite",
        className: "RestServiceLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { url: {
                serializedName: "typeProperties.url",
                required: true,
                type: {
                    name: "any"
                }
            }, enableServerCertificateValidation: {
                serializedName: "typeProperties.enableServerCertificateValidation",
                type: {
                    name: "any"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                required: true,
                type: {
                    name: "String"
                }
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, authHeaders: {
                serializedName: "typeProperties.authHeaders",
                type: {
                    name: "any"
                }
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                type: {
                    name: "any"
                }
            }, servicePrincipalKey: {
                serializedName: "typeProperties.servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, tenant: {
                serializedName: "typeProperties.tenant",
                type: {
                    name: "any"
                }
            }, azureCloudType: {
                serializedName: "typeProperties.azureCloudType",
                type: {
                    name: "any"
                }
            }, aadResourceId: {
                serializedName: "typeProperties.aadResourceId",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            }, credential: {
                serializedName: "typeProperties.credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference"
                }
            }, clientId: {
                serializedName: "typeProperties.clientId",
                type: {
                    name: "any"
                }
            }, clientSecret: {
                serializedName: "typeProperties.clientSecret",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, tokenEndpoint: {
                serializedName: "typeProperties.tokenEndpoint",
                type: {
                    name: "any"
                }
            }, resource: {
                serializedName: "typeProperties.resource",
                type: {
                    name: "any"
                }
            }, scope: {
                serializedName: "typeProperties.scope",
                type: {
                    name: "any"
                }
            } })
    }
};
export const TeamDeskLinkedService = {
    serializedName: "TeamDesk",
    type: {
        name: "Composite",
        className: "TeamDeskLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { authenticationType: {
                serializedName: "typeProperties.authenticationType",
                required: true,
                type: {
                    name: "String"
                }
            }, url: {
                serializedName: "typeProperties.url",
                required: true,
                type: {
                    name: "any"
                }
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, apiToken: {
                serializedName: "typeProperties.apiToken",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const QuickbaseLinkedService = {
    serializedName: "Quickbase",
    type: {
        name: "Composite",
        className: "QuickbaseLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { url: {
                serializedName: "typeProperties.url",
                required: true,
                type: {
                    name: "any"
                }
            }, userToken: {
                serializedName: "typeProperties.userToken",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const SmartsheetLinkedService = {
    serializedName: "Smartsheet",
    type: {
        name: "Composite",
        className: "SmartsheetLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { apiToken: {
                serializedName: "typeProperties.apiToken",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const ZendeskLinkedService = {
    serializedName: "Zendesk",
    type: {
        name: "Composite",
        className: "ZendeskLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { authenticationType: {
                serializedName: "typeProperties.authenticationType",
                required: true,
                type: {
                    name: "String"
                }
            }, url: {
                serializedName: "typeProperties.url",
                required: true,
                type: {
                    name: "any"
                }
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, apiToken: {
                serializedName: "typeProperties.apiToken",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const DataworldLinkedService = {
    serializedName: "Dataworld",
    type: {
        name: "Composite",
        className: "DataworldLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { apiToken: {
                serializedName: "typeProperties.apiToken",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const AppFiguresLinkedService = {
    serializedName: "AppFigures",
    type: {
        name: "Composite",
        className: "AppFiguresLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { userName: {
                serializedName: "typeProperties.userName",
                required: true,
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, clientKey: {
                serializedName: "typeProperties.clientKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            } })
    }
};
export const AsanaLinkedService = {
    serializedName: "Asana",
    type: {
        name: "Composite",
        className: "AsanaLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { apiToken: {
                serializedName: "typeProperties.apiToken",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const TwilioLinkedService = {
    serializedName: "Twilio",
    type: {
        name: "Composite",
        className: "TwilioLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { userName: {
                serializedName: "typeProperties.userName",
                required: true,
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            } })
    }
};
export const GoogleSheetsLinkedService = {
    serializedName: "GoogleSheets",
    type: {
        name: "Composite",
        className: "GoogleSheetsLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { apiToken: {
                serializedName: "typeProperties.apiToken",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const AmazonS3LinkedService = {
    serializedName: "AmazonS3",
    type: {
        name: "Composite",
        className: "AmazonS3LinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "any"
                }
            }, accessKeyId: {
                serializedName: "typeProperties.accessKeyId",
                type: {
                    name: "any"
                }
            }, secretAccessKey: {
                serializedName: "typeProperties.secretAccessKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, serviceUrl: {
                serializedName: "typeProperties.serviceUrl",
                type: {
                    name: "any"
                }
            }, sessionToken: {
                serializedName: "typeProperties.sessionToken",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const AmazonRedshiftLinkedService = {
    serializedName: "AmazonRedshift",
    type: {
        name: "Composite",
        className: "AmazonRedshiftLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { server: {
                serializedName: "typeProperties.server",
                required: true,
                type: {
                    name: "any"
                }
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, database: {
                serializedName: "typeProperties.database",
                required: true,
                type: {
                    name: "any"
                }
            }, port: {
                serializedName: "typeProperties.port",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const CustomDataSourceLinkedService = {
    serializedName: "CustomDataSource",
    type: {
        name: "Composite",
        className: "CustomDataSourceLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { typeProperties: {
                serializedName: "typeProperties",
                required: true,
                type: {
                    name: "any"
                }
            } })
    }
};
export const AzureSearchLinkedService = {
    serializedName: "AzureSearch",
    type: {
        name: "Composite",
        className: "AzureSearchLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { url: {
                serializedName: "typeProperties.url",
                required: true,
                type: {
                    name: "any"
                }
            }, key: {
                serializedName: "typeProperties.key",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const HttpLinkedService = {
    serializedName: "HttpServer",
    type: {
        name: "Composite",
        className: "HttpLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { url: {
                serializedName: "typeProperties.url",
                required: true,
                type: {
                    name: "any"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "String"
                }
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, authHeaders: {
                serializedName: "typeProperties.authHeaders",
                type: {
                    name: "any"
                }
            }, embeddedCertData: {
                serializedName: "typeProperties.embeddedCertData",
                type: {
                    name: "any"
                }
            }, certThumbprint: {
                serializedName: "typeProperties.certThumbprint",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            }, enableServerCertificateValidation: {
                serializedName: "typeProperties.enableServerCertificateValidation",
                type: {
                    name: "any"
                }
            } })
    }
};
export const FtpServerLinkedService = {
    serializedName: "FtpServer",
    type: {
        name: "Composite",
        className: "FtpServerLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { host: {
                serializedName: "typeProperties.host",
                required: true,
                type: {
                    name: "any"
                }
            }, port: {
                serializedName: "typeProperties.port",
                type: {
                    name: "any"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "String"
                }
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            }, enableSsl: {
                serializedName: "typeProperties.enableSsl",
                type: {
                    name: "any"
                }
            }, enableServerCertificateValidation: {
                serializedName: "typeProperties.enableServerCertificateValidation",
                type: {
                    name: "any"
                }
            } })
    }
};
export const SftpServerLinkedService = {
    serializedName: "Sftp",
    type: {
        name: "Composite",
        className: "SftpServerLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { host: {
                serializedName: "typeProperties.host",
                required: true,
                type: {
                    name: "any"
                }
            }, port: {
                serializedName: "typeProperties.port",
                type: {
                    name: "any"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "String"
                }
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            }, privateKeyPath: {
                serializedName: "typeProperties.privateKeyPath",
                type: {
                    name: "any"
                }
            }, privateKeyContent: {
                serializedName: "typeProperties.privateKeyContent",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, passPhrase: {
                serializedName: "typeProperties.passPhrase",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, skipHostKeyValidation: {
                serializedName: "typeProperties.skipHostKeyValidation",
                type: {
                    name: "any"
                }
            }, hostKeyFingerprint: {
                serializedName: "typeProperties.hostKeyFingerprint",
                type: {
                    name: "any"
                }
            } })
    }
};
export const SapBWLinkedService = {
    serializedName: "SapBW",
    type: {
        name: "Composite",
        className: "SapBWLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { server: {
                serializedName: "typeProperties.server",
                required: true,
                type: {
                    name: "any"
                }
            }, systemNumber: {
                serializedName: "typeProperties.systemNumber",
                required: true,
                type: {
                    name: "any"
                }
            }, clientId: {
                serializedName: "typeProperties.clientId",
                required: true,
                type: {
                    name: "any"
                }
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const SapHanaLinkedService = {
    serializedName: "SapHana",
    type: {
        name: "Composite",
        className: "SapHanaLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "any"
                }
            }, server: {
                serializedName: "typeProperties.server",
                type: {
                    name: "any"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "String"
                }
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const AmazonMWSLinkedService = {
    serializedName: "AmazonMWS",
    type: {
        name: "Composite",
        className: "AmazonMWSLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { endpoint: {
                serializedName: "typeProperties.endpoint",
                required: true,
                type: {
                    name: "any"
                }
            }, marketplaceID: {
                serializedName: "typeProperties.marketplaceID",
                required: true,
                type: {
                    name: "any"
                }
            }, sellerID: {
                serializedName: "typeProperties.sellerID",
                required: true,
                type: {
                    name: "any"
                }
            }, mwsAuthToken: {
                serializedName: "typeProperties.mwsAuthToken",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, accessKeyId: {
                serializedName: "typeProperties.accessKeyId",
                required: true,
                type: {
                    name: "any"
                }
            }, secretKey: {
                serializedName: "typeProperties.secretKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "any"
                }
            }, useHostVerification: {
                serializedName: "typeProperties.useHostVerification",
                type: {
                    name: "any"
                }
            }, usePeerVerification: {
                serializedName: "typeProperties.usePeerVerification",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const AzurePostgreSqlLinkedService = {
    serializedName: "AzurePostgreSql",
    type: {
        name: "Composite",
        className: "AzurePostgreSqlLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const ConcurLinkedService = {
    serializedName: "Concur",
    type: {
        name: "Composite",
        className: "ConcurLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionProperties: {
                serializedName: "typeProperties.connectionProperties",
                type: {
                    name: "any"
                }
            }, clientId: {
                serializedName: "typeProperties.clientId",
                required: true,
                type: {
                    name: "any"
                }
            }, username: {
                serializedName: "typeProperties.username",
                required: true,
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "any"
                }
            }, useHostVerification: {
                serializedName: "typeProperties.useHostVerification",
                type: {
                    name: "any"
                }
            }, usePeerVerification: {
                serializedName: "typeProperties.usePeerVerification",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const CouchbaseLinkedService = {
    serializedName: "Couchbase",
    type: {
        name: "Composite",
        className: "CouchbaseLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "any"
                }
            }, credString: {
                serializedName: "typeProperties.credString",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const DrillLinkedService = {
    serializedName: "Drill",
    type: {
        name: "Composite",
        className: "DrillLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "any"
                }
            }, pwd: {
                serializedName: "typeProperties.pwd",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const EloquaLinkedService = {
    serializedName: "Eloqua",
    type: {
        name: "Composite",
        className: "EloquaLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { endpoint: {
                serializedName: "typeProperties.endpoint",
                required: true,
                type: {
                    name: "any"
                }
            }, username: {
                serializedName: "typeProperties.username",
                required: true,
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "any"
                }
            }, useHostVerification: {
                serializedName: "typeProperties.useHostVerification",
                type: {
                    name: "any"
                }
            }, usePeerVerification: {
                serializedName: "typeProperties.usePeerVerification",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const GoogleBigQueryLinkedService = {
    serializedName: "GoogleBigQuery",
    type: {
        name: "Composite",
        className: "GoogleBigQueryLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { project: {
                serializedName: "typeProperties.project",
                required: true,
                type: {
                    name: "any"
                }
            }, additionalProjects: {
                serializedName: "typeProperties.additionalProjects",
                type: {
                    name: "any"
                }
            }, requestGoogleDriveScope: {
                serializedName: "typeProperties.requestGoogleDriveScope",
                type: {
                    name: "any"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                required: true,
                type: {
                    name: "String"
                }
            }, refreshToken: {
                serializedName: "typeProperties.refreshToken",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, clientId: {
                serializedName: "typeProperties.clientId",
                type: {
                    name: "any"
                }
            }, clientSecret: {
                serializedName: "typeProperties.clientSecret",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, email: {
                serializedName: "typeProperties.email",
                type: {
                    name: "any"
                }
            }, keyFilePath: {
                serializedName: "typeProperties.keyFilePath",
                type: {
                    name: "any"
                }
            }, trustedCertPath: {
                serializedName: "typeProperties.trustedCertPath",
                type: {
                    name: "any"
                }
            }, useSystemTrustStore: {
                serializedName: "typeProperties.useSystemTrustStore",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const GreenplumLinkedService = {
    serializedName: "Greenplum",
    type: {
        name: "Composite",
        className: "GreenplumLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "any"
                }
            }, pwd: {
                serializedName: "typeProperties.pwd",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const HBaseLinkedService = {
    serializedName: "HBase",
    type: {
        name: "Composite",
        className: "HBaseLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { host: {
                serializedName: "typeProperties.host",
                required: true,
                type: {
                    name: "any"
                }
            }, port: {
                serializedName: "typeProperties.port",
                type: {
                    name: "any"
                }
            }, httpPath: {
                serializedName: "typeProperties.httpPath",
                type: {
                    name: "any"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                required: true,
                type: {
                    name: "String"
                }
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, enableSsl: {
                serializedName: "typeProperties.enableSsl",
                type: {
                    name: "any"
                }
            }, trustedCertPath: {
                serializedName: "typeProperties.trustedCertPath",
                type: {
                    name: "any"
                }
            }, allowHostNameCNMismatch: {
                serializedName: "typeProperties.allowHostNameCNMismatch",
                type: {
                    name: "any"
                }
            }, allowSelfSignedServerCert: {
                serializedName: "typeProperties.allowSelfSignedServerCert",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const HiveLinkedService = {
    serializedName: "Hive",
    type: {
        name: "Composite",
        className: "HiveLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { host: {
                serializedName: "typeProperties.host",
                required: true,
                type: {
                    name: "any"
                }
            }, port: {
                serializedName: "typeProperties.port",
                type: {
                    name: "any"
                }
            }, serverType: {
                serializedName: "typeProperties.serverType",
                type: {
                    name: "String"
                }
            }, thriftTransportProtocol: {
                serializedName: "typeProperties.thriftTransportProtocol",
                type: {
                    name: "String"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                required: true,
                type: {
                    name: "String"
                }
            }, serviceDiscoveryMode: {
                serializedName: "typeProperties.serviceDiscoveryMode",
                type: {
                    name: "any"
                }
            }, zooKeeperNameSpace: {
                serializedName: "typeProperties.zooKeeperNameSpace",
                type: {
                    name: "any"
                }
            }, useNativeQuery: {
                serializedName: "typeProperties.useNativeQuery",
                type: {
                    name: "any"
                }
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, httpPath: {
                serializedName: "typeProperties.httpPath",
                type: {
                    name: "any"
                }
            }, enableSsl: {
                serializedName: "typeProperties.enableSsl",
                type: {
                    name: "any"
                }
            }, trustedCertPath: {
                serializedName: "typeProperties.trustedCertPath",
                type: {
                    name: "any"
                }
            }, useSystemTrustStore: {
                serializedName: "typeProperties.useSystemTrustStore",
                type: {
                    name: "any"
                }
            }, allowHostNameCNMismatch: {
                serializedName: "typeProperties.allowHostNameCNMismatch",
                type: {
                    name: "any"
                }
            }, allowSelfSignedServerCert: {
                serializedName: "typeProperties.allowSelfSignedServerCert",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const HubspotLinkedService = {
    serializedName: "Hubspot",
    type: {
        name: "Composite",
        className: "HubspotLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { clientId: {
                serializedName: "typeProperties.clientId",
                required: true,
                type: {
                    name: "any"
                }
            }, clientSecret: {
                serializedName: "typeProperties.clientSecret",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, accessToken: {
                serializedName: "typeProperties.accessToken",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, refreshToken: {
                serializedName: "typeProperties.refreshToken",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "any"
                }
            }, useHostVerification: {
                serializedName: "typeProperties.useHostVerification",
                type: {
                    name: "any"
                }
            }, usePeerVerification: {
                serializedName: "typeProperties.usePeerVerification",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const ImpalaLinkedService = {
    serializedName: "Impala",
    type: {
        name: "Composite",
        className: "ImpalaLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { host: {
                serializedName: "typeProperties.host",
                required: true,
                type: {
                    name: "any"
                }
            }, port: {
                serializedName: "typeProperties.port",
                type: {
                    name: "any"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                required: true,
                type: {
                    name: "String"
                }
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, enableSsl: {
                serializedName: "typeProperties.enableSsl",
                type: {
                    name: "any"
                }
            }, trustedCertPath: {
                serializedName: "typeProperties.trustedCertPath",
                type: {
                    name: "any"
                }
            }, useSystemTrustStore: {
                serializedName: "typeProperties.useSystemTrustStore",
                type: {
                    name: "any"
                }
            }, allowHostNameCNMismatch: {
                serializedName: "typeProperties.allowHostNameCNMismatch",
                type: {
                    name: "any"
                }
            }, allowSelfSignedServerCert: {
                serializedName: "typeProperties.allowSelfSignedServerCert",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const JiraLinkedService = {
    serializedName: "Jira",
    type: {
        name: "Composite",
        className: "JiraLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { host: {
                serializedName: "typeProperties.host",
                required: true,
                type: {
                    name: "any"
                }
            }, port: {
                serializedName: "typeProperties.port",
                type: {
                    name: "any"
                }
            }, username: {
                serializedName: "typeProperties.username",
                required: true,
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "any"
                }
            }, useHostVerification: {
                serializedName: "typeProperties.useHostVerification",
                type: {
                    name: "any"
                }
            }, usePeerVerification: {
                serializedName: "typeProperties.usePeerVerification",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const MagentoLinkedService = {
    serializedName: "Magento",
    type: {
        name: "Composite",
        className: "MagentoLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { host: {
                serializedName: "typeProperties.host",
                required: true,
                type: {
                    name: "any"
                }
            }, accessToken: {
                serializedName: "typeProperties.accessToken",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "any"
                }
            }, useHostVerification: {
                serializedName: "typeProperties.useHostVerification",
                type: {
                    name: "any"
                }
            }, usePeerVerification: {
                serializedName: "typeProperties.usePeerVerification",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const MariaDBLinkedService = {
    serializedName: "MariaDB",
    type: {
        name: "Composite",
        className: "MariaDBLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "any"
                }
            }, pwd: {
                serializedName: "typeProperties.pwd",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const AzureMariaDBLinkedService = {
    serializedName: "AzureMariaDB",
    type: {
        name: "Composite",
        className: "AzureMariaDBLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "any"
                }
            }, pwd: {
                serializedName: "typeProperties.pwd",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const MarketoLinkedService = {
    serializedName: "Marketo",
    type: {
        name: "Composite",
        className: "MarketoLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { endpoint: {
                serializedName: "typeProperties.endpoint",
                required: true,
                type: {
                    name: "any"
                }
            }, clientId: {
                serializedName: "typeProperties.clientId",
                required: true,
                type: {
                    name: "any"
                }
            }, clientSecret: {
                serializedName: "typeProperties.clientSecret",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "any"
                }
            }, useHostVerification: {
                serializedName: "typeProperties.useHostVerification",
                type: {
                    name: "any"
                }
            }, usePeerVerification: {
                serializedName: "typeProperties.usePeerVerification",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const PaypalLinkedService = {
    serializedName: "Paypal",
    type: {
        name: "Composite",
        className: "PaypalLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { host: {
                serializedName: "typeProperties.host",
                required: true,
                type: {
                    name: "any"
                }
            }, clientId: {
                serializedName: "typeProperties.clientId",
                required: true,
                type: {
                    name: "any"
                }
            }, clientSecret: {
                serializedName: "typeProperties.clientSecret",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "any"
                }
            }, useHostVerification: {
                serializedName: "typeProperties.useHostVerification",
                type: {
                    name: "any"
                }
            }, usePeerVerification: {
                serializedName: "typeProperties.usePeerVerification",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const PhoenixLinkedService = {
    serializedName: "Phoenix",
    type: {
        name: "Composite",
        className: "PhoenixLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { host: {
                serializedName: "typeProperties.host",
                required: true,
                type: {
                    name: "any"
                }
            }, port: {
                serializedName: "typeProperties.port",
                type: {
                    name: "any"
                }
            }, httpPath: {
                serializedName: "typeProperties.httpPath",
                type: {
                    name: "any"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                required: true,
                type: {
                    name: "String"
                }
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, enableSsl: {
                serializedName: "typeProperties.enableSsl",
                type: {
                    name: "any"
                }
            }, trustedCertPath: {
                serializedName: "typeProperties.trustedCertPath",
                type: {
                    name: "any"
                }
            }, useSystemTrustStore: {
                serializedName: "typeProperties.useSystemTrustStore",
                type: {
                    name: "any"
                }
            }, allowHostNameCNMismatch: {
                serializedName: "typeProperties.allowHostNameCNMismatch",
                type: {
                    name: "any"
                }
            }, allowSelfSignedServerCert: {
                serializedName: "typeProperties.allowSelfSignedServerCert",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const PrestoLinkedService = {
    serializedName: "Presto",
    type: {
        name: "Composite",
        className: "PrestoLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { host: {
                serializedName: "typeProperties.host",
                required: true,
                type: {
                    name: "any"
                }
            }, serverVersion: {
                serializedName: "typeProperties.serverVersion",
                required: true,
                type: {
                    name: "any"
                }
            }, catalog: {
                serializedName: "typeProperties.catalog",
                required: true,
                type: {
                    name: "any"
                }
            }, port: {
                serializedName: "typeProperties.port",
                type: {
                    name: "any"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                required: true,
                type: {
                    name: "String"
                }
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, enableSsl: {
                serializedName: "typeProperties.enableSsl",
                type: {
                    name: "any"
                }
            }, trustedCertPath: {
                serializedName: "typeProperties.trustedCertPath",
                type: {
                    name: "any"
                }
            }, useSystemTrustStore: {
                serializedName: "typeProperties.useSystemTrustStore",
                type: {
                    name: "any"
                }
            }, allowHostNameCNMismatch: {
                serializedName: "typeProperties.allowHostNameCNMismatch",
                type: {
                    name: "any"
                }
            }, allowSelfSignedServerCert: {
                serializedName: "typeProperties.allowSelfSignedServerCert",
                type: {
                    name: "any"
                }
            }, timeZoneID: {
                serializedName: "typeProperties.timeZoneID",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const QuickBooksLinkedService = {
    serializedName: "QuickBooks",
    type: {
        name: "Composite",
        className: "QuickBooksLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionProperties: {
                serializedName: "typeProperties.connectionProperties",
                type: {
                    name: "any"
                }
            }, endpoint: {
                serializedName: "typeProperties.endpoint",
                type: {
                    name: "any"
                }
            }, companyId: {
                serializedName: "typeProperties.companyId",
                type: {
                    name: "any"
                }
            }, consumerKey: {
                serializedName: "typeProperties.consumerKey",
                type: {
                    name: "any"
                }
            }, consumerSecret: {
                serializedName: "typeProperties.consumerSecret",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, accessToken: {
                serializedName: "typeProperties.accessToken",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, accessTokenSecret: {
                serializedName: "typeProperties.accessTokenSecret",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const ServiceNowLinkedService = {
    serializedName: "ServiceNow",
    type: {
        name: "Composite",
        className: "ServiceNowLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { endpoint: {
                serializedName: "typeProperties.endpoint",
                required: true,
                type: {
                    name: "any"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                required: true,
                type: {
                    name: "String"
                }
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, clientId: {
                serializedName: "typeProperties.clientId",
                type: {
                    name: "any"
                }
            }, clientSecret: {
                serializedName: "typeProperties.clientSecret",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "any"
                }
            }, useHostVerification: {
                serializedName: "typeProperties.useHostVerification",
                type: {
                    name: "any"
                }
            }, usePeerVerification: {
                serializedName: "typeProperties.usePeerVerification",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const ShopifyLinkedService = {
    serializedName: "Shopify",
    type: {
        name: "Composite",
        className: "ShopifyLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { host: {
                serializedName: "typeProperties.host",
                required: true,
                type: {
                    name: "any"
                }
            }, accessToken: {
                serializedName: "typeProperties.accessToken",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "any"
                }
            }, useHostVerification: {
                serializedName: "typeProperties.useHostVerification",
                type: {
                    name: "any"
                }
            }, usePeerVerification: {
                serializedName: "typeProperties.usePeerVerification",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const SparkLinkedService = {
    serializedName: "Spark",
    type: {
        name: "Composite",
        className: "SparkLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { host: {
                serializedName: "typeProperties.host",
                required: true,
                type: {
                    name: "any"
                }
            }, port: {
                serializedName: "typeProperties.port",
                required: true,
                type: {
                    name: "any"
                }
            }, serverType: {
                serializedName: "typeProperties.serverType",
                type: {
                    name: "String"
                }
            }, thriftTransportProtocol: {
                serializedName: "typeProperties.thriftTransportProtocol",
                type: {
                    name: "String"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                required: true,
                type: {
                    name: "String"
                }
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, httpPath: {
                serializedName: "typeProperties.httpPath",
                type: {
                    name: "any"
                }
            }, enableSsl: {
                serializedName: "typeProperties.enableSsl",
                type: {
                    name: "any"
                }
            }, trustedCertPath: {
                serializedName: "typeProperties.trustedCertPath",
                type: {
                    name: "any"
                }
            }, useSystemTrustStore: {
                serializedName: "typeProperties.useSystemTrustStore",
                type: {
                    name: "any"
                }
            }, allowHostNameCNMismatch: {
                serializedName: "typeProperties.allowHostNameCNMismatch",
                type: {
                    name: "any"
                }
            }, allowSelfSignedServerCert: {
                serializedName: "typeProperties.allowSelfSignedServerCert",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const SquareLinkedService = {
    serializedName: "Square",
    type: {
        name: "Composite",
        className: "SquareLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionProperties: {
                serializedName: "typeProperties.connectionProperties",
                type: {
                    name: "any"
                }
            }, host: {
                serializedName: "typeProperties.host",
                type: {
                    name: "any"
                }
            }, clientId: {
                serializedName: "typeProperties.clientId",
                type: {
                    name: "any"
                }
            }, clientSecret: {
                serializedName: "typeProperties.clientSecret",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, redirectUri: {
                serializedName: "typeProperties.redirectUri",
                type: {
                    name: "any"
                }
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "any"
                }
            }, useHostVerification: {
                serializedName: "typeProperties.useHostVerification",
                type: {
                    name: "any"
                }
            }, usePeerVerification: {
                serializedName: "typeProperties.usePeerVerification",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const XeroLinkedService = {
    serializedName: "Xero",
    type: {
        name: "Composite",
        className: "XeroLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionProperties: {
                serializedName: "typeProperties.connectionProperties",
                type: {
                    name: "any"
                }
            }, host: {
                serializedName: "typeProperties.host",
                type: {
                    name: "any"
                }
            }, consumerKey: {
                serializedName: "typeProperties.consumerKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, privateKey: {
                serializedName: "typeProperties.privateKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "any"
                }
            }, useHostVerification: {
                serializedName: "typeProperties.useHostVerification",
                type: {
                    name: "any"
                }
            }, usePeerVerification: {
                serializedName: "typeProperties.usePeerVerification",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const ZohoLinkedService = {
    serializedName: "Zoho",
    type: {
        name: "Composite",
        className: "ZohoLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionProperties: {
                serializedName: "typeProperties.connectionProperties",
                type: {
                    name: "any"
                }
            }, endpoint: {
                serializedName: "typeProperties.endpoint",
                type: {
                    name: "any"
                }
            }, accessToken: {
                serializedName: "typeProperties.accessToken",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "any"
                }
            }, useHostVerification: {
                serializedName: "typeProperties.useHostVerification",
                type: {
                    name: "any"
                }
            }, usePeerVerification: {
                serializedName: "typeProperties.usePeerVerification",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const VerticaLinkedService = {
    serializedName: "Vertica",
    type: {
        name: "Composite",
        className: "VerticaLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "any"
                }
            }, pwd: {
                serializedName: "typeProperties.pwd",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const NetezzaLinkedService = {
    serializedName: "Netezza",
    type: {
        name: "Composite",
        className: "NetezzaLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "any"
                }
            }, pwd: {
                serializedName: "typeProperties.pwd",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const SalesforceMarketingCloudLinkedService = {
    serializedName: "SalesforceMarketingCloud",
    type: {
        name: "Composite",
        className: "SalesforceMarketingCloudLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionProperties: {
                serializedName: "typeProperties.connectionProperties",
                type: {
                    name: "any"
                }
            }, clientId: {
                serializedName: "typeProperties.clientId",
                type: {
                    name: "any"
                }
            }, clientSecret: {
                serializedName: "typeProperties.clientSecret",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "any"
                }
            }, useHostVerification: {
                serializedName: "typeProperties.useHostVerification",
                type: {
                    name: "any"
                }
            }, usePeerVerification: {
                serializedName: "typeProperties.usePeerVerification",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const HDInsightOnDemandLinkedService = {
    serializedName: "HDInsightOnDemand",
    type: {
        name: "Composite",
        className: "HDInsightOnDemandLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { clusterSize: {
                serializedName: "typeProperties.clusterSize",
                required: true,
                type: {
                    name: "any"
                }
            }, timeToLive: {
                serializedName: "typeProperties.timeToLive",
                required: true,
                type: {
                    name: "any"
                }
            }, version: {
                serializedName: "typeProperties.version",
                required: true,
                type: {
                    name: "any"
                }
            }, linkedServiceName: {
                serializedName: "typeProperties.linkedServiceName",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            }, hostSubscriptionId: {
                serializedName: "typeProperties.hostSubscriptionId",
                required: true,
                type: {
                    name: "any"
                }
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                type: {
                    name: "any"
                }
            }, servicePrincipalKey: {
                serializedName: "typeProperties.servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, tenant: {
                serializedName: "typeProperties.tenant",
                required: true,
                type: {
                    name: "any"
                }
            }, clusterResourceGroup: {
                serializedName: "typeProperties.clusterResourceGroup",
                required: true,
                type: {
                    name: "any"
                }
            }, clusterNamePrefix: {
                serializedName: "typeProperties.clusterNamePrefix",
                type: {
                    name: "any"
                }
            }, clusterUserName: {
                serializedName: "typeProperties.clusterUserName",
                type: {
                    name: "any"
                }
            }, clusterPassword: {
                serializedName: "typeProperties.clusterPassword",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, clusterSshUserName: {
                serializedName: "typeProperties.clusterSshUserName",
                type: {
                    name: "any"
                }
            }, clusterSshPassword: {
                serializedName: "typeProperties.clusterSshPassword",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, additionalLinkedServiceNames: {
                serializedName: "typeProperties.additionalLinkedServiceNames",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LinkedServiceReference"
                        }
                    }
                }
            }, hcatalogLinkedServiceName: {
                serializedName: "typeProperties.hcatalogLinkedServiceName",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            }, clusterType: {
                serializedName: "typeProperties.clusterType",
                type: {
                    name: "any"
                }
            }, sparkVersion: {
                serializedName: "typeProperties.sparkVersion",
                type: {
                    name: "any"
                }
            }, coreConfiguration: {
                serializedName: "typeProperties.coreConfiguration",
                type: {
                    name: "any"
                }
            }, hBaseConfiguration: {
                serializedName: "typeProperties.hBaseConfiguration",
                type: {
                    name: "any"
                }
            }, hdfsConfiguration: {
                serializedName: "typeProperties.hdfsConfiguration",
                type: {
                    name: "any"
                }
            }, hiveConfiguration: {
                serializedName: "typeProperties.hiveConfiguration",
                type: {
                    name: "any"
                }
            }, mapReduceConfiguration: {
                serializedName: "typeProperties.mapReduceConfiguration",
                type: {
                    name: "any"
                }
            }, oozieConfiguration: {
                serializedName: "typeProperties.oozieConfiguration",
                type: {
                    name: "any"
                }
            }, stormConfiguration: {
                serializedName: "typeProperties.stormConfiguration",
                type: {
                    name: "any"
                }
            }, yarnConfiguration: {
                serializedName: "typeProperties.yarnConfiguration",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            }, headNodeSize: {
                serializedName: "typeProperties.headNodeSize",
                type: {
                    name: "any"
                }
            }, dataNodeSize: {
                serializedName: "typeProperties.dataNodeSize",
                type: {
                    name: "any"
                }
            }, zookeeperNodeSize: {
                serializedName: "typeProperties.zookeeperNodeSize",
                type: {
                    name: "any"
                }
            }, scriptActions: {
                serializedName: "typeProperties.scriptActions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ScriptAction"
                        }
                    }
                }
            }, virtualNetworkId: {
                serializedName: "typeProperties.virtualNetworkId",
                type: {
                    name: "any"
                }
            }, subnetName: {
                serializedName: "typeProperties.subnetName",
                type: {
                    name: "any"
                }
            }, credential: {
                serializedName: "typeProperties.credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference"
                }
            } })
    }
};
export const AzureDataLakeAnalyticsLinkedService = {
    serializedName: "AzureDataLakeAnalytics",
    type: {
        name: "Composite",
        className: "AzureDataLakeAnalyticsLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { accountName: {
                serializedName: "typeProperties.accountName",
                required: true,
                type: {
                    name: "any"
                }
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                type: {
                    name: "any"
                }
            }, servicePrincipalKey: {
                serializedName: "typeProperties.servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, tenant: {
                serializedName: "typeProperties.tenant",
                required: true,
                type: {
                    name: "any"
                }
            }, subscriptionId: {
                serializedName: "typeProperties.subscriptionId",
                type: {
                    name: "any"
                }
            }, resourceGroupName: {
                serializedName: "typeProperties.resourceGroupName",
                type: {
                    name: "any"
                }
            }, dataLakeAnalyticsUri: {
                serializedName: "typeProperties.dataLakeAnalyticsUri",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const AzureDatabricksLinkedService = {
    serializedName: "AzureDatabricks",
    type: {
        name: "Composite",
        className: "AzureDatabricksLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { domain: {
                serializedName: "typeProperties.domain",
                required: true,
                type: {
                    name: "any"
                }
            }, accessToken: {
                serializedName: "typeProperties.accessToken",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, authentication: {
                serializedName: "typeProperties.authentication",
                type: {
                    name: "any"
                }
            }, workspaceResourceId: {
                serializedName: "typeProperties.workspaceResourceId",
                type: {
                    name: "any"
                }
            }, existingClusterId: {
                serializedName: "typeProperties.existingClusterId",
                type: {
                    name: "any"
                }
            }, instancePoolId: {
                serializedName: "typeProperties.instancePoolId",
                type: {
                    name: "any"
                }
            }, newClusterVersion: {
                serializedName: "typeProperties.newClusterVersion",
                type: {
                    name: "any"
                }
            }, newClusterNumOfWorker: {
                serializedName: "typeProperties.newClusterNumOfWorker",
                type: {
                    name: "any"
                }
            }, newClusterNodeType: {
                serializedName: "typeProperties.newClusterNodeType",
                type: {
                    name: "any"
                }
            }, newClusterSparkConf: {
                serializedName: "typeProperties.newClusterSparkConf",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }, newClusterSparkEnvVars: {
                serializedName: "typeProperties.newClusterSparkEnvVars",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }, newClusterCustomTags: {
                serializedName: "typeProperties.newClusterCustomTags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }, newClusterLogDestination: {
                serializedName: "typeProperties.newClusterLogDestination",
                type: {
                    name: "any"
                }
            }, newClusterDriverNodeType: {
                serializedName: "typeProperties.newClusterDriverNodeType",
                type: {
                    name: "any"
                }
            }, newClusterInitScripts: {
                serializedName: "typeProperties.newClusterInitScripts",
                type: {
                    name: "any"
                }
            }, newClusterEnableElasticDisk: {
                serializedName: "typeProperties.newClusterEnableElasticDisk",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            }, policyId: {
                serializedName: "typeProperties.policyId",
                type: {
                    name: "any"
                }
            }, credential: {
                serializedName: "typeProperties.credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference"
                }
            } })
    }
};
export const AzureDatabricksDeltaLakeLinkedService = {
    serializedName: "AzureDatabricksDeltaLake",
    type: {
        name: "Composite",
        className: "AzureDatabricksDeltaLakeLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { domain: {
                serializedName: "typeProperties.domain",
                required: true,
                type: {
                    name: "any"
                }
            }, accessToken: {
                serializedName: "typeProperties.accessToken",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, clusterId: {
                serializedName: "typeProperties.clusterId",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            }, credential: {
                serializedName: "typeProperties.credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference"
                }
            }, workspaceResourceId: {
                serializedName: "typeProperties.workspaceResourceId",
                type: {
                    name: "any"
                }
            } })
    }
};
export const ResponsysLinkedService = {
    serializedName: "Responsys",
    type: {
        name: "Composite",
        className: "ResponsysLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { endpoint: {
                serializedName: "typeProperties.endpoint",
                required: true,
                type: {
                    name: "any"
                }
            }, clientId: {
                serializedName: "typeProperties.clientId",
                required: true,
                type: {
                    name: "any"
                }
            }, clientSecret: {
                serializedName: "typeProperties.clientSecret",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "any"
                }
            }, useHostVerification: {
                serializedName: "typeProperties.useHostVerification",
                type: {
                    name: "any"
                }
            }, usePeerVerification: {
                serializedName: "typeProperties.usePeerVerification",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const DynamicsAXLinkedService = {
    serializedName: "DynamicsAX",
    type: {
        name: "Composite",
        className: "DynamicsAXLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { url: {
                serializedName: "typeProperties.url",
                required: true,
                type: {
                    name: "any"
                }
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                required: true,
                type: {
                    name: "any"
                }
            }, servicePrincipalKey: {
                serializedName: "typeProperties.servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, tenant: {
                serializedName: "typeProperties.tenant",
                required: true,
                type: {
                    name: "any"
                }
            }, aadResourceId: {
                serializedName: "typeProperties.aadResourceId",
                required: true,
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const OracleServiceCloudLinkedService = {
    serializedName: "OracleServiceCloud",
    type: {
        name: "Composite",
        className: "OracleServiceCloudLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { host: {
                serializedName: "typeProperties.host",
                required: true,
                type: {
                    name: "any"
                }
            }, username: {
                serializedName: "typeProperties.username",
                required: true,
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "any"
                }
            }, useHostVerification: {
                serializedName: "typeProperties.useHostVerification",
                type: {
                    name: "any"
                }
            }, usePeerVerification: {
                serializedName: "typeProperties.usePeerVerification",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const GoogleAdWordsLinkedService = {
    serializedName: "GoogleAdWords",
    type: {
        name: "Composite",
        className: "GoogleAdWordsLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionProperties: {
                serializedName: "typeProperties.connectionProperties",
                type: {
                    name: "any"
                }
            }, clientCustomerID: {
                serializedName: "typeProperties.clientCustomerID",
                type: {
                    name: "any"
                }
            }, developerToken: {
                serializedName: "typeProperties.developerToken",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "String"
                }
            }, refreshToken: {
                serializedName: "typeProperties.refreshToken",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, clientId: {
                serializedName: "typeProperties.clientId",
                type: {
                    name: "any"
                }
            }, clientSecret: {
                serializedName: "typeProperties.clientSecret",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, email: {
                serializedName: "typeProperties.email",
                type: {
                    name: "any"
                }
            }, keyFilePath: {
                serializedName: "typeProperties.keyFilePath",
                type: {
                    name: "any"
                }
            }, trustedCertPath: {
                serializedName: "typeProperties.trustedCertPath",
                type: {
                    name: "any"
                }
            }, useSystemTrustStore: {
                serializedName: "typeProperties.useSystemTrustStore",
                type: {
                    name: "any"
                }
            }, privateKey: {
                serializedName: "typeProperties.privateKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, loginCustomerID: {
                serializedName: "typeProperties.loginCustomerID",
                type: {
                    name: "any"
                }
            }, googleAdsApiVersion: {
                serializedName: "typeProperties.googleAdsApiVersion",
                type: {
                    name: "any"
                }
            }, supportLegacyDataTypes: {
                serializedName: "typeProperties.supportLegacyDataTypes",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const SapTableLinkedService = {
    serializedName: "SapTable",
    type: {
        name: "Composite",
        className: "SapTableLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { server: {
                serializedName: "typeProperties.server",
                type: {
                    name: "any"
                }
            }, systemNumber: {
                serializedName: "typeProperties.systemNumber",
                type: {
                    name: "any"
                }
            }, clientId: {
                serializedName: "typeProperties.clientId",
                type: {
                    name: "any"
                }
            }, language: {
                serializedName: "typeProperties.language",
                type: {
                    name: "any"
                }
            }, systemId: {
                serializedName: "typeProperties.systemId",
                type: {
                    name: "any"
                }
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, messageServer: {
                serializedName: "typeProperties.messageServer",
                type: {
                    name: "any"
                }
            }, messageServerService: {
                serializedName: "typeProperties.messageServerService",
                type: {
                    name: "any"
                }
            }, sncMode: {
                serializedName: "typeProperties.sncMode",
                type: {
                    name: "any"
                }
            }, sncMyName: {
                serializedName: "typeProperties.sncMyName",
                type: {
                    name: "any"
                }
            }, sncPartnerName: {
                serializedName: "typeProperties.sncPartnerName",
                type: {
                    name: "any"
                }
            }, sncLibraryPath: {
                serializedName: "typeProperties.sncLibraryPath",
                type: {
                    name: "any"
                }
            }, sncQop: {
                serializedName: "typeProperties.sncQop",
                type: {
                    name: "any"
                }
            }, logonGroup: {
                serializedName: "typeProperties.logonGroup",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const AzureDataExplorerLinkedService = {
    serializedName: "AzureDataExplorer",
    type: {
        name: "Composite",
        className: "AzureDataExplorerLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { endpoint: {
                serializedName: "typeProperties.endpoint",
                required: true,
                type: {
                    name: "any"
                }
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                type: {
                    name: "any"
                }
            }, servicePrincipalKey: {
                serializedName: "typeProperties.servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, database: {
                serializedName: "typeProperties.database",
                required: true,
                type: {
                    name: "any"
                }
            }, tenant: {
                serializedName: "typeProperties.tenant",
                type: {
                    name: "any"
                }
            }, credential: {
                serializedName: "typeProperties.credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference"
                }
            } })
    }
};
export const AzureFunctionLinkedService = {
    serializedName: "AzureFunction",
    type: {
        name: "Composite",
        className: "AzureFunctionLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { functionAppUrl: {
                serializedName: "typeProperties.functionAppUrl",
                required: true,
                type: {
                    name: "any"
                }
            }, functionKey: {
                serializedName: "typeProperties.functionKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            }, credential: {
                serializedName: "typeProperties.credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference"
                }
            }, resourceId: {
                serializedName: "typeProperties.resourceId",
                type: {
                    name: "any"
                }
            }, authentication: {
                serializedName: "typeProperties.authentication",
                type: {
                    name: "any"
                }
            } })
    }
};
export const SnowflakeLinkedService = {
    serializedName: "Snowflake",
    type: {
        name: "Composite",
        className: "SnowflakeLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                required: true,
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const SharePointOnlineListLinkedService = {
    serializedName: "SharePointOnlineList",
    type: {
        name: "Composite",
        className: "SharePointOnlineListLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { siteUrl: {
                serializedName: "typeProperties.siteUrl",
                required: true,
                type: {
                    name: "any"
                }
            }, tenantId: {
                serializedName: "typeProperties.tenantId",
                required: true,
                type: {
                    name: "any"
                }
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                required: true,
                type: {
                    name: "any"
                }
            }, servicePrincipalKey: {
                serializedName: "typeProperties.servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            } })
    }
};
export const AzureSynapseArtifactsLinkedService = {
    serializedName: "AzureSynapseArtifacts",
    type: {
        name: "Composite",
        className: "AzureSynapseArtifactsLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { endpoint: {
                serializedName: "typeProperties.endpoint",
                required: true,
                type: {
                    name: "any"
                }
            }, authentication: {
                serializedName: "typeProperties.authentication",
                type: {
                    name: "any"
                }
            }, workspaceResourceId: {
                serializedName: "typeProperties.workspaceResourceId",
                type: {
                    name: "any"
                }
            } })
    }
};
export const LakeHouseLinkedService = {
    serializedName: "LakeHouse",
    type: {
        name: "Composite",
        className: "LakeHouseLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedService.type.modelProperties), { workspaceId: {
                serializedName: "typeProperties.workspaceId",
                type: {
                    name: "any"
                }
            }, artifactId: {
                serializedName: "typeProperties.artifactId",
                type: {
                    name: "any"
                }
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                type: {
                    name: "any"
                }
            }, servicePrincipalKey: {
                serializedName: "typeProperties.servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, tenant: {
                serializedName: "typeProperties.tenant",
                type: {
                    name: "any"
                }
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String"
                }
            }, servicePrincipalCredentialType: {
                serializedName: "typeProperties.servicePrincipalCredentialType",
                type: {
                    name: "any"
                }
            }, servicePrincipalCredential: {
                serializedName: "typeProperties.servicePrincipalCredential",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            } })
    }
};
export const AmazonS3Dataset = {
    serializedName: "AmazonS3Object",
    type: {
        name: "Composite",
        className: "AmazonS3Dataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { bucketName: {
                serializedName: "typeProperties.bucketName",
                required: true,
                type: {
                    name: "any"
                }
            }, key: {
                serializedName: "typeProperties.key",
                type: {
                    name: "any"
                }
            }, prefix: {
                serializedName: "typeProperties.prefix",
                type: {
                    name: "any"
                }
            }, version: {
                serializedName: "typeProperties.version",
                type: {
                    name: "any"
                }
            }, modifiedDatetimeStart: {
                serializedName: "typeProperties.modifiedDatetimeStart",
                type: {
                    name: "any"
                }
            }, modifiedDatetimeEnd: {
                serializedName: "typeProperties.modifiedDatetimeEnd",
                type: {
                    name: "any"
                }
            }, format: {
                serializedName: "typeProperties.format",
                type: {
                    name: "Composite",
                    className: "DatasetStorageFormat"
                }
            }, compression: {
                serializedName: "typeProperties.compression",
                type: {
                    name: "Composite",
                    className: "DatasetCompression"
                }
            } })
    }
};
export const AvroDataset = {
    serializedName: "Avro",
    type: {
        name: "Composite",
        className: "AvroDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { location: {
                serializedName: "typeProperties.location",
                type: {
                    name: "Composite",
                    className: "DatasetLocation"
                }
            }, avroCompressionCodec: {
                serializedName: "typeProperties.avroCompressionCodec",
                type: {
                    name: "any"
                }
            }, avroCompressionLevel: {
                constraints: {
                    InclusiveMaximum: 9,
                    InclusiveMinimum: 1
                },
                serializedName: "typeProperties.avroCompressionLevel",
                type: {
                    name: "Number"
                }
            } })
    }
};
export const ExcelDataset = {
    serializedName: "Excel",
    type: {
        name: "Composite",
        className: "ExcelDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { location: {
                serializedName: "typeProperties.location",
                type: {
                    name: "Composite",
                    className: "DatasetLocation"
                }
            }, sheetName: {
                serializedName: "typeProperties.sheetName",
                type: {
                    name: "any"
                }
            }, sheetIndex: {
                serializedName: "typeProperties.sheetIndex",
                type: {
                    name: "any"
                }
            }, range: {
                serializedName: "typeProperties.range",
                type: {
                    name: "any"
                }
            }, firstRowAsHeader: {
                serializedName: "typeProperties.firstRowAsHeader",
                type: {
                    name: "any"
                }
            }, compression: {
                serializedName: "typeProperties.compression",
                type: {
                    name: "Composite",
                    className: "DatasetCompression"
                }
            }, nullValue: {
                serializedName: "typeProperties.nullValue",
                type: {
                    name: "any"
                }
            } })
    }
};
export const ParquetDataset = {
    serializedName: "Parquet",
    type: {
        name: "Composite",
        className: "ParquetDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { location: {
                serializedName: "typeProperties.location",
                type: {
                    name: "Composite",
                    className: "DatasetLocation"
                }
            }, compressionCodec: {
                serializedName: "typeProperties.compressionCodec",
                type: {
                    name: "any"
                }
            } })
    }
};
export const DelimitedTextDataset = {
    serializedName: "DelimitedText",
    type: {
        name: "Composite",
        className: "DelimitedTextDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { location: {
                serializedName: "typeProperties.location",
                type: {
                    name: "Composite",
                    className: "DatasetLocation"
                }
            }, columnDelimiter: {
                serializedName: "typeProperties.columnDelimiter",
                type: {
                    name: "any"
                }
            }, rowDelimiter: {
                serializedName: "typeProperties.rowDelimiter",
                type: {
                    name: "any"
                }
            }, encodingName: {
                serializedName: "typeProperties.encodingName",
                type: {
                    name: "any"
                }
            }, compressionCodec: {
                serializedName: "typeProperties.compressionCodec",
                type: {
                    name: "any"
                }
            }, compressionLevel: {
                serializedName: "typeProperties.compressionLevel",
                type: {
                    name: "any"
                }
            }, quoteChar: {
                serializedName: "typeProperties.quoteChar",
                type: {
                    name: "any"
                }
            }, escapeChar: {
                serializedName: "typeProperties.escapeChar",
                type: {
                    name: "any"
                }
            }, firstRowAsHeader: {
                serializedName: "typeProperties.firstRowAsHeader",
                type: {
                    name: "any"
                }
            }, nullValue: {
                serializedName: "typeProperties.nullValue",
                type: {
                    name: "any"
                }
            } })
    }
};
export const JsonDataset = {
    serializedName: "Json",
    type: {
        name: "Composite",
        className: "JsonDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { location: {
                serializedName: "typeProperties.location",
                type: {
                    name: "Composite",
                    className: "DatasetLocation"
                }
            }, encodingName: {
                serializedName: "typeProperties.encodingName",
                type: {
                    name: "any"
                }
            }, compression: {
                serializedName: "typeProperties.compression",
                type: {
                    name: "Composite",
                    className: "DatasetCompression"
                }
            } })
    }
};
export const XmlDataset = {
    serializedName: "Xml",
    type: {
        name: "Composite",
        className: "XmlDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { location: {
                serializedName: "typeProperties.location",
                type: {
                    name: "Composite",
                    className: "DatasetLocation"
                }
            }, encodingName: {
                serializedName: "typeProperties.encodingName",
                type: {
                    name: "any"
                }
            }, nullValue: {
                serializedName: "typeProperties.nullValue",
                type: {
                    name: "any"
                }
            }, compression: {
                serializedName: "typeProperties.compression",
                type: {
                    name: "Composite",
                    className: "DatasetCompression"
                }
            } })
    }
};
export const OrcDataset = {
    serializedName: "Orc",
    type: {
        name: "Composite",
        className: "OrcDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { location: {
                serializedName: "typeProperties.location",
                type: {
                    name: "Composite",
                    className: "DatasetLocation"
                }
            }, orcCompressionCodec: {
                serializedName: "typeProperties.orcCompressionCodec",
                type: {
                    name: "any"
                }
            } })
    }
};
export const BinaryDataset = {
    serializedName: "Binary",
    type: {
        name: "Composite",
        className: "BinaryDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { location: {
                serializedName: "typeProperties.location",
                type: {
                    name: "Composite",
                    className: "DatasetLocation"
                }
            }, compression: {
                serializedName: "typeProperties.compression",
                type: {
                    name: "Composite",
                    className: "DatasetCompression"
                }
            } })
    }
};
export const AzureBlobDataset = {
    serializedName: "AzureBlob",
    type: {
        name: "Composite",
        className: "AzureBlobDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { folderPath: {
                serializedName: "typeProperties.folderPath",
                type: {
                    name: "any"
                }
            }, tableRootLocation: {
                serializedName: "typeProperties.tableRootLocation",
                type: {
                    name: "any"
                }
            }, fileName: {
                serializedName: "typeProperties.fileName",
                type: {
                    name: "any"
                }
            }, modifiedDatetimeStart: {
                serializedName: "typeProperties.modifiedDatetimeStart",
                type: {
                    name: "any"
                }
            }, modifiedDatetimeEnd: {
                serializedName: "typeProperties.modifiedDatetimeEnd",
                type: {
                    name: "any"
                }
            }, format: {
                serializedName: "typeProperties.format",
                type: {
                    name: "Composite",
                    className: "DatasetStorageFormat"
                }
            }, compression: {
                serializedName: "typeProperties.compression",
                type: {
                    name: "Composite",
                    className: "DatasetCompression"
                }
            } })
    }
};
export const AzureTableDataset = {
    serializedName: "AzureTable",
    type: {
        name: "Composite",
        className: "AzureTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                required: true,
                type: {
                    name: "any"
                }
            } })
    }
};
export const AzureSqlTableDataset = {
    serializedName: "AzureSqlTable",
    type: {
        name: "Composite",
        className: "AzureSqlTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            }, schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any"
                }
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any"
                }
            } })
    }
};
export const AzureSqlMITableDataset = {
    serializedName: "AzureSqlMITable",
    type: {
        name: "Composite",
        className: "AzureSqlMITableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            }, schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any"
                }
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any"
                }
            } })
    }
};
export const AzureSqlDWTableDataset = {
    serializedName: "AzureSqlDWTable",
    type: {
        name: "Composite",
        className: "AzureSqlDWTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            }, schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any"
                }
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any"
                }
            } })
    }
};
export const CassandraTableDataset = {
    serializedName: "CassandraTable",
    type: {
        name: "Composite",
        className: "CassandraTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            }, keyspace: {
                serializedName: "typeProperties.keyspace",
                type: {
                    name: "any"
                }
            } })
    }
};
export const CustomDataset = {
    serializedName: "CustomDataset",
    type: {
        name: "Composite",
        className: "CustomDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { typeProperties: {
                serializedName: "typeProperties",
                type: {
                    name: "any"
                }
            } })
    }
};
export const CosmosDbSqlApiCollectionDataset = {
    serializedName: "CosmosDbSqlApiCollection",
    type: {
        name: "Composite",
        className: "CosmosDbSqlApiCollectionDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { collectionName: {
                serializedName: "typeProperties.collectionName",
                required: true,
                type: {
                    name: "any"
                }
            } })
    }
};
export const DocumentDbCollectionDataset = {
    serializedName: "DocumentDbCollection",
    type: {
        name: "Composite",
        className: "DocumentDbCollectionDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { collectionName: {
                serializedName: "typeProperties.collectionName",
                required: true,
                type: {
                    name: "any"
                }
            } })
    }
};
export const DynamicsEntityDataset = {
    serializedName: "DynamicsEntity",
    type: {
        name: "Composite",
        className: "DynamicsEntityDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { entityName: {
                serializedName: "typeProperties.entityName",
                type: {
                    name: "any"
                }
            } })
    }
};
export const DynamicsCrmEntityDataset = {
    serializedName: "DynamicsCrmEntity",
    type: {
        name: "Composite",
        className: "DynamicsCrmEntityDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { entityName: {
                serializedName: "typeProperties.entityName",
                type: {
                    name: "any"
                }
            } })
    }
};
export const CommonDataServiceForAppsEntityDataset = {
    serializedName: "CommonDataServiceForAppsEntity",
    type: {
        name: "Composite",
        className: "CommonDataServiceForAppsEntityDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { entityName: {
                serializedName: "typeProperties.entityName",
                type: {
                    name: "any"
                }
            } })
    }
};
export const AzureDataLakeStoreDataset = {
    serializedName: "AzureDataLakeStoreFile",
    type: {
        name: "Composite",
        className: "AzureDataLakeStoreDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { folderPath: {
                serializedName: "typeProperties.folderPath",
                type: {
                    name: "any"
                }
            }, fileName: {
                serializedName: "typeProperties.fileName",
                type: {
                    name: "any"
                }
            }, format: {
                serializedName: "typeProperties.format",
                type: {
                    name: "Composite",
                    className: "DatasetStorageFormat"
                }
            }, compression: {
                serializedName: "typeProperties.compression",
                type: {
                    name: "Composite",
                    className: "DatasetCompression"
                }
            } })
    }
};
export const AzureBlobFSDataset = {
    serializedName: "AzureBlobFSFile",
    type: {
        name: "Composite",
        className: "AzureBlobFSDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { folderPath: {
                serializedName: "typeProperties.folderPath",
                type: {
                    name: "any"
                }
            }, fileName: {
                serializedName: "typeProperties.fileName",
                type: {
                    name: "any"
                }
            }, format: {
                serializedName: "typeProperties.format",
                type: {
                    name: "Composite",
                    className: "DatasetStorageFormat"
                }
            }, compression: {
                serializedName: "typeProperties.compression",
                type: {
                    name: "Composite",
                    className: "DatasetCompression"
                }
            } })
    }
};
export const Office365Dataset = {
    serializedName: "Office365Table",
    type: {
        name: "Composite",
        className: "Office365Dataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                required: true,
                type: {
                    name: "any"
                }
            }, predicate: {
                serializedName: "typeProperties.predicate",
                type: {
                    name: "any"
                }
            } })
    }
};
export const FileShareDataset = {
    serializedName: "FileShare",
    type: {
        name: "Composite",
        className: "FileShareDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { folderPath: {
                serializedName: "typeProperties.folderPath",
                type: {
                    name: "any"
                }
            }, fileName: {
                serializedName: "typeProperties.fileName",
                type: {
                    name: "any"
                }
            }, modifiedDatetimeStart: {
                serializedName: "typeProperties.modifiedDatetimeStart",
                type: {
                    name: "any"
                }
            }, modifiedDatetimeEnd: {
                serializedName: "typeProperties.modifiedDatetimeEnd",
                type: {
                    name: "any"
                }
            }, format: {
                serializedName: "typeProperties.format",
                type: {
                    name: "Composite",
                    className: "DatasetStorageFormat"
                }
            }, fileFilter: {
                serializedName: "typeProperties.fileFilter",
                type: {
                    name: "any"
                }
            }, compression: {
                serializedName: "typeProperties.compression",
                type: {
                    name: "Composite",
                    className: "DatasetCompression"
                }
            } })
    }
};
export const MongoDbCollectionDataset = {
    serializedName: "MongoDbCollection",
    type: {
        name: "Composite",
        className: "MongoDbCollectionDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { collectionName: {
                serializedName: "typeProperties.collectionName",
                required: true,
                type: {
                    name: "any"
                }
            } })
    }
};
export const MongoDbAtlasCollectionDataset = {
    serializedName: "MongoDbAtlasCollection",
    type: {
        name: "Composite",
        className: "MongoDbAtlasCollectionDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { collection: {
                serializedName: "typeProperties.collection",
                required: true,
                type: {
                    name: "any"
                }
            } })
    }
};
export const MongoDbV2CollectionDataset = {
    serializedName: "MongoDbV2Collection",
    type: {
        name: "Composite",
        className: "MongoDbV2CollectionDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { collection: {
                serializedName: "typeProperties.collection",
                required: true,
                type: {
                    name: "any"
                }
            } })
    }
};
export const CosmosDbMongoDbApiCollectionDataset = {
    serializedName: "CosmosDbMongoDbApiCollection",
    type: {
        name: "Composite",
        className: "CosmosDbMongoDbApiCollectionDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { collection: {
                serializedName: "typeProperties.collection",
                required: true,
                type: {
                    name: "any"
                }
            } })
    }
};
export const ODataResourceDataset = {
    serializedName: "ODataResource",
    type: {
        name: "Composite",
        className: "ODataResourceDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { path: {
                serializedName: "typeProperties.path",
                type: {
                    name: "any"
                }
            } })
    }
};
export const OracleTableDataset = {
    serializedName: "OracleTable",
    type: {
        name: "Composite",
        className: "OracleTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            }, schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any"
                }
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any"
                }
            } })
    }
};
export const AmazonRdsForOracleTableDataset = {
    serializedName: "AmazonRdsForOracleTable",
    type: {
        name: "Composite",
        className: "AmazonRdsForOracleTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any"
                }
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any"
                }
            } })
    }
};
export const TeradataTableDataset = {
    serializedName: "TeradataTable",
    type: {
        name: "Composite",
        className: "TeradataTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { database: {
                serializedName: "typeProperties.database",
                type: {
                    name: "any"
                }
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any"
                }
            } })
    }
};
export const AzureMySqlTableDataset = {
    serializedName: "AzureMySqlTable",
    type: {
        name: "Composite",
        className: "AzureMySqlTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any"
                }
            } })
    }
};
export const AmazonRedshiftTableDataset = {
    serializedName: "AmazonRedshiftTable",
    type: {
        name: "Composite",
        className: "AmazonRedshiftTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any"
                }
            }, schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any"
                }
            } })
    }
};
export const Db2TableDataset = {
    serializedName: "Db2Table",
    type: {
        name: "Composite",
        className: "Db2TableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            }, schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any"
                }
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any"
                }
            } })
    }
};
export const RelationalTableDataset = {
    serializedName: "RelationalTable",
    type: {
        name: "Composite",
        className: "RelationalTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            } })
    }
};
export const InformixTableDataset = {
    serializedName: "InformixTable",
    type: {
        name: "Composite",
        className: "InformixTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            } })
    }
};
export const OdbcTableDataset = {
    serializedName: "OdbcTable",
    type: {
        name: "Composite",
        className: "OdbcTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            } })
    }
};
export const MySqlTableDataset = {
    serializedName: "MySqlTable",
    type: {
        name: "Composite",
        className: "MySqlTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            } })
    }
};
export const PostgreSqlTableDataset = {
    serializedName: "PostgreSqlTable",
    type: {
        name: "Composite",
        className: "PostgreSqlTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any"
                }
            }, schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any"
                }
            } })
    }
};
export const MicrosoftAccessTableDataset = {
    serializedName: "MicrosoftAccessTable",
    type: {
        name: "Composite",
        className: "MicrosoftAccessTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            } })
    }
};
export const SalesforceObjectDataset = {
    serializedName: "SalesforceObject",
    type: {
        name: "Composite",
        className: "SalesforceObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { objectApiName: {
                serializedName: "typeProperties.objectApiName",
                type: {
                    name: "any"
                }
            } })
    }
};
export const SalesforceServiceCloudObjectDataset = {
    serializedName: "SalesforceServiceCloudObject",
    type: {
        name: "Composite",
        className: "SalesforceServiceCloudObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { objectApiName: {
                serializedName: "typeProperties.objectApiName",
                type: {
                    name: "any"
                }
            } })
    }
};
export const SybaseTableDataset = {
    serializedName: "SybaseTable",
    type: {
        name: "Composite",
        className: "SybaseTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            } })
    }
};
export const SapBwCubeDataset = {
    serializedName: "SapBwCube",
    type: {
        name: "Composite",
        className: "SapBwCubeDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, Dataset.type.modelProperties)
    }
};
export const SapCloudForCustomerResourceDataset = {
    serializedName: "SapCloudForCustomerResource",
    type: {
        name: "Composite",
        className: "SapCloudForCustomerResourceDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { path: {
                serializedName: "typeProperties.path",
                required: true,
                type: {
                    name: "any"
                }
            } })
    }
};
export const SapEccResourceDataset = {
    serializedName: "SapEccResource",
    type: {
        name: "Composite",
        className: "SapEccResourceDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { path: {
                serializedName: "typeProperties.path",
                required: true,
                type: {
                    name: "any"
                }
            } })
    }
};
export const SapHanaTableDataset = {
    serializedName: "SapHanaTable",
    type: {
        name: "Composite",
        className: "SapHanaTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any"
                }
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any"
                }
            } })
    }
};
export const SapOpenHubTableDataset = {
    serializedName: "SapOpenHubTable",
    type: {
        name: "Composite",
        className: "SapOpenHubTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { openHubDestinationName: {
                serializedName: "typeProperties.openHubDestinationName",
                required: true,
                type: {
                    name: "any"
                }
            }, excludeLastRequest: {
                serializedName: "typeProperties.excludeLastRequest",
                type: {
                    name: "any"
                }
            }, baseRequestId: {
                serializedName: "typeProperties.baseRequestId",
                type: {
                    name: "any"
                }
            } })
    }
};
export const SqlServerTableDataset = {
    serializedName: "SqlServerTable",
    type: {
        name: "Composite",
        className: "SqlServerTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            }, schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any"
                }
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any"
                }
            } })
    }
};
export const AmazonRdsForSqlServerTableDataset = {
    serializedName: "AmazonRdsForSqlServerTable",
    type: {
        name: "Composite",
        className: "AmazonRdsForSqlServerTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any"
                }
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any"
                }
            } })
    }
};
export const RestResourceDataset = {
    serializedName: "RestResource",
    type: {
        name: "Composite",
        className: "RestResourceDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { relativeUrl: {
                serializedName: "typeProperties.relativeUrl",
                type: {
                    name: "any"
                }
            }, requestMethod: {
                serializedName: "typeProperties.requestMethod",
                type: {
                    name: "any"
                }
            }, requestBody: {
                serializedName: "typeProperties.requestBody",
                type: {
                    name: "any"
                }
            }, additionalHeaders: {
                serializedName: "typeProperties.additionalHeaders",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }, paginationRules: {
                serializedName: "typeProperties.paginationRules",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            } })
    }
};
export const SapTableResourceDataset = {
    serializedName: "SapTableResource",
    type: {
        name: "Composite",
        className: "SapTableResourceDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                required: true,
                type: {
                    name: "any"
                }
            } })
    }
};
export const SapOdpResourceDataset = {
    serializedName: "SapOdpResource",
    type: {
        name: "Composite",
        className: "SapOdpResourceDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { context: {
                serializedName: "typeProperties.context",
                required: true,
                type: {
                    name: "any"
                }
            }, objectName: {
                serializedName: "typeProperties.objectName",
                required: true,
                type: {
                    name: "any"
                }
            } })
    }
};
export const WebTableDataset = {
    serializedName: "WebTable",
    type: {
        name: "Composite",
        className: "WebTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { index: {
                serializedName: "typeProperties.index",
                required: true,
                type: {
                    name: "any"
                }
            }, path: {
                serializedName: "typeProperties.path",
                type: {
                    name: "any"
                }
            } })
    }
};
export const AzureSearchIndexDataset = {
    serializedName: "AzureSearchIndex",
    type: {
        name: "Composite",
        className: "AzureSearchIndexDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { indexName: {
                serializedName: "typeProperties.indexName",
                required: true,
                type: {
                    name: "any"
                }
            } })
    }
};
export const HttpDataset = {
    serializedName: "HttpFile",
    type: {
        name: "Composite",
        className: "HttpDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { relativeUrl: {
                serializedName: "typeProperties.relativeUrl",
                type: {
                    name: "any"
                }
            }, requestMethod: {
                serializedName: "typeProperties.requestMethod",
                type: {
                    name: "any"
                }
            }, requestBody: {
                serializedName: "typeProperties.requestBody",
                type: {
                    name: "any"
                }
            }, additionalHeaders: {
                serializedName: "typeProperties.additionalHeaders",
                type: {
                    name: "any"
                }
            }, format: {
                serializedName: "typeProperties.format",
                type: {
                    name: "Composite",
                    className: "DatasetStorageFormat"
                }
            }, compression: {
                serializedName: "typeProperties.compression",
                type: {
                    name: "Composite",
                    className: "DatasetCompression"
                }
            } })
    }
};
export const AmazonMWSObjectDataset = {
    serializedName: "AmazonMWSObject",
    type: {
        name: "Composite",
        className: "AmazonMWSObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            } })
    }
};
export const AzurePostgreSqlTableDataset = {
    serializedName: "AzurePostgreSqlTable",
    type: {
        name: "Composite",
        className: "AzurePostgreSqlTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any"
                }
            }, schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any"
                }
            } })
    }
};
export const ConcurObjectDataset = {
    serializedName: "ConcurObject",
    type: {
        name: "Composite",
        className: "ConcurObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            } })
    }
};
export const CouchbaseTableDataset = {
    serializedName: "CouchbaseTable",
    type: {
        name: "Composite",
        className: "CouchbaseTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            } })
    }
};
export const DrillTableDataset = {
    serializedName: "DrillTable",
    type: {
        name: "Composite",
        className: "DrillTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any"
                }
            }, schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any"
                }
            } })
    }
};
export const EloquaObjectDataset = {
    serializedName: "EloquaObject",
    type: {
        name: "Composite",
        className: "EloquaObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            } })
    }
};
export const GoogleBigQueryObjectDataset = {
    serializedName: "GoogleBigQueryObject",
    type: {
        name: "Composite",
        className: "GoogleBigQueryObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any"
                }
            }, dataset: {
                serializedName: "typeProperties.dataset",
                type: {
                    name: "any"
                }
            } })
    }
};
export const GreenplumTableDataset = {
    serializedName: "GreenplumTable",
    type: {
        name: "Composite",
        className: "GreenplumTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any"
                }
            }, schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any"
                }
            } })
    }
};
export const HBaseObjectDataset = {
    serializedName: "HBaseObject",
    type: {
        name: "Composite",
        className: "HBaseObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            } })
    }
};
export const HiveObjectDataset = {
    serializedName: "HiveObject",
    type: {
        name: "Composite",
        className: "HiveObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any"
                }
            }, schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any"
                }
            } })
    }
};
export const HubspotObjectDataset = {
    serializedName: "HubspotObject",
    type: {
        name: "Composite",
        className: "HubspotObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            } })
    }
};
export const ImpalaObjectDataset = {
    serializedName: "ImpalaObject",
    type: {
        name: "Composite",
        className: "ImpalaObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any"
                }
            }, schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any"
                }
            } })
    }
};
export const JiraObjectDataset = {
    serializedName: "JiraObject",
    type: {
        name: "Composite",
        className: "JiraObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            } })
    }
};
export const MagentoObjectDataset = {
    serializedName: "MagentoObject",
    type: {
        name: "Composite",
        className: "MagentoObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            } })
    }
};
export const MariaDBTableDataset = {
    serializedName: "MariaDBTable",
    type: {
        name: "Composite",
        className: "MariaDBTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            } })
    }
};
export const AzureMariaDBTableDataset = {
    serializedName: "AzureMariaDBTable",
    type: {
        name: "Composite",
        className: "AzureMariaDBTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            } })
    }
};
export const MarketoObjectDataset = {
    serializedName: "MarketoObject",
    type: {
        name: "Composite",
        className: "MarketoObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            } })
    }
};
export const PaypalObjectDataset = {
    serializedName: "PaypalObject",
    type: {
        name: "Composite",
        className: "PaypalObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            } })
    }
};
export const PhoenixObjectDataset = {
    serializedName: "PhoenixObject",
    type: {
        name: "Composite",
        className: "PhoenixObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any"
                }
            }, schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any"
                }
            } })
    }
};
export const PrestoObjectDataset = {
    serializedName: "PrestoObject",
    type: {
        name: "Composite",
        className: "PrestoObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any"
                }
            }, schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any"
                }
            } })
    }
};
export const QuickBooksObjectDataset = {
    serializedName: "QuickBooksObject",
    type: {
        name: "Composite",
        className: "QuickBooksObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            } })
    }
};
export const ServiceNowObjectDataset = {
    serializedName: "ServiceNowObject",
    type: {
        name: "Composite",
        className: "ServiceNowObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            } })
    }
};
export const ShopifyObjectDataset = {
    serializedName: "ShopifyObject",
    type: {
        name: "Composite",
        className: "ShopifyObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            } })
    }
};
export const SparkObjectDataset = {
    serializedName: "SparkObject",
    type: {
        name: "Composite",
        className: "SparkObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any"
                }
            }, schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any"
                }
            } })
    }
};
export const SquareObjectDataset = {
    serializedName: "SquareObject",
    type: {
        name: "Composite",
        className: "SquareObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            } })
    }
};
export const XeroObjectDataset = {
    serializedName: "XeroObject",
    type: {
        name: "Composite",
        className: "XeroObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            } })
    }
};
export const ZohoObjectDataset = {
    serializedName: "ZohoObject",
    type: {
        name: "Composite",
        className: "ZohoObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            } })
    }
};
export const NetezzaTableDataset = {
    serializedName: "NetezzaTable",
    type: {
        name: "Composite",
        className: "NetezzaTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any"
                }
            }, schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any"
                }
            } })
    }
};
export const VerticaTableDataset = {
    serializedName: "VerticaTable",
    type: {
        name: "Composite",
        className: "VerticaTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any"
                }
            }, schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any"
                }
            } })
    }
};
export const SalesforceMarketingCloudObjectDataset = {
    serializedName: "SalesforceMarketingCloudObject",
    type: {
        name: "Composite",
        className: "SalesforceMarketingCloudObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            } })
    }
};
export const ResponsysObjectDataset = {
    serializedName: "ResponsysObject",
    type: {
        name: "Composite",
        className: "ResponsysObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            } })
    }
};
export const DynamicsAXResourceDataset = {
    serializedName: "DynamicsAXResource",
    type: {
        name: "Composite",
        className: "DynamicsAXResourceDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { path: {
                serializedName: "typeProperties.path",
                required: true,
                type: {
                    name: "any"
                }
            } })
    }
};
export const OracleServiceCloudObjectDataset = {
    serializedName: "OracleServiceCloudObject",
    type: {
        name: "Composite",
        className: "OracleServiceCloudObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            } })
    }
};
export const AzureDataExplorerTableDataset = {
    serializedName: "AzureDataExplorerTable",
    type: {
        name: "Composite",
        className: "AzureDataExplorerTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any"
                }
            } })
    }
};
export const GoogleAdWordsObjectDataset = {
    serializedName: "GoogleAdWordsObject",
    type: {
        name: "Composite",
        className: "GoogleAdWordsObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any"
                }
            } })
    }
};
export const SnowflakeDataset = {
    serializedName: "SnowflakeTable",
    type: {
        name: "Composite",
        className: "SnowflakeDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any"
                }
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any"
                }
            } })
    }
};
export const SharePointOnlineListResourceDataset = {
    serializedName: "SharePointOnlineListResource",
    type: {
        name: "Composite",
        className: "SharePointOnlineListResourceDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { listName: {
                serializedName: "typeProperties.listName",
                type: {
                    name: "any"
                }
            } })
    }
};
export const AzureDatabricksDeltaLakeDataset = {
    serializedName: "AzureDatabricksDeltaLakeDataset",
    type: {
        name: "Composite",
        className: "AzureDatabricksDeltaLakeDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any"
                }
            }, database: {
                serializedName: "typeProperties.database",
                type: {
                    name: "any"
                }
            } })
    }
};
export const LakeHouseTableDataset = {
    serializedName: "LakeHouseTable",
    type: {
        name: "Composite",
        className: "LakeHouseTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Dataset.type.modelProperties), { table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any"
                }
            } })
    }
};
export const ControlActivity = {
    serializedName: "Container",
    type: {
        name: "Composite",
        className: "ControlActivity",
        uberParent: "Activity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: Object.assign({}, Activity.type.modelProperties)
    }
};
export const ExecutionActivity = {
    serializedName: "Execution",
    type: {
        name: "Composite",
        className: "ExecutionActivity",
        uberParent: "Activity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: Object.assign(Object.assign({}, Activity.type.modelProperties), { linkedServiceName: {
                serializedName: "linkedServiceName",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            }, policy: {
                serializedName: "policy",
                type: {
                    name: "Composite",
                    className: "ActivityPolicy"
                }
            } })
    }
};
export const ExecuteWranglingDataflowActivity = {
    serializedName: "ExecuteWranglingDataflow",
    type: {
        name: "Composite",
        className: "ExecuteWranglingDataflowActivity",
        uberParent: "Activity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Activity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Activity.type.modelProperties), { policy: {
                serializedName: "policy",
                type: {
                    name: "Composite",
                    className: "ActivityPolicy"
                }
            }, dataFlow: {
                serializedName: "typeProperties.dataFlow",
                type: {
                    name: "Composite",
                    className: "DataFlowReference"
                }
            }, staging: {
                serializedName: "typeProperties.staging",
                type: {
                    name: "Composite",
                    className: "DataFlowStagingInfo"
                }
            }, integrationRuntime: {
                serializedName: "typeProperties.integrationRuntime",
                type: {
                    name: "Composite",
                    className: "IntegrationRuntimeReference"
                }
            }, compute: {
                serializedName: "typeProperties.compute",
                type: {
                    name: "Composite",
                    className: "ExecuteDataFlowActivityTypePropertiesCompute"
                }
            }, traceLevel: {
                serializedName: "typeProperties.traceLevel",
                type: {
                    name: "any"
                }
            }, continueOnError: {
                serializedName: "typeProperties.continueOnError",
                type: {
                    name: "any"
                }
            }, runConcurrently: {
                serializedName: "typeProperties.runConcurrently",
                type: {
                    name: "any"
                }
            }, sourceStagingConcurrency: {
                serializedName: "typeProperties.sourceStagingConcurrency",
                type: {
                    name: "any"
                }
            }, sinks: {
                serializedName: "typeProperties.sinks",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "Composite", className: "PowerQuerySink" } }
                }
            }, queries: {
                serializedName: "typeProperties.queries",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PowerQuerySinkMapping"
                        }
                    }
                }
            } })
    }
};
export const MultiplePipelineTrigger = {
    serializedName: "MultiplePipelineTrigger",
    type: {
        name: "Composite",
        className: "MultiplePipelineTrigger",
        uberParent: "Trigger",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: Object.assign(Object.assign({}, Trigger.type.modelProperties), { pipelines: {
                serializedName: "pipelines",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TriggerPipelineReference"
                        }
                    }
                }
            } })
    }
};
export const TumblingWindowTrigger = {
    serializedName: "TumblingWindowTrigger",
    type: {
        name: "Composite",
        className: "TumblingWindowTrigger",
        uberParent: "Trigger",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Trigger.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Trigger.type.modelProperties), { pipeline: {
                serializedName: "pipeline",
                type: {
                    name: "Composite",
                    className: "TriggerPipelineReference"
                }
            }, frequency: {
                serializedName: "typeProperties.frequency",
                required: true,
                type: {
                    name: "String"
                }
            }, interval: {
                serializedName: "typeProperties.interval",
                required: true,
                type: {
                    name: "Number"
                }
            }, startTime: {
                serializedName: "typeProperties.startTime",
                required: true,
                type: {
                    name: "DateTime"
                }
            }, endTime: {
                serializedName: "typeProperties.endTime",
                type: {
                    name: "DateTime"
                }
            }, delay: {
                serializedName: "typeProperties.delay",
                type: {
                    name: "any"
                }
            }, maxConcurrency: {
                constraints: {
                    InclusiveMaximum: 50,
                    InclusiveMinimum: 1
                },
                serializedName: "typeProperties.maxConcurrency",
                required: true,
                type: {
                    name: "Number"
                }
            }, retryPolicy: {
                serializedName: "typeProperties.retryPolicy",
                type: {
                    name: "Composite",
                    className: "RetryPolicy"
                }
            }, dependsOn: {
                serializedName: "typeProperties.dependsOn",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DependencyReference"
                        }
                    }
                }
            } })
    }
};
export const RerunTumblingWindowTrigger = {
    serializedName: "RerunTumblingWindowTrigger",
    type: {
        name: "Composite",
        className: "RerunTumblingWindowTrigger",
        uberParent: "Trigger",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Trigger.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Trigger.type.modelProperties), { parentTrigger: {
                serializedName: "typeProperties.parentTrigger",
                required: true,
                type: {
                    name: "any"
                }
            }, requestedStartTime: {
                serializedName: "typeProperties.requestedStartTime",
                required: true,
                type: {
                    name: "DateTime"
                }
            }, requestedEndTime: {
                serializedName: "typeProperties.requestedEndTime",
                required: true,
                type: {
                    name: "DateTime"
                }
            }, rerunConcurrency: {
                constraints: {
                    InclusiveMaximum: 50,
                    InclusiveMinimum: 1
                },
                serializedName: "typeProperties.rerunConcurrency",
                required: true,
                type: {
                    name: "Number"
                }
            } })
    }
};
export const ChainingTrigger = {
    serializedName: "ChainingTrigger",
    type: {
        name: "Composite",
        className: "ChainingTrigger",
        uberParent: "Trigger",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Trigger.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Trigger.type.modelProperties), { pipeline: {
                serializedName: "pipeline",
                type: {
                    name: "Composite",
                    className: "TriggerPipelineReference"
                }
            }, dependsOn: {
                serializedName: "typeProperties.dependsOn",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PipelineReference"
                        }
                    }
                }
            }, runDimension: {
                serializedName: "typeProperties.runDimension",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
export const MappingDataFlow = {
    serializedName: "MappingDataFlow",
    type: {
        name: "Composite",
        className: "MappingDataFlow",
        uberParent: "DataFlow",
        polymorphicDiscriminator: DataFlow.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DataFlow.type.modelProperties), { sources: {
                serializedName: "typeProperties.sources",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DataFlowSource"
                        }
                    }
                }
            }, sinks: {
                serializedName: "typeProperties.sinks",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DataFlowSink"
                        }
                    }
                }
            }, transformations: {
                serializedName: "typeProperties.transformations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Transformation"
                        }
                    }
                }
            }, script: {
                serializedName: "typeProperties.script",
                type: {
                    name: "String"
                }
            }, scriptLines: {
                serializedName: "typeProperties.scriptLines",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            } })
    }
};
export const Flowlet = {
    serializedName: "Flowlet",
    type: {
        name: "Composite",
        className: "Flowlet",
        uberParent: "DataFlow",
        polymorphicDiscriminator: DataFlow.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DataFlow.type.modelProperties), { sources: {
                serializedName: "typeProperties.sources",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DataFlowSource"
                        }
                    }
                }
            }, sinks: {
                serializedName: "typeProperties.sinks",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DataFlowSink"
                        }
                    }
                }
            }, transformations: {
                serializedName: "typeProperties.transformations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Transformation"
                        }
                    }
                }
            }, script: {
                serializedName: "typeProperties.script",
                type: {
                    name: "String"
                }
            }, scriptLines: {
                serializedName: "typeProperties.scriptLines",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            } })
    }
};
export const WranglingDataFlow = {
    serializedName: "WranglingDataFlow",
    type: {
        name: "Composite",
        className: "WranglingDataFlow",
        uberParent: "DataFlow",
        polymorphicDiscriminator: DataFlow.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DataFlow.type.modelProperties), { sources: {
                serializedName: "typeProperties.sources",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PowerQuerySource"
                        }
                    }
                }
            }, script: {
                serializedName: "typeProperties.script",
                type: {
                    name: "String"
                }
            }, documentLocale: {
                serializedName: "typeProperties.documentLocale",
                type: {
                    name: "String"
                }
            } })
    }
};
export const IntegrationRuntimeDebugResource = {
    type: {
        name: "Composite",
        className: "IntegrationRuntimeDebugResource",
        modelProperties: Object.assign(Object.assign({}, SubResourceDebugResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "IntegrationRuntime"
                }
            } })
    }
};
export const DataFlowDebugResource = {
    type: {
        name: "Composite",
        className: "DataFlowDebugResource",
        modelProperties: Object.assign(Object.assign({}, SubResourceDebugResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "DataFlow"
                }
            } })
    }
};
export const DatasetDebugResource = {
    type: {
        name: "Composite",
        className: "DatasetDebugResource",
        modelProperties: Object.assign(Object.assign({}, SubResourceDebugResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "Dataset"
                }
            } })
    }
};
export const LinkedServiceDebugResource = {
    type: {
        name: "Composite",
        className: "LinkedServiceDebugResource",
        modelProperties: Object.assign(Object.assign({}, SubResourceDebugResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "LinkedService"
                }
            } })
    }
};
export const ManagedIdentityCredential = {
    serializedName: "ManagedIdentity",
    type: {
        name: "Composite",
        className: "ManagedIdentityCredential",
        uberParent: "Credential",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Credential.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Credential.type.modelProperties), { resourceId: {
                serializedName: "typeProperties.resourceId",
                type: {
                    name: "String"
                }
            } })
    }
};
export const ServicePrincipalCredential = {
    serializedName: "ServicePrincipal",
    type: {
        name: "Composite",
        className: "ServicePrincipalCredential",
        uberParent: "Credential",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: Credential.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Credential.type.modelProperties), { servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                type: {
                    name: "any"
                }
            }, servicePrincipalKey: {
                serializedName: "typeProperties.servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference"
                }
            }, tenant: {
                serializedName: "typeProperties.tenant",
                type: {
                    name: "any"
                }
            } })
    }
};
export const SecureString = {
    serializedName: "SecureString",
    type: {
        name: "Composite",
        className: "SecureString",
        uberParent: "SecretBase",
        polymorphicDiscriminator: SecretBase.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, SecretBase.type.modelProperties), { value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
export const AzureKeyVaultSecretReference = {
    serializedName: "AzureKeyVaultSecret",
    type: {
        name: "Composite",
        className: "AzureKeyVaultSecretReference",
        uberParent: "SecretBase",
        polymorphicDiscriminator: SecretBase.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, SecretBase.type.modelProperties), { store: {
                serializedName: "store",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            }, secretName: {
                serializedName: "secretName",
                required: true,
                type: {
                    name: "any"
                }
            }, secretVersion: {
                serializedName: "secretVersion",
                type: {
                    name: "any"
                }
            } })
    }
};
export const DataFlowSource = {
    type: {
        name: "Composite",
        className: "DataFlowSource",
        modelProperties: Object.assign(Object.assign({}, Transformation.type.modelProperties), { schemaLinkedService: {
                serializedName: "schemaLinkedService",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            } })
    }
};
export const DataFlowSink = {
    type: {
        name: "Composite",
        className: "DataFlowSink",
        modelProperties: Object.assign(Object.assign({}, Transformation.type.modelProperties), { schemaLinkedService: {
                serializedName: "schemaLinkedService",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            }, rejectedDataLinkedService: {
                serializedName: "rejectedDataLinkedService",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            } })
    }
};
export const AzureBlobStorageLocation = {
    serializedName: "AzureBlobStorageLocation",
    type: {
        name: "Composite",
        className: "AzureBlobStorageLocation",
        uberParent: "DatasetLocation",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: DatasetLocation.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DatasetLocation.type.modelProperties), { container: {
                serializedName: "container",
                type: {
                    name: "any"
                }
            } })
    }
};
export const AzureBlobFSLocation = {
    serializedName: "AzureBlobFSLocation",
    type: {
        name: "Composite",
        className: "AzureBlobFSLocation",
        uberParent: "DatasetLocation",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: DatasetLocation.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DatasetLocation.type.modelProperties), { fileSystem: {
                serializedName: "fileSystem",
                type: {
                    name: "any"
                }
            } })
    }
};
export const AzureDataLakeStoreLocation = {
    serializedName: "AzureDataLakeStoreLocation",
    type: {
        name: "Composite",
        className: "AzureDataLakeStoreLocation",
        uberParent: "DatasetLocation",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: DatasetLocation.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, DatasetLocation.type.modelProperties)
    }
};
export const AmazonS3Location = {
    serializedName: "AmazonS3Location",
    type: {
        name: "Composite",
        className: "AmazonS3Location",
        uberParent: "DatasetLocation",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: DatasetLocation.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DatasetLocation.type.modelProperties), { bucketName: {
                serializedName: "bucketName",
                type: {
                    name: "any"
                }
            }, version: {
                serializedName: "version",
                type: {
                    name: "any"
                }
            } })
    }
};
export const FileServerLocation = {
    serializedName: "FileServerLocation",
    type: {
        name: "Composite",
        className: "FileServerLocation",
        uberParent: "DatasetLocation",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: DatasetLocation.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, DatasetLocation.type.modelProperties)
    }
};
export const AzureFileStorageLocation = {
    serializedName: "AzureFileStorageLocation",
    type: {
        name: "Composite",
        className: "AzureFileStorageLocation",
        uberParent: "DatasetLocation",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: DatasetLocation.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, DatasetLocation.type.modelProperties)
    }
};
export const AmazonS3CompatibleLocation = {
    serializedName: "AmazonS3CompatibleLocation",
    type: {
        name: "Composite",
        className: "AmazonS3CompatibleLocation",
        uberParent: "DatasetLocation",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: DatasetLocation.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DatasetLocation.type.modelProperties), { bucketName: {
                serializedName: "bucketName",
                type: {
                    name: "any"
                }
            }, version: {
                serializedName: "version",
                type: {
                    name: "any"
                }
            } })
    }
};
export const OracleCloudStorageLocation = {
    serializedName: "OracleCloudStorageLocation",
    type: {
        name: "Composite",
        className: "OracleCloudStorageLocation",
        uberParent: "DatasetLocation",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: DatasetLocation.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DatasetLocation.type.modelProperties), { bucketName: {
                serializedName: "bucketName",
                type: {
                    name: "any"
                }
            }, version: {
                serializedName: "version",
                type: {
                    name: "any"
                }
            } })
    }
};
export const GoogleCloudStorageLocation = {
    serializedName: "GoogleCloudStorageLocation",
    type: {
        name: "Composite",
        className: "GoogleCloudStorageLocation",
        uberParent: "DatasetLocation",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: DatasetLocation.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DatasetLocation.type.modelProperties), { bucketName: {
                serializedName: "bucketName",
                type: {
                    name: "any"
                }
            }, version: {
                serializedName: "version",
                type: {
                    name: "any"
                }
            } })
    }
};
export const FtpServerLocation = {
    serializedName: "FtpServerLocation",
    type: {
        name: "Composite",
        className: "FtpServerLocation",
        uberParent: "DatasetLocation",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: DatasetLocation.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, DatasetLocation.type.modelProperties)
    }
};
export const SftpLocation = {
    serializedName: "SftpLocation",
    type: {
        name: "Composite",
        className: "SftpLocation",
        uberParent: "DatasetLocation",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: DatasetLocation.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, DatasetLocation.type.modelProperties)
    }
};
export const HttpServerLocation = {
    serializedName: "HttpServerLocation",
    type: {
        name: "Composite",
        className: "HttpServerLocation",
        uberParent: "DatasetLocation",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: DatasetLocation.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DatasetLocation.type.modelProperties), { relativeUrl: {
                serializedName: "relativeUrl",
                type: {
                    name: "any"
                }
            } })
    }
};
export const HdfsLocation = {
    serializedName: "HdfsLocation",
    type: {
        name: "Composite",
        className: "HdfsLocation",
        uberParent: "DatasetLocation",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: DatasetLocation.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, DatasetLocation.type.modelProperties)
    }
};
export const LakeHouseLocation = {
    serializedName: "LakeHouseLocation",
    type: {
        name: "Composite",
        className: "LakeHouseLocation",
        uberParent: "DatasetLocation",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: DatasetLocation.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, DatasetLocation.type.modelProperties)
    }
};
export const TextFormat = {
    serializedName: "TextFormat",
    type: {
        name: "Composite",
        className: "TextFormat",
        uberParent: "DatasetStorageFormat",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: DatasetStorageFormat.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DatasetStorageFormat.type.modelProperties), { columnDelimiter: {
                serializedName: "columnDelimiter",
                type: {
                    name: "any"
                }
            }, rowDelimiter: {
                serializedName: "rowDelimiter",
                type: {
                    name: "any"
                }
            }, escapeChar: {
                serializedName: "escapeChar",
                type: {
                    name: "any"
                }
            }, quoteChar: {
                serializedName: "quoteChar",
                type: {
                    name: "any"
                }
            }, nullValue: {
                serializedName: "nullValue",
                type: {
                    name: "any"
                }
            }, encodingName: {
                serializedName: "encodingName",
                type: {
                    name: "any"
                }
            }, treatEmptyAsNull: {
                serializedName: "treatEmptyAsNull",
                type: {
                    name: "any"
                }
            }, skipLineCount: {
                serializedName: "skipLineCount",
                type: {
                    name: "any"
                }
            }, firstRowAsHeader: {
                serializedName: "firstRowAsHeader",
                type: {
                    name: "any"
                }
            } })
    }
};
export const JsonFormat = {
    serializedName: "JsonFormat",
    type: {
        name: "Composite",
        className: "JsonFormat",
        uberParent: "DatasetStorageFormat",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: DatasetStorageFormat.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DatasetStorageFormat.type.modelProperties), { filePattern: {
                serializedName: "filePattern",
                type: {
                    name: "any"
                }
            }, nestingSeparator: {
                serializedName: "nestingSeparator",
                type: {
                    name: "any"
                }
            }, encodingName: {
                serializedName: "encodingName",
                type: {
                    name: "any"
                }
            }, jsonNodeReference: {
                serializedName: "jsonNodeReference",
                type: {
                    name: "any"
                }
            }, jsonPathDefinition: {
                serializedName: "jsonPathDefinition",
                type: {
                    name: "any"
                }
            } })
    }
};
export const AvroFormat = {
    serializedName: "AvroFormat",
    type: {
        name: "Composite",
        className: "AvroFormat",
        uberParent: "DatasetStorageFormat",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: DatasetStorageFormat.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, DatasetStorageFormat.type.modelProperties)
    }
};
export const OrcFormat = {
    serializedName: "OrcFormat",
    type: {
        name: "Composite",
        className: "OrcFormat",
        uberParent: "DatasetStorageFormat",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: DatasetStorageFormat.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, DatasetStorageFormat.type.modelProperties)
    }
};
export const ParquetFormat = {
    serializedName: "ParquetFormat",
    type: {
        name: "Composite",
        className: "ParquetFormat",
        uberParent: "DatasetStorageFormat",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: DatasetStorageFormat.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, DatasetStorageFormat.type.modelProperties)
    }
};
export const CmdkeySetup = {
    serializedName: "CmdkeySetup",
    type: {
        name: "Composite",
        className: "CmdkeySetup",
        uberParent: "CustomSetupBase",
        polymorphicDiscriminator: CustomSetupBase.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CustomSetupBase.type.modelProperties), { targetName: {
                serializedName: "typeProperties.targetName",
                required: true,
                type: {
                    name: "any"
                }
            }, userName: {
                serializedName: "typeProperties.userName",
                required: true,
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            } })
    }
};
export const EnvironmentVariableSetup = {
    serializedName: "EnvironmentVariableSetup",
    type: {
        name: "Composite",
        className: "EnvironmentVariableSetup",
        uberParent: "CustomSetupBase",
        polymorphicDiscriminator: CustomSetupBase.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CustomSetupBase.type.modelProperties), { variableName: {
                serializedName: "typeProperties.variableName",
                required: true,
                type: {
                    name: "String"
                }
            }, variableValue: {
                serializedName: "typeProperties.variableValue",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
export const ComponentSetup = {
    serializedName: "ComponentSetup",
    type: {
        name: "Composite",
        className: "ComponentSetup",
        uberParent: "CustomSetupBase",
        polymorphicDiscriminator: CustomSetupBase.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CustomSetupBase.type.modelProperties), { componentName: {
                serializedName: "typeProperties.componentName",
                required: true,
                type: {
                    name: "String"
                }
            }, licenseKey: {
                serializedName: "typeProperties.licenseKey",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            } })
    }
};
export const AzPowerShellSetup = {
    serializedName: "AzPowerShellSetup",
    type: {
        name: "Composite",
        className: "AzPowerShellSetup",
        uberParent: "CustomSetupBase",
        polymorphicDiscriminator: CustomSetupBase.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CustomSetupBase.type.modelProperties), { version: {
                serializedName: "typeProperties.version",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
export const LinkedIntegrationRuntimeKeyAuthorization = {
    serializedName: "Key",
    type: {
        name: "Composite",
        className: "LinkedIntegrationRuntimeKeyAuthorization",
        uberParent: "LinkedIntegrationRuntimeType",
        polymorphicDiscriminator: LinkedIntegrationRuntimeType.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedIntegrationRuntimeType.type.modelProperties), { key: {
                serializedName: "key",
                type: {
                    name: "Composite",
                    className: "SecureString"
                }
            } })
    }
};
export const LinkedIntegrationRuntimeRbacAuthorization = {
    serializedName: "RBAC",
    type: {
        name: "Composite",
        className: "LinkedIntegrationRuntimeRbacAuthorization",
        uberParent: "LinkedIntegrationRuntimeType",
        polymorphicDiscriminator: LinkedIntegrationRuntimeType.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LinkedIntegrationRuntimeType.type.modelProperties), { resourceId: {
                serializedName: "resourceId",
                required: true,
                type: {
                    name: "String"
                }
            }, credential: {
                serializedName: "credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference"
                }
            } })
    }
};
export const WebAnonymousAuthentication = {
    serializedName: "Anonymous",
    type: {
        name: "Composite",
        className: "WebAnonymousAuthentication",
        uberParent: "WebLinkedServiceTypeProperties",
        polymorphicDiscriminator: WebLinkedServiceTypeProperties.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, WebLinkedServiceTypeProperties.type.modelProperties)
    }
};
export const WebBasicAuthentication = {
    serializedName: "Basic",
    type: {
        name: "Composite",
        className: "WebBasicAuthentication",
        uberParent: "WebLinkedServiceTypeProperties",
        polymorphicDiscriminator: WebLinkedServiceTypeProperties.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, WebLinkedServiceTypeProperties.type.modelProperties), { username: {
                serializedName: "username",
                required: true,
                type: {
                    name: "any"
                }
            }, password: {
                serializedName: "password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            } })
    }
};
export const WebClientCertificateAuthentication = {
    serializedName: "ClientCertificate",
    type: {
        name: "Composite",
        className: "WebClientCertificateAuthentication",
        uberParent: "WebLinkedServiceTypeProperties",
        polymorphicDiscriminator: WebLinkedServiceTypeProperties.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, WebLinkedServiceTypeProperties.type.modelProperties), { pfx: {
                serializedName: "pfx",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            }, password: {
                serializedName: "password",
                type: {
                    name: "Composite",
                    className: "SecretBase"
                }
            } })
    }
};
export const AzureBlobStorageReadSettings = {
    serializedName: "AzureBlobStorageReadSettings",
    type: {
        name: "Composite",
        className: "AzureBlobStorageReadSettings",
        uberParent: "StoreReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: StoreReadSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, StoreReadSettings.type.modelProperties), { recursive: {
                serializedName: "recursive",
                type: {
                    name: "any"
                }
            }, wildcardFolderPath: {
                serializedName: "wildcardFolderPath",
                type: {
                    name: "any"
                }
            }, wildcardFileName: {
                serializedName: "wildcardFileName",
                type: {
                    name: "any"
                }
            }, prefix: {
                serializedName: "prefix",
                type: {
                    name: "any"
                }
            }, fileListPath: {
                serializedName: "fileListPath",
                type: {
                    name: "any"
                }
            }, enablePartitionDiscovery: {
                serializedName: "enablePartitionDiscovery",
                type: {
                    name: "any"
                }
            }, partitionRootPath: {
                serializedName: "partitionRootPath",
                type: {
                    name: "any"
                }
            }, deleteFilesAfterCompletion: {
                serializedName: "deleteFilesAfterCompletion",
                type: {
                    name: "any"
                }
            }, modifiedDatetimeStart: {
                serializedName: "modifiedDatetimeStart",
                type: {
                    name: "any"
                }
            }, modifiedDatetimeEnd: {
                serializedName: "modifiedDatetimeEnd",
                type: {
                    name: "any"
                }
            } })
    }
};
export const AzureBlobFSReadSettings = {
    serializedName: "AzureBlobFSReadSettings",
    type: {
        name: "Composite",
        className: "AzureBlobFSReadSettings",
        uberParent: "StoreReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: StoreReadSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, StoreReadSettings.type.modelProperties), { recursive: {
                serializedName: "recursive",
                type: {
                    name: "any"
                }
            }, wildcardFolderPath: {
                serializedName: "wildcardFolderPath",
                type: {
                    name: "any"
                }
            }, wildcardFileName: {
                serializedName: "wildcardFileName",
                type: {
                    name: "any"
                }
            }, fileListPath: {
                serializedName: "fileListPath",
                type: {
                    name: "any"
                }
            }, enablePartitionDiscovery: {
                serializedName: "enablePartitionDiscovery",
                type: {
                    name: "any"
                }
            }, partitionRootPath: {
                serializedName: "partitionRootPath",
                type: {
                    name: "any"
                }
            }, deleteFilesAfterCompletion: {
                serializedName: "deleteFilesAfterCompletion",
                type: {
                    name: "any"
                }
            }, modifiedDatetimeStart: {
                serializedName: "modifiedDatetimeStart",
                type: {
                    name: "any"
                }
            }, modifiedDatetimeEnd: {
                serializedName: "modifiedDatetimeEnd",
                type: {
                    name: "any"
                }
            } })
    }
};
export const AzureDataLakeStoreReadSettings = {
    serializedName: "AzureDataLakeStoreReadSettings",
    type: {
        name: "Composite",
        className: "AzureDataLakeStoreReadSettings",
        uberParent: "StoreReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: StoreReadSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, StoreReadSettings.type.modelProperties), { recursive: {
                serializedName: "recursive",
                type: {
                    name: "any"
                }
            }, wildcardFolderPath: {
                serializedName: "wildcardFolderPath",
                type: {
                    name: "any"
                }
            }, wildcardFileName: {
                serializedName: "wildcardFileName",
                type: {
                    name: "any"
                }
            }, fileListPath: {
                serializedName: "fileListPath",
                type: {
                    name: "any"
                }
            }, listAfter: {
                serializedName: "listAfter",
                type: {
                    name: "any"
                }
            }, listBefore: {
                serializedName: "listBefore",
                type: {
                    name: "any"
                }
            }, enablePartitionDiscovery: {
                serializedName: "enablePartitionDiscovery",
                type: {
                    name: "any"
                }
            }, partitionRootPath: {
                serializedName: "partitionRootPath",
                type: {
                    name: "any"
                }
            }, deleteFilesAfterCompletion: {
                serializedName: "deleteFilesAfterCompletion",
                type: {
                    name: "any"
                }
            }, modifiedDatetimeStart: {
                serializedName: "modifiedDatetimeStart",
                type: {
                    name: "any"
                }
            }, modifiedDatetimeEnd: {
                serializedName: "modifiedDatetimeEnd",
                type: {
                    name: "any"
                }
            } })
    }
};
export const AmazonS3ReadSettings = {
    serializedName: "AmazonS3ReadSettings",
    type: {
        name: "Composite",
        className: "AmazonS3ReadSettings",
        uberParent: "StoreReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: StoreReadSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, StoreReadSettings.type.modelProperties), { recursive: {
                serializedName: "recursive",
                type: {
                    name: "any"
                }
            }, wildcardFolderPath: {
                serializedName: "wildcardFolderPath",
                type: {
                    name: "any"
                }
            }, wildcardFileName: {
                serializedName: "wildcardFileName",
                type: {
                    name: "any"
                }
            }, prefix: {
                serializedName: "prefix",
                type: {
                    name: "any"
                }
            }, fileListPath: {
                serializedName: "fileListPath",
                type: {
                    name: "any"
                }
            }, enablePartitionDiscovery: {
                serializedName: "enablePartitionDiscovery",
                type: {
                    name: "any"
                }
            }, partitionRootPath: {
                serializedName: "partitionRootPath",
                type: {
                    name: "any"
                }
            }, deleteFilesAfterCompletion: {
                serializedName: "deleteFilesAfterCompletion",
                type: {
                    name: "any"
                }
            }, modifiedDatetimeStart: {
                serializedName: "modifiedDatetimeStart",
                type: {
                    name: "any"
                }
            }, modifiedDatetimeEnd: {
                serializedName: "modifiedDatetimeEnd",
                type: {
                    name: "any"
                }
            } })
    }
};
export const FileServerReadSettings = {
    serializedName: "FileServerReadSettings",
    type: {
        name: "Composite",
        className: "FileServerReadSettings",
        uberParent: "StoreReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: StoreReadSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, StoreReadSettings.type.modelProperties), { recursive: {
                serializedName: "recursive",
                type: {
                    name: "any"
                }
            }, wildcardFolderPath: {
                serializedName: "wildcardFolderPath",
                type: {
                    name: "any"
                }
            }, wildcardFileName: {
                serializedName: "wildcardFileName",
                type: {
                    name: "any"
                }
            }, fileListPath: {
                serializedName: "fileListPath",
                type: {
                    name: "any"
                }
            }, enablePartitionDiscovery: {
                serializedName: "enablePartitionDiscovery",
                type: {
                    name: "any"
                }
            }, partitionRootPath: {
                serializedName: "partitionRootPath",
                type: {
                    name: "any"
                }
            }, deleteFilesAfterCompletion: {
                serializedName: "deleteFilesAfterCompletion",
                type: {
                    name: "any"
                }
            }, modifiedDatetimeStart: {
                serializedName: "modifiedDatetimeStart",
                type: {
                    name: "any"
                }
            }, modifiedDatetimeEnd: {
                serializedName: "modifiedDatetimeEnd",
                type: {
                    name: "any"
                }
            }, fileFilter: {
                serializedName: "fileFilter",
                type: {
                    name: "any"
                }
            } })
    }
};
export const AzureFileStorageReadSettings = {
    serializedName: "AzureFileStorageReadSettings",
    type: {
        name: "Composite",
        className: "AzureFileStorageReadSettings",
        uberParent: "StoreReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: StoreReadSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, StoreReadSettings.type.modelProperties), { recursive: {
                serializedName: "recursive",
                type: {
                    name: "any"
                }
            }, wildcardFolderPath: {
                serializedName: "wildcardFolderPath",
                type: {
                    name: "any"
                }
            }, wildcardFileName: {
                serializedName: "wildcardFileName",
                type: {
                    name: "any"
                }
            }, prefix: {
                serializedName: "prefix",
                type: {
                    name: "any"
                }
            }, fileListPath: {
                serializedName: "fileListPath",
                type: {
                    name: "any"
                }
            }, enablePartitionDiscovery: {
                serializedName: "enablePartitionDiscovery",
                type: {
                    name: "any"
                }
            }, partitionRootPath: {
                serializedName: "partitionRootPath",
                type: {
                    name: "any"
                }
            }, deleteFilesAfterCompletion: {
                serializedName: "deleteFilesAfterCompletion",
                type: {
                    name: "any"
                }
            }, modifiedDatetimeStart: {
                serializedName: "modifiedDatetimeStart",
                type: {
                    name: "any"
                }
            }, modifiedDatetimeEnd: {
                serializedName: "modifiedDatetimeEnd",
                type: {
                    name: "any"
                }
            } })
    }
};
export const AmazonS3CompatibleReadSettings = {
    serializedName: "AmazonS3CompatibleReadSettings",
    type: {
        name: "Composite",
        className: "AmazonS3CompatibleReadSettings",
        uberParent: "StoreReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: StoreReadSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, StoreReadSettings.type.modelProperties), { recursive: {
                serializedName: "recursive",
                type: {
                    name: "any"
                }
            }, wildcardFolderPath: {
                serializedName: "wildcardFolderPath",
                type: {
                    name: "any"
                }
            }, wildcardFileName: {
                serializedName: "wildcardFileName",
                type: {
                    name: "any"
                }
            }, prefix: {
                serializedName: "prefix",
                type: {
                    name: "any"
                }
            }, fileListPath: {
                serializedName: "fileListPath",
                type: {
                    name: "any"
                }
            }, enablePartitionDiscovery: {
                serializedName: "enablePartitionDiscovery",
                type: {
                    name: "any"
                }
            }, partitionRootPath: {
                serializedName: "partitionRootPath",
                type: {
                    name: "any"
                }
            }, deleteFilesAfterCompletion: {
                serializedName: "deleteFilesAfterCompletion",
                type: {
                    name: "any"
                }
            }, modifiedDatetimeStart: {
                serializedName: "modifiedDatetimeStart",
                type: {
                    name: "any"
                }
            }, modifiedDatetimeEnd: {
                serializedName: "modifiedDatetimeEnd",
                type: {
                    name: "any"
                }
            } })
    }
};
export const OracleCloudStorageReadSettings = {
    serializedName: "OracleCloudStorageReadSettings",
    type: {
        name: "Composite",
        className: "OracleCloudStorageReadSettings",
        uberParent: "StoreReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: StoreReadSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, StoreReadSettings.type.modelProperties), { recursive: {
                serializedName: "recursive",
                type: {
                    name: "any"
                }
            }, wildcardFolderPath: {
                serializedName: "wildcardFolderPath",
                type: {
                    name: "any"
                }
            }, wildcardFileName: {
                serializedName: "wildcardFileName",
                type: {
                    name: "any"
                }
            }, prefix: {
                serializedName: "prefix",
                type: {
                    name: "any"
                }
            }, fileListPath: {
                serializedName: "fileListPath",
                type: {
                    name: "any"
                }
            }, enablePartitionDiscovery: {
                serializedName: "enablePartitionDiscovery",
                type: {
                    name: "any"
                }
            }, partitionRootPath: {
                serializedName: "partitionRootPath",
                type: {
                    name: "any"
                }
            }, deleteFilesAfterCompletion: {
                serializedName: "deleteFilesAfterCompletion",
                type: {
                    name: "any"
                }
            }, modifiedDatetimeStart: {
                serializedName: "modifiedDatetimeStart",
                type: {
                    name: "any"
                }
            }, modifiedDatetimeEnd: {
                serializedName: "modifiedDatetimeEnd",
                type: {
                    name: "any"
                }
            } })
    }
};
export const GoogleCloudStorageReadSettings = {
    serializedName: "GoogleCloudStorageReadSettings",
    type: {
        name: "Composite",
        className: "GoogleCloudStorageReadSettings",
        uberParent: "StoreReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: StoreReadSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, StoreReadSettings.type.modelProperties), { recursive: {
                serializedName: "recursive",
                type: {
                    name: "any"
                }
            }, wildcardFolderPath: {
                serializedName: "wildcardFolderPath",
                type: {
                    name: "any"
                }
            }, wildcardFileName: {
                serializedName: "wildcardFileName",
                type: {
                    name: "any"
                }
            }, prefix: {
                serializedName: "prefix",
                type: {
                    name: "any"
                }
            }, fileListPath: {
                serializedName: "fileListPath",
                type: {
                    name: "any"
                }
            }, enablePartitionDiscovery: {
                serializedName: "enablePartitionDiscovery",
                type: {
                    name: "any"
                }
            }, partitionRootPath: {
                serializedName: "partitionRootPath",
                type: {
                    name: "any"
                }
            }, deleteFilesAfterCompletion: {
                serializedName: "deleteFilesAfterCompletion",
                type: {
                    name: "any"
                }
            }, modifiedDatetimeStart: {
                serializedName: "modifiedDatetimeStart",
                type: {
                    name: "any"
                }
            }, modifiedDatetimeEnd: {
                serializedName: "modifiedDatetimeEnd",
                type: {
                    name: "any"
                }
            } })
    }
};
export const FtpReadSettings = {
    serializedName: "FtpReadSettings",
    type: {
        name: "Composite",
        className: "FtpReadSettings",
        uberParent: "StoreReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: StoreReadSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, StoreReadSettings.type.modelProperties), { recursive: {
                serializedName: "recursive",
                type: {
                    name: "any"
                }
            }, wildcardFolderPath: {
                serializedName: "wildcardFolderPath",
                type: {
                    name: "any"
                }
            }, wildcardFileName: {
                serializedName: "wildcardFileName",
                type: {
                    name: "any"
                }
            }, enablePartitionDiscovery: {
                serializedName: "enablePartitionDiscovery",
                type: {
                    name: "any"
                }
            }, partitionRootPath: {
                serializedName: "partitionRootPath",
                type: {
                    name: "any"
                }
            }, deleteFilesAfterCompletion: {
                serializedName: "deleteFilesAfterCompletion",
                type: {
                    name: "any"
                }
            }, fileListPath: {
                serializedName: "fileListPath",
                type: {
                    name: "any"
                }
            }, useBinaryTransfer: {
                serializedName: "useBinaryTransfer",
                type: {
                    name: "any"
                }
            }, disableChunking: {
                serializedName: "disableChunking",
                type: {
                    name: "any"
                }
            } })
    }
};
export const SftpReadSettings = {
    serializedName: "SftpReadSettings",
    type: {
        name: "Composite",
        className: "SftpReadSettings",
        uberParent: "StoreReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: StoreReadSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, StoreReadSettings.type.modelProperties), { recursive: {
                serializedName: "recursive",
                type: {
                    name: "any"
                }
            }, wildcardFolderPath: {
                serializedName: "wildcardFolderPath",
                type: {
                    name: "any"
                }
            }, wildcardFileName: {
                serializedName: "wildcardFileName",
                type: {
                    name: "any"
                }
            }, enablePartitionDiscovery: {
                serializedName: "enablePartitionDiscovery",
                type: {
                    name: "any"
                }
            }, partitionRootPath: {
                serializedName: "partitionRootPath",
                type: {
                    name: "any"
                }
            }, fileListPath: {
                serializedName: "fileListPath",
                type: {
                    name: "any"
                }
            }, deleteFilesAfterCompletion: {
                serializedName: "deleteFilesAfterCompletion",
                type: {
                    name: "any"
                }
            }, modifiedDatetimeStart: {
                serializedName: "modifiedDatetimeStart",
                type: {
                    name: "any"
                }
            }, modifiedDatetimeEnd: {
                serializedName: "modifiedDatetimeEnd",
                type: {
                    name: "any"
                }
            }, disableChunking: {
                serializedName: "disableChunking",
                type: {
                    name: "any"
                }
            } })
    }
};
export const HttpReadSettings = {
    serializedName: "HttpReadSettings",
    type: {
        name: "Composite",
        className: "HttpReadSettings",
        uberParent: "StoreReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: StoreReadSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, StoreReadSettings.type.modelProperties), { requestMethod: {
                serializedName: "requestMethod",
                type: {
                    name: "any"
                }
            }, requestBody: {
                serializedName: "requestBody",
                type: {
                    name: "any"
                }
            }, additionalHeaders: {
                serializedName: "additionalHeaders",
                type: {
                    name: "any"
                }
            }, requestTimeout: {
                serializedName: "requestTimeout",
                type: {
                    name: "any"
                }
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any"
                }
            } })
    }
};
export const HdfsReadSettings = {
    serializedName: "HdfsReadSettings",
    type: {
        name: "Composite",
        className: "HdfsReadSettings",
        uberParent: "StoreReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: StoreReadSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, StoreReadSettings.type.modelProperties), { recursive: {
                serializedName: "recursive",
                type: {
                    name: "any"
                }
            }, wildcardFolderPath: {
                serializedName: "wildcardFolderPath",
                type: {
                    name: "any"
                }
            }, wildcardFileName: {
                serializedName: "wildcardFileName",
                type: {
                    name: "any"
                }
            }, fileListPath: {
                serializedName: "fileListPath",
                type: {
                    name: "any"
                }
            }, enablePartitionDiscovery: {
                serializedName: "enablePartitionDiscovery",
                type: {
                    name: "any"
                }
            }, partitionRootPath: {
                serializedName: "partitionRootPath",
                type: {
                    name: "any"
                }
            }, modifiedDatetimeStart: {
                serializedName: "modifiedDatetimeStart",
                type: {
                    name: "any"
                }
            }, modifiedDatetimeEnd: {
                serializedName: "modifiedDatetimeEnd",
                type: {
                    name: "any"
                }
            }, distcpSettings: {
                serializedName: "distcpSettings",
                type: {
                    name: "Composite",
                    className: "DistcpSettings"
                }
            }, deleteFilesAfterCompletion: {
                serializedName: "deleteFilesAfterCompletion",
                type: {
                    name: "any"
                }
            } })
    }
};
export const LakeHouseReadSettings = {
    serializedName: "LakeHouseReadSettings",
    type: {
        name: "Composite",
        className: "LakeHouseReadSettings",
        uberParent: "StoreReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: StoreReadSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, StoreReadSettings.type.modelProperties), { recursive: {
                serializedName: "recursive",
                type: {
                    name: "any"
                }
            }, wildcardFolderPath: {
                serializedName: "wildcardFolderPath",
                type: {
                    name: "any"
                }
            }, wildcardFileName: {
                serializedName: "wildcardFileName",
                type: {
                    name: "any"
                }
            }, fileListPath: {
                serializedName: "fileListPath",
                type: {
                    name: "any"
                }
            }, enablePartitionDiscovery: {
                serializedName: "enablePartitionDiscovery",
                type: {
                    name: "any"
                }
            }, partitionRootPath: {
                serializedName: "partitionRootPath",
                type: {
                    name: "any"
                }
            }, deleteFilesAfterCompletion: {
                serializedName: "deleteFilesAfterCompletion",
                type: {
                    name: "any"
                }
            }, modifiedDatetimeStart: {
                serializedName: "modifiedDatetimeStart",
                type: {
                    name: "any"
                }
            }, modifiedDatetimeEnd: {
                serializedName: "modifiedDatetimeEnd",
                type: {
                    name: "any"
                }
            } })
    }
};
export const SftpWriteSettings = {
    serializedName: "SftpWriteSettings",
    type: {
        name: "Composite",
        className: "SftpWriteSettings",
        uberParent: "StoreWriteSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: StoreWriteSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, StoreWriteSettings.type.modelProperties), { operationTimeout: {
                serializedName: "operationTimeout",
                type: {
                    name: "any"
                }
            }, useTempFileRename: {
                serializedName: "useTempFileRename",
                type: {
                    name: "any"
                }
            } })
    }
};
export const AzureBlobStorageWriteSettings = {
    serializedName: "AzureBlobStorageWriteSettings",
    type: {
        name: "Composite",
        className: "AzureBlobStorageWriteSettings",
        uberParent: "StoreWriteSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: StoreWriteSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, StoreWriteSettings.type.modelProperties), { blockSizeInMB: {
                serializedName: "blockSizeInMB",
                type: {
                    name: "any"
                }
            } })
    }
};
export const AzureBlobFSWriteSettings = {
    serializedName: "AzureBlobFSWriteSettings",
    type: {
        name: "Composite",
        className: "AzureBlobFSWriteSettings",
        uberParent: "StoreWriteSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: StoreWriteSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, StoreWriteSettings.type.modelProperties), { blockSizeInMB: {
                serializedName: "blockSizeInMB",
                type: {
                    name: "any"
                }
            } })
    }
};
export const AzureDataLakeStoreWriteSettings = {
    serializedName: "AzureDataLakeStoreWriteSettings",
    type: {
        name: "Composite",
        className: "AzureDataLakeStoreWriteSettings",
        uberParent: "StoreWriteSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: StoreWriteSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, StoreWriteSettings.type.modelProperties), { expiryDateTime: {
                serializedName: "expiryDateTime",
                type: {
                    name: "any"
                }
            } })
    }
};
export const FileServerWriteSettings = {
    serializedName: "FileServerWriteSettings",
    type: {
        name: "Composite",
        className: "FileServerWriteSettings",
        uberParent: "StoreWriteSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: StoreWriteSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, StoreWriteSettings.type.modelProperties)
    }
};
export const AzureFileStorageWriteSettings = {
    serializedName: "AzureFileStorageWriteSettings",
    type: {
        name: "Composite",
        className: "AzureFileStorageWriteSettings",
        uberParent: "StoreWriteSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: StoreWriteSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, StoreWriteSettings.type.modelProperties)
    }
};
export const LakeHouseWriteSettings = {
    serializedName: "LakeHouseWriteSettings",
    type: {
        name: "Composite",
        className: "LakeHouseWriteSettings",
        uberParent: "StoreWriteSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: StoreWriteSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, StoreWriteSettings.type.modelProperties)
    }
};
export const ParquetReadSettings = {
    serializedName: "ParquetReadSettings",
    type: {
        name: "Composite",
        className: "ParquetReadSettings",
        uberParent: "FormatReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: FormatReadSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, FormatReadSettings.type.modelProperties), { compressionProperties: {
                serializedName: "compressionProperties",
                type: {
                    name: "Composite",
                    className: "CompressionReadSettings"
                }
            } })
    }
};
export const DelimitedTextReadSettings = {
    serializedName: "DelimitedTextReadSettings",
    type: {
        name: "Composite",
        className: "DelimitedTextReadSettings",
        uberParent: "FormatReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: FormatReadSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, FormatReadSettings.type.modelProperties), { skipLineCount: {
                serializedName: "skipLineCount",
                type: {
                    name: "any"
                }
            }, compressionProperties: {
                serializedName: "compressionProperties",
                type: {
                    name: "Composite",
                    className: "CompressionReadSettings"
                }
            } })
    }
};
export const JsonReadSettings = {
    serializedName: "JsonReadSettings",
    type: {
        name: "Composite",
        className: "JsonReadSettings",
        uberParent: "FormatReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: FormatReadSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, FormatReadSettings.type.modelProperties), { compressionProperties: {
                serializedName: "compressionProperties",
                type: {
                    name: "Composite",
                    className: "CompressionReadSettings"
                }
            } })
    }
};
export const XmlReadSettings = {
    serializedName: "XmlReadSettings",
    type: {
        name: "Composite",
        className: "XmlReadSettings",
        uberParent: "FormatReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: FormatReadSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, FormatReadSettings.type.modelProperties), { compressionProperties: {
                serializedName: "compressionProperties",
                type: {
                    name: "Composite",
                    className: "CompressionReadSettings"
                }
            }, validationMode: {
                serializedName: "validationMode",
                type: {
                    name: "any"
                }
            }, detectDataType: {
                serializedName: "detectDataType",
                type: {
                    name: "any"
                }
            }, namespaces: {
                serializedName: "namespaces",
                type: {
                    name: "any"
                }
            }, namespacePrefixes: {
                serializedName: "namespacePrefixes",
                type: {
                    name: "any"
                }
            } })
    }
};
export const BinaryReadSettings = {
    serializedName: "BinaryReadSettings",
    type: {
        name: "Composite",
        className: "BinaryReadSettings",
        uberParent: "FormatReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: FormatReadSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, FormatReadSettings.type.modelProperties), { compressionProperties: {
                serializedName: "compressionProperties",
                type: {
                    name: "Composite",
                    className: "CompressionReadSettings"
                }
            } })
    }
};
export const ZipDeflateReadSettings = {
    serializedName: "ZipDeflateReadSettings",
    type: {
        name: "Composite",
        className: "ZipDeflateReadSettings",
        uberParent: "CompressionReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CompressionReadSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CompressionReadSettings.type.modelProperties), { preserveZipFileNameAsFolder: {
                serializedName: "preserveZipFileNameAsFolder",
                type: {
                    name: "any"
                }
            } })
    }
};
export const TarReadSettings = {
    serializedName: "TarReadSettings",
    type: {
        name: "Composite",
        className: "TarReadSettings",
        uberParent: "CompressionReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CompressionReadSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CompressionReadSettings.type.modelProperties), { preserveCompressionFileNameAsFolder: {
                serializedName: "preserveCompressionFileNameAsFolder",
                type: {
                    name: "any"
                }
            } })
    }
};
export const TarGZipReadSettings = {
    serializedName: "TarGZipReadSettings",
    type: {
        name: "Composite",
        className: "TarGZipReadSettings",
        uberParent: "CompressionReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CompressionReadSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CompressionReadSettings.type.modelProperties), { preserveCompressionFileNameAsFolder: {
                serializedName: "preserveCompressionFileNameAsFolder",
                type: {
                    name: "any"
                }
            } })
    }
};
export const AvroWriteSettings = {
    serializedName: "AvroWriteSettings",
    type: {
        name: "Composite",
        className: "AvroWriteSettings",
        uberParent: "FormatWriteSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: FormatWriteSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, FormatWriteSettings.type.modelProperties), { recordName: {
                serializedName: "recordName",
                type: {
                    name: "String"
                }
            }, recordNamespace: {
                serializedName: "recordNamespace",
                type: {
                    name: "String"
                }
            }, maxRowsPerFile: {
                serializedName: "maxRowsPerFile",
                type: {
                    name: "any"
                }
            }, fileNamePrefix: {
                serializedName: "fileNamePrefix",
                type: {
                    name: "any"
                }
            } })
    }
};
export const OrcWriteSettings = {
    serializedName: "OrcWriteSettings",
    type: {
        name: "Composite",
        className: "OrcWriteSettings",
        uberParent: "FormatWriteSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: FormatWriteSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, FormatWriteSettings.type.modelProperties), { maxRowsPerFile: {
                serializedName: "maxRowsPerFile",
                type: {
                    name: "any"
                }
            }, fileNamePrefix: {
                serializedName: "fileNamePrefix",
                type: {
                    name: "any"
                }
            } })
    }
};
export const ParquetWriteSettings = {
    serializedName: "ParquetWriteSettings",
    type: {
        name: "Composite",
        className: "ParquetWriteSettings",
        uberParent: "FormatWriteSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: FormatWriteSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, FormatWriteSettings.type.modelProperties), { maxRowsPerFile: {
                serializedName: "maxRowsPerFile",
                type: {
                    name: "any"
                }
            }, fileNamePrefix: {
                serializedName: "fileNamePrefix",
                type: {
                    name: "any"
                }
            } })
    }
};
export const DelimitedTextWriteSettings = {
    serializedName: "DelimitedTextWriteSettings",
    type: {
        name: "Composite",
        className: "DelimitedTextWriteSettings",
        uberParent: "FormatWriteSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: FormatWriteSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, FormatWriteSettings.type.modelProperties), { quoteAllText: {
                serializedName: "quoteAllText",
                type: {
                    name: "any"
                }
            }, fileExtension: {
                serializedName: "fileExtension",
                required: true,
                type: {
                    name: "any"
                }
            }, maxRowsPerFile: {
                serializedName: "maxRowsPerFile",
                type: {
                    name: "any"
                }
            }, fileNamePrefix: {
                serializedName: "fileNamePrefix",
                type: {
                    name: "any"
                }
            } })
    }
};
export const JsonWriteSettings = {
    serializedName: "JsonWriteSettings",
    type: {
        name: "Composite",
        className: "JsonWriteSettings",
        uberParent: "FormatWriteSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: FormatWriteSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, FormatWriteSettings.type.modelProperties), { filePattern: {
                serializedName: "filePattern",
                type: {
                    name: "any"
                }
            } })
    }
};
export const AvroSource = {
    serializedName: "AvroSource",
    type: {
        name: "Composite",
        className: "AvroSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { storeSettings: {
                serializedName: "storeSettings",
                type: {
                    name: "Composite",
                    className: "StoreReadSettings"
                }
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any"
                }
            } })
    }
};
export const ExcelSource = {
    serializedName: "ExcelSource",
    type: {
        name: "Composite",
        className: "ExcelSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { storeSettings: {
                serializedName: "storeSettings",
                type: {
                    name: "Composite",
                    className: "StoreReadSettings"
                }
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any"
                }
            } })
    }
};
export const ParquetSource = {
    serializedName: "ParquetSource",
    type: {
        name: "Composite",
        className: "ParquetSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { storeSettings: {
                serializedName: "storeSettings",
                type: {
                    name: "Composite",
                    className: "StoreReadSettings"
                }
            }, formatSettings: {
                serializedName: "formatSettings",
                type: {
                    name: "Composite",
                    className: "ParquetReadSettings"
                }
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any"
                }
            } })
    }
};
export const DelimitedTextSource = {
    serializedName: "DelimitedTextSource",
    type: {
        name: "Composite",
        className: "DelimitedTextSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { storeSettings: {
                serializedName: "storeSettings",
                type: {
                    name: "Composite",
                    className: "StoreReadSettings"
                }
            }, formatSettings: {
                serializedName: "formatSettings",
                type: {
                    name: "Composite",
                    className: "DelimitedTextReadSettings"
                }
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any"
                }
            } })
    }
};
export const JsonSource = {
    serializedName: "JsonSource",
    type: {
        name: "Composite",
        className: "JsonSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { storeSettings: {
                serializedName: "storeSettings",
                type: {
                    name: "Composite",
                    className: "StoreReadSettings"
                }
            }, formatSettings: {
                serializedName: "formatSettings",
                type: {
                    name: "Composite",
                    className: "JsonReadSettings"
                }
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any"
                }
            } })
    }
};
export const XmlSource = {
    serializedName: "XmlSource",
    type: {
        name: "Composite",
        className: "XmlSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { storeSettings: {
                serializedName: "storeSettings",
                type: {
                    name: "Composite",
                    className: "StoreReadSettings"
                }
            }, formatSettings: {
                serializedName: "formatSettings",
                type: {
                    name: "Composite",
                    className: "XmlReadSettings"
                }
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any"
                }
            } })
    }
};
export const OrcSource = {
    serializedName: "OrcSource",
    type: {
        name: "Composite",
        className: "OrcSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { storeSettings: {
                serializedName: "storeSettings",
                type: {
                    name: "Composite",
                    className: "StoreReadSettings"
                }
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any"
                }
            } })
    }
};
export const BinarySource = {
    serializedName: "BinarySource",
    type: {
        name: "Composite",
        className: "BinarySource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { storeSettings: {
                serializedName: "storeSettings",
                type: {
                    name: "Composite",
                    className: "StoreReadSettings"
                }
            }, formatSettings: {
                serializedName: "formatSettings",
                type: {
                    name: "Composite",
                    className: "BinaryReadSettings"
                }
            } })
    }
};
export const TabularSource = {
    serializedName: "TabularSource",
    type: {
        name: "Composite",
        className: "TabularSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { queryTimeout: {
                serializedName: "queryTimeout",
                type: {
                    name: "any"
                }
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any"
                }
            } })
    }
};
export const BlobSource = {
    serializedName: "BlobSource",
    type: {
        name: "Composite",
        className: "BlobSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { treatEmptyAsNull: {
                serializedName: "treatEmptyAsNull",
                type: {
                    name: "any"
                }
            }, skipHeaderLineCount: {
                serializedName: "skipHeaderLineCount",
                type: {
                    name: "any"
                }
            }, recursive: {
                serializedName: "recursive",
                type: {
                    name: "any"
                }
            } })
    }
};
export const DocumentDbCollectionSource = {
    serializedName: "DocumentDbCollectionSource",
    type: {
        name: "Composite",
        className: "DocumentDbCollectionSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            }, nestingSeparator: {
                serializedName: "nestingSeparator",
                type: {
                    name: "any"
                }
            }, queryTimeout: {
                serializedName: "queryTimeout",
                type: {
                    name: "any"
                }
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any"
                }
            } })
    }
};
export const CosmosDbSqlApiSource = {
    serializedName: "CosmosDbSqlApiSource",
    type: {
        name: "Composite",
        className: "CosmosDbSqlApiSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            }, pageSize: {
                serializedName: "pageSize",
                type: {
                    name: "any"
                }
            }, preferredRegions: {
                serializedName: "preferredRegions",
                type: {
                    name: "any"
                }
            }, detectDatetime: {
                serializedName: "detectDatetime",
                type: {
                    name: "any"
                }
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any"
                }
            } })
    }
};
export const DynamicsSource = {
    serializedName: "DynamicsSource",
    type: {
        name: "Composite",
        className: "DynamicsSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any"
                }
            } })
    }
};
export const DynamicsCrmSource = {
    serializedName: "DynamicsCrmSource",
    type: {
        name: "Composite",
        className: "DynamicsCrmSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any"
                }
            } })
    }
};
export const CommonDataServiceForAppsSource = {
    serializedName: "CommonDataServiceForAppsSource",
    type: {
        name: "Composite",
        className: "CommonDataServiceForAppsSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any"
                }
            } })
    }
};
export const RelationalSource = {
    serializedName: "RelationalSource",
    type: {
        name: "Composite",
        className: "RelationalSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any"
                }
            } })
    }
};
export const MicrosoftAccessSource = {
    serializedName: "MicrosoftAccessSource",
    type: {
        name: "Composite",
        className: "MicrosoftAccessSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any"
                }
            } })
    }
};
export const ODataSource = {
    serializedName: "ODataSource",
    type: {
        name: "Composite",
        className: "ODataSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            }, httpRequestTimeout: {
                serializedName: "httpRequestTimeout",
                type: {
                    name: "any"
                }
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any"
                }
            } })
    }
};
export const SalesforceServiceCloudSource = {
    serializedName: "SalesforceServiceCloudSource",
    type: {
        name: "Composite",
        className: "SalesforceServiceCloudSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            }, readBehavior: {
                serializedName: "readBehavior",
                type: {
                    name: "any"
                }
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any"
                }
            } })
    }
};
export const RestSource = {
    serializedName: "RestSource",
    type: {
        name: "Composite",
        className: "RestSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { requestMethod: {
                serializedName: "requestMethod",
                type: {
                    name: "any"
                }
            }, requestBody: {
                serializedName: "requestBody",
                type: {
                    name: "any"
                }
            }, additionalHeaders: {
                serializedName: "additionalHeaders",
                type: {
                    name: "any"
                }
            }, paginationRules: {
                serializedName: "paginationRules",
                type: {
                    name: "any"
                }
            }, httpRequestTimeout: {
                serializedName: "httpRequestTimeout",
                type: {
                    name: "any"
                }
            }, requestInterval: {
                serializedName: "requestInterval",
                type: {
                    name: "any"
                }
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any"
                }
            } })
    }
};
export const FileSystemSource = {
    serializedName: "FileSystemSource",
    type: {
        name: "Composite",
        className: "FileSystemSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { recursive: {
                serializedName: "recursive",
                type: {
                    name: "any"
                }
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any"
                }
            } })
    }
};
export const HdfsSource = {
    serializedName: "HdfsSource",
    type: {
        name: "Composite",
        className: "HdfsSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { recursive: {
                serializedName: "recursive",
                type: {
                    name: "any"
                }
            }, distcpSettings: {
                serializedName: "distcpSettings",
                type: {
                    name: "Composite",
                    className: "DistcpSettings"
                }
            } })
    }
};
export const AzureDataExplorerSource = {
    serializedName: "AzureDataExplorerSource",
    type: {
        name: "Composite",
        className: "AzureDataExplorerSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { query: {
                serializedName: "query",
                required: true,
                type: {
                    name: "any"
                }
            }, noTruncation: {
                serializedName: "noTruncation",
                type: {
                    name: "any"
                }
            }, queryTimeout: {
                serializedName: "queryTimeout",
                type: {
                    name: "any"
                }
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any"
                }
            } })
    }
};
export const OracleSource = {
    serializedName: "OracleSource",
    type: {
        name: "Composite",
        className: "OracleSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { oracleReaderQuery: {
                serializedName: "oracleReaderQuery",
                type: {
                    name: "any"
                }
            }, queryTimeout: {
                serializedName: "queryTimeout",
                type: {
                    name: "any"
                }
            }, partitionOption: {
                serializedName: "partitionOption",
                type: {
                    name: "any"
                }
            }, partitionSettings: {
                serializedName: "partitionSettings",
                type: {
                    name: "Composite",
                    className: "OraclePartitionSettings"
                }
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any"
                }
            } })
    }
};
export const AmazonRdsForOracleSource = {
    serializedName: "AmazonRdsForOracleSource",
    type: {
        name: "Composite",
        className: "AmazonRdsForOracleSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { oracleReaderQuery: {
                serializedName: "oracleReaderQuery",
                type: {
                    name: "any"
                }
            }, queryTimeout: {
                serializedName: "queryTimeout",
                type: {
                    name: "any"
                }
            }, partitionOption: {
                serializedName: "partitionOption",
                type: {
                    name: "any"
                }
            }, partitionSettings: {
                serializedName: "partitionSettings",
                type: {
                    name: "Composite",
                    className: "AmazonRdsForOraclePartitionSettings"
                }
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any"
                }
            } })
    }
};
export const WebSource = {
    serializedName: "WebSource",
    type: {
        name: "Composite",
        className: "WebSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any"
                }
            } })
    }
};
export const MongoDbSource = {
    serializedName: "MongoDbSource",
    type: {
        name: "Composite",
        className: "MongoDbSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any"
                }
            } })
    }
};
export const MongoDbAtlasSource = {
    serializedName: "MongoDbAtlasSource",
    type: {
        name: "Composite",
        className: "MongoDbAtlasSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { filter: {
                serializedName: "filter",
                type: {
                    name: "any"
                }
            }, cursorMethods: {
                serializedName: "cursorMethods",
                type: {
                    name: "Composite",
                    className: "MongoDbCursorMethodsProperties"
                }
            }, batchSize: {
                serializedName: "batchSize",
                type: {
                    name: "any"
                }
            }, queryTimeout: {
                serializedName: "queryTimeout",
                type: {
                    name: "any"
                }
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any"
                }
            } })
    }
};
export const MongoDbV2Source = {
    serializedName: "MongoDbV2Source",
    type: {
        name: "Composite",
        className: "MongoDbV2Source",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { filter: {
                serializedName: "filter",
                type: {
                    name: "any"
                }
            }, cursorMethods: {
                serializedName: "cursorMethods",
                type: {
                    name: "Composite",
                    className: "MongoDbCursorMethodsProperties"
                }
            }, batchSize: {
                serializedName: "batchSize",
                type: {
                    name: "any"
                }
            }, queryTimeout: {
                serializedName: "queryTimeout",
                type: {
                    name: "any"
                }
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any"
                }
            } })
    }
};
export const CosmosDbMongoDbApiSource = {
    serializedName: "CosmosDbMongoDbApiSource",
    type: {
        name: "Composite",
        className: "CosmosDbMongoDbApiSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { filter: {
                serializedName: "filter",
                type: {
                    name: "any"
                }
            }, cursorMethods: {
                serializedName: "cursorMethods",
                type: {
                    name: "Composite",
                    className: "MongoDbCursorMethodsProperties"
                }
            }, batchSize: {
                serializedName: "batchSize",
                type: {
                    name: "any"
                }
            }, queryTimeout: {
                serializedName: "queryTimeout",
                type: {
                    name: "any"
                }
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any"
                }
            } })
    }
};
export const Office365Source = {
    serializedName: "Office365Source",
    type: {
        name: "Composite",
        className: "Office365Source",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { allowedGroups: {
                serializedName: "allowedGroups",
                type: {
                    name: "any"
                }
            }, userScopeFilterUri: {
                serializedName: "userScopeFilterUri",
                type: {
                    name: "any"
                }
            }, dateFilterColumn: {
                serializedName: "dateFilterColumn",
                type: {
                    name: "any"
                }
            }, startTime: {
                serializedName: "startTime",
                type: {
                    name: "any"
                }
            }, endTime: {
                serializedName: "endTime",
                type: {
                    name: "any"
                }
            }, outputColumns: {
                serializedName: "outputColumns",
                type: {
                    name: "any"
                }
            } })
    }
};
export const AzureDataLakeStoreSource = {
    serializedName: "AzureDataLakeStoreSource",
    type: {
        name: "Composite",
        className: "AzureDataLakeStoreSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { recursive: {
                serializedName: "recursive",
                type: {
                    name: "any"
                }
            } })
    }
};
export const AzureBlobFSSource = {
    serializedName: "AzureBlobFSSource",
    type: {
        name: "Composite",
        className: "AzureBlobFSSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { treatEmptyAsNull: {
                serializedName: "treatEmptyAsNull",
                type: {
                    name: "any"
                }
            }, skipHeaderLineCount: {
                serializedName: "skipHeaderLineCount",
                type: {
                    name: "any"
                }
            }, recursive: {
                serializedName: "recursive",
                type: {
                    name: "any"
                }
            } })
    }
};
export const HttpSource = {
    serializedName: "HttpSource",
    type: {
        name: "Composite",
        className: "HttpSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { httpRequestTimeout: {
                serializedName: "httpRequestTimeout",
                type: {
                    name: "any"
                }
            } })
    }
};
export const LakeHouseTableSource = {
    serializedName: "LakeHouseTableSource",
    type: {
        name: "Composite",
        className: "LakeHouseTableSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { timestampAsOf: {
                serializedName: "timestampAsOf",
                type: {
                    name: "any"
                }
            }, versionAsOf: {
                serializedName: "versionAsOf",
                type: {
                    name: "any"
                }
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any"
                }
            } })
    }
};
export const SnowflakeSource = {
    serializedName: "SnowflakeSource",
    type: {
        name: "Composite",
        className: "SnowflakeSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            }, exportSettings: {
                serializedName: "exportSettings",
                type: {
                    name: "Composite",
                    className: "SnowflakeExportCopyCommand"
                }
            } })
    }
};
export const AzureDatabricksDeltaLakeSource = {
    serializedName: "AzureDatabricksDeltaLakeSource",
    type: {
        name: "Composite",
        className: "AzureDatabricksDeltaLakeSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            }, exportSettings: {
                serializedName: "exportSettings",
                type: {
                    name: "Composite",
                    className: "AzureDatabricksDeltaLakeExportCommand"
                }
            } })
    }
};
export const SharePointOnlineListSource = {
    serializedName: "SharePointOnlineListSource",
    type: {
        name: "Composite",
        className: "SharePointOnlineListSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            }, httpRequestTimeout: {
                serializedName: "httpRequestTimeout",
                type: {
                    name: "any"
                }
            } })
    }
};
export const DelimitedTextSink = {
    serializedName: "DelimitedTextSink",
    type: {
        name: "Composite",
        className: "DelimitedTextSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { storeSettings: {
                serializedName: "storeSettings",
                type: {
                    name: "Composite",
                    className: "StoreWriteSettings"
                }
            }, formatSettings: {
                serializedName: "formatSettings",
                type: {
                    name: "Composite",
                    className: "DelimitedTextWriteSettings"
                }
            } })
    }
};
export const JsonSink = {
    serializedName: "JsonSink",
    type: {
        name: "Composite",
        className: "JsonSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { storeSettings: {
                serializedName: "storeSettings",
                type: {
                    name: "Composite",
                    className: "StoreWriteSettings"
                }
            }, formatSettings: {
                serializedName: "formatSettings",
                type: {
                    name: "Composite",
                    className: "JsonWriteSettings"
                }
            } })
    }
};
export const OrcSink = {
    serializedName: "OrcSink",
    type: {
        name: "Composite",
        className: "OrcSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { storeSettings: {
                serializedName: "storeSettings",
                type: {
                    name: "Composite",
                    className: "StoreWriteSettings"
                }
            }, formatSettings: {
                serializedName: "formatSettings",
                type: {
                    name: "Composite",
                    className: "OrcWriteSettings"
                }
            } })
    }
};
export const RestSink = {
    serializedName: "RestSink",
    type: {
        name: "Composite",
        className: "RestSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { requestMethod: {
                serializedName: "requestMethod",
                type: {
                    name: "any"
                }
            }, additionalHeaders: {
                serializedName: "additionalHeaders",
                type: {
                    name: "any"
                }
            }, httpRequestTimeout: {
                serializedName: "httpRequestTimeout",
                type: {
                    name: "any"
                }
            }, requestInterval: {
                serializedName: "requestInterval",
                type: {
                    name: "any"
                }
            }, httpCompressionType: {
                serializedName: "httpCompressionType",
                type: {
                    name: "any"
                }
            } })
    }
};
export const AzurePostgreSqlSink = {
    serializedName: "AzurePostgreSqlSink",
    type: {
        name: "Composite",
        className: "AzurePostgreSqlSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { preCopyScript: {
                serializedName: "preCopyScript",
                type: {
                    name: "any"
                }
            } })
    }
};
export const AzureMySqlSink = {
    serializedName: "AzureMySqlSink",
    type: {
        name: "Composite",
        className: "AzureMySqlSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { preCopyScript: {
                serializedName: "preCopyScript",
                type: {
                    name: "any"
                }
            } })
    }
};
export const AzureDatabricksDeltaLakeSink = {
    serializedName: "AzureDatabricksDeltaLakeSink",
    type: {
        name: "Composite",
        className: "AzureDatabricksDeltaLakeSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { preCopyScript: {
                serializedName: "preCopyScript",
                type: {
                    name: "any"
                }
            }, importSettings: {
                serializedName: "importSettings",
                type: {
                    name: "Composite",
                    className: "AzureDatabricksDeltaLakeImportCommand"
                }
            } })
    }
};
export const SapCloudForCustomerSink = {
    serializedName: "SapCloudForCustomerSink",
    type: {
        name: "Composite",
        className: "SapCloudForCustomerSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { writeBehavior: {
                serializedName: "writeBehavior",
                type: {
                    name: "String"
                }
            }, httpRequestTimeout: {
                serializedName: "httpRequestTimeout",
                type: {
                    name: "any"
                }
            } })
    }
};
export const AzureQueueSink = {
    serializedName: "AzureQueueSink",
    type: {
        name: "Composite",
        className: "AzureQueueSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, CopySink.type.modelProperties)
    }
};
export const AzureTableSink = {
    serializedName: "AzureTableSink",
    type: {
        name: "Composite",
        className: "AzureTableSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { azureTableDefaultPartitionKeyValue: {
                serializedName: "azureTableDefaultPartitionKeyValue",
                type: {
                    name: "any"
                }
            }, azureTablePartitionKeyName: {
                serializedName: "azureTablePartitionKeyName",
                type: {
                    name: "any"
                }
            }, azureTableRowKeyName: {
                serializedName: "azureTableRowKeyName",
                type: {
                    name: "any"
                }
            }, azureTableInsertType: {
                serializedName: "azureTableInsertType",
                type: {
                    name: "any"
                }
            } })
    }
};
export const AvroSink = {
    serializedName: "AvroSink",
    type: {
        name: "Composite",
        className: "AvroSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { storeSettings: {
                serializedName: "storeSettings",
                type: {
                    name: "Composite",
                    className: "StoreWriteSettings"
                }
            }, formatSettings: {
                serializedName: "formatSettings",
                type: {
                    name: "Composite",
                    className: "AvroWriteSettings"
                }
            } })
    }
};
export const ParquetSink = {
    serializedName: "ParquetSink",
    type: {
        name: "Composite",
        className: "ParquetSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { storeSettings: {
                serializedName: "storeSettings",
                type: {
                    name: "Composite",
                    className: "StoreWriteSettings"
                }
            }, formatSettings: {
                serializedName: "formatSettings",
                type: {
                    name: "Composite",
                    className: "ParquetWriteSettings"
                }
            } })
    }
};
export const BinarySink = {
    serializedName: "BinarySink",
    type: {
        name: "Composite",
        className: "BinarySink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { storeSettings: {
                serializedName: "storeSettings",
                type: {
                    name: "Composite",
                    className: "StoreWriteSettings"
                }
            } })
    }
};
export const BlobSink = {
    serializedName: "BlobSink",
    type: {
        name: "Composite",
        className: "BlobSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { blobWriterOverwriteFiles: {
                serializedName: "blobWriterOverwriteFiles",
                type: {
                    name: "any"
                }
            }, blobWriterDateTimeFormat: {
                serializedName: "blobWriterDateTimeFormat",
                type: {
                    name: "any"
                }
            }, blobWriterAddHeader: {
                serializedName: "blobWriterAddHeader",
                type: {
                    name: "any"
                }
            }, copyBehavior: {
                serializedName: "copyBehavior",
                type: {
                    name: "any"
                }
            }, metadata: {
                serializedName: "metadata",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MetadataItem"
                        }
                    }
                }
            } })
    }
};
export const FileSystemSink = {
    serializedName: "FileSystemSink",
    type: {
        name: "Composite",
        className: "FileSystemSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { copyBehavior: {
                serializedName: "copyBehavior",
                type: {
                    name: "any"
                }
            } })
    }
};
export const DocumentDbCollectionSink = {
    serializedName: "DocumentDbCollectionSink",
    type: {
        name: "Composite",
        className: "DocumentDbCollectionSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { nestingSeparator: {
                serializedName: "nestingSeparator",
                type: {
                    name: "any"
                }
            }, writeBehavior: {
                serializedName: "writeBehavior",
                type: {
                    name: "any"
                }
            } })
    }
};
export const CosmosDbSqlApiSink = {
    serializedName: "CosmosDbSqlApiSink",
    type: {
        name: "Composite",
        className: "CosmosDbSqlApiSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { writeBehavior: {
                serializedName: "writeBehavior",
                type: {
                    name: "any"
                }
            } })
    }
};
export const SqlSink = {
    serializedName: "SqlSink",
    type: {
        name: "Composite",
        className: "SqlSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { sqlWriterStoredProcedureName: {
                serializedName: "sqlWriterStoredProcedureName",
                type: {
                    name: "any"
                }
            }, sqlWriterTableType: {
                serializedName: "sqlWriterTableType",
                type: {
                    name: "any"
                }
            }, preCopyScript: {
                serializedName: "preCopyScript",
                type: {
                    name: "any"
                }
            }, storedProcedureParameters: {
                serializedName: "storedProcedureParameters",
                type: {
                    name: "any"
                }
            }, storedProcedureTableTypeParameterName: {
                serializedName: "storedProcedureTableTypeParameterName",
                type: {
                    name: "any"
                }
            }, tableOption: {
                serializedName: "tableOption",
                type: {
                    name: "any"
                }
            }, sqlWriterUseTableLock: {
                serializedName: "sqlWriterUseTableLock",
                type: {
                    name: "any"
                }
            }, writeBehavior: {
                serializedName: "writeBehavior",
                type: {
                    name: "any"
                }
            }, upsertSettings: {
                serializedName: "upsertSettings",
                type: {
                    name: "Composite",
                    className: "SqlUpsertSettings"
                }
            } })
    }
};
export const SqlServerSink = {
    serializedName: "SqlServerSink",
    type: {
        name: "Composite",
        className: "SqlServerSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { sqlWriterStoredProcedureName: {
                serializedName: "sqlWriterStoredProcedureName",
                type: {
                    name: "any"
                }
            }, sqlWriterTableType: {
                serializedName: "sqlWriterTableType",
                type: {
                    name: "any"
                }
            }, preCopyScript: {
                serializedName: "preCopyScript",
                type: {
                    name: "any"
                }
            }, storedProcedureParameters: {
                serializedName: "storedProcedureParameters",
                type: {
                    name: "any"
                }
            }, storedProcedureTableTypeParameterName: {
                serializedName: "storedProcedureTableTypeParameterName",
                type: {
                    name: "any"
                }
            }, tableOption: {
                serializedName: "tableOption",
                type: {
                    name: "any"
                }
            }, sqlWriterUseTableLock: {
                serializedName: "sqlWriterUseTableLock",
                type: {
                    name: "any"
                }
            }, writeBehavior: {
                serializedName: "writeBehavior",
                type: {
                    name: "any"
                }
            }, upsertSettings: {
                serializedName: "upsertSettings",
                type: {
                    name: "Composite",
                    className: "SqlUpsertSettings"
                }
            } })
    }
};
export const AzureSqlSink = {
    serializedName: "AzureSqlSink",
    type: {
        name: "Composite",
        className: "AzureSqlSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { sqlWriterStoredProcedureName: {
                serializedName: "sqlWriterStoredProcedureName",
                type: {
                    name: "any"
                }
            }, sqlWriterTableType: {
                serializedName: "sqlWriterTableType",
                type: {
                    name: "any"
                }
            }, preCopyScript: {
                serializedName: "preCopyScript",
                type: {
                    name: "any"
                }
            }, storedProcedureParameters: {
                serializedName: "storedProcedureParameters",
                type: {
                    name: "any"
                }
            }, storedProcedureTableTypeParameterName: {
                serializedName: "storedProcedureTableTypeParameterName",
                type: {
                    name: "any"
                }
            }, tableOption: {
                serializedName: "tableOption",
                type: {
                    name: "any"
                }
            }, sqlWriterUseTableLock: {
                serializedName: "sqlWriterUseTableLock",
                type: {
                    name: "any"
                }
            }, writeBehavior: {
                serializedName: "writeBehavior",
                type: {
                    name: "any"
                }
            }, upsertSettings: {
                serializedName: "upsertSettings",
                type: {
                    name: "Composite",
                    className: "SqlUpsertSettings"
                }
            } })
    }
};
export const SqlMISink = {
    serializedName: "SqlMISink",
    type: {
        name: "Composite",
        className: "SqlMISink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { sqlWriterStoredProcedureName: {
                serializedName: "sqlWriterStoredProcedureName",
                type: {
                    name: "any"
                }
            }, sqlWriterTableType: {
                serializedName: "sqlWriterTableType",
                type: {
                    name: "any"
                }
            }, preCopyScript: {
                serializedName: "preCopyScript",
                type: {
                    name: "any"
                }
            }, storedProcedureParameters: {
                serializedName: "storedProcedureParameters",
                type: {
                    name: "any"
                }
            }, storedProcedureTableTypeParameterName: {
                serializedName: "storedProcedureTableTypeParameterName",
                type: {
                    name: "any"
                }
            }, tableOption: {
                serializedName: "tableOption",
                type: {
                    name: "any"
                }
            }, sqlWriterUseTableLock: {
                serializedName: "sqlWriterUseTableLock",
                type: {
                    name: "any"
                }
            }, writeBehavior: {
                serializedName: "writeBehavior",
                type: {
                    name: "any"
                }
            }, upsertSettings: {
                serializedName: "upsertSettings",
                type: {
                    name: "Composite",
                    className: "SqlUpsertSettings"
                }
            } })
    }
};
export const SqlDWSink = {
    serializedName: "SqlDWSink",
    type: {
        name: "Composite",
        className: "SqlDWSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { preCopyScript: {
                serializedName: "preCopyScript",
                type: {
                    name: "any"
                }
            }, allowPolyBase: {
                serializedName: "allowPolyBase",
                type: {
                    name: "any"
                }
            }, polyBaseSettings: {
                serializedName: "polyBaseSettings",
                type: {
                    name: "Composite",
                    className: "PolybaseSettings"
                }
            }, allowCopyCommand: {
                serializedName: "allowCopyCommand",
                type: {
                    name: "any"
                }
            }, copyCommandSettings: {
                serializedName: "copyCommandSettings",
                type: {
                    name: "Composite",
                    className: "DWCopyCommandSettings"
                }
            }, tableOption: {
                serializedName: "tableOption",
                type: {
                    name: "any"
                }
            }, sqlWriterUseTableLock: {
                serializedName: "sqlWriterUseTableLock",
                type: {
                    name: "any"
                }
            }, writeBehavior: {
                serializedName: "writeBehavior",
                type: {
                    name: "any"
                }
            }, upsertSettings: {
                serializedName: "upsertSettings",
                type: {
                    name: "Composite",
                    className: "SqlDWUpsertSettings"
                }
            } })
    }
};
export const SnowflakeSink = {
    serializedName: "SnowflakeSink",
    type: {
        name: "Composite",
        className: "SnowflakeSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { preCopyScript: {
                serializedName: "preCopyScript",
                type: {
                    name: "any"
                }
            }, importSettings: {
                serializedName: "importSettings",
                type: {
                    name: "Composite",
                    className: "SnowflakeImportCopyCommand"
                }
            } })
    }
};
export const OracleSink = {
    serializedName: "OracleSink",
    type: {
        name: "Composite",
        className: "OracleSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { preCopyScript: {
                serializedName: "preCopyScript",
                type: {
                    name: "any"
                }
            } })
    }
};
export const AzureDataLakeStoreSink = {
    serializedName: "AzureDataLakeStoreSink",
    type: {
        name: "Composite",
        className: "AzureDataLakeStoreSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { copyBehavior: {
                serializedName: "copyBehavior",
                type: {
                    name: "any"
                }
            }, enableAdlsSingleFileParallel: {
                serializedName: "enableAdlsSingleFileParallel",
                type: {
                    name: "any"
                }
            } })
    }
};
export const AzureBlobFSSink = {
    serializedName: "AzureBlobFSSink",
    type: {
        name: "Composite",
        className: "AzureBlobFSSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { copyBehavior: {
                serializedName: "copyBehavior",
                type: {
                    name: "any"
                }
            }, metadata: {
                serializedName: "metadata",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MetadataItem"
                        }
                    }
                }
            } })
    }
};
export const AzureSearchIndexSink = {
    serializedName: "AzureSearchIndexSink",
    type: {
        name: "Composite",
        className: "AzureSearchIndexSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { writeBehavior: {
                serializedName: "writeBehavior",
                type: {
                    name: "String"
                }
            } })
    }
};
export const OdbcSink = {
    serializedName: "OdbcSink",
    type: {
        name: "Composite",
        className: "OdbcSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { preCopyScript: {
                serializedName: "preCopyScript",
                type: {
                    name: "any"
                }
            } })
    }
};
export const InformixSink = {
    serializedName: "InformixSink",
    type: {
        name: "Composite",
        className: "InformixSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { preCopyScript: {
                serializedName: "preCopyScript",
                type: {
                    name: "any"
                }
            } })
    }
};
export const MicrosoftAccessSink = {
    serializedName: "MicrosoftAccessSink",
    type: {
        name: "Composite",
        className: "MicrosoftAccessSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { preCopyScript: {
                serializedName: "preCopyScript",
                type: {
                    name: "any"
                }
            } })
    }
};
export const DynamicsSink = {
    serializedName: "DynamicsSink",
    type: {
        name: "Composite",
        className: "DynamicsSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { writeBehavior: {
                serializedName: "writeBehavior",
                required: true,
                type: {
                    name: "String"
                }
            }, ignoreNullValues: {
                serializedName: "ignoreNullValues",
                type: {
                    name: "any"
                }
            }, alternateKeyName: {
                serializedName: "alternateKeyName",
                type: {
                    name: "any"
                }
            } })
    }
};
export const DynamicsCrmSink = {
    serializedName: "DynamicsCrmSink",
    type: {
        name: "Composite",
        className: "DynamicsCrmSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { writeBehavior: {
                serializedName: "writeBehavior",
                required: true,
                type: {
                    name: "String"
                }
            }, ignoreNullValues: {
                serializedName: "ignoreNullValues",
                type: {
                    name: "any"
                }
            }, alternateKeyName: {
                serializedName: "alternateKeyName",
                type: {
                    name: "any"
                }
            } })
    }
};
export const CommonDataServiceForAppsSink = {
    serializedName: "CommonDataServiceForAppsSink",
    type: {
        name: "Composite",
        className: "CommonDataServiceForAppsSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { writeBehavior: {
                serializedName: "writeBehavior",
                required: true,
                type: {
                    name: "String"
                }
            }, ignoreNullValues: {
                serializedName: "ignoreNullValues",
                type: {
                    name: "any"
                }
            }, alternateKeyName: {
                serializedName: "alternateKeyName",
                type: {
                    name: "any"
                }
            } })
    }
};
export const AzureDataExplorerSink = {
    serializedName: "AzureDataExplorerSink",
    type: {
        name: "Composite",
        className: "AzureDataExplorerSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { ingestionMappingName: {
                serializedName: "ingestionMappingName",
                type: {
                    name: "any"
                }
            }, ingestionMappingAsJson: {
                serializedName: "ingestionMappingAsJson",
                type: {
                    name: "any"
                }
            }, flushImmediately: {
                serializedName: "flushImmediately",
                type: {
                    name: "any"
                }
            } })
    }
};
export const SalesforceSink = {
    serializedName: "SalesforceSink",
    type: {
        name: "Composite",
        className: "SalesforceSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { writeBehavior: {
                serializedName: "writeBehavior",
                type: {
                    name: "String"
                }
            }, externalIdFieldName: {
                serializedName: "externalIdFieldName",
                type: {
                    name: "any"
                }
            }, ignoreNullValues: {
                serializedName: "ignoreNullValues",
                type: {
                    name: "any"
                }
            } })
    }
};
export const SalesforceServiceCloudSink = {
    serializedName: "SalesforceServiceCloudSink",
    type: {
        name: "Composite",
        className: "SalesforceServiceCloudSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { writeBehavior: {
                serializedName: "writeBehavior",
                type: {
                    name: "String"
                }
            }, externalIdFieldName: {
                serializedName: "externalIdFieldName",
                type: {
                    name: "any"
                }
            }, ignoreNullValues: {
                serializedName: "ignoreNullValues",
                type: {
                    name: "any"
                }
            } })
    }
};
export const MongoDbAtlasSink = {
    serializedName: "MongoDbAtlasSink",
    type: {
        name: "Composite",
        className: "MongoDbAtlasSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { writeBehavior: {
                serializedName: "writeBehavior",
                type: {
                    name: "any"
                }
            } })
    }
};
export const MongoDbV2Sink = {
    serializedName: "MongoDbV2Sink",
    type: {
        name: "Composite",
        className: "MongoDbV2Sink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { writeBehavior: {
                serializedName: "writeBehavior",
                type: {
                    name: "any"
                }
            } })
    }
};
export const CosmosDbMongoDbApiSink = {
    serializedName: "CosmosDbMongoDbApiSink",
    type: {
        name: "Composite",
        className: "CosmosDbMongoDbApiSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { writeBehavior: {
                serializedName: "writeBehavior",
                type: {
                    name: "any"
                }
            } })
    }
};
export const LakeHouseTableSink = {
    serializedName: "LakeHouseTableSink",
    type: {
        name: "Composite",
        className: "LakeHouseTableSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopySink.type.modelProperties), { tableActionOption: {
                serializedName: "tableActionOption",
                type: {
                    name: "any"
                }
            }, partitionOption: {
                serializedName: "partitionOption",
                type: {
                    name: "any"
                }
            }, partitionNameList: {
                serializedName: "partitionNameList",
                type: {
                    name: "any"
                }
            } })
    }
};
export const SnowflakeExportCopyCommand = {
    serializedName: "SnowflakeExportCopyCommand",
    type: {
        name: "Composite",
        className: "SnowflakeExportCopyCommand",
        uberParent: "ExportSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ExportSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ExportSettings.type.modelProperties), { additionalCopyOptions: {
                serializedName: "additionalCopyOptions",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }, additionalFormatOptions: {
                serializedName: "additionalFormatOptions",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            } })
    }
};
export const AzureDatabricksDeltaLakeExportCommand = {
    serializedName: "AzureDatabricksDeltaLakeExportCommand",
    type: {
        name: "Composite",
        className: "AzureDatabricksDeltaLakeExportCommand",
        uberParent: "ExportSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ExportSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ExportSettings.type.modelProperties), { dateFormat: {
                serializedName: "dateFormat",
                type: {
                    name: "any"
                }
            }, timestampFormat: {
                serializedName: "timestampFormat",
                type: {
                    name: "any"
                }
            } })
    }
};
export const AzureDatabricksDeltaLakeImportCommand = {
    serializedName: "AzureDatabricksDeltaLakeImportCommand",
    type: {
        name: "Composite",
        className: "AzureDatabricksDeltaLakeImportCommand",
        uberParent: "ImportSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ImportSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ImportSettings.type.modelProperties), { dateFormat: {
                serializedName: "dateFormat",
                type: {
                    name: "any"
                }
            }, timestampFormat: {
                serializedName: "timestampFormat",
                type: {
                    name: "any"
                }
            } })
    }
};
export const SnowflakeImportCopyCommand = {
    serializedName: "SnowflakeImportCopyCommand",
    type: {
        name: "Composite",
        className: "SnowflakeImportCopyCommand",
        uberParent: "ImportSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ImportSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ImportSettings.type.modelProperties), { additionalCopyOptions: {
                serializedName: "additionalCopyOptions",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }, additionalFormatOptions: {
                serializedName: "additionalFormatOptions",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            } })
    }
};
export const TabularTranslator = {
    serializedName: "TabularTranslator",
    type: {
        name: "Composite",
        className: "TabularTranslator",
        uberParent: "CopyTranslator",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: CopyTranslator.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopyTranslator.type.modelProperties), { columnMappings: {
                serializedName: "columnMappings",
                type: {
                    name: "any"
                }
            }, schemaMapping: {
                serializedName: "schemaMapping",
                type: {
                    name: "any"
                }
            }, collectionReference: {
                serializedName: "collectionReference",
                type: {
                    name: "any"
                }
            }, mapComplexValuesToString: {
                serializedName: "mapComplexValuesToString",
                type: {
                    name: "any"
                }
            }, mappings: {
                serializedName: "mappings",
                type: {
                    name: "any"
                }
            }, typeConversion: {
                serializedName: "typeConversion",
                type: {
                    name: "any"
                }
            }, typeConversionSettings: {
                serializedName: "typeConversionSettings",
                type: {
                    name: "Composite",
                    className: "TypeConversionSettings"
                }
            } })
    }
};
export const ExecutePowerQueryActivityTypeProperties = {
    type: {
        name: "Composite",
        className: "ExecutePowerQueryActivityTypeProperties",
        modelProperties: Object.assign(Object.assign({}, ExecuteDataFlowActivityTypeProperties.type.modelProperties), { sinks: {
                serializedName: "sinks",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "Composite", className: "PowerQuerySink" } }
                }
            }, queries: {
                serializedName: "queries",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PowerQuerySinkMapping"
                        }
                    }
                }
            } })
    }
};
export const TriggerDependencyReference = {
    serializedName: "TriggerDependencyReference",
    type: {
        name: "Composite",
        className: "TriggerDependencyReference",
        uberParent: "DependencyReference",
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: Object.assign(Object.assign({}, DependencyReference.type.modelProperties), { referenceTrigger: {
                serializedName: "referenceTrigger",
                type: {
                    name: "Composite",
                    className: "TriggerReference"
                }
            } })
    }
};
export const SelfDependencyTumblingWindowTriggerReference = {
    serializedName: "SelfDependencyTumblingWindowTriggerReference",
    type: {
        name: "Composite",
        className: "SelfDependencyTumblingWindowTriggerReference",
        uberParent: "DependencyReference",
        polymorphicDiscriminator: DependencyReference.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DependencyReference.type.modelProperties), { offset: {
                constraints: {
                    Pattern: new RegExp("-((\\d+)\\.)?(\\d\\d):(60|([0-5][0-9])):(60|([0-5][0-9]))"),
                    MaxLength: 15,
                    MinLength: 8
                },
                serializedName: "offset",
                required: true,
                type: {
                    name: "String"
                }
            }, size: {
                constraints: {
                    Pattern: new RegExp("((\\d+)\\.)?(\\d\\d):(60|([0-5][0-9])):(60|([0-5][0-9]))"),
                    MaxLength: 15,
                    MinLength: 8
                },
                serializedName: "size",
                type: {
                    name: "String"
                }
            } })
    }
};
export const ExecutePipelineActivity = {
    serializedName: "ExecutePipeline",
    type: {
        name: "Composite",
        className: "ExecutePipelineActivity",
        uberParent: "ControlActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ControlActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ControlActivity.type.modelProperties), { policy: {
                serializedName: "policy",
                type: {
                    name: "Composite",
                    className: "ExecutePipelineActivityPolicy"
                }
            }, pipeline: {
                serializedName: "typeProperties.pipeline",
                type: {
                    name: "Composite",
                    className: "PipelineReference"
                }
            }, parameters: {
                serializedName: "typeProperties.parameters",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }, waitOnCompletion: {
                serializedName: "typeProperties.waitOnCompletion",
                type: {
                    name: "Boolean"
                }
            } })
    }
};
export const IfConditionActivity = {
    serializedName: "IfCondition",
    type: {
        name: "Composite",
        className: "IfConditionActivity",
        uberParent: "ControlActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ControlActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ControlActivity.type.modelProperties), { expression: {
                serializedName: "typeProperties.expression",
                type: {
                    name: "Composite",
                    className: "Expression"
                }
            }, ifTrueActivities: {
                serializedName: "typeProperties.ifTrueActivities",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Activity"
                        }
                    }
                }
            }, ifFalseActivities: {
                serializedName: "typeProperties.ifFalseActivities",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Activity"
                        }
                    }
                }
            } })
    }
};
export const SwitchActivity = {
    serializedName: "Switch",
    type: {
        name: "Composite",
        className: "SwitchActivity",
        uberParent: "ControlActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ControlActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ControlActivity.type.modelProperties), { on: {
                serializedName: "typeProperties.on",
                type: {
                    name: "Composite",
                    className: "Expression"
                }
            }, cases: {
                serializedName: "typeProperties.cases",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SwitchCase"
                        }
                    }
                }
            }, defaultActivities: {
                serializedName: "typeProperties.defaultActivities",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Activity"
                        }
                    }
                }
            } })
    }
};
export const ForEachActivity = {
    serializedName: "ForEach",
    type: {
        name: "Composite",
        className: "ForEachActivity",
        uberParent: "ControlActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ControlActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ControlActivity.type.modelProperties), { isSequential: {
                serializedName: "typeProperties.isSequential",
                type: {
                    name: "Boolean"
                }
            }, batchCount: {
                constraints: {
                    InclusiveMaximum: 50
                },
                serializedName: "typeProperties.batchCount",
                type: {
                    name: "Number"
                }
            }, items: {
                serializedName: "typeProperties.items",
                type: {
                    name: "Composite",
                    className: "Expression"
                }
            }, activities: {
                serializedName: "typeProperties.activities",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Activity"
                        }
                    }
                }
            } })
    }
};
export const WaitActivity = {
    serializedName: "Wait",
    type: {
        name: "Composite",
        className: "WaitActivity",
        uberParent: "ControlActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ControlActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ControlActivity.type.modelProperties), { waitTimeInSeconds: {
                serializedName: "typeProperties.waitTimeInSeconds",
                required: true,
                type: {
                    name: "any"
                }
            } })
    }
};
export const FailActivity = {
    serializedName: "Fail",
    type: {
        name: "Composite",
        className: "FailActivity",
        uberParent: "ControlActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ControlActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ControlActivity.type.modelProperties), { message: {
                serializedName: "typeProperties.message",
                required: true,
                type: {
                    name: "any"
                }
            }, errorCode: {
                serializedName: "typeProperties.errorCode",
                required: true,
                type: {
                    name: "any"
                }
            } })
    }
};
export const UntilActivity = {
    serializedName: "Until",
    type: {
        name: "Composite",
        className: "UntilActivity",
        uberParent: "ControlActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ControlActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ControlActivity.type.modelProperties), { expression: {
                serializedName: "typeProperties.expression",
                type: {
                    name: "Composite",
                    className: "Expression"
                }
            }, timeout: {
                serializedName: "typeProperties.timeout",
                type: {
                    name: "any"
                }
            }, activities: {
                serializedName: "typeProperties.activities",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Activity"
                        }
                    }
                }
            } })
    }
};
export const ValidationActivity = {
    serializedName: "Validation",
    type: {
        name: "Composite",
        className: "ValidationActivity",
        uberParent: "ControlActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ControlActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ControlActivity.type.modelProperties), { timeout: {
                serializedName: "typeProperties.timeout",
                type: {
                    name: "any"
                }
            }, sleep: {
                serializedName: "typeProperties.sleep",
                type: {
                    name: "any"
                }
            }, minimumSize: {
                serializedName: "typeProperties.minimumSize",
                type: {
                    name: "any"
                }
            }, childItems: {
                serializedName: "typeProperties.childItems",
                type: {
                    name: "any"
                }
            }, dataset: {
                serializedName: "typeProperties.dataset",
                type: {
                    name: "Composite",
                    className: "DatasetReference"
                }
            } })
    }
};
export const FilterActivity = {
    serializedName: "Filter",
    type: {
        name: "Composite",
        className: "FilterActivity",
        uberParent: "ControlActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ControlActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ControlActivity.type.modelProperties), { items: {
                serializedName: "typeProperties.items",
                type: {
                    name: "Composite",
                    className: "Expression"
                }
            }, condition: {
                serializedName: "typeProperties.condition",
                type: {
                    name: "Composite",
                    className: "Expression"
                }
            } })
    }
};
export const SetVariableActivity = {
    serializedName: "SetVariable",
    type: {
        name: "Composite",
        className: "SetVariableActivity",
        uberParent: "ControlActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ControlActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ControlActivity.type.modelProperties), { policy: {
                serializedName: "policy",
                type: {
                    name: "Composite",
                    className: "SecureInputOutputPolicy"
                }
            }, variableName: {
                serializedName: "typeProperties.variableName",
                type: {
                    name: "String"
                }
            }, value: {
                serializedName: "typeProperties.value",
                type: {
                    name: "any"
                }
            }, setSystemVariable: {
                serializedName: "typeProperties.setSystemVariable",
                type: {
                    name: "Boolean"
                }
            } })
    }
};
export const AppendVariableActivity = {
    serializedName: "AppendVariable",
    type: {
        name: "Composite",
        className: "AppendVariableActivity",
        uberParent: "ControlActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ControlActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ControlActivity.type.modelProperties), { variableName: {
                serializedName: "typeProperties.variableName",
                type: {
                    name: "String"
                }
            }, value: {
                serializedName: "typeProperties.value",
                type: {
                    name: "any"
                }
            } })
    }
};
export const WebHookActivity = {
    serializedName: "WebHook",
    type: {
        name: "Composite",
        className: "WebHookActivity",
        uberParent: "ControlActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ControlActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ControlActivity.type.modelProperties), { policy: {
                serializedName: "policy",
                type: {
                    name: "Composite",
                    className: "SecureInputOutputPolicy"
                }
            }, method: {
                serializedName: "typeProperties.method",
                required: true,
                type: {
                    name: "String"
                }
            }, url: {
                serializedName: "typeProperties.url",
                required: true,
                type: {
                    name: "any"
                }
            }, timeout: {
                serializedName: "typeProperties.timeout",
                type: {
                    name: "String"
                }
            }, headers: {
                serializedName: "typeProperties.headers",
                type: {
                    name: "any"
                }
            }, body: {
                serializedName: "typeProperties.body",
                type: {
                    name: "any"
                }
            }, authentication: {
                serializedName: "typeProperties.authentication",
                type: {
                    name: "Composite",
                    className: "WebActivityAuthentication"
                }
            }, reportStatusOnCallBack: {
                serializedName: "typeProperties.reportStatusOnCallBack",
                type: {
                    name: "any"
                }
            } })
    }
};
export const CopyActivity = {
    serializedName: "Copy",
    type: {
        name: "Composite",
        className: "CopyActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ExecutionActivity.type.modelProperties), { inputs: {
                serializedName: "inputs",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DatasetReference"
                        }
                    }
                }
            }, outputs: {
                serializedName: "outputs",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DatasetReference"
                        }
                    }
                }
            }, source: {
                serializedName: "typeProperties.source",
                type: {
                    name: "Composite",
                    className: "CopySource"
                }
            }, sink: {
                serializedName: "typeProperties.sink",
                type: {
                    name: "Composite",
                    className: "CopySink"
                }
            }, translator: {
                serializedName: "typeProperties.translator",
                type: {
                    name: "any"
                }
            }, enableStaging: {
                serializedName: "typeProperties.enableStaging",
                type: {
                    name: "any"
                }
            }, stagingSettings: {
                serializedName: "typeProperties.stagingSettings",
                type: {
                    name: "Composite",
                    className: "StagingSettings"
                }
            }, parallelCopies: {
                serializedName: "typeProperties.parallelCopies",
                type: {
                    name: "any"
                }
            }, dataIntegrationUnits: {
                serializedName: "typeProperties.dataIntegrationUnits",
                type: {
                    name: "any"
                }
            }, enableSkipIncompatibleRow: {
                serializedName: "typeProperties.enableSkipIncompatibleRow",
                type: {
                    name: "any"
                }
            }, redirectIncompatibleRowSettings: {
                serializedName: "typeProperties.redirectIncompatibleRowSettings",
                type: {
                    name: "Composite",
                    className: "RedirectIncompatibleRowSettings"
                }
            }, logStorageSettings: {
                serializedName: "typeProperties.logStorageSettings",
                type: {
                    name: "Composite",
                    className: "LogStorageSettings"
                }
            }, logSettings: {
                serializedName: "typeProperties.logSettings",
                type: {
                    name: "Composite",
                    className: "LogSettings"
                }
            }, preserveRules: {
                serializedName: "typeProperties.preserveRules",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any"
                        }
                    }
                }
            }, preserve: {
                serializedName: "typeProperties.preserve",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any"
                        }
                    }
                }
            }, validateDataConsistency: {
                serializedName: "typeProperties.validateDataConsistency",
                type: {
                    name: "any"
                }
            }, skipErrorFile: {
                serializedName: "typeProperties.skipErrorFile",
                type: {
                    name: "Composite",
                    className: "SkipErrorFile"
                }
            } })
    }
};
export const HDInsightHiveActivity = {
    serializedName: "HDInsightHive",
    type: {
        name: "Composite",
        className: "HDInsightHiveActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ExecutionActivity.type.modelProperties), { storageLinkedServices: {
                serializedName: "typeProperties.storageLinkedServices",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LinkedServiceReference"
                        }
                    }
                }
            }, arguments: {
                serializedName: "typeProperties.arguments",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any"
                        }
                    }
                }
            }, getDebugInfo: {
                serializedName: "typeProperties.getDebugInfo",
                type: {
                    name: "String"
                }
            }, scriptPath: {
                serializedName: "typeProperties.scriptPath",
                type: {
                    name: "any"
                }
            }, scriptLinkedService: {
                serializedName: "typeProperties.scriptLinkedService",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            }, defines: {
                serializedName: "typeProperties.defines",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }, variables: {
                serializedName: "typeProperties.variables",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }, queryTimeout: {
                serializedName: "typeProperties.queryTimeout",
                type: {
                    name: "Number"
                }
            } })
    }
};
export const HDInsightPigActivity = {
    serializedName: "HDInsightPig",
    type: {
        name: "Composite",
        className: "HDInsightPigActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ExecutionActivity.type.modelProperties), { storageLinkedServices: {
                serializedName: "typeProperties.storageLinkedServices",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LinkedServiceReference"
                        }
                    }
                }
            }, arguments: {
                serializedName: "typeProperties.arguments",
                type: {
                    name: "any"
                }
            }, getDebugInfo: {
                serializedName: "typeProperties.getDebugInfo",
                type: {
                    name: "String"
                }
            }, scriptPath: {
                serializedName: "typeProperties.scriptPath",
                type: {
                    name: "any"
                }
            }, scriptLinkedService: {
                serializedName: "typeProperties.scriptLinkedService",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            }, defines: {
                serializedName: "typeProperties.defines",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            } })
    }
};
export const HDInsightMapReduceActivity = {
    serializedName: "HDInsightMapReduce",
    type: {
        name: "Composite",
        className: "HDInsightMapReduceActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ExecutionActivity.type.modelProperties), { storageLinkedServices: {
                serializedName: "typeProperties.storageLinkedServices",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LinkedServiceReference"
                        }
                    }
                }
            }, arguments: {
                serializedName: "typeProperties.arguments",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any"
                        }
                    }
                }
            }, getDebugInfo: {
                serializedName: "typeProperties.getDebugInfo",
                type: {
                    name: "String"
                }
            }, className: {
                serializedName: "typeProperties.className",
                required: true,
                type: {
                    name: "any"
                }
            }, jarFilePath: {
                serializedName: "typeProperties.jarFilePath",
                required: true,
                type: {
                    name: "any"
                }
            }, jarLinkedService: {
                serializedName: "typeProperties.jarLinkedService",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            }, jarLibs: {
                serializedName: "typeProperties.jarLibs",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any"
                        }
                    }
                }
            }, defines: {
                serializedName: "typeProperties.defines",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            } })
    }
};
export const HDInsightStreamingActivity = {
    serializedName: "HDInsightStreaming",
    type: {
        name: "Composite",
        className: "HDInsightStreamingActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ExecutionActivity.type.modelProperties), { storageLinkedServices: {
                serializedName: "typeProperties.storageLinkedServices",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LinkedServiceReference"
                        }
                    }
                }
            }, arguments: {
                serializedName: "typeProperties.arguments",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any"
                        }
                    }
                }
            }, getDebugInfo: {
                serializedName: "typeProperties.getDebugInfo",
                type: {
                    name: "String"
                }
            }, mapper: {
                serializedName: "typeProperties.mapper",
                required: true,
                type: {
                    name: "any"
                }
            }, reducer: {
                serializedName: "typeProperties.reducer",
                required: true,
                type: {
                    name: "any"
                }
            }, input: {
                serializedName: "typeProperties.input",
                required: true,
                type: {
                    name: "any"
                }
            }, output: {
                serializedName: "typeProperties.output",
                required: true,
                type: {
                    name: "any"
                }
            }, filePaths: {
                serializedName: "typeProperties.filePaths",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any"
                        }
                    }
                }
            }, fileLinkedService: {
                serializedName: "typeProperties.fileLinkedService",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            }, combiner: {
                serializedName: "typeProperties.combiner",
                type: {
                    name: "any"
                }
            }, commandEnvironment: {
                serializedName: "typeProperties.commandEnvironment",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any"
                        }
                    }
                }
            }, defines: {
                serializedName: "typeProperties.defines",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            } })
    }
};
export const HDInsightSparkActivity = {
    serializedName: "HDInsightSpark",
    type: {
        name: "Composite",
        className: "HDInsightSparkActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ExecutionActivity.type.modelProperties), { rootPath: {
                serializedName: "typeProperties.rootPath",
                required: true,
                type: {
                    name: "any"
                }
            }, entryFilePath: {
                serializedName: "typeProperties.entryFilePath",
                required: true,
                type: {
                    name: "any"
                }
            }, arguments: {
                serializedName: "typeProperties.arguments",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any"
                        }
                    }
                }
            }, getDebugInfo: {
                serializedName: "typeProperties.getDebugInfo",
                type: {
                    name: "String"
                }
            }, sparkJobLinkedService: {
                serializedName: "typeProperties.sparkJobLinkedService",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            }, className: {
                serializedName: "typeProperties.className",
                type: {
                    name: "String"
                }
            }, proxyUser: {
                serializedName: "typeProperties.proxyUser",
                type: {
                    name: "any"
                }
            }, sparkConfig: {
                serializedName: "typeProperties.sparkConfig",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            } })
    }
};
export const ExecuteSsisPackageActivity = {
    serializedName: "ExecuteSSISPackage",
    type: {
        name: "Composite",
        className: "ExecuteSsisPackageActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ExecutionActivity.type.modelProperties), { packageLocation: {
                serializedName: "typeProperties.packageLocation",
                type: {
                    name: "Composite",
                    className: "SsisPackageLocation"
                }
            }, runtime: {
                serializedName: "typeProperties.runtime",
                type: {
                    name: "any"
                }
            }, loggingLevel: {
                serializedName: "typeProperties.loggingLevel",
                type: {
                    name: "any"
                }
            }, environmentPath: {
                serializedName: "typeProperties.environmentPath",
                type: {
                    name: "any"
                }
            }, executionCredential: {
                serializedName: "typeProperties.executionCredential",
                type: {
                    name: "Composite",
                    className: "SsisExecutionCredential"
                }
            }, connectVia: {
                serializedName: "typeProperties.connectVia",
                type: {
                    name: "Composite",
                    className: "IntegrationRuntimeReference"
                }
            }, projectParameters: {
                serializedName: "typeProperties.projectParameters",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Composite", className: "SsisExecutionParameter" }
                    }
                }
            }, packageParameters: {
                serializedName: "typeProperties.packageParameters",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Composite", className: "SsisExecutionParameter" }
                    }
                }
            }, projectConnectionManagers: {
                serializedName: "typeProperties.projectConnectionManagers",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Dictionary",
                            value: {
                                type: { name: "Composite", className: "SsisExecutionParameter" }
                            }
                        }
                    }
                }
            }, packageConnectionManagers: {
                serializedName: "typeProperties.packageConnectionManagers",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Dictionary",
                            value: {
                                type: { name: "Composite", className: "SsisExecutionParameter" }
                            }
                        }
                    }
                }
            }, propertyOverrides: {
                serializedName: "typeProperties.propertyOverrides",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Composite", className: "SsisPropertyOverride" }
                    }
                }
            }, logLocation: {
                serializedName: "typeProperties.logLocation",
                type: {
                    name: "Composite",
                    className: "SsisLogLocation"
                }
            } })
    }
};
export const CustomActivity = {
    serializedName: "Custom",
    type: {
        name: "Composite",
        className: "CustomActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ExecutionActivity.type.modelProperties), { command: {
                serializedName: "typeProperties.command",
                required: true,
                type: {
                    name: "any"
                }
            }, resourceLinkedService: {
                serializedName: "typeProperties.resourceLinkedService",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            }, folderPath: {
                serializedName: "typeProperties.folderPath",
                type: {
                    name: "any"
                }
            }, referenceObjects: {
                serializedName: "typeProperties.referenceObjects",
                type: {
                    name: "Composite",
                    className: "CustomActivityReferenceObject"
                }
            }, extendedProperties: {
                serializedName: "typeProperties.extendedProperties",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }, retentionTimeInDays: {
                serializedName: "typeProperties.retentionTimeInDays",
                type: {
                    name: "any"
                }
            }, autoUserSpecification: {
                serializedName: "typeProperties.autoUserSpecification",
                type: {
                    name: "any"
                }
            } })
    }
};
export const SqlServerStoredProcedureActivity = {
    serializedName: "SqlServerStoredProcedure",
    type: {
        name: "Composite",
        className: "SqlServerStoredProcedureActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ExecutionActivity.type.modelProperties), { storedProcedureName: {
                serializedName: "typeProperties.storedProcedureName",
                required: true,
                type: {
                    name: "any"
                }
            }, storedProcedureParameters: {
                serializedName: "typeProperties.storedProcedureParameters",
                type: {
                    name: "any"
                }
            } })
    }
};
export const DeleteActivity = {
    serializedName: "Delete",
    type: {
        name: "Composite",
        className: "DeleteActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ExecutionActivity.type.modelProperties), { recursive: {
                serializedName: "typeProperties.recursive",
                type: {
                    name: "any"
                }
            }, maxConcurrentConnections: {
                constraints: {
                    InclusiveMinimum: 1
                },
                serializedName: "typeProperties.maxConcurrentConnections",
                type: {
                    name: "Number"
                }
            }, enableLogging: {
                serializedName: "typeProperties.enableLogging",
                type: {
                    name: "any"
                }
            }, logStorageSettings: {
                serializedName: "typeProperties.logStorageSettings",
                type: {
                    name: "Composite",
                    className: "LogStorageSettings"
                }
            }, dataset: {
                serializedName: "typeProperties.dataset",
                type: {
                    name: "Composite",
                    className: "DatasetReference"
                }
            }, storeSettings: {
                serializedName: "typeProperties.storeSettings",
                type: {
                    name: "Composite",
                    className: "StoreReadSettings"
                }
            } })
    }
};
export const AzureDataExplorerCommandActivity = {
    serializedName: "AzureDataExplorerCommand",
    type: {
        name: "Composite",
        className: "AzureDataExplorerCommandActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ExecutionActivity.type.modelProperties), { command: {
                serializedName: "typeProperties.command",
                required: true,
                type: {
                    name: "any"
                }
            }, commandTimeout: {
                serializedName: "typeProperties.commandTimeout",
                type: {
                    name: "any"
                }
            } })
    }
};
export const LookupActivity = {
    serializedName: "Lookup",
    type: {
        name: "Composite",
        className: "LookupActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ExecutionActivity.type.modelProperties), { source: {
                serializedName: "typeProperties.source",
                type: {
                    name: "Composite",
                    className: "CopySource"
                }
            }, dataset: {
                serializedName: "typeProperties.dataset",
                type: {
                    name: "Composite",
                    className: "DatasetReference"
                }
            }, firstRowOnly: {
                serializedName: "typeProperties.firstRowOnly",
                type: {
                    name: "any"
                }
            } })
    }
};
export const WebActivity = {
    serializedName: "WebActivity",
    type: {
        name: "Composite",
        className: "WebActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ExecutionActivity.type.modelProperties), { method: {
                serializedName: "typeProperties.method",
                required: true,
                type: {
                    name: "String"
                }
            }, url: {
                serializedName: "typeProperties.url",
                required: true,
                type: {
                    name: "any"
                }
            }, headers: {
                serializedName: "typeProperties.headers",
                type: {
                    name: "any"
                }
            }, body: {
                serializedName: "typeProperties.body",
                type: {
                    name: "any"
                }
            }, authentication: {
                serializedName: "typeProperties.authentication",
                type: {
                    name: "Composite",
                    className: "WebActivityAuthentication"
                }
            }, disableCertValidation: {
                serializedName: "typeProperties.disableCertValidation",
                type: {
                    name: "Boolean"
                }
            }, datasets: {
                serializedName: "typeProperties.datasets",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DatasetReference"
                        }
                    }
                }
            }, linkedServices: {
                serializedName: "typeProperties.linkedServices",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LinkedServiceReference"
                        }
                    }
                }
            }, connectVia: {
                serializedName: "typeProperties.connectVia",
                type: {
                    name: "Composite",
                    className: "IntegrationRuntimeReference"
                }
            } })
    }
};
export const GetMetadataActivity = {
    serializedName: "GetMetadata",
    type: {
        name: "Composite",
        className: "GetMetadataActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ExecutionActivity.type.modelProperties), { dataset: {
                serializedName: "typeProperties.dataset",
                type: {
                    name: "Composite",
                    className: "DatasetReference"
                }
            }, fieldList: {
                serializedName: "typeProperties.fieldList",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any"
                        }
                    }
                }
            }, storeSettings: {
                serializedName: "typeProperties.storeSettings",
                type: {
                    name: "Composite",
                    className: "StoreReadSettings"
                }
            }, formatSettings: {
                serializedName: "typeProperties.formatSettings",
                type: {
                    name: "Composite",
                    className: "FormatReadSettings"
                }
            } })
    }
};
export const AzureMLBatchExecutionActivity = {
    serializedName: "AzureMLBatchExecution",
    type: {
        name: "Composite",
        className: "AzureMLBatchExecutionActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ExecutionActivity.type.modelProperties), { globalParameters: {
                serializedName: "typeProperties.globalParameters",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }, webServiceOutputs: {
                serializedName: "typeProperties.webServiceOutputs",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Composite", className: "AzureMLWebServiceFile" }
                    }
                }
            }, webServiceInputs: {
                serializedName: "typeProperties.webServiceInputs",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Composite", className: "AzureMLWebServiceFile" }
                    }
                }
            } })
    }
};
export const AzureMLUpdateResourceActivity = {
    serializedName: "AzureMLUpdateResource",
    type: {
        name: "Composite",
        className: "AzureMLUpdateResourceActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ExecutionActivity.type.modelProperties), { trainedModelName: {
                serializedName: "typeProperties.trainedModelName",
                required: true,
                type: {
                    name: "any"
                }
            }, trainedModelLinkedServiceName: {
                serializedName: "typeProperties.trainedModelLinkedServiceName",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            }, trainedModelFilePath: {
                serializedName: "typeProperties.trainedModelFilePath",
                required: true,
                type: {
                    name: "any"
                }
            } })
    }
};
export const AzureMLExecutePipelineActivity = {
    serializedName: "AzureMLExecutePipeline",
    type: {
        name: "Composite",
        className: "AzureMLExecutePipelineActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ExecutionActivity.type.modelProperties), { mlPipelineId: {
                serializedName: "typeProperties.mlPipelineId",
                type: {
                    name: "any"
                }
            }, mlPipelineEndpointId: {
                serializedName: "typeProperties.mlPipelineEndpointId",
                type: {
                    name: "any"
                }
            }, version: {
                serializedName: "typeProperties.version",
                type: {
                    name: "any"
                }
            }, experimentName: {
                serializedName: "typeProperties.experimentName",
                type: {
                    name: "any"
                }
            }, mlPipelineParameters: {
                serializedName: "typeProperties.mlPipelineParameters",
                type: {
                    name: "any"
                }
            }, dataPathAssignments: {
                serializedName: "typeProperties.dataPathAssignments",
                type: {
                    name: "any"
                }
            }, mlParentRunId: {
                serializedName: "typeProperties.mlParentRunId",
                type: {
                    name: "any"
                }
            }, continueOnStepFailure: {
                serializedName: "typeProperties.continueOnStepFailure",
                type: {
                    name: "any"
                }
            } })
    }
};
export const DataLakeAnalyticsUsqlActivity = {
    serializedName: "DataLakeAnalyticsU-SQL",
    type: {
        name: "Composite",
        className: "DataLakeAnalyticsUsqlActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ExecutionActivity.type.modelProperties), { scriptPath: {
                serializedName: "typeProperties.scriptPath",
                required: true,
                type: {
                    name: "any"
                }
            }, scriptLinkedService: {
                serializedName: "typeProperties.scriptLinkedService",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            }, degreeOfParallelism: {
                serializedName: "typeProperties.degreeOfParallelism",
                type: {
                    name: "any"
                }
            }, priority: {
                serializedName: "typeProperties.priority",
                type: {
                    name: "any"
                }
            }, parameters: {
                serializedName: "typeProperties.parameters",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }, runtimeVersion: {
                serializedName: "typeProperties.runtimeVersion",
                type: {
                    name: "any"
                }
            }, compilationMode: {
                serializedName: "typeProperties.compilationMode",
                type: {
                    name: "any"
                }
            } })
    }
};
export const DatabricksNotebookActivity = {
    serializedName: "DatabricksNotebook",
    type: {
        name: "Composite",
        className: "DatabricksNotebookActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ExecutionActivity.type.modelProperties), { notebookPath: {
                serializedName: "typeProperties.notebookPath",
                required: true,
                type: {
                    name: "any"
                }
            }, baseParameters: {
                serializedName: "typeProperties.baseParameters",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }, libraries: {
                serializedName: "typeProperties.libraries",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Dictionary",
                            value: { type: { name: "any" } }
                        }
                    }
                }
            } })
    }
};
export const DatabricksSparkJarActivity = {
    serializedName: "DatabricksSparkJar",
    type: {
        name: "Composite",
        className: "DatabricksSparkJarActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ExecutionActivity.type.modelProperties), { mainClassName: {
                serializedName: "typeProperties.mainClassName",
                required: true,
                type: {
                    name: "any"
                }
            }, parameters: {
                serializedName: "typeProperties.parameters",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any"
                        }
                    }
                }
            }, libraries: {
                serializedName: "typeProperties.libraries",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Dictionary",
                            value: { type: { name: "any" } }
                        }
                    }
                }
            } })
    }
};
export const DatabricksSparkPythonActivity = {
    serializedName: "DatabricksSparkPython",
    type: {
        name: "Composite",
        className: "DatabricksSparkPythonActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ExecutionActivity.type.modelProperties), { pythonFile: {
                serializedName: "typeProperties.pythonFile",
                required: true,
                type: {
                    name: "any"
                }
            }, parameters: {
                serializedName: "typeProperties.parameters",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any"
                        }
                    }
                }
            }, libraries: {
                serializedName: "typeProperties.libraries",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Dictionary",
                            value: { type: { name: "any" } }
                        }
                    }
                }
            } })
    }
};
export const AzureFunctionActivity = {
    serializedName: "AzureFunctionActivity",
    type: {
        name: "Composite",
        className: "AzureFunctionActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ExecutionActivity.type.modelProperties), { method: {
                serializedName: "typeProperties.method",
                required: true,
                type: {
                    name: "String"
                }
            }, functionName: {
                serializedName: "typeProperties.functionName",
                required: true,
                type: {
                    name: "any"
                }
            }, headers: {
                serializedName: "typeProperties.headers",
                type: {
                    name: "any"
                }
            }, body: {
                serializedName: "typeProperties.body",
                type: {
                    name: "any"
                }
            } })
    }
};
export const ExecuteDataFlowActivity = {
    serializedName: "ExecuteDataFlow",
    type: {
        name: "Composite",
        className: "ExecuteDataFlowActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ExecutionActivity.type.modelProperties), { dataFlow: {
                serializedName: "typeProperties.dataFlow",
                type: {
                    name: "Composite",
                    className: "DataFlowReference"
                }
            }, staging: {
                serializedName: "typeProperties.staging",
                type: {
                    name: "Composite",
                    className: "DataFlowStagingInfo"
                }
            }, integrationRuntime: {
                serializedName: "typeProperties.integrationRuntime",
                type: {
                    name: "Composite",
                    className: "IntegrationRuntimeReference"
                }
            }, compute: {
                serializedName: "typeProperties.compute",
                type: {
                    name: "Composite",
                    className: "ExecuteDataFlowActivityTypePropertiesCompute"
                }
            }, traceLevel: {
                serializedName: "typeProperties.traceLevel",
                type: {
                    name: "any"
                }
            }, continueOnError: {
                serializedName: "typeProperties.continueOnError",
                type: {
                    name: "any"
                }
            }, runConcurrently: {
                serializedName: "typeProperties.runConcurrently",
                type: {
                    name: "any"
                }
            }, sourceStagingConcurrency: {
                serializedName: "typeProperties.sourceStagingConcurrency",
                type: {
                    name: "any"
                }
            } })
    }
};
export const ScriptActivity = {
    serializedName: "Script",
    type: {
        name: "Composite",
        className: "ScriptActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ExecutionActivity.type.modelProperties), { scriptBlockExecutionTimeout: {
                serializedName: "typeProperties.scriptBlockExecutionTimeout",
                type: {
                    name: "any"
                }
            }, scripts: {
                serializedName: "typeProperties.scripts",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ScriptActivityScriptBlock"
                        }
                    }
                }
            }, logSettings: {
                serializedName: "typeProperties.logSettings",
                type: {
                    name: "Composite",
                    className: "ScriptActivityTypePropertiesLogSettings"
                }
            } })
    }
};
export const SynapseNotebookActivity = {
    serializedName: "SynapseNotebook",
    type: {
        name: "Composite",
        className: "SynapseNotebookActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ExecutionActivity.type.modelProperties), { notebook: {
                serializedName: "typeProperties.notebook",
                type: {
                    name: "Composite",
                    className: "SynapseNotebookReference"
                }
            }, sparkPool: {
                serializedName: "typeProperties.sparkPool",
                type: {
                    name: "Composite",
                    className: "BigDataPoolParametrizationReference"
                }
            }, parameters: {
                serializedName: "typeProperties.parameters",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "Composite", className: "NotebookParameter" } }
                }
            }, executorSize: {
                serializedName: "typeProperties.executorSize",
                type: {
                    name: "any"
                }
            }, conf: {
                serializedName: "typeProperties.conf",
                type: {
                    name: "any"
                }
            }, driverSize: {
                serializedName: "typeProperties.driverSize",
                type: {
                    name: "any"
                }
            }, numExecutors: {
                serializedName: "typeProperties.numExecutors",
                type: {
                    name: "any"
                }
            }, configurationType: {
                serializedName: "typeProperties.configurationType",
                type: {
                    name: "String"
                }
            }, targetSparkConfiguration: {
                serializedName: "typeProperties.targetSparkConfiguration",
                type: {
                    name: "Composite",
                    className: "SparkConfigurationParametrizationReference"
                }
            }, sparkConfig: {
                serializedName: "typeProperties.sparkConfig",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            } })
    }
};
export const SynapseSparkJobDefinitionActivity = {
    serializedName: "SparkJob",
    type: {
        name: "Composite",
        className: "SynapseSparkJobDefinitionActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ExecutionActivity.type.modelProperties), { sparkJob: {
                serializedName: "typeProperties.sparkJob",
                type: {
                    name: "Composite",
                    className: "SynapseSparkJobReference"
                }
            }, arguments: {
                serializedName: "typeProperties.args",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any"
                        }
                    }
                }
            }, file: {
                serializedName: "typeProperties.file",
                type: {
                    name: "any"
                }
            }, scanFolder: {
                serializedName: "typeProperties.scanFolder",
                type: {
                    name: "any"
                }
            }, className: {
                serializedName: "typeProperties.className",
                type: {
                    name: "any"
                }
            }, files: {
                serializedName: "typeProperties.files",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any"
                        }
                    }
                }
            }, pythonCodeReference: {
                serializedName: "typeProperties.pythonCodeReference",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any"
                        }
                    }
                }
            }, filesV2: {
                serializedName: "typeProperties.filesV2",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any"
                        }
                    }
                }
            }, targetBigDataPool: {
                serializedName: "typeProperties.targetBigDataPool",
                type: {
                    name: "Composite",
                    className: "BigDataPoolParametrizationReference"
                }
            }, executorSize: {
                serializedName: "typeProperties.executorSize",
                type: {
                    name: "any"
                }
            }, conf: {
                serializedName: "typeProperties.conf",
                type: {
                    name: "any"
                }
            }, driverSize: {
                serializedName: "typeProperties.driverSize",
                type: {
                    name: "any"
                }
            }, numExecutors: {
                serializedName: "typeProperties.numExecutors",
                type: {
                    name: "any"
                }
            }, configurationType: {
                serializedName: "typeProperties.configurationType",
                type: {
                    name: "String"
                }
            }, targetSparkConfiguration: {
                serializedName: "typeProperties.targetSparkConfiguration",
                type: {
                    name: "Composite",
                    className: "SparkConfigurationParametrizationReference"
                }
            }, sparkConfig: {
                serializedName: "typeProperties.sparkConfig",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            } })
    }
};
export const ScheduleTrigger = {
    serializedName: "ScheduleTrigger",
    type: {
        name: "Composite",
        className: "ScheduleTrigger",
        uberParent: "MultiplePipelineTrigger",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: MultiplePipelineTrigger.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, MultiplePipelineTrigger.type.modelProperties), { recurrence: {
                serializedName: "typeProperties.recurrence",
                type: {
                    name: "Composite",
                    className: "ScheduleTriggerRecurrence"
                }
            } })
    }
};
export const BlobTrigger = {
    serializedName: "BlobTrigger",
    type: {
        name: "Composite",
        className: "BlobTrigger",
        uberParent: "MultiplePipelineTrigger",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: MultiplePipelineTrigger.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, MultiplePipelineTrigger.type.modelProperties), { folderPath: {
                serializedName: "typeProperties.folderPath",
                required: true,
                type: {
                    name: "String"
                }
            }, maxConcurrency: {
                serializedName: "typeProperties.maxConcurrency",
                required: true,
                type: {
                    name: "Number"
                }
            }, linkedService: {
                serializedName: "typeProperties.linkedService",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference"
                }
            } })
    }
};
export const BlobEventsTrigger = {
    serializedName: "BlobEventsTrigger",
    type: {
        name: "Composite",
        className: "BlobEventsTrigger",
        uberParent: "MultiplePipelineTrigger",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: MultiplePipelineTrigger.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, MultiplePipelineTrigger.type.modelProperties), { blobPathBeginsWith: {
                serializedName: "typeProperties.blobPathBeginsWith",
                type: {
                    name: "String"
                }
            }, blobPathEndsWith: {
                serializedName: "typeProperties.blobPathEndsWith",
                type: {
                    name: "String"
                }
            }, ignoreEmptyBlobs: {
                serializedName: "typeProperties.ignoreEmptyBlobs",
                type: {
                    name: "Boolean"
                }
            }, events: {
                serializedName: "typeProperties.events",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, scope: {
                serializedName: "typeProperties.scope",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
export const CustomEventsTrigger = {
    serializedName: "CustomEventsTrigger",
    type: {
        name: "Composite",
        className: "CustomEventsTrigger",
        uberParent: "MultiplePipelineTrigger",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: MultiplePipelineTrigger.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, MultiplePipelineTrigger.type.modelProperties), { subjectBeginsWith: {
                serializedName: "typeProperties.subjectBeginsWith",
                type: {
                    name: "String"
                }
            }, subjectEndsWith: {
                serializedName: "typeProperties.subjectEndsWith",
                type: {
                    name: "String"
                }
            }, events: {
                serializedName: "typeProperties.events",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any"
                        }
                    }
                }
            }, scope: {
                serializedName: "typeProperties.scope",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
export const PowerQuerySource = {
    type: {
        name: "Composite",
        className: "PowerQuerySource",
        modelProperties: Object.assign(Object.assign({}, DataFlowSource.type.modelProperties), { script: {
                serializedName: "script",
                type: {
                    name: "String"
                }
            } })
    }
};
export const PowerQuerySink = {
    type: {
        name: "Composite",
        className: "PowerQuerySink",
        modelProperties: Object.assign(Object.assign({}, DataFlowSink.type.modelProperties), { script: {
                serializedName: "script",
                type: {
                    name: "String"
                }
            } })
    }
};
export const AzureTableSource = {
    serializedName: "AzureTableSource",
    type: {
        name: "Composite",
        className: "AzureTableSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { azureTableSourceQuery: {
                serializedName: "azureTableSourceQuery",
                type: {
                    name: "any"
                }
            }, azureTableSourceIgnoreTableNotFound: {
                serializedName: "azureTableSourceIgnoreTableNotFound",
                type: {
                    name: "any"
                }
            } })
    }
};
export const InformixSource = {
    serializedName: "InformixSource",
    type: {
        name: "Composite",
        className: "InformixSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
export const Db2Source = {
    serializedName: "Db2Source",
    type: {
        name: "Composite",
        className: "Db2Source",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
export const OdbcSource = {
    serializedName: "OdbcSource",
    type: {
        name: "Composite",
        className: "OdbcSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
export const MySqlSource = {
    serializedName: "MySqlSource",
    type: {
        name: "Composite",
        className: "MySqlSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
export const PostgreSqlSource = {
    serializedName: "PostgreSqlSource",
    type: {
        name: "Composite",
        className: "PostgreSqlSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
export const SybaseSource = {
    serializedName: "SybaseSource",
    type: {
        name: "Composite",
        className: "SybaseSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
export const SapBwSource = {
    serializedName: "SapBwSource",
    type: {
        name: "Composite",
        className: "SapBwSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
export const SalesforceSource = {
    serializedName: "SalesforceSource",
    type: {
        name: "Composite",
        className: "SalesforceSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            }, readBehavior: {
                serializedName: "readBehavior",
                type: {
                    name: "any"
                }
            } })
    }
};
export const SapCloudForCustomerSource = {
    serializedName: "SapCloudForCustomerSource",
    type: {
        name: "Composite",
        className: "SapCloudForCustomerSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            }, httpRequestTimeout: {
                serializedName: "httpRequestTimeout",
                type: {
                    name: "any"
                }
            } })
    }
};
export const SapEccSource = {
    serializedName: "SapEccSource",
    type: {
        name: "Composite",
        className: "SapEccSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            }, httpRequestTimeout: {
                serializedName: "httpRequestTimeout",
                type: {
                    name: "any"
                }
            } })
    }
};
export const SapHanaSource = {
    serializedName: "SapHanaSource",
    type: {
        name: "Composite",
        className: "SapHanaSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            }, packetSize: {
                serializedName: "packetSize",
                type: {
                    name: "any"
                }
            }, partitionOption: {
                serializedName: "partitionOption",
                type: {
                    name: "any"
                }
            }, partitionSettings: {
                serializedName: "partitionSettings",
                type: {
                    name: "Composite",
                    className: "SapHanaPartitionSettings"
                }
            } })
    }
};
export const SapOpenHubSource = {
    serializedName: "SapOpenHubSource",
    type: {
        name: "Composite",
        className: "SapOpenHubSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { excludeLastRequest: {
                serializedName: "excludeLastRequest",
                type: {
                    name: "any"
                }
            }, baseRequestId: {
                serializedName: "baseRequestId",
                type: {
                    name: "any"
                }
            }, customRfcReadTableFunctionModule: {
                serializedName: "customRfcReadTableFunctionModule",
                type: {
                    name: "any"
                }
            }, sapDataColumnDelimiter: {
                serializedName: "sapDataColumnDelimiter",
                type: {
                    name: "any"
                }
            } })
    }
};
export const SapOdpSource = {
    serializedName: "SapOdpSource",
    type: {
        name: "Composite",
        className: "SapOdpSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { extractionMode: {
                serializedName: "extractionMode",
                type: {
                    name: "any"
                }
            }, subscriberProcess: {
                serializedName: "subscriberProcess",
                type: {
                    name: "any"
                }
            }, selection: {
                serializedName: "selection",
                type: {
                    name: "any"
                }
            }, projection: {
                serializedName: "projection",
                type: {
                    name: "any"
                }
            } })
    }
};
export const SapTableSource = {
    serializedName: "SapTableSource",
    type: {
        name: "Composite",
        className: "SapTableSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { rowCount: {
                serializedName: "rowCount",
                type: {
                    name: "any"
                }
            }, rowSkips: {
                serializedName: "rowSkips",
                type: {
                    name: "any"
                }
            }, rfcTableFields: {
                serializedName: "rfcTableFields",
                type: {
                    name: "any"
                }
            }, rfcTableOptions: {
                serializedName: "rfcTableOptions",
                type: {
                    name: "any"
                }
            }, batchSize: {
                serializedName: "batchSize",
                type: {
                    name: "any"
                }
            }, customRfcReadTableFunctionModule: {
                serializedName: "customRfcReadTableFunctionModule",
                type: {
                    name: "any"
                }
            }, sapDataColumnDelimiter: {
                serializedName: "sapDataColumnDelimiter",
                type: {
                    name: "any"
                }
            }, partitionOption: {
                serializedName: "partitionOption",
                type: {
                    name: "any"
                }
            }, partitionSettings: {
                serializedName: "partitionSettings",
                type: {
                    name: "Composite",
                    className: "SapTablePartitionSettings"
                }
            } })
    }
};
export const SqlSource = {
    serializedName: "SqlSource",
    type: {
        name: "Composite",
        className: "SqlSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { sqlReaderQuery: {
                serializedName: "sqlReaderQuery",
                type: {
                    name: "any"
                }
            }, sqlReaderStoredProcedureName: {
                serializedName: "sqlReaderStoredProcedureName",
                type: {
                    name: "any"
                }
            }, storedProcedureParameters: {
                serializedName: "storedProcedureParameters",
                type: {
                    name: "any"
                }
            }, isolationLevel: {
                serializedName: "isolationLevel",
                type: {
                    name: "any"
                }
            }, partitionOption: {
                serializedName: "partitionOption",
                type: {
                    name: "any"
                }
            }, partitionSettings: {
                serializedName: "partitionSettings",
                type: {
                    name: "Composite",
                    className: "SqlPartitionSettings"
                }
            } })
    }
};
export const SqlServerSource = {
    serializedName: "SqlServerSource",
    type: {
        name: "Composite",
        className: "SqlServerSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { sqlReaderQuery: {
                serializedName: "sqlReaderQuery",
                type: {
                    name: "any"
                }
            }, sqlReaderStoredProcedureName: {
                serializedName: "sqlReaderStoredProcedureName",
                type: {
                    name: "any"
                }
            }, storedProcedureParameters: {
                serializedName: "storedProcedureParameters",
                type: {
                    name: "any"
                }
            }, isolationLevel: {
                serializedName: "isolationLevel",
                type: {
                    name: "any"
                }
            }, produceAdditionalTypes: {
                serializedName: "produceAdditionalTypes",
                type: {
                    name: "any"
                }
            }, partitionOption: {
                serializedName: "partitionOption",
                type: {
                    name: "any"
                }
            }, partitionSettings: {
                serializedName: "partitionSettings",
                type: {
                    name: "Composite",
                    className: "SqlPartitionSettings"
                }
            } })
    }
};
export const AmazonRdsForSqlServerSource = {
    serializedName: "AmazonRdsForSqlServerSource",
    type: {
        name: "Composite",
        className: "AmazonRdsForSqlServerSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { sqlReaderQuery: {
                serializedName: "sqlReaderQuery",
                type: {
                    name: "any"
                }
            }, sqlReaderStoredProcedureName: {
                serializedName: "sqlReaderStoredProcedureName",
                type: {
                    name: "any"
                }
            }, storedProcedureParameters: {
                serializedName: "storedProcedureParameters",
                type: {
                    name: "any"
                }
            }, isolationLevel: {
                serializedName: "isolationLevel",
                type: {
                    name: "any"
                }
            }, produceAdditionalTypes: {
                serializedName: "produceAdditionalTypes",
                type: {
                    name: "any"
                }
            }, partitionOption: {
                serializedName: "partitionOption",
                type: {
                    name: "any"
                }
            }, partitionSettings: {
                serializedName: "partitionSettings",
                type: {
                    name: "Composite",
                    className: "SqlPartitionSettings"
                }
            } })
    }
};
export const AzureSqlSource = {
    serializedName: "AzureSqlSource",
    type: {
        name: "Composite",
        className: "AzureSqlSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { sqlReaderQuery: {
                serializedName: "sqlReaderQuery",
                type: {
                    name: "any"
                }
            }, sqlReaderStoredProcedureName: {
                serializedName: "sqlReaderStoredProcedureName",
                type: {
                    name: "any"
                }
            }, storedProcedureParameters: {
                serializedName: "storedProcedureParameters",
                type: {
                    name: "any"
                }
            }, isolationLevel: {
                serializedName: "isolationLevel",
                type: {
                    name: "any"
                }
            }, produceAdditionalTypes: {
                serializedName: "produceAdditionalTypes",
                type: {
                    name: "any"
                }
            }, partitionOption: {
                serializedName: "partitionOption",
                type: {
                    name: "any"
                }
            }, partitionSettings: {
                serializedName: "partitionSettings",
                type: {
                    name: "Composite",
                    className: "SqlPartitionSettings"
                }
            } })
    }
};
export const SqlMISource = {
    serializedName: "SqlMISource",
    type: {
        name: "Composite",
        className: "SqlMISource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { sqlReaderQuery: {
                serializedName: "sqlReaderQuery",
                type: {
                    name: "any"
                }
            }, sqlReaderStoredProcedureName: {
                serializedName: "sqlReaderStoredProcedureName",
                type: {
                    name: "any"
                }
            }, storedProcedureParameters: {
                serializedName: "storedProcedureParameters",
                type: {
                    name: "any"
                }
            }, isolationLevel: {
                serializedName: "isolationLevel",
                type: {
                    name: "any"
                }
            }, produceAdditionalTypes: {
                serializedName: "produceAdditionalTypes",
                type: {
                    name: "any"
                }
            }, partitionOption: {
                serializedName: "partitionOption",
                type: {
                    name: "any"
                }
            }, partitionSettings: {
                serializedName: "partitionSettings",
                type: {
                    name: "Composite",
                    className: "SqlPartitionSettings"
                }
            } })
    }
};
export const SqlDWSource = {
    serializedName: "SqlDWSource",
    type: {
        name: "Composite",
        className: "SqlDWSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { sqlReaderQuery: {
                serializedName: "sqlReaderQuery",
                type: {
                    name: "any"
                }
            }, sqlReaderStoredProcedureName: {
                serializedName: "sqlReaderStoredProcedureName",
                type: {
                    name: "any"
                }
            }, storedProcedureParameters: {
                serializedName: "storedProcedureParameters",
                type: {
                    name: "any"
                }
            }, isolationLevel: {
                serializedName: "isolationLevel",
                type: {
                    name: "any"
                }
            }, partitionOption: {
                serializedName: "partitionOption",
                type: {
                    name: "any"
                }
            }, partitionSettings: {
                serializedName: "partitionSettings",
                type: {
                    name: "Composite",
                    className: "SqlPartitionSettings"
                }
            } })
    }
};
export const AzureMySqlSource = {
    serializedName: "AzureMySqlSource",
    type: {
        name: "Composite",
        className: "AzureMySqlSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
export const TeradataSource = {
    serializedName: "TeradataSource",
    type: {
        name: "Composite",
        className: "TeradataSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            }, partitionOption: {
                serializedName: "partitionOption",
                type: {
                    name: "any"
                }
            }, partitionSettings: {
                serializedName: "partitionSettings",
                type: {
                    name: "Composite",
                    className: "TeradataPartitionSettings"
                }
            } })
    }
};
export const CassandraSource = {
    serializedName: "CassandraSource",
    type: {
        name: "Composite",
        className: "CassandraSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            }, consistencyLevel: {
                serializedName: "consistencyLevel",
                type: {
                    name: "String"
                }
            } })
    }
};
export const AmazonMWSSource = {
    serializedName: "AmazonMWSSource",
    type: {
        name: "Composite",
        className: "AmazonMWSSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
export const AzurePostgreSqlSource = {
    serializedName: "AzurePostgreSqlSource",
    type: {
        name: "Composite",
        className: "AzurePostgreSqlSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
export const ConcurSource = {
    serializedName: "ConcurSource",
    type: {
        name: "Composite",
        className: "ConcurSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
export const CouchbaseSource = {
    serializedName: "CouchbaseSource",
    type: {
        name: "Composite",
        className: "CouchbaseSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
export const DrillSource = {
    serializedName: "DrillSource",
    type: {
        name: "Composite",
        className: "DrillSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
export const EloquaSource = {
    serializedName: "EloquaSource",
    type: {
        name: "Composite",
        className: "EloquaSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
export const GoogleBigQuerySource = {
    serializedName: "GoogleBigQuerySource",
    type: {
        name: "Composite",
        className: "GoogleBigQuerySource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
export const GreenplumSource = {
    serializedName: "GreenplumSource",
    type: {
        name: "Composite",
        className: "GreenplumSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
export const HBaseSource = {
    serializedName: "HBaseSource",
    type: {
        name: "Composite",
        className: "HBaseSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
export const HiveSource = {
    serializedName: "HiveSource",
    type: {
        name: "Composite",
        className: "HiveSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
export const HubspotSource = {
    serializedName: "HubspotSource",
    type: {
        name: "Composite",
        className: "HubspotSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
export const ImpalaSource = {
    serializedName: "ImpalaSource",
    type: {
        name: "Composite",
        className: "ImpalaSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
export const JiraSource = {
    serializedName: "JiraSource",
    type: {
        name: "Composite",
        className: "JiraSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
export const MagentoSource = {
    serializedName: "MagentoSource",
    type: {
        name: "Composite",
        className: "MagentoSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
export const MariaDBSource = {
    serializedName: "MariaDBSource",
    type: {
        name: "Composite",
        className: "MariaDBSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
export const AzureMariaDBSource = {
    serializedName: "AzureMariaDBSource",
    type: {
        name: "Composite",
        className: "AzureMariaDBSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
export const MarketoSource = {
    serializedName: "MarketoSource",
    type: {
        name: "Composite",
        className: "MarketoSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
export const PaypalSource = {
    serializedName: "PaypalSource",
    type: {
        name: "Composite",
        className: "PaypalSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
export const PhoenixSource = {
    serializedName: "PhoenixSource",
    type: {
        name: "Composite",
        className: "PhoenixSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
export const PrestoSource = {
    serializedName: "PrestoSource",
    type: {
        name: "Composite",
        className: "PrestoSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
export const QuickBooksSource = {
    serializedName: "QuickBooksSource",
    type: {
        name: "Composite",
        className: "QuickBooksSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
export const ServiceNowSource = {
    serializedName: "ServiceNowSource",
    type: {
        name: "Composite",
        className: "ServiceNowSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
export const ShopifySource = {
    serializedName: "ShopifySource",
    type: {
        name: "Composite",
        className: "ShopifySource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
export const SparkSource = {
    serializedName: "SparkSource",
    type: {
        name: "Composite",
        className: "SparkSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
export const SquareSource = {
    serializedName: "SquareSource",
    type: {
        name: "Composite",
        className: "SquareSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
export const XeroSource = {
    serializedName: "XeroSource",
    type: {
        name: "Composite",
        className: "XeroSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
export const ZohoSource = {
    serializedName: "ZohoSource",
    type: {
        name: "Composite",
        className: "ZohoSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
export const NetezzaSource = {
    serializedName: "NetezzaSource",
    type: {
        name: "Composite",
        className: "NetezzaSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            }, partitionOption: {
                serializedName: "partitionOption",
                type: {
                    name: "any"
                }
            }, partitionSettings: {
                serializedName: "partitionSettings",
                type: {
                    name: "Composite",
                    className: "NetezzaPartitionSettings"
                }
            } })
    }
};
export const VerticaSource = {
    serializedName: "VerticaSource",
    type: {
        name: "Composite",
        className: "VerticaSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
export const SalesforceMarketingCloudSource = {
    serializedName: "SalesforceMarketingCloudSource",
    type: {
        name: "Composite",
        className: "SalesforceMarketingCloudSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
export const ResponsysSource = {
    serializedName: "ResponsysSource",
    type: {
        name: "Composite",
        className: "ResponsysSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
export const DynamicsAXSource = {
    serializedName: "DynamicsAXSource",
    type: {
        name: "Composite",
        className: "DynamicsAXSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            }, httpRequestTimeout: {
                serializedName: "httpRequestTimeout",
                type: {
                    name: "any"
                }
            } })
    }
};
export const OracleServiceCloudSource = {
    serializedName: "OracleServiceCloudSource",
    type: {
        name: "Composite",
        className: "OracleServiceCloudSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
export const GoogleAdWordsSource = {
    serializedName: "GoogleAdWordsSource",
    type: {
        name: "Composite",
        className: "GoogleAdWordsSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            } })
    }
};
export const AmazonRedshiftSource = {
    serializedName: "AmazonRedshiftSource",
    type: {
        name: "Composite",
        className: "AmazonRedshiftSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any"
                }
            }, redshiftUnloadSettings: {
                serializedName: "redshiftUnloadSettings",
                type: {
                    name: "Composite",
                    className: "RedshiftUnloadSettings"
                }
            } })
    }
};
export const TumblingWindowTriggerDependencyReference = {
    serializedName: "TumblingWindowTriggerDependencyReference",
    type: {
        name: "Composite",
        className: "TumblingWindowTriggerDependencyReference",
        uberParent: "TriggerDependencyReference",
        polymorphicDiscriminator: TriggerDependencyReference.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TriggerDependencyReference.type.modelProperties), { offset: {
                constraints: {
                    Pattern: new RegExp("-?((\\d+)\\.)?(\\d\\d):(60|([0-5][0-9])):(60|([0-5][0-9]))"),
                    MaxLength: 15,
                    MinLength: 8
                },
                serializedName: "offset",
                type: {
                    name: "String"
                }
            }, size: {
                constraints: {
                    Pattern: new RegExp("((\\d+)\\.)?(\\d\\d):(60|([0-5][0-9])):(60|([0-5][0-9]))"),
                    MaxLength: 15,
                    MinLength: 8
                },
                serializedName: "size",
                type: {
                    name: "String"
                }
            } })
    }
};
export const DataFlowDebugSessionCreateHeaders = {
    type: {
        name: "Composite",
        className: "DataFlowDebugSessionCreateHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const DataFlowDebugSessionExecuteCommandHeaders = {
    type: {
        name: "Composite",
        className: "DataFlowDebugSessionExecuteCommandHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export let discriminators = {
    FactoryRepoConfiguration: FactoryRepoConfiguration,
    IntegrationRuntime: IntegrationRuntime,
    IntegrationRuntimeStatus: IntegrationRuntimeStatus,
    SsisObjectMetadata: SsisObjectMetadata,
    LinkedService: LinkedService,
    Dataset: Dataset,
    Activity: Activity,
    Trigger: Trigger,
    DataFlow: DataFlow,
    Credential: Credential,
    SecretBase: SecretBase,
    DatasetLocation: DatasetLocation,
    DatasetStorageFormat: DatasetStorageFormat,
    CustomSetupBase: CustomSetupBase,
    LinkedIntegrationRuntimeType: LinkedIntegrationRuntimeType,
    WebLinkedServiceTypeProperties: WebLinkedServiceTypeProperties,
    StoreReadSettings: StoreReadSettings,
    StoreWriteSettings: StoreWriteSettings,
    FormatReadSettings: FormatReadSettings,
    CompressionReadSettings: CompressionReadSettings,
    FormatWriteSettings: FormatWriteSettings,
    CopySource: CopySource,
    CopySink: CopySink,
    ExportSettings: ExportSettings,
    ImportSettings: ImportSettings,
    CopyTranslator: CopyTranslator,
    DependencyReference: DependencyReference,
    "FactoryRepoConfiguration.FactoryVSTSConfiguration": FactoryVstsConfiguration,
    "FactoryRepoConfiguration.FactoryGitHubConfiguration": FactoryGitHubConfiguration,
    "IntegrationRuntime.Managed": ManagedIntegrationRuntime,
    "IntegrationRuntime.SelfHosted": SelfHostedIntegrationRuntime,
    "IntegrationRuntimeStatus.Managed": ManagedIntegrationRuntimeStatus,
    "IntegrationRuntimeStatus.SelfHosted": SelfHostedIntegrationRuntimeStatus,
    "SsisObjectMetadata.Folder": SsisFolder,
    "SsisObjectMetadata.Project": SsisProject,
    "SsisObjectMetadata.Package": SsisPackage,
    "SsisObjectMetadata.Environment": SsisEnvironment,
    "LinkedService.AzureStorage": AzureStorageLinkedService,
    "LinkedService.AzureBlobStorage": AzureBlobStorageLinkedService,
    "LinkedService.AzureTableStorage": AzureTableStorageLinkedService,
    "LinkedService.AzureSqlDW": AzureSqlDWLinkedService,
    "LinkedService.SqlServer": SqlServerLinkedService,
    "LinkedService.AmazonRdsForSqlServer": AmazonRdsForSqlServerLinkedService,
    "LinkedService.AzureSqlDatabase": AzureSqlDatabaseLinkedService,
    "LinkedService.AzureSqlMI": AzureSqlMILinkedService,
    "LinkedService.AzureBatch": AzureBatchLinkedService,
    "LinkedService.AzureKeyVault": AzureKeyVaultLinkedService,
    "LinkedService.CosmosDb": CosmosDbLinkedService,
    "LinkedService.Dynamics": DynamicsLinkedService,
    "LinkedService.DynamicsCrm": DynamicsCrmLinkedService,
    "LinkedService.CommonDataServiceForApps": CommonDataServiceForAppsLinkedService,
    "LinkedService.HDInsight": HDInsightLinkedService,
    "LinkedService.FileServer": FileServerLinkedService,
    "LinkedService.AzureFileStorage": AzureFileStorageLinkedService,
    "LinkedService.AmazonS3Compatible": AmazonS3CompatibleLinkedService,
    "LinkedService.OracleCloudStorage": OracleCloudStorageLinkedService,
    "LinkedService.GoogleCloudStorage": GoogleCloudStorageLinkedService,
    "LinkedService.Oracle": OracleLinkedService,
    "LinkedService.AmazonRdsForOracle": AmazonRdsForOracleLinkedService,
    "LinkedService.AzureMySql": AzureMySqlLinkedService,
    "LinkedService.MySql": MySqlLinkedService,
    "LinkedService.PostgreSql": PostgreSqlLinkedService,
    "LinkedService.Sybase": SybaseLinkedService,
    "LinkedService.Db2": Db2LinkedService,
    "LinkedService.Teradata": TeradataLinkedService,
    "LinkedService.AzureML": AzureMLLinkedService,
    "LinkedService.AzureMLService": AzureMLServiceLinkedService,
    "LinkedService.Odbc": OdbcLinkedService,
    "LinkedService.Informix": InformixLinkedService,
    "LinkedService.MicrosoftAccess": MicrosoftAccessLinkedService,
    "LinkedService.Hdfs": HdfsLinkedService,
    "LinkedService.OData": ODataLinkedService,
    "LinkedService.Web": WebLinkedService,
    "LinkedService.Cassandra": CassandraLinkedService,
    "LinkedService.MongoDb": MongoDbLinkedService,
    "LinkedService.MongoDbAtlas": MongoDbAtlasLinkedService,
    "LinkedService.MongoDbV2": MongoDbV2LinkedService,
    "LinkedService.CosmosDbMongoDbApi": CosmosDbMongoDbApiLinkedService,
    "LinkedService.AzureDataLakeStore": AzureDataLakeStoreLinkedService,
    "LinkedService.AzureBlobFS": AzureBlobFSLinkedService,
    "LinkedService.Office365": Office365LinkedService,
    "LinkedService.Salesforce": SalesforceLinkedService,
    "LinkedService.SalesforceServiceCloud": SalesforceServiceCloudLinkedService,
    "LinkedService.SapCloudForCustomer": SapCloudForCustomerLinkedService,
    "LinkedService.SapEcc": SapEccLinkedService,
    "LinkedService.SapOpenHub": SapOpenHubLinkedService,
    "LinkedService.SapOdp": SapOdpLinkedService,
    "LinkedService.RestService": RestServiceLinkedService,
    "LinkedService.TeamDesk": TeamDeskLinkedService,
    "LinkedService.Quickbase": QuickbaseLinkedService,
    "LinkedService.Smartsheet": SmartsheetLinkedService,
    "LinkedService.Zendesk": ZendeskLinkedService,
    "LinkedService.Dataworld": DataworldLinkedService,
    "LinkedService.AppFigures": AppFiguresLinkedService,
    "LinkedService.Asana": AsanaLinkedService,
    "LinkedService.Twilio": TwilioLinkedService,
    "LinkedService.GoogleSheets": GoogleSheetsLinkedService,
    "LinkedService.AmazonS3": AmazonS3LinkedService,
    "LinkedService.AmazonRedshift": AmazonRedshiftLinkedService,
    "LinkedService.CustomDataSource": CustomDataSourceLinkedService,
    "LinkedService.AzureSearch": AzureSearchLinkedService,
    "LinkedService.HttpServer": HttpLinkedService,
    "LinkedService.FtpServer": FtpServerLinkedService,
    "LinkedService.Sftp": SftpServerLinkedService,
    "LinkedService.SapBW": SapBWLinkedService,
    "LinkedService.SapHana": SapHanaLinkedService,
    "LinkedService.AmazonMWS": AmazonMWSLinkedService,
    "LinkedService.AzurePostgreSql": AzurePostgreSqlLinkedService,
    "LinkedService.Concur": ConcurLinkedService,
    "LinkedService.Couchbase": CouchbaseLinkedService,
    "LinkedService.Drill": DrillLinkedService,
    "LinkedService.Eloqua": EloquaLinkedService,
    "LinkedService.GoogleBigQuery": GoogleBigQueryLinkedService,
    "LinkedService.Greenplum": GreenplumLinkedService,
    "LinkedService.HBase": HBaseLinkedService,
    "LinkedService.Hive": HiveLinkedService,
    "LinkedService.Hubspot": HubspotLinkedService,
    "LinkedService.Impala": ImpalaLinkedService,
    "LinkedService.Jira": JiraLinkedService,
    "LinkedService.Magento": MagentoLinkedService,
    "LinkedService.MariaDB": MariaDBLinkedService,
    "LinkedService.AzureMariaDB": AzureMariaDBLinkedService,
    "LinkedService.Marketo": MarketoLinkedService,
    "LinkedService.Paypal": PaypalLinkedService,
    "LinkedService.Phoenix": PhoenixLinkedService,
    "LinkedService.Presto": PrestoLinkedService,
    "LinkedService.QuickBooks": QuickBooksLinkedService,
    "LinkedService.ServiceNow": ServiceNowLinkedService,
    "LinkedService.Shopify": ShopifyLinkedService,
    "LinkedService.Spark": SparkLinkedService,
    "LinkedService.Square": SquareLinkedService,
    "LinkedService.Xero": XeroLinkedService,
    "LinkedService.Zoho": ZohoLinkedService,
    "LinkedService.Vertica": VerticaLinkedService,
    "LinkedService.Netezza": NetezzaLinkedService,
    "LinkedService.SalesforceMarketingCloud": SalesforceMarketingCloudLinkedService,
    "LinkedService.HDInsightOnDemand": HDInsightOnDemandLinkedService,
    "LinkedService.AzureDataLakeAnalytics": AzureDataLakeAnalyticsLinkedService,
    "LinkedService.AzureDatabricks": AzureDatabricksLinkedService,
    "LinkedService.AzureDatabricksDeltaLake": AzureDatabricksDeltaLakeLinkedService,
    "LinkedService.Responsys": ResponsysLinkedService,
    "LinkedService.DynamicsAX": DynamicsAXLinkedService,
    "LinkedService.OracleServiceCloud": OracleServiceCloudLinkedService,
    "LinkedService.GoogleAdWords": GoogleAdWordsLinkedService,
    "LinkedService.SapTable": SapTableLinkedService,
    "LinkedService.AzureDataExplorer": AzureDataExplorerLinkedService,
    "LinkedService.AzureFunction": AzureFunctionLinkedService,
    "LinkedService.Snowflake": SnowflakeLinkedService,
    "LinkedService.SharePointOnlineList": SharePointOnlineListLinkedService,
    "LinkedService.AzureSynapseArtifacts": AzureSynapseArtifactsLinkedService,
    "LinkedService.LakeHouse": LakeHouseLinkedService,
    "Dataset.AmazonS3Object": AmazonS3Dataset,
    "Dataset.Avro": AvroDataset,
    "Dataset.Excel": ExcelDataset,
    "Dataset.Parquet": ParquetDataset,
    "Dataset.DelimitedText": DelimitedTextDataset,
    "Dataset.Json": JsonDataset,
    "Dataset.Xml": XmlDataset,
    "Dataset.Orc": OrcDataset,
    "Dataset.Binary": BinaryDataset,
    "Dataset.AzureBlob": AzureBlobDataset,
    "Dataset.AzureTable": AzureTableDataset,
    "Dataset.AzureSqlTable": AzureSqlTableDataset,
    "Dataset.AzureSqlMITable": AzureSqlMITableDataset,
    "Dataset.AzureSqlDWTable": AzureSqlDWTableDataset,
    "Dataset.CassandraTable": CassandraTableDataset,
    "Dataset.CustomDataset": CustomDataset,
    "Dataset.CosmosDbSqlApiCollection": CosmosDbSqlApiCollectionDataset,
    "Dataset.DocumentDbCollection": DocumentDbCollectionDataset,
    "Dataset.DynamicsEntity": DynamicsEntityDataset,
    "Dataset.DynamicsCrmEntity": DynamicsCrmEntityDataset,
    "Dataset.CommonDataServiceForAppsEntity": CommonDataServiceForAppsEntityDataset,
    "Dataset.AzureDataLakeStoreFile": AzureDataLakeStoreDataset,
    "Dataset.AzureBlobFSFile": AzureBlobFSDataset,
    "Dataset.Office365Table": Office365Dataset,
    "Dataset.FileShare": FileShareDataset,
    "Dataset.MongoDbCollection": MongoDbCollectionDataset,
    "Dataset.MongoDbAtlasCollection": MongoDbAtlasCollectionDataset,
    "Dataset.MongoDbV2Collection": MongoDbV2CollectionDataset,
    "Dataset.CosmosDbMongoDbApiCollection": CosmosDbMongoDbApiCollectionDataset,
    "Dataset.ODataResource": ODataResourceDataset,
    "Dataset.OracleTable": OracleTableDataset,
    "Dataset.AmazonRdsForOracleTable": AmazonRdsForOracleTableDataset,
    "Dataset.TeradataTable": TeradataTableDataset,
    "Dataset.AzureMySqlTable": AzureMySqlTableDataset,
    "Dataset.AmazonRedshiftTable": AmazonRedshiftTableDataset,
    "Dataset.Db2Table": Db2TableDataset,
    "Dataset.RelationalTable": RelationalTableDataset,
    "Dataset.InformixTable": InformixTableDataset,
    "Dataset.OdbcTable": OdbcTableDataset,
    "Dataset.MySqlTable": MySqlTableDataset,
    "Dataset.PostgreSqlTable": PostgreSqlTableDataset,
    "Dataset.MicrosoftAccessTable": MicrosoftAccessTableDataset,
    "Dataset.SalesforceObject": SalesforceObjectDataset,
    "Dataset.SalesforceServiceCloudObject": SalesforceServiceCloudObjectDataset,
    "Dataset.SybaseTable": SybaseTableDataset,
    "Dataset.SapBwCube": SapBwCubeDataset,
    "Dataset.SapCloudForCustomerResource": SapCloudForCustomerResourceDataset,
    "Dataset.SapEccResource": SapEccResourceDataset,
    "Dataset.SapHanaTable": SapHanaTableDataset,
    "Dataset.SapOpenHubTable": SapOpenHubTableDataset,
    "Dataset.SqlServerTable": SqlServerTableDataset,
    "Dataset.AmazonRdsForSqlServerTable": AmazonRdsForSqlServerTableDataset,
    "Dataset.RestResource": RestResourceDataset,
    "Dataset.SapTableResource": SapTableResourceDataset,
    "Dataset.SapOdpResource": SapOdpResourceDataset,
    "Dataset.WebTable": WebTableDataset,
    "Dataset.AzureSearchIndex": AzureSearchIndexDataset,
    "Dataset.HttpFile": HttpDataset,
    "Dataset.AmazonMWSObject": AmazonMWSObjectDataset,
    "Dataset.AzurePostgreSqlTable": AzurePostgreSqlTableDataset,
    "Dataset.ConcurObject": ConcurObjectDataset,
    "Dataset.CouchbaseTable": CouchbaseTableDataset,
    "Dataset.DrillTable": DrillTableDataset,
    "Dataset.EloquaObject": EloquaObjectDataset,
    "Dataset.GoogleBigQueryObject": GoogleBigQueryObjectDataset,
    "Dataset.GreenplumTable": GreenplumTableDataset,
    "Dataset.HBaseObject": HBaseObjectDataset,
    "Dataset.HiveObject": HiveObjectDataset,
    "Dataset.HubspotObject": HubspotObjectDataset,
    "Dataset.ImpalaObject": ImpalaObjectDataset,
    "Dataset.JiraObject": JiraObjectDataset,
    "Dataset.MagentoObject": MagentoObjectDataset,
    "Dataset.MariaDBTable": MariaDBTableDataset,
    "Dataset.AzureMariaDBTable": AzureMariaDBTableDataset,
    "Dataset.MarketoObject": MarketoObjectDataset,
    "Dataset.PaypalObject": PaypalObjectDataset,
    "Dataset.PhoenixObject": PhoenixObjectDataset,
    "Dataset.PrestoObject": PrestoObjectDataset,
    "Dataset.QuickBooksObject": QuickBooksObjectDataset,
    "Dataset.ServiceNowObject": ServiceNowObjectDataset,
    "Dataset.ShopifyObject": ShopifyObjectDataset,
    "Dataset.SparkObject": SparkObjectDataset,
    "Dataset.SquareObject": SquareObjectDataset,
    "Dataset.XeroObject": XeroObjectDataset,
    "Dataset.ZohoObject": ZohoObjectDataset,
    "Dataset.NetezzaTable": NetezzaTableDataset,
    "Dataset.VerticaTable": VerticaTableDataset,
    "Dataset.SalesforceMarketingCloudObject": SalesforceMarketingCloudObjectDataset,
    "Dataset.ResponsysObject": ResponsysObjectDataset,
    "Dataset.DynamicsAXResource": DynamicsAXResourceDataset,
    "Dataset.OracleServiceCloudObject": OracleServiceCloudObjectDataset,
    "Dataset.AzureDataExplorerTable": AzureDataExplorerTableDataset,
    "Dataset.GoogleAdWordsObject": GoogleAdWordsObjectDataset,
    "Dataset.SnowflakeTable": SnowflakeDataset,
    "Dataset.SharePointOnlineListResource": SharePointOnlineListResourceDataset,
    "Dataset.AzureDatabricksDeltaLakeDataset": AzureDatabricksDeltaLakeDataset,
    "Dataset.LakeHouseTable": LakeHouseTableDataset,
    "Activity.Container": ControlActivity,
    "Activity.Execution": ExecutionActivity,
    "Activity.ExecuteWranglingDataflow": ExecuteWranglingDataflowActivity,
    "Trigger.MultiplePipelineTrigger": MultiplePipelineTrigger,
    "Trigger.TumblingWindowTrigger": TumblingWindowTrigger,
    "Trigger.RerunTumblingWindowTrigger": RerunTumblingWindowTrigger,
    "Trigger.ChainingTrigger": ChainingTrigger,
    "DataFlow.MappingDataFlow": MappingDataFlow,
    "DataFlow.Flowlet": Flowlet,
    "DataFlow.WranglingDataFlow": WranglingDataFlow,
    "Credential.ManagedIdentity": ManagedIdentityCredential,
    "Credential.ServicePrincipal": ServicePrincipalCredential,
    "SecretBase.SecureString": SecureString,
    "SecretBase.AzureKeyVaultSecret": AzureKeyVaultSecretReference,
    "DatasetLocation.AzureBlobStorageLocation": AzureBlobStorageLocation,
    "DatasetLocation.AzureBlobFSLocation": AzureBlobFSLocation,
    "DatasetLocation.AzureDataLakeStoreLocation": AzureDataLakeStoreLocation,
    "DatasetLocation.AmazonS3Location": AmazonS3Location,
    "DatasetLocation.FileServerLocation": FileServerLocation,
    "DatasetLocation.AzureFileStorageLocation": AzureFileStorageLocation,
    "DatasetLocation.AmazonS3CompatibleLocation": AmazonS3CompatibleLocation,
    "DatasetLocation.OracleCloudStorageLocation": OracleCloudStorageLocation,
    "DatasetLocation.GoogleCloudStorageLocation": GoogleCloudStorageLocation,
    "DatasetLocation.FtpServerLocation": FtpServerLocation,
    "DatasetLocation.SftpLocation": SftpLocation,
    "DatasetLocation.HttpServerLocation": HttpServerLocation,
    "DatasetLocation.HdfsLocation": HdfsLocation,
    "DatasetLocation.LakeHouseLocation": LakeHouseLocation,
    "DatasetStorageFormat.TextFormat": TextFormat,
    "DatasetStorageFormat.JsonFormat": JsonFormat,
    "DatasetStorageFormat.AvroFormat": AvroFormat,
    "DatasetStorageFormat.OrcFormat": OrcFormat,
    "DatasetStorageFormat.ParquetFormat": ParquetFormat,
    "CustomSetupBase.CmdkeySetup": CmdkeySetup,
    "CustomSetupBase.EnvironmentVariableSetup": EnvironmentVariableSetup,
    "CustomSetupBase.ComponentSetup": ComponentSetup,
    "CustomSetupBase.AzPowerShellSetup": AzPowerShellSetup,
    "LinkedIntegrationRuntimeType.Key": LinkedIntegrationRuntimeKeyAuthorization,
    "LinkedIntegrationRuntimeType.RBAC": LinkedIntegrationRuntimeRbacAuthorization,
    "WebLinkedServiceTypeProperties.Anonymous": WebAnonymousAuthentication,
    "WebLinkedServiceTypeProperties.Basic": WebBasicAuthentication,
    "WebLinkedServiceTypeProperties.ClientCertificate": WebClientCertificateAuthentication,
    "StoreReadSettings.AzureBlobStorageReadSettings": AzureBlobStorageReadSettings,
    "StoreReadSettings.AzureBlobFSReadSettings": AzureBlobFSReadSettings,
    "StoreReadSettings.AzureDataLakeStoreReadSettings": AzureDataLakeStoreReadSettings,
    "StoreReadSettings.AmazonS3ReadSettings": AmazonS3ReadSettings,
    "StoreReadSettings.FileServerReadSettings": FileServerReadSettings,
    "StoreReadSettings.AzureFileStorageReadSettings": AzureFileStorageReadSettings,
    "StoreReadSettings.AmazonS3CompatibleReadSettings": AmazonS3CompatibleReadSettings,
    "StoreReadSettings.OracleCloudStorageReadSettings": OracleCloudStorageReadSettings,
    "StoreReadSettings.GoogleCloudStorageReadSettings": GoogleCloudStorageReadSettings,
    "StoreReadSettings.FtpReadSettings": FtpReadSettings,
    "StoreReadSettings.SftpReadSettings": SftpReadSettings,
    "StoreReadSettings.HttpReadSettings": HttpReadSettings,
    "StoreReadSettings.HdfsReadSettings": HdfsReadSettings,
    "StoreReadSettings.LakeHouseReadSettings": LakeHouseReadSettings,
    "StoreWriteSettings.SftpWriteSettings": SftpWriteSettings,
    "StoreWriteSettings.AzureBlobStorageWriteSettings": AzureBlobStorageWriteSettings,
    "StoreWriteSettings.AzureBlobFSWriteSettings": AzureBlobFSWriteSettings,
    "StoreWriteSettings.AzureDataLakeStoreWriteSettings": AzureDataLakeStoreWriteSettings,
    "StoreWriteSettings.FileServerWriteSettings": FileServerWriteSettings,
    "StoreWriteSettings.AzureFileStorageWriteSettings": AzureFileStorageWriteSettings,
    "StoreWriteSettings.LakeHouseWriteSettings": LakeHouseWriteSettings,
    "FormatReadSettings.ParquetReadSettings": ParquetReadSettings,
    "FormatReadSettings.DelimitedTextReadSettings": DelimitedTextReadSettings,
    "FormatReadSettings.JsonReadSettings": JsonReadSettings,
    "FormatReadSettings.XmlReadSettings": XmlReadSettings,
    "FormatReadSettings.BinaryReadSettings": BinaryReadSettings,
    "CompressionReadSettings.ZipDeflateReadSettings": ZipDeflateReadSettings,
    "CompressionReadSettings.TarReadSettings": TarReadSettings,
    "CompressionReadSettings.TarGZipReadSettings": TarGZipReadSettings,
    "FormatWriteSettings.AvroWriteSettings": AvroWriteSettings,
    "FormatWriteSettings.OrcWriteSettings": OrcWriteSettings,
    "FormatWriteSettings.ParquetWriteSettings": ParquetWriteSettings,
    "FormatWriteSettings.DelimitedTextWriteSettings": DelimitedTextWriteSettings,
    "FormatWriteSettings.JsonWriteSettings": JsonWriteSettings,
    "CopySource.AvroSource": AvroSource,
    "CopySource.ExcelSource": ExcelSource,
    "CopySource.ParquetSource": ParquetSource,
    "CopySource.DelimitedTextSource": DelimitedTextSource,
    "CopySource.JsonSource": JsonSource,
    "CopySource.XmlSource": XmlSource,
    "CopySource.OrcSource": OrcSource,
    "CopySource.BinarySource": BinarySource,
    "CopySource.TabularSource": TabularSource,
    "CopySource.BlobSource": BlobSource,
    "CopySource.DocumentDbCollectionSource": DocumentDbCollectionSource,
    "CopySource.CosmosDbSqlApiSource": CosmosDbSqlApiSource,
    "CopySource.DynamicsSource": DynamicsSource,
    "CopySource.DynamicsCrmSource": DynamicsCrmSource,
    "CopySource.CommonDataServiceForAppsSource": CommonDataServiceForAppsSource,
    "CopySource.RelationalSource": RelationalSource,
    "CopySource.MicrosoftAccessSource": MicrosoftAccessSource,
    "CopySource.ODataSource": ODataSource,
    "CopySource.SalesforceServiceCloudSource": SalesforceServiceCloudSource,
    "CopySource.RestSource": RestSource,
    "CopySource.FileSystemSource": FileSystemSource,
    "CopySource.HdfsSource": HdfsSource,
    "CopySource.AzureDataExplorerSource": AzureDataExplorerSource,
    "CopySource.OracleSource": OracleSource,
    "CopySource.AmazonRdsForOracleSource": AmazonRdsForOracleSource,
    "CopySource.WebSource": WebSource,
    "CopySource.MongoDbSource": MongoDbSource,
    "CopySource.MongoDbAtlasSource": MongoDbAtlasSource,
    "CopySource.MongoDbV2Source": MongoDbV2Source,
    "CopySource.CosmosDbMongoDbApiSource": CosmosDbMongoDbApiSource,
    "CopySource.Office365Source": Office365Source,
    "CopySource.AzureDataLakeStoreSource": AzureDataLakeStoreSource,
    "CopySource.AzureBlobFSSource": AzureBlobFSSource,
    "CopySource.HttpSource": HttpSource,
    "CopySource.LakeHouseTableSource": LakeHouseTableSource,
    "CopySource.SnowflakeSource": SnowflakeSource,
    "CopySource.AzureDatabricksDeltaLakeSource": AzureDatabricksDeltaLakeSource,
    "CopySource.SharePointOnlineListSource": SharePointOnlineListSource,
    "CopySink.DelimitedTextSink": DelimitedTextSink,
    "CopySink.JsonSink": JsonSink,
    "CopySink.OrcSink": OrcSink,
    "CopySink.RestSink": RestSink,
    "CopySink.AzurePostgreSqlSink": AzurePostgreSqlSink,
    "CopySink.AzureMySqlSink": AzureMySqlSink,
    "CopySink.AzureDatabricksDeltaLakeSink": AzureDatabricksDeltaLakeSink,
    "CopySink.SapCloudForCustomerSink": SapCloudForCustomerSink,
    "CopySink.AzureQueueSink": AzureQueueSink,
    "CopySink.AzureTableSink": AzureTableSink,
    "CopySink.AvroSink": AvroSink,
    "CopySink.ParquetSink": ParquetSink,
    "CopySink.BinarySink": BinarySink,
    "CopySink.BlobSink": BlobSink,
    "CopySink.FileSystemSink": FileSystemSink,
    "CopySink.DocumentDbCollectionSink": DocumentDbCollectionSink,
    "CopySink.CosmosDbSqlApiSink": CosmosDbSqlApiSink,
    "CopySink.SqlSink": SqlSink,
    "CopySink.SqlServerSink": SqlServerSink,
    "CopySink.AzureSqlSink": AzureSqlSink,
    "CopySink.SqlMISink": SqlMISink,
    "CopySink.SqlDWSink": SqlDWSink,
    "CopySink.SnowflakeSink": SnowflakeSink,
    "CopySink.OracleSink": OracleSink,
    "CopySink.AzureDataLakeStoreSink": AzureDataLakeStoreSink,
    "CopySink.AzureBlobFSSink": AzureBlobFSSink,
    "CopySink.AzureSearchIndexSink": AzureSearchIndexSink,
    "CopySink.OdbcSink": OdbcSink,
    "CopySink.InformixSink": InformixSink,
    "CopySink.MicrosoftAccessSink": MicrosoftAccessSink,
    "CopySink.DynamicsSink": DynamicsSink,
    "CopySink.DynamicsCrmSink": DynamicsCrmSink,
    "CopySink.CommonDataServiceForAppsSink": CommonDataServiceForAppsSink,
    "CopySink.AzureDataExplorerSink": AzureDataExplorerSink,
    "CopySink.SalesforceSink": SalesforceSink,
    "CopySink.SalesforceServiceCloudSink": SalesforceServiceCloudSink,
    "CopySink.MongoDbAtlasSink": MongoDbAtlasSink,
    "CopySink.MongoDbV2Sink": MongoDbV2Sink,
    "CopySink.CosmosDbMongoDbApiSink": CosmosDbMongoDbApiSink,
    "CopySink.LakeHouseTableSink": LakeHouseTableSink,
    "ExportSettings.SnowflakeExportCopyCommand": SnowflakeExportCopyCommand,
    "ExportSettings.AzureDatabricksDeltaLakeExportCommand": AzureDatabricksDeltaLakeExportCommand,
    "ImportSettings.AzureDatabricksDeltaLakeImportCommand": AzureDatabricksDeltaLakeImportCommand,
    "ImportSettings.SnowflakeImportCopyCommand": SnowflakeImportCopyCommand,
    "CopyTranslator.TabularTranslator": TabularTranslator,
    "DependencyReference.TriggerDependencyReference": TriggerDependencyReference,
    "DependencyReference.SelfDependencyTumblingWindowTriggerReference": SelfDependencyTumblingWindowTriggerReference,
    "ControlActivity.ExecutePipeline": ExecutePipelineActivity,
    "ControlActivity.IfCondition": IfConditionActivity,
    "ControlActivity.Switch": SwitchActivity,
    "ControlActivity.ForEach": ForEachActivity,
    "ControlActivity.Wait": WaitActivity,
    "ControlActivity.Fail": FailActivity,
    "ControlActivity.Until": UntilActivity,
    "ControlActivity.Validation": ValidationActivity,
    "ControlActivity.Filter": FilterActivity,
    "ControlActivity.SetVariable": SetVariableActivity,
    "ControlActivity.AppendVariable": AppendVariableActivity,
    "ControlActivity.WebHook": WebHookActivity,
    "ExecutionActivity.Copy": CopyActivity,
    "ExecutionActivity.HDInsightHive": HDInsightHiveActivity,
    "ExecutionActivity.HDInsightPig": HDInsightPigActivity,
    "ExecutionActivity.HDInsightMapReduce": HDInsightMapReduceActivity,
    "ExecutionActivity.HDInsightStreaming": HDInsightStreamingActivity,
    "ExecutionActivity.HDInsightSpark": HDInsightSparkActivity,
    "ExecutionActivity.ExecuteSSISPackage": ExecuteSsisPackageActivity,
    "ExecutionActivity.Custom": CustomActivity,
    "ExecutionActivity.SqlServerStoredProcedure": SqlServerStoredProcedureActivity,
    "ExecutionActivity.Delete": DeleteActivity,
    "ExecutionActivity.AzureDataExplorerCommand": AzureDataExplorerCommandActivity,
    "ExecutionActivity.Lookup": LookupActivity,
    "ExecutionActivity.WebActivity": WebActivity,
    "ExecutionActivity.GetMetadata": GetMetadataActivity,
    "ExecutionActivity.AzureMLBatchExecution": AzureMLBatchExecutionActivity,
    "ExecutionActivity.AzureMLUpdateResource": AzureMLUpdateResourceActivity,
    "ExecutionActivity.AzureMLExecutePipeline": AzureMLExecutePipelineActivity,
    "ExecutionActivity.DataLakeAnalyticsU-SQL": DataLakeAnalyticsUsqlActivity,
    "ExecutionActivity.DatabricksNotebook": DatabricksNotebookActivity,
    "ExecutionActivity.DatabricksSparkJar": DatabricksSparkJarActivity,
    "ExecutionActivity.DatabricksSparkPython": DatabricksSparkPythonActivity,
    "ExecutionActivity.AzureFunctionActivity": AzureFunctionActivity,
    "ExecutionActivity.ExecuteDataFlow": ExecuteDataFlowActivity,
    "ExecutionActivity.Script": ScriptActivity,
    "ExecutionActivity.SynapseNotebook": SynapseNotebookActivity,
    "ExecutionActivity.SparkJob": SynapseSparkJobDefinitionActivity,
    "MultiplePipelineTrigger.ScheduleTrigger": ScheduleTrigger,
    "MultiplePipelineTrigger.BlobTrigger": BlobTrigger,
    "MultiplePipelineTrigger.BlobEventsTrigger": BlobEventsTrigger,
    "MultiplePipelineTrigger.CustomEventsTrigger": CustomEventsTrigger,
    "TabularSource.AzureTableSource": AzureTableSource,
    "TabularSource.InformixSource": InformixSource,
    "TabularSource.Db2Source": Db2Source,
    "TabularSource.OdbcSource": OdbcSource,
    "TabularSource.MySqlSource": MySqlSource,
    "TabularSource.PostgreSqlSource": PostgreSqlSource,
    "TabularSource.SybaseSource": SybaseSource,
    "TabularSource.SapBwSource": SapBwSource,
    "TabularSource.SalesforceSource": SalesforceSource,
    "TabularSource.SapCloudForCustomerSource": SapCloudForCustomerSource,
    "TabularSource.SapEccSource": SapEccSource,
    "TabularSource.SapHanaSource": SapHanaSource,
    "TabularSource.SapOpenHubSource": SapOpenHubSource,
    "TabularSource.SapOdpSource": SapOdpSource,
    "TabularSource.SapTableSource": SapTableSource,
    "TabularSource.SqlSource": SqlSource,
    "TabularSource.SqlServerSource": SqlServerSource,
    "TabularSource.AmazonRdsForSqlServerSource": AmazonRdsForSqlServerSource,
    "TabularSource.AzureSqlSource": AzureSqlSource,
    "TabularSource.SqlMISource": SqlMISource,
    "TabularSource.SqlDWSource": SqlDWSource,
    "TabularSource.AzureMySqlSource": AzureMySqlSource,
    "TabularSource.TeradataSource": TeradataSource,
    "TabularSource.CassandraSource": CassandraSource,
    "TabularSource.AmazonMWSSource": AmazonMWSSource,
    "TabularSource.AzurePostgreSqlSource": AzurePostgreSqlSource,
    "TabularSource.ConcurSource": ConcurSource,
    "TabularSource.CouchbaseSource": CouchbaseSource,
    "TabularSource.DrillSource": DrillSource,
    "TabularSource.EloquaSource": EloquaSource,
    "TabularSource.GoogleBigQuerySource": GoogleBigQuerySource,
    "TabularSource.GreenplumSource": GreenplumSource,
    "TabularSource.HBaseSource": HBaseSource,
    "TabularSource.HiveSource": HiveSource,
    "TabularSource.HubspotSource": HubspotSource,
    "TabularSource.ImpalaSource": ImpalaSource,
    "TabularSource.JiraSource": JiraSource,
    "TabularSource.MagentoSource": MagentoSource,
    "TabularSource.MariaDBSource": MariaDBSource,
    "TabularSource.AzureMariaDBSource": AzureMariaDBSource,
    "TabularSource.MarketoSource": MarketoSource,
    "TabularSource.PaypalSource": PaypalSource,
    "TabularSource.PhoenixSource": PhoenixSource,
    "TabularSource.PrestoSource": PrestoSource,
    "TabularSource.QuickBooksSource": QuickBooksSource,
    "TabularSource.ServiceNowSource": ServiceNowSource,
    "TabularSource.ShopifySource": ShopifySource,
    "TabularSource.SparkSource": SparkSource,
    "TabularSource.SquareSource": SquareSource,
    "TabularSource.XeroSource": XeroSource,
    "TabularSource.ZohoSource": ZohoSource,
    "TabularSource.NetezzaSource": NetezzaSource,
    "TabularSource.VerticaSource": VerticaSource,
    "TabularSource.SalesforceMarketingCloudSource": SalesforceMarketingCloudSource,
    "TabularSource.ResponsysSource": ResponsysSource,
    "TabularSource.DynamicsAXSource": DynamicsAXSource,
    "TabularSource.OracleServiceCloudSource": OracleServiceCloudSource,
    "TabularSource.GoogleAdWordsSource": GoogleAdWordsSource,
    "TabularSource.AmazonRedshiftSource": AmazonRedshiftSource,
    "TriggerDependencyReference.TumblingWindowTriggerDependencyReference": TumblingWindowTriggerDependencyReference
};
//# sourceMappingURL=mappers.js.map