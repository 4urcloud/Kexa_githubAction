/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncValues, __awaiter } from "tslib";
import { env, Recorder, isPlaybackMode, } from "@azure-tools/test-recorder";
import { createTestCredential } from "@azure-tools/test-credential";
import { assert } from "chai";
import { DataFactoryManagementClient } from "../src/dataFactoryManagementClient";
const replaceableVariables = {
    AZURE_CLIENT_ID: "azure_client_id",
    AZURE_CLIENT_SECRET: "azure_client_secret",
    AZURE_TENANT_ID: "88888888-8888-8888-8888-888888888888",
    SUBSCRIPTION_ID: "azure_subscription_id"
};
const recorderOptions = {
    envSetupForPlayback: replaceableVariables
};
export const testPollingOptions = {
    updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};
describe("Datafactory test", () => {
    let recorder;
    let subscriptionId;
    let client;
    let location;
    let resourceGroup;
    let factoryName;
    let factory;
    let sessionId;
    let pipelineName;
    let datasetName;
    let linkedServiceName;
    let dataFlowName;
    beforeEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            recorder = new Recorder(this.currentTest);
            yield recorder.start(recorderOptions);
            subscriptionId = env.SUBSCRIPTION_ID || '';
            // This is an example of how the environment variables are used
            const credential = createTestCredential();
            client = new DataFactoryManagementClient(credential, subscriptionId, recorder.configureClientOptions({}));
            location = "eastus";
            resourceGroup = "myjstest";
            factoryName = "examplefactorytest";
            pipelineName = "examplePipeline";
            datasetName = "exampleDataset";
            linkedServiceName = "exampleLinkedService";
            dataFlowName = "exampleDataFlow";
        });
    });
    afterEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            yield recorder.stop();
        });
    });
    it("datafactory create test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            factory = { location: location };
            const res = yield client.factories.createOrUpdate(resourceGroup, factoryName, factory);
            assert.equal(res.name, factoryName);
        });
    });
    it("dataFlowDebugSession create test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            factory = { location: location };
            const res = yield client.dataFlowDebugSession.beginCreateAndWait(resourceGroup, factoryName, {
                integrationRuntime: {
                    name: "ir1",
                    properties: {
                        type: "Managed",
                        computeProperties: {
                            dataFlowProperties: {
                                computeType: "General",
                                coreCount: 48,
                                timeToLive: 10
                            },
                            location: "AutoResolve"
                        }
                    }
                },
                timeToLive: 60
            }, testPollingOptions);
            return sessionId = String(res.sessionId);
        });
    });
    it("linkedService create test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.linkedServices.createOrUpdate(resourceGroup, factoryName, linkedServiceName, {
                properties: {
                    type: "AzureStorage",
                    connectionString: {
                        type: "SecureString",
                        value: "DefaultEndpointsProtocol=https;AccountName=examplestorageaccount;AccountKey=<storage key>"
                    }
                }
            });
            assert.equal(res.name, linkedServiceName);
        });
    });
    it("dataset create test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.datasets.createOrUpdate(resourceGroup, factoryName, datasetName, {
                properties: {
                    type: "AzureBlob",
                    format: { type: "TextFormat" },
                    fileName: { type: "Expression", value: "@dataset().MyFileName" },
                    folderPath: { type: "Expression", value: "@dataset().MyFolderPath" },
                    linkedServiceName: {
                        type: "LinkedServiceReference",
                        referenceName: "exampleLinkedService"
                    },
                    parameters: {
                        myFileName: { type: "String" },
                        myFolderPath: { type: "String" }
                    }
                }
            });
            assert.equal(res.name, datasetName);
        });
    });
    it("dataflow create test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res1 = yield client.datasets.createOrUpdate(resourceGroup, factoryName, "CurrencyDatasetUSD", {
                properties: {
                    type: "AzureBlob",
                    format: { type: "TextFormat" },
                    fileName: { type: "Expression", value: "@dataset().MyFileName" },
                    folderPath: { type: "Expression", value: "@dataset().MyFolderPath" },
                    linkedServiceName: {
                        type: "LinkedServiceReference",
                        referenceName: "exampleLinkedService"
                    },
                    parameters: {
                        myFileName: { type: "String" },
                        myFolderPath: { type: "String" }
                    }
                }
            });
            const res2 = yield client.datasets.createOrUpdate(resourceGroup, factoryName, "CurrencyDatasetCAD", {
                properties: {
                    type: "AzureBlob",
                    format: { type: "TextFormat" },
                    fileName: { type: "Expression", value: "@dataset().MyFileName" },
                    folderPath: { type: "Expression", value: "@dataset().MyFolderPath" },
                    linkedServiceName: {
                        type: "LinkedServiceReference",
                        referenceName: "exampleLinkedService"
                    },
                    parameters: {
                        myFileName: { type: "String" },
                        myFolderPath: { type: "String" }
                    }
                }
            });
            const res = yield client.dataFlows.createOrUpdate(resourceGroup, factoryName, dataFlowName, {
                properties: {
                    type: "MappingDataFlow",
                    description: "Sample demo data flow to convert currencies showing usage of union, derive and conditional split transformation.",
                    scriptLines: [
                        "source(output(",
                        "PreviousConversionRate as double,",
                        "Country as string,",
                        "DateTime1 as string,",
                        "CurrentConversionRate as double",
                        "),",
                        "allowSchemaDrift: false,",
                        "validateSchema: false) ~> USDCurrency",
                        "source(output(",
                        "PreviousConversionRate as double,",
                        "Country as string,",
                        "DateTime1 as string,",
                        "CurrentConversionRate as double",
                        "),",
                        "allowSchemaDrift: true,",
                        "validateSchema: false) ~> CADSource",
                        "USDCurrency, CADSource union(byName: true)~> Union",
                        "Union derive(NewCurrencyRate = round(CurrentConversionRate*1.25)) ~> NewCurrencyColumn",
                        "NewCurrencyColumn split(Country == 'USD',",
                        "Country == 'CAD',disjoint: false) ~> ConditionalSplit1@(USD, CAD)",
                        "ConditionalSplit1@USD sink(saveMode:'overwrite' ) ~> USDSink",
                        "ConditionalSplit1@CAD sink(saveMode:'overwrite' ) ~> CADSink"
                    ],
                    sources: [
                        {
                            name: "USDCurrency",
                            dataset: {
                                type: "DatasetReference",
                                referenceName: "CurrencyDatasetUSD"
                            }
                        },
                        {
                            name: "CADSource",
                            dataset: {
                                type: "DatasetReference",
                                referenceName: "CurrencyDatasetCAD"
                            }
                        }
                    ]
                }
            });
            assert.equal(res.name, dataFlowName);
        });
    });
    it("pipeline create test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.pipelines.createOrUpdate(resourceGroup, factoryName, pipelineName, {
                description: "Example description",
                activities: [
                    {
                        name: "ExampleCopyActivity1",
                        type: "ExecuteWranglingDataflow",
                        dataFlow: {
                            referenceName: dataFlowName,
                            type: "DataFlowReference"
                        }
                    }
                ],
                parameters: { outputBlobNameList: { type: "Array" } },
                policy: { elapsedTimeMetric: { duration: "0.00:10:00" } }
            });
            assert.equal(res.name, pipelineName);
        });
    });
    it("datafactory get test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.factories.get(resourceGroup, factoryName);
            assert.equal(res.name, factoryName);
        });
    });
    it("datafactory list test", function () {
        var _a, e_1, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const resArray = new Array();
            try {
                for (var _d = true, _e = __asyncValues(client.factories.listByResourceGroup(resourceGroup)), _f; _f = yield _e.next(), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    let item = _c;
                    resArray.push(item);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
                }
                finally { if (e_1) throw e_1.error; }
            }
            assert.equal(resArray.length, 1);
        });
    });
    it("pipeline list test", function () {
        var _a, e_2, _b, _c;
        var _d;
        return __awaiter(this, void 0, void 0, function* () {
            const resArray = new Array();
            try {
                for (var _e = true, _f = __asyncValues(client.pipelines.listByFactory(resourceGroup, factoryName)), _g; _g = yield _f.next(), _a = _g.done, !_a; _e = true) {
                    _c = _g.value;
                    _e = false;
                    let item = _c;
                    resArray.push(item);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_e && !_a && (_b = _f.return)) yield _b.call(_f);
                }
                finally { if (e_2) throw e_2.error; }
            }
            assert.equal(resArray.length, 1);
            assert.equal((_d = resArray[0].activities) === null || _d === void 0 ? void 0 : _d.length, 1);
            assert.equal(resArray[0].activities[0].type, "ExecuteWranglingDataflow");
            assert.equal(resArray[0].activities[0].dataFlow.type, "DataFlowReference");
        });
    });
    it("dataFlowDebugSession delete test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield client.dataFlowDebugSession.delete(resourceGroup, factoryName, {
                sessionId
            });
        });
    });
    it("pipeline delete test", function () {
        var _a, e_3, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const resArray = new Array();
            const res = yield client.pipelines.delete(resourceGroup, factoryName, pipelineName);
            try {
                for (var _d = true, _e = __asyncValues(client.pipelines.listByFactory(resourceGroup, factoryName)), _f; _f = yield _e.next(), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    let item = _c;
                    resArray.push(item);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
                }
                finally { if (e_3) throw e_3.error; }
            }
            assert.equal(resArray.length, 0);
        });
    });
    it("dataflow delete test", function () {
        var _a, e_4, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const resArray = new Array();
            const res = yield client.dataFlows.delete(resourceGroup, factoryName, dataFlowName);
            try {
                for (var _d = true, _e = __asyncValues(client.dataFlows.listByFactory(resourceGroup, factoryName)), _f; _f = yield _e.next(), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    let item = _c;
                    resArray.push(item);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
                }
                finally { if (e_4) throw e_4.error; }
            }
            assert.equal(resArray.length, 0);
        });
    });
    it("datasets delete test", function () {
        var _a, e_5, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const resArray = new Array();
            const res = yield client.datasets.delete(resourceGroup, factoryName, datasetName);
            const res1 = yield client.datasets.delete(resourceGroup, factoryName, "CurrencyDatasetUSD");
            const res2 = yield client.datasets.delete(resourceGroup, factoryName, "CurrencyDatasetCAD");
            try {
                for (var _d = true, _e = __asyncValues(client.datasets.listByFactory(resourceGroup, factoryName)), _f; _f = yield _e.next(), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    let item = _c;
                    resArray.push(item);
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
                }
                finally { if (e_5) throw e_5.error; }
            }
            assert.equal(resArray.length, 0);
        });
    });
    it("datafactory delete test", function () {
        var _a, e_6, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const resArray = new Array();
            const res = yield client.factories.delete(resourceGroup, factoryName);
            try {
                for (var _d = true, _e = __asyncValues(client.factories.listByResourceGroup(resourceGroup)), _f; _f = yield _e.next(), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    let item = _c;
                    resArray.push(item);
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
                }
                finally { if (e_6) throw e_6.error; }
            }
            assert.equal(resArray.length, 0);
        });
    });
});
//# sourceMappingURL=datafactory_examples.spec.js.map