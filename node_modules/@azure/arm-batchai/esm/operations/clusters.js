/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/clustersMappers";
import * as Parameters from "../models/parameters";
/** Class representing a Clusters. */
var Clusters = /** @class */ (function () {
    /**
     * Create a Clusters.
     * @param {BatchAIManagementClientContext} client Reference to the service client.
     */
    function Clusters(client) {
        this.client = client;
    }
    /**
     * Creates a Cluster in the given Workspace.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param workspaceName The name of the workspace. Workspace names can only contain a combination
     * of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1
     * through 64 characters long.
     * @param clusterName The name of the cluster within the specified resource group. Cluster names
     * can only contain a combination of alphanumeric characters along with dash (-) and underscore
     * (_). The name must be from 1 through 64 characters long.
     * @param parameters The parameters to provide for the Cluster creation.
     * @param [options] The optional parameters
     * @returns Promise<Models.ClustersCreateResponse>
     */
    Clusters.prototype.create = function (resourceGroupName, workspaceName, clusterName, parameters, options) {
        return this.beginCreate(resourceGroupName, workspaceName, clusterName, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    Clusters.prototype.update = function (resourceGroupName, workspaceName, clusterName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            workspaceName: workspaceName,
            clusterName: clusterName,
            options: options
        }, updateOperationSpec, callback);
    };
    /**
     * Deletes a Cluster.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param workspaceName The name of the workspace. Workspace names can only contain a combination
     * of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1
     * through 64 characters long.
     * @param clusterName The name of the cluster within the specified resource group. Cluster names
     * can only contain a combination of alphanumeric characters along with dash (-) and underscore
     * (_). The name must be from 1 through 64 characters long.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    Clusters.prototype.deleteMethod = function (resourceGroupName, workspaceName, clusterName, options) {
        return this.beginDeleteMethod(resourceGroupName, workspaceName, clusterName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    Clusters.prototype.get = function (resourceGroupName, workspaceName, clusterName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            workspaceName: workspaceName,
            clusterName: clusterName,
            options: options
        }, getOperationSpec, callback);
    };
    Clusters.prototype.listRemoteLoginInformation = function (resourceGroupName, workspaceName, clusterName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            workspaceName: workspaceName,
            clusterName: clusterName,
            options: options
        }, listRemoteLoginInformationOperationSpec, callback);
    };
    Clusters.prototype.listByWorkspace = function (resourceGroupName, workspaceName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            workspaceName: workspaceName,
            options: options
        }, listByWorkspaceOperationSpec, callback);
    };
    /**
     * Creates a Cluster in the given Workspace.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param workspaceName The name of the workspace. Workspace names can only contain a combination
     * of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1
     * through 64 characters long.
     * @param clusterName The name of the cluster within the specified resource group. Cluster names
     * can only contain a combination of alphanumeric characters along with dash (-) and underscore
     * (_). The name must be from 1 through 64 characters long.
     * @param parameters The parameters to provide for the Cluster creation.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Clusters.prototype.beginCreate = function (resourceGroupName, workspaceName, clusterName, parameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            workspaceName: workspaceName,
            clusterName: clusterName,
            parameters: parameters,
            options: options
        }, beginCreateOperationSpec, options);
    };
    /**
     * Deletes a Cluster.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param workspaceName The name of the workspace. Workspace names can only contain a combination
     * of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1
     * through 64 characters long.
     * @param clusterName The name of the cluster within the specified resource group. Cluster names
     * can only contain a combination of alphanumeric characters along with dash (-) and underscore
     * (_). The name must be from 1 through 64 characters long.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Clusters.prototype.beginDeleteMethod = function (resourceGroupName, workspaceName, clusterName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            workspaceName: workspaceName,
            clusterName: clusterName,
            options: options
        }, beginDeleteMethodOperationSpec, options);
    };
    Clusters.prototype.listRemoteLoginInformationNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listRemoteLoginInformationNextOperationSpec, callback);
    };
    Clusters.prototype.listByWorkspaceNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listByWorkspaceNextOperationSpec, callback);
    };
    return Clusters;
}());
export { Clusters };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var updateOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}/clusters/{clusterName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.workspaceName,
        Parameters.clusterName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: {
            scaleSettings: [
                "options",
                "scaleSettings"
            ]
        },
        mapper: __assign(__assign({}, Mappers.ClusterUpdateParameters), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.Cluster
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}/clusters/{clusterName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.workspaceName,
        Parameters.clusterName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.Cluster
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listRemoteLoginInformationOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}/clusters/{clusterName}/listRemoteLoginInformation",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.workspaceName,
        Parameters.clusterName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.RemoteLoginInformationListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listByWorkspaceOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}/clusters",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.workspaceName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion,
        Parameters.maxResults6
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ClusterListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginCreateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}/clusters/{clusterName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.workspaceName,
        Parameters.clusterName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.ClusterCreateParameters), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.Cluster
        },
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginDeleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}/clusters/{clusterName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.workspaceName,
        Parameters.clusterName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listRemoteLoginInformationNextOperationSpec = {
    httpMethod: "POST",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.RemoteLoginInformationListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listByWorkspaceNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ClusterListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=clusters.js.map