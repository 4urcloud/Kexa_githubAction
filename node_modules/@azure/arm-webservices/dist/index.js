'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var coreClient = require('@azure/core-client');
var coreRestPipeline = require('@azure/core-rest-pipeline');
var coreLro = require('@azure/core-lro');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var coreClient__namespace = /*#__PURE__*/_interopNamespace(coreClient);
var coreRestPipeline__namespace = /*#__PURE__*/_interopNamespace(coreRestPipeline);

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const pageMap = new WeakMap();
/**
 * Given a result page from a pageable operation, returns a
 * continuation token that can be used to begin paging from
 * that point later.
 * @param page A result object from calling .byPage() on a paged operation.
 * @returns The continuation token that can be passed into byPage().
 */
function getContinuationToken(page) {
    var _a;
    if (typeof page !== "object" || page === null) {
        return undefined;
    }
    return (_a = pageMap.get(page)) === null || _a === void 0 ? void 0 : _a.continuationToken;
}
function setContinuationToken(page, continuationToken) {
    var _a;
    if (typeof page !== "object" || page === null || !continuationToken) {
        return;
    }
    const pageInfo = (_a = pageMap.get(page)) !== null && _a !== void 0 ? _a : {};
    pageInfo.continuationToken = continuationToken;
    pageMap.set(page, pageInfo);
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link ProvisioningState} that the service accepts. */
exports.KnownProvisioningState = void 0;
(function (KnownProvisioningState) {
    /** Unknown */
    KnownProvisioningState["Unknown"] = "Unknown";
    /** Provisioning */
    KnownProvisioningState["Provisioning"] = "Provisioning";
    /** Succeeded */
    KnownProvisioningState["Succeeded"] = "Succeeded";
    /** Failed */
    KnownProvisioningState["Failed"] = "Failed";
})(exports.KnownProvisioningState || (exports.KnownProvisioningState = {}));
/** Known values of {@link DiagnosticsLevel} that the service accepts. */
exports.KnownDiagnosticsLevel = void 0;
(function (KnownDiagnosticsLevel) {
    /** None */
    KnownDiagnosticsLevel["None"] = "None";
    /** Error */
    KnownDiagnosticsLevel["Error"] = "Error";
    /** All */
    KnownDiagnosticsLevel["All"] = "All";
})(exports.KnownDiagnosticsLevel || (exports.KnownDiagnosticsLevel = {}));
/** Known values of {@link ColumnType} that the service accepts. */
exports.KnownColumnType = void 0;
(function (KnownColumnType) {
    /** Boolean */
    KnownColumnType["Boolean"] = "Boolean";
    /** Integer */
    KnownColumnType["Integer"] = "Integer";
    /** Number */
    KnownColumnType["Number"] = "Number";
    /** String */
    KnownColumnType["String"] = "String";
})(exports.KnownColumnType || (exports.KnownColumnType = {}));
/** Known values of {@link ColumnFormat} that the service accepts. */
exports.KnownColumnFormat = void 0;
(function (KnownColumnFormat) {
    /** Byte */
    KnownColumnFormat["Byte"] = "Byte";
    /** Char */
    KnownColumnFormat["Char"] = "Char";
    /** Complex64 */
    KnownColumnFormat["Complex64"] = "Complex64";
    /** Complex128 */
    KnownColumnFormat["Complex128"] = "Complex128";
    /** DateTime */
    KnownColumnFormat["DateTime"] = "Date-time";
    /** DateTimeOffset */
    KnownColumnFormat["DateTimeOffset"] = "Date-timeOffset";
    /** Double */
    KnownColumnFormat["Double"] = "Double";
    /** Duration */
    KnownColumnFormat["Duration"] = "Duration";
    /** Float */
    KnownColumnFormat["Float"] = "Float";
    /** Int8 */
    KnownColumnFormat["Int8"] = "Int8";
    /** Int16 */
    KnownColumnFormat["Int16"] = "Int16";
    /** Int32 */
    KnownColumnFormat["Int32"] = "Int32";
    /** Int64 */
    KnownColumnFormat["Int64"] = "Int64";
    /** Uint8 */
    KnownColumnFormat["Uint8"] = "Uint8";
    /** Uint16 */
    KnownColumnFormat["Uint16"] = "Uint16";
    /** Uint32 */
    KnownColumnFormat["Uint32"] = "Uint32";
    /** Uint64 */
    KnownColumnFormat["Uint64"] = "Uint64";
})(exports.KnownColumnFormat || (exports.KnownColumnFormat = {}));
/** Known values of {@link AssetType} that the service accepts. */
exports.KnownAssetType = void 0;
(function (KnownAssetType) {
    /** Module */
    KnownAssetType["Module"] = "Module";
    /** Resource */
    KnownAssetType["Resource"] = "Resource";
})(exports.KnownAssetType || (exports.KnownAssetType = {}));
/** Known values of {@link InputPortType} that the service accepts. */
exports.KnownInputPortType = void 0;
(function (KnownInputPortType) {
    /** Dataset */
    KnownInputPortType["Dataset"] = "Dataset";
})(exports.KnownInputPortType || (exports.KnownInputPortType = {}));
/** Known values of {@link OutputPortType} that the service accepts. */
exports.KnownOutputPortType = void 0;
(function (KnownOutputPortType) {
    /** Dataset */
    KnownOutputPortType["Dataset"] = "Dataset";
})(exports.KnownOutputPortType || (exports.KnownOutputPortType = {}));
/** Known values of {@link ParameterType} that the service accepts. */
exports.KnownParameterType = void 0;
(function (KnownParameterType) {
    /** String */
    KnownParameterType["String"] = "String";
    /** Int */
    KnownParameterType["Int"] = "Int";
    /** Float */
    KnownParameterType["Float"] = "Float";
    /** Enumerated */
    KnownParameterType["Enumerated"] = "Enumerated";
    /** Script */
    KnownParameterType["Script"] = "Script";
    /** Mode */
    KnownParameterType["Mode"] = "Mode";
    /** Credential */
    KnownParameterType["Credential"] = "Credential";
    /** Boolean */
    KnownParameterType["Boolean"] = "Boolean";
    /** Double */
    KnownParameterType["Double"] = "Double";
    /** ColumnPicker */
    KnownParameterType["ColumnPicker"] = "ColumnPicker";
    /** ParameterRange */
    KnownParameterType["ParameterRange"] = "ParameterRange";
    /** DataGatewayName */
    KnownParameterType["DataGatewayName"] = "DataGatewayName";
})(exports.KnownParameterType || (exports.KnownParameterType = {}));

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const OperationEntityListResult = {
    type: {
        name: "Composite",
        className: "OperationEntityListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "OperationEntity"
                        }
                    }
                }
            }
        }
    }
};
const OperationEntity = {
    type: {
        name: "Composite",
        className: "OperationEntity",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            display: {
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "OperationDisplayInfo"
                }
            }
        }
    }
};
const OperationDisplayInfo = {
    type: {
        name: "Composite",
        className: "OperationDisplayInfo",
        modelProperties: {
            description: {
                serializedName: "description",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            provider: {
                serializedName: "provider",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "resource",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const WebServiceProperties = {
    type: {
        name: "Composite",
        className: "WebServiceProperties",
        uberParent: "WebServiceProperties",
        polymorphicDiscriminator: {
            serializedName: "packageType",
            clientName: "packageType"
        },
        modelProperties: {
            title: {
                serializedName: "title",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            createdOn: {
                serializedName: "createdOn",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            modifiedOn: {
                serializedName: "modifiedOn",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            keys: {
                serializedName: "keys",
                type: {
                    name: "Composite",
                    className: "WebServiceKeys"
                }
            },
            readOnly: {
                serializedName: "readOnly",
                type: {
                    name: "Boolean"
                }
            },
            swaggerLocation: {
                serializedName: "swaggerLocation",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            exposeSampleData: {
                serializedName: "exposeSampleData",
                type: {
                    name: "Boolean"
                }
            },
            realtimeConfiguration: {
                serializedName: "realtimeConfiguration",
                type: {
                    name: "Composite",
                    className: "RealtimeConfiguration"
                }
            },
            diagnostics: {
                serializedName: "diagnostics",
                type: {
                    name: "Composite",
                    className: "DiagnosticsConfiguration"
                }
            },
            storageAccount: {
                serializedName: "storageAccount",
                type: {
                    name: "Composite",
                    className: "StorageAccount"
                }
            },
            machineLearningWorkspace: {
                serializedName: "machineLearningWorkspace",
                type: {
                    name: "Composite",
                    className: "MachineLearningWorkspace"
                }
            },
            commitmentPlan: {
                serializedName: "commitmentPlan",
                type: {
                    name: "Composite",
                    className: "CommitmentPlan"
                }
            },
            input: {
                serializedName: "input",
                type: {
                    name: "Composite",
                    className: "ServiceInputOutputSpecification"
                }
            },
            output: {
                serializedName: "output",
                type: {
                    name: "Composite",
                    className: "ServiceInputOutputSpecification"
                }
            },
            exampleRequest: {
                serializedName: "exampleRequest",
                type: {
                    name: "Composite",
                    className: "ExampleRequest"
                }
            },
            assets: {
                serializedName: "assets",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "Composite", className: "AssetItem" } }
                }
            },
            parameters: {
                serializedName: "parameters",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Composite", className: "WebServiceParameter" }
                    }
                }
            },
            packageType: {
                defaultValue: "Graph",
                isConstant: true,
                serializedName: "packageType",
                type: {
                    name: "String"
                }
            },
            payloadsInBlobStorage: {
                serializedName: "payloadsInBlobStorage",
                type: {
                    name: "Boolean"
                }
            },
            payloadsLocation: {
                serializedName: "payloadsLocation",
                type: {
                    name: "Composite",
                    className: "BlobLocation"
                }
            }
        }
    }
};
const WebServiceKeys = {
    type: {
        name: "Composite",
        className: "WebServiceKeys",
        modelProperties: {
            primary: {
                serializedName: "primary",
                type: {
                    name: "String"
                }
            },
            secondary: {
                serializedName: "secondary",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RealtimeConfiguration = {
    type: {
        name: "Composite",
        className: "RealtimeConfiguration",
        modelProperties: {
            maxConcurrentCalls: {
                constraints: {
                    InclusiveMaximum: 200,
                    InclusiveMinimum: 4
                },
                serializedName: "maxConcurrentCalls",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const DiagnosticsConfiguration = {
    type: {
        name: "Composite",
        className: "DiagnosticsConfiguration",
        modelProperties: {
            level: {
                serializedName: "level",
                required: true,
                type: {
                    name: "String"
                }
            },
            expiry: {
                serializedName: "expiry",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const StorageAccount = {
    type: {
        name: "Composite",
        className: "StorageAccount",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            key: {
                serializedName: "key",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MachineLearningWorkspace = {
    type: {
        name: "Composite",
        className: "MachineLearningWorkspace",
        modelProperties: {
            id: {
                serializedName: "id",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CommitmentPlan = {
    type: {
        name: "Composite",
        className: "CommitmentPlan",
        modelProperties: {
            id: {
                serializedName: "id",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ServiceInputOutputSpecification = {
    type: {
        name: "Composite",
        className: "ServiceInputOutputSpecification",
        modelProperties: {
            title: {
                serializedName: "title",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            type: {
                defaultValue: "object",
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                required: true,
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Composite", className: "TableSpecification" }
                    }
                }
            }
        }
    }
};
const TableSpecification = {
    type: {
        name: "Composite",
        className: "TableSpecification",
        modelProperties: {
            title: {
                serializedName: "title",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            type: {
                defaultValue: "object",
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            format: {
                serializedName: "format",
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Composite", className: "ColumnSpecification" }
                    }
                }
            }
        }
    }
};
const ColumnSpecification = {
    type: {
        name: "Composite",
        className: "ColumnSpecification",
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            format: {
                serializedName: "format",
                type: {
                    name: "String"
                }
            },
            enum: {
                serializedName: "enum",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Dictionary",
                            value: { type: { name: "any" } }
                        }
                    }
                }
            },
            xMsIsnullable: {
                serializedName: "x-ms-isnullable",
                type: {
                    name: "Boolean"
                }
            },
            xMsIsordered: {
                serializedName: "x-ms-isordered",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const ExampleRequest = {
    type: {
        name: "Composite",
        className: "ExampleRequest",
        modelProperties: {
            inputs: {
                serializedName: "inputs",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Sequence",
                            element: {
                                type: {
                                    name: "Sequence",
                                    element: {
                                        type: {
                                            name: "Dictionary",
                                            value: { type: { name: "any" } }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            globalParameters: {
                serializedName: "globalParameters",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Dictionary", value: { type: { name: "any" } } }
                    }
                }
            }
        }
    }
};
const AssetItem = {
    type: {
        name: "Composite",
        className: "AssetItem",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            locationInfo: {
                serializedName: "locationInfo",
                type: {
                    name: "Composite",
                    className: "BlobLocation"
                }
            },
            inputPorts: {
                serializedName: "inputPorts",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "Composite", className: "InputPort" } }
                }
            },
            outputPorts: {
                serializedName: "outputPorts",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "Composite", className: "OutputPort" } }
                }
            },
            metadata: {
                serializedName: "metadata",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            parameters: {
                serializedName: "parameters",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ModuleAssetParameter"
                        }
                    }
                }
            }
        }
    }
};
const BlobLocation = {
    type: {
        name: "Composite",
        className: "BlobLocation",
        modelProperties: {
            uri: {
                serializedName: "uri",
                required: true,
                type: {
                    name: "String"
                }
            },
            credentials: {
                serializedName: "credentials",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const InputPort = {
    type: {
        name: "Composite",
        className: "InputPort",
        modelProperties: {
            type: {
                defaultValue: "Dataset",
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OutputPort = {
    type: {
        name: "Composite",
        className: "OutputPort",
        modelProperties: {
            type: {
                defaultValue: "Dataset",
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ModuleAssetParameter = {
    type: {
        name: "Composite",
        className: "ModuleAssetParameter",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            parameterType: {
                serializedName: "parameterType",
                type: {
                    name: "String"
                }
            },
            modeValuesInfo: {
                serializedName: "modeValuesInfo",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "Composite", className: "ModeValueInfo" } }
                }
            }
        }
    }
};
const ModeValueInfo = {
    type: {
        name: "Composite",
        className: "ModeValueInfo",
        modelProperties: {
            interfaceString: {
                serializedName: "interfaceString",
                type: {
                    name: "String"
                }
            },
            parameters: {
                serializedName: "parameters",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ModuleAssetParameter"
                        }
                    }
                }
            }
        }
    }
};
const WebServiceParameter = {
    type: {
        name: "Composite",
        className: "WebServiceParameter",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            },
            certificateThumbprint: {
                serializedName: "certificateThumbprint",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Resource = {
    type: {
        name: "Composite",
        className: "Resource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            location: {
                serializedName: "location",
                required: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }
        }
    }
};
const PatchedResource = {
    type: {
        name: "Composite",
        className: "PatchedResource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            location: {
                serializedName: "location",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }
        }
    }
};
const AsyncOperationStatus = {
    type: {
        name: "Composite",
        className: "AsyncOperationStatus",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            startTime: {
                serializedName: "startTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            endTime: {
                serializedName: "endTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            percentComplete: {
                serializedName: "percentComplete",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            errorInfo: {
                serializedName: "errorInfo",
                type: {
                    name: "Composite",
                    className: "AsyncOperationErrorInfo"
                }
            }
        }
    }
};
const AsyncOperationErrorInfo = {
    type: {
        name: "Composite",
        className: "AsyncOperationErrorInfo",
        modelProperties: {
            code: {
                serializedName: "code",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AsyncOperationErrorInfo"
                        }
                    }
                }
            }
        }
    }
};
const PaginatedWebServicesList = {
    type: {
        name: "Composite",
        className: "PaginatedWebServicesList",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "WebService"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const GraphPackage = {
    type: {
        name: "Composite",
        className: "GraphPackage",
        modelProperties: {
            nodes: {
                serializedName: "nodes",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "Composite", className: "GraphNode" } }
                }
            },
            edges: {
                serializedName: "edges",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "GraphEdge"
                        }
                    }
                }
            },
            graphParameters: {
                serializedName: "graphParameters",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "Composite", className: "GraphParameter" } }
                }
            }
        }
    }
};
const GraphNode = {
    type: {
        name: "Composite",
        className: "GraphNode",
        modelProperties: {
            assetId: {
                serializedName: "assetId",
                type: {
                    name: "String"
                }
            },
            inputId: {
                serializedName: "inputId",
                type: {
                    name: "String"
                }
            },
            outputId: {
                serializedName: "outputId",
                type: {
                    name: "String"
                }
            },
            parameters: {
                serializedName: "parameters",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Composite", className: "WebServiceParameter" }
                    }
                }
            }
        }
    }
};
const GraphEdge = {
    type: {
        name: "Composite",
        className: "GraphEdge",
        modelProperties: {
            sourceNodeId: {
                serializedName: "sourceNodeId",
                type: {
                    name: "String"
                }
            },
            sourcePortId: {
                serializedName: "sourcePortId",
                type: {
                    name: "String"
                }
            },
            targetNodeId: {
                serializedName: "targetNodeId",
                type: {
                    name: "String"
                }
            },
            targetPortId: {
                serializedName: "targetPortId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const GraphParameter = {
    type: {
        name: "Composite",
        className: "GraphParameter",
        modelProperties: {
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            links: {
                serializedName: "links",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "GraphParameterLink"
                        }
                    }
                }
            }
        }
    }
};
const GraphParameterLink = {
    type: {
        name: "Composite",
        className: "GraphParameterLink",
        modelProperties: {
            nodeId: {
                serializedName: "nodeId",
                required: true,
                type: {
                    name: "String"
                }
            },
            parameterKey: {
                serializedName: "parameterKey",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const WebServicePropertiesForGraph = {
    serializedName: "Graph",
    type: {
        name: "Composite",
        className: "WebServicePropertiesForGraph",
        uberParent: "WebServiceProperties",
        polymorphicDiscriminator: WebServiceProperties.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, WebServiceProperties.type.modelProperties), { package: {
                serializedName: "package",
                type: {
                    name: "Composite",
                    className: "GraphPackage"
                }
            } })
    }
};
const WebService = {
    type: {
        name: "Composite",
        className: "WebService",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "WebServiceProperties"
                }
            } })
    }
};
const PatchedWebService = {
    type: {
        name: "Composite",
        className: "PatchedWebService",
        modelProperties: Object.assign(Object.assign({}, PatchedResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "WebServiceProperties"
                }
            } })
    }
};
let discriminators = {
    WebServiceProperties: WebServiceProperties,
    "WebServiceProperties.Graph": WebServicePropertiesForGraph
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    OperationEntityListResult: OperationEntityListResult,
    OperationEntity: OperationEntity,
    OperationDisplayInfo: OperationDisplayInfo,
    WebServiceProperties: WebServiceProperties,
    WebServiceKeys: WebServiceKeys,
    RealtimeConfiguration: RealtimeConfiguration,
    DiagnosticsConfiguration: DiagnosticsConfiguration,
    StorageAccount: StorageAccount,
    MachineLearningWorkspace: MachineLearningWorkspace,
    CommitmentPlan: CommitmentPlan,
    ServiceInputOutputSpecification: ServiceInputOutputSpecification,
    TableSpecification: TableSpecification,
    ColumnSpecification: ColumnSpecification,
    ExampleRequest: ExampleRequest,
    AssetItem: AssetItem,
    BlobLocation: BlobLocation,
    InputPort: InputPort,
    OutputPort: OutputPort,
    ModuleAssetParameter: ModuleAssetParameter,
    ModeValueInfo: ModeValueInfo,
    WebServiceParameter: WebServiceParameter,
    Resource: Resource,
    PatchedResource: PatchedResource,
    AsyncOperationStatus: AsyncOperationStatus,
    AsyncOperationErrorInfo: AsyncOperationErrorInfo,
    PaginatedWebServicesList: PaginatedWebServicesList,
    GraphPackage: GraphPackage,
    GraphNode: GraphNode,
    GraphEdge: GraphEdge,
    GraphParameter: GraphParameter,
    GraphParameterLink: GraphParameterLink,
    WebServicePropertiesForGraph: WebServicePropertiesForGraph,
    WebService: WebService,
    PatchedWebService: PatchedWebService,
    discriminators: discriminators
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2017-01-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const createOrUpdatePayload = {
    parameterPath: "createOrUpdatePayload",
    mapper: WebService
};
const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const webServiceName = {
    parameterPath: "webServiceName",
    mapper: {
        serializedName: "webServiceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const region = {
    parameterPath: ["options", "region"],
    mapper: {
        serializedName: "region",
        type: {
            name: "String"
        }
    }
};
const patchPayload = {
    parameterPath: "patchPayload",
    mapper: PatchedWebService
};
const region1 = {
    parameterPath: "region",
    mapper: {
        serializedName: "region",
        required: true,
        type: {
            name: "String"
        }
    }
};
const skiptoken = {
    parameterPath: ["options", "skiptoken"],
    mapper: {
        serializedName: "$skiptoken",
        type: {
            name: "String"
        }
    }
};
const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Operations operations. */
class OperationsImpl {
    /**
     * Initialize a new instance of the class Operations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all the available REST API operations.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            result = yield tslib.__await(this._list(options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists all the available REST API operations.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec);
    }
}
// Operation Specifications
const serializer$1 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/providers/Microsoft.MachineLearning/operations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationEntityListResult
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer: serializer$1
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class LroImpl {
    constructor(sendOperationFn, args, spec, requestPath = spec.path, requestMethod = spec.httpMethod) {
        this.sendOperationFn = sendOperationFn;
        this.args = args;
        this.spec = spec;
        this.requestPath = requestPath;
        this.requestMethod = requestMethod;
    }
    sendInitialRequest() {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            return this.sendOperationFn(this.args, this.spec);
        });
    }
    sendPollRequest(path) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const _a = this.spec, restSpec = tslib.__rest(_a, ["requestBody"]);
            return this.sendOperationFn(this.args, Object.assign(Object.assign({}, restSpec), { path, httpMethod: "GET" }));
        });
    }
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing WebServices operations. */
class WebServicesImpl {
    /**
     * Initialize a new instance of the class WebServices class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets the web services in the specified resource group.
     * @param resourceGroupName Name of the resource group in which the web service is located.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName, options) {
        const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByResourceGroupPagingPage(resourceGroupName, options, settings);
            }
        };
    }
    listByResourceGroupPagingPage(resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByResourceGroup(resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByResourceGroupNext(resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByResourceGroupPagingAll(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByResourceGroupPagingPage(resourceGroupName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets the web services in the specified subscription.
     * @param options The options parameters.
     */
    listBySubscriptionId(options) {
        const iter = this.listBySubscriptionIdPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listBySubscriptionIdPagingPage(options, settings);
            }
        };
    }
    listBySubscriptionIdPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionIdPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listBySubscriptionId(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listBySubscriptionIdNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listBySubscriptionIdPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionIdPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listBySubscriptionIdPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Create or update a web service. This call will overwrite an existing web service. Note that there is
     * no warning or confirmation. This is a nonrecoverable operation. If your intent is to create a new
     * web service, call the Get operation first to verify that it does not exist.
     * @param resourceGroupName Name of the resource group in which the web service is located.
     * @param webServiceName The name of the web service.
     * @param createOrUpdatePayload The payload that is used to create or update the web service.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, webServiceName, createOrUpdatePayload, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, webServiceName, createOrUpdatePayload, options }, createOrUpdateOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create or update a web service. This call will overwrite an existing web service. Note that there is
     * no warning or confirmation. This is a nonrecoverable operation. If your intent is to create a new
     * web service, call the Get operation first to verify that it does not exist.
     * @param resourceGroupName Name of the resource group in which the web service is located.
     * @param webServiceName The name of the web service.
     * @param createOrUpdatePayload The payload that is used to create or update the web service.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, webServiceName, createOrUpdatePayload, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, webServiceName, createOrUpdatePayload, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Gets the Web Service Definition as specified by a subscription, resource group, and name. Note that
     * the storage credentials and web service keys are not returned by this call. To get the web service
     * access keys, call List Keys.
     * @param resourceGroupName Name of the resource group in which the web service is located.
     * @param webServiceName The name of the web service.
     * @param options The options parameters.
     */
    get(resourceGroupName, webServiceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, webServiceName, options }, getOperationSpec);
    }
    /**
     * Modifies an existing web service resource. The PATCH API call is an asynchronous operation. To
     * determine whether it has completed successfully, you must perform a Get operation.
     * @param resourceGroupName Name of the resource group in which the web service is located.
     * @param webServiceName The name of the web service.
     * @param patchPayload The payload to use to patch the web service.
     * @param options The options parameters.
     */
    beginPatch(resourceGroupName, webServiceName, patchPayload, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, webServiceName, patchPayload, options }, patchOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Modifies an existing web service resource. The PATCH API call is an asynchronous operation. To
     * determine whether it has completed successfully, you must perform a Get operation.
     * @param resourceGroupName Name of the resource group in which the web service is located.
     * @param webServiceName The name of the web service.
     * @param patchPayload The payload to use to patch the web service.
     * @param options The options parameters.
     */
    beginPatchAndWait(resourceGroupName, webServiceName, patchPayload, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginPatch(resourceGroupName, webServiceName, patchPayload, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Deletes the specified web service.
     * @param resourceGroupName Name of the resource group in which the web service is located.
     * @param webServiceName The name of the web service.
     * @param options The options parameters.
     */
    beginRemove(resourceGroupName, webServiceName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, webServiceName, options }, removeOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes the specified web service.
     * @param resourceGroupName Name of the resource group in which the web service is located.
     * @param webServiceName The name of the web service.
     * @param options The options parameters.
     */
    beginRemoveAndWait(resourceGroupName, webServiceName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginRemove(resourceGroupName, webServiceName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Creates an encrypted credentials parameter blob for the specified region. To get the web service
     * from a region other than the region in which it has been created, you must first call Create
     * Regional Web Services Properties to create a copy of the encrypted credential parameter blob in that
     * region. You only need to do this before the first time that you get the web service in the new
     * region.
     * @param resourceGroupName Name of the resource group in which the web service is located.
     * @param webServiceName The name of the web service.
     * @param region The region for which encrypted credential parameters are created.
     * @param options The options parameters.
     */
    beginCreateRegionalProperties(resourceGroupName, webServiceName, region, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, webServiceName, region, options }, createRegionalPropertiesOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Creates an encrypted credentials parameter blob for the specified region. To get the web service
     * from a region other than the region in which it has been created, you must first call Create
     * Regional Web Services Properties to create a copy of the encrypted credential parameter blob in that
     * region. You only need to do this before the first time that you get the web service in the new
     * region.
     * @param resourceGroupName Name of the resource group in which the web service is located.
     * @param webServiceName The name of the web service.
     * @param region The region for which encrypted credential parameters are created.
     * @param options The options parameters.
     */
    beginCreateRegionalPropertiesAndWait(resourceGroupName, webServiceName, region, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateRegionalProperties(resourceGroupName, webServiceName, region, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Gets the access keys for the specified web service.
     * @param resourceGroupName Name of the resource group in which the web service is located.
     * @param webServiceName The name of the web service.
     * @param options The options parameters.
     */
    listKeys(resourceGroupName, webServiceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, webServiceName, options }, listKeysOperationSpec);
    }
    /**
     * Gets the web services in the specified resource group.
     * @param resourceGroupName Name of the resource group in which the web service is located.
     * @param options The options parameters.
     */
    _listByResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listByResourceGroupOperationSpec);
    }
    /**
     * Gets the web services in the specified subscription.
     * @param options The options parameters.
     */
    _listBySubscriptionId(options) {
        return this.client.sendOperationRequest({ options }, listBySubscriptionIdOperationSpec);
    }
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName Name of the resource group in which the web service is located.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    _listByResourceGroupNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, listByResourceGroupNextOperationSpec);
    }
    /**
     * ListBySubscriptionIdNext
     * @param nextLink The nextLink from the previous successful call to the ListBySubscriptionId method.
     * @param options The options parameters.
     */
    _listBySubscriptionIdNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listBySubscriptionIdNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/webServices/{webServiceName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: WebService
        },
        201: {
            bodyMapper: WebService
        },
        202: {
            bodyMapper: WebService
        },
        204: {
            bodyMapper: WebService
        }
    },
    requestBody: createOrUpdatePayload,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        webServiceName,
        subscriptionId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/webServices/{webServiceName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: WebService
        }
    },
    queryParameters: [apiVersion, region],
    urlParameters: [
        $host,
        resourceGroupName,
        webServiceName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer
};
const patchOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/webServices/{webServiceName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: WebService
        },
        201: {
            bodyMapper: WebService
        },
        202: {
            bodyMapper: WebService
        },
        204: {
            bodyMapper: WebService
        }
    },
    requestBody: patchPayload,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        webServiceName,
        subscriptionId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};
const removeOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/webServices/{webServiceName}",
    httpMethod: "DELETE",
    responses: { 200: {}, 201: {}, 202: {}, 204: {} },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        webServiceName,
        subscriptionId
    ],
    serializer
};
const createRegionalPropertiesOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/webServices/{webServiceName}/CreateRegionalBlob",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: AsyncOperationStatus
        },
        201: {
            bodyMapper: AsyncOperationStatus
        },
        202: {
            bodyMapper: AsyncOperationStatus
        },
        204: {
            bodyMapper: AsyncOperationStatus
        }
    },
    queryParameters: [apiVersion, region1],
    urlParameters: [
        $host,
        resourceGroupName,
        webServiceName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer
};
const listKeysOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/webServices/{webServiceName}/listKeys",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: WebServiceKeys
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        webServiceName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer
};
const listByResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/webServices",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PaginatedWebServicesList
        }
    },
    queryParameters: [apiVersion, skiptoken],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer
};
const listBySubscriptionIdOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.MachineLearning/webServices",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PaginatedWebServicesList
        }
    },
    queryParameters: [apiVersion, skiptoken],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer
};
const listByResourceGroupNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PaginatedWebServicesList
        }
    },
    queryParameters: [apiVersion, skiptoken],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer
};
const listBySubscriptionIdNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PaginatedWebServicesList
        }
    },
    queryParameters: [apiVersion, skiptoken],
    urlParameters: [
        $host,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class AzureMLWebServicesManagementClient extends coreClient__namespace.ServiceClient {
    /**
     * Initializes a new instance of the AzureMLWebServicesManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The Azure subscription ID.
     * @param options The parameter options
     */
    constructor(credentials, subscriptionId, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        if (subscriptionId === undefined) {
            throw new Error("'subscriptionId' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-webservices/1.1.0`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName
            });
            this.pipeline.addPolicy(coreRestPipeline__namespace.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient__namespace.authorizeRequestOnClaimChallenge
                }
            }));
        }
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.apiVersion = options.apiVersion || "2017-01-01";
        this.operations = new OperationsImpl(this);
        this.webServices = new WebServicesImpl(this);
        this.addCustomApiVersionPolicy(options.apiVersion);
    }
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    addCustomApiVersionPolicy(apiVersion) {
        if (!apiVersion) {
            return;
        }
        const apiVersionPolicy = {
            name: "CustomApiVersionPolicy",
            sendRequest(request, next) {
                return tslib.__awaiter(this, void 0, void 0, function* () {
                    const param = request.url.split("?");
                    if (param.length > 1) {
                        const newParams = param[1].split("&").map((item) => {
                            if (item.indexOf("api-version") > -1) {
                                return "api-version=" + apiVersion;
                            }
                            else {
                                return item;
                            }
                        });
                        request.url = param[0] + "?" + newParams.join("&");
                    }
                    return next(request);
                });
            }
        };
        this.pipeline.addPolicy(apiVersionPolicy);
    }
}

exports.AzureMLWebServicesManagementClient = AzureMLWebServicesManagementClient;
exports.getContinuationToken = getContinuationToken;
//# sourceMappingURL=index.js.map
