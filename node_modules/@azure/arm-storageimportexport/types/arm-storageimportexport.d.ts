import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { PagedAsyncIterableIterator } from '@azure/core-paging';

/** Interface representing a BitLockerKeys. */
export declare interface BitLockerKeys {
    /**
     * Returns the BitLocker Keys for all drives in the specified job.
     * @param jobName The name of the import/export job.
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the
     *                          user subscription.
     * @param options The options parameters.
     */
    list(jobName: string, resourceGroupName: string, options?: BitLockerKeysListOptionalParams): PagedAsyncIterableIterator<DriveBitLockerKey>;
}

/** Optional parameters. */
export declare interface BitLockerKeysListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type BitLockerKeysListResponse = GetBitLockerKeysResponse;

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export declare type CreatedByType = string;

/** Contains information about the delivery package being shipped by the customer to the Microsoft data center. */
export declare interface DeliveryPackageInformation {
    /** The name of the carrier that is used to ship the import or export drives. */
    carrierName: string;
    /** The tracking number of the package. */
    trackingNumber: string;
    /** The number of drives included in the package. */
    driveCount?: number;
    /** The date when the package is shipped. */
    shipDate?: string;
}

/** BitLocker recovery key or password to the specified drive */
export declare interface DriveBitLockerKey {
    /** BitLocker recovery key or password */
    bitLockerKey?: string;
    /** Drive ID */
    driveId?: string;
}

/**
 * Defines values for DriveState. \
 * {@link KnownDriveState} can be used interchangeably with DriveState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Specified** \
 * **Received** \
 * **NeverReceived** \
 * **Transferring** \
 * **Completed** \
 * **CompletedMoreInfo** \
 * **ShippedBack**
 */
export declare type DriveState = string;

/** Provides information about the drive's status */
export declare interface DriveStatus {
    /** The drive's hardware serial number, without spaces. */
    driveId?: string;
    /** The BitLocker key used to encrypt the drive. */
    bitLockerKey?: string;
    /** The relative path of the manifest file on the drive. */
    manifestFile?: string;
    /** The Base16-encoded MD5 hash of the manifest file on the drive. */
    manifestHash?: string;
    /** The drive header hash value. */
    driveHeaderHash?: string;
    /** The drive's current state. */
    state?: DriveState;
    /** Detailed status about the data transfer process. This field is not returned in the response until the drive is in the Transferring state. */
    copyStatus?: string;
    /** Percentage completed for the drive. */
    percentComplete?: number;
    /** A URI that points to the blob containing the verbose log for the data transfer operation. */
    verboseLogUri?: string;
    /** A URI that points to the blob containing the error log for the data transfer operation. */
    errorLogUri?: string;
    /** A URI that points to the blob containing the drive manifest file. */
    manifestUri?: string;
    /** Bytes successfully transferred for the drive. */
    bytesSucceeded?: number;
}

/**
 * Defines values for EncryptionKekType. \
 * {@link KnownEncryptionKekType} can be used interchangeably with EncryptionKekType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **MicrosoftManaged** \
 * **CustomerManaged**
 */
export declare type EncryptionKekType = string;

/** Specifies the encryption key properties */
export declare interface EncryptionKeyDetails {
    /** The type of kek encryption key */
    kekType?: EncryptionKekType;
    /** Specifies the url for kek encryption key. */
    kekUrl?: string;
    /** Specifies the keyvault resource id for kek encryption key. */
    kekVaultResourceID?: string;
}

/** Response when errors occurred */
export declare interface ErrorResponse {
    /** Provides information about the error code. */
    code?: string;
    /** Provides information about the error message. */
    message?: string;
    /** Provides information about the error target. */
    target?: string;
    /** Describes the error details if present. */
    details?: ErrorResponseErrorDetailsItem[];
    /** Inner error object if present. */
    innererror?: Record<string, unknown>;
}

export declare interface ErrorResponseErrorDetailsItem {
    /** Provides information about the error code. */
    code?: string;
    /** Provides information about the error target. */
    target?: string;
    /** Provides information about the error message. */
    message?: string;
}

/** A property containing information about the blobs to be exported for an export job. This property is required for export jobs, but must not be specified for import jobs. */
export declare interface Export {
    /** The relative URI to the block blob that contains the list of blob paths or blob path prefixes as defined above, beginning with the container name. If the blob is in root container, the URI must begin with $root. */
    blobListBlobPath?: string;
    /** A collection of blob-path strings. */
    blobPath?: string[];
    /** A collection of blob-prefix strings. */
    blobPathPrefix?: string[];
}

/** GetBitLockerKeys response */
export declare interface GetBitLockerKeysResponse {
    /** drive status */
    value?: DriveBitLockerKey[];
}

/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/** Specifies the identity properties. */
export declare interface IdentityDetails {
    /** The type of identity */
    type?: IdentityType;
    /**
     * Specifies the principal id for the identity for the job.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
    /**
     * Specifies the tenant id for the identity for the job.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
}

/**
 * Defines values for IdentityType. \
 * {@link KnownIdentityType} can be used interchangeably with IdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **SystemAssigned** \
 * **UserAssigned**
 */
export declare type IdentityType = string;

/** Specifies the job properties */
export declare interface JobDetails {
    /** The resource identifier of the storage account where data will be imported to or exported from. */
    storageAccountId?: string;
    /** The type of job */
    jobType?: string;
    /** Specifies the return address information for the job. */
    returnAddress?: ReturnAddress;
    /** Specifies the return carrier and customer's account with the carrier. */
    returnShipping?: ReturnShipping;
    /** Contains information about the Microsoft datacenter to which the drives should be shipped. */
    shippingInformation?: ShippingInformation;
    /** Contains information about the package being shipped by the customer to the Microsoft data center. */
    deliveryPackage?: DeliveryPackageInformation;
    /** Contains information about the package being shipped from the Microsoft data center to the customer to return the drives. The format is the same as the deliveryPackage property above. This property is not included if the drives have not yet been returned. */
    returnPackage?: PackageInformation;
    /** The virtual blob directory to which the copy logs and backups of drive manifest files (if enabled) will be stored. */
    diagnosticsPath?: string;
    /** Default value is Error. Indicates whether error logging or verbose logging will be enabled. */
    logLevel?: string;
    /** Default value is false. Indicates whether the manifest files on the drives should be copied to block blobs. */
    backupDriveManifest?: boolean;
    /** Current state of the job. */
    state?: string;
    /** Indicates whether a request has been submitted to cancel the job. */
    cancelRequested?: boolean;
    /** Overall percentage completed for the job. */
    percentComplete?: number;
    /** A blob path that points to a block blob containing a list of blob names that were not exported due to insufficient drive space. If all blobs were exported successfully, then this element is not included in the response. */
    incompleteBlobListUri?: string;
    /** List of up to ten drives that comprise the job. The drive list is a required element for an import job; it is not specified for export jobs. */
    driveList?: DriveStatus[];
    /** A property containing information about the blobs to be exported for an export job. This property is included for export jobs only. */
    export?: Export;
    /** Specifies the provisioning state of the job. */
    provisioningState?: string;
    /** Contains information about the encryption key. */
    encryptionKey?: EncryptionKeyDetails;
}

/** Contains the job information. */
export declare interface JobResponse {
    /**
     * SystemData of ImportExport Jobs.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /**
     * Specifies the resource identifier of the job.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Specifies the name of the job.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Specifies the type of the job resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** Specifies the Azure location where the job is created. */
    location?: string;
    /** Specifies the tags that are assigned to the job. */
    tags?: Record<string, unknown>;
    /** Specifies the job properties */
    properties?: JobDetails;
    /** Specifies the job identity details */
    identity?: IdentityDetails;
}

/** Interface representing a Jobs. */
export declare interface Jobs {
    /**
     * Returns all active and completed jobs in a subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: JobsListBySubscriptionOptionalParams): PagedAsyncIterableIterator<JobResponse>;
    /**
     * Returns all active and completed jobs in a resource group.
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the
     *                          user subscription.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: JobsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<JobResponse>;
    /**
     * Gets information about an existing job.
     * @param jobName The name of the import/export job.
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the
     *                          user subscription.
     * @param options The options parameters.
     */
    get(jobName: string, resourceGroupName: string, options?: JobsGetOptionalParams): Promise<JobsGetResponse>;
    /**
     * Updates specific properties of a job. You can call this operation to notify the Import/Export
     * service that the hard drives comprising the import or export job have been shipped to the Microsoft
     * data center. It can also be used to cancel an existing job.
     * @param jobName The name of the import/export job.
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the
     *                          user subscription.
     * @param body The parameters to update in the job
     * @param options The options parameters.
     */
    update(jobName: string, resourceGroupName: string, body: UpdateJobParameters, options?: JobsUpdateOptionalParams): Promise<JobsUpdateResponse>;
    /**
     * Creates a new job or updates an existing job in the specified subscription.
     * @param jobName The name of the import/export job.
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the
     *                          user subscription.
     * @param body The parameters used for creating the job
     * @param options The options parameters.
     */
    create(jobName: string, resourceGroupName: string, body: PutJobParameters, options?: JobsCreateOptionalParams): Promise<JobsCreateResponse>;
    /**
     * Deletes an existing job. Only jobs in the Creating or Completed states can be deleted.
     * @param jobName The name of the import/export job.
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the
     *                          user subscription.
     * @param options The options parameters.
     */
    delete(jobName: string, resourceGroupName: string, options?: JobsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface JobsCreateOptionalParams extends coreClient.OperationOptions {
    /** The tenant ID of the client making the request. */
    clientTenantId?: string;
}

/** Contains response data for the create operation. */
export declare type JobsCreateResponse = JobResponse;

/** Optional parameters. */
export declare interface JobsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface JobsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type JobsGetResponse = JobResponse;

/** Optional parameters. */
export declare interface JobsListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type JobsListByResourceGroupNextResponse = ListJobsResponse;

/** Optional parameters. */
export declare interface JobsListByResourceGroupOptionalParams extends coreClient.OperationOptions {
    /** An integer value that specifies how many jobs at most should be returned. The value cannot exceed 100. */
    top?: number;
    /** Can be used to restrict the results to certain conditions. */
    filter?: string;
}

/** Contains response data for the listByResourceGroup operation. */
export declare type JobsListByResourceGroupResponse = ListJobsResponse;

/** Optional parameters. */
export declare interface JobsListBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionNext operation. */
export declare type JobsListBySubscriptionNextResponse = ListJobsResponse;

/** Optional parameters. */
export declare interface JobsListBySubscriptionOptionalParams extends coreClient.OperationOptions {
    /** An integer value that specifies how many jobs at most should be returned. The value cannot exceed 100. */
    top?: number;
    /** Can be used to restrict the results to certain conditions. */
    filter?: string;
}

/** Contains response data for the listBySubscription operation. */
export declare type JobsListBySubscriptionResponse = ListJobsResponse;

/** Optional parameters. */
export declare interface JobsUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type JobsUpdateResponse = JobResponse;

/** Known values of {@link CreatedByType} that the service accepts. */
export declare enum KnownCreatedByType {
    /** User */
    User = "User",
    /** Application */
    Application = "Application",
    /** ManagedIdentity */
    ManagedIdentity = "ManagedIdentity",
    /** Key */
    Key = "Key"
}

/** Known values of {@link DriveState} that the service accepts. */
export declare enum KnownDriveState {
    /** Specified */
    Specified = "Specified",
    /** Received */
    Received = "Received",
    /** NeverReceived */
    NeverReceived = "NeverReceived",
    /** Transferring */
    Transferring = "Transferring",
    /** Completed */
    Completed = "Completed",
    /** CompletedMoreInfo */
    CompletedMoreInfo = "CompletedMoreInfo",
    /** ShippedBack */
    ShippedBack = "ShippedBack"
}

/** Known values of {@link EncryptionKekType} that the service accepts. */
export declare enum KnownEncryptionKekType {
    /** MicrosoftManaged */
    MicrosoftManaged = "MicrosoftManaged",
    /** CustomerManaged */
    CustomerManaged = "CustomerManaged"
}

/** Known values of {@link IdentityType} that the service accepts. */
export declare enum KnownIdentityType {
    /** None */
    None = "None",
    /** SystemAssigned */
    SystemAssigned = "SystemAssigned",
    /** UserAssigned */
    UserAssigned = "UserAssigned"
}

/** List jobs response */
export declare interface ListJobsResponse {
    /** link to next batch of jobs */
    nextLink?: string;
    /** Job list */
    value?: JobResponse[];
}

/** List operations response */
export declare interface ListOperationsResponse {
    /** operations */
    value?: Operation[];
}

/** Provides information about an Azure data center location. */
declare interface Location_2 {
    /** Specifies the resource identifier of the location. */
    id?: string;
    /** Specifies the name of the location. Use List Locations to get all supported locations. */
    name?: string;
    /** Specifies the type of the location. */
    type?: string;
    /** The recipient name to use when shipping the drives to the Azure data center. */
    recipientName?: string;
    /** The first line of the street address to use when shipping the drives to the Azure data center. */
    streetAddress1?: string;
    /** The second line of the street address to use when shipping the drives to the Azure data center. */
    streetAddress2?: string;
    /** The city name to use when shipping the drives to the Azure data center. */
    city?: string;
    /** The state or province to use when shipping the drives to the Azure data center. */
    stateOrProvince?: string;
    /** The postal code to use when shipping the drives to the Azure data center. */
    postalCode?: string;
    /** The country or region to use when shipping the drives to the Azure data center. */
    countryOrRegion?: string;
    /** The phone number for the Azure data center. */
    phone?: string;
    /** Additional shipping information for customer, specific to datacenter to which customer should send their disks. */
    additionalShippingInformation?: string;
    /** A list of carriers that are supported at this location. */
    supportedCarriers?: string[];
    /** A list of location IDs that should be used to ship shipping drives to for jobs created against the current location. If the current location is active, it will be part of the list. If it is temporarily closed due to maintenance, this list may contain other locations. */
    alternateLocations?: string[];
}
export { Location_2 as Location }

/** Interface representing a Locations. */
export declare interface Locations {
    /**
     * Returns a list of locations to which you can ship the disks associated with an import or export job.
     * A location is a Microsoft data center region.
     * @param options The options parameters.
     */
    list(options?: LocationsListOptionalParams): PagedAsyncIterableIterator<Location_2>;
    /**
     * Returns the details about a location to which you can ship the disks associated with an import or
     * export job. A location is an Azure region.
     * @param locationName The name of the location. For example, West US or westus.
     * @param options The options parameters.
     */
    get(locationName: string, options?: LocationsGetOptionalParams): Promise<LocationsGetResponse>;
}

/** Optional parameters. */
export declare interface LocationsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type LocationsGetResponse = Location_2;

/** Optional parameters. */
export declare interface LocationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type LocationsListResponse = LocationsResponse;

/** Locations response */
export declare interface LocationsResponse {
    /** locations */
    value?: Location_2[];
}

/** Describes a supported operation by the Storage Import/Export job API. */
export declare interface Operation {
    /** Name of the operation. */
    name: string;
    /** The resource provider name to which the operation belongs. */
    provider?: string;
    /** The name of the resource to which the operation belongs. */
    resource?: string;
    /** The display name of the operation. */
    operation?: string;
    /** Short description of the operation. */
    description?: string;
}

/** Interface representing a Operations. */
export declare interface Operations {
    /**
     * Returns the list of operations supported by the import/export resource provider.
     * @param options The options parameters.
     */
    list(options?: OperationsListOptionalParams): PagedAsyncIterableIterator<Operation>;
}

/** Optional parameters. */
export declare interface OperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OperationsListResponse = ListOperationsResponse;

/** Contains information about the package being shipped by the customer to the Microsoft data center. */
export declare interface PackageInformation {
    /** The name of the carrier that is used to ship the import or export drives. */
    carrierName: string;
    /** The tracking number of the package. */
    trackingNumber: string;
    /** The number of drives included in the package. */
    driveCount: number;
    /** The date when the package is shipped. */
    shipDate: string;
}

/** Put Job parameters */
export declare interface PutJobParameters {
    /** Specifies the supported Azure location where the job should be created */
    location?: string;
    /** Specifies the tags that will be assigned to the job. */
    tags?: Record<string, unknown>;
    /** Specifies the job properties */
    properties?: JobDetails;
}

/** Specifies the return address information for the job. */
export declare interface ReturnAddress {
    /** The name of the recipient who will receive the hard drives when they are returned. */
    recipientName: string;
    /** The first line of the street address to use when returning the drives. */
    streetAddress1: string;
    /** The second line of the street address to use when returning the drives. */
    streetAddress2?: string;
    /** The city name to use when returning the drives. */
    city: string;
    /** The state or province to use when returning the drives. */
    stateOrProvince?: string;
    /** The postal code to use when returning the drives. */
    postalCode: string;
    /** The country or region to use when returning the drives. */
    countryOrRegion: string;
    /** Phone number of the recipient of the returned drives. */
    phone: string;
    /** Email address of the recipient of the returned drives. */
    email: string;
}

/** Specifies the return carrier and customer's account with the carrier. */
export declare interface ReturnShipping {
    /** The carrier's name. */
    carrierName: string;
    /** The customer's account number with the carrier. */
    carrierAccountNumber: string;
}

/** Contains information about the Microsoft datacenter to which the drives should be shipped. */
export declare interface ShippingInformation {
    /** The name of the recipient who will receive the hard drives when they are returned. */
    recipientName?: string;
    /** The first line of the street address to use when returning the drives. */
    streetAddress1?: string;
    /** The second line of the street address to use when returning the drives. */
    streetAddress2?: string;
    /** The city name to use when returning the drives. */
    city?: string;
    /** The state or province to use when returning the drives. */
    stateOrProvince?: string;
    /** The postal code to use when returning the drives. */
    postalCode?: string;
    /** The country or region to use when returning the drives. */
    countryOrRegion?: string;
    /** Phone number of the recipient of the returned drives. */
    phone?: string;
    /**
     * Additional shipping information for customer, specific to datacenter to which customer should send their disks.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalInformation?: string;
}

export declare class StorageImportExport extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    acceptLanguage?: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the StorageImportExport class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The subscription ID for the Azure user.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: StorageImportExportOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    locations: Locations;
    jobs: Jobs;
    bitLockerKeys: BitLockerKeys;
    operations: Operations;
}

/** Optional parameters. */
export declare interface StorageImportExportOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Specifies the preferred language for the response. */
    acceptLanguage?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** Metadata pertaining to creation and last modification of the resource. */
export declare interface SystemData {
    /** The identity that created the resource. */
    createdBy?: string;
    /** The type of identity that created the resource. */
    createdByType?: CreatedByType;
    /** The timestamp of resource creation (UTC). */
    createdAt?: Date;
    /** The identity that last modified the resource. */
    lastModifiedBy?: string;
    /** The type of identity that last modified the resource. */
    lastModifiedByType?: CreatedByType;
    /** The timestamp of resource last modification (UTC) */
    lastModifiedAt?: Date;
}

/** Update Job parameters */
export declare interface UpdateJobParameters {
    /** Specifies the tags that will be assigned to the job */
    tags?: Record<string, unknown>;
    /** If specified, the value must be true. The service will attempt to cancel the job. */
    cancelRequested?: boolean;
    /** If specified, the value must be Shipping, which tells the Import/Export service that the package for the job has been shipped. The ReturnAddress and DeliveryPackage properties must have been set either in this request or in a previous request, otherwise the request will fail. */
    state?: string;
    /** Specifies the return address information for the job. */
    returnAddress?: ReturnAddress;
    /** Specifies the return carrier and customer's account with the carrier. */
    returnShipping?: ReturnShipping;
    /** Contains information about the package being shipped by the customer to the Microsoft data center. */
    deliveryPackage?: DeliveryPackageInformation;
    /** Indicates whether error logging or verbose logging is enabled. */
    logLevel?: string;
    /** Indicates whether the manifest files on the drives should be copied to block blobs. */
    backupDriveManifest?: boolean;
    /** List of drives that comprise the job. */
    driveList?: DriveStatus[];
}

export { }
