'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var coreClient = require('@azure/core-client');
var coreRestPipeline = require('@azure/core-rest-pipeline');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var coreClient__namespace = /*#__PURE__*/_interopNamespace(coreClient);
var coreRestPipeline__namespace = /*#__PURE__*/_interopNamespace(coreRestPipeline);

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const pageMap = new WeakMap();
/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
function getContinuationToken(page) {
    var _a;
    if (typeof page !== "object" || page === null) {
        return undefined;
    }
    return (_a = pageMap.get(page)) === null || _a === void 0 ? void 0 : _a.continuationToken;
}
function setContinuationToken(page, continuationToken) {
    var _a;
    if (typeof page !== "object" || page === null || !continuationToken) {
        return;
    }
    const pageInfo = (_a = pageMap.get(page)) !== null && _a !== void 0 ? _a : {};
    pageInfo.continuationToken = continuationToken;
    pageMap.set(page, pageInfo);
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link CreatedByType} that the service accepts. */
exports.KnownCreatedByType = void 0;
(function (KnownCreatedByType) {
    /** User */
    KnownCreatedByType["User"] = "User";
    /** Application */
    KnownCreatedByType["Application"] = "Application";
    /** ManagedIdentity */
    KnownCreatedByType["ManagedIdentity"] = "ManagedIdentity";
    /** Key */
    KnownCreatedByType["Key"] = "Key";
})(exports.KnownCreatedByType || (exports.KnownCreatedByType = {}));
/** Known values of {@link DriveState} that the service accepts. */
exports.KnownDriveState = void 0;
(function (KnownDriveState) {
    /** Specified */
    KnownDriveState["Specified"] = "Specified";
    /** Received */
    KnownDriveState["Received"] = "Received";
    /** NeverReceived */
    KnownDriveState["NeverReceived"] = "NeverReceived";
    /** Transferring */
    KnownDriveState["Transferring"] = "Transferring";
    /** Completed */
    KnownDriveState["Completed"] = "Completed";
    /** CompletedMoreInfo */
    KnownDriveState["CompletedMoreInfo"] = "CompletedMoreInfo";
    /** ShippedBack */
    KnownDriveState["ShippedBack"] = "ShippedBack";
})(exports.KnownDriveState || (exports.KnownDriveState = {}));
/** Known values of {@link EncryptionKekType} that the service accepts. */
exports.KnownEncryptionKekType = void 0;
(function (KnownEncryptionKekType) {
    /** MicrosoftManaged */
    KnownEncryptionKekType["MicrosoftManaged"] = "MicrosoftManaged";
    /** CustomerManaged */
    KnownEncryptionKekType["CustomerManaged"] = "CustomerManaged";
})(exports.KnownEncryptionKekType || (exports.KnownEncryptionKekType = {}));
/** Known values of {@link IdentityType} that the service accepts. */
exports.KnownIdentityType = void 0;
(function (KnownIdentityType) {
    /** None */
    KnownIdentityType["None"] = "None";
    /** SystemAssigned */
    KnownIdentityType["SystemAssigned"] = "SystemAssigned";
    /** UserAssigned */
    KnownIdentityType["UserAssigned"] = "UserAssigned";
})(exports.KnownIdentityType || (exports.KnownIdentityType = {}));

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const LocationsResponse = {
    type: {
        name: "Composite",
        className: "LocationsResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Location"
                        }
                    }
                }
            }
        }
    }
};
const Location = {
    type: {
        name: "Composite",
        className: "Location",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            recipientName: {
                serializedName: "properties.recipientName",
                type: {
                    name: "String"
                }
            },
            streetAddress1: {
                serializedName: "properties.streetAddress1",
                type: {
                    name: "String"
                }
            },
            streetAddress2: {
                serializedName: "properties.streetAddress2",
                type: {
                    name: "String"
                }
            },
            city: {
                serializedName: "properties.city",
                type: {
                    name: "String"
                }
            },
            stateOrProvince: {
                serializedName: "properties.stateOrProvince",
                type: {
                    name: "String"
                }
            },
            postalCode: {
                serializedName: "properties.postalCode",
                type: {
                    name: "String"
                }
            },
            countryOrRegion: {
                serializedName: "properties.countryOrRegion",
                type: {
                    name: "String"
                }
            },
            phone: {
                serializedName: "properties.phone",
                type: {
                    name: "String"
                }
            },
            additionalShippingInformation: {
                serializedName: "properties.additionalShippingInformation",
                type: {
                    name: "String"
                }
            },
            supportedCarriers: {
                serializedName: "properties.supportedCarriers",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            alternateLocations: {
                serializedName: "properties.alternateLocations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const ErrorResponse = {
    type: {
        name: "Composite",
        className: "ErrorResponse",
        modelProperties: {
            code: {
                serializedName: "error.code",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "error.message",
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "error.target",
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "error.details",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorResponseErrorDetailsItem"
                        }
                    }
                }
            },
            innererror: {
                serializedName: "error.innererror",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
const ErrorResponseErrorDetailsItem = {
    type: {
        name: "Composite",
        className: "ErrorResponseErrorDetailsItem",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ListJobsResponse = {
    type: {
        name: "Composite",
        className: "ListJobsResponse",
        modelProperties: {
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "JobResponse"
                        }
                    }
                }
            }
        }
    }
};
const JobResponse = {
    type: {
        name: "Composite",
        className: "JobResponse",
        modelProperties: {
            systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            },
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "JobDetails"
                }
            },
            identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "IdentityDetails"
                }
            }
        }
    }
};
const SystemData = {
    type: {
        name: "Composite",
        className: "SystemData",
        modelProperties: {
            createdBy: {
                serializedName: "createdBy",
                type: {
                    name: "String"
                }
            },
            createdByType: {
                serializedName: "createdByType",
                type: {
                    name: "String"
                }
            },
            createdAt: {
                serializedName: "createdAt",
                type: {
                    name: "DateTime"
                }
            },
            lastModifiedBy: {
                serializedName: "lastModifiedBy",
                type: {
                    name: "String"
                }
            },
            lastModifiedByType: {
                serializedName: "lastModifiedByType",
                type: {
                    name: "String"
                }
            },
            lastModifiedAt: {
                serializedName: "lastModifiedAt",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const JobDetails = {
    type: {
        name: "Composite",
        className: "JobDetails",
        modelProperties: {
            storageAccountId: {
                serializedName: "storageAccountId",
                type: {
                    name: "String"
                }
            },
            jobType: {
                serializedName: "jobType",
                type: {
                    name: "String"
                }
            },
            returnAddress: {
                serializedName: "returnAddress",
                type: {
                    name: "Composite",
                    className: "ReturnAddress"
                }
            },
            returnShipping: {
                serializedName: "returnShipping",
                type: {
                    name: "Composite",
                    className: "ReturnShipping"
                }
            },
            shippingInformation: {
                serializedName: "shippingInformation",
                type: {
                    name: "Composite",
                    className: "ShippingInformation"
                }
            },
            deliveryPackage: {
                serializedName: "deliveryPackage",
                type: {
                    name: "Composite",
                    className: "DeliveryPackageInformation"
                }
            },
            returnPackage: {
                serializedName: "returnPackage",
                type: {
                    name: "Composite",
                    className: "PackageInformation"
                }
            },
            diagnosticsPath: {
                serializedName: "diagnosticsPath",
                type: {
                    name: "String"
                }
            },
            logLevel: {
                serializedName: "logLevel",
                type: {
                    name: "String"
                }
            },
            backupDriveManifest: {
                defaultValue: false,
                serializedName: "backupDriveManifest",
                type: {
                    name: "Boolean"
                }
            },
            state: {
                defaultValue: "Creating",
                serializedName: "state",
                type: {
                    name: "String"
                }
            },
            cancelRequested: {
                defaultValue: false,
                serializedName: "cancelRequested",
                type: {
                    name: "Boolean"
                }
            },
            percentComplete: {
                serializedName: "percentComplete",
                type: {
                    name: "Number"
                }
            },
            incompleteBlobListUri: {
                serializedName: "incompleteBlobListUri",
                type: {
                    name: "String"
                }
            },
            driveList: {
                serializedName: "driveList",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DriveStatus"
                        }
                    }
                }
            },
            export: {
                serializedName: "export",
                type: {
                    name: "Composite",
                    className: "Export"
                }
            },
            provisioningState: {
                serializedName: "provisioningState",
                type: {
                    name: "String"
                }
            },
            encryptionKey: {
                serializedName: "encryptionKey",
                type: {
                    name: "Composite",
                    className: "EncryptionKeyDetails"
                }
            }
        }
    }
};
const ReturnAddress = {
    type: {
        name: "Composite",
        className: "ReturnAddress",
        modelProperties: {
            recipientName: {
                serializedName: "recipientName",
                required: true,
                type: {
                    name: "String"
                }
            },
            streetAddress1: {
                serializedName: "streetAddress1",
                required: true,
                type: {
                    name: "String"
                }
            },
            streetAddress2: {
                serializedName: "streetAddress2",
                type: {
                    name: "String"
                }
            },
            city: {
                serializedName: "city",
                required: true,
                type: {
                    name: "String"
                }
            },
            stateOrProvince: {
                serializedName: "stateOrProvince",
                type: {
                    name: "String"
                }
            },
            postalCode: {
                serializedName: "postalCode",
                required: true,
                type: {
                    name: "String"
                }
            },
            countryOrRegion: {
                serializedName: "countryOrRegion",
                required: true,
                type: {
                    name: "String"
                }
            },
            phone: {
                serializedName: "phone",
                required: true,
                type: {
                    name: "String"
                }
            },
            email: {
                serializedName: "email",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ReturnShipping = {
    type: {
        name: "Composite",
        className: "ReturnShipping",
        modelProperties: {
            carrierName: {
                serializedName: "carrierName",
                required: true,
                type: {
                    name: "String"
                }
            },
            carrierAccountNumber: {
                serializedName: "carrierAccountNumber",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ShippingInformation = {
    type: {
        name: "Composite",
        className: "ShippingInformation",
        modelProperties: {
            recipientName: {
                serializedName: "recipientName",
                type: {
                    name: "String"
                }
            },
            streetAddress1: {
                serializedName: "streetAddress1",
                type: {
                    name: "String"
                }
            },
            streetAddress2: {
                serializedName: "streetAddress2",
                type: {
                    name: "String"
                }
            },
            city: {
                serializedName: "city",
                type: {
                    name: "String"
                }
            },
            stateOrProvince: {
                serializedName: "stateOrProvince",
                type: {
                    name: "String"
                }
            },
            postalCode: {
                serializedName: "postalCode",
                type: {
                    name: "String"
                }
            },
            countryOrRegion: {
                serializedName: "countryOrRegion",
                type: {
                    name: "String"
                }
            },
            phone: {
                serializedName: "phone",
                type: {
                    name: "String"
                }
            },
            additionalInformation: {
                serializedName: "additionalInformation",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DeliveryPackageInformation = {
    type: {
        name: "Composite",
        className: "DeliveryPackageInformation",
        modelProperties: {
            carrierName: {
                serializedName: "carrierName",
                required: true,
                type: {
                    name: "String"
                }
            },
            trackingNumber: {
                serializedName: "trackingNumber",
                required: true,
                type: {
                    name: "String"
                }
            },
            driveCount: {
                serializedName: "driveCount",
                type: {
                    name: "Number"
                }
            },
            shipDate: {
                serializedName: "shipDate",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PackageInformation = {
    type: {
        name: "Composite",
        className: "PackageInformation",
        modelProperties: {
            carrierName: {
                serializedName: "carrierName",
                required: true,
                type: {
                    name: "String"
                }
            },
            trackingNumber: {
                serializedName: "trackingNumber",
                required: true,
                type: {
                    name: "String"
                }
            },
            driveCount: {
                serializedName: "driveCount",
                required: true,
                type: {
                    name: "Number"
                }
            },
            shipDate: {
                serializedName: "shipDate",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DriveStatus = {
    type: {
        name: "Composite",
        className: "DriveStatus",
        modelProperties: {
            driveId: {
                serializedName: "driveId",
                type: {
                    name: "String"
                }
            },
            bitLockerKey: {
                serializedName: "bitLockerKey",
                type: {
                    name: "String"
                }
            },
            manifestFile: {
                serializedName: "manifestFile",
                type: {
                    name: "String"
                }
            },
            manifestHash: {
                serializedName: "manifestHash",
                type: {
                    name: "String"
                }
            },
            driveHeaderHash: {
                serializedName: "driveHeaderHash",
                type: {
                    name: "String"
                }
            },
            state: {
                defaultValue: "Specified",
                serializedName: "state",
                type: {
                    name: "String"
                }
            },
            copyStatus: {
                serializedName: "copyStatus",
                type: {
                    name: "String"
                }
            },
            percentComplete: {
                serializedName: "percentComplete",
                type: {
                    name: "Number"
                }
            },
            verboseLogUri: {
                serializedName: "verboseLogUri",
                type: {
                    name: "String"
                }
            },
            errorLogUri: {
                serializedName: "errorLogUri",
                type: {
                    name: "String"
                }
            },
            manifestUri: {
                serializedName: "manifestUri",
                type: {
                    name: "String"
                }
            },
            bytesSucceeded: {
                serializedName: "bytesSucceeded",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const Export = {
    type: {
        name: "Composite",
        className: "Export",
        modelProperties: {
            blobListBlobPath: {
                serializedName: "blobListBlobPath",
                type: {
                    name: "String"
                }
            },
            blobPath: {
                serializedName: "blobList.blobPath",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            blobPathPrefix: {
                serializedName: "blobList.blobPathPrefix",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const EncryptionKeyDetails = {
    type: {
        name: "Composite",
        className: "EncryptionKeyDetails",
        modelProperties: {
            kekType: {
                defaultValue: "MicrosoftManaged",
                serializedName: "kekType",
                type: {
                    name: "String"
                }
            },
            kekUrl: {
                serializedName: "kekUrl",
                type: {
                    name: "String"
                }
            },
            kekVaultResourceID: {
                serializedName: "kekVaultResourceID",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const IdentityDetails = {
    type: {
        name: "Composite",
        className: "IdentityDetails",
        modelProperties: {
            type: {
                defaultValue: "None",
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            principalId: {
                serializedName: "principalId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            tenantId: {
                serializedName: "tenantId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const UpdateJobParameters = {
    type: {
        name: "Composite",
        className: "UpdateJobParameters",
        modelProperties: {
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            },
            cancelRequested: {
                defaultValue: false,
                serializedName: "properties.cancelRequested",
                type: {
                    name: "Boolean"
                }
            },
            state: {
                serializedName: "properties.state",
                type: {
                    name: "String"
                }
            },
            returnAddress: {
                serializedName: "properties.returnAddress",
                type: {
                    name: "Composite",
                    className: "ReturnAddress"
                }
            },
            returnShipping: {
                serializedName: "properties.returnShipping",
                type: {
                    name: "Composite",
                    className: "ReturnShipping"
                }
            },
            deliveryPackage: {
                serializedName: "properties.deliveryPackage",
                type: {
                    name: "Composite",
                    className: "DeliveryPackageInformation"
                }
            },
            logLevel: {
                serializedName: "properties.logLevel",
                type: {
                    name: "String"
                }
            },
            backupDriveManifest: {
                defaultValue: false,
                serializedName: "properties.backupDriveManifest",
                type: {
                    name: "Boolean"
                }
            },
            driveList: {
                serializedName: "properties.driveList",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DriveStatus"
                        }
                    }
                }
            }
        }
    }
};
const PutJobParameters = {
    type: {
        name: "Composite",
        className: "PutJobParameters",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "JobDetails"
                }
            }
        }
    }
};
const GetBitLockerKeysResponse = {
    type: {
        name: "Composite",
        className: "GetBitLockerKeysResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DriveBitLockerKey"
                        }
                    }
                }
            }
        }
    }
};
const DriveBitLockerKey = {
    type: {
        name: "Composite",
        className: "DriveBitLockerKey",
        modelProperties: {
            bitLockerKey: {
                serializedName: "bitLockerKey",
                type: {
                    name: "String"
                }
            },
            driveId: {
                serializedName: "driveId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ListOperationsResponse = {
    type: {
        name: "Composite",
        className: "ListOperationsResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Operation"
                        }
                    }
                }
            }
        }
    }
};
const Operation = {
    type: {
        name: "Composite",
        className: "Operation",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            provider: {
                serializedName: "display.provider",
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "display.resource",
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "display.operation",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "display.description",
                type: {
                    name: "String"
                }
            }
        }
    }
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    LocationsResponse: LocationsResponse,
    Location: Location,
    ErrorResponse: ErrorResponse,
    ErrorResponseErrorDetailsItem: ErrorResponseErrorDetailsItem,
    ListJobsResponse: ListJobsResponse,
    JobResponse: JobResponse,
    SystemData: SystemData,
    JobDetails: JobDetails,
    ReturnAddress: ReturnAddress,
    ReturnShipping: ReturnShipping,
    ShippingInformation: ShippingInformation,
    DeliveryPackageInformation: DeliveryPackageInformation,
    PackageInformation: PackageInformation,
    DriveStatus: DriveStatus,
    Export: Export,
    EncryptionKeyDetails: EncryptionKeyDetails,
    IdentityDetails: IdentityDetails,
    UpdateJobParameters: UpdateJobParameters,
    PutJobParameters: PutJobParameters,
    GetBitLockerKeysResponse: GetBitLockerKeysResponse,
    DriveBitLockerKey: DriveBitLockerKey,
    ListOperationsResponse: ListOperationsResponse,
    Operation: Operation
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2021-01-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const acceptLanguage = {
    parameterPath: "acceptLanguage",
    mapper: {
        serializedName: "Accept-Language",
        type: {
            name: "String"
        }
    }
};
const locationName = {
    parameterPath: "locationName",
    mapper: {
        serializedName: "locationName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const top = {
    parameterPath: ["options", "top"],
    mapper: {
        serializedName: "$top",
        type: {
            name: "Number"
        }
    }
};
const filter = {
    parameterPath: ["options", "filter"],
    mapper: {
        serializedName: "$filter",
        type: {
            name: "String"
        }
    }
};
const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const jobName = {
    parameterPath: "jobName",
    mapper: {
        serializedName: "jobName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const body = {
    parameterPath: "body",
    mapper: UpdateJobParameters
};
const body1 = {
    parameterPath: "body",
    mapper: PutJobParameters
};
const clientTenantId = {
    parameterPath: ["options", "clientTenantId"],
    mapper: {
        serializedName: "x-ms-client-tenant-id",
        type: {
            name: "String"
        }
    }
};
const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Locations operations. */
class LocationsImpl {
    /**
     * Initialize a new instance of the class Locations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Returns a list of locations to which you can ship the disks associated with an import or export job.
     * A location is a Microsoft data center region.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            result = yield tslib.__await(this._list(options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Returns a list of locations to which you can ship the disks associated with an import or export job.
     * A location is a Microsoft data center region.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$2);
    }
    /**
     * Returns the details about a location to which you can ship the disks associated with an import or
     * export job. A location is an Azure region.
     * @param locationName The name of the location. For example, West US or westus.
     * @param options The options parameters.
     */
    get(locationName, options) {
        return this.client.sendOperationRequest({ locationName, options }, getOperationSpec$1);
    }
}
// Operation Specifications
const serializer$3 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$2 = {
    path: "/providers/Microsoft.ImportExport/locations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: LocationsResponse
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept, acceptLanguage],
    serializer: serializer$3
};
const getOperationSpec$1 = {
    path: "/providers/Microsoft.ImportExport/locations/{locationName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Location
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, locationName],
    headerParameters: [accept, acceptLanguage],
    serializer: serializer$3
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Jobs operations. */
class JobsImpl {
    /**
     * Initialize a new instance of the class Jobs class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Returns all active and completed jobs in a subscription.
     * @param options The options parameters.
     */
    listBySubscription(options) {
        const iter = this.listBySubscriptionPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listBySubscriptionPagingPage(options, settings);
            }
        };
    }
    listBySubscriptionPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listBySubscription(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listBySubscriptionNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listBySubscriptionPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listBySubscriptionPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Returns all active and completed jobs in a resource group.
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the
     *                          user subscription.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName, options) {
        const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByResourceGroupPagingPage(resourceGroupName, options, settings);
            }
        };
    }
    listByResourceGroupPagingPage(resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByResourceGroup(resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByResourceGroupNext(resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByResourceGroupPagingAll(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByResourceGroupPagingPage(resourceGroupName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Returns all active and completed jobs in a subscription.
     * @param options The options parameters.
     */
    _listBySubscription(options) {
        return this.client.sendOperationRequest({ options }, listBySubscriptionOperationSpec);
    }
    /**
     * Returns all active and completed jobs in a resource group.
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the
     *                          user subscription.
     * @param options The options parameters.
     */
    _listByResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listByResourceGroupOperationSpec);
    }
    /**
     * Gets information about an existing job.
     * @param jobName The name of the import/export job.
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the
     *                          user subscription.
     * @param options The options parameters.
     */
    get(jobName, resourceGroupName, options) {
        return this.client.sendOperationRequest({ jobName, resourceGroupName, options }, getOperationSpec);
    }
    /**
     * Updates specific properties of a job. You can call this operation to notify the Import/Export
     * service that the hard drives comprising the import or export job have been shipped to the Microsoft
     * data center. It can also be used to cancel an existing job.
     * @param jobName The name of the import/export job.
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the
     *                          user subscription.
     * @param body The parameters to update in the job
     * @param options The options parameters.
     */
    update(jobName, resourceGroupName, body, options) {
        return this.client.sendOperationRequest({ jobName, resourceGroupName, body, options }, updateOperationSpec);
    }
    /**
     * Creates a new job or updates an existing job in the specified subscription.
     * @param jobName The name of the import/export job.
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the
     *                          user subscription.
     * @param body The parameters used for creating the job
     * @param options The options parameters.
     */
    create(jobName, resourceGroupName, body, options) {
        return this.client.sendOperationRequest({ jobName, resourceGroupName, body, options }, createOperationSpec);
    }
    /**
     * Deletes an existing job. Only jobs in the Creating or Completed states can be deleted.
     * @param jobName The name of the import/export job.
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the
     *                          user subscription.
     * @param options The options parameters.
     */
    delete(jobName, resourceGroupName, options) {
        return this.client.sendOperationRequest({ jobName, resourceGroupName, options }, deleteOperationSpec);
    }
    /**
     * ListBySubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
     * @param options The options parameters.
     */
    _listBySubscriptionNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listBySubscriptionNextOperationSpec);
    }
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the
     *                          user subscription.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    _listByResourceGroupNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, listByResourceGroupNextOperationSpec);
    }
}
// Operation Specifications
const serializer$2 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listBySubscriptionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.ImportExport/jobs",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ListJobsResponse
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion, top, filter],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept, acceptLanguage],
    serializer: serializer$2
};
const listByResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ImportExport/jobs",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ListJobsResponse
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion, top, filter],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept, acceptLanguage],
    serializer: serializer$2
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ImportExport/jobs/{jobName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: JobResponse
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        jobName
    ],
    headerParameters: [accept, acceptLanguage],
    serializer: serializer$2
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ImportExport/jobs/{jobName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: JobResponse
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: body,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        jobName
    ],
    headerParameters: [
        accept,
        acceptLanguage,
        contentType
    ],
    mediaType: "json",
    serializer: serializer$2
};
const createOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ImportExport/jobs/{jobName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: JobResponse
        },
        201: {
            bodyMapper: JobResponse
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: body1,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        jobName
    ],
    headerParameters: [
        accept,
        acceptLanguage,
        contentType,
        clientTenantId
    ],
    mediaType: "json",
    serializer: serializer$2
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ImportExport/jobs/{jobName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        jobName
    ],
    headerParameters: [accept, acceptLanguage],
    serializer: serializer$2
};
const listBySubscriptionNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ListJobsResponse
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept, acceptLanguage],
    serializer: serializer$2
};
const listByResourceGroupNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ListJobsResponse
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        nextLink
    ],
    headerParameters: [accept, acceptLanguage],
    serializer: serializer$2
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing BitLockerKeys operations. */
class BitLockerKeysImpl {
    /**
     * Initialize a new instance of the class BitLockerKeys class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Returns the BitLocker Keys for all drives in the specified job.
     * @param jobName The name of the import/export job.
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the
     *                          user subscription.
     * @param options The options parameters.
     */
    list(jobName, resourceGroupName, options) {
        const iter = this.listPagingAll(jobName, resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(jobName, resourceGroupName, options, settings);
            }
        };
    }
    listPagingPage(jobName, resourceGroupName, options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            result = yield tslib.__await(this._list(jobName, resourceGroupName, options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listPagingAll(jobName, resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(jobName, resourceGroupName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Returns the BitLocker Keys for all drives in the specified job.
     * @param jobName The name of the import/export job.
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the
     *                          user subscription.
     * @param options The options parameters.
     */
    _list(jobName, resourceGroupName, options) {
        return this.client.sendOperationRequest({ jobName, resourceGroupName, options }, listOperationSpec$1);
    }
}
// Operation Specifications
const serializer$1 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ImportExport/jobs/{jobName}/listBitLockerKeys",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: GetBitLockerKeysResponse
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        jobName
    ],
    headerParameters: [accept, acceptLanguage],
    serializer: serializer$1
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Operations operations. */
class OperationsImpl {
    /**
     * Initialize a new instance of the class Operations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Returns the list of operations supported by the import/export resource provider.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            result = yield tslib.__await(this._list(options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Returns the list of operations supported by the import/export resource provider.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/providers/Microsoft.ImportExport/operations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ListOperationsResponse
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept, acceptLanguage],
    serializer
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class StorageImportExport extends coreClient__namespace.ServiceClient {
    /**
     * Initializes a new instance of the StorageImportExport class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The subscription ID for the Azure user.
     * @param options The parameter options
     */
    constructor(credentials, subscriptionId, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        if (subscriptionId === undefined) {
            throw new Error("'subscriptionId' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-storageimportexport/2.1.0`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName
            });
            this.pipeline.addPolicy(coreRestPipeline__namespace.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient__namespace.authorizeRequestOnClaimChallenge
                }
            }));
        }
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.apiVersion = options.apiVersion || "2021-01-01";
        this.locations = new LocationsImpl(this);
        this.jobs = new JobsImpl(this);
        this.bitLockerKeys = new BitLockerKeysImpl(this);
        this.operations = new OperationsImpl(this);
        this.addCustomApiVersionPolicy(options.apiVersion);
    }
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    addCustomApiVersionPolicy(apiVersion) {
        if (!apiVersion) {
            return;
        }
        const apiVersionPolicy = {
            name: "CustomApiVersionPolicy",
            sendRequest(request, next) {
                return tslib.__awaiter(this, void 0, void 0, function* () {
                    const param = request.url.split("?");
                    if (param.length > 1) {
                        const newParams = param[1].split("&").map((item) => {
                            if (item.indexOf("api-version") > -1) {
                                return "api-version=" + apiVersion;
                            }
                            else {
                                return item;
                            }
                        });
                        request.url = param[0] + "?" + newParams.join("&");
                    }
                    return next(request);
                });
            }
        };
        this.pipeline.addPolicy(apiVersionPolicy);
    }
}

exports.StorageImportExport = StorageImportExport;
exports.getContinuationToken = getContinuationToken;
//# sourceMappingURL=index.js.map
