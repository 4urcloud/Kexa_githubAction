import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Jobs } from "../operationsInterfaces";
import { StorageImportExport } from "../storageImportExport";
import { JobResponse, JobsListBySubscriptionOptionalParams, JobsListByResourceGroupOptionalParams, JobsGetOptionalParams, JobsGetResponse, UpdateJobParameters, JobsUpdateOptionalParams, JobsUpdateResponse, PutJobParameters, JobsCreateOptionalParams, JobsCreateResponse, JobsDeleteOptionalParams } from "../models";
/** Class containing Jobs operations. */
export declare class JobsImpl implements Jobs {
    private readonly client;
    /**
     * Initialize a new instance of the class Jobs class.
     * @param client Reference to the service client
     */
    constructor(client: StorageImportExport);
    /**
     * Returns all active and completed jobs in a subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: JobsListBySubscriptionOptionalParams): PagedAsyncIterableIterator<JobResponse>;
    private listBySubscriptionPagingPage;
    private listBySubscriptionPagingAll;
    /**
     * Returns all active and completed jobs in a resource group.
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the
     *                          user subscription.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: JobsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<JobResponse>;
    private listByResourceGroupPagingPage;
    private listByResourceGroupPagingAll;
    /**
     * Returns all active and completed jobs in a subscription.
     * @param options The options parameters.
     */
    private _listBySubscription;
    /**
     * Returns all active and completed jobs in a resource group.
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the
     *                          user subscription.
     * @param options The options parameters.
     */
    private _listByResourceGroup;
    /**
     * Gets information about an existing job.
     * @param jobName The name of the import/export job.
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the
     *                          user subscription.
     * @param options The options parameters.
     */
    get(jobName: string, resourceGroupName: string, options?: JobsGetOptionalParams): Promise<JobsGetResponse>;
    /**
     * Updates specific properties of a job. You can call this operation to notify the Import/Export
     * service that the hard drives comprising the import or export job have been shipped to the Microsoft
     * data center. It can also be used to cancel an existing job.
     * @param jobName The name of the import/export job.
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the
     *                          user subscription.
     * @param body The parameters to update in the job
     * @param options The options parameters.
     */
    update(jobName: string, resourceGroupName: string, body: UpdateJobParameters, options?: JobsUpdateOptionalParams): Promise<JobsUpdateResponse>;
    /**
     * Creates a new job or updates an existing job in the specified subscription.
     * @param jobName The name of the import/export job.
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the
     *                          user subscription.
     * @param body The parameters used for creating the job
     * @param options The options parameters.
     */
    create(jobName: string, resourceGroupName: string, body: PutJobParameters, options?: JobsCreateOptionalParams): Promise<JobsCreateResponse>;
    /**
     * Deletes an existing job. Only jobs in the Creating or Completed states can be deleted.
     * @param jobName The name of the import/export job.
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the
     *                          user subscription.
     * @param options The options parameters.
     */
    delete(jobName: string, resourceGroupName: string, options?: JobsDeleteOptionalParams): Promise<void>;
    /**
     * ListBySubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
     * @param options The options parameters.
     */
    private _listBySubscriptionNext;
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the
     *                          user subscription.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    private _listByResourceGroupNext;
}
//# sourceMappingURL=jobs.d.ts.map