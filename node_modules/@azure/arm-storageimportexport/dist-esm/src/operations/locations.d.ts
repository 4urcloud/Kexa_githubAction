import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Locations } from "../operationsInterfaces";
import { StorageImportExport } from "../storageImportExport";
import { Location, LocationsListOptionalParams, LocationsGetOptionalParams, LocationsGetResponse } from "../models";
/** Class containing Locations operations. */
export declare class LocationsImpl implements Locations {
    private readonly client;
    /**
     * Initialize a new instance of the class Locations class.
     * @param client Reference to the service client
     */
    constructor(client: StorageImportExport);
    /**
     * Returns a list of locations to which you can ship the disks associated with an import or export job.
     * A location is a Microsoft data center region.
     * @param options The options parameters.
     */
    list(options?: LocationsListOptionalParams): PagedAsyncIterableIterator<Location>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Returns a list of locations to which you can ship the disks associated with an import or export job.
     * A location is a Microsoft data center region.
     * @param options The options parameters.
     */
    private _list;
    /**
     * Returns the details about a location to which you can ship the disks associated with an import or
     * export job. A location is an Azure region.
     * @param locationName The name of the location. For example, West US or westus.
     * @param options The options parameters.
     */
    get(locationName: string, options?: LocationsGetOptionalParams): Promise<LocationsGetResponse>;
}
//# sourceMappingURL=locations.d.ts.map