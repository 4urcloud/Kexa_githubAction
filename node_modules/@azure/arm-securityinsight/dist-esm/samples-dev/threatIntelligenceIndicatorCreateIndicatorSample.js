/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { SecurityInsights } from "@azure/arm-securityinsight";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to Create a new threat intelligence indicator.
 *
 * @summary Create a new threat intelligence indicator.
 * x-ms-original-file: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2022-09-01-preview/examples/threatintelligence/CreateThreatIntelligence.json
 */
function createANewThreatIntelligence() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["SECURITYINSIGHT_SUBSCRIPTION_ID"] ||
            "bd794837-4d29-4647-9105-6339bfdb4e6a";
        const resourceGroupName = process.env["SECURITYINSIGHT_RESOURCE_GROUP"] || "myRg";
        const workspaceName = "myWorkspace";
        const threatIntelligenceProperties = {
            description: "debugging indicators",
            confidence: 78,
            createdByRef: "contoso@contoso.com",
            displayName: "new schema",
            externalReferences: [],
            granularMarkings: [],
            killChainPhases: [],
            kind: "indicator",
            labels: [],
            modified: "",
            pattern: "[url:value = 'https://www.contoso.com']",
            patternType: "url",
            revoked: false,
            source: "Azure Sentinel",
            threatIntelligenceTags: ["new schema"],
            threatTypes: ["compromised"],
            validFrom: "2021-09-15T17:44:00.114052Z",
            validUntil: ""
        };
        const credential = new DefaultAzureCredential();
        const client = new SecurityInsights(credential, subscriptionId);
        const result = yield client.threatIntelligenceIndicator.createIndicator(resourceGroupName, workspaceName, threatIntelligenceProperties);
        console.log(result);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        createANewThreatIntelligence();
    });
}
main().catch(console.error);
//# sourceMappingURL=threatIntelligenceIndicatorCreateIndicatorSample.js.map