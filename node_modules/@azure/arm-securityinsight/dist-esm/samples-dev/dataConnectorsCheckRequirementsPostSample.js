/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { SecurityInsights } from "@azure/arm-securityinsight";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to Get requirements state for a data connector type.
 *
 * @summary Get requirements state for a data connector type.
 * x-ms-original-file: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2022-09-01-preview/examples/dataConnectors/CheckRequirementsAzureActiveDirectoryNoAuthorization.json
 */
function checkRequirementsForAadNoAuthorization() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["SECURITYINSIGHT_SUBSCRIPTION_ID"] ||
            "d0cfe6b2-9ac0-4464-9919-dccaee2e48c0";
        const resourceGroupName = process.env["SECURITYINSIGHT_RESOURCE_GROUP"] || "myRg";
        const workspaceName = "myWorkspace";
        const dataConnectorsCheckRequirements = {
            kind: "AzureActiveDirectory",
            tenantId: "2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"
        };
        const credential = new DefaultAzureCredential();
        const client = new SecurityInsights(credential, subscriptionId);
        const result = yield client.dataConnectorsCheckRequirementsOperations.post(resourceGroupName, workspaceName, dataConnectorsCheckRequirements);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Get requirements state for a data connector type.
 *
 * @summary Get requirements state for a data connector type.
 * x-ms-original-file: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2022-09-01-preview/examples/dataConnectors/CheckRequirementsAzureActiveDirectoryNoLicense.json
 */
function checkRequirementsForAadNoLicense() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["SECURITYINSIGHT_SUBSCRIPTION_ID"] ||
            "d0cfe6b2-9ac0-4464-9919-dccaee2e48c0";
        const resourceGroupName = process.env["SECURITYINSIGHT_RESOURCE_GROUP"] || "myRg";
        const workspaceName = "myWorkspace";
        const dataConnectorsCheckRequirements = {
            kind: "AzureActiveDirectory",
            tenantId: "2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"
        };
        const credential = new DefaultAzureCredential();
        const client = new SecurityInsights(credential, subscriptionId);
        const result = yield client.dataConnectorsCheckRequirementsOperations.post(resourceGroupName, workspaceName, dataConnectorsCheckRequirements);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Get requirements state for a data connector type.
 *
 * @summary Get requirements state for a data connector type.
 * x-ms-original-file: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2022-09-01-preview/examples/dataConnectors/CheckRequirementsAzureActiveDirectory.json
 */
function checkRequirementsForAad() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["SECURITYINSIGHT_SUBSCRIPTION_ID"] ||
            "d0cfe6b2-9ac0-4464-9919-dccaee2e48c0";
        const resourceGroupName = process.env["SECURITYINSIGHT_RESOURCE_GROUP"] || "myRg";
        const workspaceName = "myWorkspace";
        const dataConnectorsCheckRequirements = {
            kind: "AzureActiveDirectory",
            tenantId: "2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"
        };
        const credential = new DefaultAzureCredential();
        const client = new SecurityInsights(credential, subscriptionId);
        const result = yield client.dataConnectorsCheckRequirementsOperations.post(resourceGroupName, workspaceName, dataConnectorsCheckRequirements);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Get requirements state for a data connector type.
 *
 * @summary Get requirements state for a data connector type.
 * x-ms-original-file: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2022-09-01-preview/examples/dataConnectors/CheckRequirementsAzureSecurityCenter.json
 */
function checkRequirementsForAsc() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["SECURITYINSIGHT_SUBSCRIPTION_ID"] ||
            "d0cfe6b2-9ac0-4464-9919-dccaee2e48c0";
        const resourceGroupName = process.env["SECURITYINSIGHT_RESOURCE_GROUP"] || "myRg";
        const workspaceName = "myWorkspace";
        const dataConnectorsCheckRequirements = {
            kind: "AzureSecurityCenter",
            subscriptionId: "c0688291-89d7-4bed-87a2-a7b1bff43f4c"
        };
        const credential = new DefaultAzureCredential();
        const client = new SecurityInsights(credential, subscriptionId);
        const result = yield client.dataConnectorsCheckRequirementsOperations.post(resourceGroupName, workspaceName, dataConnectorsCheckRequirements);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Get requirements state for a data connector type.
 *
 * @summary Get requirements state for a data connector type.
 * x-ms-original-file: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2022-09-01-preview/examples/dataConnectors/CheckRequirementsDynamics365.json
 */
function checkRequirementsForDynamics365() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["SECURITYINSIGHT_SUBSCRIPTION_ID"] ||
            "d0cfe6b2-9ac0-4464-9919-dccaee2e48c0";
        const resourceGroupName = process.env["SECURITYINSIGHT_RESOURCE_GROUP"] || "myRg";
        const workspaceName = "myWorkspace";
        const dataConnectorsCheckRequirements = {
            kind: "Dynamics365",
            tenantId: "2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"
        };
        const credential = new DefaultAzureCredential();
        const client = new SecurityInsights(credential, subscriptionId);
        const result = yield client.dataConnectorsCheckRequirementsOperations.post(resourceGroupName, workspaceName, dataConnectorsCheckRequirements);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Get requirements state for a data connector type.
 *
 * @summary Get requirements state for a data connector type.
 * x-ms-original-file: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2022-09-01-preview/examples/dataConnectors/CheckRequirementsIoT.json
 */
function checkRequirementsForIoT() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["SECURITYINSIGHT_SUBSCRIPTION_ID"] ||
            "d0cfe6b2-9ac0-4464-9919-dccaee2e48c0";
        const resourceGroupName = process.env["SECURITYINSIGHT_RESOURCE_GROUP"] || "myRg";
        const workspaceName = "myWorkspace";
        const dataConnectorsCheckRequirements = {
            kind: "IOT",
            subscriptionId: "c0688291-89d7-4bed-87a2-a7b1bff43f4c"
        };
        const credential = new DefaultAzureCredential();
        const client = new SecurityInsights(credential, subscriptionId);
        const result = yield client.dataConnectorsCheckRequirementsOperations.post(resourceGroupName, workspaceName, dataConnectorsCheckRequirements);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Get requirements state for a data connector type.
 *
 * @summary Get requirements state for a data connector type.
 * x-ms-original-file: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2022-09-01-preview/examples/dataConnectors/CheckRequirementsMicrosoftCloudAppSecurity.json
 */
function checkRequirementsForMcas() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["SECURITYINSIGHT_SUBSCRIPTION_ID"] ||
            "d0cfe6b2-9ac0-4464-9919-dccaee2e48c0";
        const resourceGroupName = process.env["SECURITYINSIGHT_RESOURCE_GROUP"] || "myRg";
        const workspaceName = "myWorkspace";
        const dataConnectorsCheckRequirements = {
            kind: "MicrosoftCloudAppSecurity",
            tenantId: "2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"
        };
        const credential = new DefaultAzureCredential();
        const client = new SecurityInsights(credential, subscriptionId);
        const result = yield client.dataConnectorsCheckRequirementsOperations.post(resourceGroupName, workspaceName, dataConnectorsCheckRequirements);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Get requirements state for a data connector type.
 *
 * @summary Get requirements state for a data connector type.
 * x-ms-original-file: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2022-09-01-preview/examples/dataConnectors/CheckRequirementsMdatp.json
 */
function checkRequirementsForMdatp() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["SECURITYINSIGHT_SUBSCRIPTION_ID"] ||
            "d0cfe6b2-9ac0-4464-9919-dccaee2e48c0";
        const resourceGroupName = process.env["SECURITYINSIGHT_RESOURCE_GROUP"] || "myRg";
        const workspaceName = "myWorkspace";
        const dataConnectorsCheckRequirements = {
            kind: "MicrosoftCloudAppSecurity",
            tenantId: "2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"
        };
        const credential = new DefaultAzureCredential();
        const client = new SecurityInsights(credential, subscriptionId);
        const result = yield client.dataConnectorsCheckRequirementsOperations.post(resourceGroupName, workspaceName, dataConnectorsCheckRequirements);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Get requirements state for a data connector type.
 *
 * @summary Get requirements state for a data connector type.
 * x-ms-original-file: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2022-09-01-preview/examples/dataConnectors/CheckRequirementsMicrosoftThreatIntelligence.json
 */
function checkRequirementsForMicrosoftThreatIntelligence() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["SECURITYINSIGHT_SUBSCRIPTION_ID"] ||
            "d0cfe6b2-9ac0-4464-9919-dccaee2e48c0";
        const resourceGroupName = process.env["SECURITYINSIGHT_RESOURCE_GROUP"] || "myRg";
        const workspaceName = "myWorkspace";
        const dataConnectorsCheckRequirements = {
            kind: "MicrosoftThreatIntelligence",
            tenantId: "2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"
        };
        const credential = new DefaultAzureCredential();
        const client = new SecurityInsights(credential, subscriptionId);
        const result = yield client.dataConnectorsCheckRequirementsOperations.post(resourceGroupName, workspaceName, dataConnectorsCheckRequirements);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Get requirements state for a data connector type.
 *
 * @summary Get requirements state for a data connector type.
 * x-ms-original-file: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2022-09-01-preview/examples/dataConnectors/CheckRequirementsMicrosoftThreatProtection.json
 */
function checkRequirementsForMicrosoftThreatProtection() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["SECURITYINSIGHT_SUBSCRIPTION_ID"] ||
            "d0cfe6b2-9ac0-4464-9919-dccaee2e48c0";
        const resourceGroupName = process.env["SECURITYINSIGHT_RESOURCE_GROUP"] || "myRg";
        const workspaceName = "myWorkspace";
        const dataConnectorsCheckRequirements = {
            kind: "MicrosoftThreatProtection",
            tenantId: "2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"
        };
        const credential = new DefaultAzureCredential();
        const client = new SecurityInsights(credential, subscriptionId);
        const result = yield client.dataConnectorsCheckRequirementsOperations.post(resourceGroupName, workspaceName, dataConnectorsCheckRequirements);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Get requirements state for a data connector type.
 *
 * @summary Get requirements state for a data connector type.
 * x-ms-original-file: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2022-09-01-preview/examples/dataConnectors/CheckRequirementsOffice365Project.json
 */
function checkRequirementsForOffice365Project() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["SECURITYINSIGHT_SUBSCRIPTION_ID"] ||
            "d0cfe6b2-9ac0-4464-9919-dccaee2e48c0";
        const resourceGroupName = process.env["SECURITYINSIGHT_RESOURCE_GROUP"] || "myRg";
        const workspaceName = "myWorkspace";
        const dataConnectorsCheckRequirements = {
            kind: "Office365Project",
            tenantId: "2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"
        };
        const credential = new DefaultAzureCredential();
        const client = new SecurityInsights(credential, subscriptionId);
        const result = yield client.dataConnectorsCheckRequirementsOperations.post(resourceGroupName, workspaceName, dataConnectorsCheckRequirements);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Get requirements state for a data connector type.
 *
 * @summary Get requirements state for a data connector type.
 * x-ms-original-file: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2022-09-01-preview/examples/dataConnectors/CheckRequirementsOfficeATP.json
 */
function checkRequirementsForOfficeAtp() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["SECURITYINSIGHT_SUBSCRIPTION_ID"] ||
            "d0cfe6b2-9ac0-4464-9919-dccaee2e48c0";
        const resourceGroupName = process.env["SECURITYINSIGHT_RESOURCE_GROUP"] || "myRg";
        const workspaceName = "myWorkspace";
        const dataConnectorsCheckRequirements = {
            kind: "OfficeATP",
            tenantId: "2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"
        };
        const credential = new DefaultAzureCredential();
        const client = new SecurityInsights(credential, subscriptionId);
        const result = yield client.dataConnectorsCheckRequirementsOperations.post(resourceGroupName, workspaceName, dataConnectorsCheckRequirements);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Get requirements state for a data connector type.
 *
 * @summary Get requirements state for a data connector type.
 * x-ms-original-file: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2022-09-01-preview/examples/dataConnectors/CheckRequirementsOfficeIRM.json
 */
function checkRequirementsForOfficeIrm() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["SECURITYINSIGHT_SUBSCRIPTION_ID"] ||
            "d0cfe6b2-9ac0-4464-9919-dccaee2e48c0";
        const resourceGroupName = process.env["SECURITYINSIGHT_RESOURCE_GROUP"] || "myRg";
        const workspaceName = "myWorkspace";
        const dataConnectorsCheckRequirements = {
            kind: "OfficeIRM",
            tenantId: "2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"
        };
        const credential = new DefaultAzureCredential();
        const client = new SecurityInsights(credential, subscriptionId);
        const result = yield client.dataConnectorsCheckRequirementsOperations.post(resourceGroupName, workspaceName, dataConnectorsCheckRequirements);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Get requirements state for a data connector type.
 *
 * @summary Get requirements state for a data connector type.
 * x-ms-original-file: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2022-09-01-preview/examples/dataConnectors/CheckRequirementsOfficePowerBI.json
 */
function checkRequirementsForOfficePowerBi() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["SECURITYINSIGHT_SUBSCRIPTION_ID"] ||
            "d0cfe6b2-9ac0-4464-9919-dccaee2e48c0";
        const resourceGroupName = process.env["SECURITYINSIGHT_RESOURCE_GROUP"] || "myRg";
        const workspaceName = "myWorkspace";
        const dataConnectorsCheckRequirements = {
            kind: "OfficePowerBI",
            tenantId: "2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"
        };
        const credential = new DefaultAzureCredential();
        const client = new SecurityInsights(credential, subscriptionId);
        const result = yield client.dataConnectorsCheckRequirementsOperations.post(resourceGroupName, workspaceName, dataConnectorsCheckRequirements);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Get requirements state for a data connector type.
 *
 * @summary Get requirements state for a data connector type.
 * x-ms-original-file: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2022-09-01-preview/examples/dataConnectors/CheckRequirementsThreatIntelligenceTaxii.json
 */
function checkRequirementsForTiTaxii() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["SECURITYINSIGHT_SUBSCRIPTION_ID"] ||
            "d0cfe6b2-9ac0-4464-9919-dccaee2e48c0";
        const resourceGroupName = process.env["SECURITYINSIGHT_RESOURCE_GROUP"] || "myRg";
        const workspaceName = "myWorkspace";
        const dataConnectorsCheckRequirements = {
            kind: "ThreatIntelligenceTaxii",
            tenantId: "2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"
        };
        const credential = new DefaultAzureCredential();
        const client = new SecurityInsights(credential, subscriptionId);
        const result = yield client.dataConnectorsCheckRequirementsOperations.post(resourceGroupName, workspaceName, dataConnectorsCheckRequirements);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Get requirements state for a data connector type.
 *
 * @summary Get requirements state for a data connector type.
 * x-ms-original-file: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2022-09-01-preview/examples/dataConnectors/CheckRequirementsThreatIntelligence.json
 */
function checkRequirementsForTi() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["SECURITYINSIGHT_SUBSCRIPTION_ID"] ||
            "d0cfe6b2-9ac0-4464-9919-dccaee2e48c0";
        const resourceGroupName = process.env["SECURITYINSIGHT_RESOURCE_GROUP"] || "myRg";
        const workspaceName = "myWorkspace";
        const dataConnectorsCheckRequirements = {
            kind: "ThreatIntelligence",
            tenantId: "2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"
        };
        const credential = new DefaultAzureCredential();
        const client = new SecurityInsights(credential, subscriptionId);
        const result = yield client.dataConnectorsCheckRequirementsOperations.post(resourceGroupName, workspaceName, dataConnectorsCheckRequirements);
        console.log(result);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        checkRequirementsForAadNoAuthorization();
        checkRequirementsForAadNoLicense();
        checkRequirementsForAad();
        checkRequirementsForAsc();
        checkRequirementsForDynamics365();
        checkRequirementsForIoT();
        checkRequirementsForMcas();
        checkRequirementsForMdatp();
        checkRequirementsForMicrosoftThreatIntelligence();
        checkRequirementsForMicrosoftThreatProtection();
        checkRequirementsForOffice365Project();
        checkRequirementsForOfficeAtp();
        checkRequirementsForOfficeIrm();
        checkRequirementsForOfficePowerBi();
        checkRequirementsForTiTaxii();
        checkRequirementsForTi();
    });
}
main().catch(console.error);
//# sourceMappingURL=dataConnectorsCheckRequirementsPostSample.js.map