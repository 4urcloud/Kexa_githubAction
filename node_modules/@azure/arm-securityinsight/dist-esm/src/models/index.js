/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link AlertRuleKind} that the service accepts. */
export var KnownAlertRuleKind;
(function (KnownAlertRuleKind) {
    /** Scheduled */
    KnownAlertRuleKind["Scheduled"] = "Scheduled";
    /** MicrosoftSecurityIncidentCreation */
    KnownAlertRuleKind["MicrosoftSecurityIncidentCreation"] = "MicrosoftSecurityIncidentCreation";
    /** Fusion */
    KnownAlertRuleKind["Fusion"] = "Fusion";
    /** MLBehaviorAnalytics */
    KnownAlertRuleKind["MLBehaviorAnalytics"] = "MLBehaviorAnalytics";
    /** ThreatIntelligence */
    KnownAlertRuleKind["ThreatIntelligence"] = "ThreatIntelligence";
    /** NRT */
    KnownAlertRuleKind["NRT"] = "NRT";
})(KnownAlertRuleKind || (KnownAlertRuleKind = {}));
/** Known values of {@link CreatedByType} that the service accepts. */
export var KnownCreatedByType;
(function (KnownCreatedByType) {
    /** User */
    KnownCreatedByType["User"] = "User";
    /** Application */
    KnownCreatedByType["Application"] = "Application";
    /** ManagedIdentity */
    KnownCreatedByType["ManagedIdentity"] = "ManagedIdentity";
    /** Key */
    KnownCreatedByType["Key"] = "Key";
})(KnownCreatedByType || (KnownCreatedByType = {}));
/** Known values of {@link TriggersOn} that the service accepts. */
export var KnownTriggersOn;
(function (KnownTriggersOn) {
    /** Trigger on Incidents */
    KnownTriggersOn["Incidents"] = "Incidents";
    /** Trigger on Alerts */
    KnownTriggersOn["Alerts"] = "Alerts";
})(KnownTriggersOn || (KnownTriggersOn = {}));
/** Known values of {@link TriggersWhen} that the service accepts. */
export var KnownTriggersWhen;
(function (KnownTriggersWhen) {
    /** Trigger on created objects */
    KnownTriggersWhen["Created"] = "Created";
    /** Trigger on updated objects */
    KnownTriggersWhen["Updated"] = "Updated";
})(KnownTriggersWhen || (KnownTriggersWhen = {}));
/** Known values of {@link ConditionType} that the service accepts. */
export var KnownConditionType;
(function (KnownConditionType) {
    /** Evaluate an object property value */
    KnownConditionType["Property"] = "Property";
    /** Evaluate an object array property value */
    KnownConditionType["PropertyArray"] = "PropertyArray";
    /** Evaluate an object property changed value */
    KnownConditionType["PropertyChanged"] = "PropertyChanged";
    /** Evaluate an object array property changed value */
    KnownConditionType["PropertyArrayChanged"] = "PropertyArrayChanged";
    /** Apply a boolean operator (e.g AND, OR) to conditions */
    KnownConditionType["Boolean"] = "Boolean";
})(KnownConditionType || (KnownConditionType = {}));
/** Known values of {@link ActionType} that the service accepts. */
export var KnownActionType;
(function (KnownActionType) {
    /** Modify an object's properties */
    KnownActionType["ModifyProperties"] = "ModifyProperties";
    /** Run a playbook on an object */
    KnownActionType["RunPlaybook"] = "RunPlaybook";
})(KnownActionType || (KnownActionType = {}));
/** Known values of {@link IncidentSeverity} that the service accepts. */
export var KnownIncidentSeverity;
(function (KnownIncidentSeverity) {
    /** High severity */
    KnownIncidentSeverity["High"] = "High";
    /** Medium severity */
    KnownIncidentSeverity["Medium"] = "Medium";
    /** Low severity */
    KnownIncidentSeverity["Low"] = "Low";
    /** Informational severity */
    KnownIncidentSeverity["Informational"] = "Informational";
})(KnownIncidentSeverity || (KnownIncidentSeverity = {}));
/** Known values of {@link AttackTactic} that the service accepts. */
export var KnownAttackTactic;
(function (KnownAttackTactic) {
    /** Reconnaissance */
    KnownAttackTactic["Reconnaissance"] = "Reconnaissance";
    /** ResourceDevelopment */
    KnownAttackTactic["ResourceDevelopment"] = "ResourceDevelopment";
    /** InitialAccess */
    KnownAttackTactic["InitialAccess"] = "InitialAccess";
    /** Execution */
    KnownAttackTactic["Execution"] = "Execution";
    /** Persistence */
    KnownAttackTactic["Persistence"] = "Persistence";
    /** PrivilegeEscalation */
    KnownAttackTactic["PrivilegeEscalation"] = "PrivilegeEscalation";
    /** DefenseEvasion */
    KnownAttackTactic["DefenseEvasion"] = "DefenseEvasion";
    /** CredentialAccess */
    KnownAttackTactic["CredentialAccess"] = "CredentialAccess";
    /** Discovery */
    KnownAttackTactic["Discovery"] = "Discovery";
    /** LateralMovement */
    KnownAttackTactic["LateralMovement"] = "LateralMovement";
    /** Collection */
    KnownAttackTactic["Collection"] = "Collection";
    /** Exfiltration */
    KnownAttackTactic["Exfiltration"] = "Exfiltration";
    /** CommandAndControl */
    KnownAttackTactic["CommandAndControl"] = "CommandAndControl";
    /** Impact */
    KnownAttackTactic["Impact"] = "Impact";
    /** PreAttack */
    KnownAttackTactic["PreAttack"] = "PreAttack";
    /** ImpairProcessControl */
    KnownAttackTactic["ImpairProcessControl"] = "ImpairProcessControl";
    /** InhibitResponseFunction */
    KnownAttackTactic["InhibitResponseFunction"] = "InhibitResponseFunction";
})(KnownAttackTactic || (KnownAttackTactic = {}));
/** Known values of {@link EntityKind} that the service accepts. */
export var KnownEntityKind;
(function (KnownEntityKind) {
    /** Entity represents account in the system. */
    KnownEntityKind["Account"] = "Account";
    /** Entity represents host in the system. */
    KnownEntityKind["Host"] = "Host";
    /** Entity represents file in the system. */
    KnownEntityKind["File"] = "File";
    /** Entity represents azure resource in the system. */
    KnownEntityKind["AzureResource"] = "AzureResource";
    /** Entity represents cloud application in the system. */
    KnownEntityKind["CloudApplication"] = "CloudApplication";
    /** Entity represents dns resolution in the system. */
    KnownEntityKind["DnsResolution"] = "DnsResolution";
    /** Entity represents file hash in the system. */
    KnownEntityKind["FileHash"] = "FileHash";
    /** Entity represents ip in the system. */
    KnownEntityKind["Ip"] = "Ip";
    /** Entity represents malware in the system. */
    KnownEntityKind["Malware"] = "Malware";
    /** Entity represents process in the system. */
    KnownEntityKind["Process"] = "Process";
    /** Entity represents registry key in the system. */
    KnownEntityKind["RegistryKey"] = "RegistryKey";
    /** Entity represents registry value in the system. */
    KnownEntityKind["RegistryValue"] = "RegistryValue";
    /** Entity represents security group in the system. */
    KnownEntityKind["SecurityGroup"] = "SecurityGroup";
    /** Entity represents url in the system. */
    KnownEntityKind["Url"] = "Url";
    /** Entity represents IoT device in the system. */
    KnownEntityKind["IoTDevice"] = "IoTDevice";
    /** Entity represents security alert in the system. */
    KnownEntityKind["SecurityAlert"] = "SecurityAlert";
    /** Entity represents bookmark in the system. */
    KnownEntityKind["Bookmark"] = "Bookmark";
    /** Entity represents mail cluster in the system. */
    KnownEntityKind["MailCluster"] = "MailCluster";
    /** Entity represents mail message in the system. */
    KnownEntityKind["MailMessage"] = "MailMessage";
    /** Entity represents mailbox in the system. */
    KnownEntityKind["Mailbox"] = "Mailbox";
    /** Entity represents submission mail in the system. */
    KnownEntityKind["SubmissionMail"] = "SubmissionMail";
    /** Entity represents network interface in the system. */
    KnownEntityKind["Nic"] = "Nic";
})(KnownEntityKind || (KnownEntityKind = {}));
/** Known values of {@link EntityTimelineKind} that the service accepts. */
export var KnownEntityTimelineKind;
(function (KnownEntityTimelineKind) {
    /** activity */
    KnownEntityTimelineKind["Activity"] = "Activity";
    /** bookmarks */
    KnownEntityTimelineKind["Bookmark"] = "Bookmark";
    /** security alerts */
    KnownEntityTimelineKind["SecurityAlert"] = "SecurityAlert";
    /** anomaly */
    KnownEntityTimelineKind["Anomaly"] = "Anomaly";
})(KnownEntityTimelineKind || (KnownEntityTimelineKind = {}));
/** Known values of {@link EntityItemQueryKind} that the service accepts. */
export var KnownEntityItemQueryKind;
(function (KnownEntityItemQueryKind) {
    /** insight */
    KnownEntityItemQueryKind["Insight"] = "Insight";
})(KnownEntityItemQueryKind || (KnownEntityItemQueryKind = {}));
/** Known values of {@link EntityQueryKind} that the service accepts. */
export var KnownEntityQueryKind;
(function (KnownEntityQueryKind) {
    /** Expansion */
    KnownEntityQueryKind["Expansion"] = "Expansion";
    /** Insight */
    KnownEntityQueryKind["Insight"] = "Insight";
    /** Activity */
    KnownEntityQueryKind["Activity"] = "Activity";
})(KnownEntityQueryKind || (KnownEntityQueryKind = {}));
/** Known values of {@link GetInsightsError} that the service accepts. */
export var KnownGetInsightsError;
(function (KnownGetInsightsError) {
    /** Insight */
    KnownGetInsightsError["Insight"] = "Insight";
})(KnownGetInsightsError || (KnownGetInsightsError = {}));
/** Known values of {@link Enum13} that the service accepts. */
export var KnownEnum13;
(function (KnownEnum13) {
    /** Expansion */
    KnownEnum13["Expansion"] = "Expansion";
    /** Activity */
    KnownEnum13["Activity"] = "Activity";
})(KnownEnum13 || (KnownEnum13 = {}));
/** Known values of {@link CustomEntityQueryKind} that the service accepts. */
export var KnownCustomEntityQueryKind;
(function (KnownCustomEntityQueryKind) {
    /** Activity */
    KnownCustomEntityQueryKind["Activity"] = "Activity";
})(KnownCustomEntityQueryKind || (KnownCustomEntityQueryKind = {}));
/** Known values of {@link EntityQueryTemplateKind} that the service accepts. */
export var KnownEntityQueryTemplateKind;
(function (KnownEntityQueryTemplateKind) {
    /** Activity */
    KnownEntityQueryTemplateKind["Activity"] = "Activity";
})(KnownEntityQueryTemplateKind || (KnownEntityQueryTemplateKind = {}));
/** Known values of {@link IngestionMode} that the service accepts. */
export var KnownIngestionMode;
(function (KnownIngestionMode) {
    /** No records should be ingested when invalid records are detected. */
    KnownIngestionMode["IngestOnlyIfAllAreValid"] = "IngestOnlyIfAllAreValid";
    /** Valid records should still be ingested when invalid records are detected. */
    KnownIngestionMode["IngestAnyValidRecords"] = "IngestAnyValidRecords";
    /** Unspecified */
    KnownIngestionMode["Unspecified"] = "Unspecified";
})(KnownIngestionMode || (KnownIngestionMode = {}));
/** Known values of {@link FileImportContentType} that the service accepts. */
export var KnownFileImportContentType;
(function (KnownFileImportContentType) {
    /** File containing records with the core fields of an indicator, plus the observables to construct the STIX pattern. */
    KnownFileImportContentType["BasicIndicator"] = "BasicIndicator";
    /** File containing STIX indicators. */
    KnownFileImportContentType["StixIndicator"] = "StixIndicator";
    /** File containing other records. */
    KnownFileImportContentType["Unspecified"] = "Unspecified";
})(KnownFileImportContentType || (KnownFileImportContentType = {}));
/** Known values of {@link FileFormat} that the service accepts. */
export var KnownFileFormat;
(function (KnownFileFormat) {
    /** A CSV file. */
    KnownFileFormat["CSV"] = "CSV";
    /** A JSON file. */
    KnownFileFormat["Json"] = "JSON";
    /** A file of other format. */
    KnownFileFormat["Unspecified"] = "Unspecified";
})(KnownFileFormat || (KnownFileFormat = {}));
/** Known values of {@link DeleteStatus} that the service accepts. */
export var KnownDeleteStatus;
(function (KnownDeleteStatus) {
    /** The file was deleted. */
    KnownDeleteStatus["Deleted"] = "Deleted";
    /** The file was not deleted. */
    KnownDeleteStatus["NotDeleted"] = "NotDeleted";
    /** Unspecified */
    KnownDeleteStatus["Unspecified"] = "Unspecified";
})(KnownDeleteStatus || (KnownDeleteStatus = {}));
/** Known values of {@link FileImportState} that the service accepts. */
export var KnownFileImportState;
(function (KnownFileImportState) {
    /** A fatal error has occurred while ingesting the file. */
    KnownFileImportState["FatalError"] = "FatalError";
    /** The file has been ingested. */
    KnownFileImportState["Ingested"] = "Ingested";
    /** The file has been ingested with errors. */
    KnownFileImportState["IngestedWithErrors"] = "IngestedWithErrors";
    /** The file ingestion is in progress. */
    KnownFileImportState["InProgress"] = "InProgress";
    /** The file is invalid. */
    KnownFileImportState["Invalid"] = "Invalid";
    /** Waiting for the file to be uploaded. */
    KnownFileImportState["WaitingForUpload"] = "WaitingForUpload";
    /** Unspecified state. */
    KnownFileImportState["Unspecified"] = "Unspecified";
})(KnownFileImportState || (KnownFileImportState = {}));
/** Known values of {@link IncidentClassification} that the service accepts. */
export var KnownIncidentClassification;
(function (KnownIncidentClassification) {
    /** Incident classification was undetermined */
    KnownIncidentClassification["Undetermined"] = "Undetermined";
    /** Incident was true positive */
    KnownIncidentClassification["TruePositive"] = "TruePositive";
    /** Incident was benign positive */
    KnownIncidentClassification["BenignPositive"] = "BenignPositive";
    /** Incident was false positive */
    KnownIncidentClassification["FalsePositive"] = "FalsePositive";
})(KnownIncidentClassification || (KnownIncidentClassification = {}));
/** Known values of {@link IncidentClassificationReason} that the service accepts. */
export var KnownIncidentClassificationReason;
(function (KnownIncidentClassificationReason) {
    /** Classification reason was suspicious activity */
    KnownIncidentClassificationReason["SuspiciousActivity"] = "SuspiciousActivity";
    /** Classification reason was suspicious but expected */
    KnownIncidentClassificationReason["SuspiciousButExpected"] = "SuspiciousButExpected";
    /** Classification reason was incorrect alert logic */
    KnownIncidentClassificationReason["IncorrectAlertLogic"] = "IncorrectAlertLogic";
    /** Classification reason was inaccurate data */
    KnownIncidentClassificationReason["InaccurateData"] = "InaccurateData";
})(KnownIncidentClassificationReason || (KnownIncidentClassificationReason = {}));
/** Known values of {@link IncidentLabelType} that the service accepts. */
export var KnownIncidentLabelType;
(function (KnownIncidentLabelType) {
    /** Label manually created by a user */
    KnownIncidentLabelType["User"] = "User";
    /** Label automatically created by the system */
    KnownIncidentLabelType["AutoAssigned"] = "AutoAssigned";
})(KnownIncidentLabelType || (KnownIncidentLabelType = {}));
/** Known values of {@link OwnerType} that the service accepts. */
export var KnownOwnerType;
(function (KnownOwnerType) {
    /** The incident owner type is unknown */
    KnownOwnerType["Unknown"] = "Unknown";
    /** The incident owner type is an AAD user */
    KnownOwnerType["User"] = "User";
    /** The incident owner type is an AAD group */
    KnownOwnerType["Group"] = "Group";
})(KnownOwnerType || (KnownOwnerType = {}));
/** Known values of {@link IncidentStatus} that the service accepts. */
export var KnownIncidentStatus;
(function (KnownIncidentStatus) {
    /** An active incident which isn't being handled currently */
    KnownIncidentStatus["New"] = "New";
    /** An active incident which is being handled */
    KnownIncidentStatus["Active"] = "Active";
    /** A non-active incident */
    KnownIncidentStatus["Closed"] = "Closed";
})(KnownIncidentStatus || (KnownIncidentStatus = {}));
/** Known values of {@link ConfidenceLevel} that the service accepts. */
export var KnownConfidenceLevel;
(function (KnownConfidenceLevel) {
    /** Unknown confidence, the is the default value */
    KnownConfidenceLevel["Unknown"] = "Unknown";
    /** Low confidence, meaning we have some doubts this is indeed malicious or part of an attack */
    KnownConfidenceLevel["Low"] = "Low";
    /** High confidence that the alert is true positive malicious */
    KnownConfidenceLevel["High"] = "High";
})(KnownConfidenceLevel || (KnownConfidenceLevel = {}));
/** Known values of {@link ConfidenceScoreStatus} that the service accepts. */
export var KnownConfidenceScoreStatus;
(function (KnownConfidenceScoreStatus) {
    /** Score will not be calculated for this alert as it is not supported by virtual analyst */
    KnownConfidenceScoreStatus["NotApplicable"] = "NotApplicable";
    /** No score was set yet and calculation is in progress */
    KnownConfidenceScoreStatus["InProcess"] = "InProcess";
    /** Score is calculated and shown as part of the alert, but may be updated again at a later time following the processing of additional data */
    KnownConfidenceScoreStatus["NotFinal"] = "NotFinal";
    /** Final score was calculated and available */
    KnownConfidenceScoreStatus["Final"] = "Final";
})(KnownConfidenceScoreStatus || (KnownConfidenceScoreStatus = {}));
/** Known values of {@link KillChainIntent} that the service accepts. */
export var KnownKillChainIntent;
(function (KnownKillChainIntent) {
    /** The default value. */
    KnownKillChainIntent["Unknown"] = "Unknown";
    /** Probing could be an attempt to access a certain resource regardless of a malicious intent or a failed attempt to gain access to a target system to gather information prior to exploitation. This step is usually detected as an attempt originating from outside the network in attempt to scan the target system and find a way in. */
    KnownKillChainIntent["Probing"] = "Probing";
    /** Exploitation is the stage where an attacker manage to get foothold on the attacked resource. This stage is applicable not only for compute hosts, but also for resources such as user accounts, certificates etc. Adversaries will often be able to control the resource after this stage. */
    KnownKillChainIntent["Exploitation"] = "Exploitation";
    /** Persistence is any access, action, or configuration change to a system that gives an adversary a persistent presence on that system. Adversaries will often need to maintain access to systems through interruptions such as system restarts, loss of credentials, or other failures that would require a remote access tool to restart or alternate backdoor for them to regain access. */
    KnownKillChainIntent["Persistence"] = "Persistence";
    /** Privilege escalation is the result of actions that allow an adversary to obtain a higher level of permissions on a system or network. Certain tools or actions require a higher level of privilege to work and are likely necessary at many points throughout an operation. User accounts with permissions to access specific systems or perform specific functions necessary for adversaries to achieve their objective may also be considered an escalation of privilege. */
    KnownKillChainIntent["PrivilegeEscalation"] = "PrivilegeEscalation";
    /** Defense evasion consists of techniques an adversary may use to evade detection or avoid other defenses. Sometimes these actions are the same as or variations of techniques in other categories that have the added benefit of subverting a particular defense or mitigation. */
    KnownKillChainIntent["DefenseEvasion"] = "DefenseEvasion";
    /** Credential access represents techniques resulting in access to or control over system, domain, or service credentials that are used within an enterprise environment. Adversaries will likely attempt to obtain legitimate credentials from users or administrator accounts (local system administrator or domain users with administrator access) to use within the network. With sufficient access within a network, an adversary can create accounts for later use within the environment. */
    KnownKillChainIntent["CredentialAccess"] = "CredentialAccess";
    /** Discovery consists of techniques that allow the adversary to gain knowledge about the system and internal network. When adversaries gain access to a new system, they must orient themselves to what they now have control of and what benefits operating from that system give to their current objective or overall goals during the intrusion. The operating system provides many native tools that aid in this post-compromise information-gathering phase. */
    KnownKillChainIntent["Discovery"] = "Discovery";
    /** Lateral movement consists of techniques that enable an adversary to access and control remote systems on a network and could, but does not necessarily, include execution of tools on remote systems. The lateral movement techniques could allow an adversary to gather information from a system without needing additional tools, such as a remote access tool. An adversary can use lateral movement for many purposes, including remote Execution of tools, pivoting to additional systems, access to specific information or files, access to additional credentials, or to cause an effect. */
    KnownKillChainIntent["LateralMovement"] = "LateralMovement";
    /** The execution tactic represents techniques that result in execution of adversary-controlled code on a local or remote system. This tactic is often used in conjunction with lateral movement to expand access to remote systems on a network. */
    KnownKillChainIntent["Execution"] = "Execution";
    /** Collection consists of techniques used to identify and gather information, such as sensitive files, from a target network prior to exfiltration. This category also covers locations on a system or network where the adversary may look for information to exfiltrate. */
    KnownKillChainIntent["Collection"] = "Collection";
    /** Exfiltration refers to techniques and attributes that result or aid in the adversary removing files and information from a target network. This category also covers locations on a system or network where the adversary may look for information to exfiltrate. */
    KnownKillChainIntent["Exfiltration"] = "Exfiltration";
    /** The command and control tactic represents how adversaries communicate with systems under their control within a target network. */
    KnownKillChainIntent["CommandAndControl"] = "CommandAndControl";
    /** The impact intent primary objective is to directly reduce the availability or integrity of a system, service, or network; including manipulation of data to impact a business or operational process. This would often refer to techniques such as ransom-ware, defacement, data manipulation and others. */
    KnownKillChainIntent["Impact"] = "Impact";
})(KnownKillChainIntent || (KnownKillChainIntent = {}));
/** Known values of {@link AlertSeverity} that the service accepts. */
export var KnownAlertSeverity;
(function (KnownAlertSeverity) {
    /** High severity */
    KnownAlertSeverity["High"] = "High";
    /** Medium severity */
    KnownAlertSeverity["Medium"] = "Medium";
    /** Low severity */
    KnownAlertSeverity["Low"] = "Low";
    /** Informational severity */
    KnownAlertSeverity["Informational"] = "Informational";
})(KnownAlertSeverity || (KnownAlertSeverity = {}));
/** Known values of {@link AlertStatus} that the service accepts. */
export var KnownAlertStatus;
(function (KnownAlertStatus) {
    /** Unknown value */
    KnownAlertStatus["Unknown"] = "Unknown";
    /** New alert */
    KnownAlertStatus["New"] = "New";
    /** Alert closed after handling */
    KnownAlertStatus["Resolved"] = "Resolved";
    /** Alert dismissed as false positive */
    KnownAlertStatus["Dismissed"] = "Dismissed";
    /** Alert is being handled */
    KnownAlertStatus["InProgress"] = "InProgress";
})(KnownAlertStatus || (KnownAlertStatus = {}));
/** Known values of {@link Kind} that the service accepts. */
export var KnownKind;
(function (KnownKind) {
    /** DataConnector */
    KnownKind["DataConnector"] = "DataConnector";
    /** DataType */
    KnownKind["DataType"] = "DataType";
    /** Workbook */
    KnownKind["Workbook"] = "Workbook";
    /** WorkbookTemplate */
    KnownKind["WorkbookTemplate"] = "WorkbookTemplate";
    /** Playbook */
    KnownKind["Playbook"] = "Playbook";
    /** PlaybookTemplate */
    KnownKind["PlaybookTemplate"] = "PlaybookTemplate";
    /** AnalyticsRuleTemplate */
    KnownKind["AnalyticsRuleTemplate"] = "AnalyticsRuleTemplate";
    /** AnalyticsRule */
    KnownKind["AnalyticsRule"] = "AnalyticsRule";
    /** HuntingQuery */
    KnownKind["HuntingQuery"] = "HuntingQuery";
    /** InvestigationQuery */
    KnownKind["InvestigationQuery"] = "InvestigationQuery";
    /** Parser */
    KnownKind["Parser"] = "Parser";
    /** Watchlist */
    KnownKind["Watchlist"] = "Watchlist";
    /** WatchlistTemplate */
    KnownKind["WatchlistTemplate"] = "WatchlistTemplate";
    /** Solution */
    KnownKind["Solution"] = "Solution";
    /** AzureFunction */
    KnownKind["AzureFunction"] = "AzureFunction";
    /** LogicAppsCustomConnector */
    KnownKind["LogicAppsCustomConnector"] = "LogicAppsCustomConnector";
    /** AutomationRule */
    KnownKind["AutomationRule"] = "AutomationRule";
})(KnownKind || (KnownKind = {}));
/** Known values of {@link SourceKind} that the service accepts. */
export var KnownSourceKind;
(function (KnownSourceKind) {
    /** LocalWorkspace */
    KnownSourceKind["LocalWorkspace"] = "LocalWorkspace";
    /** Community */
    KnownSourceKind["Community"] = "Community";
    /** Solution */
    KnownSourceKind["Solution"] = "Solution";
    /** SourceRepository */
    KnownSourceKind["SourceRepository"] = "SourceRepository";
})(KnownSourceKind || (KnownSourceKind = {}));
/** Known values of {@link SupportTier} that the service accepts. */
export var KnownSupportTier;
(function (KnownSupportTier) {
    /** Microsoft */
    KnownSupportTier["Microsoft"] = "Microsoft";
    /** Partner */
    KnownSupportTier["Partner"] = "Partner";
    /** Community */
    KnownSupportTier["Community"] = "Community";
})(KnownSupportTier || (KnownSupportTier = {}));
/** Known values of {@link Operator} that the service accepts. */
export var KnownOperator;
(function (KnownOperator) {
    /** AND */
    KnownOperator["AND"] = "AND";
    /** OR */
    KnownOperator["OR"] = "OR";
})(KnownOperator || (KnownOperator = {}));
/** Known values of {@link SecurityMLAnalyticsSettingsKind} that the service accepts. */
export var KnownSecurityMLAnalyticsSettingsKind;
(function (KnownSecurityMLAnalyticsSettingsKind) {
    /** Anomaly */
    KnownSecurityMLAnalyticsSettingsKind["Anomaly"] = "Anomaly";
})(KnownSecurityMLAnalyticsSettingsKind || (KnownSecurityMLAnalyticsSettingsKind = {}));
/** Known values of {@link SettingKind} that the service accepts. */
export var KnownSettingKind;
(function (KnownSettingKind) {
    /** Anomalies */
    KnownSettingKind["Anomalies"] = "Anomalies";
    /** EyesOn */
    KnownSettingKind["EyesOn"] = "EyesOn";
    /** EntityAnalytics */
    KnownSettingKind["EntityAnalytics"] = "EntityAnalytics";
    /** Ueba */
    KnownSettingKind["Ueba"] = "Ueba";
})(KnownSettingKind || (KnownSettingKind = {}));
/** Known values of {@link RepoType} that the service accepts. */
export var KnownRepoType;
(function (KnownRepoType) {
    /** Github */
    KnownRepoType["Github"] = "Github";
    /** DevOps */
    KnownRepoType["DevOps"] = "DevOps";
})(KnownRepoType || (KnownRepoType = {}));
/** Known values of {@link Version} that the service accepts. */
export var KnownVersion;
(function (KnownVersion) {
    /** V1 */
    KnownVersion["V1"] = "V1";
    /** V2 */
    KnownVersion["V2"] = "V2";
})(KnownVersion || (KnownVersion = {}));
/** Known values of {@link ContentType} that the service accepts. */
export var KnownContentType;
(function (KnownContentType) {
    /** AnalyticRule */
    KnownContentType["AnalyticRule"] = "AnalyticRule";
    /** Workbook */
    KnownContentType["Workbook"] = "Workbook";
})(KnownContentType || (KnownContentType = {}));
/** Known values of {@link DeploymentFetchStatus} that the service accepts. */
export var KnownDeploymentFetchStatus;
(function (KnownDeploymentFetchStatus) {
    /** Success */
    KnownDeploymentFetchStatus["Success"] = "Success";
    /** Unauthorized */
    KnownDeploymentFetchStatus["Unauthorized"] = "Unauthorized";
    /** NotFound */
    KnownDeploymentFetchStatus["NotFound"] = "NotFound";
})(KnownDeploymentFetchStatus || (KnownDeploymentFetchStatus = {}));
/** Known values of {@link DeploymentState} that the service accepts. */
export var KnownDeploymentState;
(function (KnownDeploymentState) {
    /** InProgress */
    KnownDeploymentState["InProgress"] = "In_Progress";
    /** Completed */
    KnownDeploymentState["Completed"] = "Completed";
    /** Queued */
    KnownDeploymentState["Queued"] = "Queued";
    /** Canceling */
    KnownDeploymentState["Canceling"] = "Canceling";
})(KnownDeploymentState || (KnownDeploymentState = {}));
/** Known values of {@link DeploymentResult} that the service accepts. */
export var KnownDeploymentResult;
(function (KnownDeploymentResult) {
    /** Success */
    KnownDeploymentResult["Success"] = "Success";
    /** Canceled */
    KnownDeploymentResult["Canceled"] = "Canceled";
    /** Failed */
    KnownDeploymentResult["Failed"] = "Failed";
})(KnownDeploymentResult || (KnownDeploymentResult = {}));
/** Known values of {@link ThreatIntelligenceResourceKindEnum} that the service accepts. */
export var KnownThreatIntelligenceResourceKindEnum;
(function (KnownThreatIntelligenceResourceKindEnum) {
    /** Entity represents threat intelligence indicator in the system. */
    KnownThreatIntelligenceResourceKindEnum["Indicator"] = "indicator";
})(KnownThreatIntelligenceResourceKindEnum || (KnownThreatIntelligenceResourceKindEnum = {}));
/** Known values of {@link ThreatIntelligenceSortingCriteriaEnum} that the service accepts. */
export var KnownThreatIntelligenceSortingCriteriaEnum;
(function (KnownThreatIntelligenceSortingCriteriaEnum) {
    /** Unsorted */
    KnownThreatIntelligenceSortingCriteriaEnum["Unsorted"] = "unsorted";
    /** Ascending */
    KnownThreatIntelligenceSortingCriteriaEnum["Ascending"] = "ascending";
    /** Descending */
    KnownThreatIntelligenceSortingCriteriaEnum["Descending"] = "descending";
})(KnownThreatIntelligenceSortingCriteriaEnum || (KnownThreatIntelligenceSortingCriteriaEnum = {}));
/** Known values of {@link SourceType} that the service accepts. */
export var KnownSourceType;
(function (KnownSourceType) {
    /** LocalFile */
    KnownSourceType["LocalFile"] = "Local file";
    /** RemoteStorage */
    KnownSourceType["RemoteStorage"] = "Remote storage";
})(KnownSourceType || (KnownSourceType = {}));
/** Known values of {@link DataConnectorKind} that the service accepts. */
export var KnownDataConnectorKind;
(function (KnownDataConnectorKind) {
    /** AzureActiveDirectory */
    KnownDataConnectorKind["AzureActiveDirectory"] = "AzureActiveDirectory";
    /** AzureSecurityCenter */
    KnownDataConnectorKind["AzureSecurityCenter"] = "AzureSecurityCenter";
    /** MicrosoftCloudAppSecurity */
    KnownDataConnectorKind["MicrosoftCloudAppSecurity"] = "MicrosoftCloudAppSecurity";
    /** ThreatIntelligence */
    KnownDataConnectorKind["ThreatIntelligence"] = "ThreatIntelligence";
    /** ThreatIntelligenceTaxii */
    KnownDataConnectorKind["ThreatIntelligenceTaxii"] = "ThreatIntelligenceTaxii";
    /** Office365 */
    KnownDataConnectorKind["Office365"] = "Office365";
    /** OfficeATP */
    KnownDataConnectorKind["OfficeATP"] = "OfficeATP";
    /** OfficeIRM */
    KnownDataConnectorKind["OfficeIRM"] = "OfficeIRM";
    /** Office365Project */
    KnownDataConnectorKind["Office365Project"] = "Office365Project";
    /** OfficePowerBI */
    KnownDataConnectorKind["OfficePowerBI"] = "OfficePowerBI";
    /** AmazonWebServicesCloudTrail */
    KnownDataConnectorKind["AmazonWebServicesCloudTrail"] = "AmazonWebServicesCloudTrail";
    /** AmazonWebServicesS3 */
    KnownDataConnectorKind["AmazonWebServicesS3"] = "AmazonWebServicesS3";
    /** AzureAdvancedThreatProtection */
    KnownDataConnectorKind["AzureAdvancedThreatProtection"] = "AzureAdvancedThreatProtection";
    /** MicrosoftDefenderAdvancedThreatProtection */
    KnownDataConnectorKind["MicrosoftDefenderAdvancedThreatProtection"] = "MicrosoftDefenderAdvancedThreatProtection";
    /** Dynamics365 */
    KnownDataConnectorKind["Dynamics365"] = "Dynamics365";
    /** MicrosoftThreatProtection */
    KnownDataConnectorKind["MicrosoftThreatProtection"] = "MicrosoftThreatProtection";
    /** MicrosoftThreatIntelligence */
    KnownDataConnectorKind["MicrosoftThreatIntelligence"] = "MicrosoftThreatIntelligence";
    /** GenericUI */
    KnownDataConnectorKind["GenericUI"] = "GenericUI";
    /** APIPolling */
    KnownDataConnectorKind["APIPolling"] = "APIPolling";
    /** IOT */
    KnownDataConnectorKind["IOT"] = "IOT";
})(KnownDataConnectorKind || (KnownDataConnectorKind = {}));
/** Known values of {@link ConnectAuthKind} that the service accepts. */
export var KnownConnectAuthKind;
(function (KnownConnectAuthKind) {
    /** Basic */
    KnownConnectAuthKind["Basic"] = "Basic";
    /** OAuth2 */
    KnownConnectAuthKind["OAuth2"] = "OAuth2";
    /** APIKey */
    KnownConnectAuthKind["APIKey"] = "APIKey";
})(KnownConnectAuthKind || (KnownConnectAuthKind = {}));
/** Known values of {@link DataConnectorAuthorizationState} that the service accepts. */
export var KnownDataConnectorAuthorizationState;
(function (KnownDataConnectorAuthorizationState) {
    /** Valid */
    KnownDataConnectorAuthorizationState["Valid"] = "Valid";
    /** Invalid */
    KnownDataConnectorAuthorizationState["Invalid"] = "Invalid";
})(KnownDataConnectorAuthorizationState || (KnownDataConnectorAuthorizationState = {}));
/** Known values of {@link DataConnectorLicenseState} that the service accepts. */
export var KnownDataConnectorLicenseState;
(function (KnownDataConnectorLicenseState) {
    /** Valid */
    KnownDataConnectorLicenseState["Valid"] = "Valid";
    /** Invalid */
    KnownDataConnectorLicenseState["Invalid"] = "Invalid";
    /** Unknown */
    KnownDataConnectorLicenseState["Unknown"] = "Unknown";
})(KnownDataConnectorLicenseState || (KnownDataConnectorLicenseState = {}));
/** Known values of {@link TemplateStatus} that the service accepts. */
export var KnownTemplateStatus;
(function (KnownTemplateStatus) {
    /** Alert rule template installed. and can not use more then once */
    KnownTemplateStatus["Installed"] = "Installed";
    /** Alert rule template is available. */
    KnownTemplateStatus["Available"] = "Available";
    /** Alert rule template is not available */
    KnownTemplateStatus["NotAvailable"] = "NotAvailable";
})(KnownTemplateStatus || (KnownTemplateStatus = {}));
/** Known values of {@link EntityMappingType} that the service accepts. */
export var KnownEntityMappingType;
(function (KnownEntityMappingType) {
    /** User account entity type */
    KnownEntityMappingType["Account"] = "Account";
    /** Host entity type */
    KnownEntityMappingType["Host"] = "Host";
    /** IP address entity type */
    KnownEntityMappingType["IP"] = "IP";
    /** Malware entity type */
    KnownEntityMappingType["Malware"] = "Malware";
    /** System file entity type */
    KnownEntityMappingType["File"] = "File";
    /** Process entity type */
    KnownEntityMappingType["Process"] = "Process";
    /** Cloud app entity type */
    KnownEntityMappingType["CloudApplication"] = "CloudApplication";
    /** DNS entity type */
    KnownEntityMappingType["DNS"] = "DNS";
    /** Azure resource entity type */
    KnownEntityMappingType["AzureResource"] = "AzureResource";
    /** File-hash entity type */
    KnownEntityMappingType["FileHash"] = "FileHash";
    /** Registry key entity type */
    KnownEntityMappingType["RegistryKey"] = "RegistryKey";
    /** Registry value entity type */
    KnownEntityMappingType["RegistryValue"] = "RegistryValue";
    /** Security group entity type */
    KnownEntityMappingType["SecurityGroup"] = "SecurityGroup";
    /** URL entity type */
    KnownEntityMappingType["URL"] = "URL";
    /** Mailbox entity type */
    KnownEntityMappingType["Mailbox"] = "Mailbox";
    /** Mail cluster entity type */
    KnownEntityMappingType["MailCluster"] = "MailCluster";
    /** Mail message entity type */
    KnownEntityMappingType["MailMessage"] = "MailMessage";
    /** Submission mail entity type */
    KnownEntityMappingType["SubmissionMail"] = "SubmissionMail";
})(KnownEntityMappingType || (KnownEntityMappingType = {}));
/** Known values of {@link EventGroupingAggregationKind} that the service accepts. */
export var KnownEventGroupingAggregationKind;
(function (KnownEventGroupingAggregationKind) {
    /** SingleAlert */
    KnownEventGroupingAggregationKind["SingleAlert"] = "SingleAlert";
    /** AlertPerResult */
    KnownEventGroupingAggregationKind["AlertPerResult"] = "AlertPerResult";
})(KnownEventGroupingAggregationKind || (KnownEventGroupingAggregationKind = {}));
/** Known values of {@link MicrosoftSecurityProductName} that the service accepts. */
export var KnownMicrosoftSecurityProductName;
(function (KnownMicrosoftSecurityProductName) {
    /** MicrosoftCloudAppSecurity */
    KnownMicrosoftSecurityProductName["MicrosoftCloudAppSecurity"] = "Microsoft Cloud App Security";
    /** AzureSecurityCenter */
    KnownMicrosoftSecurityProductName["AzureSecurityCenter"] = "Azure Security Center";
    /** AzureAdvancedThreatProtection */
    KnownMicrosoftSecurityProductName["AzureAdvancedThreatProtection"] = "Azure Advanced Threat Protection";
    /** AzureActiveDirectoryIdentityProtection */
    KnownMicrosoftSecurityProductName["AzureActiveDirectoryIdentityProtection"] = "Azure Active Directory Identity Protection";
    /** AzureSecurityCenterForIoT */
    KnownMicrosoftSecurityProductName["AzureSecurityCenterForIoT"] = "Azure Security Center for IoT";
    /** Office365AdvancedThreatProtection */
    KnownMicrosoftSecurityProductName["Office365AdvancedThreatProtection"] = "Office 365 Advanced Threat Protection";
    /** MicrosoftDefenderAdvancedThreatProtection */
    KnownMicrosoftSecurityProductName["MicrosoftDefenderAdvancedThreatProtection"] = "Microsoft Defender Advanced Threat Protection";
})(KnownMicrosoftSecurityProductName || (KnownMicrosoftSecurityProductName = {}));
/** Known values of {@link MatchingMethod} that the service accepts. */
export var KnownMatchingMethod;
(function (KnownMatchingMethod) {
    /** Grouping alerts into a single incident if all the entities match */
    KnownMatchingMethod["AllEntities"] = "AllEntities";
    /** Grouping any alerts triggered by this rule into a single incident */
    KnownMatchingMethod["AnyAlert"] = "AnyAlert";
    /** Grouping alerts into a single incident if the selected entities, custom details and alert details match */
    KnownMatchingMethod["Selected"] = "Selected";
})(KnownMatchingMethod || (KnownMatchingMethod = {}));
/** Known values of {@link AlertDetail} that the service accepts. */
export var KnownAlertDetail;
(function (KnownAlertDetail) {
    /** Alert display name */
    KnownAlertDetail["DisplayName"] = "DisplayName";
    /** Alert severity */
    KnownAlertDetail["Severity"] = "Severity";
})(KnownAlertDetail || (KnownAlertDetail = {}));
/** Known values of {@link AutomationRuleBooleanConditionSupportedOperator} that the service accepts. */
export var KnownAutomationRuleBooleanConditionSupportedOperator;
(function (KnownAutomationRuleBooleanConditionSupportedOperator) {
    /** Evaluates as true if all the item conditions are evaluated as true */
    KnownAutomationRuleBooleanConditionSupportedOperator["And"] = "And";
    /** Evaluates as true if at least one of the item conditions are evaluated as true */
    KnownAutomationRuleBooleanConditionSupportedOperator["Or"] = "Or";
})(KnownAutomationRuleBooleanConditionSupportedOperator || (KnownAutomationRuleBooleanConditionSupportedOperator = {}));
/** Known values of {@link AutomationRulePropertyArrayChangedConditionSupportedArrayType} that the service accepts. */
export var KnownAutomationRulePropertyArrayChangedConditionSupportedArrayType;
(function (KnownAutomationRulePropertyArrayChangedConditionSupportedArrayType) {
    /** Evaluate the condition on the alerts */
    KnownAutomationRulePropertyArrayChangedConditionSupportedArrayType["Alerts"] = "Alerts";
    /** Evaluate the condition on the labels */
    KnownAutomationRulePropertyArrayChangedConditionSupportedArrayType["Labels"] = "Labels";
    /** Evaluate the condition on the tactics */
    KnownAutomationRulePropertyArrayChangedConditionSupportedArrayType["Tactics"] = "Tactics";
    /** Evaluate the condition on the comments */
    KnownAutomationRulePropertyArrayChangedConditionSupportedArrayType["Comments"] = "Comments";
})(KnownAutomationRulePropertyArrayChangedConditionSupportedArrayType || (KnownAutomationRulePropertyArrayChangedConditionSupportedArrayType = {}));
/** Known values of {@link AutomationRulePropertyArrayChangedConditionSupportedChangeType} that the service accepts. */
export var KnownAutomationRulePropertyArrayChangedConditionSupportedChangeType;
(function (KnownAutomationRulePropertyArrayChangedConditionSupportedChangeType) {
    /** Evaluate the condition on items added to the array */
    KnownAutomationRulePropertyArrayChangedConditionSupportedChangeType["Added"] = "Added";
})(KnownAutomationRulePropertyArrayChangedConditionSupportedChangeType || (KnownAutomationRulePropertyArrayChangedConditionSupportedChangeType = {}));
/** Known values of {@link AutomationRulePropertyArrayConditionSupportedArrayType} that the service accepts. */
export var KnownAutomationRulePropertyArrayConditionSupportedArrayType;
(function (KnownAutomationRulePropertyArrayConditionSupportedArrayType) {
    /** Evaluate the condition on the custom detail keys */
    KnownAutomationRulePropertyArrayConditionSupportedArrayType["CustomDetails"] = "CustomDetails";
    /** Evaluate the condition on a custom detail's values */
    KnownAutomationRulePropertyArrayConditionSupportedArrayType["CustomDetailValues"] = "CustomDetailValues";
})(KnownAutomationRulePropertyArrayConditionSupportedArrayType || (KnownAutomationRulePropertyArrayConditionSupportedArrayType = {}));
/** Known values of {@link AutomationRulePropertyArrayConditionSupportedArrayConditionType} that the service accepts. */
export var KnownAutomationRulePropertyArrayConditionSupportedArrayConditionType;
(function (KnownAutomationRulePropertyArrayConditionSupportedArrayConditionType) {
    /** Evaluate the condition as true if any item fulfills it */
    KnownAutomationRulePropertyArrayConditionSupportedArrayConditionType["AnyItem"] = "AnyItem";
})(KnownAutomationRulePropertyArrayConditionSupportedArrayConditionType || (KnownAutomationRulePropertyArrayConditionSupportedArrayConditionType = {}));
/** Known values of {@link AutomationRulePropertyChangedConditionSupportedPropertyType} that the service accepts. */
export var KnownAutomationRulePropertyChangedConditionSupportedPropertyType;
(function (KnownAutomationRulePropertyChangedConditionSupportedPropertyType) {
    /** Evaluate the condition on the incident severity */
    KnownAutomationRulePropertyChangedConditionSupportedPropertyType["IncidentSeverity"] = "IncidentSeverity";
    /** Evaluate the condition on the incident status */
    KnownAutomationRulePropertyChangedConditionSupportedPropertyType["IncidentStatus"] = "IncidentStatus";
    /** Evaluate the condition on the incident owner */
    KnownAutomationRulePropertyChangedConditionSupportedPropertyType["IncidentOwner"] = "IncidentOwner";
})(KnownAutomationRulePropertyChangedConditionSupportedPropertyType || (KnownAutomationRulePropertyChangedConditionSupportedPropertyType = {}));
/** Known values of {@link AutomationRulePropertyChangedConditionSupportedChangedType} that the service accepts. */
export var KnownAutomationRulePropertyChangedConditionSupportedChangedType;
(function (KnownAutomationRulePropertyChangedConditionSupportedChangedType) {
    /** Evaluate the condition on the previous value of the property */
    KnownAutomationRulePropertyChangedConditionSupportedChangedType["ChangedFrom"] = "ChangedFrom";
    /** Evaluate the condition on the updated value of the property */
    KnownAutomationRulePropertyChangedConditionSupportedChangedType["ChangedTo"] = "ChangedTo";
})(KnownAutomationRulePropertyChangedConditionSupportedChangedType || (KnownAutomationRulePropertyChangedConditionSupportedChangedType = {}));
/** Known values of {@link AutomationRulePropertyConditionSupportedOperator} that the service accepts. */
export var KnownAutomationRulePropertyConditionSupportedOperator;
(function (KnownAutomationRulePropertyConditionSupportedOperator) {
    /** Evaluates if the property equals at least one of the condition values */
    KnownAutomationRulePropertyConditionSupportedOperator["Equals"] = "Equals";
    /** Evaluates if the property does not equal any of the condition values */
    KnownAutomationRulePropertyConditionSupportedOperator["NotEquals"] = "NotEquals";
    /** Evaluates if the property contains at least one of the condition values */
    KnownAutomationRulePropertyConditionSupportedOperator["Contains"] = "Contains";
    /** Evaluates if the property does not contain any of the condition values */
    KnownAutomationRulePropertyConditionSupportedOperator["NotContains"] = "NotContains";
    /** Evaluates if the property starts with any of the condition values */
    KnownAutomationRulePropertyConditionSupportedOperator["StartsWith"] = "StartsWith";
    /** Evaluates if the property does not start with any of the condition values */
    KnownAutomationRulePropertyConditionSupportedOperator["NotStartsWith"] = "NotStartsWith";
    /** Evaluates if the property ends with any of the condition values */
    KnownAutomationRulePropertyConditionSupportedOperator["EndsWith"] = "EndsWith";
    /** Evaluates if the property does not end with any of the condition values */
    KnownAutomationRulePropertyConditionSupportedOperator["NotEndsWith"] = "NotEndsWith";
})(KnownAutomationRulePropertyConditionSupportedOperator || (KnownAutomationRulePropertyConditionSupportedOperator = {}));
/** Known values of {@link AutomationRulePropertyConditionSupportedProperty} that the service accepts. */
export var KnownAutomationRulePropertyConditionSupportedProperty;
(function (KnownAutomationRulePropertyConditionSupportedProperty) {
    /** The title of the incident */
    KnownAutomationRulePropertyConditionSupportedProperty["IncidentTitle"] = "IncidentTitle";
    /** The description of the incident */
    KnownAutomationRulePropertyConditionSupportedProperty["IncidentDescription"] = "IncidentDescription";
    /** The severity of the incident */
    KnownAutomationRulePropertyConditionSupportedProperty["IncidentSeverity"] = "IncidentSeverity";
    /** The status of the incident */
    KnownAutomationRulePropertyConditionSupportedProperty["IncidentStatus"] = "IncidentStatus";
    /** The related Analytic rule ids of the incident */
    KnownAutomationRulePropertyConditionSupportedProperty["IncidentRelatedAnalyticRuleIds"] = "IncidentRelatedAnalyticRuleIds";
    /** The tactics of the incident */
    KnownAutomationRulePropertyConditionSupportedProperty["IncidentTactics"] = "IncidentTactics";
    /** The labels of the incident */
    KnownAutomationRulePropertyConditionSupportedProperty["IncidentLabel"] = "IncidentLabel";
    /** The provider name of the incident */
    KnownAutomationRulePropertyConditionSupportedProperty["IncidentProviderName"] = "IncidentProviderName";
    /** The update source of the incident */
    KnownAutomationRulePropertyConditionSupportedProperty["IncidentUpdatedBySource"] = "IncidentUpdatedBySource";
    /** The incident custom detail key */
    KnownAutomationRulePropertyConditionSupportedProperty["IncidentCustomDetailsKey"] = "IncidentCustomDetailsKey";
    /** The incident custom detail value */
    KnownAutomationRulePropertyConditionSupportedProperty["IncidentCustomDetailsValue"] = "IncidentCustomDetailsValue";
    /** The account Azure Active Directory tenant id */
    KnownAutomationRulePropertyConditionSupportedProperty["AccountAadTenantId"] = "AccountAadTenantId";
    /** The account Azure Active Directory user id */
    KnownAutomationRulePropertyConditionSupportedProperty["AccountAadUserId"] = "AccountAadUserId";
    /** The account name */
    KnownAutomationRulePropertyConditionSupportedProperty["AccountName"] = "AccountName";
    /** The account NetBIOS domain name */
    KnownAutomationRulePropertyConditionSupportedProperty["AccountNTDomain"] = "AccountNTDomain";
    /** The account Azure Active Directory Passport User ID */
    KnownAutomationRulePropertyConditionSupportedProperty["AccountPuid"] = "AccountPUID";
    /** The account security identifier */
    KnownAutomationRulePropertyConditionSupportedProperty["AccountSid"] = "AccountSid";
    /** The account unique identifier */
    KnownAutomationRulePropertyConditionSupportedProperty["AccountObjectGuid"] = "AccountObjectGuid";
    /** The account user principal name suffix */
    KnownAutomationRulePropertyConditionSupportedProperty["AccountUPNSuffix"] = "AccountUPNSuffix";
    /** The name of the product of the alert */
    KnownAutomationRulePropertyConditionSupportedProperty["AlertProductNames"] = "AlertProductNames";
    /** The analytic rule ids of the alert */
    KnownAutomationRulePropertyConditionSupportedProperty["AlertAnalyticRuleIds"] = "AlertAnalyticRuleIds";
    /** The Azure resource id */
    KnownAutomationRulePropertyConditionSupportedProperty["AzureResourceResourceId"] = "AzureResourceResourceId";
    /** The Azure resource subscription id */
    KnownAutomationRulePropertyConditionSupportedProperty["AzureResourceSubscriptionId"] = "AzureResourceSubscriptionId";
    /** The cloud application identifier */
    KnownAutomationRulePropertyConditionSupportedProperty["CloudApplicationAppId"] = "CloudApplicationAppId";
    /** The cloud application name */
    KnownAutomationRulePropertyConditionSupportedProperty["CloudApplicationAppName"] = "CloudApplicationAppName";
    /** The dns record domain name */
    KnownAutomationRulePropertyConditionSupportedProperty["DNSDomainName"] = "DNSDomainName";
    /** The file directory full path */
    KnownAutomationRulePropertyConditionSupportedProperty["FileDirectory"] = "FileDirectory";
    /** The file name without path */
    KnownAutomationRulePropertyConditionSupportedProperty["FileName"] = "FileName";
    /** The file hash value */
    KnownAutomationRulePropertyConditionSupportedProperty["FileHashValue"] = "FileHashValue";
    /** The host Azure resource id */
    KnownAutomationRulePropertyConditionSupportedProperty["HostAzureID"] = "HostAzureID";
    /** The host name without domain */
    KnownAutomationRulePropertyConditionSupportedProperty["HostName"] = "HostName";
    /** The host NetBIOS name */
    KnownAutomationRulePropertyConditionSupportedProperty["HostNetBiosName"] = "HostNetBiosName";
    /** The host NT domain */
    KnownAutomationRulePropertyConditionSupportedProperty["HostNTDomain"] = "HostNTDomain";
    /** The host operating system */
    KnownAutomationRulePropertyConditionSupportedProperty["HostOSVersion"] = "HostOSVersion";
    /** "The IoT device id */
    KnownAutomationRulePropertyConditionSupportedProperty["IoTDeviceId"] = "IoTDeviceId";
    /** The IoT device name */
    KnownAutomationRulePropertyConditionSupportedProperty["IoTDeviceName"] = "IoTDeviceName";
    /** The IoT device type */
    KnownAutomationRulePropertyConditionSupportedProperty["IoTDeviceType"] = "IoTDeviceType";
    /** The IoT device vendor */
    KnownAutomationRulePropertyConditionSupportedProperty["IoTDeviceVendor"] = "IoTDeviceVendor";
    /** The IoT device model */
    KnownAutomationRulePropertyConditionSupportedProperty["IoTDeviceModel"] = "IoTDeviceModel";
    /** The IoT device operating system */
    KnownAutomationRulePropertyConditionSupportedProperty["IoTDeviceOperatingSystem"] = "IoTDeviceOperatingSystem";
    /** The IP address */
    KnownAutomationRulePropertyConditionSupportedProperty["IPAddress"] = "IPAddress";
    /** The mailbox display name */
    KnownAutomationRulePropertyConditionSupportedProperty["MailboxDisplayName"] = "MailboxDisplayName";
    /** The mailbox primary address */
    KnownAutomationRulePropertyConditionSupportedProperty["MailboxPrimaryAddress"] = "MailboxPrimaryAddress";
    /** The mailbox user principal name */
    KnownAutomationRulePropertyConditionSupportedProperty["MailboxUPN"] = "MailboxUPN";
    /** The mail message delivery action */
    KnownAutomationRulePropertyConditionSupportedProperty["MailMessageDeliveryAction"] = "MailMessageDeliveryAction";
    /** The mail message delivery location */
    KnownAutomationRulePropertyConditionSupportedProperty["MailMessageDeliveryLocation"] = "MailMessageDeliveryLocation";
    /** The mail message recipient */
    KnownAutomationRulePropertyConditionSupportedProperty["MailMessageRecipient"] = "MailMessageRecipient";
    /** The mail message sender IP address */
    KnownAutomationRulePropertyConditionSupportedProperty["MailMessageSenderIP"] = "MailMessageSenderIP";
    /** The mail message subject */
    KnownAutomationRulePropertyConditionSupportedProperty["MailMessageSubject"] = "MailMessageSubject";
    /** The mail message P1 sender */
    KnownAutomationRulePropertyConditionSupportedProperty["MailMessageP1Sender"] = "MailMessageP1Sender";
    /** The mail message P2 sender */
    KnownAutomationRulePropertyConditionSupportedProperty["MailMessageP2Sender"] = "MailMessageP2Sender";
    /** The malware category */
    KnownAutomationRulePropertyConditionSupportedProperty["MalwareCategory"] = "MalwareCategory";
    /** The malware name */
    KnownAutomationRulePropertyConditionSupportedProperty["MalwareName"] = "MalwareName";
    /** The process execution command line */
    KnownAutomationRulePropertyConditionSupportedProperty["ProcessCommandLine"] = "ProcessCommandLine";
    /** The process id */
    KnownAutomationRulePropertyConditionSupportedProperty["ProcessId"] = "ProcessId";
    /** The registry key path */
    KnownAutomationRulePropertyConditionSupportedProperty["RegistryKey"] = "RegistryKey";
    /** The registry key value in string formatted representation */
    KnownAutomationRulePropertyConditionSupportedProperty["RegistryValueData"] = "RegistryValueData";
    /** The url */
    KnownAutomationRulePropertyConditionSupportedProperty["Url"] = "Url";
})(KnownAutomationRulePropertyConditionSupportedProperty || (KnownAutomationRulePropertyConditionSupportedProperty = {}));
/** Known values of {@link EntityType} that the service accepts. */
export var KnownEntityType;
(function (KnownEntityType) {
    /** Entity represents account in the system. */
    KnownEntityType["Account"] = "Account";
    /** Entity represents host in the system. */
    KnownEntityType["Host"] = "Host";
    /** Entity represents file in the system. */
    KnownEntityType["File"] = "File";
    /** Entity represents azure resource in the system. */
    KnownEntityType["AzureResource"] = "AzureResource";
    /** Entity represents cloud application in the system. */
    KnownEntityType["CloudApplication"] = "CloudApplication";
    /** Entity represents dns in the system. */
    KnownEntityType["DNS"] = "DNS";
    /** Entity represents file hash in the system. */
    KnownEntityType["FileHash"] = "FileHash";
    /** Entity represents ip in the system. */
    KnownEntityType["IP"] = "IP";
    /** Entity represents malware in the system. */
    KnownEntityType["Malware"] = "Malware";
    /** Entity represents process in the system. */
    KnownEntityType["Process"] = "Process";
    /** Entity represents registry key in the system. */
    KnownEntityType["RegistryKey"] = "RegistryKey";
    /** Entity represents registry value in the system. */
    KnownEntityType["RegistryValue"] = "RegistryValue";
    /** Entity represents security group in the system. */
    KnownEntityType["SecurityGroup"] = "SecurityGroup";
    /** Entity represents url in the system. */
    KnownEntityType["URL"] = "URL";
    /** Entity represents IoT device in the system. */
    KnownEntityType["IoTDevice"] = "IoTDevice";
    /** Entity represents security alert in the system. */
    KnownEntityType["SecurityAlert"] = "SecurityAlert";
    /** Entity represents HuntingBookmark in the system. */
    KnownEntityType["HuntingBookmark"] = "HuntingBookmark";
    /** Entity represents mail cluster in the system. */
    KnownEntityType["MailCluster"] = "MailCluster";
    /** Entity represents mail message in the system. */
    KnownEntityType["MailMessage"] = "MailMessage";
    /** Entity represents mailbox in the system. */
    KnownEntityType["Mailbox"] = "Mailbox";
    /** Entity represents submission mail in the system. */
    KnownEntityType["SubmissionMail"] = "SubmissionMail";
    /** Entity represents network interface in the system. */
    KnownEntityType["Nic"] = "Nic";
})(KnownEntityType || (KnownEntityType = {}));
/** Known values of {@link OutputType} that the service accepts. */
export var KnownOutputType;
(function (KnownOutputType) {
    /** Number */
    KnownOutputType["Number"] = "Number";
    /** String */
    KnownOutputType["String"] = "String";
    /** Date */
    KnownOutputType["Date"] = "Date";
    /** Entity */
    KnownOutputType["Entity"] = "Entity";
})(KnownOutputType || (KnownOutputType = {}));
/** Known values of {@link SettingsStatus} that the service accepts. */
export var KnownSettingsStatus;
(function (KnownSettingsStatus) {
    /** Anomaly settings status in Production mode */
    KnownSettingsStatus["Production"] = "Production";
    /** Anomaly settings status in Flighting mode */
    KnownSettingsStatus["Flighting"] = "Flighting";
})(KnownSettingsStatus || (KnownSettingsStatus = {}));
/** Known values of {@link EntityProviders} that the service accepts. */
export var KnownEntityProviders;
(function (KnownEntityProviders) {
    /** ActiveDirectory */
    KnownEntityProviders["ActiveDirectory"] = "ActiveDirectory";
    /** AzureActiveDirectory */
    KnownEntityProviders["AzureActiveDirectory"] = "AzureActiveDirectory";
})(KnownEntityProviders || (KnownEntityProviders = {}));
/** Known values of {@link UebaDataSources} that the service accepts. */
export var KnownUebaDataSources;
(function (KnownUebaDataSources) {
    /** AuditLogs */
    KnownUebaDataSources["AuditLogs"] = "AuditLogs";
    /** AzureActivity */
    KnownUebaDataSources["AzureActivity"] = "AzureActivity";
    /** SecurityEvent */
    KnownUebaDataSources["SecurityEvent"] = "SecurityEvent";
    /** SigninLogs */
    KnownUebaDataSources["SigninLogs"] = "SigninLogs";
})(KnownUebaDataSources || (KnownUebaDataSources = {}));
/** Known values of {@link DataTypeState} that the service accepts. */
export var KnownDataTypeState;
(function (KnownDataTypeState) {
    /** Enabled */
    KnownDataTypeState["Enabled"] = "Enabled";
    /** Disabled */
    KnownDataTypeState["Disabled"] = "Disabled";
})(KnownDataTypeState || (KnownDataTypeState = {}));
/** Known values of {@link PollingFrequency} that the service accepts. */
export var KnownPollingFrequency;
(function (KnownPollingFrequency) {
    /** Once a minute */
    KnownPollingFrequency["OnceAMinute"] = "OnceAMinute";
    /** Once an hour */
    KnownPollingFrequency["OnceAnHour"] = "OnceAnHour";
    /** Once a day */
    KnownPollingFrequency["OnceADay"] = "OnceADay";
})(KnownPollingFrequency || (KnownPollingFrequency = {}));
/** Known values of {@link ConnectivityType} that the service accepts. */
export var KnownConnectivityType;
(function (KnownConnectivityType) {
    /** IsConnectedQuery */
    KnownConnectivityType["IsConnectedQuery"] = "IsConnectedQuery";
})(KnownConnectivityType || (KnownConnectivityType = {}));
/** Known values of {@link ProviderName} that the service accepts. */
export var KnownProviderName;
(function (KnownProviderName) {
    /** MicrosoftOperationalInsightsSolutions */
    KnownProviderName["MicrosoftOperationalInsightsSolutions"] = "Microsoft.OperationalInsights/solutions";
    /** MicrosoftOperationalInsightsWorkspaces */
    KnownProviderName["MicrosoftOperationalInsightsWorkspaces"] = "Microsoft.OperationalInsights/workspaces";
    /** MicrosoftOperationalInsightsWorkspacesDatasources */
    KnownProviderName["MicrosoftOperationalInsightsWorkspacesDatasources"] = "Microsoft.OperationalInsights/workspaces/datasources";
    /** MicrosoftAadiamDiagnosticSettings */
    KnownProviderName["MicrosoftAadiamDiagnosticSettings"] = "microsoft.aadiam/diagnosticSettings";
    /** MicrosoftOperationalInsightsWorkspacesSharedKeys */
    KnownProviderName["MicrosoftOperationalInsightsWorkspacesSharedKeys"] = "Microsoft.OperationalInsights/workspaces/sharedKeys";
    /** MicrosoftAuthorizationPolicyAssignments */
    KnownProviderName["MicrosoftAuthorizationPolicyAssignments"] = "Microsoft.Authorization/policyAssignments";
})(KnownProviderName || (KnownProviderName = {}));
/** Known values of {@link PermissionProviderScope} that the service accepts. */
export var KnownPermissionProviderScope;
(function (KnownPermissionProviderScope) {
    /** ResourceGroup */
    KnownPermissionProviderScope["ResourceGroup"] = "ResourceGroup";
    /** Subscription */
    KnownPermissionProviderScope["Subscription"] = "Subscription";
    /** Workspace */
    KnownPermissionProviderScope["Workspace"] = "Workspace";
})(KnownPermissionProviderScope || (KnownPermissionProviderScope = {}));
/** Known values of {@link SettingType} that the service accepts. */
export var KnownSettingType;
(function (KnownSettingType) {
    /** CopyableLabel */
    KnownSettingType["CopyableLabel"] = "CopyableLabel";
    /** InstructionStepsGroup */
    KnownSettingType["InstructionStepsGroup"] = "InstructionStepsGroup";
    /** InfoMessage */
    KnownSettingType["InfoMessage"] = "InfoMessage";
})(KnownSettingType || (KnownSettingType = {}));
/** Known values of {@link FileHashAlgorithm} that the service accepts. */
export var KnownFileHashAlgorithm;
(function (KnownFileHashAlgorithm) {
    /** Unknown hash algorithm */
    KnownFileHashAlgorithm["Unknown"] = "Unknown";
    /** MD5 hash type */
    KnownFileHashAlgorithm["MD5"] = "MD5";
    /** SHA1 hash type */
    KnownFileHashAlgorithm["SHA1"] = "SHA1";
    /** SHA256 hash type */
    KnownFileHashAlgorithm["SHA256"] = "SHA256";
    /** SHA256 Authenticode hash type */
    KnownFileHashAlgorithm["SHA256AC"] = "SHA256AC";
})(KnownFileHashAlgorithm || (KnownFileHashAlgorithm = {}));
/** Known values of {@link DeviceImportance} that the service accepts. */
export var KnownDeviceImportance;
(function (KnownDeviceImportance) {
    /** Unknown - Default value */
    KnownDeviceImportance["Unknown"] = "Unknown";
    /** Low */
    KnownDeviceImportance["Low"] = "Low";
    /** Normal */
    KnownDeviceImportance["Normal"] = "Normal";
    /** High */
    KnownDeviceImportance["High"] = "High";
})(KnownDeviceImportance || (KnownDeviceImportance = {}));
/** Known values of {@link AntispamMailDirection} that the service accepts. */
export var KnownAntispamMailDirection;
(function (KnownAntispamMailDirection) {
    /** Unknown */
    KnownAntispamMailDirection["Unknown"] = "Unknown";
    /** Inbound */
    KnownAntispamMailDirection["Inbound"] = "Inbound";
    /** Outbound */
    KnownAntispamMailDirection["Outbound"] = "Outbound";
    /** Intraorg */
    KnownAntispamMailDirection["Intraorg"] = "Intraorg";
})(KnownAntispamMailDirection || (KnownAntispamMailDirection = {}));
/** Known values of {@link RegistryHive} that the service accepts. */
export var KnownRegistryHive;
(function (KnownRegistryHive) {
    /** HKEY_LOCAL_MACHINE */
    KnownRegistryHive["HkeyLocalMachine"] = "HKEY_LOCAL_MACHINE";
    /** HKEY_CLASSES_ROOT */
    KnownRegistryHive["HkeyClassesRoot"] = "HKEY_CLASSES_ROOT";
    /** HKEY_CURRENT_CONFIG */
    KnownRegistryHive["HkeyCurrentConfig"] = "HKEY_CURRENT_CONFIG";
    /** HKEY_USERS */
    KnownRegistryHive["HkeyUsers"] = "HKEY_USERS";
    /** HKEY_CURRENT_USER_LOCAL_SETTINGS */
    KnownRegistryHive["HkeyCurrentUserLocalSettings"] = "HKEY_CURRENT_USER_LOCAL_SETTINGS";
    /** HKEY_PERFORMANCE_DATA */
    KnownRegistryHive["HkeyPerformanceData"] = "HKEY_PERFORMANCE_DATA";
    /** HKEY_PERFORMANCE_NLSTEXT */
    KnownRegistryHive["HkeyPerformanceNlstext"] = "HKEY_PERFORMANCE_NLSTEXT";
    /** HKEY_PERFORMANCE_TEXT */
    KnownRegistryHive["HkeyPerformanceText"] = "HKEY_PERFORMANCE_TEXT";
    /** HKEY_A */
    KnownRegistryHive["HkeyA"] = "HKEY_A";
    /** HKEY_CURRENT_USER */
    KnownRegistryHive["HkeyCurrentUser"] = "HKEY_CURRENT_USER";
})(KnownRegistryHive || (KnownRegistryHive = {}));
/** Known values of {@link RegistryValueKind} that the service accepts. */
export var KnownRegistryValueKind;
(function (KnownRegistryValueKind) {
    /** None */
    KnownRegistryValueKind["None"] = "None";
    /** Unknown value type */
    KnownRegistryValueKind["Unknown"] = "Unknown";
    /** String value type */
    KnownRegistryValueKind["String"] = "String";
    /** ExpandString value type */
    KnownRegistryValueKind["ExpandString"] = "ExpandString";
    /** Binary value type */
    KnownRegistryValueKind["Binary"] = "Binary";
    /** DWord value type */
    KnownRegistryValueKind["DWord"] = "DWord";
    /** MultiString value type */
    KnownRegistryValueKind["MultiString"] = "MultiString";
    /** QWord value type */
    KnownRegistryValueKind["QWord"] = "QWord";
})(KnownRegistryValueKind || (KnownRegistryValueKind = {}));
//# sourceMappingURL=index.js.map