/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { AlertRule as AlertRuleMapper, ActionRequest as ActionRequestMapper, AutomationRule as AutomationRuleMapper, ManualTriggerRequestBody as ManualTriggerRequestBodyMapper, Incident as IncidentMapper, TeamProperties as TeamPropertiesMapper, Bookmark as BookmarkMapper, Relation as RelationMapper, BookmarkExpandParameters as BookmarkExpandParametersMapper, EntityExpandParameters as EntityExpandParametersMapper, EntityGetInsightsParameters as EntityGetInsightsParametersMapper, EntityTimelineParameters as EntityTimelineParametersMapper, CustomEntityQuery as CustomEntityQueryMapper, FileImport as FileImportMapper, IncidentComment as IncidentCommentMapper, MetadataModel as MetadataModelMapper, MetadataPatch as MetadataPatchMapper, SentinelOnboardingState as SentinelOnboardingStateMapper, SecurityMLAnalyticsSetting as SecurityMLAnalyticsSettingMapper, Settings as SettingsMapper, SourceControl as SourceControlMapper, ThreatIntelligenceIndicatorModel as ThreatIntelligenceIndicatorModelMapper, ThreatIntelligenceFilteringCriteria as ThreatIntelligenceFilteringCriteriaMapper, ThreatIntelligenceAppendTags as ThreatIntelligenceAppendTagsMapper, Watchlist as WatchlistMapper, WatchlistItem as WatchlistItemMapper, DataConnector as DataConnectorMapper, DataConnectorConnectBody as DataConnectorConnectBodyMapper, DataConnectorsCheckRequirements as DataConnectorsCheckRequirementsMapper } from "../models/mappers";
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2022-09-01-preview",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const workspaceName = {
    parameterPath: "workspaceName",
    mapper: {
        constraints: {
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "workspaceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const ruleId = {
    parameterPath: "ruleId",
    mapper: {
        serializedName: "ruleId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export const alertRule = {
    parameterPath: "alertRule",
    mapper: AlertRuleMapper
};
export const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const actionId = {
    parameterPath: "actionId",
    mapper: {
        serializedName: "actionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const action = {
    parameterPath: "action",
    mapper: ActionRequestMapper
};
export const alertRuleTemplateId = {
    parameterPath: "alertRuleTemplateId",
    mapper: {
        serializedName: "alertRuleTemplateId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const automationRuleId = {
    parameterPath: "automationRuleId",
    mapper: {
        serializedName: "automationRuleId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const automationRuleToUpsert = {
    parameterPath: ["options", "automationRuleToUpsert"],
    mapper: AutomationRuleMapper
};
export const requestBody = {
    parameterPath: ["options", "requestBody"],
    mapper: ManualTriggerRequestBodyMapper
};
export const incidentIdentifier = {
    parameterPath: "incidentIdentifier",
    mapper: {
        serializedName: "incidentIdentifier",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const filter = {
    parameterPath: ["options", "filter"],
    mapper: {
        serializedName: "$filter",
        type: {
            name: "String"
        }
    }
};
export const orderby = {
    parameterPath: ["options", "orderby"],
    mapper: {
        serializedName: "$orderby",
        type: {
            name: "String"
        }
    }
};
export const top = {
    parameterPath: ["options", "top"],
    mapper: {
        serializedName: "$top",
        type: {
            name: "Number"
        }
    }
};
export const skipToken = {
    parameterPath: ["options", "skipToken"],
    mapper: {
        serializedName: "$skipToken",
        type: {
            name: "String"
        }
    }
};
export const incidentId = {
    parameterPath: "incidentId",
    mapper: {
        serializedName: "incidentId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const incident = {
    parameterPath: "incident",
    mapper: IncidentMapper
};
export const teamProperties = {
    parameterPath: "teamProperties",
    mapper: TeamPropertiesMapper
};
export const bookmarkId = {
    parameterPath: "bookmarkId",
    mapper: {
        serializedName: "bookmarkId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const bookmark = {
    parameterPath: "bookmark",
    mapper: BookmarkMapper
};
export const relationName = {
    parameterPath: "relationName",
    mapper: {
        serializedName: "relationName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const relation = {
    parameterPath: "relation",
    mapper: RelationMapper
};
export const parameters = {
    parameterPath: "parameters",
    mapper: BookmarkExpandParametersMapper
};
export const ipAddress = {
    parameterPath: "ipAddress",
    mapper: {
        serializedName: "ipAddress",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const domain = {
    parameterPath: "domain",
    mapper: {
        serializedName: "domain",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const entityId = {
    parameterPath: "entityId",
    mapper: {
        serializedName: "entityId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters1 = {
    parameterPath: "parameters",
    mapper: EntityExpandParametersMapper
};
export const kind = {
    parameterPath: "kind",
    mapper: {
        serializedName: "kind",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters2 = {
    parameterPath: "parameters",
    mapper: EntityGetInsightsParametersMapper
};
export const parameters3 = {
    parameterPath: "parameters",
    mapper: EntityTimelineParametersMapper
};
export const kind1 = {
    parameterPath: ["options", "kind"],
    mapper: {
        serializedName: "kind",
        type: {
            name: "String"
        }
    }
};
export const entityQueryId = {
    parameterPath: "entityQueryId",
    mapper: {
        serializedName: "entityQueryId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const entityQuery = {
    parameterPath: "entityQuery",
    mapper: CustomEntityQueryMapper
};
export const kind2 = {
    parameterPath: ["options", "kind"],
    mapper: {
        defaultValue: "Activity",
        isConstant: true,
        serializedName: "kind",
        type: {
            name: "String"
        }
    }
};
export const entityQueryTemplateId = {
    parameterPath: "entityQueryTemplateId",
    mapper: {
        serializedName: "entityQueryTemplateId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const fileImportId = {
    parameterPath: "fileImportId",
    mapper: {
        serializedName: "fileImportId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const fileImport = {
    parameterPath: "fileImport",
    mapper: FileImportMapper
};
export const incidentCommentId = {
    parameterPath: "incidentCommentId",
    mapper: {
        serializedName: "incidentCommentId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const incidentComment = {
    parameterPath: "incidentComment",
    mapper: IncidentCommentMapper
};
export const skip = {
    parameterPath: ["options", "skip"],
    mapper: {
        serializedName: "$skip",
        type: {
            name: "Number"
        }
    }
};
export const metadataName = {
    parameterPath: "metadataName",
    mapper: {
        serializedName: "metadataName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const metadata = {
    parameterPath: "metadata",
    mapper: MetadataModelMapper
};
export const metadataPatch = {
    parameterPath: "metadataPatch",
    mapper: MetadataPatchMapper
};
export const consentId = {
    parameterPath: "consentId",
    mapper: {
        serializedName: "consentId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const sentinelOnboardingStateName = {
    parameterPath: "sentinelOnboardingStateName",
    mapper: {
        serializedName: "sentinelOnboardingStateName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const sentinelOnboardingStateParameter = {
    parameterPath: ["options", "sentinelOnboardingStateParameter"],
    mapper: SentinelOnboardingStateMapper
};
export const settingsResourceName = {
    parameterPath: "settingsResourceName",
    mapper: {
        serializedName: "settingsResourceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const securityMLAnalyticsSetting = {
    parameterPath: "securityMLAnalyticsSetting",
    mapper: SecurityMLAnalyticsSettingMapper
};
export const settingsName = {
    parameterPath: "settingsName",
    mapper: {
        serializedName: "settingsName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const settings = {
    parameterPath: "settings",
    mapper: SettingsMapper
};
export const repoType = {
    parameterPath: "repoType",
    mapper: {
        serializedName: "repoType",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const sourceControlId = {
    parameterPath: "sourceControlId",
    mapper: {
        serializedName: "sourceControlId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const sourceControl = {
    parameterPath: "sourceControl",
    mapper: SourceControlMapper
};
export const threatIntelligenceProperties = {
    parameterPath: "threatIntelligenceProperties",
    mapper: ThreatIntelligenceIndicatorModelMapper
};
export const name = {
    parameterPath: "name",
    mapper: {
        serializedName: "name",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const threatIntelligenceFilteringCriteria = {
    parameterPath: "threatIntelligenceFilteringCriteria",
    mapper: ThreatIntelligenceFilteringCriteriaMapper
};
export const threatIntelligenceAppendTags = {
    parameterPath: "threatIntelligenceAppendTags",
    mapper: ThreatIntelligenceAppendTagsMapper
};
export const threatIntelligenceReplaceTags = {
    parameterPath: "threatIntelligenceReplaceTags",
    mapper: ThreatIntelligenceIndicatorModelMapper
};
export const watchlistAlias = {
    parameterPath: "watchlistAlias",
    mapper: {
        serializedName: "watchlistAlias",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const watchlist = {
    parameterPath: "watchlist",
    mapper: WatchlistMapper
};
export const watchlistItemId = {
    parameterPath: "watchlistItemId",
    mapper: {
        serializedName: "watchlistItemId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const watchlistItem = {
    parameterPath: "watchlistItem",
    mapper: WatchlistItemMapper
};
export const dataConnectorId = {
    parameterPath: "dataConnectorId",
    mapper: {
        serializedName: "dataConnectorId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const dataConnector = {
    parameterPath: "dataConnector",
    mapper: DataConnectorMapper
};
export const connectBody = {
    parameterPath: "connectBody",
    mapper: DataConnectorConnectBodyMapper
};
export const dataConnectorsCheckRequirements = {
    parameterPath: "dataConnectorsCheckRequirements",
    mapper: DataConnectorsCheckRequirementsMapper
};
//# sourceMappingURL=parameters.js.map