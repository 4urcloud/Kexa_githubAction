import * as coreClient from "@azure/core-client";
import * as coreAuth from "@azure/core-auth";
import { AlertRules, Actions, AlertRuleTemplates, AutomationRules, Incidents, Bookmarks, BookmarkRelations, BookmarkOperations, IPGeodata, DomainWhois, Entities, EntitiesGetTimeline, EntitiesRelations, EntityRelations, EntityQueries, EntityQueryTemplates, FileImports, IncidentComments, IncidentRelations, Metadata, OfficeConsents, SentinelOnboardingStates, SecurityMLAnalyticsSettings, ProductSettings, SourceControlOperations, SourceControls, ThreatIntelligenceIndicator, ThreatIntelligenceIndicators, ThreatIntelligenceIndicatorMetrics, Watchlists, WatchlistItems, DataConnectors, DataConnectorsCheckRequirementsOperations, Operations } from "./operationsInterfaces";
import { SecurityInsightsOptionalParams } from "./models";
export declare class SecurityInsights extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the SecurityInsights class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: SecurityInsightsOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    alertRules: AlertRules;
    actions: Actions;
    alertRuleTemplates: AlertRuleTemplates;
    automationRules: AutomationRules;
    incidents: Incidents;
    bookmarks: Bookmarks;
    bookmarkRelations: BookmarkRelations;
    bookmarkOperations: BookmarkOperations;
    iPGeodata: IPGeodata;
    domainWhois: DomainWhois;
    entities: Entities;
    entitiesGetTimeline: EntitiesGetTimeline;
    entitiesRelations: EntitiesRelations;
    entityRelations: EntityRelations;
    entityQueries: EntityQueries;
    entityQueryTemplates: EntityQueryTemplates;
    fileImports: FileImports;
    incidentComments: IncidentComments;
    incidentRelations: IncidentRelations;
    metadata: Metadata;
    officeConsents: OfficeConsents;
    sentinelOnboardingStates: SentinelOnboardingStates;
    securityMLAnalyticsSettings: SecurityMLAnalyticsSettings;
    productSettings: ProductSettings;
    sourceControlOperations: SourceControlOperations;
    sourceControls: SourceControls;
    threatIntelligenceIndicator: ThreatIntelligenceIndicator;
    threatIntelligenceIndicators: ThreatIntelligenceIndicators;
    threatIntelligenceIndicatorMetrics: ThreatIntelligenceIndicatorMetrics;
    watchlists: Watchlists;
    watchlistItems: WatchlistItems;
    dataConnectors: DataConnectors;
    dataConnectorsCheckRequirementsOperations: DataConnectorsCheckRequirementsOperations;
    operations: Operations;
}
//# sourceMappingURL=securityInsights.d.ts.map