import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { WatchlistItems } from "../operationsInterfaces";
import { SecurityInsights } from "../securityInsights";
import { WatchlistItem, WatchlistItemsListOptionalParams, WatchlistItemsGetOptionalParams, WatchlistItemsGetResponse, WatchlistItemsDeleteOptionalParams, WatchlistItemsCreateOrUpdateOptionalParams, WatchlistItemsCreateOrUpdateResponse } from "../models";
/** Class containing WatchlistItems operations. */
export declare class WatchlistItemsImpl implements WatchlistItems {
    private readonly client;
    /**
     * Initialize a new instance of the class WatchlistItems class.
     * @param client Reference to the service client
     */
    constructor(client: SecurityInsights);
    /**
     * Gets all watchlist Items.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param watchlistAlias Watchlist Alias
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, watchlistAlias: string, options?: WatchlistItemsListOptionalParams): PagedAsyncIterableIterator<WatchlistItem>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Gets all watchlist Items.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param watchlistAlias Watchlist Alias
     * @param options The options parameters.
     */
    private _list;
    /**
     * Gets a watchlist, without its watchlist items.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param watchlistAlias Watchlist Alias
     * @param watchlistItemId Watchlist Item Id (GUID)
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, watchlistAlias: string, watchlistItemId: string, options?: WatchlistItemsGetOptionalParams): Promise<WatchlistItemsGetResponse>;
    /**
     * Delete a watchlist item.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param watchlistAlias Watchlist Alias
     * @param watchlistItemId Watchlist Item Id (GUID)
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, workspaceName: string, watchlistAlias: string, watchlistItemId: string, options?: WatchlistItemsDeleteOptionalParams): Promise<void>;
    /**
     * Creates or updates a watchlist item.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param watchlistAlias Watchlist Alias
     * @param watchlistItemId Watchlist Item Id (GUID)
     * @param watchlistItem The watchlist item
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, workspaceName: string, watchlistAlias: string, watchlistItemId: string, watchlistItem: WatchlistItem, options?: WatchlistItemsCreateOrUpdateOptionalParams): Promise<WatchlistItemsCreateOrUpdateResponse>;
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param watchlistAlias Watchlist Alias
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
}
//# sourceMappingURL=watchlistItems.d.ts.map