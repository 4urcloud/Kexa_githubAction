import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { OfficeConsents } from "../operationsInterfaces";
import { SecurityInsights } from "../securityInsights";
import { OfficeConsent, OfficeConsentsListOptionalParams, OfficeConsentsGetOptionalParams, OfficeConsentsGetResponse, OfficeConsentsDeleteOptionalParams } from "../models";
/** Class containing OfficeConsents operations. */
export declare class OfficeConsentsImpl implements OfficeConsents {
    private readonly client;
    /**
     * Initialize a new instance of the class OfficeConsents class.
     * @param client Reference to the service client
     */
    constructor(client: SecurityInsights);
    /**
     * Gets all office365 consents.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, options?: OfficeConsentsListOptionalParams): PagedAsyncIterableIterator<OfficeConsent>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Gets all office365 consents.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    private _list;
    /**
     * Gets an office365 consent.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param consentId consent ID
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, consentId: string, options?: OfficeConsentsGetOptionalParams): Promise<OfficeConsentsGetResponse>;
    /**
     * Delete the office365 consent.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param consentId consent ID
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, workspaceName: string, consentId: string, options?: OfficeConsentsDeleteOptionalParams): Promise<void>;
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
}
//# sourceMappingURL=officeConsents.d.ts.map