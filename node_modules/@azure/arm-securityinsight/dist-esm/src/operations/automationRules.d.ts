import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { AutomationRules } from "../operationsInterfaces";
import { SecurityInsights } from "../securityInsights";
import { AutomationRule, AutomationRulesListOptionalParams, AutomationRulesGetOptionalParams, AutomationRulesGetResponse, AutomationRulesCreateOrUpdateOptionalParams, AutomationRulesCreateOrUpdateResponse, AutomationRulesDeleteOptionalParams, AutomationRulesDeleteResponse } from "../models";
/** Class containing AutomationRules operations. */
export declare class AutomationRulesImpl implements AutomationRules {
    private readonly client;
    /**
     * Initialize a new instance of the class AutomationRules class.
     * @param client Reference to the service client
     */
    constructor(client: SecurityInsights);
    /**
     * Gets all automation rules.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, options?: AutomationRulesListOptionalParams): PagedAsyncIterableIterator<AutomationRule>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Gets the automation rule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param automationRuleId Automation rule ID
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, automationRuleId: string, options?: AutomationRulesGetOptionalParams): Promise<AutomationRulesGetResponse>;
    /**
     * Creates or updates the automation rule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param automationRuleId Automation rule ID
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, workspaceName: string, automationRuleId: string, options?: AutomationRulesCreateOrUpdateOptionalParams): Promise<AutomationRulesCreateOrUpdateResponse>;
    /**
     * Delete the automation rule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param automationRuleId Automation rule ID
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, workspaceName: string, automationRuleId: string, options?: AutomationRulesDeleteOptionalParams): Promise<AutomationRulesDeleteResponse>;
    /**
     * Gets all automation rules.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    private _list;
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
}
//# sourceMappingURL=automationRules.d.ts.map