import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { IncidentRelations } from "../operationsInterfaces";
import { SecurityInsights } from "../securityInsights";
import { Relation, IncidentRelationsListOptionalParams, IncidentRelationsGetOptionalParams, IncidentRelationsGetResponse, IncidentRelationsCreateOrUpdateOptionalParams, IncidentRelationsCreateOrUpdateResponse, IncidentRelationsDeleteOptionalParams } from "../models";
/** Class containing IncidentRelations operations. */
export declare class IncidentRelationsImpl implements IncidentRelations {
    private readonly client;
    /**
     * Initialize a new instance of the class IncidentRelations class.
     * @param client Reference to the service client
     */
    constructor(client: SecurityInsights);
    /**
     * Gets all incident relations.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param incidentId Incident ID
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, incidentId: string, options?: IncidentRelationsListOptionalParams): PagedAsyncIterableIterator<Relation>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Gets all incident relations.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param incidentId Incident ID
     * @param options The options parameters.
     */
    private _list;
    /**
     * Gets an incident relation.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param incidentId Incident ID
     * @param relationName Relation Name
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, incidentId: string, relationName: string, options?: IncidentRelationsGetOptionalParams): Promise<IncidentRelationsGetResponse>;
    /**
     * Creates or updates the incident relation.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param incidentId Incident ID
     * @param relationName Relation Name
     * @param relation The relation model
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, workspaceName: string, incidentId: string, relationName: string, relation: Relation, options?: IncidentRelationsCreateOrUpdateOptionalParams): Promise<IncidentRelationsCreateOrUpdateResponse>;
    /**
     * Delete the incident relation.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param incidentId Incident ID
     * @param relationName Relation Name
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, workspaceName: string, incidentId: string, relationName: string, options?: IncidentRelationsDeleteOptionalParams): Promise<void>;
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param incidentId Incident ID
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
}
//# sourceMappingURL=incidentRelations.d.ts.map