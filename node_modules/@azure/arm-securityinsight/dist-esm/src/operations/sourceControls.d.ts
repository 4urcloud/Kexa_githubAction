import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SourceControls } from "../operationsInterfaces";
import { SecurityInsights } from "../securityInsights";
import { SourceControl, SourceControlsListOptionalParams, SourceControlsGetOptionalParams, SourceControlsGetResponse, SourceControlsDeleteOptionalParams, SourceControlsCreateOptionalParams, SourceControlsCreateResponse } from "../models";
/** Class containing SourceControls operations. */
export declare class SourceControlsImpl implements SourceControls {
    private readonly client;
    /**
     * Initialize a new instance of the class SourceControls class.
     * @param client Reference to the service client
     */
    constructor(client: SecurityInsights);
    /**
     * Gets all source controls, without source control items.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, options?: SourceControlsListOptionalParams): PagedAsyncIterableIterator<SourceControl>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Gets all source controls, without source control items.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    private _list;
    /**
     * Gets a source control byt its identifier.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sourceControlId Source control Id
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, sourceControlId: string, options?: SourceControlsGetOptionalParams): Promise<SourceControlsGetResponse>;
    /**
     * Delete a source control.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sourceControlId Source control Id
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, workspaceName: string, sourceControlId: string, options?: SourceControlsDeleteOptionalParams): Promise<void>;
    /**
     * Creates a source control.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sourceControlId Source control Id
     * @param sourceControl The SourceControl
     * @param options The options parameters.
     */
    create(resourceGroupName: string, workspaceName: string, sourceControlId: string, sourceControl: SourceControl, options?: SourceControlsCreateOptionalParams): Promise<SourceControlsCreateResponse>;
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
}
//# sourceMappingURL=sourceControls.d.ts.map