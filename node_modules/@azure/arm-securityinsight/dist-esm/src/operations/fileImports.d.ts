import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { FileImports } from "../operationsInterfaces";
import { SecurityInsights } from "../securityInsights";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import { FileImport, FileImportsListOptionalParams, FileImportsGetOptionalParams, FileImportsGetResponse, FileImportsCreateOptionalParams, FileImportsCreateResponse, FileImportsDeleteOptionalParams, FileImportsDeleteResponse } from "../models";
/** Class containing FileImports operations. */
export declare class FileImportsImpl implements FileImports {
    private readonly client;
    /**
     * Initialize a new instance of the class FileImports class.
     * @param client Reference to the service client
     */
    constructor(client: SecurityInsights);
    /**
     * Gets all file imports.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, options?: FileImportsListOptionalParams): PagedAsyncIterableIterator<FileImport>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Gets all file imports.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    private _list;
    /**
     * Gets a file import.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param fileImportId File import ID
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, fileImportId: string, options?: FileImportsGetOptionalParams): Promise<FileImportsGetResponse>;
    /**
     * Creates the file import.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param fileImportId File import ID
     * @param fileImport The file import
     * @param options The options parameters.
     */
    create(resourceGroupName: string, workspaceName: string, fileImportId: string, fileImport: FileImport, options?: FileImportsCreateOptionalParams): Promise<FileImportsCreateResponse>;
    /**
     * Delete the file import.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param fileImportId File import ID
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, workspaceName: string, fileImportId: string, options?: FileImportsDeleteOptionalParams): Promise<PollerLike<PollOperationState<FileImportsDeleteResponse>, FileImportsDeleteResponse>>;
    /**
     * Delete the file import.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param fileImportId File import ID
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, workspaceName: string, fileImportId: string, options?: FileImportsDeleteOptionalParams): Promise<FileImportsDeleteResponse>;
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
}
//# sourceMappingURL=fileImports.d.ts.map