import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { BookmarkRelations } from "../operationsInterfaces";
import { SecurityInsights } from "../securityInsights";
import { Relation, BookmarkRelationsListOptionalParams, BookmarkRelationsGetOptionalParams, BookmarkRelationsGetResponse, BookmarkRelationsCreateOrUpdateOptionalParams, BookmarkRelationsCreateOrUpdateResponse, BookmarkRelationsDeleteOptionalParams } from "../models";
/** Class containing BookmarkRelations operations. */
export declare class BookmarkRelationsImpl implements BookmarkRelations {
    private readonly client;
    /**
     * Initialize a new instance of the class BookmarkRelations class.
     * @param client Reference to the service client
     */
    constructor(client: SecurityInsights);
    /**
     * Gets all bookmark relations.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param bookmarkId Bookmark ID
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, bookmarkId: string, options?: BookmarkRelationsListOptionalParams): PagedAsyncIterableIterator<Relation>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Gets all bookmark relations.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param bookmarkId Bookmark ID
     * @param options The options parameters.
     */
    private _list;
    /**
     * Gets a bookmark relation.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param bookmarkId Bookmark ID
     * @param relationName Relation Name
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, bookmarkId: string, relationName: string, options?: BookmarkRelationsGetOptionalParams): Promise<BookmarkRelationsGetResponse>;
    /**
     * Creates the bookmark relation.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param bookmarkId Bookmark ID
     * @param relationName Relation Name
     * @param relation The relation model
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, workspaceName: string, bookmarkId: string, relationName: string, relation: Relation, options?: BookmarkRelationsCreateOrUpdateOptionalParams): Promise<BookmarkRelationsCreateOrUpdateResponse>;
    /**
     * Delete the bookmark relation.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param bookmarkId Bookmark ID
     * @param relationName Relation Name
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, workspaceName: string, bookmarkId: string, relationName: string, options?: BookmarkRelationsDeleteOptionalParams): Promise<void>;
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param bookmarkId Bookmark ID
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
}
//# sourceMappingURL=bookmarkRelations.d.ts.map