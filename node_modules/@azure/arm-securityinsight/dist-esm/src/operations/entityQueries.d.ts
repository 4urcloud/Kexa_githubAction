import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { EntityQueries } from "../operationsInterfaces";
import { SecurityInsights } from "../securityInsights";
import { EntityQueryUnion, EntityQueriesListOptionalParams, EntityQueriesGetOptionalParams, EntityQueriesGetResponse, CustomEntityQueryUnion, EntityQueriesCreateOrUpdateOptionalParams, EntityQueriesCreateOrUpdateResponse, EntityQueriesDeleteOptionalParams } from "../models";
/** Class containing EntityQueries operations. */
export declare class EntityQueriesImpl implements EntityQueries {
    private readonly client;
    /**
     * Initialize a new instance of the class EntityQueries class.
     * @param client Reference to the service client
     */
    constructor(client: SecurityInsights);
    /**
     * Gets all entity queries.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, options?: EntityQueriesListOptionalParams): PagedAsyncIterableIterator<EntityQueryUnion>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Gets all entity queries.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    private _list;
    /**
     * Gets an entity query.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param entityQueryId entity query ID
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, entityQueryId: string, options?: EntityQueriesGetOptionalParams): Promise<EntityQueriesGetResponse>;
    /**
     * Creates or updates the entity query.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param entityQueryId entity query ID
     * @param entityQuery The entity query we want to create or update
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, workspaceName: string, entityQueryId: string, entityQuery: CustomEntityQueryUnion, options?: EntityQueriesCreateOrUpdateOptionalParams): Promise<EntityQueriesCreateOrUpdateResponse>;
    /**
     * Delete the entity query.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param entityQueryId entity query ID
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, workspaceName: string, entityQueryId: string, options?: EntityQueriesDeleteOptionalParams): Promise<void>;
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
}
//# sourceMappingURL=entityQueries.d.ts.map