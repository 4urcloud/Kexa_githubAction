import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Bookmarks } from "../operationsInterfaces";
import { SecurityInsights } from "../securityInsights";
import { Bookmark, BookmarksListOptionalParams, BookmarksGetOptionalParams, BookmarksGetResponse, BookmarksCreateOrUpdateOptionalParams, BookmarksCreateOrUpdateResponse, BookmarksDeleteOptionalParams } from "../models";
/** Class containing Bookmarks operations. */
export declare class BookmarksImpl implements Bookmarks {
    private readonly client;
    /**
     * Initialize a new instance of the class Bookmarks class.
     * @param client Reference to the service client
     */
    constructor(client: SecurityInsights);
    /**
     * Gets all bookmarks.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, options?: BookmarksListOptionalParams): PagedAsyncIterableIterator<Bookmark>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Gets all bookmarks.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    private _list;
    /**
     * Gets a bookmark.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param bookmarkId Bookmark ID
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, bookmarkId: string, options?: BookmarksGetOptionalParams): Promise<BookmarksGetResponse>;
    /**
     * Creates or updates the bookmark.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param bookmarkId Bookmark ID
     * @param bookmark The bookmark
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, workspaceName: string, bookmarkId: string, bookmark: Bookmark, options?: BookmarksCreateOrUpdateOptionalParams): Promise<BookmarksCreateOrUpdateResponse>;
    /**
     * Delete the bookmark.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param bookmarkId Bookmark ID
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, workspaceName: string, bookmarkId: string, options?: BookmarksDeleteOptionalParams): Promise<void>;
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
}
//# sourceMappingURL=bookmarks.d.ts.map