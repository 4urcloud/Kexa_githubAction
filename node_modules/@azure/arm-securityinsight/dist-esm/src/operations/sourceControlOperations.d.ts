import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SourceControlOperations } from "../operationsInterfaces";
import { SecurityInsights } from "../securityInsights";
import { Repo, RepoType, SourceControlListRepositoriesOptionalParams } from "../models";
/** Class containing SourceControlOperations operations. */
export declare class SourceControlOperationsImpl implements SourceControlOperations {
    private readonly client;
    /**
     * Initialize a new instance of the class SourceControlOperations class.
     * @param client Reference to the service client
     */
    constructor(client: SecurityInsights);
    /**
     * Gets a list of repositories metadata.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param repoType The repo type.
     * @param options The options parameters.
     */
    listRepositories(resourceGroupName: string, workspaceName: string, repoType: RepoType, options?: SourceControlListRepositoriesOptionalParams): PagedAsyncIterableIterator<Repo>;
    private listRepositoriesPagingPage;
    private listRepositoriesPagingAll;
    /**
     * Gets a list of repositories metadata.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param repoType The repo type.
     * @param options The options parameters.
     */
    private _listRepositories;
    /**
     * ListRepositoriesNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param repoType The repo type.
     * @param nextLink The nextLink from the previous successful call to the ListRepositories method.
     * @param options The options parameters.
     */
    private _listRepositoriesNext;
}
//# sourceMappingURL=sourceControlOperations.d.ts.map