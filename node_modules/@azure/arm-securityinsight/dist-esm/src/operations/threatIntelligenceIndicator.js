/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from "tslib";
import { setContinuationToken } from "../pagingHelper";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/// <reference lib="esnext.asynciterable" />
/** Class containing ThreatIntelligenceIndicator operations. */
export class ThreatIntelligenceIndicatorImpl {
    /**
     * Initialize a new instance of the class ThreatIntelligenceIndicator class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Query threat intelligence indicators as per filtering criteria.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param threatIntelligenceFilteringCriteria Filtering criteria for querying threat intelligence
     *                                            indicators.
     * @param options The options parameters.
     */
    listQueryIndicators(resourceGroupName, workspaceName, threatIntelligenceFilteringCriteria, options) {
        const iter = this.queryIndicatorsPagingAll(resourceGroupName, workspaceName, threatIntelligenceFilteringCriteria, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.queryIndicatorsPagingPage(resourceGroupName, workspaceName, threatIntelligenceFilteringCriteria, options, settings);
            }
        };
    }
    queryIndicatorsPagingPage(resourceGroupName, workspaceName, threatIntelligenceFilteringCriteria, options, settings) {
        return __asyncGenerator(this, arguments, function* queryIndicatorsPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._queryIndicators(resourceGroupName, workspaceName, threatIntelligenceFilteringCriteria, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._queryIndicatorsNext(resourceGroupName, workspaceName, threatIntelligenceFilteringCriteria, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    queryIndicatorsPagingAll(resourceGroupName, workspaceName, threatIntelligenceFilteringCriteria, options) {
        return __asyncGenerator(this, arguments, function* queryIndicatorsPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = __asyncValues(this.queryIndicatorsPagingPage(resourceGroupName, workspaceName, threatIntelligenceFilteringCriteria, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Create a new threat intelligence indicator.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param threatIntelligenceProperties Properties of threat intelligence indicators to create and
     *                                     update.
     * @param options The options parameters.
     */
    createIndicator(resourceGroupName, workspaceName, threatIntelligenceProperties, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            workspaceName,
            threatIntelligenceProperties,
            options
        }, createIndicatorOperationSpec);
    }
    /**
     * View a threat intelligence indicator by name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param name Threat intelligence indicator name field.
     * @param options The options parameters.
     */
    get(resourceGroupName, workspaceName, name, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, name, options }, getOperationSpec);
    }
    /**
     * Update a threat Intelligence indicator.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param name Threat intelligence indicator name field.
     * @param threatIntelligenceProperties Properties of threat intelligence indicators to create and
     *                                     update.
     * @param options The options parameters.
     */
    create(resourceGroupName, workspaceName, name, threatIntelligenceProperties, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            workspaceName,
            name,
            threatIntelligenceProperties,
            options
        }, createOperationSpec);
    }
    /**
     * Delete a threat intelligence indicator.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param name Threat intelligence indicator name field.
     * @param options The options parameters.
     */
    delete(resourceGroupName, workspaceName, name, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, name, options }, deleteOperationSpec);
    }
    /**
     * Query threat intelligence indicators as per filtering criteria.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param threatIntelligenceFilteringCriteria Filtering criteria for querying threat intelligence
     *                                            indicators.
     * @param options The options parameters.
     */
    _queryIndicators(resourceGroupName, workspaceName, threatIntelligenceFilteringCriteria, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            workspaceName,
            threatIntelligenceFilteringCriteria,
            options
        }, queryIndicatorsOperationSpec);
    }
    /**
     * Append tags to a threat intelligence indicator.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param name Threat intelligence indicator name field.
     * @param threatIntelligenceAppendTags The threat intelligence append tags request body
     * @param options The options parameters.
     */
    appendTags(resourceGroupName, workspaceName, name, threatIntelligenceAppendTags, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            workspaceName,
            name,
            threatIntelligenceAppendTags,
            options
        }, appendTagsOperationSpec);
    }
    /**
     * Replace tags added to a threat intelligence indicator.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param name Threat intelligence indicator name field.
     * @param threatIntelligenceReplaceTags Tags in the threat intelligence indicator to be replaced.
     * @param options The options parameters.
     */
    replaceTags(resourceGroupName, workspaceName, name, threatIntelligenceReplaceTags, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            workspaceName,
            name,
            threatIntelligenceReplaceTags,
            options
        }, replaceTagsOperationSpec);
    }
    /**
     * QueryIndicatorsNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param threatIntelligenceFilteringCriteria Filtering criteria for querying threat intelligence
     *                                            indicators.
     * @param nextLink The nextLink from the previous successful call to the QueryIndicators method.
     * @param options The options parameters.
     */
    _queryIndicatorsNext(resourceGroupName, workspaceName, threatIntelligenceFilteringCriteria, nextLink, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            workspaceName,
            threatIntelligenceFilteringCriteria,
            nextLink,
            options
        }, queryIndicatorsNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const createIndicatorOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/threatIntelligence/main/createIndicator",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.ThreatIntelligenceInformation
        },
        201: {
            bodyMapper: Mappers.ThreatIntelligenceInformation
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    requestBody: Parameters.threatIntelligenceProperties,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.workspaceName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/threatIntelligence/main/indicators/{name}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ThreatIntelligenceInformation
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.workspaceName,
        Parameters.name
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const createOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/threatIntelligence/main/indicators/{name}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.ThreatIntelligenceInformation
        },
        201: {
            bodyMapper: Mappers.ThreatIntelligenceInformation
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    requestBody: Parameters.threatIntelligenceProperties,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.workspaceName,
        Parameters.name
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/threatIntelligence/main/indicators/{name}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.workspaceName,
        Parameters.name
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const queryIndicatorsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/threatIntelligence/main/queryIndicators",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.ThreatIntelligenceInformationList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    requestBody: Parameters.threatIntelligenceFilteringCriteria,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.workspaceName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const appendTagsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/threatIntelligence/main/indicators/{name}/appendTags",
    httpMethod: "POST",
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    requestBody: Parameters.threatIntelligenceAppendTags,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.workspaceName,
        Parameters.name
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const replaceTagsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/threatIntelligence/main/indicators/{name}/replaceTags",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.ThreatIntelligenceInformation
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    requestBody: Parameters.threatIntelligenceReplaceTags,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.workspaceName,
        Parameters.name
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const queryIndicatorsNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ThreatIntelligenceInformationList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.workspaceName,
        Parameters.nextLink
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
//# sourceMappingURL=threatIntelligenceIndicator.js.map