import { ProductSettingsListOptionalParams, ProductSettingsListResponse, ProductSettingsGetOptionalParams, ProductSettingsGetResponse, ProductSettingsDeleteOptionalParams, SettingsUnion, ProductSettingsUpdateOptionalParams, ProductSettingsUpdateResponse } from "../models";
/** Interface representing a ProductSettings. */
export interface ProductSettings {
    /**
     * List of all the settings
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, options?: ProductSettingsListOptionalParams): Promise<ProductSettingsListResponse>;
    /**
     * Gets a setting.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param settingsName The setting name. Supports - Anomalies, EyesOn, EntityAnalytics, Ueba
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, settingsName: string, options?: ProductSettingsGetOptionalParams): Promise<ProductSettingsGetResponse>;
    /**
     * Delete setting of the product.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param settingsName The setting name. Supports - Anomalies, EyesOn, EntityAnalytics, Ueba
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, workspaceName: string, settingsName: string, options?: ProductSettingsDeleteOptionalParams): Promise<void>;
    /**
     * Updates setting.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param settingsName The setting name. Supports - Anomalies, EyesOn, EntityAnalytics, Ueba
     * @param settings The setting
     * @param options The options parameters.
     */
    update(resourceGroupName: string, workspaceName: string, settingsName: string, settings: SettingsUnion, options?: ProductSettingsUpdateOptionalParams): Promise<ProductSettingsUpdateResponse>;
}
//# sourceMappingURL=productSettings.d.ts.map