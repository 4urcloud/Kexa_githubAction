'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var coreClient = require('@azure/core-client');
var coreRestPipeline = require('@azure/core-rest-pipeline');
var coreLro = require('@azure/core-lro');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var coreClient__namespace = /*#__PURE__*/_interopNamespace(coreClient);
var coreRestPipeline__namespace = /*#__PURE__*/_interopNamespace(coreRestPipeline);

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const pageMap = new WeakMap();
/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
function getContinuationToken(page) {
    var _a;
    if (typeof page !== "object" || page === null) {
        return undefined;
    }
    return (_a = pageMap.get(page)) === null || _a === void 0 ? void 0 : _a.continuationToken;
}
function setContinuationToken(page, continuationToken) {
    var _a;
    if (typeof page !== "object" || page === null || !continuationToken) {
        return;
    }
    const pageInfo = (_a = pageMap.get(page)) !== null && _a !== void 0 ? _a : {};
    pageInfo.continuationToken = continuationToken;
    pageMap.set(page, pageInfo);
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link AlertRuleKind} that the service accepts. */
exports.KnownAlertRuleKind = void 0;
(function (KnownAlertRuleKind) {
    /** Scheduled */
    KnownAlertRuleKind["Scheduled"] = "Scheduled";
    /** MicrosoftSecurityIncidentCreation */
    KnownAlertRuleKind["MicrosoftSecurityIncidentCreation"] = "MicrosoftSecurityIncidentCreation";
    /** Fusion */
    KnownAlertRuleKind["Fusion"] = "Fusion";
    /** MLBehaviorAnalytics */
    KnownAlertRuleKind["MLBehaviorAnalytics"] = "MLBehaviorAnalytics";
    /** ThreatIntelligence */
    KnownAlertRuleKind["ThreatIntelligence"] = "ThreatIntelligence";
    /** NRT */
    KnownAlertRuleKind["NRT"] = "NRT";
})(exports.KnownAlertRuleKind || (exports.KnownAlertRuleKind = {}));
/** Known values of {@link CreatedByType} that the service accepts. */
exports.KnownCreatedByType = void 0;
(function (KnownCreatedByType) {
    /** User */
    KnownCreatedByType["User"] = "User";
    /** Application */
    KnownCreatedByType["Application"] = "Application";
    /** ManagedIdentity */
    KnownCreatedByType["ManagedIdentity"] = "ManagedIdentity";
    /** Key */
    KnownCreatedByType["Key"] = "Key";
})(exports.KnownCreatedByType || (exports.KnownCreatedByType = {}));
/** Known values of {@link TriggersOn} that the service accepts. */
exports.KnownTriggersOn = void 0;
(function (KnownTriggersOn) {
    /** Trigger on Incidents */
    KnownTriggersOn["Incidents"] = "Incidents";
    /** Trigger on Alerts */
    KnownTriggersOn["Alerts"] = "Alerts";
})(exports.KnownTriggersOn || (exports.KnownTriggersOn = {}));
/** Known values of {@link TriggersWhen} that the service accepts. */
exports.KnownTriggersWhen = void 0;
(function (KnownTriggersWhen) {
    /** Trigger on created objects */
    KnownTriggersWhen["Created"] = "Created";
    /** Trigger on updated objects */
    KnownTriggersWhen["Updated"] = "Updated";
})(exports.KnownTriggersWhen || (exports.KnownTriggersWhen = {}));
/** Known values of {@link ConditionType} that the service accepts. */
exports.KnownConditionType = void 0;
(function (KnownConditionType) {
    /** Evaluate an object property value */
    KnownConditionType["Property"] = "Property";
    /** Evaluate an object array property value */
    KnownConditionType["PropertyArray"] = "PropertyArray";
    /** Evaluate an object property changed value */
    KnownConditionType["PropertyChanged"] = "PropertyChanged";
    /** Evaluate an object array property changed value */
    KnownConditionType["PropertyArrayChanged"] = "PropertyArrayChanged";
    /** Apply a boolean operator (e.g AND, OR) to conditions */
    KnownConditionType["Boolean"] = "Boolean";
})(exports.KnownConditionType || (exports.KnownConditionType = {}));
/** Known values of {@link ActionType} that the service accepts. */
exports.KnownActionType = void 0;
(function (KnownActionType) {
    /** Modify an object's properties */
    KnownActionType["ModifyProperties"] = "ModifyProperties";
    /** Run a playbook on an object */
    KnownActionType["RunPlaybook"] = "RunPlaybook";
})(exports.KnownActionType || (exports.KnownActionType = {}));
/** Known values of {@link IncidentSeverity} that the service accepts. */
exports.KnownIncidentSeverity = void 0;
(function (KnownIncidentSeverity) {
    /** High severity */
    KnownIncidentSeverity["High"] = "High";
    /** Medium severity */
    KnownIncidentSeverity["Medium"] = "Medium";
    /** Low severity */
    KnownIncidentSeverity["Low"] = "Low";
    /** Informational severity */
    KnownIncidentSeverity["Informational"] = "Informational";
})(exports.KnownIncidentSeverity || (exports.KnownIncidentSeverity = {}));
/** Known values of {@link AttackTactic} that the service accepts. */
exports.KnownAttackTactic = void 0;
(function (KnownAttackTactic) {
    /** Reconnaissance */
    KnownAttackTactic["Reconnaissance"] = "Reconnaissance";
    /** ResourceDevelopment */
    KnownAttackTactic["ResourceDevelopment"] = "ResourceDevelopment";
    /** InitialAccess */
    KnownAttackTactic["InitialAccess"] = "InitialAccess";
    /** Execution */
    KnownAttackTactic["Execution"] = "Execution";
    /** Persistence */
    KnownAttackTactic["Persistence"] = "Persistence";
    /** PrivilegeEscalation */
    KnownAttackTactic["PrivilegeEscalation"] = "PrivilegeEscalation";
    /** DefenseEvasion */
    KnownAttackTactic["DefenseEvasion"] = "DefenseEvasion";
    /** CredentialAccess */
    KnownAttackTactic["CredentialAccess"] = "CredentialAccess";
    /** Discovery */
    KnownAttackTactic["Discovery"] = "Discovery";
    /** LateralMovement */
    KnownAttackTactic["LateralMovement"] = "LateralMovement";
    /** Collection */
    KnownAttackTactic["Collection"] = "Collection";
    /** Exfiltration */
    KnownAttackTactic["Exfiltration"] = "Exfiltration";
    /** CommandAndControl */
    KnownAttackTactic["CommandAndControl"] = "CommandAndControl";
    /** Impact */
    KnownAttackTactic["Impact"] = "Impact";
    /** PreAttack */
    KnownAttackTactic["PreAttack"] = "PreAttack";
    /** ImpairProcessControl */
    KnownAttackTactic["ImpairProcessControl"] = "ImpairProcessControl";
    /** InhibitResponseFunction */
    KnownAttackTactic["InhibitResponseFunction"] = "InhibitResponseFunction";
})(exports.KnownAttackTactic || (exports.KnownAttackTactic = {}));
/** Known values of {@link EntityKind} that the service accepts. */
exports.KnownEntityKind = void 0;
(function (KnownEntityKind) {
    /** Entity represents account in the system. */
    KnownEntityKind["Account"] = "Account";
    /** Entity represents host in the system. */
    KnownEntityKind["Host"] = "Host";
    /** Entity represents file in the system. */
    KnownEntityKind["File"] = "File";
    /** Entity represents azure resource in the system. */
    KnownEntityKind["AzureResource"] = "AzureResource";
    /** Entity represents cloud application in the system. */
    KnownEntityKind["CloudApplication"] = "CloudApplication";
    /** Entity represents dns resolution in the system. */
    KnownEntityKind["DnsResolution"] = "DnsResolution";
    /** Entity represents file hash in the system. */
    KnownEntityKind["FileHash"] = "FileHash";
    /** Entity represents ip in the system. */
    KnownEntityKind["Ip"] = "Ip";
    /** Entity represents malware in the system. */
    KnownEntityKind["Malware"] = "Malware";
    /** Entity represents process in the system. */
    KnownEntityKind["Process"] = "Process";
    /** Entity represents registry key in the system. */
    KnownEntityKind["RegistryKey"] = "RegistryKey";
    /** Entity represents registry value in the system. */
    KnownEntityKind["RegistryValue"] = "RegistryValue";
    /** Entity represents security group in the system. */
    KnownEntityKind["SecurityGroup"] = "SecurityGroup";
    /** Entity represents url in the system. */
    KnownEntityKind["Url"] = "Url";
    /** Entity represents IoT device in the system. */
    KnownEntityKind["IoTDevice"] = "IoTDevice";
    /** Entity represents security alert in the system. */
    KnownEntityKind["SecurityAlert"] = "SecurityAlert";
    /** Entity represents bookmark in the system. */
    KnownEntityKind["Bookmark"] = "Bookmark";
    /** Entity represents mail cluster in the system. */
    KnownEntityKind["MailCluster"] = "MailCluster";
    /** Entity represents mail message in the system. */
    KnownEntityKind["MailMessage"] = "MailMessage";
    /** Entity represents mailbox in the system. */
    KnownEntityKind["Mailbox"] = "Mailbox";
    /** Entity represents submission mail in the system. */
    KnownEntityKind["SubmissionMail"] = "SubmissionMail";
    /** Entity represents network interface in the system. */
    KnownEntityKind["Nic"] = "Nic";
})(exports.KnownEntityKind || (exports.KnownEntityKind = {}));
/** Known values of {@link EntityTimelineKind} that the service accepts. */
exports.KnownEntityTimelineKind = void 0;
(function (KnownEntityTimelineKind) {
    /** activity */
    KnownEntityTimelineKind["Activity"] = "Activity";
    /** bookmarks */
    KnownEntityTimelineKind["Bookmark"] = "Bookmark";
    /** security alerts */
    KnownEntityTimelineKind["SecurityAlert"] = "SecurityAlert";
    /** anomaly */
    KnownEntityTimelineKind["Anomaly"] = "Anomaly";
})(exports.KnownEntityTimelineKind || (exports.KnownEntityTimelineKind = {}));
/** Known values of {@link EntityItemQueryKind} that the service accepts. */
exports.KnownEntityItemQueryKind = void 0;
(function (KnownEntityItemQueryKind) {
    /** insight */
    KnownEntityItemQueryKind["Insight"] = "Insight";
})(exports.KnownEntityItemQueryKind || (exports.KnownEntityItemQueryKind = {}));
/** Known values of {@link EntityQueryKind} that the service accepts. */
exports.KnownEntityQueryKind = void 0;
(function (KnownEntityQueryKind) {
    /** Expansion */
    KnownEntityQueryKind["Expansion"] = "Expansion";
    /** Insight */
    KnownEntityQueryKind["Insight"] = "Insight";
    /** Activity */
    KnownEntityQueryKind["Activity"] = "Activity";
})(exports.KnownEntityQueryKind || (exports.KnownEntityQueryKind = {}));
/** Known values of {@link GetInsightsError} that the service accepts. */
exports.KnownGetInsightsError = void 0;
(function (KnownGetInsightsError) {
    /** Insight */
    KnownGetInsightsError["Insight"] = "Insight";
})(exports.KnownGetInsightsError || (exports.KnownGetInsightsError = {}));
/** Known values of {@link Enum13} that the service accepts. */
exports.KnownEnum13 = void 0;
(function (KnownEnum13) {
    /** Expansion */
    KnownEnum13["Expansion"] = "Expansion";
    /** Activity */
    KnownEnum13["Activity"] = "Activity";
})(exports.KnownEnum13 || (exports.KnownEnum13 = {}));
/** Known values of {@link CustomEntityQueryKind} that the service accepts. */
exports.KnownCustomEntityQueryKind = void 0;
(function (KnownCustomEntityQueryKind) {
    /** Activity */
    KnownCustomEntityQueryKind["Activity"] = "Activity";
})(exports.KnownCustomEntityQueryKind || (exports.KnownCustomEntityQueryKind = {}));
/** Known values of {@link EntityQueryTemplateKind} that the service accepts. */
exports.KnownEntityQueryTemplateKind = void 0;
(function (KnownEntityQueryTemplateKind) {
    /** Activity */
    KnownEntityQueryTemplateKind["Activity"] = "Activity";
})(exports.KnownEntityQueryTemplateKind || (exports.KnownEntityQueryTemplateKind = {}));
/** Known values of {@link IngestionMode} that the service accepts. */
exports.KnownIngestionMode = void 0;
(function (KnownIngestionMode) {
    /** No records should be ingested when invalid records are detected. */
    KnownIngestionMode["IngestOnlyIfAllAreValid"] = "IngestOnlyIfAllAreValid";
    /** Valid records should still be ingested when invalid records are detected. */
    KnownIngestionMode["IngestAnyValidRecords"] = "IngestAnyValidRecords";
    /** Unspecified */
    KnownIngestionMode["Unspecified"] = "Unspecified";
})(exports.KnownIngestionMode || (exports.KnownIngestionMode = {}));
/** Known values of {@link FileImportContentType} that the service accepts. */
exports.KnownFileImportContentType = void 0;
(function (KnownFileImportContentType) {
    /** File containing records with the core fields of an indicator, plus the observables to construct the STIX pattern. */
    KnownFileImportContentType["BasicIndicator"] = "BasicIndicator";
    /** File containing STIX indicators. */
    KnownFileImportContentType["StixIndicator"] = "StixIndicator";
    /** File containing other records. */
    KnownFileImportContentType["Unspecified"] = "Unspecified";
})(exports.KnownFileImportContentType || (exports.KnownFileImportContentType = {}));
/** Known values of {@link FileFormat} that the service accepts. */
exports.KnownFileFormat = void 0;
(function (KnownFileFormat) {
    /** A CSV file. */
    KnownFileFormat["CSV"] = "CSV";
    /** A JSON file. */
    KnownFileFormat["Json"] = "JSON";
    /** A file of other format. */
    KnownFileFormat["Unspecified"] = "Unspecified";
})(exports.KnownFileFormat || (exports.KnownFileFormat = {}));
/** Known values of {@link DeleteStatus} that the service accepts. */
exports.KnownDeleteStatus = void 0;
(function (KnownDeleteStatus) {
    /** The file was deleted. */
    KnownDeleteStatus["Deleted"] = "Deleted";
    /** The file was not deleted. */
    KnownDeleteStatus["NotDeleted"] = "NotDeleted";
    /** Unspecified */
    KnownDeleteStatus["Unspecified"] = "Unspecified";
})(exports.KnownDeleteStatus || (exports.KnownDeleteStatus = {}));
/** Known values of {@link FileImportState} that the service accepts. */
exports.KnownFileImportState = void 0;
(function (KnownFileImportState) {
    /** A fatal error has occurred while ingesting the file. */
    KnownFileImportState["FatalError"] = "FatalError";
    /** The file has been ingested. */
    KnownFileImportState["Ingested"] = "Ingested";
    /** The file has been ingested with errors. */
    KnownFileImportState["IngestedWithErrors"] = "IngestedWithErrors";
    /** The file ingestion is in progress. */
    KnownFileImportState["InProgress"] = "InProgress";
    /** The file is invalid. */
    KnownFileImportState["Invalid"] = "Invalid";
    /** Waiting for the file to be uploaded. */
    KnownFileImportState["WaitingForUpload"] = "WaitingForUpload";
    /** Unspecified state. */
    KnownFileImportState["Unspecified"] = "Unspecified";
})(exports.KnownFileImportState || (exports.KnownFileImportState = {}));
/** Known values of {@link IncidentClassification} that the service accepts. */
exports.KnownIncidentClassification = void 0;
(function (KnownIncidentClassification) {
    /** Incident classification was undetermined */
    KnownIncidentClassification["Undetermined"] = "Undetermined";
    /** Incident was true positive */
    KnownIncidentClassification["TruePositive"] = "TruePositive";
    /** Incident was benign positive */
    KnownIncidentClassification["BenignPositive"] = "BenignPositive";
    /** Incident was false positive */
    KnownIncidentClassification["FalsePositive"] = "FalsePositive";
})(exports.KnownIncidentClassification || (exports.KnownIncidentClassification = {}));
/** Known values of {@link IncidentClassificationReason} that the service accepts. */
exports.KnownIncidentClassificationReason = void 0;
(function (KnownIncidentClassificationReason) {
    /** Classification reason was suspicious activity */
    KnownIncidentClassificationReason["SuspiciousActivity"] = "SuspiciousActivity";
    /** Classification reason was suspicious but expected */
    KnownIncidentClassificationReason["SuspiciousButExpected"] = "SuspiciousButExpected";
    /** Classification reason was incorrect alert logic */
    KnownIncidentClassificationReason["IncorrectAlertLogic"] = "IncorrectAlertLogic";
    /** Classification reason was inaccurate data */
    KnownIncidentClassificationReason["InaccurateData"] = "InaccurateData";
})(exports.KnownIncidentClassificationReason || (exports.KnownIncidentClassificationReason = {}));
/** Known values of {@link IncidentLabelType} that the service accepts. */
exports.KnownIncidentLabelType = void 0;
(function (KnownIncidentLabelType) {
    /** Label manually created by a user */
    KnownIncidentLabelType["User"] = "User";
    /** Label automatically created by the system */
    KnownIncidentLabelType["AutoAssigned"] = "AutoAssigned";
})(exports.KnownIncidentLabelType || (exports.KnownIncidentLabelType = {}));
/** Known values of {@link OwnerType} that the service accepts. */
exports.KnownOwnerType = void 0;
(function (KnownOwnerType) {
    /** The incident owner type is unknown */
    KnownOwnerType["Unknown"] = "Unknown";
    /** The incident owner type is an AAD user */
    KnownOwnerType["User"] = "User";
    /** The incident owner type is an AAD group */
    KnownOwnerType["Group"] = "Group";
})(exports.KnownOwnerType || (exports.KnownOwnerType = {}));
/** Known values of {@link IncidentStatus} that the service accepts. */
exports.KnownIncidentStatus = void 0;
(function (KnownIncidentStatus) {
    /** An active incident which isn't being handled currently */
    KnownIncidentStatus["New"] = "New";
    /** An active incident which is being handled */
    KnownIncidentStatus["Active"] = "Active";
    /** A non-active incident */
    KnownIncidentStatus["Closed"] = "Closed";
})(exports.KnownIncidentStatus || (exports.KnownIncidentStatus = {}));
/** Known values of {@link ConfidenceLevel} that the service accepts. */
exports.KnownConfidenceLevel = void 0;
(function (KnownConfidenceLevel) {
    /** Unknown confidence, the is the default value */
    KnownConfidenceLevel["Unknown"] = "Unknown";
    /** Low confidence, meaning we have some doubts this is indeed malicious or part of an attack */
    KnownConfidenceLevel["Low"] = "Low";
    /** High confidence that the alert is true positive malicious */
    KnownConfidenceLevel["High"] = "High";
})(exports.KnownConfidenceLevel || (exports.KnownConfidenceLevel = {}));
/** Known values of {@link ConfidenceScoreStatus} that the service accepts. */
exports.KnownConfidenceScoreStatus = void 0;
(function (KnownConfidenceScoreStatus) {
    /** Score will not be calculated for this alert as it is not supported by virtual analyst */
    KnownConfidenceScoreStatus["NotApplicable"] = "NotApplicable";
    /** No score was set yet and calculation is in progress */
    KnownConfidenceScoreStatus["InProcess"] = "InProcess";
    /** Score is calculated and shown as part of the alert, but may be updated again at a later time following the processing of additional data */
    KnownConfidenceScoreStatus["NotFinal"] = "NotFinal";
    /** Final score was calculated and available */
    KnownConfidenceScoreStatus["Final"] = "Final";
})(exports.KnownConfidenceScoreStatus || (exports.KnownConfidenceScoreStatus = {}));
/** Known values of {@link KillChainIntent} that the service accepts. */
exports.KnownKillChainIntent = void 0;
(function (KnownKillChainIntent) {
    /** The default value. */
    KnownKillChainIntent["Unknown"] = "Unknown";
    /** Probing could be an attempt to access a certain resource regardless of a malicious intent or a failed attempt to gain access to a target system to gather information prior to exploitation. This step is usually detected as an attempt originating from outside the network in attempt to scan the target system and find a way in. */
    KnownKillChainIntent["Probing"] = "Probing";
    /** Exploitation is the stage where an attacker manage to get foothold on the attacked resource. This stage is applicable not only for compute hosts, but also for resources such as user accounts, certificates etc. Adversaries will often be able to control the resource after this stage. */
    KnownKillChainIntent["Exploitation"] = "Exploitation";
    /** Persistence is any access, action, or configuration change to a system that gives an adversary a persistent presence on that system. Adversaries will often need to maintain access to systems through interruptions such as system restarts, loss of credentials, or other failures that would require a remote access tool to restart or alternate backdoor for them to regain access. */
    KnownKillChainIntent["Persistence"] = "Persistence";
    /** Privilege escalation is the result of actions that allow an adversary to obtain a higher level of permissions on a system or network. Certain tools or actions require a higher level of privilege to work and are likely necessary at many points throughout an operation. User accounts with permissions to access specific systems or perform specific functions necessary for adversaries to achieve their objective may also be considered an escalation of privilege. */
    KnownKillChainIntent["PrivilegeEscalation"] = "PrivilegeEscalation";
    /** Defense evasion consists of techniques an adversary may use to evade detection or avoid other defenses. Sometimes these actions are the same as or variations of techniques in other categories that have the added benefit of subverting a particular defense or mitigation. */
    KnownKillChainIntent["DefenseEvasion"] = "DefenseEvasion";
    /** Credential access represents techniques resulting in access to or control over system, domain, or service credentials that are used within an enterprise environment. Adversaries will likely attempt to obtain legitimate credentials from users or administrator accounts (local system administrator or domain users with administrator access) to use within the network. With sufficient access within a network, an adversary can create accounts for later use within the environment. */
    KnownKillChainIntent["CredentialAccess"] = "CredentialAccess";
    /** Discovery consists of techniques that allow the adversary to gain knowledge about the system and internal network. When adversaries gain access to a new system, they must orient themselves to what they now have control of and what benefits operating from that system give to their current objective or overall goals during the intrusion. The operating system provides many native tools that aid in this post-compromise information-gathering phase. */
    KnownKillChainIntent["Discovery"] = "Discovery";
    /** Lateral movement consists of techniques that enable an adversary to access and control remote systems on a network and could, but does not necessarily, include execution of tools on remote systems. The lateral movement techniques could allow an adversary to gather information from a system without needing additional tools, such as a remote access tool. An adversary can use lateral movement for many purposes, including remote Execution of tools, pivoting to additional systems, access to specific information or files, access to additional credentials, or to cause an effect. */
    KnownKillChainIntent["LateralMovement"] = "LateralMovement";
    /** The execution tactic represents techniques that result in execution of adversary-controlled code on a local or remote system. This tactic is often used in conjunction with lateral movement to expand access to remote systems on a network. */
    KnownKillChainIntent["Execution"] = "Execution";
    /** Collection consists of techniques used to identify and gather information, such as sensitive files, from a target network prior to exfiltration. This category also covers locations on a system or network where the adversary may look for information to exfiltrate. */
    KnownKillChainIntent["Collection"] = "Collection";
    /** Exfiltration refers to techniques and attributes that result or aid in the adversary removing files and information from a target network. This category also covers locations on a system or network where the adversary may look for information to exfiltrate. */
    KnownKillChainIntent["Exfiltration"] = "Exfiltration";
    /** The command and control tactic represents how adversaries communicate with systems under their control within a target network. */
    KnownKillChainIntent["CommandAndControl"] = "CommandAndControl";
    /** The impact intent primary objective is to directly reduce the availability or integrity of a system, service, or network; including manipulation of data to impact a business or operational process. This would often refer to techniques such as ransom-ware, defacement, data manipulation and others. */
    KnownKillChainIntent["Impact"] = "Impact";
})(exports.KnownKillChainIntent || (exports.KnownKillChainIntent = {}));
/** Known values of {@link AlertSeverity} that the service accepts. */
exports.KnownAlertSeverity = void 0;
(function (KnownAlertSeverity) {
    /** High severity */
    KnownAlertSeverity["High"] = "High";
    /** Medium severity */
    KnownAlertSeverity["Medium"] = "Medium";
    /** Low severity */
    KnownAlertSeverity["Low"] = "Low";
    /** Informational severity */
    KnownAlertSeverity["Informational"] = "Informational";
})(exports.KnownAlertSeverity || (exports.KnownAlertSeverity = {}));
/** Known values of {@link AlertStatus} that the service accepts. */
exports.KnownAlertStatus = void 0;
(function (KnownAlertStatus) {
    /** Unknown value */
    KnownAlertStatus["Unknown"] = "Unknown";
    /** New alert */
    KnownAlertStatus["New"] = "New";
    /** Alert closed after handling */
    KnownAlertStatus["Resolved"] = "Resolved";
    /** Alert dismissed as false positive */
    KnownAlertStatus["Dismissed"] = "Dismissed";
    /** Alert is being handled */
    KnownAlertStatus["InProgress"] = "InProgress";
})(exports.KnownAlertStatus || (exports.KnownAlertStatus = {}));
/** Known values of {@link Kind} that the service accepts. */
exports.KnownKind = void 0;
(function (KnownKind) {
    /** DataConnector */
    KnownKind["DataConnector"] = "DataConnector";
    /** DataType */
    KnownKind["DataType"] = "DataType";
    /** Workbook */
    KnownKind["Workbook"] = "Workbook";
    /** WorkbookTemplate */
    KnownKind["WorkbookTemplate"] = "WorkbookTemplate";
    /** Playbook */
    KnownKind["Playbook"] = "Playbook";
    /** PlaybookTemplate */
    KnownKind["PlaybookTemplate"] = "PlaybookTemplate";
    /** AnalyticsRuleTemplate */
    KnownKind["AnalyticsRuleTemplate"] = "AnalyticsRuleTemplate";
    /** AnalyticsRule */
    KnownKind["AnalyticsRule"] = "AnalyticsRule";
    /** HuntingQuery */
    KnownKind["HuntingQuery"] = "HuntingQuery";
    /** InvestigationQuery */
    KnownKind["InvestigationQuery"] = "InvestigationQuery";
    /** Parser */
    KnownKind["Parser"] = "Parser";
    /** Watchlist */
    KnownKind["Watchlist"] = "Watchlist";
    /** WatchlistTemplate */
    KnownKind["WatchlistTemplate"] = "WatchlistTemplate";
    /** Solution */
    KnownKind["Solution"] = "Solution";
    /** AzureFunction */
    KnownKind["AzureFunction"] = "AzureFunction";
    /** LogicAppsCustomConnector */
    KnownKind["LogicAppsCustomConnector"] = "LogicAppsCustomConnector";
    /** AutomationRule */
    KnownKind["AutomationRule"] = "AutomationRule";
})(exports.KnownKind || (exports.KnownKind = {}));
/** Known values of {@link SourceKind} that the service accepts. */
exports.KnownSourceKind = void 0;
(function (KnownSourceKind) {
    /** LocalWorkspace */
    KnownSourceKind["LocalWorkspace"] = "LocalWorkspace";
    /** Community */
    KnownSourceKind["Community"] = "Community";
    /** Solution */
    KnownSourceKind["Solution"] = "Solution";
    /** SourceRepository */
    KnownSourceKind["SourceRepository"] = "SourceRepository";
})(exports.KnownSourceKind || (exports.KnownSourceKind = {}));
/** Known values of {@link SupportTier} that the service accepts. */
exports.KnownSupportTier = void 0;
(function (KnownSupportTier) {
    /** Microsoft */
    KnownSupportTier["Microsoft"] = "Microsoft";
    /** Partner */
    KnownSupportTier["Partner"] = "Partner";
    /** Community */
    KnownSupportTier["Community"] = "Community";
})(exports.KnownSupportTier || (exports.KnownSupportTier = {}));
/** Known values of {@link Operator} that the service accepts. */
exports.KnownOperator = void 0;
(function (KnownOperator) {
    /** AND */
    KnownOperator["AND"] = "AND";
    /** OR */
    KnownOperator["OR"] = "OR";
})(exports.KnownOperator || (exports.KnownOperator = {}));
/** Known values of {@link SecurityMLAnalyticsSettingsKind} that the service accepts. */
exports.KnownSecurityMLAnalyticsSettingsKind = void 0;
(function (KnownSecurityMLAnalyticsSettingsKind) {
    /** Anomaly */
    KnownSecurityMLAnalyticsSettingsKind["Anomaly"] = "Anomaly";
})(exports.KnownSecurityMLAnalyticsSettingsKind || (exports.KnownSecurityMLAnalyticsSettingsKind = {}));
/** Known values of {@link SettingKind} that the service accepts. */
exports.KnownSettingKind = void 0;
(function (KnownSettingKind) {
    /** Anomalies */
    KnownSettingKind["Anomalies"] = "Anomalies";
    /** EyesOn */
    KnownSettingKind["EyesOn"] = "EyesOn";
    /** EntityAnalytics */
    KnownSettingKind["EntityAnalytics"] = "EntityAnalytics";
    /** Ueba */
    KnownSettingKind["Ueba"] = "Ueba";
})(exports.KnownSettingKind || (exports.KnownSettingKind = {}));
/** Known values of {@link RepoType} that the service accepts. */
exports.KnownRepoType = void 0;
(function (KnownRepoType) {
    /** Github */
    KnownRepoType["Github"] = "Github";
    /** DevOps */
    KnownRepoType["DevOps"] = "DevOps";
})(exports.KnownRepoType || (exports.KnownRepoType = {}));
/** Known values of {@link Version} that the service accepts. */
exports.KnownVersion = void 0;
(function (KnownVersion) {
    /** V1 */
    KnownVersion["V1"] = "V1";
    /** V2 */
    KnownVersion["V2"] = "V2";
})(exports.KnownVersion || (exports.KnownVersion = {}));
/** Known values of {@link ContentType} that the service accepts. */
exports.KnownContentType = void 0;
(function (KnownContentType) {
    /** AnalyticRule */
    KnownContentType["AnalyticRule"] = "AnalyticRule";
    /** Workbook */
    KnownContentType["Workbook"] = "Workbook";
})(exports.KnownContentType || (exports.KnownContentType = {}));
/** Known values of {@link DeploymentFetchStatus} that the service accepts. */
exports.KnownDeploymentFetchStatus = void 0;
(function (KnownDeploymentFetchStatus) {
    /** Success */
    KnownDeploymentFetchStatus["Success"] = "Success";
    /** Unauthorized */
    KnownDeploymentFetchStatus["Unauthorized"] = "Unauthorized";
    /** NotFound */
    KnownDeploymentFetchStatus["NotFound"] = "NotFound";
})(exports.KnownDeploymentFetchStatus || (exports.KnownDeploymentFetchStatus = {}));
/** Known values of {@link DeploymentState} that the service accepts. */
exports.KnownDeploymentState = void 0;
(function (KnownDeploymentState) {
    /** InProgress */
    KnownDeploymentState["InProgress"] = "In_Progress";
    /** Completed */
    KnownDeploymentState["Completed"] = "Completed";
    /** Queued */
    KnownDeploymentState["Queued"] = "Queued";
    /** Canceling */
    KnownDeploymentState["Canceling"] = "Canceling";
})(exports.KnownDeploymentState || (exports.KnownDeploymentState = {}));
/** Known values of {@link DeploymentResult} that the service accepts. */
exports.KnownDeploymentResult = void 0;
(function (KnownDeploymentResult) {
    /** Success */
    KnownDeploymentResult["Success"] = "Success";
    /** Canceled */
    KnownDeploymentResult["Canceled"] = "Canceled";
    /** Failed */
    KnownDeploymentResult["Failed"] = "Failed";
})(exports.KnownDeploymentResult || (exports.KnownDeploymentResult = {}));
/** Known values of {@link ThreatIntelligenceResourceKindEnum} that the service accepts. */
exports.KnownThreatIntelligenceResourceKindEnum = void 0;
(function (KnownThreatIntelligenceResourceKindEnum) {
    /** Entity represents threat intelligence indicator in the system. */
    KnownThreatIntelligenceResourceKindEnum["Indicator"] = "indicator";
})(exports.KnownThreatIntelligenceResourceKindEnum || (exports.KnownThreatIntelligenceResourceKindEnum = {}));
/** Known values of {@link ThreatIntelligenceSortingCriteriaEnum} that the service accepts. */
exports.KnownThreatIntelligenceSortingCriteriaEnum = void 0;
(function (KnownThreatIntelligenceSortingCriteriaEnum) {
    /** Unsorted */
    KnownThreatIntelligenceSortingCriteriaEnum["Unsorted"] = "unsorted";
    /** Ascending */
    KnownThreatIntelligenceSortingCriteriaEnum["Ascending"] = "ascending";
    /** Descending */
    KnownThreatIntelligenceSortingCriteriaEnum["Descending"] = "descending";
})(exports.KnownThreatIntelligenceSortingCriteriaEnum || (exports.KnownThreatIntelligenceSortingCriteriaEnum = {}));
/** Known values of {@link SourceType} that the service accepts. */
exports.KnownSourceType = void 0;
(function (KnownSourceType) {
    /** LocalFile */
    KnownSourceType["LocalFile"] = "Local file";
    /** RemoteStorage */
    KnownSourceType["RemoteStorage"] = "Remote storage";
})(exports.KnownSourceType || (exports.KnownSourceType = {}));
/** Known values of {@link DataConnectorKind} that the service accepts. */
exports.KnownDataConnectorKind = void 0;
(function (KnownDataConnectorKind) {
    /** AzureActiveDirectory */
    KnownDataConnectorKind["AzureActiveDirectory"] = "AzureActiveDirectory";
    /** AzureSecurityCenter */
    KnownDataConnectorKind["AzureSecurityCenter"] = "AzureSecurityCenter";
    /** MicrosoftCloudAppSecurity */
    KnownDataConnectorKind["MicrosoftCloudAppSecurity"] = "MicrosoftCloudAppSecurity";
    /** ThreatIntelligence */
    KnownDataConnectorKind["ThreatIntelligence"] = "ThreatIntelligence";
    /** ThreatIntelligenceTaxii */
    KnownDataConnectorKind["ThreatIntelligenceTaxii"] = "ThreatIntelligenceTaxii";
    /** Office365 */
    KnownDataConnectorKind["Office365"] = "Office365";
    /** OfficeATP */
    KnownDataConnectorKind["OfficeATP"] = "OfficeATP";
    /** OfficeIRM */
    KnownDataConnectorKind["OfficeIRM"] = "OfficeIRM";
    /** Office365Project */
    KnownDataConnectorKind["Office365Project"] = "Office365Project";
    /** OfficePowerBI */
    KnownDataConnectorKind["OfficePowerBI"] = "OfficePowerBI";
    /** AmazonWebServicesCloudTrail */
    KnownDataConnectorKind["AmazonWebServicesCloudTrail"] = "AmazonWebServicesCloudTrail";
    /** AmazonWebServicesS3 */
    KnownDataConnectorKind["AmazonWebServicesS3"] = "AmazonWebServicesS3";
    /** AzureAdvancedThreatProtection */
    KnownDataConnectorKind["AzureAdvancedThreatProtection"] = "AzureAdvancedThreatProtection";
    /** MicrosoftDefenderAdvancedThreatProtection */
    KnownDataConnectorKind["MicrosoftDefenderAdvancedThreatProtection"] = "MicrosoftDefenderAdvancedThreatProtection";
    /** Dynamics365 */
    KnownDataConnectorKind["Dynamics365"] = "Dynamics365";
    /** MicrosoftThreatProtection */
    KnownDataConnectorKind["MicrosoftThreatProtection"] = "MicrosoftThreatProtection";
    /** MicrosoftThreatIntelligence */
    KnownDataConnectorKind["MicrosoftThreatIntelligence"] = "MicrosoftThreatIntelligence";
    /** GenericUI */
    KnownDataConnectorKind["GenericUI"] = "GenericUI";
    /** APIPolling */
    KnownDataConnectorKind["APIPolling"] = "APIPolling";
    /** IOT */
    KnownDataConnectorKind["IOT"] = "IOT";
})(exports.KnownDataConnectorKind || (exports.KnownDataConnectorKind = {}));
/** Known values of {@link ConnectAuthKind} that the service accepts. */
exports.KnownConnectAuthKind = void 0;
(function (KnownConnectAuthKind) {
    /** Basic */
    KnownConnectAuthKind["Basic"] = "Basic";
    /** OAuth2 */
    KnownConnectAuthKind["OAuth2"] = "OAuth2";
    /** APIKey */
    KnownConnectAuthKind["APIKey"] = "APIKey";
})(exports.KnownConnectAuthKind || (exports.KnownConnectAuthKind = {}));
/** Known values of {@link DataConnectorAuthorizationState} that the service accepts. */
exports.KnownDataConnectorAuthorizationState = void 0;
(function (KnownDataConnectorAuthorizationState) {
    /** Valid */
    KnownDataConnectorAuthorizationState["Valid"] = "Valid";
    /** Invalid */
    KnownDataConnectorAuthorizationState["Invalid"] = "Invalid";
})(exports.KnownDataConnectorAuthorizationState || (exports.KnownDataConnectorAuthorizationState = {}));
/** Known values of {@link DataConnectorLicenseState} that the service accepts. */
exports.KnownDataConnectorLicenseState = void 0;
(function (KnownDataConnectorLicenseState) {
    /** Valid */
    KnownDataConnectorLicenseState["Valid"] = "Valid";
    /** Invalid */
    KnownDataConnectorLicenseState["Invalid"] = "Invalid";
    /** Unknown */
    KnownDataConnectorLicenseState["Unknown"] = "Unknown";
})(exports.KnownDataConnectorLicenseState || (exports.KnownDataConnectorLicenseState = {}));
/** Known values of {@link TemplateStatus} that the service accepts. */
exports.KnownTemplateStatus = void 0;
(function (KnownTemplateStatus) {
    /** Alert rule template installed. and can not use more then once */
    KnownTemplateStatus["Installed"] = "Installed";
    /** Alert rule template is available. */
    KnownTemplateStatus["Available"] = "Available";
    /** Alert rule template is not available */
    KnownTemplateStatus["NotAvailable"] = "NotAvailable";
})(exports.KnownTemplateStatus || (exports.KnownTemplateStatus = {}));
/** Known values of {@link EntityMappingType} that the service accepts. */
exports.KnownEntityMappingType = void 0;
(function (KnownEntityMappingType) {
    /** User account entity type */
    KnownEntityMappingType["Account"] = "Account";
    /** Host entity type */
    KnownEntityMappingType["Host"] = "Host";
    /** IP address entity type */
    KnownEntityMappingType["IP"] = "IP";
    /** Malware entity type */
    KnownEntityMappingType["Malware"] = "Malware";
    /** System file entity type */
    KnownEntityMappingType["File"] = "File";
    /** Process entity type */
    KnownEntityMappingType["Process"] = "Process";
    /** Cloud app entity type */
    KnownEntityMappingType["CloudApplication"] = "CloudApplication";
    /** DNS entity type */
    KnownEntityMappingType["DNS"] = "DNS";
    /** Azure resource entity type */
    KnownEntityMappingType["AzureResource"] = "AzureResource";
    /** File-hash entity type */
    KnownEntityMappingType["FileHash"] = "FileHash";
    /** Registry key entity type */
    KnownEntityMappingType["RegistryKey"] = "RegistryKey";
    /** Registry value entity type */
    KnownEntityMappingType["RegistryValue"] = "RegistryValue";
    /** Security group entity type */
    KnownEntityMappingType["SecurityGroup"] = "SecurityGroup";
    /** URL entity type */
    KnownEntityMappingType["URL"] = "URL";
    /** Mailbox entity type */
    KnownEntityMappingType["Mailbox"] = "Mailbox";
    /** Mail cluster entity type */
    KnownEntityMappingType["MailCluster"] = "MailCluster";
    /** Mail message entity type */
    KnownEntityMappingType["MailMessage"] = "MailMessage";
    /** Submission mail entity type */
    KnownEntityMappingType["SubmissionMail"] = "SubmissionMail";
})(exports.KnownEntityMappingType || (exports.KnownEntityMappingType = {}));
/** Known values of {@link EventGroupingAggregationKind} that the service accepts. */
exports.KnownEventGroupingAggregationKind = void 0;
(function (KnownEventGroupingAggregationKind) {
    /** SingleAlert */
    KnownEventGroupingAggregationKind["SingleAlert"] = "SingleAlert";
    /** AlertPerResult */
    KnownEventGroupingAggregationKind["AlertPerResult"] = "AlertPerResult";
})(exports.KnownEventGroupingAggregationKind || (exports.KnownEventGroupingAggregationKind = {}));
/** Known values of {@link MicrosoftSecurityProductName} that the service accepts. */
exports.KnownMicrosoftSecurityProductName = void 0;
(function (KnownMicrosoftSecurityProductName) {
    /** MicrosoftCloudAppSecurity */
    KnownMicrosoftSecurityProductName["MicrosoftCloudAppSecurity"] = "Microsoft Cloud App Security";
    /** AzureSecurityCenter */
    KnownMicrosoftSecurityProductName["AzureSecurityCenter"] = "Azure Security Center";
    /** AzureAdvancedThreatProtection */
    KnownMicrosoftSecurityProductName["AzureAdvancedThreatProtection"] = "Azure Advanced Threat Protection";
    /** AzureActiveDirectoryIdentityProtection */
    KnownMicrosoftSecurityProductName["AzureActiveDirectoryIdentityProtection"] = "Azure Active Directory Identity Protection";
    /** AzureSecurityCenterForIoT */
    KnownMicrosoftSecurityProductName["AzureSecurityCenterForIoT"] = "Azure Security Center for IoT";
    /** Office365AdvancedThreatProtection */
    KnownMicrosoftSecurityProductName["Office365AdvancedThreatProtection"] = "Office 365 Advanced Threat Protection";
    /** MicrosoftDefenderAdvancedThreatProtection */
    KnownMicrosoftSecurityProductName["MicrosoftDefenderAdvancedThreatProtection"] = "Microsoft Defender Advanced Threat Protection";
})(exports.KnownMicrosoftSecurityProductName || (exports.KnownMicrosoftSecurityProductName = {}));
/** Known values of {@link MatchingMethod} that the service accepts. */
exports.KnownMatchingMethod = void 0;
(function (KnownMatchingMethod) {
    /** Grouping alerts into a single incident if all the entities match */
    KnownMatchingMethod["AllEntities"] = "AllEntities";
    /** Grouping any alerts triggered by this rule into a single incident */
    KnownMatchingMethod["AnyAlert"] = "AnyAlert";
    /** Grouping alerts into a single incident if the selected entities, custom details and alert details match */
    KnownMatchingMethod["Selected"] = "Selected";
})(exports.KnownMatchingMethod || (exports.KnownMatchingMethod = {}));
/** Known values of {@link AlertDetail} that the service accepts. */
exports.KnownAlertDetail = void 0;
(function (KnownAlertDetail) {
    /** Alert display name */
    KnownAlertDetail["DisplayName"] = "DisplayName";
    /** Alert severity */
    KnownAlertDetail["Severity"] = "Severity";
})(exports.KnownAlertDetail || (exports.KnownAlertDetail = {}));
/** Known values of {@link AutomationRuleBooleanConditionSupportedOperator} that the service accepts. */
exports.KnownAutomationRuleBooleanConditionSupportedOperator = void 0;
(function (KnownAutomationRuleBooleanConditionSupportedOperator) {
    /** Evaluates as true if all the item conditions are evaluated as true */
    KnownAutomationRuleBooleanConditionSupportedOperator["And"] = "And";
    /** Evaluates as true if at least one of the item conditions are evaluated as true */
    KnownAutomationRuleBooleanConditionSupportedOperator["Or"] = "Or";
})(exports.KnownAutomationRuleBooleanConditionSupportedOperator || (exports.KnownAutomationRuleBooleanConditionSupportedOperator = {}));
/** Known values of {@link AutomationRulePropertyArrayChangedConditionSupportedArrayType} that the service accepts. */
exports.KnownAutomationRulePropertyArrayChangedConditionSupportedArrayType = void 0;
(function (KnownAutomationRulePropertyArrayChangedConditionSupportedArrayType) {
    /** Evaluate the condition on the alerts */
    KnownAutomationRulePropertyArrayChangedConditionSupportedArrayType["Alerts"] = "Alerts";
    /** Evaluate the condition on the labels */
    KnownAutomationRulePropertyArrayChangedConditionSupportedArrayType["Labels"] = "Labels";
    /** Evaluate the condition on the tactics */
    KnownAutomationRulePropertyArrayChangedConditionSupportedArrayType["Tactics"] = "Tactics";
    /** Evaluate the condition on the comments */
    KnownAutomationRulePropertyArrayChangedConditionSupportedArrayType["Comments"] = "Comments";
})(exports.KnownAutomationRulePropertyArrayChangedConditionSupportedArrayType || (exports.KnownAutomationRulePropertyArrayChangedConditionSupportedArrayType = {}));
/** Known values of {@link AutomationRulePropertyArrayChangedConditionSupportedChangeType} that the service accepts. */
exports.KnownAutomationRulePropertyArrayChangedConditionSupportedChangeType = void 0;
(function (KnownAutomationRulePropertyArrayChangedConditionSupportedChangeType) {
    /** Evaluate the condition on items added to the array */
    KnownAutomationRulePropertyArrayChangedConditionSupportedChangeType["Added"] = "Added";
})(exports.KnownAutomationRulePropertyArrayChangedConditionSupportedChangeType || (exports.KnownAutomationRulePropertyArrayChangedConditionSupportedChangeType = {}));
/** Known values of {@link AutomationRulePropertyArrayConditionSupportedArrayType} that the service accepts. */
exports.KnownAutomationRulePropertyArrayConditionSupportedArrayType = void 0;
(function (KnownAutomationRulePropertyArrayConditionSupportedArrayType) {
    /** Evaluate the condition on the custom detail keys */
    KnownAutomationRulePropertyArrayConditionSupportedArrayType["CustomDetails"] = "CustomDetails";
    /** Evaluate the condition on a custom detail's values */
    KnownAutomationRulePropertyArrayConditionSupportedArrayType["CustomDetailValues"] = "CustomDetailValues";
})(exports.KnownAutomationRulePropertyArrayConditionSupportedArrayType || (exports.KnownAutomationRulePropertyArrayConditionSupportedArrayType = {}));
/** Known values of {@link AutomationRulePropertyArrayConditionSupportedArrayConditionType} that the service accepts. */
exports.KnownAutomationRulePropertyArrayConditionSupportedArrayConditionType = void 0;
(function (KnownAutomationRulePropertyArrayConditionSupportedArrayConditionType) {
    /** Evaluate the condition as true if any item fulfills it */
    KnownAutomationRulePropertyArrayConditionSupportedArrayConditionType["AnyItem"] = "AnyItem";
})(exports.KnownAutomationRulePropertyArrayConditionSupportedArrayConditionType || (exports.KnownAutomationRulePropertyArrayConditionSupportedArrayConditionType = {}));
/** Known values of {@link AutomationRulePropertyChangedConditionSupportedPropertyType} that the service accepts. */
exports.KnownAutomationRulePropertyChangedConditionSupportedPropertyType = void 0;
(function (KnownAutomationRulePropertyChangedConditionSupportedPropertyType) {
    /** Evaluate the condition on the incident severity */
    KnownAutomationRulePropertyChangedConditionSupportedPropertyType["IncidentSeverity"] = "IncidentSeverity";
    /** Evaluate the condition on the incident status */
    KnownAutomationRulePropertyChangedConditionSupportedPropertyType["IncidentStatus"] = "IncidentStatus";
    /** Evaluate the condition on the incident owner */
    KnownAutomationRulePropertyChangedConditionSupportedPropertyType["IncidentOwner"] = "IncidentOwner";
})(exports.KnownAutomationRulePropertyChangedConditionSupportedPropertyType || (exports.KnownAutomationRulePropertyChangedConditionSupportedPropertyType = {}));
/** Known values of {@link AutomationRulePropertyChangedConditionSupportedChangedType} that the service accepts. */
exports.KnownAutomationRulePropertyChangedConditionSupportedChangedType = void 0;
(function (KnownAutomationRulePropertyChangedConditionSupportedChangedType) {
    /** Evaluate the condition on the previous value of the property */
    KnownAutomationRulePropertyChangedConditionSupportedChangedType["ChangedFrom"] = "ChangedFrom";
    /** Evaluate the condition on the updated value of the property */
    KnownAutomationRulePropertyChangedConditionSupportedChangedType["ChangedTo"] = "ChangedTo";
})(exports.KnownAutomationRulePropertyChangedConditionSupportedChangedType || (exports.KnownAutomationRulePropertyChangedConditionSupportedChangedType = {}));
/** Known values of {@link AutomationRulePropertyConditionSupportedOperator} that the service accepts. */
exports.KnownAutomationRulePropertyConditionSupportedOperator = void 0;
(function (KnownAutomationRulePropertyConditionSupportedOperator) {
    /** Evaluates if the property equals at least one of the condition values */
    KnownAutomationRulePropertyConditionSupportedOperator["Equals"] = "Equals";
    /** Evaluates if the property does not equal any of the condition values */
    KnownAutomationRulePropertyConditionSupportedOperator["NotEquals"] = "NotEquals";
    /** Evaluates if the property contains at least one of the condition values */
    KnownAutomationRulePropertyConditionSupportedOperator["Contains"] = "Contains";
    /** Evaluates if the property does not contain any of the condition values */
    KnownAutomationRulePropertyConditionSupportedOperator["NotContains"] = "NotContains";
    /** Evaluates if the property starts with any of the condition values */
    KnownAutomationRulePropertyConditionSupportedOperator["StartsWith"] = "StartsWith";
    /** Evaluates if the property does not start with any of the condition values */
    KnownAutomationRulePropertyConditionSupportedOperator["NotStartsWith"] = "NotStartsWith";
    /** Evaluates if the property ends with any of the condition values */
    KnownAutomationRulePropertyConditionSupportedOperator["EndsWith"] = "EndsWith";
    /** Evaluates if the property does not end with any of the condition values */
    KnownAutomationRulePropertyConditionSupportedOperator["NotEndsWith"] = "NotEndsWith";
})(exports.KnownAutomationRulePropertyConditionSupportedOperator || (exports.KnownAutomationRulePropertyConditionSupportedOperator = {}));
/** Known values of {@link AutomationRulePropertyConditionSupportedProperty} that the service accepts. */
exports.KnownAutomationRulePropertyConditionSupportedProperty = void 0;
(function (KnownAutomationRulePropertyConditionSupportedProperty) {
    /** The title of the incident */
    KnownAutomationRulePropertyConditionSupportedProperty["IncidentTitle"] = "IncidentTitle";
    /** The description of the incident */
    KnownAutomationRulePropertyConditionSupportedProperty["IncidentDescription"] = "IncidentDescription";
    /** The severity of the incident */
    KnownAutomationRulePropertyConditionSupportedProperty["IncidentSeverity"] = "IncidentSeverity";
    /** The status of the incident */
    KnownAutomationRulePropertyConditionSupportedProperty["IncidentStatus"] = "IncidentStatus";
    /** The related Analytic rule ids of the incident */
    KnownAutomationRulePropertyConditionSupportedProperty["IncidentRelatedAnalyticRuleIds"] = "IncidentRelatedAnalyticRuleIds";
    /** The tactics of the incident */
    KnownAutomationRulePropertyConditionSupportedProperty["IncidentTactics"] = "IncidentTactics";
    /** The labels of the incident */
    KnownAutomationRulePropertyConditionSupportedProperty["IncidentLabel"] = "IncidentLabel";
    /** The provider name of the incident */
    KnownAutomationRulePropertyConditionSupportedProperty["IncidentProviderName"] = "IncidentProviderName";
    /** The update source of the incident */
    KnownAutomationRulePropertyConditionSupportedProperty["IncidentUpdatedBySource"] = "IncidentUpdatedBySource";
    /** The incident custom detail key */
    KnownAutomationRulePropertyConditionSupportedProperty["IncidentCustomDetailsKey"] = "IncidentCustomDetailsKey";
    /** The incident custom detail value */
    KnownAutomationRulePropertyConditionSupportedProperty["IncidentCustomDetailsValue"] = "IncidentCustomDetailsValue";
    /** The account Azure Active Directory tenant id */
    KnownAutomationRulePropertyConditionSupportedProperty["AccountAadTenantId"] = "AccountAadTenantId";
    /** The account Azure Active Directory user id */
    KnownAutomationRulePropertyConditionSupportedProperty["AccountAadUserId"] = "AccountAadUserId";
    /** The account name */
    KnownAutomationRulePropertyConditionSupportedProperty["AccountName"] = "AccountName";
    /** The account NetBIOS domain name */
    KnownAutomationRulePropertyConditionSupportedProperty["AccountNTDomain"] = "AccountNTDomain";
    /** The account Azure Active Directory Passport User ID */
    KnownAutomationRulePropertyConditionSupportedProperty["AccountPuid"] = "AccountPUID";
    /** The account security identifier */
    KnownAutomationRulePropertyConditionSupportedProperty["AccountSid"] = "AccountSid";
    /** The account unique identifier */
    KnownAutomationRulePropertyConditionSupportedProperty["AccountObjectGuid"] = "AccountObjectGuid";
    /** The account user principal name suffix */
    KnownAutomationRulePropertyConditionSupportedProperty["AccountUPNSuffix"] = "AccountUPNSuffix";
    /** The name of the product of the alert */
    KnownAutomationRulePropertyConditionSupportedProperty["AlertProductNames"] = "AlertProductNames";
    /** The analytic rule ids of the alert */
    KnownAutomationRulePropertyConditionSupportedProperty["AlertAnalyticRuleIds"] = "AlertAnalyticRuleIds";
    /** The Azure resource id */
    KnownAutomationRulePropertyConditionSupportedProperty["AzureResourceResourceId"] = "AzureResourceResourceId";
    /** The Azure resource subscription id */
    KnownAutomationRulePropertyConditionSupportedProperty["AzureResourceSubscriptionId"] = "AzureResourceSubscriptionId";
    /** The cloud application identifier */
    KnownAutomationRulePropertyConditionSupportedProperty["CloudApplicationAppId"] = "CloudApplicationAppId";
    /** The cloud application name */
    KnownAutomationRulePropertyConditionSupportedProperty["CloudApplicationAppName"] = "CloudApplicationAppName";
    /** The dns record domain name */
    KnownAutomationRulePropertyConditionSupportedProperty["DNSDomainName"] = "DNSDomainName";
    /** The file directory full path */
    KnownAutomationRulePropertyConditionSupportedProperty["FileDirectory"] = "FileDirectory";
    /** The file name without path */
    KnownAutomationRulePropertyConditionSupportedProperty["FileName"] = "FileName";
    /** The file hash value */
    KnownAutomationRulePropertyConditionSupportedProperty["FileHashValue"] = "FileHashValue";
    /** The host Azure resource id */
    KnownAutomationRulePropertyConditionSupportedProperty["HostAzureID"] = "HostAzureID";
    /** The host name without domain */
    KnownAutomationRulePropertyConditionSupportedProperty["HostName"] = "HostName";
    /** The host NetBIOS name */
    KnownAutomationRulePropertyConditionSupportedProperty["HostNetBiosName"] = "HostNetBiosName";
    /** The host NT domain */
    KnownAutomationRulePropertyConditionSupportedProperty["HostNTDomain"] = "HostNTDomain";
    /** The host operating system */
    KnownAutomationRulePropertyConditionSupportedProperty["HostOSVersion"] = "HostOSVersion";
    /** "The IoT device id */
    KnownAutomationRulePropertyConditionSupportedProperty["IoTDeviceId"] = "IoTDeviceId";
    /** The IoT device name */
    KnownAutomationRulePropertyConditionSupportedProperty["IoTDeviceName"] = "IoTDeviceName";
    /** The IoT device type */
    KnownAutomationRulePropertyConditionSupportedProperty["IoTDeviceType"] = "IoTDeviceType";
    /** The IoT device vendor */
    KnownAutomationRulePropertyConditionSupportedProperty["IoTDeviceVendor"] = "IoTDeviceVendor";
    /** The IoT device model */
    KnownAutomationRulePropertyConditionSupportedProperty["IoTDeviceModel"] = "IoTDeviceModel";
    /** The IoT device operating system */
    KnownAutomationRulePropertyConditionSupportedProperty["IoTDeviceOperatingSystem"] = "IoTDeviceOperatingSystem";
    /** The IP address */
    KnownAutomationRulePropertyConditionSupportedProperty["IPAddress"] = "IPAddress";
    /** The mailbox display name */
    KnownAutomationRulePropertyConditionSupportedProperty["MailboxDisplayName"] = "MailboxDisplayName";
    /** The mailbox primary address */
    KnownAutomationRulePropertyConditionSupportedProperty["MailboxPrimaryAddress"] = "MailboxPrimaryAddress";
    /** The mailbox user principal name */
    KnownAutomationRulePropertyConditionSupportedProperty["MailboxUPN"] = "MailboxUPN";
    /** The mail message delivery action */
    KnownAutomationRulePropertyConditionSupportedProperty["MailMessageDeliveryAction"] = "MailMessageDeliveryAction";
    /** The mail message delivery location */
    KnownAutomationRulePropertyConditionSupportedProperty["MailMessageDeliveryLocation"] = "MailMessageDeliveryLocation";
    /** The mail message recipient */
    KnownAutomationRulePropertyConditionSupportedProperty["MailMessageRecipient"] = "MailMessageRecipient";
    /** The mail message sender IP address */
    KnownAutomationRulePropertyConditionSupportedProperty["MailMessageSenderIP"] = "MailMessageSenderIP";
    /** The mail message subject */
    KnownAutomationRulePropertyConditionSupportedProperty["MailMessageSubject"] = "MailMessageSubject";
    /** The mail message P1 sender */
    KnownAutomationRulePropertyConditionSupportedProperty["MailMessageP1Sender"] = "MailMessageP1Sender";
    /** The mail message P2 sender */
    KnownAutomationRulePropertyConditionSupportedProperty["MailMessageP2Sender"] = "MailMessageP2Sender";
    /** The malware category */
    KnownAutomationRulePropertyConditionSupportedProperty["MalwareCategory"] = "MalwareCategory";
    /** The malware name */
    KnownAutomationRulePropertyConditionSupportedProperty["MalwareName"] = "MalwareName";
    /** The process execution command line */
    KnownAutomationRulePropertyConditionSupportedProperty["ProcessCommandLine"] = "ProcessCommandLine";
    /** The process id */
    KnownAutomationRulePropertyConditionSupportedProperty["ProcessId"] = "ProcessId";
    /** The registry key path */
    KnownAutomationRulePropertyConditionSupportedProperty["RegistryKey"] = "RegistryKey";
    /** The registry key value in string formatted representation */
    KnownAutomationRulePropertyConditionSupportedProperty["RegistryValueData"] = "RegistryValueData";
    /** The url */
    KnownAutomationRulePropertyConditionSupportedProperty["Url"] = "Url";
})(exports.KnownAutomationRulePropertyConditionSupportedProperty || (exports.KnownAutomationRulePropertyConditionSupportedProperty = {}));
/** Known values of {@link EntityType} that the service accepts. */
exports.KnownEntityType = void 0;
(function (KnownEntityType) {
    /** Entity represents account in the system. */
    KnownEntityType["Account"] = "Account";
    /** Entity represents host in the system. */
    KnownEntityType["Host"] = "Host";
    /** Entity represents file in the system. */
    KnownEntityType["File"] = "File";
    /** Entity represents azure resource in the system. */
    KnownEntityType["AzureResource"] = "AzureResource";
    /** Entity represents cloud application in the system. */
    KnownEntityType["CloudApplication"] = "CloudApplication";
    /** Entity represents dns in the system. */
    KnownEntityType["DNS"] = "DNS";
    /** Entity represents file hash in the system. */
    KnownEntityType["FileHash"] = "FileHash";
    /** Entity represents ip in the system. */
    KnownEntityType["IP"] = "IP";
    /** Entity represents malware in the system. */
    KnownEntityType["Malware"] = "Malware";
    /** Entity represents process in the system. */
    KnownEntityType["Process"] = "Process";
    /** Entity represents registry key in the system. */
    KnownEntityType["RegistryKey"] = "RegistryKey";
    /** Entity represents registry value in the system. */
    KnownEntityType["RegistryValue"] = "RegistryValue";
    /** Entity represents security group in the system. */
    KnownEntityType["SecurityGroup"] = "SecurityGroup";
    /** Entity represents url in the system. */
    KnownEntityType["URL"] = "URL";
    /** Entity represents IoT device in the system. */
    KnownEntityType["IoTDevice"] = "IoTDevice";
    /** Entity represents security alert in the system. */
    KnownEntityType["SecurityAlert"] = "SecurityAlert";
    /** Entity represents HuntingBookmark in the system. */
    KnownEntityType["HuntingBookmark"] = "HuntingBookmark";
    /** Entity represents mail cluster in the system. */
    KnownEntityType["MailCluster"] = "MailCluster";
    /** Entity represents mail message in the system. */
    KnownEntityType["MailMessage"] = "MailMessage";
    /** Entity represents mailbox in the system. */
    KnownEntityType["Mailbox"] = "Mailbox";
    /** Entity represents submission mail in the system. */
    KnownEntityType["SubmissionMail"] = "SubmissionMail";
    /** Entity represents network interface in the system. */
    KnownEntityType["Nic"] = "Nic";
})(exports.KnownEntityType || (exports.KnownEntityType = {}));
/** Known values of {@link OutputType} that the service accepts. */
exports.KnownOutputType = void 0;
(function (KnownOutputType) {
    /** Number */
    KnownOutputType["Number"] = "Number";
    /** String */
    KnownOutputType["String"] = "String";
    /** Date */
    KnownOutputType["Date"] = "Date";
    /** Entity */
    KnownOutputType["Entity"] = "Entity";
})(exports.KnownOutputType || (exports.KnownOutputType = {}));
/** Known values of {@link SettingsStatus} that the service accepts. */
exports.KnownSettingsStatus = void 0;
(function (KnownSettingsStatus) {
    /** Anomaly settings status in Production mode */
    KnownSettingsStatus["Production"] = "Production";
    /** Anomaly settings status in Flighting mode */
    KnownSettingsStatus["Flighting"] = "Flighting";
})(exports.KnownSettingsStatus || (exports.KnownSettingsStatus = {}));
/** Known values of {@link EntityProviders} that the service accepts. */
exports.KnownEntityProviders = void 0;
(function (KnownEntityProviders) {
    /** ActiveDirectory */
    KnownEntityProviders["ActiveDirectory"] = "ActiveDirectory";
    /** AzureActiveDirectory */
    KnownEntityProviders["AzureActiveDirectory"] = "AzureActiveDirectory";
})(exports.KnownEntityProviders || (exports.KnownEntityProviders = {}));
/** Known values of {@link UebaDataSources} that the service accepts. */
exports.KnownUebaDataSources = void 0;
(function (KnownUebaDataSources) {
    /** AuditLogs */
    KnownUebaDataSources["AuditLogs"] = "AuditLogs";
    /** AzureActivity */
    KnownUebaDataSources["AzureActivity"] = "AzureActivity";
    /** SecurityEvent */
    KnownUebaDataSources["SecurityEvent"] = "SecurityEvent";
    /** SigninLogs */
    KnownUebaDataSources["SigninLogs"] = "SigninLogs";
})(exports.KnownUebaDataSources || (exports.KnownUebaDataSources = {}));
/** Known values of {@link DataTypeState} that the service accepts. */
exports.KnownDataTypeState = void 0;
(function (KnownDataTypeState) {
    /** Enabled */
    KnownDataTypeState["Enabled"] = "Enabled";
    /** Disabled */
    KnownDataTypeState["Disabled"] = "Disabled";
})(exports.KnownDataTypeState || (exports.KnownDataTypeState = {}));
/** Known values of {@link PollingFrequency} that the service accepts. */
exports.KnownPollingFrequency = void 0;
(function (KnownPollingFrequency) {
    /** Once a minute */
    KnownPollingFrequency["OnceAMinute"] = "OnceAMinute";
    /** Once an hour */
    KnownPollingFrequency["OnceAnHour"] = "OnceAnHour";
    /** Once a day */
    KnownPollingFrequency["OnceADay"] = "OnceADay";
})(exports.KnownPollingFrequency || (exports.KnownPollingFrequency = {}));
/** Known values of {@link ConnectivityType} that the service accepts. */
exports.KnownConnectivityType = void 0;
(function (KnownConnectivityType) {
    /** IsConnectedQuery */
    KnownConnectivityType["IsConnectedQuery"] = "IsConnectedQuery";
})(exports.KnownConnectivityType || (exports.KnownConnectivityType = {}));
/** Known values of {@link ProviderName} that the service accepts. */
exports.KnownProviderName = void 0;
(function (KnownProviderName) {
    /** MicrosoftOperationalInsightsSolutions */
    KnownProviderName["MicrosoftOperationalInsightsSolutions"] = "Microsoft.OperationalInsights/solutions";
    /** MicrosoftOperationalInsightsWorkspaces */
    KnownProviderName["MicrosoftOperationalInsightsWorkspaces"] = "Microsoft.OperationalInsights/workspaces";
    /** MicrosoftOperationalInsightsWorkspacesDatasources */
    KnownProviderName["MicrosoftOperationalInsightsWorkspacesDatasources"] = "Microsoft.OperationalInsights/workspaces/datasources";
    /** MicrosoftAadiamDiagnosticSettings */
    KnownProviderName["MicrosoftAadiamDiagnosticSettings"] = "microsoft.aadiam/diagnosticSettings";
    /** MicrosoftOperationalInsightsWorkspacesSharedKeys */
    KnownProviderName["MicrosoftOperationalInsightsWorkspacesSharedKeys"] = "Microsoft.OperationalInsights/workspaces/sharedKeys";
    /** MicrosoftAuthorizationPolicyAssignments */
    KnownProviderName["MicrosoftAuthorizationPolicyAssignments"] = "Microsoft.Authorization/policyAssignments";
})(exports.KnownProviderName || (exports.KnownProviderName = {}));
/** Known values of {@link PermissionProviderScope} that the service accepts. */
exports.KnownPermissionProviderScope = void 0;
(function (KnownPermissionProviderScope) {
    /** ResourceGroup */
    KnownPermissionProviderScope["ResourceGroup"] = "ResourceGroup";
    /** Subscription */
    KnownPermissionProviderScope["Subscription"] = "Subscription";
    /** Workspace */
    KnownPermissionProviderScope["Workspace"] = "Workspace";
})(exports.KnownPermissionProviderScope || (exports.KnownPermissionProviderScope = {}));
/** Known values of {@link SettingType} that the service accepts. */
exports.KnownSettingType = void 0;
(function (KnownSettingType) {
    /** CopyableLabel */
    KnownSettingType["CopyableLabel"] = "CopyableLabel";
    /** InstructionStepsGroup */
    KnownSettingType["InstructionStepsGroup"] = "InstructionStepsGroup";
    /** InfoMessage */
    KnownSettingType["InfoMessage"] = "InfoMessage";
})(exports.KnownSettingType || (exports.KnownSettingType = {}));
/** Known values of {@link FileHashAlgorithm} that the service accepts. */
exports.KnownFileHashAlgorithm = void 0;
(function (KnownFileHashAlgorithm) {
    /** Unknown hash algorithm */
    KnownFileHashAlgorithm["Unknown"] = "Unknown";
    /** MD5 hash type */
    KnownFileHashAlgorithm["MD5"] = "MD5";
    /** SHA1 hash type */
    KnownFileHashAlgorithm["SHA1"] = "SHA1";
    /** SHA256 hash type */
    KnownFileHashAlgorithm["SHA256"] = "SHA256";
    /** SHA256 Authenticode hash type */
    KnownFileHashAlgorithm["SHA256AC"] = "SHA256AC";
})(exports.KnownFileHashAlgorithm || (exports.KnownFileHashAlgorithm = {}));
/** Known values of {@link DeviceImportance} that the service accepts. */
exports.KnownDeviceImportance = void 0;
(function (KnownDeviceImportance) {
    /** Unknown - Default value */
    KnownDeviceImportance["Unknown"] = "Unknown";
    /** Low */
    KnownDeviceImportance["Low"] = "Low";
    /** Normal */
    KnownDeviceImportance["Normal"] = "Normal";
    /** High */
    KnownDeviceImportance["High"] = "High";
})(exports.KnownDeviceImportance || (exports.KnownDeviceImportance = {}));
/** Known values of {@link AntispamMailDirection} that the service accepts. */
exports.KnownAntispamMailDirection = void 0;
(function (KnownAntispamMailDirection) {
    /** Unknown */
    KnownAntispamMailDirection["Unknown"] = "Unknown";
    /** Inbound */
    KnownAntispamMailDirection["Inbound"] = "Inbound";
    /** Outbound */
    KnownAntispamMailDirection["Outbound"] = "Outbound";
    /** Intraorg */
    KnownAntispamMailDirection["Intraorg"] = "Intraorg";
})(exports.KnownAntispamMailDirection || (exports.KnownAntispamMailDirection = {}));
/** Known values of {@link RegistryHive} that the service accepts. */
exports.KnownRegistryHive = void 0;
(function (KnownRegistryHive) {
    /** HKEY_LOCAL_MACHINE */
    KnownRegistryHive["HkeyLocalMachine"] = "HKEY_LOCAL_MACHINE";
    /** HKEY_CLASSES_ROOT */
    KnownRegistryHive["HkeyClassesRoot"] = "HKEY_CLASSES_ROOT";
    /** HKEY_CURRENT_CONFIG */
    KnownRegistryHive["HkeyCurrentConfig"] = "HKEY_CURRENT_CONFIG";
    /** HKEY_USERS */
    KnownRegistryHive["HkeyUsers"] = "HKEY_USERS";
    /** HKEY_CURRENT_USER_LOCAL_SETTINGS */
    KnownRegistryHive["HkeyCurrentUserLocalSettings"] = "HKEY_CURRENT_USER_LOCAL_SETTINGS";
    /** HKEY_PERFORMANCE_DATA */
    KnownRegistryHive["HkeyPerformanceData"] = "HKEY_PERFORMANCE_DATA";
    /** HKEY_PERFORMANCE_NLSTEXT */
    KnownRegistryHive["HkeyPerformanceNlstext"] = "HKEY_PERFORMANCE_NLSTEXT";
    /** HKEY_PERFORMANCE_TEXT */
    KnownRegistryHive["HkeyPerformanceText"] = "HKEY_PERFORMANCE_TEXT";
    /** HKEY_A */
    KnownRegistryHive["HkeyA"] = "HKEY_A";
    /** HKEY_CURRENT_USER */
    KnownRegistryHive["HkeyCurrentUser"] = "HKEY_CURRENT_USER";
})(exports.KnownRegistryHive || (exports.KnownRegistryHive = {}));
/** Known values of {@link RegistryValueKind} that the service accepts. */
exports.KnownRegistryValueKind = void 0;
(function (KnownRegistryValueKind) {
    /** None */
    KnownRegistryValueKind["None"] = "None";
    /** Unknown value type */
    KnownRegistryValueKind["Unknown"] = "Unknown";
    /** String value type */
    KnownRegistryValueKind["String"] = "String";
    /** ExpandString value type */
    KnownRegistryValueKind["ExpandString"] = "ExpandString";
    /** Binary value type */
    KnownRegistryValueKind["Binary"] = "Binary";
    /** DWord value type */
    KnownRegistryValueKind["DWord"] = "DWord";
    /** MultiString value type */
    KnownRegistryValueKind["MultiString"] = "MultiString";
    /** QWord value type */
    KnownRegistryValueKind["QWord"] = "QWord";
})(exports.KnownRegistryValueKind || (exports.KnownRegistryValueKind = {}));

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const AlertRulesList = {
    type: {
        name: "Composite",
        className: "AlertRulesList",
        modelProperties: {
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AlertRule"
                        }
                    }
                }
            }
        }
    }
};
const Resource = {
    type: {
        name: "Composite",
        className: "Resource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }
        }
    }
};
const SystemData = {
    type: {
        name: "Composite",
        className: "SystemData",
        modelProperties: {
            createdBy: {
                serializedName: "createdBy",
                type: {
                    name: "String"
                }
            },
            createdByType: {
                serializedName: "createdByType",
                type: {
                    name: "String"
                }
            },
            createdAt: {
                serializedName: "createdAt",
                type: {
                    name: "DateTime"
                }
            },
            lastModifiedBy: {
                serializedName: "lastModifiedBy",
                type: {
                    name: "String"
                }
            },
            lastModifiedByType: {
                serializedName: "lastModifiedByType",
                type: {
                    name: "String"
                }
            },
            lastModifiedAt: {
                serializedName: "lastModifiedAt",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const CloudError = {
    type: {
        name: "Composite",
        className: "CloudError",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "CloudErrorBody"
                }
            }
        }
    }
};
const CloudErrorBody = {
    type: {
        name: "Composite",
        className: "CloudErrorBody",
        modelProperties: {
            code: {
                serializedName: "code",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ActionsList = {
    type: {
        name: "Composite",
        className: "ActionsList",
        modelProperties: {
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ActionResponse"
                        }
                    }
                }
            }
        }
    }
};
const ActionPropertiesBase = {
    type: {
        name: "Composite",
        className: "ActionPropertiesBase",
        modelProperties: {
            logicAppResourceId: {
                serializedName: "logicAppResourceId",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AlertRuleTemplatesList = {
    type: {
        name: "Composite",
        className: "AlertRuleTemplatesList",
        modelProperties: {
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AlertRuleTemplate"
                        }
                    }
                }
            }
        }
    }
};
const AutomationRuleTriggeringLogic = {
    type: {
        name: "Composite",
        className: "AutomationRuleTriggeringLogic",
        modelProperties: {
            isEnabled: {
                serializedName: "isEnabled",
                required: true,
                type: {
                    name: "Boolean"
                }
            },
            expirationTimeUtc: {
                serializedName: "expirationTimeUtc",
                type: {
                    name: "DateTime"
                }
            },
            triggersOn: {
                serializedName: "triggersOn",
                required: true,
                type: {
                    name: "String"
                }
            },
            triggersWhen: {
                serializedName: "triggersWhen",
                required: true,
                type: {
                    name: "String"
                }
            },
            conditions: {
                constraints: {
                    MaxItems: 50
                },
                serializedName: "conditions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AutomationRuleCondition"
                        }
                    }
                }
            }
        }
    }
};
const AutomationRuleCondition = {
    type: {
        name: "Composite",
        className: "AutomationRuleCondition",
        uberParent: "AutomationRuleCondition",
        polymorphicDiscriminator: {
            serializedName: "conditionType",
            clientName: "conditionType"
        },
        modelProperties: {
            conditionType: {
                serializedName: "conditionType",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AutomationRuleAction = {
    type: {
        name: "Composite",
        className: "AutomationRuleAction",
        uberParent: "AutomationRuleAction",
        polymorphicDiscriminator: {
            serializedName: "actionType",
            clientName: "actionType"
        },
        modelProperties: {
            order: {
                serializedName: "order",
                required: true,
                type: {
                    name: "Number"
                }
            },
            actionType: {
                serializedName: "actionType",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ClientInfo = {
    type: {
        name: "Composite",
        className: "ClientInfo",
        modelProperties: {
            email: {
                serializedName: "email",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            objectId: {
                serializedName: "objectId",
                type: {
                    name: "Uuid"
                }
            },
            userPrincipalName: {
                serializedName: "userPrincipalName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AutomationRulesList = {
    type: {
        name: "Composite",
        className: "AutomationRulesList",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AutomationRule"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ManualTriggerRequestBody = {
    type: {
        name: "Composite",
        className: "ManualTriggerRequestBody",
        modelProperties: {
            tenantId: {
                serializedName: "tenantId",
                type: {
                    name: "Uuid"
                }
            },
            logicAppsResourceId: {
                serializedName: "logicAppsResourceId",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BookmarkList = {
    type: {
        name: "Composite",
        className: "BookmarkList",
        modelProperties: {
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Bookmark"
                        }
                    }
                }
            }
        }
    }
};
const UserInfo = {
    type: {
        name: "Composite",
        className: "UserInfo",
        modelProperties: {
            email: {
                serializedName: "email",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            objectId: {
                serializedName: "objectId",
                nullable: true,
                type: {
                    name: "Uuid"
                }
            }
        }
    }
};
const IncidentInfo = {
    type: {
        name: "Composite",
        className: "IncidentInfo",
        modelProperties: {
            incidentId: {
                serializedName: "incidentId",
                type: {
                    name: "String"
                }
            },
            severity: {
                serializedName: "severity",
                type: {
                    name: "String"
                }
            },
            title: {
                serializedName: "title",
                type: {
                    name: "String"
                }
            },
            relationName: {
                serializedName: "relationName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BookmarkEntityMappings = {
    type: {
        name: "Composite",
        className: "BookmarkEntityMappings",
        modelProperties: {
            entityType: {
                serializedName: "entityType",
                type: {
                    name: "String"
                }
            },
            fieldMappings: {
                serializedName: "fieldMappings",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EntityFieldMapping"
                        }
                    }
                }
            }
        }
    }
};
const EntityFieldMapping = {
    type: {
        name: "Composite",
        className: "EntityFieldMapping",
        modelProperties: {
            identifier: {
                serializedName: "identifier",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RelationList = {
    type: {
        name: "Composite",
        className: "RelationList",
        modelProperties: {
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Relation"
                        }
                    }
                }
            }
        }
    }
};
const BookmarkExpandParameters = {
    type: {
        name: "Composite",
        className: "BookmarkExpandParameters",
        modelProperties: {
            endTime: {
                serializedName: "endTime",
                type: {
                    name: "DateTime"
                }
            },
            expansionId: {
                serializedName: "expansionId",
                type: {
                    name: "Uuid"
                }
            },
            startTime: {
                serializedName: "startTime",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const BookmarkExpandResponse = {
    type: {
        name: "Composite",
        className: "BookmarkExpandResponse",
        modelProperties: {
            metaData: {
                serializedName: "metaData",
                type: {
                    name: "Composite",
                    className: "ExpansionResultsMetadata"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Composite",
                    className: "BookmarkExpandResponseValue"
                }
            }
        }
    }
};
const ExpansionResultsMetadata = {
    type: {
        name: "Composite",
        className: "ExpansionResultsMetadata",
        modelProperties: {
            aggregations: {
                serializedName: "aggregations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ExpansionResultAggregation"
                        }
                    }
                }
            }
        }
    }
};
const ExpansionResultAggregation = {
    type: {
        name: "Composite",
        className: "ExpansionResultAggregation",
        modelProperties: {
            aggregationType: {
                serializedName: "aggregationType",
                type: {
                    name: "String"
                }
            },
            count: {
                serializedName: "count",
                required: true,
                type: {
                    name: "Number"
                }
            },
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            },
            entityKind: {
                serializedName: "entityKind",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BookmarkExpandResponseValue = {
    type: {
        name: "Composite",
        className: "BookmarkExpandResponseValue",
        modelProperties: {
            entities: {
                serializedName: "entities",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Entity"
                        }
                    }
                }
            },
            edges: {
                serializedName: "edges",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ConnectedEntity"
                        }
                    }
                }
            }
        }
    }
};
const ConnectedEntity = {
    type: {
        name: "Composite",
        className: "ConnectedEntity",
        modelProperties: {
            targetEntityId: {
                serializedName: "targetEntityId",
                type: {
                    name: "String"
                }
            },
            additionalData: {
                serializedName: "additionalData",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
const EnrichmentIpGeodata = {
    type: {
        name: "Composite",
        className: "EnrichmentIpGeodata",
        modelProperties: {
            asn: {
                serializedName: "asn",
                type: {
                    name: "String"
                }
            },
            carrier: {
                serializedName: "carrier",
                type: {
                    name: "String"
                }
            },
            city: {
                serializedName: "city",
                type: {
                    name: "String"
                }
            },
            cityCf: {
                serializedName: "cityCf",
                type: {
                    name: "Number"
                }
            },
            continent: {
                serializedName: "continent",
                type: {
                    name: "String"
                }
            },
            country: {
                serializedName: "country",
                type: {
                    name: "String"
                }
            },
            countryCf: {
                serializedName: "countryCf",
                type: {
                    name: "Number"
                }
            },
            ipAddr: {
                serializedName: "ipAddr",
                type: {
                    name: "String"
                }
            },
            ipRoutingType: {
                serializedName: "ipRoutingType",
                type: {
                    name: "String"
                }
            },
            latitude: {
                serializedName: "latitude",
                type: {
                    name: "String"
                }
            },
            longitude: {
                serializedName: "longitude",
                type: {
                    name: "String"
                }
            },
            organization: {
                serializedName: "organization",
                type: {
                    name: "String"
                }
            },
            organizationType: {
                serializedName: "organizationType",
                type: {
                    name: "String"
                }
            },
            region: {
                serializedName: "region",
                type: {
                    name: "String"
                }
            },
            state: {
                serializedName: "state",
                type: {
                    name: "String"
                }
            },
            stateCf: {
                serializedName: "stateCf",
                type: {
                    name: "Number"
                }
            },
            stateCode: {
                serializedName: "stateCode",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const EnrichmentDomainWhois = {
    type: {
        name: "Composite",
        className: "EnrichmentDomainWhois",
        modelProperties: {
            domain: {
                serializedName: "domain",
                type: {
                    name: "String"
                }
            },
            server: {
                serializedName: "server",
                type: {
                    name: "String"
                }
            },
            created: {
                serializedName: "created",
                type: {
                    name: "DateTime"
                }
            },
            updated: {
                serializedName: "updated",
                type: {
                    name: "DateTime"
                }
            },
            expires: {
                serializedName: "expires",
                type: {
                    name: "DateTime"
                }
            },
            parsedWhois: {
                serializedName: "parsedWhois",
                type: {
                    name: "Composite",
                    className: "EnrichmentDomainWhoisDetails"
                }
            }
        }
    }
};
const EnrichmentDomainWhoisDetails = {
    type: {
        name: "Composite",
        className: "EnrichmentDomainWhoisDetails",
        modelProperties: {
            registrar: {
                serializedName: "registrar",
                type: {
                    name: "Composite",
                    className: "EnrichmentDomainWhoisRegistrarDetails"
                }
            },
            contacts: {
                serializedName: "contacts",
                type: {
                    name: "Composite",
                    className: "EnrichmentDomainWhoisContacts"
                }
            },
            nameServers: {
                serializedName: "nameServers",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            statuses: {
                serializedName: "statuses",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const EnrichmentDomainWhoisRegistrarDetails = {
    type: {
        name: "Composite",
        className: "EnrichmentDomainWhoisRegistrarDetails",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            abuseContactEmail: {
                serializedName: "abuseContactEmail",
                type: {
                    name: "String"
                }
            },
            abuseContactPhone: {
                serializedName: "abuseContactPhone",
                type: {
                    name: "String"
                }
            },
            ianaId: {
                serializedName: "ianaId",
                type: {
                    name: "String"
                }
            },
            url: {
                serializedName: "url",
                type: {
                    name: "String"
                }
            },
            whoisServer: {
                serializedName: "whoisServer",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const EnrichmentDomainWhoisContacts = {
    type: {
        name: "Composite",
        className: "EnrichmentDomainWhoisContacts",
        modelProperties: {
            admin: {
                serializedName: "admin",
                type: {
                    name: "Composite",
                    className: "EnrichmentDomainWhoisContact"
                }
            },
            billing: {
                serializedName: "billing",
                type: {
                    name: "Composite",
                    className: "EnrichmentDomainWhoisContact"
                }
            },
            registrant: {
                serializedName: "registrant",
                type: {
                    name: "Composite",
                    className: "EnrichmentDomainWhoisContact"
                }
            },
            tech: {
                serializedName: "tech",
                type: {
                    name: "Composite",
                    className: "EnrichmentDomainWhoisContact"
                }
            }
        }
    }
};
const EnrichmentDomainWhoisContact = {
    type: {
        name: "Composite",
        className: "EnrichmentDomainWhoisContact",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            org: {
                serializedName: "org",
                type: {
                    name: "String"
                }
            },
            street: {
                serializedName: "street",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            city: {
                serializedName: "city",
                type: {
                    name: "String"
                }
            },
            state: {
                serializedName: "state",
                type: {
                    name: "String"
                }
            },
            postal: {
                serializedName: "postal",
                type: {
                    name: "String"
                }
            },
            country: {
                serializedName: "country",
                type: {
                    name: "String"
                }
            },
            phone: {
                serializedName: "phone",
                type: {
                    name: "String"
                }
            },
            fax: {
                serializedName: "fax",
                type: {
                    name: "String"
                }
            },
            email: {
                serializedName: "email",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const EntityList = {
    type: {
        name: "Composite",
        className: "EntityList",
        modelProperties: {
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Entity"
                        }
                    }
                }
            }
        }
    }
};
const EntityExpandParameters = {
    type: {
        name: "Composite",
        className: "EntityExpandParameters",
        modelProperties: {
            endTime: {
                serializedName: "endTime",
                type: {
                    name: "DateTime"
                }
            },
            expansionId: {
                serializedName: "expansionId",
                type: {
                    name: "Uuid"
                }
            },
            startTime: {
                serializedName: "startTime",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const EntityExpandResponse = {
    type: {
        name: "Composite",
        className: "EntityExpandResponse",
        modelProperties: {
            metaData: {
                serializedName: "metaData",
                type: {
                    name: "Composite",
                    className: "ExpansionResultsMetadata"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Composite",
                    className: "EntityExpandResponseValue"
                }
            }
        }
    }
};
const EntityExpandResponseValue = {
    type: {
        name: "Composite",
        className: "EntityExpandResponseValue",
        modelProperties: {
            entities: {
                serializedName: "entities",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Entity"
                        }
                    }
                }
            },
            edges: {
                serializedName: "edges",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EntityEdges"
                        }
                    }
                }
            }
        }
    }
};
const EntityEdges = {
    type: {
        name: "Composite",
        className: "EntityEdges",
        modelProperties: {
            targetEntityId: {
                serializedName: "targetEntityId",
                type: {
                    name: "String"
                }
            },
            additionalData: {
                serializedName: "additionalData",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Dictionary", value: { type: { name: "any" } } }
                    }
                }
            }
        }
    }
};
const EntityTimelineParameters = {
    type: {
        name: "Composite",
        className: "EntityTimelineParameters",
        modelProperties: {
            kinds: {
                serializedName: "kinds",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            startTime: {
                serializedName: "startTime",
                required: true,
                type: {
                    name: "DateTime"
                }
            },
            endTime: {
                serializedName: "endTime",
                required: true,
                type: {
                    name: "DateTime"
                }
            },
            numberOfBucket: {
                serializedName: "numberOfBucket",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const EntityTimelineResponse = {
    type: {
        name: "Composite",
        className: "EntityTimelineResponse",
        modelProperties: {
            metaData: {
                serializedName: "metaData",
                type: {
                    name: "Composite",
                    className: "TimelineResultsMetadata"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EntityTimelineItem"
                        }
                    }
                }
            }
        }
    }
};
const TimelineResultsMetadata = {
    type: {
        name: "Composite",
        className: "TimelineResultsMetadata",
        modelProperties: {
            totalCount: {
                serializedName: "totalCount",
                required: true,
                type: {
                    name: "Number"
                }
            },
            aggregations: {
                serializedName: "aggregations",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TimelineAggregation"
                        }
                    }
                }
            },
            errors: {
                serializedName: "errors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TimelineError"
                        }
                    }
                }
            }
        }
    }
};
const TimelineAggregation = {
    type: {
        name: "Composite",
        className: "TimelineAggregation",
        modelProperties: {
            count: {
                serializedName: "count",
                required: true,
                type: {
                    name: "Number"
                }
            },
            kind: {
                serializedName: "kind",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TimelineError = {
    type: {
        name: "Composite",
        className: "TimelineError",
        modelProperties: {
            kind: {
                serializedName: "kind",
                required: true,
                type: {
                    name: "String"
                }
            },
            queryId: {
                serializedName: "queryId",
                type: {
                    name: "String"
                }
            },
            errorMessage: {
                serializedName: "errorMessage",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const EntityTimelineItem = {
    type: {
        name: "Composite",
        className: "EntityTimelineItem",
        uberParent: "EntityTimelineItem",
        polymorphicDiscriminator: {
            serializedName: "kind",
            clientName: "kind"
        },
        modelProperties: {
            kind: {
                serializedName: "kind",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const GetQueriesResponse = {
    type: {
        name: "Composite",
        className: "GetQueriesResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EntityQueryItem"
                        }
                    }
                }
            }
        }
    }
};
const EntityQueryItem = {
    type: {
        name: "Composite",
        className: "EntityQueryItem",
        uberParent: "EntityQueryItem",
        polymorphicDiscriminator: {
            serializedName: "kind",
            clientName: "kind"
        },
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            kind: {
                serializedName: "kind",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const EntityGetInsightsParameters = {
    type: {
        name: "Composite",
        className: "EntityGetInsightsParameters",
        modelProperties: {
            startTime: {
                serializedName: "startTime",
                required: true,
                type: {
                    name: "DateTime"
                }
            },
            endTime: {
                serializedName: "endTime",
                required: true,
                type: {
                    name: "DateTime"
                }
            },
            addDefaultExtendedTimeRange: {
                serializedName: "addDefaultExtendedTimeRange",
                type: {
                    name: "Boolean"
                }
            },
            insightQueryIds: {
                serializedName: "insightQueryIds",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Uuid"
                        }
                    }
                }
            }
        }
    }
};
const EntityGetInsightsResponse = {
    type: {
        name: "Composite",
        className: "EntityGetInsightsResponse",
        modelProperties: {
            metaData: {
                serializedName: "metaData",
                type: {
                    name: "Composite",
                    className: "GetInsightsResultsMetadata"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EntityInsightItem"
                        }
                    }
                }
            }
        }
    }
};
const GetInsightsResultsMetadata = {
    type: {
        name: "Composite",
        className: "GetInsightsResultsMetadata",
        modelProperties: {
            totalCount: {
                serializedName: "totalCount",
                required: true,
                type: {
                    name: "Number"
                }
            },
            errors: {
                serializedName: "errors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "GetInsightsErrorKind"
                        }
                    }
                }
            }
        }
    }
};
const GetInsightsErrorKind = {
    type: {
        name: "Composite",
        className: "GetInsightsErrorKind",
        modelProperties: {
            kind: {
                serializedName: "kind",
                required: true,
                type: {
                    name: "String"
                }
            },
            queryId: {
                serializedName: "queryId",
                type: {
                    name: "String"
                }
            },
            errorMessage: {
                serializedName: "errorMessage",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const EntityInsightItem = {
    type: {
        name: "Composite",
        className: "EntityInsightItem",
        modelProperties: {
            queryId: {
                serializedName: "queryId",
                type: {
                    name: "String"
                }
            },
            queryTimeInterval: {
                serializedName: "queryTimeInterval",
                type: {
                    name: "Composite",
                    className: "EntityInsightItemQueryTimeInterval"
                }
            },
            tableQueryResults: {
                serializedName: "tableQueryResults",
                type: {
                    name: "Composite",
                    className: "InsightsTableResult"
                }
            },
            chartQueryResults: {
                serializedName: "chartQueryResults",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "InsightsTableResult"
                        }
                    }
                }
            }
        }
    }
};
const EntityInsightItemQueryTimeInterval = {
    type: {
        name: "Composite",
        className: "EntityInsightItemQueryTimeInterval",
        modelProperties: {
            startTime: {
                serializedName: "startTime",
                type: {
                    name: "DateTime"
                }
            },
            endTime: {
                serializedName: "endTime",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const InsightsTableResult = {
    type: {
        name: "Composite",
        className: "InsightsTableResult",
        modelProperties: {
            columns: {
                serializedName: "columns",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "InsightsTableResultColumnsItem"
                        }
                    }
                }
            },
            rows: {
                serializedName: "rows",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Sequence",
                            element: {
                                type: {
                                    name: "String"
                                }
                            }
                        }
                    }
                }
            }
        }
    }
};
const InsightsTableResultColumnsItem = {
    type: {
        name: "Composite",
        className: "InsightsTableResultColumnsItem",
        modelProperties: {
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const EntityQueryList = {
    type: {
        name: "Composite",
        className: "EntityQueryList",
        modelProperties: {
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EntityQuery"
                        }
                    }
                }
            }
        }
    }
};
const EntityQueryTemplateList = {
    type: {
        name: "Composite",
        className: "EntityQueryTemplateList",
        modelProperties: {
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EntityQueryTemplate"
                        }
                    }
                }
            }
        }
    }
};
const FileImportList = {
    type: {
        name: "Composite",
        className: "FileImportList",
        modelProperties: {
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "FileImport"
                        }
                    }
                }
            }
        }
    }
};
const FileMetadata = {
    type: {
        name: "Composite",
        className: "FileMetadata",
        modelProperties: {
            fileFormat: {
                serializedName: "fileFormat",
                type: {
                    name: "String"
                }
            },
            fileName: {
                serializedName: "fileName",
                type: {
                    name: "String"
                }
            },
            fileSize: {
                serializedName: "fileSize",
                type: {
                    name: "Number"
                }
            },
            fileContentUri: {
                serializedName: "fileContentUri",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            deleteStatus: {
                serializedName: "deleteStatus",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ValidationError = {
    type: {
        name: "Composite",
        className: "ValidationError",
        modelProperties: {
            recordIndex: {
                serializedName: "recordIndex",
                type: {
                    name: "Number"
                }
            },
            errorMessages: {
                serializedName: "errorMessages",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const IncidentList = {
    type: {
        name: "Composite",
        className: "IncidentList",
        modelProperties: {
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Incident"
                        }
                    }
                }
            }
        }
    }
};
const IncidentAdditionalData = {
    type: {
        name: "Composite",
        className: "IncidentAdditionalData",
        modelProperties: {
            alertsCount: {
                serializedName: "alertsCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            bookmarksCount: {
                serializedName: "bookmarksCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            commentsCount: {
                serializedName: "commentsCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            alertProductNames: {
                serializedName: "alertProductNames",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            providerIncidentUrl: {
                serializedName: "providerIncidentUrl",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            tactics: {
                serializedName: "tactics",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            techniques: {
                serializedName: "techniques",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const IncidentLabel = {
    type: {
        name: "Composite",
        className: "IncidentLabel",
        modelProperties: {
            labelName: {
                serializedName: "labelName",
                required: true,
                type: {
                    name: "String"
                }
            },
            labelType: {
                serializedName: "labelType",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const IncidentOwnerInfo = {
    type: {
        name: "Composite",
        className: "IncidentOwnerInfo",
        modelProperties: {
            email: {
                serializedName: "email",
                type: {
                    name: "String"
                }
            },
            assignedTo: {
                serializedName: "assignedTo",
                type: {
                    name: "String"
                }
            },
            objectId: {
                serializedName: "objectId",
                type: {
                    name: "Uuid"
                }
            },
            userPrincipalName: {
                serializedName: "userPrincipalName",
                type: {
                    name: "String"
                }
            },
            ownerType: {
                serializedName: "ownerType",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TeamInformation = {
    type: {
        name: "Composite",
        className: "TeamInformation",
        modelProperties: {
            teamId: {
                serializedName: "teamId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            primaryChannelUrl: {
                serializedName: "primaryChannelUrl",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            teamCreationTimeUtc: {
                serializedName: "teamCreationTimeUtc",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TeamProperties = {
    type: {
        name: "Composite",
        className: "TeamProperties",
        modelProperties: {
            teamName: {
                serializedName: "teamName",
                required: true,
                type: {
                    name: "String"
                }
            },
            teamDescription: {
                serializedName: "teamDescription",
                type: {
                    name: "String"
                }
            },
            memberIds: {
                serializedName: "memberIds",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Uuid"
                        }
                    }
                }
            },
            groupIds: {
                serializedName: "groupIds",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Uuid"
                        }
                    }
                }
            }
        }
    }
};
const IncidentAlertList = {
    type: {
        name: "Composite",
        className: "IncidentAlertList",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SecurityAlert"
                        }
                    }
                }
            }
        }
    }
};
const SecurityAlertPropertiesConfidenceReasonsItem = {
    type: {
        name: "Composite",
        className: "SecurityAlertPropertiesConfidenceReasonsItem",
        modelProperties: {
            reason: {
                serializedName: "reason",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            reasonType: {
                serializedName: "reasonType",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const EntityCommonProperties = {
    type: {
        name: "Composite",
        className: "EntityCommonProperties",
        modelProperties: {
            additionalData: {
                serializedName: "additionalData",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Dictionary", value: { type: { name: "any" } } }
                    }
                }
            },
            friendlyName: {
                serializedName: "friendlyName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const IncidentBookmarkList = {
    type: {
        name: "Composite",
        className: "IncidentBookmarkList",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "HuntingBookmark"
                        }
                    }
                }
            }
        }
    }
};
const IncidentCommentList = {
    type: {
        name: "Composite",
        className: "IncidentCommentList",
        modelProperties: {
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "IncidentComment"
                        }
                    }
                }
            }
        }
    }
};
const IncidentEntitiesResponse = {
    type: {
        name: "Composite",
        className: "IncidentEntitiesResponse",
        modelProperties: {
            entities: {
                serializedName: "entities",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Entity"
                        }
                    }
                }
            },
            metaData: {
                serializedName: "metaData",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "IncidentEntitiesResultsMetadata"
                        }
                    }
                }
            }
        }
    }
};
const IncidentEntitiesResultsMetadata = {
    type: {
        name: "Composite",
        className: "IncidentEntitiesResultsMetadata",
        modelProperties: {
            count: {
                serializedName: "count",
                required: true,
                type: {
                    name: "Number"
                }
            },
            entityKind: {
                serializedName: "entityKind",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MetadataList = {
    type: {
        name: "Composite",
        className: "MetadataList",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MetadataModel"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MetadataSource = {
    type: {
        name: "Composite",
        className: "MetadataSource",
        modelProperties: {
            kind: {
                serializedName: "kind",
                required: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            sourceId: {
                serializedName: "sourceId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MetadataAuthor = {
    type: {
        name: "Composite",
        className: "MetadataAuthor",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            email: {
                serializedName: "email",
                type: {
                    name: "String"
                }
            },
            link: {
                serializedName: "link",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MetadataSupport = {
    type: {
        name: "Composite",
        className: "MetadataSupport",
        modelProperties: {
            tier: {
                serializedName: "tier",
                required: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            email: {
                serializedName: "email",
                type: {
                    name: "String"
                }
            },
            link: {
                serializedName: "link",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MetadataDependencies = {
    type: {
        name: "Composite",
        className: "MetadataDependencies",
        modelProperties: {
            contentId: {
                serializedName: "contentId",
                type: {
                    name: "String"
                }
            },
            kind: {
                serializedName: "kind",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "version",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            operator: {
                serializedName: "operator",
                type: {
                    name: "String"
                }
            },
            criteria: {
                serializedName: "criteria",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MetadataDependencies"
                        }
                    }
                }
            }
        }
    }
};
const MetadataCategories = {
    type: {
        name: "Composite",
        className: "MetadataCategories",
        modelProperties: {
            domains: {
                serializedName: "domains",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            verticals: {
                serializedName: "verticals",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const OfficeConsentList = {
    type: {
        name: "Composite",
        className: "OfficeConsentList",
        modelProperties: {
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "OfficeConsent"
                        }
                    }
                }
            }
        }
    }
};
const SentinelOnboardingStatesList = {
    type: {
        name: "Composite",
        className: "SentinelOnboardingStatesList",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SentinelOnboardingState"
                        }
                    }
                }
            }
        }
    }
};
const SecurityMLAnalyticsSettingsList = {
    type: {
        name: "Composite",
        className: "SecurityMLAnalyticsSettingsList",
        modelProperties: {
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SecurityMLAnalyticsSetting"
                        }
                    }
                }
            }
        }
    }
};
const SettingList = {
    type: {
        name: "Composite",
        className: "SettingList",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Settings"
                        }
                    }
                }
            }
        }
    }
};
const RepoList = {
    type: {
        name: "Composite",
        className: "RepoList",
        modelProperties: {
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Repo"
                        }
                    }
                }
            }
        }
    }
};
const Repo = {
    type: {
        name: "Composite",
        className: "Repo",
        modelProperties: {
            url: {
                serializedName: "url",
                type: {
                    name: "String"
                }
            },
            fullName: {
                serializedName: "fullName",
                type: {
                    name: "String"
                }
            },
            branches: {
                serializedName: "branches",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const SourceControlList = {
    type: {
        name: "Composite",
        className: "SourceControlList",
        modelProperties: {
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SourceControl"
                        }
                    }
                }
            }
        }
    }
};
const Repository = {
    type: {
        name: "Composite",
        className: "Repository",
        modelProperties: {
            url: {
                serializedName: "url",
                type: {
                    name: "String"
                }
            },
            branch: {
                serializedName: "branch",
                type: {
                    name: "String"
                }
            },
            displayUrl: {
                serializedName: "displayUrl",
                type: {
                    name: "String"
                }
            },
            deploymentLogsUrl: {
                serializedName: "deploymentLogsUrl",
                type: {
                    name: "String"
                }
            },
            pathMapping: {
                serializedName: "pathMapping",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ContentPathMap"
                        }
                    }
                }
            }
        }
    }
};
const ContentPathMap = {
    type: {
        name: "Composite",
        className: "ContentPathMap",
        modelProperties: {
            contentType: {
                serializedName: "contentType",
                type: {
                    name: "String"
                }
            },
            path: {
                serializedName: "path",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RepositoryResourceInfo = {
    type: {
        name: "Composite",
        className: "RepositoryResourceInfo",
        modelProperties: {
            webhook: {
                serializedName: "webhook",
                type: {
                    name: "Composite",
                    className: "Webhook"
                }
            },
            gitHubResourceInfo: {
                serializedName: "gitHubResourceInfo",
                type: {
                    name: "Composite",
                    className: "GitHubResourceInfo"
                }
            },
            azureDevOpsResourceInfo: {
                serializedName: "azureDevOpsResourceInfo",
                type: {
                    name: "Composite",
                    className: "AzureDevOpsResourceInfo"
                }
            }
        }
    }
};
const Webhook = {
    type: {
        name: "Composite",
        className: "Webhook",
        modelProperties: {
            webhookId: {
                serializedName: "webhookId",
                type: {
                    name: "String"
                }
            },
            webhookUrl: {
                serializedName: "webhookUrl",
                type: {
                    name: "String"
                }
            },
            webhookSecretUpdateTime: {
                serializedName: "webhookSecretUpdateTime",
                type: {
                    name: "String"
                }
            },
            rotateWebhookSecret: {
                serializedName: "rotateWebhookSecret",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const GitHubResourceInfo = {
    type: {
        name: "Composite",
        className: "GitHubResourceInfo",
        modelProperties: {
            appInstallationId: {
                serializedName: "appInstallationId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AzureDevOpsResourceInfo = {
    type: {
        name: "Composite",
        className: "AzureDevOpsResourceInfo",
        modelProperties: {
            pipelineId: {
                serializedName: "pipelineId",
                type: {
                    name: "String"
                }
            },
            serviceConnectionId: {
                serializedName: "serviceConnectionId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DeploymentInfo = {
    type: {
        name: "Composite",
        className: "DeploymentInfo",
        modelProperties: {
            deploymentFetchStatus: {
                serializedName: "deploymentFetchStatus",
                type: {
                    name: "String"
                }
            },
            deployment: {
                serializedName: "deployment",
                type: {
                    name: "Composite",
                    className: "Deployment"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Deployment = {
    type: {
        name: "Composite",
        className: "Deployment",
        modelProperties: {
            deploymentId: {
                serializedName: "deploymentId",
                type: {
                    name: "String"
                }
            },
            deploymentState: {
                serializedName: "deploymentState",
                type: {
                    name: "String"
                }
            },
            deploymentResult: {
                serializedName: "deploymentResult",
                type: {
                    name: "String"
                }
            },
            deploymentTime: {
                serializedName: "deploymentTime",
                type: {
                    name: "DateTime"
                }
            },
            deploymentLogsUrl: {
                serializedName: "deploymentLogsUrl",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ThreatIntelligenceKillChainPhase = {
    type: {
        name: "Composite",
        className: "ThreatIntelligenceKillChainPhase",
        modelProperties: {
            killChainName: {
                serializedName: "killChainName",
                type: {
                    name: "String"
                }
            },
            phaseName: {
                serializedName: "phaseName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ThreatIntelligenceParsedPattern = {
    type: {
        name: "Composite",
        className: "ThreatIntelligenceParsedPattern",
        modelProperties: {
            patternTypeKey: {
                serializedName: "patternTypeKey",
                type: {
                    name: "String"
                }
            },
            patternTypeValues: {
                serializedName: "patternTypeValues",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ThreatIntelligenceParsedPatternTypeValue"
                        }
                    }
                }
            }
        }
    }
};
const ThreatIntelligenceParsedPatternTypeValue = {
    type: {
        name: "Composite",
        className: "ThreatIntelligenceParsedPatternTypeValue",
        modelProperties: {
            valueType: {
                serializedName: "valueType",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ThreatIntelligenceExternalReference = {
    type: {
        name: "Composite",
        className: "ThreatIntelligenceExternalReference",
        modelProperties: {
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            externalId: {
                serializedName: "externalId",
                type: {
                    name: "String"
                }
            },
            sourceName: {
                serializedName: "sourceName",
                type: {
                    name: "String"
                }
            },
            url: {
                serializedName: "url",
                type: {
                    name: "String"
                }
            },
            hashes: {
                serializedName: "hashes",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }
        }
    }
};
const ThreatIntelligenceGranularMarkingModel = {
    type: {
        name: "Composite",
        className: "ThreatIntelligenceGranularMarkingModel",
        modelProperties: {
            language: {
                serializedName: "language",
                type: {
                    name: "String"
                }
            },
            markingRef: {
                serializedName: "markingRef",
                type: {
                    name: "Number"
                }
            },
            selectors: {
                serializedName: "selectors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const ThreatIntelligenceInformationList = {
    type: {
        name: "Composite",
        className: "ThreatIntelligenceInformationList",
        modelProperties: {
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ThreatIntelligenceInformation"
                        }
                    }
                }
            }
        }
    }
};
const ThreatIntelligenceFilteringCriteria = {
    type: {
        name: "Composite",
        className: "ThreatIntelligenceFilteringCriteria",
        modelProperties: {
            pageSize: {
                serializedName: "pageSize",
                type: {
                    name: "Number"
                }
            },
            minConfidence: {
                serializedName: "minConfidence",
                type: {
                    name: "Number"
                }
            },
            maxConfidence: {
                serializedName: "maxConfidence",
                type: {
                    name: "Number"
                }
            },
            minValidUntil: {
                serializedName: "minValidUntil",
                type: {
                    name: "String"
                }
            },
            maxValidUntil: {
                serializedName: "maxValidUntil",
                type: {
                    name: "String"
                }
            },
            includeDisabled: {
                serializedName: "includeDisabled",
                type: {
                    name: "Boolean"
                }
            },
            sortBy: {
                serializedName: "sortBy",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ThreatIntelligenceSortingCriteria"
                        }
                    }
                }
            },
            sources: {
                serializedName: "sources",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            patternTypes: {
                serializedName: "patternTypes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            threatTypes: {
                serializedName: "threatTypes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            ids: {
                serializedName: "ids",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            keywords: {
                serializedName: "keywords",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            skipToken: {
                serializedName: "skipToken",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ThreatIntelligenceSortingCriteria = {
    type: {
        name: "Composite",
        className: "ThreatIntelligenceSortingCriteria",
        modelProperties: {
            itemKey: {
                serializedName: "itemKey",
                type: {
                    name: "String"
                }
            },
            sortOrder: {
                serializedName: "sortOrder",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ThreatIntelligenceMetricsList = {
    type: {
        name: "Composite",
        className: "ThreatIntelligenceMetricsList",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ThreatIntelligenceMetrics"
                        }
                    }
                }
            }
        }
    }
};
const ThreatIntelligenceMetrics = {
    type: {
        name: "Composite",
        className: "ThreatIntelligenceMetrics",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "ThreatIntelligenceMetric"
                }
            }
        }
    }
};
const ThreatIntelligenceMetric = {
    type: {
        name: "Composite",
        className: "ThreatIntelligenceMetric",
        modelProperties: {
            lastUpdatedTimeUtc: {
                serializedName: "lastUpdatedTimeUtc",
                type: {
                    name: "String"
                }
            },
            threatTypeMetrics: {
                serializedName: "threatTypeMetrics",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ThreatIntelligenceMetricEntity"
                        }
                    }
                }
            },
            patternTypeMetrics: {
                serializedName: "patternTypeMetrics",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ThreatIntelligenceMetricEntity"
                        }
                    }
                }
            },
            sourceMetrics: {
                serializedName: "sourceMetrics",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ThreatIntelligenceMetricEntity"
                        }
                    }
                }
            }
        }
    }
};
const ThreatIntelligenceMetricEntity = {
    type: {
        name: "Composite",
        className: "ThreatIntelligenceMetricEntity",
        modelProperties: {
            metricName: {
                serializedName: "metricName",
                type: {
                    name: "String"
                }
            },
            metricValue: {
                serializedName: "metricValue",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const ThreatIntelligenceAppendTags = {
    type: {
        name: "Composite",
        className: "ThreatIntelligenceAppendTags",
        modelProperties: {
            threatIntelligenceTags: {
                serializedName: "threatIntelligenceTags",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const WatchlistList = {
    type: {
        name: "Composite",
        className: "WatchlistList",
        modelProperties: {
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Watchlist"
                        }
                    }
                }
            }
        }
    }
};
const WatchlistItemList = {
    type: {
        name: "Composite",
        className: "WatchlistItemList",
        modelProperties: {
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "WatchlistItem"
                        }
                    }
                }
            }
        }
    }
};
const DataConnectorList = {
    type: {
        name: "Composite",
        className: "DataConnectorList",
        modelProperties: {
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DataConnector"
                        }
                    }
                }
            }
        }
    }
};
const DataConnectorConnectBody = {
    type: {
        name: "Composite",
        className: "DataConnectorConnectBody",
        modelProperties: {
            kind: {
                serializedName: "kind",
                type: {
                    name: "String"
                }
            },
            apiKey: {
                serializedName: "apiKey",
                type: {
                    name: "String"
                }
            },
            dataCollectionEndpoint: {
                serializedName: "dataCollectionEndpoint",
                type: {
                    name: "String"
                }
            },
            dataCollectionRuleImmutableId: {
                serializedName: "dataCollectionRuleImmutableId",
                type: {
                    name: "String"
                }
            },
            outputStream: {
                serializedName: "outputStream",
                type: {
                    name: "String"
                }
            },
            clientSecret: {
                serializedName: "clientSecret",
                type: {
                    name: "String"
                }
            },
            clientId: {
                serializedName: "clientId",
                type: {
                    name: "String"
                }
            },
            authorizationCode: {
                serializedName: "authorizationCode",
                type: {
                    name: "String"
                }
            },
            userName: {
                serializedName: "userName",
                type: {
                    name: "String"
                }
            },
            password: {
                serializedName: "password",
                type: {
                    name: "String"
                }
            },
            requestConfigUserInputValues: {
                serializedName: "requestConfigUserInputValues",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Dictionary",
                            value: { type: { name: "any" } }
                        }
                    }
                }
            }
        }
    }
};
const DataConnectorsCheckRequirements = {
    type: {
        name: "Composite",
        className: "DataConnectorsCheckRequirements",
        uberParent: "DataConnectorsCheckRequirements",
        polymorphicDiscriminator: {
            serializedName: "kind",
            clientName: "kind"
        },
        modelProperties: {
            kind: {
                serializedName: "kind",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DataConnectorRequirementsState = {
    type: {
        name: "Composite",
        className: "DataConnectorRequirementsState",
        modelProperties: {
            authorizationState: {
                serializedName: "authorizationState",
                type: {
                    name: "String"
                }
            },
            licenseState: {
                serializedName: "licenseState",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationsList = {
    type: {
        name: "Composite",
        className: "OperationsList",
        modelProperties: {
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Operation"
                        }
                    }
                }
            }
        }
    }
};
const Operation = {
    type: {
        name: "Composite",
        className: "Operation",
        modelProperties: {
            display: {
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "OperationDisplay"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            origin: {
                serializedName: "origin",
                type: {
                    name: "String"
                }
            },
            isDataAction: {
                serializedName: "isDataAction",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const OperationDisplay = {
    type: {
        name: "Composite",
        className: "OperationDisplay",
        modelProperties: {
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                type: {
                    name: "String"
                }
            },
            provider: {
                serializedName: "provider",
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "resource",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AlertRuleTemplateDataSource = {
    type: {
        name: "Composite",
        className: "AlertRuleTemplateDataSource",
        modelProperties: {
            connectorId: {
                serializedName: "connectorId",
                type: {
                    name: "String"
                }
            },
            dataTypes: {
                serializedName: "dataTypes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const AlertRuleTemplatePropertiesBase = {
    type: {
        name: "Composite",
        className: "AlertRuleTemplatePropertiesBase",
        modelProperties: {
            alertRulesCreatedByTemplateCount: {
                serializedName: "alertRulesCreatedByTemplateCount",
                type: {
                    name: "Number"
                }
            },
            lastUpdatedDateUTC: {
                serializedName: "lastUpdatedDateUTC",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            createdDateUTC: {
                serializedName: "createdDateUTC",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            },
            requiredDataConnectors: {
                serializedName: "requiredDataConnectors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AlertRuleTemplateDataSource"
                        }
                    }
                }
            },
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const QueryBasedAlertRuleTemplateProperties = {
    type: {
        name: "Composite",
        className: "QueryBasedAlertRuleTemplateProperties",
        modelProperties: {
            query: {
                serializedName: "query",
                type: {
                    name: "String"
                }
            },
            severity: {
                serializedName: "severity",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "version",
                type: {
                    name: "String"
                }
            },
            customDetails: {
                serializedName: "customDetails",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            entityMappings: {
                serializedName: "entityMappings",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EntityMapping"
                        }
                    }
                }
            },
            alertDetailsOverride: {
                serializedName: "alertDetailsOverride",
                type: {
                    name: "Composite",
                    className: "AlertDetailsOverride"
                }
            },
            eventGroupingSettings: {
                serializedName: "eventGroupingSettings",
                type: {
                    name: "Composite",
                    className: "EventGroupingSettings"
                }
            }
        }
    }
};
const EntityMapping = {
    type: {
        name: "Composite",
        className: "EntityMapping",
        modelProperties: {
            entityType: {
                serializedName: "entityType",
                type: {
                    name: "String"
                }
            },
            fieldMappings: {
                serializedName: "fieldMappings",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "FieldMapping"
                        }
                    }
                }
            }
        }
    }
};
const FieldMapping = {
    type: {
        name: "Composite",
        className: "FieldMapping",
        modelProperties: {
            identifier: {
                serializedName: "identifier",
                type: {
                    name: "String"
                }
            },
            columnName: {
                serializedName: "columnName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AlertDetailsOverride = {
    type: {
        name: "Composite",
        className: "AlertDetailsOverride",
        modelProperties: {
            alertDisplayNameFormat: {
                serializedName: "alertDisplayNameFormat",
                type: {
                    name: "String"
                }
            },
            alertDescriptionFormat: {
                serializedName: "alertDescriptionFormat",
                type: {
                    name: "String"
                }
            },
            alertTacticsColumnName: {
                serializedName: "alertTacticsColumnName",
                type: {
                    name: "String"
                }
            },
            alertSeverityColumnName: {
                serializedName: "alertSeverityColumnName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const EventGroupingSettings = {
    type: {
        name: "Composite",
        className: "EventGroupingSettings",
        modelProperties: {
            aggregationKind: {
                serializedName: "aggregationKind",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const FusionSourceSettings = {
    type: {
        name: "Composite",
        className: "FusionSourceSettings",
        modelProperties: {
            enabled: {
                serializedName: "enabled",
                required: true,
                type: {
                    name: "Boolean"
                }
            },
            sourceName: {
                serializedName: "sourceName",
                required: true,
                type: {
                    name: "String"
                }
            },
            sourceSubTypes: {
                serializedName: "sourceSubTypes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "FusionSourceSubTypeSetting"
                        }
                    }
                }
            }
        }
    }
};
const FusionSourceSubTypeSetting = {
    type: {
        name: "Composite",
        className: "FusionSourceSubTypeSetting",
        modelProperties: {
            enabled: {
                serializedName: "enabled",
                required: true,
                type: {
                    name: "Boolean"
                }
            },
            sourceSubTypeName: {
                serializedName: "sourceSubTypeName",
                required: true,
                type: {
                    name: "String"
                }
            },
            sourceSubTypeDisplayName: {
                serializedName: "sourceSubTypeDisplayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            severityFilters: {
                serializedName: "severityFilters",
                type: {
                    name: "Composite",
                    className: "FusionSubTypeSeverityFilter"
                }
            }
        }
    }
};
const FusionSubTypeSeverityFilter = {
    type: {
        name: "Composite",
        className: "FusionSubTypeSeverityFilter",
        modelProperties: {
            isSupported: {
                serializedName: "isSupported",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            filters: {
                serializedName: "filters",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "FusionSubTypeSeverityFiltersItem"
                        }
                    }
                }
            }
        }
    }
};
const FusionSubTypeSeverityFiltersItem = {
    type: {
        name: "Composite",
        className: "FusionSubTypeSeverityFiltersItem",
        modelProperties: {
            severity: {
                serializedName: "severity",
                required: true,
                type: {
                    name: "String"
                }
            },
            enabled: {
                serializedName: "enabled",
                required: true,
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const FusionScenarioExclusionPattern = {
    type: {
        name: "Composite",
        className: "FusionScenarioExclusionPattern",
        modelProperties: {
            exclusionPattern: {
                serializedName: "exclusionPattern",
                required: true,
                type: {
                    name: "String"
                }
            },
            dateAddedInUTC: {
                serializedName: "dateAddedInUTC",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const FusionTemplateSourceSetting = {
    type: {
        name: "Composite",
        className: "FusionTemplateSourceSetting",
        modelProperties: {
            sourceName: {
                serializedName: "sourceName",
                required: true,
                type: {
                    name: "String"
                }
            },
            sourceSubTypes: {
                serializedName: "sourceSubTypes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "FusionTemplateSourceSubType"
                        }
                    }
                }
            }
        }
    }
};
const FusionTemplateSourceSubType = {
    type: {
        name: "Composite",
        className: "FusionTemplateSourceSubType",
        modelProperties: {
            sourceSubTypeName: {
                serializedName: "sourceSubTypeName",
                required: true,
                type: {
                    name: "String"
                }
            },
            sourceSubTypeDisplayName: {
                serializedName: "sourceSubTypeDisplayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            severityFilter: {
                serializedName: "severityFilter",
                type: {
                    name: "Composite",
                    className: "FusionTemplateSubTypeSeverityFilter"
                }
            }
        }
    }
};
const FusionTemplateSubTypeSeverityFilter = {
    type: {
        name: "Composite",
        className: "FusionTemplateSubTypeSeverityFilter",
        modelProperties: {
            isSupported: {
                serializedName: "isSupported",
                required: true,
                type: {
                    name: "Boolean"
                }
            },
            severityFilters: {
                serializedName: "severityFilters",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const MicrosoftSecurityIncidentCreationAlertRuleCommonProperties = {
    type: {
        name: "Composite",
        className: "MicrosoftSecurityIncidentCreationAlertRuleCommonProperties",
        modelProperties: {
            displayNamesFilter: {
                serializedName: "displayNamesFilter",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            displayNamesExcludeFilter: {
                serializedName: "displayNamesExcludeFilter",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            productFilter: {
                serializedName: "productFilter",
                required: true,
                type: {
                    name: "String"
                }
            },
            severitiesFilter: {
                serializedName: "severitiesFilter",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const IncidentConfiguration = {
    type: {
        name: "Composite",
        className: "IncidentConfiguration",
        modelProperties: {
            createIncident: {
                serializedName: "createIncident",
                required: true,
                type: {
                    name: "Boolean"
                }
            },
            groupingConfiguration: {
                serializedName: "groupingConfiguration",
                type: {
                    name: "Composite",
                    className: "GroupingConfiguration"
                }
            }
        }
    }
};
const GroupingConfiguration = {
    type: {
        name: "Composite",
        className: "GroupingConfiguration",
        modelProperties: {
            enabled: {
                serializedName: "enabled",
                required: true,
                type: {
                    name: "Boolean"
                }
            },
            reopenClosedIncident: {
                serializedName: "reopenClosedIncident",
                required: true,
                type: {
                    name: "Boolean"
                }
            },
            lookbackDuration: {
                serializedName: "lookbackDuration",
                required: true,
                type: {
                    name: "TimeSpan"
                }
            },
            matchingMethod: {
                serializedName: "matchingMethod",
                required: true,
                type: {
                    name: "String"
                }
            },
            groupByEntities: {
                serializedName: "groupByEntities",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            groupByAlertDetails: {
                serializedName: "groupByAlertDetails",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            groupByCustomDetails: {
                serializedName: "groupByCustomDetails",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const ScheduledAlertRuleCommonProperties = {
    type: {
        name: "Composite",
        className: "ScheduledAlertRuleCommonProperties",
        modelProperties: {
            query: {
                serializedName: "query",
                type: {
                    name: "String"
                }
            },
            queryFrequency: {
                serializedName: "queryFrequency",
                type: {
                    name: "TimeSpan"
                }
            },
            queryPeriod: {
                serializedName: "queryPeriod",
                type: {
                    name: "TimeSpan"
                }
            },
            severity: {
                serializedName: "severity",
                type: {
                    name: "String"
                }
            },
            triggerOperator: {
                serializedName: "triggerOperator",
                type: {
                    name: "Enum",
                    allowedValues: ["GreaterThan", "LessThan", "Equal", "NotEqual"]
                }
            },
            triggerThreshold: {
                serializedName: "triggerThreshold",
                type: {
                    name: "Number"
                }
            },
            eventGroupingSettings: {
                serializedName: "eventGroupingSettings",
                type: {
                    name: "Composite",
                    className: "EventGroupingSettings"
                }
            },
            customDetails: {
                serializedName: "customDetails",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            entityMappings: {
                serializedName: "entityMappings",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EntityMapping"
                        }
                    }
                }
            },
            alertDetailsOverride: {
                serializedName: "alertDetailsOverride",
                type: {
                    name: "Composite",
                    className: "AlertDetailsOverride"
                }
            }
        }
    }
};
const AutomationRuleBooleanCondition = {
    type: {
        name: "Composite",
        className: "AutomationRuleBooleanCondition",
        modelProperties: {
            operator: {
                serializedName: "operator",
                type: {
                    name: "String"
                }
            },
            innerConditions: {
                constraints: {
                    MinItems: 2,
                    MaxItems: 10
                },
                serializedName: "innerConditions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AutomationRuleCondition"
                        }
                    }
                }
            }
        }
    }
};
const IncidentPropertiesAction = {
    type: {
        name: "Composite",
        className: "IncidentPropertiesAction",
        modelProperties: {
            severity: {
                serializedName: "severity",
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            classification: {
                serializedName: "classification",
                type: {
                    name: "String"
                }
            },
            classificationReason: {
                serializedName: "classificationReason",
                type: {
                    name: "String"
                }
            },
            classificationComment: {
                serializedName: "classificationComment",
                type: {
                    name: "String"
                }
            },
            owner: {
                serializedName: "owner",
                type: {
                    name: "Composite",
                    className: "IncidentOwnerInfo"
                }
            },
            labels: {
                serializedName: "labels",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "IncidentLabel"
                        }
                    }
                }
            }
        }
    }
};
const AutomationRulePropertyArrayChangedValuesCondition = {
    type: {
        name: "Composite",
        className: "AutomationRulePropertyArrayChangedValuesCondition",
        modelProperties: {
            arrayType: {
                serializedName: "arrayType",
                type: {
                    name: "String"
                }
            },
            changeType: {
                serializedName: "changeType",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AutomationRulePropertyArrayValuesCondition = {
    type: {
        name: "Composite",
        className: "AutomationRulePropertyArrayValuesCondition",
        modelProperties: {
            arrayType: {
                serializedName: "arrayType",
                type: {
                    name: "String"
                }
            },
            arrayConditionType: {
                serializedName: "arrayConditionType",
                type: {
                    name: "String"
                }
            },
            itemConditions: {
                constraints: {
                    MaxItems: 10
                },
                serializedName: "itemConditions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AutomationRuleCondition"
                        }
                    }
                }
            }
        }
    }
};
const AutomationRulePropertyValuesChangedCondition = {
    type: {
        name: "Composite",
        className: "AutomationRulePropertyValuesChangedCondition",
        modelProperties: {
            propertyName: {
                serializedName: "propertyName",
                type: {
                    name: "String"
                }
            },
            changeType: {
                serializedName: "changeType",
                type: {
                    name: "String"
                }
            },
            operator: {
                serializedName: "operator",
                type: {
                    name: "String"
                }
            },
            propertyValues: {
                serializedName: "propertyValues",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const AutomationRulePropertyValuesCondition = {
    type: {
        name: "Composite",
        className: "AutomationRulePropertyValuesCondition",
        modelProperties: {
            propertyName: {
                serializedName: "propertyName",
                type: {
                    name: "String"
                }
            },
            operator: {
                serializedName: "operator",
                type: {
                    name: "String"
                }
            },
            propertyValues: {
                serializedName: "propertyValues",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const PlaybookActionProperties = {
    type: {
        name: "Composite",
        className: "PlaybookActionProperties",
        modelProperties: {
            logicAppResourceId: {
                serializedName: "logicAppResourceId",
                type: {
                    name: "String"
                }
            },
            tenantId: {
                serializedName: "tenantId",
                type: {
                    name: "Uuid"
                }
            }
        }
    }
};
const EntityQueryItemProperties = {
    type: {
        name: "Composite",
        className: "EntityQueryItemProperties",
        modelProperties: {
            dataTypes: {
                serializedName: "dataTypes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EntityQueryItemPropertiesDataTypesItem"
                        }
                    }
                }
            },
            inputEntityType: {
                serializedName: "inputEntityType",
                type: {
                    name: "String"
                }
            },
            requiredInputFieldsSets: {
                serializedName: "requiredInputFieldsSets",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Sequence",
                            element: {
                                type: {
                                    name: "String"
                                }
                            }
                        }
                    }
                }
            },
            entitiesFilter: {
                serializedName: "entitiesFilter",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
const EntityQueryItemPropertiesDataTypesItem = {
    type: {
        name: "Composite",
        className: "EntityQueryItemPropertiesDataTypesItem",
        modelProperties: {
            dataType: {
                serializedName: "dataType",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const InsightQueryItemPropertiesTableQuery = {
    type: {
        name: "Composite",
        className: "InsightQueryItemPropertiesTableQuery",
        modelProperties: {
            columnsDefinitions: {
                serializedName: "columnsDefinitions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "InsightQueryItemPropertiesTableQueryColumnsDefinitionsItem"
                        }
                    }
                }
            },
            queriesDefinitions: {
                serializedName: "queriesDefinitions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "InsightQueryItemPropertiesTableQueryQueriesDefinitionsItem"
                        }
                    }
                }
            }
        }
    }
};
const InsightQueryItemPropertiesTableQueryColumnsDefinitionsItem = {
    type: {
        name: "Composite",
        className: "InsightQueryItemPropertiesTableQueryColumnsDefinitionsItem",
        modelProperties: {
            header: {
                serializedName: "header",
                type: {
                    name: "String"
                }
            },
            outputType: {
                serializedName: "outputType",
                type: {
                    name: "String"
                }
            },
            supportDeepLink: {
                serializedName: "supportDeepLink",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const InsightQueryItemPropertiesTableQueryQueriesDefinitionsItem = {
    type: {
        name: "Composite",
        className: "InsightQueryItemPropertiesTableQueryQueriesDefinitionsItem",
        modelProperties: {
            filter: {
                serializedName: "filter",
                type: {
                    name: "String"
                }
            },
            summarize: {
                serializedName: "summarize",
                type: {
                    name: "String"
                }
            },
            project: {
                serializedName: "project",
                type: {
                    name: "String"
                }
            },
            linkColumnsDefinitions: {
                serializedName: "linkColumnsDefinitions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "InsightQueryItemPropertiesTableQueryQueriesDefinitionsPropertiesItemsItem"
                        }
                    }
                }
            }
        }
    }
};
const InsightQueryItemPropertiesTableQueryQueriesDefinitionsPropertiesItemsItem = {
    type: {
        name: "Composite",
        className: "InsightQueryItemPropertiesTableQueryQueriesDefinitionsPropertiesItemsItem",
        modelProperties: {
            projectedName: {
                serializedName: "projectedName",
                type: {
                    name: "String"
                }
            },
            query: {
                serializedName: "Query",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const InsightQueryItemPropertiesAdditionalQuery = {
    type: {
        name: "Composite",
        className: "InsightQueryItemPropertiesAdditionalQuery",
        modelProperties: {
            query: {
                serializedName: "query",
                type: {
                    name: "String"
                }
            },
            text: {
                serializedName: "text",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const InsightQueryItemPropertiesDefaultTimeRange = {
    type: {
        name: "Composite",
        className: "InsightQueryItemPropertiesDefaultTimeRange",
        modelProperties: {
            beforeRange: {
                serializedName: "beforeRange",
                type: {
                    name: "String"
                }
            },
            afterRange: {
                serializedName: "afterRange",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const InsightQueryItemPropertiesReferenceTimeRange = {
    type: {
        name: "Composite",
        className: "InsightQueryItemPropertiesReferenceTimeRange",
        modelProperties: {
            beforeRange: {
                serializedName: "beforeRange",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ActivityEntityQueriesPropertiesQueryDefinitions = {
    type: {
        name: "Composite",
        className: "ActivityEntityQueriesPropertiesQueryDefinitions",
        modelProperties: {
            query: {
                serializedName: "query",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ActivityEntityQueryTemplatePropertiesQueryDefinitions = {
    type: {
        name: "Composite",
        className: "ActivityEntityQueryTemplatePropertiesQueryDefinitions",
        modelProperties: {
            query: {
                serializedName: "query",
                type: {
                    name: "String"
                }
            },
            summarizeBy: {
                serializedName: "summarizeBy",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DataTypeDefinitions = {
    type: {
        name: "Composite",
        className: "DataTypeDefinitions",
        modelProperties: {
            dataType: {
                serializedName: "dataType",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SecurityMLAnalyticsSettingsDataSource = {
    type: {
        name: "Composite",
        className: "SecurityMLAnalyticsSettingsDataSource",
        modelProperties: {
            connectorId: {
                serializedName: "connectorId",
                type: {
                    name: "String"
                }
            },
            dataTypes: {
                serializedName: "dataTypes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const DataConnectorTenantId = {
    type: {
        name: "Composite",
        className: "DataConnectorTenantId",
        modelProperties: {
            tenantId: {
                serializedName: "tenantId",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DataConnectorWithAlertsProperties = {
    type: {
        name: "Composite",
        className: "DataConnectorWithAlertsProperties",
        modelProperties: {
            dataTypes: {
                serializedName: "dataTypes",
                type: {
                    name: "Composite",
                    className: "AlertsDataTypeOfDataConnector"
                }
            }
        }
    }
};
const AlertsDataTypeOfDataConnector = {
    type: {
        name: "Composite",
        className: "AlertsDataTypeOfDataConnector",
        modelProperties: {
            alerts: {
                serializedName: "alerts",
                type: {
                    name: "Composite",
                    className: "DataConnectorDataTypeCommon"
                }
            }
        }
    }
};
const DataConnectorDataTypeCommon = {
    type: {
        name: "Composite",
        className: "DataConnectorDataTypeCommon",
        modelProperties: {
            state: {
                serializedName: "state",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MstiDataConnectorDataTypes = {
    type: {
        name: "Composite",
        className: "MstiDataConnectorDataTypes",
        modelProperties: {
            bingSafetyPhishingURL: {
                serializedName: "bingSafetyPhishingURL",
                type: {
                    name: "Composite",
                    className: "MstiDataConnectorDataTypesBingSafetyPhishingURL"
                }
            },
            microsoftEmergingThreatFeed: {
                serializedName: "microsoftEmergingThreatFeed",
                type: {
                    name: "Composite",
                    className: "MstiDataConnectorDataTypesMicrosoftEmergingThreatFeed"
                }
            }
        }
    }
};
const MTPDataConnectorDataTypes = {
    type: {
        name: "Composite",
        className: "MTPDataConnectorDataTypes",
        modelProperties: {
            incidents: {
                serializedName: "incidents",
                type: {
                    name: "Composite",
                    className: "MTPDataConnectorDataTypesIncidents"
                }
            }
        }
    }
};
const AwsCloudTrailDataConnectorDataTypes = {
    type: {
        name: "Composite",
        className: "AwsCloudTrailDataConnectorDataTypes",
        modelProperties: {
            logs: {
                serializedName: "logs",
                type: {
                    name: "Composite",
                    className: "AwsCloudTrailDataConnectorDataTypesLogs"
                }
            }
        }
    }
};
const AwsS3DataConnectorDataTypes = {
    type: {
        name: "Composite",
        className: "AwsS3DataConnectorDataTypes",
        modelProperties: {
            logs: {
                serializedName: "logs",
                type: {
                    name: "Composite",
                    className: "AwsS3DataConnectorDataTypesLogs"
                }
            }
        }
    }
};
const Dynamics365DataConnectorDataTypes = {
    type: {
        name: "Composite",
        className: "Dynamics365DataConnectorDataTypes",
        modelProperties: {
            dynamics365CdsActivities: {
                serializedName: "dynamics365CdsActivities",
                type: {
                    name: "Composite",
                    className: "Dynamics365DataConnectorDataTypesDynamics365CdsActivities"
                }
            }
        }
    }
};
const Office365ProjectConnectorDataTypes = {
    type: {
        name: "Composite",
        className: "Office365ProjectConnectorDataTypes",
        modelProperties: {
            logs: {
                serializedName: "logs",
                type: {
                    name: "Composite",
                    className: "Office365ProjectConnectorDataTypesLogs"
                }
            }
        }
    }
};
const OfficePowerBIConnectorDataTypes = {
    type: {
        name: "Composite",
        className: "OfficePowerBIConnectorDataTypes",
        modelProperties: {
            logs: {
                serializedName: "logs",
                type: {
                    name: "Composite",
                    className: "OfficePowerBIConnectorDataTypesLogs"
                }
            }
        }
    }
};
const OfficeDataConnectorDataTypes = {
    type: {
        name: "Composite",
        className: "OfficeDataConnectorDataTypes",
        modelProperties: {
            exchange: {
                serializedName: "exchange",
                type: {
                    name: "Composite",
                    className: "OfficeDataConnectorDataTypesExchange"
                }
            },
            sharePoint: {
                serializedName: "sharePoint",
                type: {
                    name: "Composite",
                    className: "OfficeDataConnectorDataTypesSharePoint"
                }
            },
            teams: {
                serializedName: "teams",
                type: {
                    name: "Composite",
                    className: "OfficeDataConnectorDataTypesTeams"
                }
            }
        }
    }
};
const TIDataConnectorDataTypes = {
    type: {
        name: "Composite",
        className: "TIDataConnectorDataTypes",
        modelProperties: {
            indicators: {
                serializedName: "indicators",
                type: {
                    name: "Composite",
                    className: "TIDataConnectorDataTypesIndicators"
                }
            }
        }
    }
};
const TiTaxiiDataConnectorDataTypes = {
    type: {
        name: "Composite",
        className: "TiTaxiiDataConnectorDataTypes",
        modelProperties: {
            taxiiClient: {
                serializedName: "taxiiClient",
                type: {
                    name: "Composite",
                    className: "TiTaxiiDataConnectorDataTypesTaxiiClient"
                }
            }
        }
    }
};
const CodelessUiConnectorConfigProperties = {
    type: {
        name: "Composite",
        className: "CodelessUiConnectorConfigProperties",
        modelProperties: {
            title: {
                serializedName: "title",
                required: true,
                type: {
                    name: "String"
                }
            },
            publisher: {
                serializedName: "publisher",
                required: true,
                type: {
                    name: "String"
                }
            },
            descriptionMarkdown: {
                serializedName: "descriptionMarkdown",
                required: true,
                type: {
                    name: "String"
                }
            },
            customImage: {
                serializedName: "customImage",
                type: {
                    name: "String"
                }
            },
            graphQueriesTableName: {
                serializedName: "graphQueriesTableName",
                required: true,
                type: {
                    name: "String"
                }
            },
            graphQueries: {
                serializedName: "graphQueries",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CodelessUiConnectorConfigPropertiesGraphQueriesItem"
                        }
                    }
                }
            },
            sampleQueries: {
                serializedName: "sampleQueries",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CodelessUiConnectorConfigPropertiesSampleQueriesItem"
                        }
                    }
                }
            },
            dataTypes: {
                serializedName: "dataTypes",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CodelessUiConnectorConfigPropertiesDataTypesItem"
                        }
                    }
                }
            },
            connectivityCriteria: {
                serializedName: "connectivityCriteria",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CodelessUiConnectorConfigPropertiesConnectivityCriteriaItem"
                        }
                    }
                }
            },
            availability: {
                serializedName: "availability",
                type: {
                    name: "Composite",
                    className: "Availability"
                }
            },
            permissions: {
                serializedName: "permissions",
                type: {
                    name: "Composite",
                    className: "Permissions"
                }
            },
            instructionSteps: {
                serializedName: "instructionSteps",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CodelessUiConnectorConfigPropertiesInstructionStepsItem"
                        }
                    }
                }
            }
        }
    }
};
const GraphQueries = {
    type: {
        name: "Composite",
        className: "GraphQueries",
        modelProperties: {
            metricName: {
                serializedName: "metricName",
                type: {
                    name: "String"
                }
            },
            legend: {
                serializedName: "legend",
                type: {
                    name: "String"
                }
            },
            baseQuery: {
                serializedName: "baseQuery",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SampleQueries = {
    type: {
        name: "Composite",
        className: "SampleQueries",
        modelProperties: {
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            query: {
                serializedName: "query",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const LastDataReceivedDataType = {
    type: {
        name: "Composite",
        className: "LastDataReceivedDataType",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            lastDataReceivedQuery: {
                serializedName: "lastDataReceivedQuery",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ConnectivityCriteria = {
    type: {
        name: "Composite",
        className: "ConnectivityCriteria",
        modelProperties: {
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const Availability = {
    type: {
        name: "Composite",
        className: "Availability",
        modelProperties: {
            status: {
                defaultValue: 1,
                isConstant: true,
                serializedName: "status",
                type: {
                    name: "Number"
                }
            },
            isPreview: {
                serializedName: "isPreview",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const Permissions = {
    type: {
        name: "Composite",
        className: "Permissions",
        modelProperties: {
            resourceProvider: {
                serializedName: "resourceProvider",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PermissionsResourceProviderItem"
                        }
                    }
                }
            },
            customs: {
                serializedName: "customs",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PermissionsCustomsItem"
                        }
                    }
                }
            }
        }
    }
};
const ResourceProvider = {
    type: {
        name: "Composite",
        className: "ResourceProvider",
        modelProperties: {
            provider: {
                serializedName: "provider",
                type: {
                    name: "String"
                }
            },
            permissionsDisplayText: {
                serializedName: "permissionsDisplayText",
                type: {
                    name: "String"
                }
            },
            providerDisplayName: {
                serializedName: "providerDisplayName",
                type: {
                    name: "String"
                }
            },
            scope: {
                serializedName: "scope",
                type: {
                    name: "String"
                }
            },
            requiredPermissions: {
                serializedName: "requiredPermissions",
                type: {
                    name: "Composite",
                    className: "RequiredPermissions"
                }
            }
        }
    }
};
const RequiredPermissions = {
    type: {
        name: "Composite",
        className: "RequiredPermissions",
        modelProperties: {
            action: {
                serializedName: "action",
                type: {
                    name: "Boolean"
                }
            },
            write: {
                serializedName: "write",
                type: {
                    name: "Boolean"
                }
            },
            read: {
                serializedName: "read",
                type: {
                    name: "Boolean"
                }
            },
            delete: {
                serializedName: "delete",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const CustomsPermission = {
    type: {
        name: "Composite",
        className: "CustomsPermission",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const InstructionSteps = {
    type: {
        name: "Composite",
        className: "InstructionSteps",
        modelProperties: {
            title: {
                serializedName: "title",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            instructions: {
                serializedName: "instructions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "InstructionStepsInstructionsItem"
                        }
                    }
                }
            }
        }
    }
};
const ConnectorInstructionModelBase = {
    type: {
        name: "Composite",
        className: "ConnectorInstructionModelBase",
        modelProperties: {
            parameters: {
                serializedName: "parameters",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            },
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CodelessConnectorPollingConfigProperties = {
    type: {
        name: "Composite",
        className: "CodelessConnectorPollingConfigProperties",
        modelProperties: {
            isActive: {
                serializedName: "isActive",
                type: {
                    name: "Boolean"
                }
            },
            auth: {
                serializedName: "auth",
                type: {
                    name: "Composite",
                    className: "CodelessConnectorPollingAuthProperties"
                }
            },
            request: {
                serializedName: "request",
                type: {
                    name: "Composite",
                    className: "CodelessConnectorPollingRequestProperties"
                }
            },
            paging: {
                serializedName: "paging",
                type: {
                    name: "Composite",
                    className: "CodelessConnectorPollingPagingProperties"
                }
            },
            response: {
                serializedName: "response",
                type: {
                    name: "Composite",
                    className: "CodelessConnectorPollingResponseProperties"
                }
            }
        }
    }
};
const CodelessConnectorPollingAuthProperties = {
    type: {
        name: "Composite",
        className: "CodelessConnectorPollingAuthProperties",
        modelProperties: {
            authType: {
                serializedName: "authType",
                required: true,
                type: {
                    name: "String"
                }
            },
            apiKeyName: {
                serializedName: "apiKeyName",
                type: {
                    name: "String"
                }
            },
            apiKeyIdentifier: {
                serializedName: "apiKeyIdentifier",
                type: {
                    name: "String"
                }
            },
            isApiKeyInPostPayload: {
                serializedName: "isApiKeyInPostPayload",
                type: {
                    name: "String"
                }
            },
            flowName: {
                serializedName: "flowName",
                type: {
                    name: "String"
                }
            },
            tokenEndpoint: {
                serializedName: "tokenEndpoint",
                type: {
                    name: "String"
                }
            },
            authorizationEndpoint: {
                serializedName: "authorizationEndpoint",
                type: {
                    name: "String"
                }
            },
            authorizationEndpointQueryParameters: {
                serializedName: "authorizationEndpointQueryParameters",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            },
            redirectionEndpoint: {
                serializedName: "redirectionEndpoint",
                type: {
                    name: "String"
                }
            },
            tokenEndpointHeaders: {
                serializedName: "tokenEndpointHeaders",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            },
            tokenEndpointQueryParameters: {
                serializedName: "tokenEndpointQueryParameters",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            },
            isClientSecretInHeader: {
                serializedName: "isClientSecretInHeader",
                type: {
                    name: "Boolean"
                }
            },
            scope: {
                serializedName: "scope",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CodelessConnectorPollingRequestProperties = {
    type: {
        name: "Composite",
        className: "CodelessConnectorPollingRequestProperties",
        modelProperties: {
            apiEndpoint: {
                serializedName: "apiEndpoint",
                required: true,
                type: {
                    name: "String"
                }
            },
            rateLimitQps: {
                serializedName: "rateLimitQps",
                type: {
                    name: "Number"
                }
            },
            queryWindowInMin: {
                serializedName: "queryWindowInMin",
                required: true,
                type: {
                    name: "Number"
                }
            },
            httpMethod: {
                serializedName: "httpMethod",
                required: true,
                type: {
                    name: "String"
                }
            },
            queryTimeFormat: {
                serializedName: "queryTimeFormat",
                required: true,
                type: {
                    name: "String"
                }
            },
            retryCount: {
                serializedName: "retryCount",
                type: {
                    name: "Number"
                }
            },
            timeoutInSeconds: {
                serializedName: "timeoutInSeconds",
                type: {
                    name: "Number"
                }
            },
            headers: {
                serializedName: "headers",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            },
            queryParameters: {
                serializedName: "queryParameters",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            },
            queryParametersTemplate: {
                serializedName: "queryParametersTemplate",
                type: {
                    name: "String"
                }
            },
            startTimeAttributeName: {
                serializedName: "startTimeAttributeName",
                type: {
                    name: "String"
                }
            },
            endTimeAttributeName: {
                serializedName: "endTimeAttributeName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CodelessConnectorPollingPagingProperties = {
    type: {
        name: "Composite",
        className: "CodelessConnectorPollingPagingProperties",
        modelProperties: {
            pagingType: {
                serializedName: "pagingType",
                required: true,
                type: {
                    name: "String"
                }
            },
            nextPageParaName: {
                serializedName: "nextPageParaName",
                type: {
                    name: "String"
                }
            },
            nextPageTokenJsonPath: {
                serializedName: "nextPageTokenJsonPath",
                type: {
                    name: "String"
                }
            },
            pageCountAttributePath: {
                serializedName: "pageCountAttributePath",
                type: {
                    name: "String"
                }
            },
            pageTotalCountAttributePath: {
                serializedName: "pageTotalCountAttributePath",
                type: {
                    name: "String"
                }
            },
            pageTimeStampAttributePath: {
                serializedName: "pageTimeStampAttributePath",
                type: {
                    name: "String"
                }
            },
            searchTheLatestTimeStampFromEventsList: {
                serializedName: "searchTheLatestTimeStampFromEventsList",
                type: {
                    name: "String"
                }
            },
            pageSizeParaName: {
                serializedName: "pageSizeParaName",
                type: {
                    name: "String"
                }
            },
            pageSize: {
                serializedName: "pageSize",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const CodelessConnectorPollingResponseProperties = {
    type: {
        name: "Composite",
        className: "CodelessConnectorPollingResponseProperties",
        modelProperties: {
            eventsJsonPaths: {
                serializedName: "eventsJsonPaths",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            successStatusJsonPath: {
                serializedName: "successStatusJsonPath",
                type: {
                    name: "String"
                }
            },
            successStatusValue: {
                serializedName: "successStatusValue",
                type: {
                    name: "String"
                }
            },
            isGzipCompressed: {
                serializedName: "isGzipCompressed",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const ThreatIntelligence = {
    type: {
        name: "Composite",
        className: "ThreatIntelligence",
        modelProperties: {
            confidence: {
                serializedName: "confidence",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            providerName: {
                serializedName: "providerName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            reportLink: {
                serializedName: "reportLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            threatDescription: {
                serializedName: "threatDescription",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            threatName: {
                serializedName: "threatName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            threatType: {
                serializedName: "threatType",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const GeoLocation = {
    type: {
        name: "Composite",
        className: "GeoLocation",
        modelProperties: {
            asn: {
                serializedName: "asn",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            city: {
                serializedName: "city",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            countryCode: {
                serializedName: "countryCode",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            countryName: {
                serializedName: "countryName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            latitude: {
                serializedName: "latitude",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            longitude: {
                serializedName: "longitude",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            state: {
                serializedName: "state",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ResourceWithEtag = {
    type: {
        name: "Composite",
        className: "ResourceWithEtag",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { etag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            } })
    }
};
const AlertRuleTemplate = {
    serializedName: "AlertRuleTemplate",
    type: {
        name: "Composite",
        className: "AlertRuleTemplate",
        uberParent: "Resource",
        polymorphicDiscriminator: {
            serializedName: "kind",
            clientName: "kind"
        },
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { kind: {
                serializedName: "kind",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const Entity = {
    serializedName: "Entity",
    type: {
        name: "Composite",
        className: "Entity",
        uberParent: "Resource",
        polymorphicDiscriminator: {
            serializedName: "kind",
            clientName: "kind"
        },
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { kind: {
                serializedName: "kind",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const EntityQueryTemplate = {
    serializedName: "EntityQueryTemplate",
    type: {
        name: "Composite",
        className: "EntityQueryTemplate",
        uberParent: "Resource",
        polymorphicDiscriminator: {
            serializedName: "kind",
            clientName: "kind"
        },
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { kind: {
                serializedName: "kind",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const FileImport = {
    type: {
        name: "Composite",
        className: "FileImport",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { ingestionMode: {
                serializedName: "properties.ingestionMode",
                type: {
                    name: "String"
                }
            }, contentType: {
                serializedName: "properties.contentType",
                type: {
                    name: "String"
                }
            }, createdTimeUTC: {
                serializedName: "properties.createdTimeUTC",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, errorFile: {
                serializedName: "properties.errorFile",
                type: {
                    name: "Composite",
                    className: "FileMetadata"
                }
            }, errorsPreview: {
                serializedName: "properties.errorsPreview",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ValidationError"
                        }
                    }
                }
            }, importFile: {
                serializedName: "properties.importFile",
                type: {
                    name: "Composite",
                    className: "FileMetadata"
                }
            }, ingestedRecordCount: {
                serializedName: "properties.ingestedRecordCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, source: {
                serializedName: "properties.source",
                type: {
                    name: "String"
                }
            }, state: {
                serializedName: "properties.state",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, totalRecordCount: {
                serializedName: "properties.totalRecordCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, validRecordCount: {
                serializedName: "properties.validRecordCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, filesValidUntilTimeUTC: {
                serializedName: "properties.filesValidUntilTimeUTC",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, importValidUntilTimeUTC: {
                serializedName: "properties.importValidUntilTimeUTC",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            } })
    }
};
const OfficeConsent = {
    type: {
        name: "Composite",
        className: "OfficeConsent",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { tenantId: {
                serializedName: "properties.tenantId",
                type: {
                    name: "String"
                }
            }, consentId: {
                serializedName: "properties.consentId",
                type: {
                    name: "String"
                }
            } })
    }
};
const ActionResponseProperties = {
    type: {
        name: "Composite",
        className: "ActionResponseProperties",
        modelProperties: Object.assign(Object.assign({}, ActionPropertiesBase.type.modelProperties), { workflowId: {
                serializedName: "workflowId",
                type: {
                    name: "String"
                }
            } })
    }
};
const ActionRequestProperties = {
    type: {
        name: "Composite",
        className: "ActionRequestProperties",
        modelProperties: Object.assign(Object.assign({}, ActionPropertiesBase.type.modelProperties), { triggerUri: {
                serializedName: "triggerUri",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const BooleanConditionProperties = {
    serializedName: "Boolean",
    type: {
        name: "Composite",
        className: "BooleanConditionProperties",
        uberParent: "AutomationRuleCondition",
        polymorphicDiscriminator: AutomationRuleCondition.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AutomationRuleCondition.type.modelProperties), { conditionProperties: {
                serializedName: "conditionProperties",
                type: {
                    name: "Composite",
                    className: "AutomationRuleBooleanCondition"
                }
            } })
    }
};
const PropertyArrayChangedConditionProperties = {
    serializedName: "PropertyArrayChanged",
    type: {
        name: "Composite",
        className: "PropertyArrayChangedConditionProperties",
        uberParent: "AutomationRuleCondition",
        polymorphicDiscriminator: AutomationRuleCondition.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AutomationRuleCondition.type.modelProperties), { conditionProperties: {
                serializedName: "conditionProperties",
                type: {
                    name: "Composite",
                    className: "AutomationRulePropertyArrayChangedValuesCondition"
                }
            } })
    }
};
const PropertyArrayConditionProperties = {
    serializedName: "PropertyArray",
    type: {
        name: "Composite",
        className: "PropertyArrayConditionProperties",
        uberParent: "AutomationRuleCondition",
        polymorphicDiscriminator: AutomationRuleCondition.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AutomationRuleCondition.type.modelProperties), { conditionProperties: {
                serializedName: "conditionProperties",
                type: {
                    name: "Composite",
                    className: "AutomationRulePropertyArrayValuesCondition"
                }
            } })
    }
};
const PropertyChangedConditionProperties = {
    serializedName: "PropertyChanged",
    type: {
        name: "Composite",
        className: "PropertyChangedConditionProperties",
        uberParent: "AutomationRuleCondition",
        polymorphicDiscriminator: AutomationRuleCondition.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AutomationRuleCondition.type.modelProperties), { conditionProperties: {
                serializedName: "conditionProperties",
                type: {
                    name: "Composite",
                    className: "AutomationRulePropertyValuesChangedCondition"
                }
            } })
    }
};
const PropertyConditionProperties = {
    serializedName: "Property",
    type: {
        name: "Composite",
        className: "PropertyConditionProperties",
        uberParent: "AutomationRuleCondition",
        polymorphicDiscriminator: AutomationRuleCondition.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AutomationRuleCondition.type.modelProperties), { conditionProperties: {
                serializedName: "conditionProperties",
                type: {
                    name: "Composite",
                    className: "AutomationRulePropertyValuesCondition"
                }
            } })
    }
};
const AutomationRuleModifyPropertiesAction = {
    serializedName: "ModifyProperties",
    type: {
        name: "Composite",
        className: "AutomationRuleModifyPropertiesAction",
        uberParent: "AutomationRuleAction",
        polymorphicDiscriminator: AutomationRuleAction.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AutomationRuleAction.type.modelProperties), { actionConfiguration: {
                serializedName: "actionConfiguration",
                type: {
                    name: "Composite",
                    className: "IncidentPropertiesAction"
                }
            } })
    }
};
const AutomationRuleRunPlaybookAction = {
    serializedName: "RunPlaybook",
    type: {
        name: "Composite",
        className: "AutomationRuleRunPlaybookAction",
        uberParent: "AutomationRuleAction",
        polymorphicDiscriminator: AutomationRuleAction.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AutomationRuleAction.type.modelProperties), { actionConfiguration: {
                serializedName: "actionConfiguration",
                type: {
                    name: "Composite",
                    className: "PlaybookActionProperties"
                }
            } })
    }
};
const ActivityTimelineItem = {
    serializedName: "Activity",
    type: {
        name: "Composite",
        className: "ActivityTimelineItem",
        uberParent: "EntityTimelineItem",
        polymorphicDiscriminator: EntityTimelineItem.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, EntityTimelineItem.type.modelProperties), { queryId: {
                serializedName: "queryId",
                required: true,
                type: {
                    name: "String"
                }
            }, bucketStartTimeUTC: {
                serializedName: "bucketStartTimeUTC",
                required: true,
                type: {
                    name: "DateTime"
                }
            }, bucketEndTimeUTC: {
                serializedName: "bucketEndTimeUTC",
                required: true,
                type: {
                    name: "DateTime"
                }
            }, firstActivityTimeUTC: {
                serializedName: "firstActivityTimeUTC",
                required: true,
                type: {
                    name: "DateTime"
                }
            }, lastActivityTimeUTC: {
                serializedName: "lastActivityTimeUTC",
                required: true,
                type: {
                    name: "DateTime"
                }
            }, content: {
                serializedName: "content",
                required: true,
                type: {
                    name: "String"
                }
            }, title: {
                serializedName: "title",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const BookmarkTimelineItem = {
    serializedName: "Bookmark",
    type: {
        name: "Composite",
        className: "BookmarkTimelineItem",
        uberParent: "EntityTimelineItem",
        polymorphicDiscriminator: EntityTimelineItem.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, EntityTimelineItem.type.modelProperties), { azureResourceId: {
                serializedName: "azureResourceId",
                required: true,
                type: {
                    name: "String"
                }
            }, displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            }, notes: {
                serializedName: "notes",
                type: {
                    name: "String"
                }
            }, endTimeUtc: {
                serializedName: "endTimeUtc",
                type: {
                    name: "DateTime"
                }
            }, startTimeUtc: {
                serializedName: "startTimeUtc",
                type: {
                    name: "DateTime"
                }
            }, eventTime: {
                serializedName: "eventTime",
                type: {
                    name: "DateTime"
                }
            }, createdBy: {
                serializedName: "createdBy",
                type: {
                    name: "Composite",
                    className: "UserInfo"
                }
            }, labels: {
                serializedName: "labels",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            } })
    }
};
const AnomalyTimelineItem = {
    serializedName: "Anomaly",
    type: {
        name: "Composite",
        className: "AnomalyTimelineItem",
        uberParent: "EntityTimelineItem",
        polymorphicDiscriminator: EntityTimelineItem.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, EntityTimelineItem.type.modelProperties), { azureResourceId: {
                serializedName: "azureResourceId",
                required: true,
                type: {
                    name: "String"
                }
            }, productName: {
                serializedName: "productName",
                type: {
                    name: "String"
                }
            }, description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            }, displayName: {
                serializedName: "displayName",
                required: true,
                type: {
                    name: "String"
                }
            }, endTimeUtc: {
                serializedName: "endTimeUtc",
                required: true,
                type: {
                    name: "DateTime"
                }
            }, startTimeUtc: {
                serializedName: "startTimeUtc",
                required: true,
                type: {
                    name: "DateTime"
                }
            }, timeGenerated: {
                serializedName: "timeGenerated",
                required: true,
                type: {
                    name: "DateTime"
                }
            }, vendor: {
                serializedName: "vendor",
                type: {
                    name: "String"
                }
            }, intent: {
                serializedName: "intent",
                type: {
                    name: "String"
                }
            }, techniques: {
                serializedName: "techniques",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, reasons: {
                serializedName: "reasons",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            } })
    }
};
const SecurityAlertTimelineItem = {
    serializedName: "SecurityAlert",
    type: {
        name: "Composite",
        className: "SecurityAlertTimelineItem",
        uberParent: "EntityTimelineItem",
        polymorphicDiscriminator: EntityTimelineItem.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, EntityTimelineItem.type.modelProperties), { azureResourceId: {
                serializedName: "azureResourceId",
                required: true,
                type: {
                    name: "String"
                }
            }, productName: {
                serializedName: "productName",
                type: {
                    name: "String"
                }
            }, description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            }, displayName: {
                serializedName: "displayName",
                required: true,
                type: {
                    name: "String"
                }
            }, severity: {
                serializedName: "severity",
                required: true,
                type: {
                    name: "String"
                }
            }, endTimeUtc: {
                serializedName: "endTimeUtc",
                required: true,
                type: {
                    name: "DateTime"
                }
            }, startTimeUtc: {
                serializedName: "startTimeUtc",
                required: true,
                type: {
                    name: "DateTime"
                }
            }, timeGenerated: {
                serializedName: "timeGenerated",
                required: true,
                type: {
                    name: "DateTime"
                }
            }, alertType: {
                serializedName: "alertType",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const InsightQueryItem = {
    serializedName: "Insight",
    type: {
        name: "Composite",
        className: "InsightQueryItem",
        uberParent: "EntityQueryItem",
        polymorphicDiscriminator: EntityQueryItem.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, EntityQueryItem.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "InsightQueryItemProperties"
                }
            } })
    }
};
const SecurityAlertProperties = {
    type: {
        name: "Composite",
        className: "SecurityAlertProperties",
        modelProperties: Object.assign(Object.assign({}, EntityCommonProperties.type.modelProperties), { alertDisplayName: {
                serializedName: "alertDisplayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, alertType: {
                serializedName: "alertType",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, compromisedEntity: {
                serializedName: "compromisedEntity",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, confidenceLevel: {
                serializedName: "confidenceLevel",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, confidenceReasons: {
                serializedName: "confidenceReasons",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SecurityAlertPropertiesConfidenceReasonsItem"
                        }
                    }
                }
            }, confidenceScore: {
                serializedName: "confidenceScore",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, confidenceScoreStatus: {
                serializedName: "confidenceScoreStatus",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, description: {
                serializedName: "description",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, endTimeUtc: {
                serializedName: "endTimeUtc",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, intent: {
                serializedName: "intent",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, providerAlertId: {
                serializedName: "providerAlertId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, processingEndTime: {
                serializedName: "processingEndTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, productComponentName: {
                serializedName: "productComponentName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, productName: {
                serializedName: "productName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, productVersion: {
                serializedName: "productVersion",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, remediationSteps: {
                serializedName: "remediationSteps",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, severity: {
                serializedName: "severity",
                type: {
                    name: "String"
                }
            }, startTimeUtc: {
                serializedName: "startTimeUtc",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, systemAlertId: {
                serializedName: "systemAlertId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, tactics: {
                serializedName: "tactics",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, timeGenerated: {
                serializedName: "timeGenerated",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, vendorName: {
                serializedName: "vendorName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, alertLink: {
                serializedName: "alertLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, resourceIdentifiers: {
                serializedName: "resourceIdentifiers",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Dictionary",
                            value: { type: { name: "any" } }
                        }
                    }
                }
            } })
    }
};
const HuntingBookmarkProperties = {
    type: {
        name: "Composite",
        className: "HuntingBookmarkProperties",
        modelProperties: Object.assign(Object.assign({}, EntityCommonProperties.type.modelProperties), { created: {
                serializedName: "created",
                type: {
                    name: "DateTime"
                }
            }, createdBy: {
                serializedName: "createdBy",
                type: {
                    name: "Composite",
                    className: "UserInfo"
                }
            }, displayName: {
                serializedName: "displayName",
                required: true,
                type: {
                    name: "String"
                }
            }, eventTime: {
                serializedName: "eventTime",
                type: {
                    name: "DateTime"
                }
            }, labels: {
                serializedName: "labels",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, notes: {
                serializedName: "notes",
                type: {
                    name: "String"
                }
            }, query: {
                serializedName: "query",
                required: true,
                type: {
                    name: "String"
                }
            }, queryResult: {
                serializedName: "queryResult",
                type: {
                    name: "String"
                }
            }, updated: {
                serializedName: "updated",
                type: {
                    name: "DateTime"
                }
            }, updatedBy: {
                serializedName: "updatedBy",
                type: {
                    name: "Composite",
                    className: "UserInfo"
                }
            }, incidentInfo: {
                serializedName: "incidentInfo",
                type: {
                    name: "Composite",
                    className: "IncidentInfo"
                }
            } })
    }
};
const ThreatIntelligenceIndicatorProperties = {
    type: {
        name: "Composite",
        className: "ThreatIntelligenceIndicatorProperties",
        modelProperties: Object.assign(Object.assign({}, EntityCommonProperties.type.modelProperties), { threatIntelligenceTags: {
                serializedName: "threatIntelligenceTags",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, lastUpdatedTimeUtc: {
                serializedName: "lastUpdatedTimeUtc",
                type: {
                    name: "String"
                }
            }, source: {
                serializedName: "source",
                type: {
                    name: "String"
                }
            }, displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            }, description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            }, indicatorTypes: {
                serializedName: "indicatorTypes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, pattern: {
                serializedName: "pattern",
                type: {
                    name: "String"
                }
            }, patternType: {
                serializedName: "patternType",
                type: {
                    name: "String"
                }
            }, patternVersion: {
                serializedName: "patternVersion",
                type: {
                    name: "String"
                }
            }, killChainPhases: {
                serializedName: "killChainPhases",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ThreatIntelligenceKillChainPhase"
                        }
                    }
                }
            }, parsedPattern: {
                serializedName: "parsedPattern",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ThreatIntelligenceParsedPattern"
                        }
                    }
                }
            }, externalId: {
                serializedName: "externalId",
                type: {
                    name: "String"
                }
            }, createdByRef: {
                serializedName: "createdByRef",
                type: {
                    name: "String"
                }
            }, defanged: {
                serializedName: "defanged",
                type: {
                    name: "Boolean"
                }
            }, externalLastUpdatedTimeUtc: {
                serializedName: "externalLastUpdatedTimeUtc",
                type: {
                    name: "String"
                }
            }, externalReferences: {
                serializedName: "externalReferences",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ThreatIntelligenceExternalReference"
                        }
                    }
                }
            }, granularMarkings: {
                serializedName: "granularMarkings",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ThreatIntelligenceGranularMarkingModel"
                        }
                    }
                }
            }, labels: {
                serializedName: "labels",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, revoked: {
                serializedName: "revoked",
                type: {
                    name: "Boolean"
                }
            }, confidence: {
                serializedName: "confidence",
                type: {
                    name: "Number"
                }
            }, objectMarkingRefs: {
                serializedName: "objectMarkingRefs",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, language: {
                serializedName: "language",
                type: {
                    name: "String"
                }
            }, threatTypes: {
                serializedName: "threatTypes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, validFrom: {
                serializedName: "validFrom",
                type: {
                    name: "String"
                }
            }, validUntil: {
                serializedName: "validUntil",
                type: {
                    name: "String"
                }
            }, created: {
                serializedName: "created",
                type: {
                    name: "String"
                }
            }, modified: {
                serializedName: "modified",
                type: {
                    name: "String"
                }
            }, extensions: {
                serializedName: "extensions",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            } })
    }
};
const AccountEntityProperties = {
    type: {
        name: "Composite",
        className: "AccountEntityProperties",
        modelProperties: Object.assign(Object.assign({}, EntityCommonProperties.type.modelProperties), { aadTenantId: {
                serializedName: "aadTenantId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, aadUserId: {
                serializedName: "aadUserId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, accountName: {
                serializedName: "accountName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, displayName: {
                serializedName: "displayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, hostEntityId: {
                serializedName: "hostEntityId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, isDomainJoined: {
                serializedName: "isDomainJoined",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            }, ntDomain: {
                serializedName: "ntDomain",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, objectGuid: {
                serializedName: "objectGuid",
                readOnly: true,
                type: {
                    name: "Uuid"
                }
            }, puid: {
                serializedName: "puid",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, sid: {
                serializedName: "sid",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, upnSuffix: {
                serializedName: "upnSuffix",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, dnsDomain: {
                serializedName: "dnsDomain",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const AzureResourceEntityProperties = {
    type: {
        name: "Composite",
        className: "AzureResourceEntityProperties",
        modelProperties: Object.assign(Object.assign({}, EntityCommonProperties.type.modelProperties), { resourceId: {
                serializedName: "resourceId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, subscriptionId: {
                serializedName: "subscriptionId",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const CloudApplicationEntityProperties = {
    type: {
        name: "Composite",
        className: "CloudApplicationEntityProperties",
        modelProperties: Object.assign(Object.assign({}, EntityCommonProperties.type.modelProperties), { appId: {
                serializedName: "appId",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, appName: {
                serializedName: "appName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, instanceName: {
                serializedName: "instanceName",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const DnsEntityProperties = {
    type: {
        name: "Composite",
        className: "DnsEntityProperties",
        modelProperties: Object.assign(Object.assign({}, EntityCommonProperties.type.modelProperties), { dnsServerIpEntityId: {
                serializedName: "dnsServerIpEntityId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, domainName: {
                serializedName: "domainName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, hostIpAddressEntityId: {
                serializedName: "hostIpAddressEntityId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, ipAddressEntityIds: {
                serializedName: "ipAddressEntityIds",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            } })
    }
};
const FileEntityProperties = {
    type: {
        name: "Composite",
        className: "FileEntityProperties",
        modelProperties: Object.assign(Object.assign({}, EntityCommonProperties.type.modelProperties), { directory: {
                serializedName: "directory",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, fileHashEntityIds: {
                serializedName: "fileHashEntityIds",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, fileName: {
                serializedName: "fileName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, hostEntityId: {
                serializedName: "hostEntityId",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const FileHashEntityProperties = {
    type: {
        name: "Composite",
        className: "FileHashEntityProperties",
        modelProperties: Object.assign(Object.assign({}, EntityCommonProperties.type.modelProperties), { algorithm: {
                serializedName: "algorithm",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, hashValue: {
                serializedName: "hashValue",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const HostEntityProperties = {
    type: {
        name: "Composite",
        className: "HostEntityProperties",
        modelProperties: Object.assign(Object.assign({}, EntityCommonProperties.type.modelProperties), { azureID: {
                serializedName: "azureID",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, dnsDomain: {
                serializedName: "dnsDomain",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, hostName: {
                serializedName: "hostName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, isDomainJoined: {
                serializedName: "isDomainJoined",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            }, netBiosName: {
                serializedName: "netBiosName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, ntDomain: {
                serializedName: "ntDomain",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, omsAgentID: {
                serializedName: "omsAgentID",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, osFamily: {
                serializedName: "osFamily",
                type: {
                    name: "Enum",
                    allowedValues: ["Linux", "Windows", "Android", "IOS", "Unknown"]
                }
            }, osVersion: {
                serializedName: "osVersion",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const IoTDeviceEntityProperties = {
    type: {
        name: "Composite",
        className: "IoTDeviceEntityProperties",
        modelProperties: Object.assign(Object.assign({}, EntityCommonProperties.type.modelProperties), { deviceId: {
                serializedName: "deviceId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, deviceName: {
                serializedName: "deviceName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, source: {
                serializedName: "source",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, iotSecurityAgentId: {
                serializedName: "iotSecurityAgentId",
                readOnly: true,
                type: {
                    name: "Uuid"
                }
            }, deviceType: {
                serializedName: "deviceType",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, vendor: {
                serializedName: "vendor",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, edgeId: {
                serializedName: "edgeId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, macAddress: {
                serializedName: "macAddress",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, model: {
                serializedName: "model",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, serialNumber: {
                serializedName: "serialNumber",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, firmwareVersion: {
                serializedName: "firmwareVersion",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, operatingSystem: {
                serializedName: "operatingSystem",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, iotHubEntityId: {
                serializedName: "iotHubEntityId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, hostEntityId: {
                serializedName: "hostEntityId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, ipAddressEntityId: {
                serializedName: "ipAddressEntityId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, threatIntelligence: {
                serializedName: "threatIntelligence",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ThreatIntelligence"
                        }
                    }
                }
            }, protocols: {
                serializedName: "protocols",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, owners: {
                serializedName: "owners",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, nicEntityIds: {
                serializedName: "nicEntityIds",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, site: {
                serializedName: "site",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, zone: {
                serializedName: "zone",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, sensor: {
                serializedName: "sensor",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, deviceSubType: {
                serializedName: "deviceSubType",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, importance: {
                serializedName: "importance",
                type: {
                    name: "String"
                }
            }, purdueLayer: {
                serializedName: "purdueLayer",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, isAuthorized: {
                serializedName: "isAuthorized",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            }, isProgramming: {
                serializedName: "isProgramming",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            }, isScanner: {
                serializedName: "isScanner",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            } })
    }
};
const IpEntityProperties = {
    type: {
        name: "Composite",
        className: "IpEntityProperties",
        modelProperties: Object.assign(Object.assign({}, EntityCommonProperties.type.modelProperties), { address: {
                serializedName: "address",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, location: {
                serializedName: "location",
                type: {
                    name: "Composite",
                    className: "GeoLocation"
                }
            }, threatIntelligence: {
                serializedName: "threatIntelligence",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ThreatIntelligence"
                        }
                    }
                }
            } })
    }
};
const MailboxEntityProperties = {
    type: {
        name: "Composite",
        className: "MailboxEntityProperties",
        modelProperties: Object.assign(Object.assign({}, EntityCommonProperties.type.modelProperties), { mailboxPrimaryAddress: {
                serializedName: "mailboxPrimaryAddress",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, displayName: {
                serializedName: "displayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, upn: {
                serializedName: "upn",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, externalDirectoryObjectId: {
                serializedName: "externalDirectoryObjectId",
                readOnly: true,
                type: {
                    name: "Uuid"
                }
            } })
    }
};
const MailClusterEntityProperties = {
    type: {
        name: "Composite",
        className: "MailClusterEntityProperties",
        modelProperties: Object.assign(Object.assign({}, EntityCommonProperties.type.modelProperties), { networkMessageIds: {
                serializedName: "networkMessageIds",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, countByDeliveryStatus: {
                serializedName: "countByDeliveryStatus",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }, countByThreatType: {
                serializedName: "countByThreatType",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }, countByProtectionStatus: {
                serializedName: "countByProtectionStatus",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }, threats: {
                serializedName: "threats",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, query: {
                serializedName: "query",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, queryTime: {
                serializedName: "queryTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, mailCount: {
                serializedName: "mailCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, isVolumeAnomaly: {
                serializedName: "isVolumeAnomaly",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            }, source: {
                serializedName: "source",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, clusterSourceIdentifier: {
                serializedName: "clusterSourceIdentifier",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, clusterSourceType: {
                serializedName: "clusterSourceType",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, clusterQueryStartTime: {
                serializedName: "clusterQueryStartTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, clusterQueryEndTime: {
                serializedName: "clusterQueryEndTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, clusterGroup: {
                serializedName: "clusterGroup",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const MailMessageEntityProperties = {
    type: {
        name: "Composite",
        className: "MailMessageEntityProperties",
        modelProperties: Object.assign(Object.assign({}, EntityCommonProperties.type.modelProperties), { fileEntityIds: {
                serializedName: "fileEntityIds",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, recipient: {
                serializedName: "recipient",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, urls: {
                serializedName: "urls",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, threats: {
                serializedName: "threats",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, p1Sender: {
                serializedName: "p1Sender",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, p1SenderDisplayName: {
                serializedName: "p1SenderDisplayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, p1SenderDomain: {
                serializedName: "p1SenderDomain",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, senderIP: {
                serializedName: "senderIP",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, p2Sender: {
                serializedName: "p2Sender",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, p2SenderDisplayName: {
                serializedName: "p2SenderDisplayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, p2SenderDomain: {
                serializedName: "p2SenderDomain",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, receiveDate: {
                serializedName: "receiveDate",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, networkMessageId: {
                serializedName: "networkMessageId",
                readOnly: true,
                type: {
                    name: "Uuid"
                }
            }, internetMessageId: {
                serializedName: "internetMessageId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, subject: {
                serializedName: "subject",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, language: {
                serializedName: "language",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, threatDetectionMethods: {
                serializedName: "threatDetectionMethods",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, bodyFingerprintBin1: {
                serializedName: "bodyFingerprintBin1",
                type: {
                    name: "Number"
                }
            }, bodyFingerprintBin2: {
                serializedName: "bodyFingerprintBin2",
                type: {
                    name: "Number"
                }
            }, bodyFingerprintBin3: {
                serializedName: "bodyFingerprintBin3",
                type: {
                    name: "Number"
                }
            }, bodyFingerprintBin4: {
                serializedName: "bodyFingerprintBin4",
                type: {
                    name: "Number"
                }
            }, bodyFingerprintBin5: {
                serializedName: "bodyFingerprintBin5",
                type: {
                    name: "Number"
                }
            }, antispamDirection: {
                serializedName: "antispamDirection",
                type: {
                    name: "String"
                }
            }, deliveryAction: {
                serializedName: "deliveryAction",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Unknown",
                        "DeliveredAsSpam",
                        "Delivered",
                        "Blocked",
                        "Replaced"
                    ]
                }
            }, deliveryLocation: {
                serializedName: "deliveryLocation",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Unknown",
                        "Inbox",
                        "JunkFolder",
                        "DeletedFolder",
                        "Quarantine",
                        "External",
                        "Failed",
                        "Dropped",
                        "Forwarded"
                    ]
                }
            } })
    }
};
const MalwareEntityProperties = {
    type: {
        name: "Composite",
        className: "MalwareEntityProperties",
        modelProperties: Object.assign(Object.assign({}, EntityCommonProperties.type.modelProperties), { category: {
                serializedName: "category",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, fileEntityIds: {
                serializedName: "fileEntityIds",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, malwareName: {
                serializedName: "malwareName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, processEntityIds: {
                serializedName: "processEntityIds",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            } })
    }
};
const ProcessEntityProperties = {
    type: {
        name: "Composite",
        className: "ProcessEntityProperties",
        modelProperties: Object.assign(Object.assign({}, EntityCommonProperties.type.modelProperties), { accountEntityId: {
                serializedName: "accountEntityId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, commandLine: {
                serializedName: "commandLine",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, creationTimeUtc: {
                serializedName: "creationTimeUtc",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, elevationToken: {
                serializedName: "elevationToken",
                type: {
                    name: "Enum",
                    allowedValues: ["Default", "Full", "Limited"]
                }
            }, hostEntityId: {
                serializedName: "hostEntityId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, hostLogonSessionEntityId: {
                serializedName: "hostLogonSessionEntityId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, imageFileEntityId: {
                serializedName: "imageFileEntityId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, parentProcessEntityId: {
                serializedName: "parentProcessEntityId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, processId: {
                serializedName: "processId",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const RegistryKeyEntityProperties = {
    type: {
        name: "Composite",
        className: "RegistryKeyEntityProperties",
        modelProperties: Object.assign(Object.assign({}, EntityCommonProperties.type.modelProperties), { hive: {
                serializedName: "hive",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, key: {
                serializedName: "key",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const RegistryValueEntityProperties = {
    type: {
        name: "Composite",
        className: "RegistryValueEntityProperties",
        modelProperties: Object.assign(Object.assign({}, EntityCommonProperties.type.modelProperties), { keyEntityId: {
                serializedName: "keyEntityId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, valueData: {
                serializedName: "valueData",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, valueName: {
                serializedName: "valueName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, valueType: {
                serializedName: "valueType",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const SecurityGroupEntityProperties = {
    type: {
        name: "Composite",
        className: "SecurityGroupEntityProperties",
        modelProperties: Object.assign(Object.assign({}, EntityCommonProperties.type.modelProperties), { distinguishedName: {
                serializedName: "distinguishedName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, objectGuid: {
                serializedName: "objectGuid",
                readOnly: true,
                type: {
                    name: "Uuid"
                }
            }, sid: {
                serializedName: "sid",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const SubmissionMailEntityProperties = {
    type: {
        name: "Composite",
        className: "SubmissionMailEntityProperties",
        modelProperties: Object.assign(Object.assign({}, EntityCommonProperties.type.modelProperties), { networkMessageId: {
                serializedName: "networkMessageId",
                readOnly: true,
                type: {
                    name: "Uuid"
                }
            }, submissionId: {
                serializedName: "submissionId",
                readOnly: true,
                type: {
                    name: "Uuid"
                }
            }, submitter: {
                serializedName: "submitter",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, submissionDate: {
                serializedName: "submissionDate",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, timestamp: {
                serializedName: "timestamp",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, recipient: {
                serializedName: "recipient",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, sender: {
                serializedName: "sender",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, senderIp: {
                serializedName: "senderIp",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, subject: {
                serializedName: "subject",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, reportType: {
                serializedName: "reportType",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const UrlEntityProperties = {
    type: {
        name: "Composite",
        className: "UrlEntityProperties",
        modelProperties: Object.assign(Object.assign({}, EntityCommonProperties.type.modelProperties), { url: {
                serializedName: "url",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const NicEntityProperties = {
    type: {
        name: "Composite",
        className: "NicEntityProperties",
        modelProperties: Object.assign(Object.assign({}, EntityCommonProperties.type.modelProperties), { macAddress: {
                serializedName: "macAddress",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, ipAddressEntityId: {
                serializedName: "ipAddressEntityId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, vlans: {
                serializedName: "vlans",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            } })
    }
};
const AADCheckRequirements = {
    serializedName: "AzureActiveDirectory",
    type: {
        name: "Composite",
        className: "AADCheckRequirements",
        uberParent: "DataConnectorsCheckRequirements",
        polymorphicDiscriminator: DataConnectorsCheckRequirements.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DataConnectorsCheckRequirements.type.modelProperties), { tenantId: {
                serializedName: "properties.tenantId",
                type: {
                    name: "String"
                }
            } })
    }
};
const AatpCheckRequirements = {
    serializedName: "AzureAdvancedThreatProtection",
    type: {
        name: "Composite",
        className: "AatpCheckRequirements",
        uberParent: "DataConnectorsCheckRequirements",
        polymorphicDiscriminator: DataConnectorsCheckRequirements.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DataConnectorsCheckRequirements.type.modelProperties), { tenantId: {
                serializedName: "properties.tenantId",
                type: {
                    name: "String"
                }
            } })
    }
};
const ASCCheckRequirements = {
    serializedName: "AzureSecurityCenter",
    type: {
        name: "Composite",
        className: "ASCCheckRequirements",
        uberParent: "DataConnectorsCheckRequirements",
        polymorphicDiscriminator: DataConnectorsCheckRequirements.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DataConnectorsCheckRequirements.type.modelProperties), { subscriptionId: {
                serializedName: "properties.subscriptionId",
                type: {
                    name: "String"
                }
            } })
    }
};
const AwsCloudTrailCheckRequirements = {
    serializedName: "AmazonWebServicesCloudTrail",
    type: {
        name: "Composite",
        className: "AwsCloudTrailCheckRequirements",
        uberParent: "DataConnectorsCheckRequirements",
        polymorphicDiscriminator: DataConnectorsCheckRequirements.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, DataConnectorsCheckRequirements.type.modelProperties)
    }
};
const AwsS3CheckRequirements = {
    serializedName: "AmazonWebServicesS3",
    type: {
        name: "Composite",
        className: "AwsS3CheckRequirements",
        uberParent: "DataConnectorsCheckRequirements",
        polymorphicDiscriminator: DataConnectorsCheckRequirements.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, DataConnectorsCheckRequirements.type.modelProperties)
    }
};
const Dynamics365CheckRequirements = {
    serializedName: "Dynamics365",
    type: {
        name: "Composite",
        className: "Dynamics365CheckRequirements",
        uberParent: "DataConnectorsCheckRequirements",
        polymorphicDiscriminator: DataConnectorsCheckRequirements.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DataConnectorsCheckRequirements.type.modelProperties), { tenantId: {
                serializedName: "properties.tenantId",
                type: {
                    name: "String"
                }
            } })
    }
};
const McasCheckRequirements = {
    serializedName: "MicrosoftCloudAppSecurity",
    type: {
        name: "Composite",
        className: "McasCheckRequirements",
        uberParent: "DataConnectorsCheckRequirements",
        polymorphicDiscriminator: DataConnectorsCheckRequirements.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DataConnectorsCheckRequirements.type.modelProperties), { tenantId: {
                serializedName: "properties.tenantId",
                type: {
                    name: "String"
                }
            } })
    }
};
const MdatpCheckRequirements = {
    serializedName: "MicrosoftDefenderAdvancedThreatProtection",
    type: {
        name: "Composite",
        className: "MdatpCheckRequirements",
        uberParent: "DataConnectorsCheckRequirements",
        polymorphicDiscriminator: DataConnectorsCheckRequirements.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DataConnectorsCheckRequirements.type.modelProperties), { tenantId: {
                serializedName: "properties.tenantId",
                type: {
                    name: "String"
                }
            } })
    }
};
const MstiCheckRequirements = {
    serializedName: "MicrosoftThreatIntelligence",
    type: {
        name: "Composite",
        className: "MstiCheckRequirements",
        uberParent: "DataConnectorsCheckRequirements",
        polymorphicDiscriminator: DataConnectorsCheckRequirements.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DataConnectorsCheckRequirements.type.modelProperties), { tenantId: {
                serializedName: "properties.tenantId",
                type: {
                    name: "String"
                }
            } })
    }
};
const MtpCheckRequirements = {
    serializedName: "MicrosoftThreatProtection",
    type: {
        name: "Composite",
        className: "MtpCheckRequirements",
        uberParent: "DataConnectorsCheckRequirements",
        polymorphicDiscriminator: DataConnectorsCheckRequirements.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DataConnectorsCheckRequirements.type.modelProperties), { tenantId: {
                serializedName: "properties.tenantId",
                type: {
                    name: "String"
                }
            } })
    }
};
const OfficeATPCheckRequirements = {
    serializedName: "OfficeATP",
    type: {
        name: "Composite",
        className: "OfficeATPCheckRequirements",
        uberParent: "DataConnectorsCheckRequirements",
        polymorphicDiscriminator: DataConnectorsCheckRequirements.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DataConnectorsCheckRequirements.type.modelProperties), { tenantId: {
                serializedName: "properties.tenantId",
                type: {
                    name: "String"
                }
            } })
    }
};
const OfficeIRMCheckRequirements = {
    serializedName: "OfficeIRM",
    type: {
        name: "Composite",
        className: "OfficeIRMCheckRequirements",
        uberParent: "DataConnectorsCheckRequirements",
        polymorphicDiscriminator: DataConnectorsCheckRequirements.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DataConnectorsCheckRequirements.type.modelProperties), { tenantId: {
                serializedName: "properties.tenantId",
                type: {
                    name: "String"
                }
            } })
    }
};
const Office365ProjectCheckRequirements = {
    serializedName: "Office365Project",
    type: {
        name: "Composite",
        className: "Office365ProjectCheckRequirements",
        uberParent: "DataConnectorsCheckRequirements",
        polymorphicDiscriminator: DataConnectorsCheckRequirements.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DataConnectorsCheckRequirements.type.modelProperties), { tenantId: {
                serializedName: "properties.tenantId",
                type: {
                    name: "String"
                }
            } })
    }
};
const OfficePowerBICheckRequirements = {
    serializedName: "OfficePowerBI",
    type: {
        name: "Composite",
        className: "OfficePowerBICheckRequirements",
        uberParent: "DataConnectorsCheckRequirements",
        polymorphicDiscriminator: DataConnectorsCheckRequirements.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DataConnectorsCheckRequirements.type.modelProperties), { tenantId: {
                serializedName: "properties.tenantId",
                type: {
                    name: "String"
                }
            } })
    }
};
const TICheckRequirements = {
    serializedName: "ThreatIntelligence",
    type: {
        name: "Composite",
        className: "TICheckRequirements",
        uberParent: "DataConnectorsCheckRequirements",
        polymorphicDiscriminator: DataConnectorsCheckRequirements.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DataConnectorsCheckRequirements.type.modelProperties), { tenantId: {
                serializedName: "properties.tenantId",
                type: {
                    name: "String"
                }
            } })
    }
};
const TiTaxiiCheckRequirements = {
    serializedName: "ThreatIntelligenceTaxii",
    type: {
        name: "Composite",
        className: "TiTaxiiCheckRequirements",
        uberParent: "DataConnectorsCheckRequirements",
        polymorphicDiscriminator: DataConnectorsCheckRequirements.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DataConnectorsCheckRequirements.type.modelProperties), { tenantId: {
                serializedName: "properties.tenantId",
                type: {
                    name: "String"
                }
            } })
    }
};
const IoTCheckRequirements = {
    serializedName: "IOT",
    type: {
        name: "Composite",
        className: "IoTCheckRequirements",
        uberParent: "DataConnectorsCheckRequirements",
        polymorphicDiscriminator: DataConnectorsCheckRequirements.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DataConnectorsCheckRequirements.type.modelProperties), { subscriptionId: {
                serializedName: "properties.subscriptionId",
                type: {
                    name: "String"
                }
            } })
    }
};
const AlertRuleTemplateWithMitreProperties = {
    type: {
        name: "Composite",
        className: "AlertRuleTemplateWithMitreProperties",
        modelProperties: Object.assign(Object.assign({}, AlertRuleTemplatePropertiesBase.type.modelProperties), { tactics: {
                serializedName: "tactics",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, techniques: {
                serializedName: "techniques",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            } })
    }
};
const MicrosoftSecurityIncidentCreationAlertRuleTemplateProperties = {
    type: {
        name: "Composite",
        className: "MicrosoftSecurityIncidentCreationAlertRuleTemplateProperties",
        modelProperties: Object.assign(Object.assign({}, AlertRuleTemplatePropertiesBase.type.modelProperties), { displayNamesFilter: {
                serializedName: "displayNamesFilter",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, displayNamesExcludeFilter: {
                serializedName: "displayNamesExcludeFilter",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, productFilter: {
                serializedName: "productFilter",
                type: {
                    name: "String"
                }
            }, severitiesFilter: {
                serializedName: "severitiesFilter",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            } })
    }
};
const NrtAlertRuleTemplateProperties = {
    type: {
        name: "Composite",
        className: "NrtAlertRuleTemplateProperties",
        modelProperties: Object.assign(Object.assign({}, AlertRuleTemplateWithMitreProperties.type.modelProperties), QueryBasedAlertRuleTemplateProperties.type.modelProperties)
    }
};
const MicrosoftSecurityIncidentCreationAlertRuleProperties = {
    type: {
        name: "Composite",
        className: "MicrosoftSecurityIncidentCreationAlertRuleProperties",
        modelProperties: Object.assign(Object.assign({}, MicrosoftSecurityIncidentCreationAlertRuleCommonProperties.type
            .modelProperties), { alertRuleTemplateName: {
                serializedName: "alertRuleTemplateName",
                type: {
                    name: "String"
                }
            }, description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            }, displayName: {
                serializedName: "displayName",
                required: true,
                type: {
                    name: "String"
                }
            }, enabled: {
                serializedName: "enabled",
                required: true,
                type: {
                    name: "Boolean"
                }
            }, lastModifiedUtc: {
                serializedName: "lastModifiedUtc",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            } })
    }
};
const ScheduledAlertRuleProperties = {
    type: {
        name: "Composite",
        className: "ScheduledAlertRuleProperties",
        modelProperties: Object.assign(Object.assign({}, ScheduledAlertRuleCommonProperties.type.modelProperties), { alertRuleTemplateName: {
                serializedName: "alertRuleTemplateName",
                type: {
                    name: "String"
                }
            }, templateVersion: {
                serializedName: "templateVersion",
                type: {
                    name: "String"
                }
            }, description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            }, displayName: {
                serializedName: "displayName",
                required: true,
                type: {
                    name: "String"
                }
            }, enabled: {
                serializedName: "enabled",
                required: true,
                type: {
                    name: "Boolean"
                }
            }, lastModifiedUtc: {
                serializedName: "lastModifiedUtc",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, suppressionDuration: {
                serializedName: "suppressionDuration",
                required: true,
                type: {
                    name: "TimeSpan"
                }
            }, suppressionEnabled: {
                serializedName: "suppressionEnabled",
                required: true,
                type: {
                    name: "Boolean"
                }
            }, tactics: {
                serializedName: "tactics",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, techniques: {
                serializedName: "techniques",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, incidentConfiguration: {
                serializedName: "incidentConfiguration",
                type: {
                    name: "Composite",
                    className: "IncidentConfiguration"
                }
            } })
    }
};
const InsightQueryItemProperties = {
    type: {
        name: "Composite",
        className: "InsightQueryItemProperties",
        modelProperties: Object.assign(Object.assign({}, EntityQueryItemProperties.type.modelProperties), { displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            }, description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            }, baseQuery: {
                serializedName: "baseQuery",
                type: {
                    name: "String"
                }
            }, tableQuery: {
                serializedName: "tableQuery",
                type: {
                    name: "Composite",
                    className: "InsightQueryItemPropertiesTableQuery"
                }
            }, chartQuery: {
                serializedName: "chartQuery",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }, additionalQuery: {
                serializedName: "additionalQuery",
                type: {
                    name: "Composite",
                    className: "InsightQueryItemPropertiesAdditionalQuery"
                }
            }, defaultTimeRange: {
                serializedName: "defaultTimeRange",
                type: {
                    name: "Composite",
                    className: "InsightQueryItemPropertiesDefaultTimeRange"
                }
            }, referenceTimeRange: {
                serializedName: "referenceTimeRange",
                type: {
                    name: "Composite",
                    className: "InsightQueryItemPropertiesReferenceTimeRange"
                }
            } })
    }
};
const AADCheckRequirementsProperties = {
    type: {
        name: "Composite",
        className: "AADCheckRequirementsProperties",
        modelProperties: Object.assign({}, DataConnectorTenantId.type.modelProperties)
    }
};
const AatpCheckRequirementsProperties = {
    type: {
        name: "Composite",
        className: "AatpCheckRequirementsProperties",
        modelProperties: Object.assign({}, DataConnectorTenantId.type.modelProperties)
    }
};
const Dynamics365CheckRequirementsProperties = {
    type: {
        name: "Composite",
        className: "Dynamics365CheckRequirementsProperties",
        modelProperties: Object.assign({}, DataConnectorTenantId.type.modelProperties)
    }
};
const McasCheckRequirementsProperties = {
    type: {
        name: "Composite",
        className: "McasCheckRequirementsProperties",
        modelProperties: Object.assign({}, DataConnectorTenantId.type.modelProperties)
    }
};
const MdatpCheckRequirementsProperties = {
    type: {
        name: "Composite",
        className: "MdatpCheckRequirementsProperties",
        modelProperties: Object.assign({}, DataConnectorTenantId.type.modelProperties)
    }
};
const MstiCheckRequirementsProperties = {
    type: {
        name: "Composite",
        className: "MstiCheckRequirementsProperties",
        modelProperties: Object.assign({}, DataConnectorTenantId.type.modelProperties)
    }
};
const MTPCheckRequirementsProperties = {
    type: {
        name: "Composite",
        className: "MTPCheckRequirementsProperties",
        modelProperties: Object.assign({}, DataConnectorTenantId.type.modelProperties)
    }
};
const OfficeATPCheckRequirementsProperties = {
    type: {
        name: "Composite",
        className: "OfficeATPCheckRequirementsProperties",
        modelProperties: Object.assign({}, DataConnectorTenantId.type.modelProperties)
    }
};
const OfficeIRMCheckRequirementsProperties = {
    type: {
        name: "Composite",
        className: "OfficeIRMCheckRequirementsProperties",
        modelProperties: Object.assign({}, DataConnectorTenantId.type.modelProperties)
    }
};
const Office365ProjectCheckRequirementsProperties = {
    type: {
        name: "Composite",
        className: "Office365ProjectCheckRequirementsProperties",
        modelProperties: Object.assign({}, DataConnectorTenantId.type.modelProperties)
    }
};
const OfficePowerBICheckRequirementsProperties = {
    type: {
        name: "Composite",
        className: "OfficePowerBICheckRequirementsProperties",
        modelProperties: Object.assign({}, DataConnectorTenantId.type.modelProperties)
    }
};
const TICheckRequirementsProperties = {
    type: {
        name: "Composite",
        className: "TICheckRequirementsProperties",
        modelProperties: Object.assign({}, DataConnectorTenantId.type.modelProperties)
    }
};
const TiTaxiiCheckRequirementsProperties = {
    type: {
        name: "Composite",
        className: "TiTaxiiCheckRequirementsProperties",
        modelProperties: Object.assign({}, DataConnectorTenantId.type.modelProperties)
    }
};
const AADDataConnectorProperties = {
    type: {
        name: "Composite",
        className: "AADDataConnectorProperties",
        modelProperties: Object.assign(Object.assign({}, DataConnectorTenantId.type.modelProperties), DataConnectorWithAlertsProperties.type.modelProperties)
    }
};
const MstiDataConnectorProperties = {
    type: {
        name: "Composite",
        className: "MstiDataConnectorProperties",
        modelProperties: Object.assign(Object.assign({}, DataConnectorTenantId.type.modelProperties), { dataTypes: {
                serializedName: "dataTypes",
                type: {
                    name: "Composite",
                    className: "MstiDataConnectorDataTypes"
                }
            } })
    }
};
const MTPDataConnectorProperties = {
    type: {
        name: "Composite",
        className: "MTPDataConnectorProperties",
        modelProperties: Object.assign(Object.assign({}, DataConnectorTenantId.type.modelProperties), { dataTypes: {
                serializedName: "dataTypes",
                type: {
                    name: "Composite",
                    className: "MTPDataConnectorDataTypes"
                }
            } })
    }
};
const AatpDataConnectorProperties = {
    type: {
        name: "Composite",
        className: "AatpDataConnectorProperties",
        modelProperties: Object.assign(Object.assign({}, DataConnectorTenantId.type.modelProperties), DataConnectorWithAlertsProperties.type.modelProperties)
    }
};
const McasDataConnectorProperties = {
    type: {
        name: "Composite",
        className: "McasDataConnectorProperties",
        modelProperties: Object.assign(Object.assign({}, DataConnectorTenantId.type.modelProperties), { dataTypes: {
                serializedName: "dataTypes",
                type: {
                    name: "Composite",
                    className: "McasDataConnectorDataTypes"
                }
            } })
    }
};
const Dynamics365DataConnectorProperties = {
    type: {
        name: "Composite",
        className: "Dynamics365DataConnectorProperties",
        modelProperties: Object.assign(Object.assign({}, DataConnectorTenantId.type.modelProperties), { dataTypes: {
                serializedName: "dataTypes",
                type: {
                    name: "Composite",
                    className: "Dynamics365DataConnectorDataTypes"
                }
            } })
    }
};
const OfficeATPDataConnectorProperties = {
    type: {
        name: "Composite",
        className: "OfficeATPDataConnectorProperties",
        modelProperties: Object.assign(Object.assign({}, DataConnectorTenantId.type.modelProperties), DataConnectorWithAlertsProperties.type.modelProperties)
    }
};
const Office365ProjectDataConnectorProperties = {
    type: {
        name: "Composite",
        className: "Office365ProjectDataConnectorProperties",
        modelProperties: Object.assign(Object.assign({}, DataConnectorTenantId.type.modelProperties), { dataTypes: {
                serializedName: "dataTypes",
                type: {
                    name: "Composite",
                    className: "Office365ProjectConnectorDataTypes"
                }
            } })
    }
};
const OfficePowerBIDataConnectorProperties = {
    type: {
        name: "Composite",
        className: "OfficePowerBIDataConnectorProperties",
        modelProperties: Object.assign(Object.assign({}, DataConnectorTenantId.type.modelProperties), { dataTypes: {
                serializedName: "dataTypes",
                type: {
                    name: "Composite",
                    className: "OfficePowerBIConnectorDataTypes"
                }
            } })
    }
};
const OfficeIRMDataConnectorProperties = {
    type: {
        name: "Composite",
        className: "OfficeIRMDataConnectorProperties",
        modelProperties: Object.assign(Object.assign({}, DataConnectorTenantId.type.modelProperties), DataConnectorWithAlertsProperties.type.modelProperties)
    }
};
const MdatpDataConnectorProperties = {
    type: {
        name: "Composite",
        className: "MdatpDataConnectorProperties",
        modelProperties: Object.assign(Object.assign({}, DataConnectorTenantId.type.modelProperties), DataConnectorWithAlertsProperties.type.modelProperties)
    }
};
const OfficeDataConnectorProperties = {
    type: {
        name: "Composite",
        className: "OfficeDataConnectorProperties",
        modelProperties: Object.assign(Object.assign({}, DataConnectorTenantId.type.modelProperties), { dataTypes: {
                serializedName: "dataTypes",
                type: {
                    name: "Composite",
                    className: "OfficeDataConnectorDataTypes"
                }
            } })
    }
};
const TIDataConnectorProperties = {
    type: {
        name: "Composite",
        className: "TIDataConnectorProperties",
        modelProperties: Object.assign(Object.assign({}, DataConnectorTenantId.type.modelProperties), { tipLookbackPeriod: {
                serializedName: "tipLookbackPeriod",
                nullable: true,
                type: {
                    name: "DateTime"
                }
            }, dataTypes: {
                serializedName: "dataTypes",
                type: {
                    name: "Composite",
                    className: "TIDataConnectorDataTypes"
                }
            } })
    }
};
const TiTaxiiDataConnectorProperties = {
    type: {
        name: "Composite",
        className: "TiTaxiiDataConnectorProperties",
        modelProperties: Object.assign(Object.assign({}, DataConnectorTenantId.type.modelProperties), { workspaceId: {
                serializedName: "workspaceId",
                type: {
                    name: "String"
                }
            }, friendlyName: {
                serializedName: "friendlyName",
                type: {
                    name: "String"
                }
            }, taxiiServer: {
                serializedName: "taxiiServer",
                type: {
                    name: "String"
                }
            }, collectionId: {
                serializedName: "collectionId",
                type: {
                    name: "String"
                }
            }, userName: {
                serializedName: "userName",
                type: {
                    name: "String"
                }
            }, password: {
                serializedName: "password",
                type: {
                    name: "String"
                }
            }, taxiiLookbackPeriod: {
                serializedName: "taxiiLookbackPeriod",
                nullable: true,
                type: {
                    name: "DateTime"
                }
            }, pollingFrequency: {
                serializedName: "pollingFrequency",
                required: true,
                nullable: true,
                type: {
                    name: "String"
                }
            }, dataTypes: {
                serializedName: "dataTypes",
                type: {
                    name: "Composite",
                    className: "TiTaxiiDataConnectorDataTypes"
                }
            } })
    }
};
const ASCDataConnectorProperties = {
    type: {
        name: "Composite",
        className: "ASCDataConnectorProperties",
        modelProperties: Object.assign(Object.assign({}, DataConnectorWithAlertsProperties.type.modelProperties), { subscriptionId: {
                serializedName: "subscriptionId",
                type: {
                    name: "String"
                }
            } })
    }
};
const IoTDataConnectorProperties = {
    type: {
        name: "Composite",
        className: "IoTDataConnectorProperties",
        modelProperties: Object.assign(Object.assign({}, DataConnectorWithAlertsProperties.type.modelProperties), { subscriptionId: {
                serializedName: "subscriptionId",
                type: {
                    name: "String"
                }
            } })
    }
};
const McasDataConnectorDataTypes = {
    type: {
        name: "Composite",
        className: "McasDataConnectorDataTypes",
        modelProperties: Object.assign(Object.assign({}, AlertsDataTypeOfDataConnector.type.modelProperties), { discoveryLogs: {
                serializedName: "discoveryLogs",
                type: {
                    name: "Composite",
                    className: "DataConnectorDataTypeCommon"
                }
            } })
    }
};
const MstiDataConnectorDataTypesBingSafetyPhishingURL = {
    type: {
        name: "Composite",
        className: "MstiDataConnectorDataTypesBingSafetyPhishingURL",
        modelProperties: Object.assign(Object.assign({}, DataConnectorDataTypeCommon.type.modelProperties), { lookbackPeriod: {
                serializedName: "lookbackPeriod",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const MstiDataConnectorDataTypesMicrosoftEmergingThreatFeed = {
    type: {
        name: "Composite",
        className: "MstiDataConnectorDataTypesMicrosoftEmergingThreatFeed",
        modelProperties: Object.assign(Object.assign({}, DataConnectorDataTypeCommon.type.modelProperties), { lookbackPeriod: {
                serializedName: "lookbackPeriod",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const MTPDataConnectorDataTypesIncidents = {
    type: {
        name: "Composite",
        className: "MTPDataConnectorDataTypesIncidents",
        modelProperties: Object.assign({}, DataConnectorDataTypeCommon.type.modelProperties)
    }
};
const AwsCloudTrailDataConnectorDataTypesLogs = {
    type: {
        name: "Composite",
        className: "AwsCloudTrailDataConnectorDataTypesLogs",
        modelProperties: Object.assign({}, DataConnectorDataTypeCommon.type.modelProperties)
    }
};
const AwsS3DataConnectorDataTypesLogs = {
    type: {
        name: "Composite",
        className: "AwsS3DataConnectorDataTypesLogs",
        modelProperties: Object.assign({}, DataConnectorDataTypeCommon.type.modelProperties)
    }
};
const Dynamics365DataConnectorDataTypesDynamics365CdsActivities = {
    type: {
        name: "Composite",
        className: "Dynamics365DataConnectorDataTypesDynamics365CdsActivities",
        modelProperties: Object.assign({}, DataConnectorDataTypeCommon.type.modelProperties)
    }
};
const Office365ProjectConnectorDataTypesLogs = {
    type: {
        name: "Composite",
        className: "Office365ProjectConnectorDataTypesLogs",
        modelProperties: Object.assign({}, DataConnectorDataTypeCommon.type.modelProperties)
    }
};
const OfficePowerBIConnectorDataTypesLogs = {
    type: {
        name: "Composite",
        className: "OfficePowerBIConnectorDataTypesLogs",
        modelProperties: Object.assign({}, DataConnectorDataTypeCommon.type.modelProperties)
    }
};
const OfficeDataConnectorDataTypesExchange = {
    type: {
        name: "Composite",
        className: "OfficeDataConnectorDataTypesExchange",
        modelProperties: Object.assign({}, DataConnectorDataTypeCommon.type.modelProperties)
    }
};
const OfficeDataConnectorDataTypesSharePoint = {
    type: {
        name: "Composite",
        className: "OfficeDataConnectorDataTypesSharePoint",
        modelProperties: Object.assign({}, DataConnectorDataTypeCommon.type.modelProperties)
    }
};
const OfficeDataConnectorDataTypesTeams = {
    type: {
        name: "Composite",
        className: "OfficeDataConnectorDataTypesTeams",
        modelProperties: Object.assign({}, DataConnectorDataTypeCommon.type.modelProperties)
    }
};
const TIDataConnectorDataTypesIndicators = {
    type: {
        name: "Composite",
        className: "TIDataConnectorDataTypesIndicators",
        modelProperties: Object.assign({}, DataConnectorDataTypeCommon.type.modelProperties)
    }
};
const TiTaxiiDataConnectorDataTypesTaxiiClient = {
    type: {
        name: "Composite",
        className: "TiTaxiiDataConnectorDataTypesTaxiiClient",
        modelProperties: Object.assign({}, DataConnectorDataTypeCommon.type.modelProperties)
    }
};
const CodelessUiConnectorConfigPropertiesGraphQueriesItem = {
    type: {
        name: "Composite",
        className: "CodelessUiConnectorConfigPropertiesGraphQueriesItem",
        modelProperties: Object.assign({}, GraphQueries.type.modelProperties)
    }
};
const CodelessUiConnectorConfigPropertiesSampleQueriesItem = {
    type: {
        name: "Composite",
        className: "CodelessUiConnectorConfigPropertiesSampleQueriesItem",
        modelProperties: Object.assign({}, SampleQueries.type.modelProperties)
    }
};
const CodelessUiConnectorConfigPropertiesDataTypesItem = {
    type: {
        name: "Composite",
        className: "CodelessUiConnectorConfigPropertiesDataTypesItem",
        modelProperties: Object.assign({}, LastDataReceivedDataType.type.modelProperties)
    }
};
const CodelessUiConnectorConfigPropertiesConnectivityCriteriaItem = {
    type: {
        name: "Composite",
        className: "CodelessUiConnectorConfigPropertiesConnectivityCriteriaItem",
        modelProperties: Object.assign({}, ConnectivityCriteria.type.modelProperties)
    }
};
const PermissionsResourceProviderItem = {
    type: {
        name: "Composite",
        className: "PermissionsResourceProviderItem",
        modelProperties: Object.assign({}, ResourceProvider.type.modelProperties)
    }
};
const Customs = {
    type: {
        name: "Composite",
        className: "Customs",
        modelProperties: Object.assign({}, CustomsPermission.type.modelProperties)
    }
};
const CodelessUiConnectorConfigPropertiesInstructionStepsItem = {
    type: {
        name: "Composite",
        className: "CodelessUiConnectorConfigPropertiesInstructionStepsItem",
        modelProperties: Object.assign({}, InstructionSteps.type.modelProperties)
    }
};
const InstructionStepsInstructionsItem = {
    type: {
        name: "Composite",
        className: "InstructionStepsInstructionsItem",
        modelProperties: Object.assign({}, ConnectorInstructionModelBase.type.modelProperties)
    }
};
const AlertRule = {
    serializedName: "AlertRule",
    type: {
        name: "Composite",
        className: "AlertRule",
        uberParent: "ResourceWithEtag",
        polymorphicDiscriminator: {
            serializedName: "kind",
            clientName: "kind"
        },
        modelProperties: Object.assign(Object.assign({}, ResourceWithEtag.type.modelProperties), { kind: {
                serializedName: "kind",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const ActionResponse = {
    type: {
        name: "Composite",
        className: "ActionResponse",
        modelProperties: Object.assign(Object.assign({}, ResourceWithEtag.type.modelProperties), { logicAppResourceId: {
                serializedName: "properties.logicAppResourceId",
                type: {
                    name: "String"
                }
            }, workflowId: {
                serializedName: "properties.workflowId",
                type: {
                    name: "String"
                }
            } })
    }
};
const ActionRequest = {
    type: {
        name: "Composite",
        className: "ActionRequest",
        modelProperties: Object.assign(Object.assign({}, ResourceWithEtag.type.modelProperties), { logicAppResourceId: {
                serializedName: "properties.logicAppResourceId",
                type: {
                    name: "String"
                }
            }, triggerUri: {
                serializedName: "properties.triggerUri",
                type: {
                    name: "String"
                }
            } })
    }
};
const AutomationRule = {
    type: {
        name: "Composite",
        className: "AutomationRule",
        modelProperties: Object.assign(Object.assign({}, ResourceWithEtag.type.modelProperties), { displayName: {
                constraints: {
                    MaxLength: 500
                },
                serializedName: "properties.displayName",
                required: true,
                type: {
                    name: "String"
                }
            }, order: {
                constraints: {
                    InclusiveMaximum: 1000,
                    InclusiveMinimum: 1
                },
                serializedName: "properties.order",
                required: true,
                type: {
                    name: "Number"
                }
            }, triggeringLogic: {
                serializedName: "properties.triggeringLogic",
                type: {
                    name: "Composite",
                    className: "AutomationRuleTriggeringLogic"
                }
            }, actions: {
                constraints: {
                    MaxItems: 20
                },
                serializedName: "properties.actions",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AutomationRuleAction"
                        }
                    }
                }
            }, lastModifiedTimeUtc: {
                serializedName: "properties.lastModifiedTimeUtc",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, createdTimeUtc: {
                serializedName: "properties.createdTimeUtc",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, lastModifiedBy: {
                serializedName: "properties.lastModifiedBy",
                type: {
                    name: "Composite",
                    className: "ClientInfo"
                }
            }, createdBy: {
                serializedName: "properties.createdBy",
                type: {
                    name: "Composite",
                    className: "ClientInfo"
                }
            } })
    }
};
const Bookmark = {
    type: {
        name: "Composite",
        className: "Bookmark",
        modelProperties: Object.assign(Object.assign({}, ResourceWithEtag.type.modelProperties), { created: {
                serializedName: "properties.created",
                type: {
                    name: "DateTime"
                }
            }, createdBy: {
                serializedName: "properties.createdBy",
                type: {
                    name: "Composite",
                    className: "UserInfo"
                }
            }, displayName: {
                serializedName: "properties.displayName",
                type: {
                    name: "String"
                }
            }, labels: {
                serializedName: "properties.labels",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, notes: {
                serializedName: "properties.notes",
                type: {
                    name: "String"
                }
            }, query: {
                serializedName: "properties.query",
                type: {
                    name: "String"
                }
            }, queryResult: {
                serializedName: "properties.queryResult",
                type: {
                    name: "String"
                }
            }, updated: {
                serializedName: "properties.updated",
                type: {
                    name: "DateTime"
                }
            }, updatedBy: {
                serializedName: "properties.updatedBy",
                type: {
                    name: "Composite",
                    className: "UserInfo"
                }
            }, eventTime: {
                serializedName: "properties.eventTime",
                type: {
                    name: "DateTime"
                }
            }, queryStartTime: {
                serializedName: "properties.queryStartTime",
                type: {
                    name: "DateTime"
                }
            }, queryEndTime: {
                serializedName: "properties.queryEndTime",
                type: {
                    name: "DateTime"
                }
            }, incidentInfo: {
                serializedName: "properties.incidentInfo",
                type: {
                    name: "Composite",
                    className: "IncidentInfo"
                }
            }, entityMappings: {
                serializedName: "properties.entityMappings",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "BookmarkEntityMappings"
                        }
                    }
                }
            }, tactics: {
                serializedName: "properties.tactics",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, techniques: {
                serializedName: "properties.techniques",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            } })
    }
};
const Relation = {
    type: {
        name: "Composite",
        className: "Relation",
        modelProperties: Object.assign(Object.assign({}, ResourceWithEtag.type.modelProperties), { relatedResourceId: {
                serializedName: "properties.relatedResourceId",
                type: {
                    name: "String"
                }
            }, relatedResourceName: {
                serializedName: "properties.relatedResourceName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, relatedResourceType: {
                serializedName: "properties.relatedResourceType",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, relatedResourceKind: {
                serializedName: "properties.relatedResourceKind",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const EntityQuery = {
    serializedName: "EntityQuery",
    type: {
        name: "Composite",
        className: "EntityQuery",
        uberParent: "ResourceWithEtag",
        polymorphicDiscriminator: {
            serializedName: "kind",
            clientName: "kind"
        },
        modelProperties: Object.assign(Object.assign({}, ResourceWithEtag.type.modelProperties), { kind: {
                serializedName: "kind",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const CustomEntityQuery = {
    serializedName: "CustomEntityQuery",
    type: {
        name: "Composite",
        className: "CustomEntityQuery",
        uberParent: "ResourceWithEtag",
        polymorphicDiscriminator: {
            serializedName: "kind",
            clientName: "kind"
        },
        modelProperties: Object.assign(Object.assign({}, ResourceWithEtag.type.modelProperties), { kind: {
                serializedName: "kind",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const Incident = {
    type: {
        name: "Composite",
        className: "Incident",
        modelProperties: Object.assign(Object.assign({}, ResourceWithEtag.type.modelProperties), { additionalData: {
                serializedName: "properties.additionalData",
                type: {
                    name: "Composite",
                    className: "IncidentAdditionalData"
                }
            }, classification: {
                serializedName: "properties.classification",
                type: {
                    name: "String"
                }
            }, classificationComment: {
                serializedName: "properties.classificationComment",
                type: {
                    name: "String"
                }
            }, classificationReason: {
                serializedName: "properties.classificationReason",
                type: {
                    name: "String"
                }
            }, createdTimeUtc: {
                serializedName: "properties.createdTimeUtc",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, description: {
                serializedName: "properties.description",
                type: {
                    name: "String"
                }
            }, firstActivityTimeUtc: {
                serializedName: "properties.firstActivityTimeUtc",
                type: {
                    name: "DateTime"
                }
            }, incidentUrl: {
                serializedName: "properties.incidentUrl",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, incidentNumber: {
                serializedName: "properties.incidentNumber",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, labels: {
                serializedName: "properties.labels",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "IncidentLabel"
                        }
                    }
                }
            }, providerName: {
                serializedName: "properties.providerName",
                type: {
                    name: "String"
                }
            }, providerIncidentId: {
                serializedName: "properties.providerIncidentId",
                type: {
                    name: "String"
                }
            }, lastActivityTimeUtc: {
                serializedName: "properties.lastActivityTimeUtc",
                type: {
                    name: "DateTime"
                }
            }, lastModifiedTimeUtc: {
                serializedName: "properties.lastModifiedTimeUtc",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, owner: {
                serializedName: "properties.owner",
                type: {
                    name: "Composite",
                    className: "IncidentOwnerInfo"
                }
            }, relatedAnalyticRuleIds: {
                serializedName: "properties.relatedAnalyticRuleIds",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, severity: {
                serializedName: "properties.severity",
                type: {
                    name: "String"
                }
            }, status: {
                serializedName: "properties.status",
                type: {
                    name: "String"
                }
            }, teamInformation: {
                serializedName: "properties.teamInformation",
                type: {
                    name: "Composite",
                    className: "TeamInformation"
                }
            }, title: {
                serializedName: "properties.title",
                type: {
                    name: "String"
                }
            } })
    }
};
const IncidentComment = {
    type: {
        name: "Composite",
        className: "IncidentComment",
        modelProperties: Object.assign(Object.assign({}, ResourceWithEtag.type.modelProperties), { createdTimeUtc: {
                serializedName: "properties.createdTimeUtc",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, lastModifiedTimeUtc: {
                serializedName: "properties.lastModifiedTimeUtc",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, message: {
                serializedName: "properties.message",
                type: {
                    name: "String"
                }
            }, author: {
                serializedName: "properties.author",
                type: {
                    name: "Composite",
                    className: "ClientInfo"
                }
            } })
    }
};
const MetadataModel = {
    type: {
        name: "Composite",
        className: "MetadataModel",
        modelProperties: Object.assign(Object.assign({}, ResourceWithEtag.type.modelProperties), { contentId: {
                serializedName: "properties.contentId",
                type: {
                    name: "String"
                }
            }, parentId: {
                serializedName: "properties.parentId",
                type: {
                    name: "String"
                }
            }, version: {
                serializedName: "properties.version",
                type: {
                    name: "String"
                }
            }, kind: {
                serializedName: "properties.kind",
                type: {
                    name: "String"
                }
            }, source: {
                serializedName: "properties.source",
                type: {
                    name: "Composite",
                    className: "MetadataSource"
                }
            }, author: {
                serializedName: "properties.author",
                type: {
                    name: "Composite",
                    className: "MetadataAuthor"
                }
            }, support: {
                serializedName: "properties.support",
                type: {
                    name: "Composite",
                    className: "MetadataSupport"
                }
            }, dependencies: {
                serializedName: "properties.dependencies",
                type: {
                    name: "Composite",
                    className: "MetadataDependencies"
                }
            }, categories: {
                serializedName: "properties.categories",
                type: {
                    name: "Composite",
                    className: "MetadataCategories"
                }
            }, providers: {
                serializedName: "properties.providers",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, firstPublishDate: {
                serializedName: "properties.firstPublishDate",
                type: {
                    name: "Date"
                }
            }, lastPublishDate: {
                serializedName: "properties.lastPublishDate",
                type: {
                    name: "Date"
                }
            }, customVersion: {
                serializedName: "properties.customVersion",
                type: {
                    name: "String"
                }
            }, contentSchemaVersion: {
                serializedName: "properties.contentSchemaVersion",
                type: {
                    name: "String"
                }
            }, icon: {
                serializedName: "properties.icon",
                type: {
                    name: "String"
                }
            }, threatAnalysisTactics: {
                serializedName: "properties.threatAnalysisTactics",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, threatAnalysisTechniques: {
                serializedName: "properties.threatAnalysisTechniques",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, previewImages: {
                serializedName: "properties.previewImages",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, previewImagesDark: {
                serializedName: "properties.previewImagesDark",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            } })
    }
};
const MetadataPatch = {
    type: {
        name: "Composite",
        className: "MetadataPatch",
        modelProperties: Object.assign(Object.assign({}, ResourceWithEtag.type.modelProperties), { contentId: {
                serializedName: "properties.contentId",
                type: {
                    name: "String"
                }
            }, parentId: {
                serializedName: "properties.parentId",
                type: {
                    name: "String"
                }
            }, version: {
                serializedName: "properties.version",
                type: {
                    name: "String"
                }
            }, kind: {
                serializedName: "properties.kind",
                type: {
                    name: "String"
                }
            }, source: {
                serializedName: "properties.source",
                type: {
                    name: "Composite",
                    className: "MetadataSource"
                }
            }, author: {
                serializedName: "properties.author",
                type: {
                    name: "Composite",
                    className: "MetadataAuthor"
                }
            }, support: {
                serializedName: "properties.support",
                type: {
                    name: "Composite",
                    className: "MetadataSupport"
                }
            }, dependencies: {
                serializedName: "properties.dependencies",
                type: {
                    name: "Composite",
                    className: "MetadataDependencies"
                }
            }, categories: {
                serializedName: "properties.categories",
                type: {
                    name: "Composite",
                    className: "MetadataCategories"
                }
            }, providers: {
                serializedName: "properties.providers",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, firstPublishDate: {
                serializedName: "properties.firstPublishDate",
                type: {
                    name: "Date"
                }
            }, lastPublishDate: {
                serializedName: "properties.lastPublishDate",
                type: {
                    name: "Date"
                }
            }, customVersion: {
                serializedName: "properties.customVersion",
                type: {
                    name: "String"
                }
            }, contentSchemaVersion: {
                serializedName: "properties.contentSchemaVersion",
                type: {
                    name: "String"
                }
            }, icon: {
                serializedName: "properties.icon",
                type: {
                    name: "String"
                }
            }, threatAnalysisTactics: {
                serializedName: "properties.threatAnalysisTactics",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, threatAnalysisTechniques: {
                serializedName: "properties.threatAnalysisTechniques",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, previewImages: {
                serializedName: "properties.previewImages",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, previewImagesDark: {
                serializedName: "properties.previewImagesDark",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            } })
    }
};
const SentinelOnboardingState = {
    type: {
        name: "Composite",
        className: "SentinelOnboardingState",
        modelProperties: Object.assign(Object.assign({}, ResourceWithEtag.type.modelProperties), { customerManagedKey: {
                serializedName: "properties.customerManagedKey",
                type: {
                    name: "Boolean"
                }
            } })
    }
};
const SecurityMLAnalyticsSetting = {
    serializedName: "SecurityMLAnalyticsSetting",
    type: {
        name: "Composite",
        className: "SecurityMLAnalyticsSetting",
        uberParent: "ResourceWithEtag",
        polymorphicDiscriminator: {
            serializedName: "kind",
            clientName: "kind"
        },
        modelProperties: Object.assign(Object.assign({}, ResourceWithEtag.type.modelProperties), { kind: {
                serializedName: "kind",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const Settings = {
    serializedName: "Settings",
    type: {
        name: "Composite",
        className: "Settings",
        uberParent: "ResourceWithEtag",
        polymorphicDiscriminator: {
            serializedName: "kind",
            clientName: "kind"
        },
        modelProperties: Object.assign(Object.assign({}, ResourceWithEtag.type.modelProperties), { kind: {
                serializedName: "kind",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const SourceControl = {
    type: {
        name: "Composite",
        className: "SourceControl",
        modelProperties: Object.assign(Object.assign({}, ResourceWithEtag.type.modelProperties), { idPropertiesId: {
                serializedName: "properties.id",
                type: {
                    name: "String"
                }
            }, version: {
                serializedName: "properties.version",
                type: {
                    name: "String"
                }
            }, displayName: {
                serializedName: "properties.displayName",
                type: {
                    name: "String"
                }
            }, description: {
                serializedName: "properties.description",
                type: {
                    name: "String"
                }
            }, repoType: {
                serializedName: "properties.repoType",
                type: {
                    name: "String"
                }
            }, contentTypes: {
                serializedName: "properties.contentTypes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, repository: {
                serializedName: "properties.repository",
                type: {
                    name: "Composite",
                    className: "Repository"
                }
            }, repositoryResourceInfo: {
                serializedName: "properties.repositoryResourceInfo",
                type: {
                    name: "Composite",
                    className: "RepositoryResourceInfo"
                }
            }, lastDeploymentInfo: {
                serializedName: "properties.lastDeploymentInfo",
                type: {
                    name: "Composite",
                    className: "DeploymentInfo"
                }
            } })
    }
};
const ThreatIntelligenceInformation = {
    serializedName: "ThreatIntelligenceInformation",
    type: {
        name: "Composite",
        className: "ThreatIntelligenceInformation",
        uberParent: "ResourceWithEtag",
        polymorphicDiscriminator: {
            serializedName: "kind",
            clientName: "kind"
        },
        modelProperties: Object.assign(Object.assign({}, ResourceWithEtag.type.modelProperties), { kind: {
                serializedName: "kind",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const Watchlist = {
    type: {
        name: "Composite",
        className: "Watchlist",
        modelProperties: Object.assign(Object.assign({}, ResourceWithEtag.type.modelProperties), { watchlistId: {
                serializedName: "properties.watchlistId",
                type: {
                    name: "String"
                }
            }, displayName: {
                serializedName: "properties.displayName",
                type: {
                    name: "String"
                }
            }, provider: {
                serializedName: "properties.provider",
                type: {
                    name: "String"
                }
            }, source: {
                serializedName: "properties.source",
                type: {
                    name: "String"
                }
            }, sourceType: {
                serializedName: "properties.sourceType",
                type: {
                    name: "String"
                }
            }, created: {
                serializedName: "properties.created",
                type: {
                    name: "DateTime"
                }
            }, updated: {
                serializedName: "properties.updated",
                type: {
                    name: "DateTime"
                }
            }, createdBy: {
                serializedName: "properties.createdBy",
                type: {
                    name: "Composite",
                    className: "UserInfo"
                }
            }, updatedBy: {
                serializedName: "properties.updatedBy",
                type: {
                    name: "Composite",
                    className: "UserInfo"
                }
            }, description: {
                serializedName: "properties.description",
                type: {
                    name: "String"
                }
            }, watchlistType: {
                serializedName: "properties.watchlistType",
                type: {
                    name: "String"
                }
            }, watchlistAlias: {
                serializedName: "properties.watchlistAlias",
                type: {
                    name: "String"
                }
            }, isDeleted: {
                serializedName: "properties.isDeleted",
                type: {
                    name: "Boolean"
                }
            }, labels: {
                serializedName: "properties.labels",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, defaultDuration: {
                serializedName: "properties.defaultDuration",
                type: {
                    name: "TimeSpan"
                }
            }, tenantId: {
                serializedName: "properties.tenantId",
                type: {
                    name: "String"
                }
            }, numberOfLinesToSkip: {
                serializedName: "properties.numberOfLinesToSkip",
                type: {
                    name: "Number"
                }
            }, rawContent: {
                serializedName: "properties.rawContent",
                type: {
                    name: "String"
                }
            }, itemsSearchKey: {
                serializedName: "properties.itemsSearchKey",
                type: {
                    name: "String"
                }
            }, contentType: {
                serializedName: "properties.contentType",
                type: {
                    name: "String"
                }
            }, uploadStatus: {
                serializedName: "properties.uploadStatus",
                type: {
                    name: "String"
                }
            } })
    }
};
const WatchlistItem = {
    type: {
        name: "Composite",
        className: "WatchlistItem",
        modelProperties: Object.assign(Object.assign({}, ResourceWithEtag.type.modelProperties), { watchlistItemType: {
                serializedName: "properties.watchlistItemType",
                type: {
                    name: "String"
                }
            }, watchlistItemId: {
                serializedName: "properties.watchlistItemId",
                type: {
                    name: "String"
                }
            }, tenantId: {
                serializedName: "properties.tenantId",
                type: {
                    name: "String"
                }
            }, isDeleted: {
                serializedName: "properties.isDeleted",
                type: {
                    name: "Boolean"
                }
            }, created: {
                serializedName: "properties.created",
                type: {
                    name: "DateTime"
                }
            }, updated: {
                serializedName: "properties.updated",
                type: {
                    name: "DateTime"
                }
            }, createdBy: {
                serializedName: "properties.createdBy",
                type: {
                    name: "Composite",
                    className: "UserInfo"
                }
            }, updatedBy: {
                serializedName: "properties.updatedBy",
                type: {
                    name: "Composite",
                    className: "UserInfo"
                }
            }, itemsKeyValue: {
                serializedName: "properties.itemsKeyValue",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }, entityMapping: {
                serializedName: "properties.entityMapping",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            } })
    }
};
const DataConnector = {
    serializedName: "DataConnector",
    type: {
        name: "Composite",
        className: "DataConnector",
        uberParent: "ResourceWithEtag",
        polymorphicDiscriminator: {
            serializedName: "kind",
            clientName: "kind"
        },
        modelProperties: Object.assign(Object.assign({}, ResourceWithEtag.type.modelProperties), { kind: {
                serializedName: "kind",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const MLBehaviorAnalyticsAlertRuleTemplate = {
    serializedName: "MLBehaviorAnalytics",
    type: {
        name: "Composite",
        className: "MLBehaviorAnalyticsAlertRuleTemplate",
        uberParent: "AlertRuleTemplate",
        polymorphicDiscriminator: AlertRuleTemplate.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AlertRuleTemplate.type.modelProperties), { alertRulesCreatedByTemplateCount: {
                serializedName: "properties.alertRulesCreatedByTemplateCount",
                type: {
                    name: "Number"
                }
            }, lastUpdatedDateUTC: {
                serializedName: "properties.lastUpdatedDateUTC",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, createdDateUTC: {
                serializedName: "properties.createdDateUTC",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, description: {
                serializedName: "properties.description",
                type: {
                    name: "String"
                }
            }, displayName: {
                serializedName: "properties.displayName",
                type: {
                    name: "String"
                }
            }, requiredDataConnectors: {
                serializedName: "properties.requiredDataConnectors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AlertRuleTemplateDataSource"
                        }
                    }
                }
            }, status: {
                serializedName: "properties.status",
                type: {
                    name: "String"
                }
            }, tactics: {
                serializedName: "properties.tactics",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, techniques: {
                serializedName: "properties.techniques",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, severity: {
                serializedName: "properties.severity",
                type: {
                    name: "String"
                }
            } })
    }
};
const FusionAlertRuleTemplate = {
    serializedName: "Fusion",
    type: {
        name: "Composite",
        className: "FusionAlertRuleTemplate",
        uberParent: "AlertRuleTemplate",
        polymorphicDiscriminator: AlertRuleTemplate.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AlertRuleTemplate.type.modelProperties), { alertRulesCreatedByTemplateCount: {
                serializedName: "properties.alertRulesCreatedByTemplateCount",
                type: {
                    name: "Number"
                }
            }, createdDateUTC: {
                serializedName: "properties.createdDateUTC",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, lastUpdatedDateUTC: {
                serializedName: "properties.lastUpdatedDateUTC",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, description: {
                serializedName: "properties.description",
                type: {
                    name: "String"
                }
            }, displayName: {
                serializedName: "properties.displayName",
                type: {
                    name: "String"
                }
            }, requiredDataConnectors: {
                serializedName: "properties.requiredDataConnectors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AlertRuleTemplateDataSource"
                        }
                    }
                }
            }, status: {
                serializedName: "properties.status",
                type: {
                    name: "String"
                }
            }, severity: {
                serializedName: "properties.severity",
                type: {
                    name: "String"
                }
            }, tactics: {
                serializedName: "properties.tactics",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, techniques: {
                serializedName: "properties.techniques",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, sourceSettings: {
                serializedName: "properties.sourceSettings",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "FusionTemplateSourceSetting"
                        }
                    }
                }
            } })
    }
};
const ThreatIntelligenceAlertRuleTemplate = {
    serializedName: "ThreatIntelligence",
    type: {
        name: "Composite",
        className: "ThreatIntelligenceAlertRuleTemplate",
        uberParent: "AlertRuleTemplate",
        polymorphicDiscriminator: AlertRuleTemplate.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AlertRuleTemplate.type.modelProperties), { alertRulesCreatedByTemplateCount: {
                serializedName: "properties.alertRulesCreatedByTemplateCount",
                type: {
                    name: "Number"
                }
            }, lastUpdatedDateUTC: {
                serializedName: "properties.lastUpdatedDateUTC",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, createdDateUTC: {
                serializedName: "properties.createdDateUTC",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, description: {
                serializedName: "properties.description",
                type: {
                    name: "String"
                }
            }, displayName: {
                serializedName: "properties.displayName",
                type: {
                    name: "String"
                }
            }, requiredDataConnectors: {
                serializedName: "properties.requiredDataConnectors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AlertRuleTemplateDataSource"
                        }
                    }
                }
            }, status: {
                serializedName: "properties.status",
                type: {
                    name: "String"
                }
            }, tactics: {
                serializedName: "properties.tactics",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, techniques: {
                serializedName: "properties.techniques",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, severity: {
                serializedName: "properties.severity",
                type: {
                    name: "String"
                }
            } })
    }
};
const MicrosoftSecurityIncidentCreationAlertRuleTemplate = {
    serializedName: "MicrosoftSecurityIncidentCreation",
    type: {
        name: "Composite",
        className: "MicrosoftSecurityIncidentCreationAlertRuleTemplate",
        uberParent: "AlertRuleTemplate",
        polymorphicDiscriminator: AlertRuleTemplate.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AlertRuleTemplate.type.modelProperties), { alertRulesCreatedByTemplateCount: {
                serializedName: "properties.alertRulesCreatedByTemplateCount",
                type: {
                    name: "Number"
                }
            }, lastUpdatedDateUTC: {
                serializedName: "properties.lastUpdatedDateUTC",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, createdDateUTC: {
                serializedName: "properties.createdDateUTC",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, description: {
                serializedName: "properties.description",
                type: {
                    name: "String"
                }
            }, displayName: {
                serializedName: "properties.displayName",
                type: {
                    name: "String"
                }
            }, requiredDataConnectors: {
                serializedName: "properties.requiredDataConnectors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AlertRuleTemplateDataSource"
                        }
                    }
                }
            }, status: {
                serializedName: "properties.status",
                type: {
                    name: "String"
                }
            }, displayNamesFilter: {
                serializedName: "properties.displayNamesFilter",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, displayNamesExcludeFilter: {
                serializedName: "properties.displayNamesExcludeFilter",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, productFilter: {
                serializedName: "properties.productFilter",
                type: {
                    name: "String"
                }
            }, severitiesFilter: {
                serializedName: "properties.severitiesFilter",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            } })
    }
};
const ScheduledAlertRuleTemplate = {
    serializedName: "Scheduled",
    type: {
        name: "Composite",
        className: "ScheduledAlertRuleTemplate",
        uberParent: "AlertRuleTemplate",
        polymorphicDiscriminator: AlertRuleTemplate.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AlertRuleTemplate.type.modelProperties), { alertRulesCreatedByTemplateCount: {
                serializedName: "properties.alertRulesCreatedByTemplateCount",
                type: {
                    name: "Number"
                }
            }, createdDateUTC: {
                serializedName: "properties.createdDateUTC",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, lastUpdatedDateUTC: {
                serializedName: "properties.lastUpdatedDateUTC",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, description: {
                serializedName: "properties.description",
                type: {
                    name: "String"
                }
            }, displayName: {
                serializedName: "properties.displayName",
                type: {
                    name: "String"
                }
            }, requiredDataConnectors: {
                serializedName: "properties.requiredDataConnectors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AlertRuleTemplateDataSource"
                        }
                    }
                }
            }, status: {
                serializedName: "properties.status",
                type: {
                    name: "String"
                }
            }, query: {
                serializedName: "properties.query",
                type: {
                    name: "String"
                }
            }, queryFrequency: {
                serializedName: "properties.queryFrequency",
                type: {
                    name: "TimeSpan"
                }
            }, queryPeriod: {
                serializedName: "properties.queryPeriod",
                type: {
                    name: "TimeSpan"
                }
            }, severity: {
                serializedName: "properties.severity",
                type: {
                    name: "String"
                }
            }, triggerOperator: {
                serializedName: "properties.triggerOperator",
                type: {
                    name: "Enum",
                    allowedValues: ["GreaterThan", "LessThan", "Equal", "NotEqual"]
                }
            }, triggerThreshold: {
                serializedName: "properties.triggerThreshold",
                type: {
                    name: "Number"
                }
            }, tactics: {
                serializedName: "properties.tactics",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, techniques: {
                serializedName: "properties.techniques",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, version: {
                serializedName: "properties.version",
                type: {
                    name: "String"
                }
            }, eventGroupingSettings: {
                serializedName: "properties.eventGroupingSettings",
                type: {
                    name: "Composite",
                    className: "EventGroupingSettings"
                }
            }, customDetails: {
                serializedName: "properties.customDetails",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }, entityMappings: {
                serializedName: "properties.entityMappings",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EntityMapping"
                        }
                    }
                }
            }, alertDetailsOverride: {
                serializedName: "properties.alertDetailsOverride",
                type: {
                    name: "Composite",
                    className: "AlertDetailsOverride"
                }
            } })
    }
};
const NrtAlertRuleTemplate = {
    serializedName: "NRT",
    type: {
        name: "Composite",
        className: "NrtAlertRuleTemplate",
        uberParent: "AlertRuleTemplate",
        polymorphicDiscriminator: AlertRuleTemplate.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AlertRuleTemplate.type.modelProperties), { alertRulesCreatedByTemplateCount: {
                serializedName: "properties.alertRulesCreatedByTemplateCount",
                type: {
                    name: "Number"
                }
            }, lastUpdatedDateUTC: {
                serializedName: "properties.lastUpdatedDateUTC",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, createdDateUTC: {
                serializedName: "properties.createdDateUTC",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, description: {
                serializedName: "properties.description",
                type: {
                    name: "String"
                }
            }, displayName: {
                serializedName: "properties.displayName",
                type: {
                    name: "String"
                }
            }, requiredDataConnectors: {
                serializedName: "properties.requiredDataConnectors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AlertRuleTemplateDataSource"
                        }
                    }
                }
            }, status: {
                serializedName: "properties.status",
                type: {
                    name: "String"
                }
            }, tactics: {
                serializedName: "properties.tactics",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, techniques: {
                serializedName: "properties.techniques",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, query: {
                serializedName: "properties.query",
                type: {
                    name: "String"
                }
            }, severity: {
                serializedName: "properties.severity",
                type: {
                    name: "String"
                }
            }, version: {
                serializedName: "properties.version",
                type: {
                    name: "String"
                }
            }, customDetails: {
                serializedName: "properties.customDetails",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }, entityMappings: {
                serializedName: "properties.entityMappings",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EntityMapping"
                        }
                    }
                }
            }, alertDetailsOverride: {
                serializedName: "properties.alertDetailsOverride",
                type: {
                    name: "Composite",
                    className: "AlertDetailsOverride"
                }
            }, eventGroupingSettings: {
                serializedName: "properties.eventGroupingSettings",
                type: {
                    name: "Composite",
                    className: "EventGroupingSettings"
                }
            } })
    }
};
const SecurityAlert = {
    serializedName: "SecurityAlert",
    type: {
        name: "Composite",
        className: "SecurityAlert",
        uberParent: "Entity",
        polymorphicDiscriminator: Entity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Entity.type.modelProperties), { additionalData: {
                serializedName: "properties.additionalData",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Dictionary", value: { type: { name: "any" } } }
                    }
                }
            }, friendlyName: {
                serializedName: "properties.friendlyName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, alertDisplayName: {
                serializedName: "properties.alertDisplayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, alertType: {
                serializedName: "properties.alertType",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, compromisedEntity: {
                serializedName: "properties.compromisedEntity",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, confidenceLevel: {
                serializedName: "properties.confidenceLevel",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, confidenceReasons: {
                serializedName: "properties.confidenceReasons",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SecurityAlertPropertiesConfidenceReasonsItem"
                        }
                    }
                }
            }, confidenceScore: {
                serializedName: "properties.confidenceScore",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, confidenceScoreStatus: {
                serializedName: "properties.confidenceScoreStatus",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, description: {
                serializedName: "properties.description",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, endTimeUtc: {
                serializedName: "properties.endTimeUtc",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, intent: {
                serializedName: "properties.intent",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, providerAlertId: {
                serializedName: "properties.providerAlertId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, processingEndTime: {
                serializedName: "properties.processingEndTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, productComponentName: {
                serializedName: "properties.productComponentName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, productName: {
                serializedName: "properties.productName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, productVersion: {
                serializedName: "properties.productVersion",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, remediationSteps: {
                serializedName: "properties.remediationSteps",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, severity: {
                serializedName: "properties.severity",
                type: {
                    name: "String"
                }
            }, startTimeUtc: {
                serializedName: "properties.startTimeUtc",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, status: {
                serializedName: "properties.status",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, systemAlertId: {
                serializedName: "properties.systemAlertId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, tactics: {
                serializedName: "properties.tactics",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, timeGenerated: {
                serializedName: "properties.timeGenerated",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, vendorName: {
                serializedName: "properties.vendorName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, alertLink: {
                serializedName: "properties.alertLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, resourceIdentifiers: {
                serializedName: "properties.resourceIdentifiers",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Dictionary",
                            value: { type: { name: "any" } }
                        }
                    }
                }
            } })
    }
};
const HuntingBookmark = {
    serializedName: "Bookmark",
    type: {
        name: "Composite",
        className: "HuntingBookmark",
        uberParent: "Entity",
        polymorphicDiscriminator: Entity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Entity.type.modelProperties), { additionalData: {
                serializedName: "properties.additionalData",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Dictionary", value: { type: { name: "any" } } }
                    }
                }
            }, friendlyName: {
                serializedName: "properties.friendlyName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, created: {
                serializedName: "properties.created",
                type: {
                    name: "DateTime"
                }
            }, createdBy: {
                serializedName: "properties.createdBy",
                type: {
                    name: "Composite",
                    className: "UserInfo"
                }
            }, displayName: {
                serializedName: "properties.displayName",
                type: {
                    name: "String"
                }
            }, eventTime: {
                serializedName: "properties.eventTime",
                type: {
                    name: "DateTime"
                }
            }, labels: {
                serializedName: "properties.labels",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, notes: {
                serializedName: "properties.notes",
                type: {
                    name: "String"
                }
            }, query: {
                serializedName: "properties.query",
                type: {
                    name: "String"
                }
            }, queryResult: {
                serializedName: "properties.queryResult",
                type: {
                    name: "String"
                }
            }, updated: {
                serializedName: "properties.updated",
                type: {
                    name: "DateTime"
                }
            }, updatedBy: {
                serializedName: "properties.updatedBy",
                type: {
                    name: "Composite",
                    className: "UserInfo"
                }
            }, incidentInfo: {
                serializedName: "properties.incidentInfo",
                type: {
                    name: "Composite",
                    className: "IncidentInfo"
                }
            } })
    }
};
const AccountEntity = {
    serializedName: "Account",
    type: {
        name: "Composite",
        className: "AccountEntity",
        uberParent: "Entity",
        polymorphicDiscriminator: Entity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Entity.type.modelProperties), { additionalData: {
                serializedName: "properties.additionalData",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Dictionary", value: { type: { name: "any" } } }
                    }
                }
            }, friendlyName: {
                serializedName: "properties.friendlyName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, aadTenantId: {
                serializedName: "properties.aadTenantId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, aadUserId: {
                serializedName: "properties.aadUserId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, accountName: {
                serializedName: "properties.accountName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, displayName: {
                serializedName: "properties.displayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, hostEntityId: {
                serializedName: "properties.hostEntityId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, isDomainJoined: {
                serializedName: "properties.isDomainJoined",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            }, ntDomain: {
                serializedName: "properties.ntDomain",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, objectGuid: {
                serializedName: "properties.objectGuid",
                readOnly: true,
                type: {
                    name: "Uuid"
                }
            }, puid: {
                serializedName: "properties.puid",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, sid: {
                serializedName: "properties.sid",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, upnSuffix: {
                serializedName: "properties.upnSuffix",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, dnsDomain: {
                serializedName: "properties.dnsDomain",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const AzureResourceEntity = {
    serializedName: "AzureResource",
    type: {
        name: "Composite",
        className: "AzureResourceEntity",
        uberParent: "Entity",
        polymorphicDiscriminator: Entity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Entity.type.modelProperties), { additionalData: {
                serializedName: "properties.additionalData",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Dictionary", value: { type: { name: "any" } } }
                    }
                }
            }, friendlyName: {
                serializedName: "properties.friendlyName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, resourceId: {
                serializedName: "properties.resourceId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, subscriptionId: {
                serializedName: "properties.subscriptionId",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const CloudApplicationEntity = {
    serializedName: "CloudApplication",
    type: {
        name: "Composite",
        className: "CloudApplicationEntity",
        uberParent: "Entity",
        polymorphicDiscriminator: Entity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Entity.type.modelProperties), { additionalData: {
                serializedName: "properties.additionalData",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Dictionary", value: { type: { name: "any" } } }
                    }
                }
            }, friendlyName: {
                serializedName: "properties.friendlyName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, appId: {
                serializedName: "properties.appId",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, appName: {
                serializedName: "properties.appName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, instanceName: {
                serializedName: "properties.instanceName",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const DnsEntity = {
    serializedName: "DnsResolution",
    type: {
        name: "Composite",
        className: "DnsEntity",
        uberParent: "Entity",
        polymorphicDiscriminator: Entity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Entity.type.modelProperties), { additionalData: {
                serializedName: "properties.additionalData",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Dictionary", value: { type: { name: "any" } } }
                    }
                }
            }, friendlyName: {
                serializedName: "properties.friendlyName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, dnsServerIpEntityId: {
                serializedName: "properties.dnsServerIpEntityId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, domainName: {
                serializedName: "properties.domainName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, hostIpAddressEntityId: {
                serializedName: "properties.hostIpAddressEntityId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, ipAddressEntityIds: {
                serializedName: "properties.ipAddressEntityIds",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            } })
    }
};
const FileEntity = {
    serializedName: "File",
    type: {
        name: "Composite",
        className: "FileEntity",
        uberParent: "Entity",
        polymorphicDiscriminator: Entity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Entity.type.modelProperties), { additionalData: {
                serializedName: "properties.additionalData",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Dictionary", value: { type: { name: "any" } } }
                    }
                }
            }, friendlyName: {
                serializedName: "properties.friendlyName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, directory: {
                serializedName: "properties.directory",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, fileHashEntityIds: {
                serializedName: "properties.fileHashEntityIds",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, fileName: {
                serializedName: "properties.fileName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, hostEntityId: {
                serializedName: "properties.hostEntityId",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const FileHashEntity = {
    serializedName: "FileHash",
    type: {
        name: "Composite",
        className: "FileHashEntity",
        uberParent: "Entity",
        polymorphicDiscriminator: Entity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Entity.type.modelProperties), { additionalData: {
                serializedName: "properties.additionalData",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Dictionary", value: { type: { name: "any" } } }
                    }
                }
            }, friendlyName: {
                serializedName: "properties.friendlyName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, algorithm: {
                serializedName: "properties.algorithm",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, hashValue: {
                serializedName: "properties.hashValue",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const HostEntity = {
    serializedName: "Host",
    type: {
        name: "Composite",
        className: "HostEntity",
        uberParent: "Entity",
        polymorphicDiscriminator: Entity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Entity.type.modelProperties), { additionalData: {
                serializedName: "properties.additionalData",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Dictionary", value: { type: { name: "any" } } }
                    }
                }
            }, friendlyName: {
                serializedName: "properties.friendlyName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, azureID: {
                serializedName: "properties.azureID",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, dnsDomain: {
                serializedName: "properties.dnsDomain",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, hostName: {
                serializedName: "properties.hostName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, isDomainJoined: {
                serializedName: "properties.isDomainJoined",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            }, netBiosName: {
                serializedName: "properties.netBiosName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, ntDomain: {
                serializedName: "properties.ntDomain",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, omsAgentID: {
                serializedName: "properties.omsAgentID",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, osFamily: {
                serializedName: "properties.osFamily",
                type: {
                    name: "Enum",
                    allowedValues: ["Linux", "Windows", "Android", "IOS", "Unknown"]
                }
            }, osVersion: {
                serializedName: "properties.osVersion",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const IoTDeviceEntity = {
    serializedName: "IoTDevice",
    type: {
        name: "Composite",
        className: "IoTDeviceEntity",
        uberParent: "Entity",
        polymorphicDiscriminator: Entity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Entity.type.modelProperties), { additionalData: {
                serializedName: "properties.additionalData",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Dictionary", value: { type: { name: "any" } } }
                    }
                }
            }, friendlyName: {
                serializedName: "properties.friendlyName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, deviceId: {
                serializedName: "properties.deviceId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, deviceName: {
                serializedName: "properties.deviceName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, source: {
                serializedName: "properties.source",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, iotSecurityAgentId: {
                serializedName: "properties.iotSecurityAgentId",
                readOnly: true,
                type: {
                    name: "Uuid"
                }
            }, deviceType: {
                serializedName: "properties.deviceType",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, vendor: {
                serializedName: "properties.vendor",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, edgeId: {
                serializedName: "properties.edgeId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, macAddress: {
                serializedName: "properties.macAddress",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, model: {
                serializedName: "properties.model",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, serialNumber: {
                serializedName: "properties.serialNumber",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, firmwareVersion: {
                serializedName: "properties.firmwareVersion",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, operatingSystem: {
                serializedName: "properties.operatingSystem",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, iotHubEntityId: {
                serializedName: "properties.iotHubEntityId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, hostEntityId: {
                serializedName: "properties.hostEntityId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, ipAddressEntityId: {
                serializedName: "properties.ipAddressEntityId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, threatIntelligence: {
                serializedName: "properties.threatIntelligence",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ThreatIntelligence"
                        }
                    }
                }
            }, protocols: {
                serializedName: "properties.protocols",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, owners: {
                serializedName: "properties.owners",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, nicEntityIds: {
                serializedName: "properties.nicEntityIds",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, site: {
                serializedName: "properties.site",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, zone: {
                serializedName: "properties.zone",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, sensor: {
                serializedName: "properties.sensor",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, deviceSubType: {
                serializedName: "properties.deviceSubType",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, importance: {
                serializedName: "properties.importance",
                type: {
                    name: "String"
                }
            }, purdueLayer: {
                serializedName: "properties.purdueLayer",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, isAuthorized: {
                serializedName: "properties.isAuthorized",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            }, isProgramming: {
                serializedName: "properties.isProgramming",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            }, isScanner: {
                serializedName: "properties.isScanner",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            } })
    }
};
const IpEntity = {
    serializedName: "Ip",
    type: {
        name: "Composite",
        className: "IpEntity",
        uberParent: "Entity",
        polymorphicDiscriminator: Entity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Entity.type.modelProperties), { additionalData: {
                serializedName: "properties.additionalData",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Dictionary", value: { type: { name: "any" } } }
                    }
                }
            }, friendlyName: {
                serializedName: "properties.friendlyName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, address: {
                serializedName: "properties.address",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, location: {
                serializedName: "properties.location",
                type: {
                    name: "Composite",
                    className: "GeoLocation"
                }
            }, threatIntelligence: {
                serializedName: "properties.threatIntelligence",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ThreatIntelligence"
                        }
                    }
                }
            } })
    }
};
const MailboxEntity = {
    serializedName: "Mailbox",
    type: {
        name: "Composite",
        className: "MailboxEntity",
        uberParent: "Entity",
        polymorphicDiscriminator: Entity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Entity.type.modelProperties), { additionalData: {
                serializedName: "properties.additionalData",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Dictionary", value: { type: { name: "any" } } }
                    }
                }
            }, friendlyName: {
                serializedName: "properties.friendlyName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, mailboxPrimaryAddress: {
                serializedName: "properties.mailboxPrimaryAddress",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, displayName: {
                serializedName: "properties.displayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, upn: {
                serializedName: "properties.upn",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, externalDirectoryObjectId: {
                serializedName: "properties.externalDirectoryObjectId",
                readOnly: true,
                type: {
                    name: "Uuid"
                }
            } })
    }
};
const MailClusterEntity = {
    serializedName: "MailCluster",
    type: {
        name: "Composite",
        className: "MailClusterEntity",
        uberParent: "Entity",
        polymorphicDiscriminator: Entity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Entity.type.modelProperties), { additionalData: {
                serializedName: "properties.additionalData",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Dictionary", value: { type: { name: "any" } } }
                    }
                }
            }, friendlyName: {
                serializedName: "properties.friendlyName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, networkMessageIds: {
                serializedName: "properties.networkMessageIds",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, countByDeliveryStatus: {
                serializedName: "properties.countByDeliveryStatus",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }, countByThreatType: {
                serializedName: "properties.countByThreatType",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }, countByProtectionStatus: {
                serializedName: "properties.countByProtectionStatus",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }, threats: {
                serializedName: "properties.threats",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, query: {
                serializedName: "properties.query",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, queryTime: {
                serializedName: "properties.queryTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, mailCount: {
                serializedName: "properties.mailCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, isVolumeAnomaly: {
                serializedName: "properties.isVolumeAnomaly",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            }, source: {
                serializedName: "properties.source",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, clusterSourceIdentifier: {
                serializedName: "properties.clusterSourceIdentifier",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, clusterSourceType: {
                serializedName: "properties.clusterSourceType",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, clusterQueryStartTime: {
                serializedName: "properties.clusterQueryStartTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, clusterQueryEndTime: {
                serializedName: "properties.clusterQueryEndTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, clusterGroup: {
                serializedName: "properties.clusterGroup",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const MailMessageEntity = {
    serializedName: "MailMessage",
    type: {
        name: "Composite",
        className: "MailMessageEntity",
        uberParent: "Entity",
        polymorphicDiscriminator: Entity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Entity.type.modelProperties), { additionalData: {
                serializedName: "properties.additionalData",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Dictionary", value: { type: { name: "any" } } }
                    }
                }
            }, friendlyName: {
                serializedName: "properties.friendlyName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, fileEntityIds: {
                serializedName: "properties.fileEntityIds",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, recipient: {
                serializedName: "properties.recipient",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, urls: {
                serializedName: "properties.urls",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, threats: {
                serializedName: "properties.threats",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, p1Sender: {
                serializedName: "properties.p1Sender",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, p1SenderDisplayName: {
                serializedName: "properties.p1SenderDisplayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, p1SenderDomain: {
                serializedName: "properties.p1SenderDomain",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, senderIP: {
                serializedName: "properties.senderIP",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, p2Sender: {
                serializedName: "properties.p2Sender",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, p2SenderDisplayName: {
                serializedName: "properties.p2SenderDisplayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, p2SenderDomain: {
                serializedName: "properties.p2SenderDomain",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, receiveDate: {
                serializedName: "properties.receiveDate",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, networkMessageId: {
                serializedName: "properties.networkMessageId",
                readOnly: true,
                type: {
                    name: "Uuid"
                }
            }, internetMessageId: {
                serializedName: "properties.internetMessageId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, subject: {
                serializedName: "properties.subject",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, language: {
                serializedName: "properties.language",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, threatDetectionMethods: {
                serializedName: "properties.threatDetectionMethods",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, bodyFingerprintBin1: {
                serializedName: "properties.bodyFingerprintBin1",
                type: {
                    name: "Number"
                }
            }, bodyFingerprintBin2: {
                serializedName: "properties.bodyFingerprintBin2",
                type: {
                    name: "Number"
                }
            }, bodyFingerprintBin3: {
                serializedName: "properties.bodyFingerprintBin3",
                type: {
                    name: "Number"
                }
            }, bodyFingerprintBin4: {
                serializedName: "properties.bodyFingerprintBin4",
                type: {
                    name: "Number"
                }
            }, bodyFingerprintBin5: {
                serializedName: "properties.bodyFingerprintBin5",
                type: {
                    name: "Number"
                }
            }, antispamDirection: {
                serializedName: "properties.antispamDirection",
                type: {
                    name: "String"
                }
            }, deliveryAction: {
                serializedName: "properties.deliveryAction",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Unknown",
                        "DeliveredAsSpam",
                        "Delivered",
                        "Blocked",
                        "Replaced"
                    ]
                }
            }, deliveryLocation: {
                serializedName: "properties.deliveryLocation",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Unknown",
                        "Inbox",
                        "JunkFolder",
                        "DeletedFolder",
                        "Quarantine",
                        "External",
                        "Failed",
                        "Dropped",
                        "Forwarded"
                    ]
                }
            } })
    }
};
const MalwareEntity = {
    serializedName: "Malware",
    type: {
        name: "Composite",
        className: "MalwareEntity",
        uberParent: "Entity",
        polymorphicDiscriminator: Entity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Entity.type.modelProperties), { additionalData: {
                serializedName: "properties.additionalData",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Dictionary", value: { type: { name: "any" } } }
                    }
                }
            }, friendlyName: {
                serializedName: "properties.friendlyName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, category: {
                serializedName: "properties.category",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, fileEntityIds: {
                serializedName: "properties.fileEntityIds",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, malwareName: {
                serializedName: "properties.malwareName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, processEntityIds: {
                serializedName: "properties.processEntityIds",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            } })
    }
};
const ProcessEntity = {
    serializedName: "Process",
    type: {
        name: "Composite",
        className: "ProcessEntity",
        uberParent: "Entity",
        polymorphicDiscriminator: Entity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Entity.type.modelProperties), { additionalData: {
                serializedName: "properties.additionalData",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Dictionary", value: { type: { name: "any" } } }
                    }
                }
            }, friendlyName: {
                serializedName: "properties.friendlyName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, accountEntityId: {
                serializedName: "properties.accountEntityId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, commandLine: {
                serializedName: "properties.commandLine",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, creationTimeUtc: {
                serializedName: "properties.creationTimeUtc",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, elevationToken: {
                serializedName: "properties.elevationToken",
                type: {
                    name: "Enum",
                    allowedValues: ["Default", "Full", "Limited"]
                }
            }, hostEntityId: {
                serializedName: "properties.hostEntityId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, hostLogonSessionEntityId: {
                serializedName: "properties.hostLogonSessionEntityId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, imageFileEntityId: {
                serializedName: "properties.imageFileEntityId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, parentProcessEntityId: {
                serializedName: "properties.parentProcessEntityId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, processId: {
                serializedName: "properties.processId",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const RegistryKeyEntity = {
    serializedName: "RegistryKey",
    type: {
        name: "Composite",
        className: "RegistryKeyEntity",
        uberParent: "Entity",
        polymorphicDiscriminator: Entity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Entity.type.modelProperties), { additionalData: {
                serializedName: "properties.additionalData",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Dictionary", value: { type: { name: "any" } } }
                    }
                }
            }, friendlyName: {
                serializedName: "properties.friendlyName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, hive: {
                serializedName: "properties.hive",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, key: {
                serializedName: "properties.key",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const RegistryValueEntity = {
    serializedName: "RegistryValue",
    type: {
        name: "Composite",
        className: "RegistryValueEntity",
        uberParent: "Entity",
        polymorphicDiscriminator: Entity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Entity.type.modelProperties), { additionalData: {
                serializedName: "properties.additionalData",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Dictionary", value: { type: { name: "any" } } }
                    }
                }
            }, friendlyName: {
                serializedName: "properties.friendlyName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, keyEntityId: {
                serializedName: "properties.keyEntityId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, valueData: {
                serializedName: "properties.valueData",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, valueName: {
                serializedName: "properties.valueName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, valueType: {
                serializedName: "properties.valueType",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const SecurityGroupEntity = {
    serializedName: "SecurityGroup",
    type: {
        name: "Composite",
        className: "SecurityGroupEntity",
        uberParent: "Entity",
        polymorphicDiscriminator: Entity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Entity.type.modelProperties), { additionalData: {
                serializedName: "properties.additionalData",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Dictionary", value: { type: { name: "any" } } }
                    }
                }
            }, friendlyName: {
                serializedName: "properties.friendlyName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, distinguishedName: {
                serializedName: "properties.distinguishedName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, objectGuid: {
                serializedName: "properties.objectGuid",
                readOnly: true,
                type: {
                    name: "Uuid"
                }
            }, sid: {
                serializedName: "properties.sid",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const SubmissionMailEntity = {
    serializedName: "SubmissionMail",
    type: {
        name: "Composite",
        className: "SubmissionMailEntity",
        uberParent: "Entity",
        polymorphicDiscriminator: Entity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Entity.type.modelProperties), { additionalData: {
                serializedName: "properties.additionalData",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Dictionary", value: { type: { name: "any" } } }
                    }
                }
            }, friendlyName: {
                serializedName: "properties.friendlyName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, networkMessageId: {
                serializedName: "properties.networkMessageId",
                readOnly: true,
                type: {
                    name: "Uuid"
                }
            }, submissionId: {
                serializedName: "properties.submissionId",
                readOnly: true,
                type: {
                    name: "Uuid"
                }
            }, submitter: {
                serializedName: "properties.submitter",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, submissionDate: {
                serializedName: "properties.submissionDate",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, timestamp: {
                serializedName: "properties.timestamp",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, recipient: {
                serializedName: "properties.recipient",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, sender: {
                serializedName: "properties.sender",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, senderIp: {
                serializedName: "properties.senderIp",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, subject: {
                serializedName: "properties.subject",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, reportType: {
                serializedName: "properties.reportType",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const UrlEntity = {
    serializedName: "Url",
    type: {
        name: "Composite",
        className: "UrlEntity",
        uberParent: "Entity",
        polymorphicDiscriminator: Entity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Entity.type.modelProperties), { additionalData: {
                serializedName: "properties.additionalData",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Dictionary", value: { type: { name: "any" } } }
                    }
                }
            }, friendlyName: {
                serializedName: "properties.friendlyName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, url: {
                serializedName: "properties.url",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const NicEntity = {
    serializedName: "Nic",
    type: {
        name: "Composite",
        className: "NicEntity",
        uberParent: "Entity",
        polymorphicDiscriminator: Entity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Entity.type.modelProperties), { additionalData: {
                serializedName: "properties.additionalData",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Dictionary", value: { type: { name: "any" } } }
                    }
                }
            }, friendlyName: {
                serializedName: "properties.friendlyName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, macAddress: {
                serializedName: "properties.macAddress",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, ipAddressEntityId: {
                serializedName: "properties.ipAddressEntityId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, vlans: {
                serializedName: "properties.vlans",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            } })
    }
};
const ActivityEntityQueryTemplate = {
    serializedName: "Activity",
    type: {
        name: "Composite",
        className: "ActivityEntityQueryTemplate",
        uberParent: "EntityQueryTemplate",
        polymorphicDiscriminator: EntityQueryTemplate.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, EntityQueryTemplate.type.modelProperties), { title: {
                serializedName: "properties.title",
                type: {
                    name: "String"
                }
            }, content: {
                serializedName: "properties.content",
                type: {
                    name: "String"
                }
            }, description: {
                serializedName: "properties.description",
                type: {
                    name: "String"
                }
            }, queryDefinitions: {
                serializedName: "properties.queryDefinitions",
                type: {
                    name: "Composite",
                    className: "ActivityEntityQueryTemplatePropertiesQueryDefinitions"
                }
            }, dataTypes: {
                serializedName: "properties.dataTypes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DataTypeDefinitions"
                        }
                    }
                }
            }, inputEntityType: {
                serializedName: "properties.inputEntityType",
                type: {
                    name: "String"
                }
            }, requiredInputFieldsSets: {
                serializedName: "properties.requiredInputFieldsSets",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Sequence",
                            element: {
                                type: {
                                    name: "String"
                                }
                            }
                        }
                    }
                }
            }, entitiesFilter: {
                serializedName: "properties.entitiesFilter",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Sequence", element: { type: { name: "String" } } }
                    }
                }
            } })
    }
};
const MLBehaviorAnalyticsAlertRuleTemplateProperties = {
    type: {
        name: "Composite",
        className: "MLBehaviorAnalyticsAlertRuleTemplateProperties",
        modelProperties: Object.assign(Object.assign({}, AlertRuleTemplateWithMitreProperties.type.modelProperties), { severity: {
                serializedName: "severity",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const ThreatIntelligenceAlertRuleTemplateProperties = {
    type: {
        name: "Composite",
        className: "ThreatIntelligenceAlertRuleTemplateProperties",
        modelProperties: Object.assign(Object.assign({}, AlertRuleTemplateWithMitreProperties.type.modelProperties), { severity: {
                serializedName: "severity",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const PermissionsCustomsItem = {
    type: {
        name: "Composite",
        className: "PermissionsCustomsItem",
        modelProperties: Object.assign({}, Customs.type.modelProperties)
    }
};
const MLBehaviorAnalyticsAlertRule = {
    serializedName: "MLBehaviorAnalytics",
    type: {
        name: "Composite",
        className: "MLBehaviorAnalyticsAlertRule",
        uberParent: "AlertRule",
        polymorphicDiscriminator: AlertRule.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AlertRule.type.modelProperties), { alertRuleTemplateName: {
                serializedName: "properties.alertRuleTemplateName",
                type: {
                    name: "String"
                }
            }, description: {
                serializedName: "properties.description",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, displayName: {
                serializedName: "properties.displayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, enabled: {
                serializedName: "properties.enabled",
                type: {
                    name: "Boolean"
                }
            }, lastModifiedUtc: {
                serializedName: "properties.lastModifiedUtc",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, severity: {
                serializedName: "properties.severity",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, tactics: {
                serializedName: "properties.tactics",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, techniques: {
                serializedName: "properties.techniques",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            } })
    }
};
const FusionAlertRule = {
    serializedName: "Fusion",
    type: {
        name: "Composite",
        className: "FusionAlertRule",
        uberParent: "AlertRule",
        polymorphicDiscriminator: AlertRule.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AlertRule.type.modelProperties), { alertRuleTemplateName: {
                serializedName: "properties.alertRuleTemplateName",
                type: {
                    name: "String"
                }
            }, description: {
                serializedName: "properties.description",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, displayName: {
                serializedName: "properties.displayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, enabled: {
                serializedName: "properties.enabled",
                type: {
                    name: "Boolean"
                }
            }, sourceSettings: {
                serializedName: "properties.sourceSettings",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "FusionSourceSettings"
                        }
                    }
                }
            }, scenarioExclusionPatterns: {
                serializedName: "properties.scenarioExclusionPatterns",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "FusionScenarioExclusionPattern"
                        }
                    }
                }
            }, lastModifiedUtc: {
                serializedName: "properties.lastModifiedUtc",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, severity: {
                serializedName: "properties.severity",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, tactics: {
                serializedName: "properties.tactics",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, techniques: {
                serializedName: "properties.techniques",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            } })
    }
};
const ThreatIntelligenceAlertRule = {
    serializedName: "ThreatIntelligence",
    type: {
        name: "Composite",
        className: "ThreatIntelligenceAlertRule",
        uberParent: "AlertRule",
        polymorphicDiscriminator: AlertRule.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AlertRule.type.modelProperties), { alertRuleTemplateName: {
                serializedName: "properties.alertRuleTemplateName",
                type: {
                    name: "String"
                }
            }, description: {
                serializedName: "properties.description",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, displayName: {
                serializedName: "properties.displayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, enabled: {
                serializedName: "properties.enabled",
                type: {
                    name: "Boolean"
                }
            }, lastModifiedUtc: {
                serializedName: "properties.lastModifiedUtc",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, severity: {
                serializedName: "properties.severity",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, tactics: {
                serializedName: "properties.tactics",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, techniques: {
                serializedName: "properties.techniques",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            } })
    }
};
const MicrosoftSecurityIncidentCreationAlertRule = {
    serializedName: "MicrosoftSecurityIncidentCreation",
    type: {
        name: "Composite",
        className: "MicrosoftSecurityIncidentCreationAlertRule",
        uberParent: "AlertRule",
        polymorphicDiscriminator: AlertRule.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AlertRule.type.modelProperties), { displayNamesFilter: {
                serializedName: "properties.displayNamesFilter",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, displayNamesExcludeFilter: {
                serializedName: "properties.displayNamesExcludeFilter",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, productFilter: {
                serializedName: "properties.productFilter",
                type: {
                    name: "String"
                }
            }, severitiesFilter: {
                serializedName: "properties.severitiesFilter",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, alertRuleTemplateName: {
                serializedName: "properties.alertRuleTemplateName",
                type: {
                    name: "String"
                }
            }, description: {
                serializedName: "properties.description",
                type: {
                    name: "String"
                }
            }, displayName: {
                serializedName: "properties.displayName",
                type: {
                    name: "String"
                }
            }, enabled: {
                serializedName: "properties.enabled",
                type: {
                    name: "Boolean"
                }
            }, lastModifiedUtc: {
                serializedName: "properties.lastModifiedUtc",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            } })
    }
};
const ScheduledAlertRule = {
    serializedName: "Scheduled",
    type: {
        name: "Composite",
        className: "ScheduledAlertRule",
        uberParent: "AlertRule",
        polymorphicDiscriminator: AlertRule.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AlertRule.type.modelProperties), { query: {
                serializedName: "properties.query",
                type: {
                    name: "String"
                }
            }, queryFrequency: {
                serializedName: "properties.queryFrequency",
                type: {
                    name: "TimeSpan"
                }
            }, queryPeriod: {
                serializedName: "properties.queryPeriod",
                type: {
                    name: "TimeSpan"
                }
            }, severity: {
                serializedName: "properties.severity",
                type: {
                    name: "String"
                }
            }, triggerOperator: {
                serializedName: "properties.triggerOperator",
                type: {
                    name: "Enum",
                    allowedValues: ["GreaterThan", "LessThan", "Equal", "NotEqual"]
                }
            }, triggerThreshold: {
                serializedName: "properties.triggerThreshold",
                type: {
                    name: "Number"
                }
            }, eventGroupingSettings: {
                serializedName: "properties.eventGroupingSettings",
                type: {
                    name: "Composite",
                    className: "EventGroupingSettings"
                }
            }, customDetails: {
                serializedName: "properties.customDetails",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }, entityMappings: {
                serializedName: "properties.entityMappings",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EntityMapping"
                        }
                    }
                }
            }, alertDetailsOverride: {
                serializedName: "properties.alertDetailsOverride",
                type: {
                    name: "Composite",
                    className: "AlertDetailsOverride"
                }
            }, alertRuleTemplateName: {
                serializedName: "properties.alertRuleTemplateName",
                type: {
                    name: "String"
                }
            }, templateVersion: {
                serializedName: "properties.templateVersion",
                type: {
                    name: "String"
                }
            }, description: {
                serializedName: "properties.description",
                type: {
                    name: "String"
                }
            }, displayName: {
                serializedName: "properties.displayName",
                type: {
                    name: "String"
                }
            }, enabled: {
                serializedName: "properties.enabled",
                type: {
                    name: "Boolean"
                }
            }, lastModifiedUtc: {
                serializedName: "properties.lastModifiedUtc",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, suppressionDuration: {
                serializedName: "properties.suppressionDuration",
                type: {
                    name: "TimeSpan"
                }
            }, suppressionEnabled: {
                serializedName: "properties.suppressionEnabled",
                type: {
                    name: "Boolean"
                }
            }, tactics: {
                serializedName: "properties.tactics",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, techniques: {
                serializedName: "properties.techniques",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, incidentConfiguration: {
                serializedName: "properties.incidentConfiguration",
                type: {
                    name: "Composite",
                    className: "IncidentConfiguration"
                }
            } })
    }
};
const NrtAlertRule = {
    serializedName: "NRT",
    type: {
        name: "Composite",
        className: "NrtAlertRule",
        uberParent: "AlertRule",
        polymorphicDiscriminator: AlertRule.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AlertRule.type.modelProperties), { alertRuleTemplateName: {
                serializedName: "properties.alertRuleTemplateName",
                type: {
                    name: "String"
                }
            }, templateVersion: {
                serializedName: "properties.templateVersion",
                type: {
                    name: "String"
                }
            }, description: {
                serializedName: "properties.description",
                type: {
                    name: "String"
                }
            }, query: {
                serializedName: "properties.query",
                type: {
                    name: "String"
                }
            }, tactics: {
                serializedName: "properties.tactics",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, techniques: {
                serializedName: "properties.techniques",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, displayName: {
                serializedName: "properties.displayName",
                type: {
                    name: "String"
                }
            }, enabled: {
                serializedName: "properties.enabled",
                type: {
                    name: "Boolean"
                }
            }, lastModifiedUtc: {
                serializedName: "properties.lastModifiedUtc",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, suppressionDuration: {
                serializedName: "properties.suppressionDuration",
                type: {
                    name: "TimeSpan"
                }
            }, suppressionEnabled: {
                serializedName: "properties.suppressionEnabled",
                type: {
                    name: "Boolean"
                }
            }, severity: {
                serializedName: "properties.severity",
                type: {
                    name: "String"
                }
            }, incidentConfiguration: {
                serializedName: "properties.incidentConfiguration",
                type: {
                    name: "Composite",
                    className: "IncidentConfiguration"
                }
            }, customDetails: {
                serializedName: "properties.customDetails",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }, entityMappings: {
                serializedName: "properties.entityMappings",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EntityMapping"
                        }
                    }
                }
            }, alertDetailsOverride: {
                serializedName: "properties.alertDetailsOverride",
                type: {
                    name: "Composite",
                    className: "AlertDetailsOverride"
                }
            }, eventGroupingSettings: {
                serializedName: "properties.eventGroupingSettings",
                type: {
                    name: "Composite",
                    className: "EventGroupingSettings"
                }
            } })
    }
};
const ExpansionEntityQuery = {
    serializedName: "Expansion",
    type: {
        name: "Composite",
        className: "ExpansionEntityQuery",
        uberParent: "EntityQuery",
        polymorphicDiscriminator: EntityQuery.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, EntityQuery.type.modelProperties), { dataSources: {
                serializedName: "properties.dataSources",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, displayName: {
                serializedName: "properties.displayName",
                type: {
                    name: "String"
                }
            }, inputEntityType: {
                serializedName: "properties.inputEntityType",
                type: {
                    name: "String"
                }
            }, inputFields: {
                serializedName: "properties.inputFields",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, outputEntityTypes: {
                serializedName: "properties.outputEntityTypes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, queryTemplate: {
                serializedName: "properties.queryTemplate",
                type: {
                    name: "String"
                }
            } })
    }
};
const ActivityEntityQuery = {
    serializedName: "Activity",
    type: {
        name: "Composite",
        className: "ActivityEntityQuery",
        uberParent: "EntityQuery",
        polymorphicDiscriminator: EntityQuery.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, EntityQuery.type.modelProperties), { title: {
                serializedName: "properties.title",
                type: {
                    name: "String"
                }
            }, content: {
                serializedName: "properties.content",
                type: {
                    name: "String"
                }
            }, description: {
                serializedName: "properties.description",
                type: {
                    name: "String"
                }
            }, queryDefinitions: {
                serializedName: "properties.queryDefinitions",
                type: {
                    name: "Composite",
                    className: "ActivityEntityQueriesPropertiesQueryDefinitions"
                }
            }, inputEntityType: {
                serializedName: "properties.inputEntityType",
                type: {
                    name: "String"
                }
            }, requiredInputFieldsSets: {
                serializedName: "properties.requiredInputFieldsSets",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Sequence",
                            element: {
                                type: {
                                    name: "String"
                                }
                            }
                        }
                    }
                }
            }, entitiesFilter: {
                serializedName: "properties.entitiesFilter",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Sequence", element: { type: { name: "String" } } }
                    }
                }
            }, templateName: {
                serializedName: "properties.templateName",
                type: {
                    name: "String"
                }
            }, enabled: {
                serializedName: "properties.enabled",
                type: {
                    name: "Boolean"
                }
            }, createdTimeUtc: {
                serializedName: "properties.createdTimeUtc",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, lastModifiedTimeUtc: {
                serializedName: "properties.lastModifiedTimeUtc",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            } })
    }
};
const ActivityCustomEntityQuery = {
    serializedName: "Activity",
    type: {
        name: "Composite",
        className: "ActivityCustomEntityQuery",
        uberParent: "CustomEntityQuery",
        polymorphicDiscriminator: CustomEntityQuery.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CustomEntityQuery.type.modelProperties), { title: {
                serializedName: "properties.title",
                type: {
                    name: "String"
                }
            }, content: {
                serializedName: "properties.content",
                type: {
                    name: "String"
                }
            }, description: {
                serializedName: "properties.description",
                type: {
                    name: "String"
                }
            }, queryDefinitions: {
                serializedName: "properties.queryDefinitions",
                type: {
                    name: "Composite",
                    className: "ActivityEntityQueriesPropertiesQueryDefinitions"
                }
            }, inputEntityType: {
                serializedName: "properties.inputEntityType",
                type: {
                    name: "String"
                }
            }, requiredInputFieldsSets: {
                serializedName: "properties.requiredInputFieldsSets",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Sequence",
                            element: {
                                type: {
                                    name: "String"
                                }
                            }
                        }
                    }
                }
            }, entitiesFilter: {
                serializedName: "properties.entitiesFilter",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Sequence", element: { type: { name: "String" } } }
                    }
                }
            }, templateName: {
                serializedName: "properties.templateName",
                type: {
                    name: "String"
                }
            }, enabled: {
                serializedName: "properties.enabled",
                type: {
                    name: "Boolean"
                }
            }, createdTimeUtc: {
                serializedName: "properties.createdTimeUtc",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, lastModifiedTimeUtc: {
                serializedName: "properties.lastModifiedTimeUtc",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            } })
    }
};
const AnomalySecurityMLAnalyticsSettings = {
    serializedName: "Anomaly",
    type: {
        name: "Composite",
        className: "AnomalySecurityMLAnalyticsSettings",
        uberParent: "SecurityMLAnalyticsSetting",
        polymorphicDiscriminator: SecurityMLAnalyticsSetting.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, SecurityMLAnalyticsSetting.type.modelProperties), { description: {
                serializedName: "properties.description",
                type: {
                    name: "String"
                }
            }, displayName: {
                serializedName: "properties.displayName",
                type: {
                    name: "String"
                }
            }, enabled: {
                serializedName: "properties.enabled",
                type: {
                    name: "Boolean"
                }
            }, lastModifiedUtc: {
                serializedName: "properties.lastModifiedUtc",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, requiredDataConnectors: {
                serializedName: "properties.requiredDataConnectors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SecurityMLAnalyticsSettingsDataSource"
                        }
                    }
                }
            }, tactics: {
                serializedName: "properties.tactics",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, techniques: {
                serializedName: "properties.techniques",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, anomalyVersion: {
                serializedName: "properties.anomalyVersion",
                type: {
                    name: "String"
                }
            }, customizableObservations: {
                serializedName: "properties.customizableObservations",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }, frequency: {
                serializedName: "properties.frequency",
                type: {
                    name: "TimeSpan"
                }
            }, settingsStatus: {
                serializedName: "properties.settingsStatus",
                type: {
                    name: "String"
                }
            }, isDefaultSettings: {
                serializedName: "properties.isDefaultSettings",
                type: {
                    name: "Boolean"
                }
            }, anomalySettingsVersion: {
                serializedName: "properties.anomalySettingsVersion",
                type: {
                    name: "Number"
                }
            }, settingsDefinitionId: {
                serializedName: "properties.settingsDefinitionId",
                type: {
                    name: "Uuid"
                }
            } })
    }
};
const Anomalies = {
    serializedName: "Anomalies",
    type: {
        name: "Composite",
        className: "Anomalies",
        uberParent: "Settings",
        polymorphicDiscriminator: Settings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Settings.type.modelProperties), { isEnabled: {
                serializedName: "properties.isEnabled",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            } })
    }
};
const EyesOn = {
    serializedName: "EyesOn",
    type: {
        name: "Composite",
        className: "EyesOn",
        uberParent: "Settings",
        polymorphicDiscriminator: Settings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Settings.type.modelProperties), { isEnabled: {
                serializedName: "properties.isEnabled",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            } })
    }
};
const EntityAnalytics = {
    serializedName: "EntityAnalytics",
    type: {
        name: "Composite",
        className: "EntityAnalytics",
        uberParent: "Settings",
        polymorphicDiscriminator: Settings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Settings.type.modelProperties), { entityProviders: {
                serializedName: "properties.entityProviders",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            } })
    }
};
const Ueba = {
    serializedName: "Ueba",
    type: {
        name: "Composite",
        className: "Ueba",
        uberParent: "Settings",
        polymorphicDiscriminator: Settings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Settings.type.modelProperties), { dataSources: {
                serializedName: "properties.dataSources",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            } })
    }
};
const ThreatIntelligenceIndicatorModel = {
    serializedName: "indicator",
    type: {
        name: "Composite",
        className: "ThreatIntelligenceIndicatorModel",
        uberParent: "ThreatIntelligenceInformation",
        polymorphicDiscriminator: ThreatIntelligenceInformation.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ThreatIntelligenceInformation.type.modelProperties), { additionalData: {
                serializedName: "properties.additionalData",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Dictionary", value: { type: { name: "any" } } }
                    }
                }
            }, friendlyName: {
                serializedName: "properties.friendlyName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, threatIntelligenceTags: {
                serializedName: "properties.threatIntelligenceTags",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, lastUpdatedTimeUtc: {
                serializedName: "properties.lastUpdatedTimeUtc",
                type: {
                    name: "String"
                }
            }, source: {
                serializedName: "properties.source",
                type: {
                    name: "String"
                }
            }, displayName: {
                serializedName: "properties.displayName",
                type: {
                    name: "String"
                }
            }, description: {
                serializedName: "properties.description",
                type: {
                    name: "String"
                }
            }, indicatorTypes: {
                serializedName: "properties.indicatorTypes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, pattern: {
                serializedName: "properties.pattern",
                type: {
                    name: "String"
                }
            }, patternType: {
                serializedName: "properties.patternType",
                type: {
                    name: "String"
                }
            }, patternVersion: {
                serializedName: "properties.patternVersion",
                type: {
                    name: "String"
                }
            }, killChainPhases: {
                serializedName: "properties.killChainPhases",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ThreatIntelligenceKillChainPhase"
                        }
                    }
                }
            }, parsedPattern: {
                serializedName: "properties.parsedPattern",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ThreatIntelligenceParsedPattern"
                        }
                    }
                }
            }, externalId: {
                serializedName: "properties.externalId",
                type: {
                    name: "String"
                }
            }, createdByRef: {
                serializedName: "properties.createdByRef",
                type: {
                    name: "String"
                }
            }, defanged: {
                serializedName: "properties.defanged",
                type: {
                    name: "Boolean"
                }
            }, externalLastUpdatedTimeUtc: {
                serializedName: "properties.externalLastUpdatedTimeUtc",
                type: {
                    name: "String"
                }
            }, externalReferences: {
                serializedName: "properties.externalReferences",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ThreatIntelligenceExternalReference"
                        }
                    }
                }
            }, granularMarkings: {
                serializedName: "properties.granularMarkings",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ThreatIntelligenceGranularMarkingModel"
                        }
                    }
                }
            }, labels: {
                serializedName: "properties.labels",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, revoked: {
                serializedName: "properties.revoked",
                type: {
                    name: "Boolean"
                }
            }, confidence: {
                serializedName: "properties.confidence",
                type: {
                    name: "Number"
                }
            }, objectMarkingRefs: {
                serializedName: "properties.objectMarkingRefs",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, language: {
                serializedName: "properties.language",
                type: {
                    name: "String"
                }
            }, threatTypes: {
                serializedName: "properties.threatTypes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, validFrom: {
                serializedName: "properties.validFrom",
                type: {
                    name: "String"
                }
            }, validUntil: {
                serializedName: "properties.validUntil",
                type: {
                    name: "String"
                }
            }, created: {
                serializedName: "properties.created",
                type: {
                    name: "String"
                }
            }, modified: {
                serializedName: "properties.modified",
                type: {
                    name: "String"
                }
            }, extensions: {
                serializedName: "properties.extensions",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            } })
    }
};
const AADDataConnector = {
    serializedName: "AzureActiveDirectory",
    type: {
        name: "Composite",
        className: "AADDataConnector",
        uberParent: "DataConnector",
        polymorphicDiscriminator: DataConnector.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DataConnector.type.modelProperties), { tenantId: {
                serializedName: "properties.tenantId",
                type: {
                    name: "String"
                }
            }, dataTypes: {
                serializedName: "properties.dataTypes",
                type: {
                    name: "Composite",
                    className: "AlertsDataTypeOfDataConnector"
                }
            } })
    }
};
const MstiDataConnector = {
    serializedName: "MicrosoftThreatIntelligence",
    type: {
        name: "Composite",
        className: "MstiDataConnector",
        uberParent: "DataConnector",
        polymorphicDiscriminator: DataConnector.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DataConnector.type.modelProperties), { tenantId: {
                serializedName: "properties.tenantId",
                type: {
                    name: "String"
                }
            }, dataTypes: {
                serializedName: "properties.dataTypes",
                type: {
                    name: "Composite",
                    className: "MstiDataConnectorDataTypes"
                }
            } })
    }
};
const MTPDataConnector = {
    serializedName: "MicrosoftThreatProtection",
    type: {
        name: "Composite",
        className: "MTPDataConnector",
        uberParent: "DataConnector",
        polymorphicDiscriminator: DataConnector.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DataConnector.type.modelProperties), { tenantId: {
                serializedName: "properties.tenantId",
                type: {
                    name: "String"
                }
            }, dataTypes: {
                serializedName: "properties.dataTypes",
                type: {
                    name: "Composite",
                    className: "MTPDataConnectorDataTypes"
                }
            } })
    }
};
const AatpDataConnector = {
    serializedName: "AzureAdvancedThreatProtection",
    type: {
        name: "Composite",
        className: "AatpDataConnector",
        uberParent: "DataConnector",
        polymorphicDiscriminator: DataConnector.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DataConnector.type.modelProperties), { tenantId: {
                serializedName: "properties.tenantId",
                type: {
                    name: "String"
                }
            }, dataTypes: {
                serializedName: "properties.dataTypes",
                type: {
                    name: "Composite",
                    className: "AlertsDataTypeOfDataConnector"
                }
            } })
    }
};
const ASCDataConnector = {
    serializedName: "AzureSecurityCenter",
    type: {
        name: "Composite",
        className: "ASCDataConnector",
        uberParent: "DataConnector",
        polymorphicDiscriminator: DataConnector.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DataConnector.type.modelProperties), { dataTypes: {
                serializedName: "properties.dataTypes",
                type: {
                    name: "Composite",
                    className: "AlertsDataTypeOfDataConnector"
                }
            }, subscriptionId: {
                serializedName: "properties.subscriptionId",
                type: {
                    name: "String"
                }
            } })
    }
};
const AwsCloudTrailDataConnector = {
    serializedName: "AmazonWebServicesCloudTrail",
    type: {
        name: "Composite",
        className: "AwsCloudTrailDataConnector",
        uberParent: "DataConnector",
        polymorphicDiscriminator: DataConnector.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DataConnector.type.modelProperties), { awsRoleArn: {
                serializedName: "properties.awsRoleArn",
                type: {
                    name: "String"
                }
            }, dataTypes: {
                serializedName: "properties.dataTypes",
                type: {
                    name: "Composite",
                    className: "AwsCloudTrailDataConnectorDataTypes"
                }
            } })
    }
};
const AwsS3DataConnector = {
    serializedName: "AmazonWebServicesS3",
    type: {
        name: "Composite",
        className: "AwsS3DataConnector",
        uberParent: "DataConnector",
        polymorphicDiscriminator: DataConnector.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DataConnector.type.modelProperties), { destinationTable: {
                serializedName: "properties.destinationTable",
                type: {
                    name: "String"
                }
            }, sqsUrls: {
                serializedName: "properties.sqsUrls",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, roleArn: {
                serializedName: "properties.roleArn",
                type: {
                    name: "String"
                }
            }, dataTypes: {
                serializedName: "properties.dataTypes",
                type: {
                    name: "Composite",
                    className: "AwsS3DataConnectorDataTypes"
                }
            } })
    }
};
const McasDataConnector = {
    serializedName: "MicrosoftCloudAppSecurity",
    type: {
        name: "Composite",
        className: "McasDataConnector",
        uberParent: "DataConnector",
        polymorphicDiscriminator: DataConnector.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DataConnector.type.modelProperties), { tenantId: {
                serializedName: "properties.tenantId",
                type: {
                    name: "String"
                }
            }, dataTypes: {
                serializedName: "properties.dataTypes",
                type: {
                    name: "Composite",
                    className: "McasDataConnectorDataTypes"
                }
            } })
    }
};
const Dynamics365DataConnector = {
    serializedName: "Dynamics365",
    type: {
        name: "Composite",
        className: "Dynamics365DataConnector",
        uberParent: "DataConnector",
        polymorphicDiscriminator: DataConnector.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DataConnector.type.modelProperties), { tenantId: {
                serializedName: "properties.tenantId",
                type: {
                    name: "String"
                }
            }, dataTypes: {
                serializedName: "properties.dataTypes",
                type: {
                    name: "Composite",
                    className: "Dynamics365DataConnectorDataTypes"
                }
            } })
    }
};
const OfficeATPDataConnector = {
    serializedName: "OfficeATP",
    type: {
        name: "Composite",
        className: "OfficeATPDataConnector",
        uberParent: "DataConnector",
        polymorphicDiscriminator: DataConnector.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DataConnector.type.modelProperties), { tenantId: {
                serializedName: "properties.tenantId",
                type: {
                    name: "String"
                }
            }, dataTypes: {
                serializedName: "properties.dataTypes",
                type: {
                    name: "Composite",
                    className: "AlertsDataTypeOfDataConnector"
                }
            } })
    }
};
const Office365ProjectDataConnector = {
    serializedName: "Office365Project",
    type: {
        name: "Composite",
        className: "Office365ProjectDataConnector",
        uberParent: "DataConnector",
        polymorphicDiscriminator: DataConnector.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DataConnector.type.modelProperties), { tenantId: {
                serializedName: "properties.tenantId",
                type: {
                    name: "String"
                }
            }, dataTypes: {
                serializedName: "properties.dataTypes",
                type: {
                    name: "Composite",
                    className: "Office365ProjectConnectorDataTypes"
                }
            } })
    }
};
const OfficePowerBIDataConnector = {
    serializedName: "OfficePowerBI",
    type: {
        name: "Composite",
        className: "OfficePowerBIDataConnector",
        uberParent: "DataConnector",
        polymorphicDiscriminator: DataConnector.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DataConnector.type.modelProperties), { tenantId: {
                serializedName: "properties.tenantId",
                type: {
                    name: "String"
                }
            }, dataTypes: {
                serializedName: "properties.dataTypes",
                type: {
                    name: "Composite",
                    className: "OfficePowerBIConnectorDataTypes"
                }
            } })
    }
};
const OfficeIRMDataConnector = {
    serializedName: "OfficeIRM",
    type: {
        name: "Composite",
        className: "OfficeIRMDataConnector",
        uberParent: "DataConnector",
        polymorphicDiscriminator: DataConnector.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DataConnector.type.modelProperties), { tenantId: {
                serializedName: "properties.tenantId",
                type: {
                    name: "String"
                }
            }, dataTypes: {
                serializedName: "properties.dataTypes",
                type: {
                    name: "Composite",
                    className: "AlertsDataTypeOfDataConnector"
                }
            } })
    }
};
const MdatpDataConnector = {
    serializedName: "MicrosoftDefenderAdvancedThreatProtection",
    type: {
        name: "Composite",
        className: "MdatpDataConnector",
        uberParent: "DataConnector",
        polymorphicDiscriminator: DataConnector.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DataConnector.type.modelProperties), { tenantId: {
                serializedName: "properties.tenantId",
                type: {
                    name: "String"
                }
            }, dataTypes: {
                serializedName: "properties.dataTypes",
                type: {
                    name: "Composite",
                    className: "AlertsDataTypeOfDataConnector"
                }
            } })
    }
};
const OfficeDataConnector = {
    serializedName: "Office365",
    type: {
        name: "Composite",
        className: "OfficeDataConnector",
        uberParent: "DataConnector",
        polymorphicDiscriminator: DataConnector.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DataConnector.type.modelProperties), { tenantId: {
                serializedName: "properties.tenantId",
                type: {
                    name: "String"
                }
            }, dataTypes: {
                serializedName: "properties.dataTypes",
                type: {
                    name: "Composite",
                    className: "OfficeDataConnectorDataTypes"
                }
            } })
    }
};
const TIDataConnector = {
    serializedName: "ThreatIntelligence",
    type: {
        name: "Composite",
        className: "TIDataConnector",
        uberParent: "DataConnector",
        polymorphicDiscriminator: DataConnector.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DataConnector.type.modelProperties), { tenantId: {
                serializedName: "properties.tenantId",
                type: {
                    name: "String"
                }
            }, tipLookbackPeriod: {
                serializedName: "properties.tipLookbackPeriod",
                nullable: true,
                type: {
                    name: "DateTime"
                }
            }, dataTypes: {
                serializedName: "properties.dataTypes",
                type: {
                    name: "Composite",
                    className: "TIDataConnectorDataTypes"
                }
            } })
    }
};
const TiTaxiiDataConnector = {
    serializedName: "ThreatIntelligenceTaxii",
    type: {
        name: "Composite",
        className: "TiTaxiiDataConnector",
        uberParent: "DataConnector",
        polymorphicDiscriminator: DataConnector.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DataConnector.type.modelProperties), { tenantId: {
                serializedName: "properties.tenantId",
                type: {
                    name: "String"
                }
            }, workspaceId: {
                serializedName: "properties.workspaceId",
                type: {
                    name: "String"
                }
            }, friendlyName: {
                serializedName: "properties.friendlyName",
                type: {
                    name: "String"
                }
            }, taxiiServer: {
                serializedName: "properties.taxiiServer",
                type: {
                    name: "String"
                }
            }, collectionId: {
                serializedName: "properties.collectionId",
                type: {
                    name: "String"
                }
            }, userName: {
                serializedName: "properties.userName",
                type: {
                    name: "String"
                }
            }, password: {
                serializedName: "properties.password",
                type: {
                    name: "String"
                }
            }, taxiiLookbackPeriod: {
                serializedName: "properties.taxiiLookbackPeriod",
                nullable: true,
                type: {
                    name: "DateTime"
                }
            }, pollingFrequency: {
                serializedName: "properties.pollingFrequency",
                nullable: true,
                type: {
                    name: "String"
                }
            }, dataTypes: {
                serializedName: "properties.dataTypes",
                type: {
                    name: "Composite",
                    className: "TiTaxiiDataConnectorDataTypes"
                }
            } })
    }
};
const IoTDataConnector = {
    serializedName: "IOT",
    type: {
        name: "Composite",
        className: "IoTDataConnector",
        uberParent: "DataConnector",
        polymorphicDiscriminator: DataConnector.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DataConnector.type.modelProperties), { dataTypes: {
                serializedName: "properties.dataTypes",
                type: {
                    name: "Composite",
                    className: "AlertsDataTypeOfDataConnector"
                }
            }, subscriptionId: {
                serializedName: "properties.subscriptionId",
                type: {
                    name: "String"
                }
            } })
    }
};
const CodelessUiDataConnector = {
    serializedName: "GenericUI",
    type: {
        name: "Composite",
        className: "CodelessUiDataConnector",
        uberParent: "DataConnector",
        polymorphicDiscriminator: DataConnector.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DataConnector.type.modelProperties), { connectorUiConfig: {
                serializedName: "properties.connectorUiConfig",
                type: {
                    name: "Composite",
                    className: "CodelessUiConnectorConfigProperties"
                }
            } })
    }
};
const CodelessApiPollingDataConnector = {
    serializedName: "APIPolling",
    type: {
        name: "Composite",
        className: "CodelessApiPollingDataConnector",
        uberParent: "DataConnector",
        polymorphicDiscriminator: DataConnector.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DataConnector.type.modelProperties), { connectorUiConfig: {
                serializedName: "properties.connectorUiConfig",
                type: {
                    name: "Composite",
                    className: "CodelessUiConnectorConfigProperties"
                }
            }, pollingConfig: {
                serializedName: "properties.pollingConfig",
                type: {
                    name: "Composite",
                    className: "CodelessConnectorPollingConfigProperties"
                }
            } })
    }
};
const WatchlistsDeleteHeaders = {
    type: {
        name: "Composite",
        className: "WatchlistsDeleteHeaders",
        modelProperties: {
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const WatchlistsCreateOrUpdateHeaders = {
    type: {
        name: "Composite",
        className: "WatchlistsCreateOrUpdateHeaders",
        modelProperties: {
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
let discriminators = {
    AutomationRuleCondition: AutomationRuleCondition,
    AutomationRuleAction: AutomationRuleAction,
    EntityTimelineItem: EntityTimelineItem,
    EntityQueryItem: EntityQueryItem,
    DataConnectorsCheckRequirements: DataConnectorsCheckRequirements,
    "Resource.AlertRuleTemplate": AlertRuleTemplate,
    "Resource.Entity": Entity,
    "Resource.EntityQueryTemplate": EntityQueryTemplate,
    "AutomationRuleCondition.Boolean": BooleanConditionProperties,
    "AutomationRuleCondition.PropertyArrayChanged": PropertyArrayChangedConditionProperties,
    "AutomationRuleCondition.PropertyArray": PropertyArrayConditionProperties,
    "AutomationRuleCondition.PropertyChanged": PropertyChangedConditionProperties,
    "AutomationRuleCondition.Property": PropertyConditionProperties,
    "AutomationRuleAction.ModifyProperties": AutomationRuleModifyPropertiesAction,
    "AutomationRuleAction.RunPlaybook": AutomationRuleRunPlaybookAction,
    "EntityTimelineItem.Activity": ActivityTimelineItem,
    "EntityTimelineItem.Bookmark": BookmarkTimelineItem,
    "EntityTimelineItem.Anomaly": AnomalyTimelineItem,
    "EntityTimelineItem.SecurityAlert": SecurityAlertTimelineItem,
    "EntityQueryItem.Insight": InsightQueryItem,
    "DataConnectorsCheckRequirements.AzureActiveDirectory": AADCheckRequirements,
    "DataConnectorsCheckRequirements.AzureAdvancedThreatProtection": AatpCheckRequirements,
    "DataConnectorsCheckRequirements.AzureSecurityCenter": ASCCheckRequirements,
    "DataConnectorsCheckRequirements.AmazonWebServicesCloudTrail": AwsCloudTrailCheckRequirements,
    "DataConnectorsCheckRequirements.AmazonWebServicesS3": AwsS3CheckRequirements,
    "DataConnectorsCheckRequirements.Dynamics365": Dynamics365CheckRequirements,
    "DataConnectorsCheckRequirements.MicrosoftCloudAppSecurity": McasCheckRequirements,
    "DataConnectorsCheckRequirements.MicrosoftDefenderAdvancedThreatProtection": MdatpCheckRequirements,
    "DataConnectorsCheckRequirements.MicrosoftThreatIntelligence": MstiCheckRequirements,
    "DataConnectorsCheckRequirements.MicrosoftThreatProtection": MtpCheckRequirements,
    "DataConnectorsCheckRequirements.OfficeATP": OfficeATPCheckRequirements,
    "DataConnectorsCheckRequirements.OfficeIRM": OfficeIRMCheckRequirements,
    "DataConnectorsCheckRequirements.Office365Project": Office365ProjectCheckRequirements,
    "DataConnectorsCheckRequirements.OfficePowerBI": OfficePowerBICheckRequirements,
    "DataConnectorsCheckRequirements.ThreatIntelligence": TICheckRequirements,
    "DataConnectorsCheckRequirements.ThreatIntelligenceTaxii": TiTaxiiCheckRequirements,
    "DataConnectorsCheckRequirements.IOT": IoTCheckRequirements,
    "ResourceWithEtag.AlertRule": AlertRule,
    "ResourceWithEtag.EntityQuery": EntityQuery,
    "ResourceWithEtag.CustomEntityQuery": CustomEntityQuery,
    "ResourceWithEtag.SecurityMLAnalyticsSetting": SecurityMLAnalyticsSetting,
    "ResourceWithEtag.Settings": Settings,
    "ResourceWithEtag.ThreatIntelligenceInformation": ThreatIntelligenceInformation,
    "ResourceWithEtag.DataConnector": DataConnector,
    "AlertRuleTemplate.MLBehaviorAnalytics": MLBehaviorAnalyticsAlertRuleTemplate,
    "AlertRuleTemplate.Fusion": FusionAlertRuleTemplate,
    "AlertRuleTemplate.ThreatIntelligence": ThreatIntelligenceAlertRuleTemplate,
    "AlertRuleTemplate.MicrosoftSecurityIncidentCreation": MicrosoftSecurityIncidentCreationAlertRuleTemplate,
    "AlertRuleTemplate.Scheduled": ScheduledAlertRuleTemplate,
    "AlertRuleTemplate.NRT": NrtAlertRuleTemplate,
    "Entity.SecurityAlert": SecurityAlert,
    "Entity.Bookmark": HuntingBookmark,
    "Entity.Account": AccountEntity,
    "Entity.AzureResource": AzureResourceEntity,
    "Entity.CloudApplication": CloudApplicationEntity,
    "Entity.DnsResolution": DnsEntity,
    "Entity.File": FileEntity,
    "Entity.FileHash": FileHashEntity,
    "Entity.Host": HostEntity,
    "Entity.IoTDevice": IoTDeviceEntity,
    "Entity.Ip": IpEntity,
    "Entity.Mailbox": MailboxEntity,
    "Entity.MailCluster": MailClusterEntity,
    "Entity.MailMessage": MailMessageEntity,
    "Entity.Malware": MalwareEntity,
    "Entity.Process": ProcessEntity,
    "Entity.RegistryKey": RegistryKeyEntity,
    "Entity.RegistryValue": RegistryValueEntity,
    "Entity.SecurityGroup": SecurityGroupEntity,
    "Entity.SubmissionMail": SubmissionMailEntity,
    "Entity.Url": UrlEntity,
    "Entity.Nic": NicEntity,
    "EntityQueryTemplate.Activity": ActivityEntityQueryTemplate,
    "AlertRule.MLBehaviorAnalytics": MLBehaviorAnalyticsAlertRule,
    "AlertRule.Fusion": FusionAlertRule,
    "AlertRule.ThreatIntelligence": ThreatIntelligenceAlertRule,
    "AlertRule.MicrosoftSecurityIncidentCreation": MicrosoftSecurityIncidentCreationAlertRule,
    "AlertRule.Scheduled": ScheduledAlertRule,
    "AlertRule.NRT": NrtAlertRule,
    "EntityQuery.Expansion": ExpansionEntityQuery,
    "EntityQuery.Activity": ActivityEntityQuery,
    "CustomEntityQuery.Activity": ActivityCustomEntityQuery,
    "SecurityMLAnalyticsSetting.Anomaly": AnomalySecurityMLAnalyticsSettings,
    "Settings.Anomalies": Anomalies,
    "Settings.EyesOn": EyesOn,
    "Settings.EntityAnalytics": EntityAnalytics,
    "Settings.Ueba": Ueba,
    "ThreatIntelligenceInformation.indicator": ThreatIntelligenceIndicatorModel,
    "DataConnector.AzureActiveDirectory": AADDataConnector,
    "DataConnector.MicrosoftThreatIntelligence": MstiDataConnector,
    "DataConnector.MicrosoftThreatProtection": MTPDataConnector,
    "DataConnector.AzureAdvancedThreatProtection": AatpDataConnector,
    "DataConnector.AzureSecurityCenter": ASCDataConnector,
    "DataConnector.AmazonWebServicesCloudTrail": AwsCloudTrailDataConnector,
    "DataConnector.AmazonWebServicesS3": AwsS3DataConnector,
    "DataConnector.MicrosoftCloudAppSecurity": McasDataConnector,
    "DataConnector.Dynamics365": Dynamics365DataConnector,
    "DataConnector.OfficeATP": OfficeATPDataConnector,
    "DataConnector.Office365Project": Office365ProjectDataConnector,
    "DataConnector.OfficePowerBI": OfficePowerBIDataConnector,
    "DataConnector.OfficeIRM": OfficeIRMDataConnector,
    "DataConnector.MicrosoftDefenderAdvancedThreatProtection": MdatpDataConnector,
    "DataConnector.Office365": OfficeDataConnector,
    "DataConnector.ThreatIntelligence": TIDataConnector,
    "DataConnector.ThreatIntelligenceTaxii": TiTaxiiDataConnector,
    "DataConnector.IOT": IoTDataConnector,
    "DataConnector.GenericUI": CodelessUiDataConnector,
    "DataConnector.APIPolling": CodelessApiPollingDataConnector
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    AlertRulesList: AlertRulesList,
    Resource: Resource,
    SystemData: SystemData,
    CloudError: CloudError,
    CloudErrorBody: CloudErrorBody,
    ActionsList: ActionsList,
    ActionPropertiesBase: ActionPropertiesBase,
    AlertRuleTemplatesList: AlertRuleTemplatesList,
    AutomationRuleTriggeringLogic: AutomationRuleTriggeringLogic,
    AutomationRuleCondition: AutomationRuleCondition,
    AutomationRuleAction: AutomationRuleAction,
    ClientInfo: ClientInfo,
    AutomationRulesList: AutomationRulesList,
    ManualTriggerRequestBody: ManualTriggerRequestBody,
    BookmarkList: BookmarkList,
    UserInfo: UserInfo,
    IncidentInfo: IncidentInfo,
    BookmarkEntityMappings: BookmarkEntityMappings,
    EntityFieldMapping: EntityFieldMapping,
    RelationList: RelationList,
    BookmarkExpandParameters: BookmarkExpandParameters,
    BookmarkExpandResponse: BookmarkExpandResponse,
    ExpansionResultsMetadata: ExpansionResultsMetadata,
    ExpansionResultAggregation: ExpansionResultAggregation,
    BookmarkExpandResponseValue: BookmarkExpandResponseValue,
    ConnectedEntity: ConnectedEntity,
    EnrichmentIpGeodata: EnrichmentIpGeodata,
    EnrichmentDomainWhois: EnrichmentDomainWhois,
    EnrichmentDomainWhoisDetails: EnrichmentDomainWhoisDetails,
    EnrichmentDomainWhoisRegistrarDetails: EnrichmentDomainWhoisRegistrarDetails,
    EnrichmentDomainWhoisContacts: EnrichmentDomainWhoisContacts,
    EnrichmentDomainWhoisContact: EnrichmentDomainWhoisContact,
    EntityList: EntityList,
    EntityExpandParameters: EntityExpandParameters,
    EntityExpandResponse: EntityExpandResponse,
    EntityExpandResponseValue: EntityExpandResponseValue,
    EntityEdges: EntityEdges,
    EntityTimelineParameters: EntityTimelineParameters,
    EntityTimelineResponse: EntityTimelineResponse,
    TimelineResultsMetadata: TimelineResultsMetadata,
    TimelineAggregation: TimelineAggregation,
    TimelineError: TimelineError,
    EntityTimelineItem: EntityTimelineItem,
    GetQueriesResponse: GetQueriesResponse,
    EntityQueryItem: EntityQueryItem,
    EntityGetInsightsParameters: EntityGetInsightsParameters,
    EntityGetInsightsResponse: EntityGetInsightsResponse,
    GetInsightsResultsMetadata: GetInsightsResultsMetadata,
    GetInsightsErrorKind: GetInsightsErrorKind,
    EntityInsightItem: EntityInsightItem,
    EntityInsightItemQueryTimeInterval: EntityInsightItemQueryTimeInterval,
    InsightsTableResult: InsightsTableResult,
    InsightsTableResultColumnsItem: InsightsTableResultColumnsItem,
    EntityQueryList: EntityQueryList,
    EntityQueryTemplateList: EntityQueryTemplateList,
    FileImportList: FileImportList,
    FileMetadata: FileMetadata,
    ValidationError: ValidationError,
    IncidentList: IncidentList,
    IncidentAdditionalData: IncidentAdditionalData,
    IncidentLabel: IncidentLabel,
    IncidentOwnerInfo: IncidentOwnerInfo,
    TeamInformation: TeamInformation,
    TeamProperties: TeamProperties,
    IncidentAlertList: IncidentAlertList,
    SecurityAlertPropertiesConfidenceReasonsItem: SecurityAlertPropertiesConfidenceReasonsItem,
    EntityCommonProperties: EntityCommonProperties,
    IncidentBookmarkList: IncidentBookmarkList,
    IncidentCommentList: IncidentCommentList,
    IncidentEntitiesResponse: IncidentEntitiesResponse,
    IncidentEntitiesResultsMetadata: IncidentEntitiesResultsMetadata,
    MetadataList: MetadataList,
    MetadataSource: MetadataSource,
    MetadataAuthor: MetadataAuthor,
    MetadataSupport: MetadataSupport,
    MetadataDependencies: MetadataDependencies,
    MetadataCategories: MetadataCategories,
    OfficeConsentList: OfficeConsentList,
    SentinelOnboardingStatesList: SentinelOnboardingStatesList,
    SecurityMLAnalyticsSettingsList: SecurityMLAnalyticsSettingsList,
    SettingList: SettingList,
    RepoList: RepoList,
    Repo: Repo,
    SourceControlList: SourceControlList,
    Repository: Repository,
    ContentPathMap: ContentPathMap,
    RepositoryResourceInfo: RepositoryResourceInfo,
    Webhook: Webhook,
    GitHubResourceInfo: GitHubResourceInfo,
    AzureDevOpsResourceInfo: AzureDevOpsResourceInfo,
    DeploymentInfo: DeploymentInfo,
    Deployment: Deployment,
    ThreatIntelligenceKillChainPhase: ThreatIntelligenceKillChainPhase,
    ThreatIntelligenceParsedPattern: ThreatIntelligenceParsedPattern,
    ThreatIntelligenceParsedPatternTypeValue: ThreatIntelligenceParsedPatternTypeValue,
    ThreatIntelligenceExternalReference: ThreatIntelligenceExternalReference,
    ThreatIntelligenceGranularMarkingModel: ThreatIntelligenceGranularMarkingModel,
    ThreatIntelligenceInformationList: ThreatIntelligenceInformationList,
    ThreatIntelligenceFilteringCriteria: ThreatIntelligenceFilteringCriteria,
    ThreatIntelligenceSortingCriteria: ThreatIntelligenceSortingCriteria,
    ThreatIntelligenceMetricsList: ThreatIntelligenceMetricsList,
    ThreatIntelligenceMetrics: ThreatIntelligenceMetrics,
    ThreatIntelligenceMetric: ThreatIntelligenceMetric,
    ThreatIntelligenceMetricEntity: ThreatIntelligenceMetricEntity,
    ThreatIntelligenceAppendTags: ThreatIntelligenceAppendTags,
    WatchlistList: WatchlistList,
    WatchlistItemList: WatchlistItemList,
    DataConnectorList: DataConnectorList,
    DataConnectorConnectBody: DataConnectorConnectBody,
    DataConnectorsCheckRequirements: DataConnectorsCheckRequirements,
    DataConnectorRequirementsState: DataConnectorRequirementsState,
    OperationsList: OperationsList,
    Operation: Operation,
    OperationDisplay: OperationDisplay,
    AlertRuleTemplateDataSource: AlertRuleTemplateDataSource,
    AlertRuleTemplatePropertiesBase: AlertRuleTemplatePropertiesBase,
    QueryBasedAlertRuleTemplateProperties: QueryBasedAlertRuleTemplateProperties,
    EntityMapping: EntityMapping,
    FieldMapping: FieldMapping,
    AlertDetailsOverride: AlertDetailsOverride,
    EventGroupingSettings: EventGroupingSettings,
    FusionSourceSettings: FusionSourceSettings,
    FusionSourceSubTypeSetting: FusionSourceSubTypeSetting,
    FusionSubTypeSeverityFilter: FusionSubTypeSeverityFilter,
    FusionSubTypeSeverityFiltersItem: FusionSubTypeSeverityFiltersItem,
    FusionScenarioExclusionPattern: FusionScenarioExclusionPattern,
    FusionTemplateSourceSetting: FusionTemplateSourceSetting,
    FusionTemplateSourceSubType: FusionTemplateSourceSubType,
    FusionTemplateSubTypeSeverityFilter: FusionTemplateSubTypeSeverityFilter,
    MicrosoftSecurityIncidentCreationAlertRuleCommonProperties: MicrosoftSecurityIncidentCreationAlertRuleCommonProperties,
    IncidentConfiguration: IncidentConfiguration,
    GroupingConfiguration: GroupingConfiguration,
    ScheduledAlertRuleCommonProperties: ScheduledAlertRuleCommonProperties,
    AutomationRuleBooleanCondition: AutomationRuleBooleanCondition,
    IncidentPropertiesAction: IncidentPropertiesAction,
    AutomationRulePropertyArrayChangedValuesCondition: AutomationRulePropertyArrayChangedValuesCondition,
    AutomationRulePropertyArrayValuesCondition: AutomationRulePropertyArrayValuesCondition,
    AutomationRulePropertyValuesChangedCondition: AutomationRulePropertyValuesChangedCondition,
    AutomationRulePropertyValuesCondition: AutomationRulePropertyValuesCondition,
    PlaybookActionProperties: PlaybookActionProperties,
    EntityQueryItemProperties: EntityQueryItemProperties,
    EntityQueryItemPropertiesDataTypesItem: EntityQueryItemPropertiesDataTypesItem,
    InsightQueryItemPropertiesTableQuery: InsightQueryItemPropertiesTableQuery,
    InsightQueryItemPropertiesTableQueryColumnsDefinitionsItem: InsightQueryItemPropertiesTableQueryColumnsDefinitionsItem,
    InsightQueryItemPropertiesTableQueryQueriesDefinitionsItem: InsightQueryItemPropertiesTableQueryQueriesDefinitionsItem,
    InsightQueryItemPropertiesTableQueryQueriesDefinitionsPropertiesItemsItem: InsightQueryItemPropertiesTableQueryQueriesDefinitionsPropertiesItemsItem,
    InsightQueryItemPropertiesAdditionalQuery: InsightQueryItemPropertiesAdditionalQuery,
    InsightQueryItemPropertiesDefaultTimeRange: InsightQueryItemPropertiesDefaultTimeRange,
    InsightQueryItemPropertiesReferenceTimeRange: InsightQueryItemPropertiesReferenceTimeRange,
    ActivityEntityQueriesPropertiesQueryDefinitions: ActivityEntityQueriesPropertiesQueryDefinitions,
    ActivityEntityQueryTemplatePropertiesQueryDefinitions: ActivityEntityQueryTemplatePropertiesQueryDefinitions,
    DataTypeDefinitions: DataTypeDefinitions,
    SecurityMLAnalyticsSettingsDataSource: SecurityMLAnalyticsSettingsDataSource,
    DataConnectorTenantId: DataConnectorTenantId,
    DataConnectorWithAlertsProperties: DataConnectorWithAlertsProperties,
    AlertsDataTypeOfDataConnector: AlertsDataTypeOfDataConnector,
    DataConnectorDataTypeCommon: DataConnectorDataTypeCommon,
    MstiDataConnectorDataTypes: MstiDataConnectorDataTypes,
    MTPDataConnectorDataTypes: MTPDataConnectorDataTypes,
    AwsCloudTrailDataConnectorDataTypes: AwsCloudTrailDataConnectorDataTypes,
    AwsS3DataConnectorDataTypes: AwsS3DataConnectorDataTypes,
    Dynamics365DataConnectorDataTypes: Dynamics365DataConnectorDataTypes,
    Office365ProjectConnectorDataTypes: Office365ProjectConnectorDataTypes,
    OfficePowerBIConnectorDataTypes: OfficePowerBIConnectorDataTypes,
    OfficeDataConnectorDataTypes: OfficeDataConnectorDataTypes,
    TIDataConnectorDataTypes: TIDataConnectorDataTypes,
    TiTaxiiDataConnectorDataTypes: TiTaxiiDataConnectorDataTypes,
    CodelessUiConnectorConfigProperties: CodelessUiConnectorConfigProperties,
    GraphQueries: GraphQueries,
    SampleQueries: SampleQueries,
    LastDataReceivedDataType: LastDataReceivedDataType,
    ConnectivityCriteria: ConnectivityCriteria,
    Availability: Availability,
    Permissions: Permissions,
    ResourceProvider: ResourceProvider,
    RequiredPermissions: RequiredPermissions,
    CustomsPermission: CustomsPermission,
    InstructionSteps: InstructionSteps,
    ConnectorInstructionModelBase: ConnectorInstructionModelBase,
    CodelessConnectorPollingConfigProperties: CodelessConnectorPollingConfigProperties,
    CodelessConnectorPollingAuthProperties: CodelessConnectorPollingAuthProperties,
    CodelessConnectorPollingRequestProperties: CodelessConnectorPollingRequestProperties,
    CodelessConnectorPollingPagingProperties: CodelessConnectorPollingPagingProperties,
    CodelessConnectorPollingResponseProperties: CodelessConnectorPollingResponseProperties,
    ThreatIntelligence: ThreatIntelligence,
    GeoLocation: GeoLocation,
    ResourceWithEtag: ResourceWithEtag,
    AlertRuleTemplate: AlertRuleTemplate,
    Entity: Entity,
    EntityQueryTemplate: EntityQueryTemplate,
    FileImport: FileImport,
    OfficeConsent: OfficeConsent,
    ActionResponseProperties: ActionResponseProperties,
    ActionRequestProperties: ActionRequestProperties,
    BooleanConditionProperties: BooleanConditionProperties,
    PropertyArrayChangedConditionProperties: PropertyArrayChangedConditionProperties,
    PropertyArrayConditionProperties: PropertyArrayConditionProperties,
    PropertyChangedConditionProperties: PropertyChangedConditionProperties,
    PropertyConditionProperties: PropertyConditionProperties,
    AutomationRuleModifyPropertiesAction: AutomationRuleModifyPropertiesAction,
    AutomationRuleRunPlaybookAction: AutomationRuleRunPlaybookAction,
    ActivityTimelineItem: ActivityTimelineItem,
    BookmarkTimelineItem: BookmarkTimelineItem,
    AnomalyTimelineItem: AnomalyTimelineItem,
    SecurityAlertTimelineItem: SecurityAlertTimelineItem,
    InsightQueryItem: InsightQueryItem,
    SecurityAlertProperties: SecurityAlertProperties,
    HuntingBookmarkProperties: HuntingBookmarkProperties,
    ThreatIntelligenceIndicatorProperties: ThreatIntelligenceIndicatorProperties,
    AccountEntityProperties: AccountEntityProperties,
    AzureResourceEntityProperties: AzureResourceEntityProperties,
    CloudApplicationEntityProperties: CloudApplicationEntityProperties,
    DnsEntityProperties: DnsEntityProperties,
    FileEntityProperties: FileEntityProperties,
    FileHashEntityProperties: FileHashEntityProperties,
    HostEntityProperties: HostEntityProperties,
    IoTDeviceEntityProperties: IoTDeviceEntityProperties,
    IpEntityProperties: IpEntityProperties,
    MailboxEntityProperties: MailboxEntityProperties,
    MailClusterEntityProperties: MailClusterEntityProperties,
    MailMessageEntityProperties: MailMessageEntityProperties,
    MalwareEntityProperties: MalwareEntityProperties,
    ProcessEntityProperties: ProcessEntityProperties,
    RegistryKeyEntityProperties: RegistryKeyEntityProperties,
    RegistryValueEntityProperties: RegistryValueEntityProperties,
    SecurityGroupEntityProperties: SecurityGroupEntityProperties,
    SubmissionMailEntityProperties: SubmissionMailEntityProperties,
    UrlEntityProperties: UrlEntityProperties,
    NicEntityProperties: NicEntityProperties,
    AADCheckRequirements: AADCheckRequirements,
    AatpCheckRequirements: AatpCheckRequirements,
    ASCCheckRequirements: ASCCheckRequirements,
    AwsCloudTrailCheckRequirements: AwsCloudTrailCheckRequirements,
    AwsS3CheckRequirements: AwsS3CheckRequirements,
    Dynamics365CheckRequirements: Dynamics365CheckRequirements,
    McasCheckRequirements: McasCheckRequirements,
    MdatpCheckRequirements: MdatpCheckRequirements,
    MstiCheckRequirements: MstiCheckRequirements,
    MtpCheckRequirements: MtpCheckRequirements,
    OfficeATPCheckRequirements: OfficeATPCheckRequirements,
    OfficeIRMCheckRequirements: OfficeIRMCheckRequirements,
    Office365ProjectCheckRequirements: Office365ProjectCheckRequirements,
    OfficePowerBICheckRequirements: OfficePowerBICheckRequirements,
    TICheckRequirements: TICheckRequirements,
    TiTaxiiCheckRequirements: TiTaxiiCheckRequirements,
    IoTCheckRequirements: IoTCheckRequirements,
    AlertRuleTemplateWithMitreProperties: AlertRuleTemplateWithMitreProperties,
    MicrosoftSecurityIncidentCreationAlertRuleTemplateProperties: MicrosoftSecurityIncidentCreationAlertRuleTemplateProperties,
    NrtAlertRuleTemplateProperties: NrtAlertRuleTemplateProperties,
    MicrosoftSecurityIncidentCreationAlertRuleProperties: MicrosoftSecurityIncidentCreationAlertRuleProperties,
    ScheduledAlertRuleProperties: ScheduledAlertRuleProperties,
    InsightQueryItemProperties: InsightQueryItemProperties,
    AADCheckRequirementsProperties: AADCheckRequirementsProperties,
    AatpCheckRequirementsProperties: AatpCheckRequirementsProperties,
    Dynamics365CheckRequirementsProperties: Dynamics365CheckRequirementsProperties,
    McasCheckRequirementsProperties: McasCheckRequirementsProperties,
    MdatpCheckRequirementsProperties: MdatpCheckRequirementsProperties,
    MstiCheckRequirementsProperties: MstiCheckRequirementsProperties,
    MTPCheckRequirementsProperties: MTPCheckRequirementsProperties,
    OfficeATPCheckRequirementsProperties: OfficeATPCheckRequirementsProperties,
    OfficeIRMCheckRequirementsProperties: OfficeIRMCheckRequirementsProperties,
    Office365ProjectCheckRequirementsProperties: Office365ProjectCheckRequirementsProperties,
    OfficePowerBICheckRequirementsProperties: OfficePowerBICheckRequirementsProperties,
    TICheckRequirementsProperties: TICheckRequirementsProperties,
    TiTaxiiCheckRequirementsProperties: TiTaxiiCheckRequirementsProperties,
    AADDataConnectorProperties: AADDataConnectorProperties,
    MstiDataConnectorProperties: MstiDataConnectorProperties,
    MTPDataConnectorProperties: MTPDataConnectorProperties,
    AatpDataConnectorProperties: AatpDataConnectorProperties,
    McasDataConnectorProperties: McasDataConnectorProperties,
    Dynamics365DataConnectorProperties: Dynamics365DataConnectorProperties,
    OfficeATPDataConnectorProperties: OfficeATPDataConnectorProperties,
    Office365ProjectDataConnectorProperties: Office365ProjectDataConnectorProperties,
    OfficePowerBIDataConnectorProperties: OfficePowerBIDataConnectorProperties,
    OfficeIRMDataConnectorProperties: OfficeIRMDataConnectorProperties,
    MdatpDataConnectorProperties: MdatpDataConnectorProperties,
    OfficeDataConnectorProperties: OfficeDataConnectorProperties,
    TIDataConnectorProperties: TIDataConnectorProperties,
    TiTaxiiDataConnectorProperties: TiTaxiiDataConnectorProperties,
    ASCDataConnectorProperties: ASCDataConnectorProperties,
    IoTDataConnectorProperties: IoTDataConnectorProperties,
    McasDataConnectorDataTypes: McasDataConnectorDataTypes,
    MstiDataConnectorDataTypesBingSafetyPhishingURL: MstiDataConnectorDataTypesBingSafetyPhishingURL,
    MstiDataConnectorDataTypesMicrosoftEmergingThreatFeed: MstiDataConnectorDataTypesMicrosoftEmergingThreatFeed,
    MTPDataConnectorDataTypesIncidents: MTPDataConnectorDataTypesIncidents,
    AwsCloudTrailDataConnectorDataTypesLogs: AwsCloudTrailDataConnectorDataTypesLogs,
    AwsS3DataConnectorDataTypesLogs: AwsS3DataConnectorDataTypesLogs,
    Dynamics365DataConnectorDataTypesDynamics365CdsActivities: Dynamics365DataConnectorDataTypesDynamics365CdsActivities,
    Office365ProjectConnectorDataTypesLogs: Office365ProjectConnectorDataTypesLogs,
    OfficePowerBIConnectorDataTypesLogs: OfficePowerBIConnectorDataTypesLogs,
    OfficeDataConnectorDataTypesExchange: OfficeDataConnectorDataTypesExchange,
    OfficeDataConnectorDataTypesSharePoint: OfficeDataConnectorDataTypesSharePoint,
    OfficeDataConnectorDataTypesTeams: OfficeDataConnectorDataTypesTeams,
    TIDataConnectorDataTypesIndicators: TIDataConnectorDataTypesIndicators,
    TiTaxiiDataConnectorDataTypesTaxiiClient: TiTaxiiDataConnectorDataTypesTaxiiClient,
    CodelessUiConnectorConfigPropertiesGraphQueriesItem: CodelessUiConnectorConfigPropertiesGraphQueriesItem,
    CodelessUiConnectorConfigPropertiesSampleQueriesItem: CodelessUiConnectorConfigPropertiesSampleQueriesItem,
    CodelessUiConnectorConfigPropertiesDataTypesItem: CodelessUiConnectorConfigPropertiesDataTypesItem,
    CodelessUiConnectorConfigPropertiesConnectivityCriteriaItem: CodelessUiConnectorConfigPropertiesConnectivityCriteriaItem,
    PermissionsResourceProviderItem: PermissionsResourceProviderItem,
    Customs: Customs,
    CodelessUiConnectorConfigPropertiesInstructionStepsItem: CodelessUiConnectorConfigPropertiesInstructionStepsItem,
    InstructionStepsInstructionsItem: InstructionStepsInstructionsItem,
    AlertRule: AlertRule,
    ActionResponse: ActionResponse,
    ActionRequest: ActionRequest,
    AutomationRule: AutomationRule,
    Bookmark: Bookmark,
    Relation: Relation,
    EntityQuery: EntityQuery,
    CustomEntityQuery: CustomEntityQuery,
    Incident: Incident,
    IncidentComment: IncidentComment,
    MetadataModel: MetadataModel,
    MetadataPatch: MetadataPatch,
    SentinelOnboardingState: SentinelOnboardingState,
    SecurityMLAnalyticsSetting: SecurityMLAnalyticsSetting,
    Settings: Settings,
    SourceControl: SourceControl,
    ThreatIntelligenceInformation: ThreatIntelligenceInformation,
    Watchlist: Watchlist,
    WatchlistItem: WatchlistItem,
    DataConnector: DataConnector,
    MLBehaviorAnalyticsAlertRuleTemplate: MLBehaviorAnalyticsAlertRuleTemplate,
    FusionAlertRuleTemplate: FusionAlertRuleTemplate,
    ThreatIntelligenceAlertRuleTemplate: ThreatIntelligenceAlertRuleTemplate,
    MicrosoftSecurityIncidentCreationAlertRuleTemplate: MicrosoftSecurityIncidentCreationAlertRuleTemplate,
    ScheduledAlertRuleTemplate: ScheduledAlertRuleTemplate,
    NrtAlertRuleTemplate: NrtAlertRuleTemplate,
    SecurityAlert: SecurityAlert,
    HuntingBookmark: HuntingBookmark,
    AccountEntity: AccountEntity,
    AzureResourceEntity: AzureResourceEntity,
    CloudApplicationEntity: CloudApplicationEntity,
    DnsEntity: DnsEntity,
    FileEntity: FileEntity,
    FileHashEntity: FileHashEntity,
    HostEntity: HostEntity,
    IoTDeviceEntity: IoTDeviceEntity,
    IpEntity: IpEntity,
    MailboxEntity: MailboxEntity,
    MailClusterEntity: MailClusterEntity,
    MailMessageEntity: MailMessageEntity,
    MalwareEntity: MalwareEntity,
    ProcessEntity: ProcessEntity,
    RegistryKeyEntity: RegistryKeyEntity,
    RegistryValueEntity: RegistryValueEntity,
    SecurityGroupEntity: SecurityGroupEntity,
    SubmissionMailEntity: SubmissionMailEntity,
    UrlEntity: UrlEntity,
    NicEntity: NicEntity,
    ActivityEntityQueryTemplate: ActivityEntityQueryTemplate,
    MLBehaviorAnalyticsAlertRuleTemplateProperties: MLBehaviorAnalyticsAlertRuleTemplateProperties,
    ThreatIntelligenceAlertRuleTemplateProperties: ThreatIntelligenceAlertRuleTemplateProperties,
    PermissionsCustomsItem: PermissionsCustomsItem,
    MLBehaviorAnalyticsAlertRule: MLBehaviorAnalyticsAlertRule,
    FusionAlertRule: FusionAlertRule,
    ThreatIntelligenceAlertRule: ThreatIntelligenceAlertRule,
    MicrosoftSecurityIncidentCreationAlertRule: MicrosoftSecurityIncidentCreationAlertRule,
    ScheduledAlertRule: ScheduledAlertRule,
    NrtAlertRule: NrtAlertRule,
    ExpansionEntityQuery: ExpansionEntityQuery,
    ActivityEntityQuery: ActivityEntityQuery,
    ActivityCustomEntityQuery: ActivityCustomEntityQuery,
    AnomalySecurityMLAnalyticsSettings: AnomalySecurityMLAnalyticsSettings,
    Anomalies: Anomalies,
    EyesOn: EyesOn,
    EntityAnalytics: EntityAnalytics,
    Ueba: Ueba,
    ThreatIntelligenceIndicatorModel: ThreatIntelligenceIndicatorModel,
    AADDataConnector: AADDataConnector,
    MstiDataConnector: MstiDataConnector,
    MTPDataConnector: MTPDataConnector,
    AatpDataConnector: AatpDataConnector,
    ASCDataConnector: ASCDataConnector,
    AwsCloudTrailDataConnector: AwsCloudTrailDataConnector,
    AwsS3DataConnector: AwsS3DataConnector,
    McasDataConnector: McasDataConnector,
    Dynamics365DataConnector: Dynamics365DataConnector,
    OfficeATPDataConnector: OfficeATPDataConnector,
    Office365ProjectDataConnector: Office365ProjectDataConnector,
    OfficePowerBIDataConnector: OfficePowerBIDataConnector,
    OfficeIRMDataConnector: OfficeIRMDataConnector,
    MdatpDataConnector: MdatpDataConnector,
    OfficeDataConnector: OfficeDataConnector,
    TIDataConnector: TIDataConnector,
    TiTaxiiDataConnector: TiTaxiiDataConnector,
    IoTDataConnector: IoTDataConnector,
    CodelessUiDataConnector: CodelessUiDataConnector,
    CodelessApiPollingDataConnector: CodelessApiPollingDataConnector,
    WatchlistsDeleteHeaders: WatchlistsDeleteHeaders,
    WatchlistsCreateOrUpdateHeaders: WatchlistsCreateOrUpdateHeaders,
    discriminators: discriminators
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2022-09-01-preview",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const workspaceName = {
    parameterPath: "workspaceName",
    mapper: {
        constraints: {
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "workspaceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const ruleId = {
    parameterPath: "ruleId",
    mapper: {
        serializedName: "ruleId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const alertRule = {
    parameterPath: "alertRule",
    mapper: AlertRule
};
const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const actionId = {
    parameterPath: "actionId",
    mapper: {
        serializedName: "actionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const action = {
    parameterPath: "action",
    mapper: ActionRequest
};
const alertRuleTemplateId = {
    parameterPath: "alertRuleTemplateId",
    mapper: {
        serializedName: "alertRuleTemplateId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const automationRuleId = {
    parameterPath: "automationRuleId",
    mapper: {
        serializedName: "automationRuleId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const automationRuleToUpsert = {
    parameterPath: ["options", "automationRuleToUpsert"],
    mapper: AutomationRule
};
const requestBody = {
    parameterPath: ["options", "requestBody"],
    mapper: ManualTriggerRequestBody
};
const incidentIdentifier = {
    parameterPath: "incidentIdentifier",
    mapper: {
        serializedName: "incidentIdentifier",
        required: true,
        type: {
            name: "String"
        }
    }
};
const filter = {
    parameterPath: ["options", "filter"],
    mapper: {
        serializedName: "$filter",
        type: {
            name: "String"
        }
    }
};
const orderby = {
    parameterPath: ["options", "orderby"],
    mapper: {
        serializedName: "$orderby",
        type: {
            name: "String"
        }
    }
};
const top = {
    parameterPath: ["options", "top"],
    mapper: {
        serializedName: "$top",
        type: {
            name: "Number"
        }
    }
};
const skipToken = {
    parameterPath: ["options", "skipToken"],
    mapper: {
        serializedName: "$skipToken",
        type: {
            name: "String"
        }
    }
};
const incidentId = {
    parameterPath: "incidentId",
    mapper: {
        serializedName: "incidentId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const incident = {
    parameterPath: "incident",
    mapper: Incident
};
const teamProperties = {
    parameterPath: "teamProperties",
    mapper: TeamProperties
};
const bookmarkId = {
    parameterPath: "bookmarkId",
    mapper: {
        serializedName: "bookmarkId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const bookmark = {
    parameterPath: "bookmark",
    mapper: Bookmark
};
const relationName = {
    parameterPath: "relationName",
    mapper: {
        serializedName: "relationName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const relation = {
    parameterPath: "relation",
    mapper: Relation
};
const parameters = {
    parameterPath: "parameters",
    mapper: BookmarkExpandParameters
};
const ipAddress = {
    parameterPath: "ipAddress",
    mapper: {
        serializedName: "ipAddress",
        required: true,
        type: {
            name: "String"
        }
    }
};
const domain = {
    parameterPath: "domain",
    mapper: {
        serializedName: "domain",
        required: true,
        type: {
            name: "String"
        }
    }
};
const entityId = {
    parameterPath: "entityId",
    mapper: {
        serializedName: "entityId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters1 = {
    parameterPath: "parameters",
    mapper: EntityExpandParameters
};
const kind = {
    parameterPath: "kind",
    mapper: {
        serializedName: "kind",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters2 = {
    parameterPath: "parameters",
    mapper: EntityGetInsightsParameters
};
const parameters3 = {
    parameterPath: "parameters",
    mapper: EntityTimelineParameters
};
const kind1 = {
    parameterPath: ["options", "kind"],
    mapper: {
        serializedName: "kind",
        type: {
            name: "String"
        }
    }
};
const entityQueryId = {
    parameterPath: "entityQueryId",
    mapper: {
        serializedName: "entityQueryId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const entityQuery = {
    parameterPath: "entityQuery",
    mapper: CustomEntityQuery
};
const kind2 = {
    parameterPath: ["options", "kind"],
    mapper: {
        defaultValue: "Activity",
        isConstant: true,
        serializedName: "kind",
        type: {
            name: "String"
        }
    }
};
const entityQueryTemplateId = {
    parameterPath: "entityQueryTemplateId",
    mapper: {
        serializedName: "entityQueryTemplateId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const fileImportId = {
    parameterPath: "fileImportId",
    mapper: {
        serializedName: "fileImportId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const fileImport = {
    parameterPath: "fileImport",
    mapper: FileImport
};
const incidentCommentId = {
    parameterPath: "incidentCommentId",
    mapper: {
        serializedName: "incidentCommentId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const incidentComment = {
    parameterPath: "incidentComment",
    mapper: IncidentComment
};
const skip = {
    parameterPath: ["options", "skip"],
    mapper: {
        serializedName: "$skip",
        type: {
            name: "Number"
        }
    }
};
const metadataName = {
    parameterPath: "metadataName",
    mapper: {
        serializedName: "metadataName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const metadata = {
    parameterPath: "metadata",
    mapper: MetadataModel
};
const metadataPatch = {
    parameterPath: "metadataPatch",
    mapper: MetadataPatch
};
const consentId = {
    parameterPath: "consentId",
    mapper: {
        serializedName: "consentId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const sentinelOnboardingStateName = {
    parameterPath: "sentinelOnboardingStateName",
    mapper: {
        serializedName: "sentinelOnboardingStateName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const sentinelOnboardingStateParameter = {
    parameterPath: ["options", "sentinelOnboardingStateParameter"],
    mapper: SentinelOnboardingState
};
const settingsResourceName = {
    parameterPath: "settingsResourceName",
    mapper: {
        serializedName: "settingsResourceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const securityMLAnalyticsSetting = {
    parameterPath: "securityMLAnalyticsSetting",
    mapper: SecurityMLAnalyticsSetting
};
const settingsName = {
    parameterPath: "settingsName",
    mapper: {
        serializedName: "settingsName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const settings = {
    parameterPath: "settings",
    mapper: Settings
};
const repoType = {
    parameterPath: "repoType",
    mapper: {
        serializedName: "repoType",
        required: true,
        type: {
            name: "String"
        }
    }
};
const sourceControlId = {
    parameterPath: "sourceControlId",
    mapper: {
        serializedName: "sourceControlId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const sourceControl = {
    parameterPath: "sourceControl",
    mapper: SourceControl
};
const threatIntelligenceProperties = {
    parameterPath: "threatIntelligenceProperties",
    mapper: ThreatIntelligenceIndicatorModel
};
const name = {
    parameterPath: "name",
    mapper: {
        serializedName: "name",
        required: true,
        type: {
            name: "String"
        }
    }
};
const threatIntelligenceFilteringCriteria = {
    parameterPath: "threatIntelligenceFilteringCriteria",
    mapper: ThreatIntelligenceFilteringCriteria
};
const threatIntelligenceAppendTags = {
    parameterPath: "threatIntelligenceAppendTags",
    mapper: ThreatIntelligenceAppendTags
};
const threatIntelligenceReplaceTags = {
    parameterPath: "threatIntelligenceReplaceTags",
    mapper: ThreatIntelligenceIndicatorModel
};
const watchlistAlias = {
    parameterPath: "watchlistAlias",
    mapper: {
        serializedName: "watchlistAlias",
        required: true,
        type: {
            name: "String"
        }
    }
};
const watchlist = {
    parameterPath: "watchlist",
    mapper: Watchlist
};
const watchlistItemId = {
    parameterPath: "watchlistItemId",
    mapper: {
        serializedName: "watchlistItemId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const watchlistItem = {
    parameterPath: "watchlistItem",
    mapper: WatchlistItem
};
const dataConnectorId = {
    parameterPath: "dataConnectorId",
    mapper: {
        serializedName: "dataConnectorId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const dataConnector = {
    parameterPath: "dataConnector",
    mapper: DataConnector
};
const connectBody = {
    parameterPath: "connectBody",
    mapper: DataConnectorConnectBody
};
const dataConnectorsCheckRequirements = {
    parameterPath: "dataConnectorsCheckRequirements",
    mapper: DataConnectorsCheckRequirements
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing AlertRules operations. */
class AlertRulesImpl {
    /**
     * Initialize a new instance of the class AlertRules class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets all alert rules.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName, workspaceName, options) {
        const iter = this.listPagingAll(resourceGroupName, workspaceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, workspaceName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, workspaceName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, workspaceName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, workspaceName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, workspaceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, workspaceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets all alert rules.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    _list(resourceGroupName, workspaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, options }, listOperationSpec$p);
    }
    /**
     * Gets the alert rule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param ruleId Alert rule ID
     * @param options The options parameters.
     */
    get(resourceGroupName, workspaceName, ruleId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, ruleId, options }, getOperationSpec$o);
    }
    /**
     * Creates or updates the alert rule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param ruleId Alert rule ID
     * @param alertRule The alert rule
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, workspaceName, ruleId, alertRule, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, ruleId, alertRule, options }, createOrUpdateOperationSpec$c);
    }
    /**
     * Delete the alert rule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param ruleId Alert rule ID
     * @param options The options parameters.
     */
    delete(resourceGroupName, workspaceName, ruleId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, ruleId, options }, deleteOperationSpec$j);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, workspaceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, nextLink, options }, listNextOperationSpec$l);
    }
}
// Operation Specifications
const serializer$x = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$p = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/alertRules",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AlertRulesList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName
    ],
    headerParameters: [accept],
    serializer: serializer$x
};
const getOperationSpec$o = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/alertRules/{ruleId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AlertRule
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        ruleId
    ],
    headerParameters: [accept],
    serializer: serializer$x
};
const createOrUpdateOperationSpec$c = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/alertRules/{ruleId}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: AlertRule
        },
        201: {
            bodyMapper: AlertRule
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: alertRule,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        ruleId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$x
};
const deleteOperationSpec$j = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/alertRules/{ruleId}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        ruleId
    ],
    headerParameters: [accept],
    serializer: serializer$x
};
const listNextOperationSpec$l = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AlertRulesList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$x
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Actions operations. */
class ActionsImpl {
    /**
     * Initialize a new instance of the class Actions class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets all actions of alert rule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param ruleId Alert rule ID
     * @param options The options parameters.
     */
    listByAlertRule(resourceGroupName, workspaceName, ruleId, options) {
        const iter = this.listByAlertRulePagingAll(resourceGroupName, workspaceName, ruleId, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByAlertRulePagingPage(resourceGroupName, workspaceName, ruleId, options, settings);
            }
        };
    }
    listByAlertRulePagingPage(resourceGroupName, workspaceName, ruleId, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByAlertRulePagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByAlertRule(resourceGroupName, workspaceName, ruleId, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByAlertRuleNext(resourceGroupName, workspaceName, ruleId, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByAlertRulePagingAll(resourceGroupName, workspaceName, ruleId, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByAlertRulePagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByAlertRulePagingPage(resourceGroupName, workspaceName, ruleId, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets all actions of alert rule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param ruleId Alert rule ID
     * @param options The options parameters.
     */
    _listByAlertRule(resourceGroupName, workspaceName, ruleId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, ruleId, options }, listByAlertRuleOperationSpec);
    }
    /**
     * Gets the action of alert rule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param ruleId Alert rule ID
     * @param actionId Action ID
     * @param options The options parameters.
     */
    get(resourceGroupName, workspaceName, ruleId, actionId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, ruleId, actionId, options }, getOperationSpec$n);
    }
    /**
     * Creates or updates the action of alert rule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param ruleId Alert rule ID
     * @param actionId Action ID
     * @param action The action
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, workspaceName, ruleId, actionId, action, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, ruleId, actionId, action, options }, createOrUpdateOperationSpec$b);
    }
    /**
     * Delete the action of alert rule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param ruleId Alert rule ID
     * @param actionId Action ID
     * @param options The options parameters.
     */
    delete(resourceGroupName, workspaceName, ruleId, actionId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, ruleId, actionId, options }, deleteOperationSpec$i);
    }
    /**
     * ListByAlertRuleNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param ruleId Alert rule ID
     * @param nextLink The nextLink from the previous successful call to the ListByAlertRule method.
     * @param options The options parameters.
     */
    _listByAlertRuleNext(resourceGroupName, workspaceName, ruleId, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, ruleId, nextLink, options }, listByAlertRuleNextOperationSpec);
    }
}
// Operation Specifications
const serializer$w = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByAlertRuleOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/alertRules/{ruleId}/actions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ActionsList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        ruleId
    ],
    headerParameters: [accept],
    serializer: serializer$w
};
const getOperationSpec$n = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/alertRules/{ruleId}/actions/{actionId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ActionResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        ruleId,
        actionId
    ],
    headerParameters: [accept],
    serializer: serializer$w
};
const createOrUpdateOperationSpec$b = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/alertRules/{ruleId}/actions/{actionId}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ActionResponse
        },
        201: {
            bodyMapper: ActionResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: action,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        ruleId,
        actionId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$w
};
const deleteOperationSpec$i = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/alertRules/{ruleId}/actions/{actionId}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        ruleId,
        actionId
    ],
    headerParameters: [accept],
    serializer: serializer$w
};
const listByAlertRuleNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ActionsList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        ruleId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$w
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing AlertRuleTemplates operations. */
class AlertRuleTemplatesImpl {
    /**
     * Initialize a new instance of the class AlertRuleTemplates class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets all alert rule templates.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName, workspaceName, options) {
        const iter = this.listPagingAll(resourceGroupName, workspaceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, workspaceName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, workspaceName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, workspaceName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, workspaceName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, workspaceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, workspaceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets all alert rule templates.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    _list(resourceGroupName, workspaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, options }, listOperationSpec$o);
    }
    /**
     * Gets the alert rule template.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param alertRuleTemplateId Alert rule template ID
     * @param options The options parameters.
     */
    get(resourceGroupName, workspaceName, alertRuleTemplateId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, alertRuleTemplateId, options }, getOperationSpec$m);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, workspaceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, nextLink, options }, listNextOperationSpec$k);
    }
}
// Operation Specifications
const serializer$v = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$o = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/alertRuleTemplates",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AlertRuleTemplatesList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName
    ],
    headerParameters: [accept],
    serializer: serializer$v
};
const getOperationSpec$m = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/alertRuleTemplates/{alertRuleTemplateId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AlertRuleTemplate
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        alertRuleTemplateId
    ],
    headerParameters: [accept],
    serializer: serializer$v
};
const listNextOperationSpec$k = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AlertRuleTemplatesList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$v
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing AutomationRules operations. */
class AutomationRulesImpl {
    /**
     * Initialize a new instance of the class AutomationRules class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets all automation rules.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName, workspaceName, options) {
        const iter = this.listPagingAll(resourceGroupName, workspaceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, workspaceName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, workspaceName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, workspaceName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, workspaceName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, workspaceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, workspaceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets the automation rule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param automationRuleId Automation rule ID
     * @param options The options parameters.
     */
    get(resourceGroupName, workspaceName, automationRuleId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, automationRuleId, options }, getOperationSpec$l);
    }
    /**
     * Creates or updates the automation rule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param automationRuleId Automation rule ID
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, workspaceName, automationRuleId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, automationRuleId, options }, createOrUpdateOperationSpec$a);
    }
    /**
     * Delete the automation rule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param automationRuleId Automation rule ID
     * @param options The options parameters.
     */
    delete(resourceGroupName, workspaceName, automationRuleId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, automationRuleId, options }, deleteOperationSpec$h);
    }
    /**
     * Gets all automation rules.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    _list(resourceGroupName, workspaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, options }, listOperationSpec$n);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, workspaceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, nextLink, options }, listNextOperationSpec$j);
    }
}
// Operation Specifications
const serializer$u = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$l = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/automationRules/{automationRuleId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AutomationRule
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        automationRuleId
    ],
    headerParameters: [accept],
    serializer: serializer$u
};
const createOrUpdateOperationSpec$a = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/automationRules/{automationRuleId}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: AutomationRule
        },
        201: {
            bodyMapper: AutomationRule
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: automationRuleToUpsert,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        automationRuleId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$u
};
const deleteOperationSpec$h = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/automationRules/{automationRuleId}",
    httpMethod: "DELETE",
    responses: {
        200: {
            bodyMapper: {
                type: { name: "Dictionary", value: { type: { name: "any" } } }
            }
        },
        204: {
            bodyMapper: {
                type: { name: "Dictionary", value: { type: { name: "any" } } }
            }
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        automationRuleId
    ],
    headerParameters: [accept],
    serializer: serializer$u
};
const listOperationSpec$n = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/automationRules",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AutomationRulesList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName
    ],
    headerParameters: [accept],
    serializer: serializer$u
};
const listNextOperationSpec$j = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AutomationRulesList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$u
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Incidents operations. */
class IncidentsImpl {
    /**
     * Initialize a new instance of the class Incidents class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets all incidents.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName, workspaceName, options) {
        const iter = this.listPagingAll(resourceGroupName, workspaceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, workspaceName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, workspaceName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, workspaceName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, workspaceName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, workspaceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, workspaceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Triggers playbook on a specific incident
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param incidentIdentifier
     * @param options The options parameters.
     */
    runPlaybook(resourceGroupName, workspaceName, incidentIdentifier, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, incidentIdentifier, options }, runPlaybookOperationSpec);
    }
    /**
     * Gets all incidents.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    _list(resourceGroupName, workspaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, options }, listOperationSpec$m);
    }
    /**
     * Gets an incident.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param incidentId Incident ID
     * @param options The options parameters.
     */
    get(resourceGroupName, workspaceName, incidentId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, incidentId, options }, getOperationSpec$k);
    }
    /**
     * Creates or updates the incident.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param incidentId Incident ID
     * @param incident The incident
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, workspaceName, incidentId, incident, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, incidentId, incident, options }, createOrUpdateOperationSpec$9);
    }
    /**
     * Delete the incident.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param incidentId Incident ID
     * @param options The options parameters.
     */
    delete(resourceGroupName, workspaceName, incidentId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, incidentId, options }, deleteOperationSpec$g);
    }
    /**
     * Creates a Microsoft team to investigate the incident by sharing information and insights between
     * participants.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param incidentId Incident ID
     * @param teamProperties Team properties
     * @param options The options parameters.
     */
    createTeam(resourceGroupName, workspaceName, incidentId, teamProperties, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, incidentId, teamProperties, options }, createTeamOperationSpec);
    }
    /**
     * Gets all incident alerts.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param incidentId Incident ID
     * @param options The options parameters.
     */
    listAlerts(resourceGroupName, workspaceName, incidentId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, incidentId, options }, listAlertsOperationSpec);
    }
    /**
     * Gets all incident bookmarks.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param incidentId Incident ID
     * @param options The options parameters.
     */
    listBookmarks(resourceGroupName, workspaceName, incidentId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, incidentId, options }, listBookmarksOperationSpec);
    }
    /**
     * Gets all incident related entities.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param incidentId Incident ID
     * @param options The options parameters.
     */
    listEntities(resourceGroupName, workspaceName, incidentId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, incidentId, options }, listEntitiesOperationSpec);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, workspaceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, nextLink, options }, listNextOperationSpec$i);
    }
}
// Operation Specifications
const serializer$t = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const runPlaybookOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/incidents/{incidentIdentifier}/runPlaybook",
    httpMethod: "POST",
    responses: {
        204: {
            bodyMapper: {
                type: { name: "Dictionary", value: { type: { name: "any" } } }
            }
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: requestBody,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        incidentIdentifier
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$t
};
const listOperationSpec$m = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/incidents",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: IncidentList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [
        apiVersion,
        filter,
        orderby,
        top,
        skipToken
    ],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName
    ],
    headerParameters: [accept],
    serializer: serializer$t
};
const getOperationSpec$k = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/incidents/{incidentId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Incident
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        incidentId
    ],
    headerParameters: [accept],
    serializer: serializer$t
};
const createOrUpdateOperationSpec$9 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/incidents/{incidentId}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Incident
        },
        201: {
            bodyMapper: Incident
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: incident,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        incidentId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$t
};
const deleteOperationSpec$g = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/incidents/{incidentId}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        incidentId
    ],
    headerParameters: [accept],
    serializer: serializer$t
};
const createTeamOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/incidents/{incidentId}/createTeam",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: TeamInformation
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: teamProperties,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        incidentId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$t
};
const listAlertsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/incidents/{incidentId}/alerts",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: IncidentAlertList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        incidentId
    ],
    headerParameters: [accept],
    serializer: serializer$t
};
const listBookmarksOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/incidents/{incidentId}/bookmarks",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: IncidentBookmarkList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        incidentId
    ],
    headerParameters: [accept],
    serializer: serializer$t
};
const listEntitiesOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/incidents/{incidentId}/entities",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: IncidentEntitiesResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        incidentId
    ],
    headerParameters: [accept],
    serializer: serializer$t
};
const listNextOperationSpec$i = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: IncidentList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$t
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Bookmarks operations. */
class BookmarksImpl {
    /**
     * Initialize a new instance of the class Bookmarks class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets all bookmarks.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName, workspaceName, options) {
        const iter = this.listPagingAll(resourceGroupName, workspaceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, workspaceName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, workspaceName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, workspaceName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, workspaceName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, workspaceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, workspaceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets all bookmarks.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    _list(resourceGroupName, workspaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, options }, listOperationSpec$l);
    }
    /**
     * Gets a bookmark.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param bookmarkId Bookmark ID
     * @param options The options parameters.
     */
    get(resourceGroupName, workspaceName, bookmarkId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, bookmarkId, options }, getOperationSpec$j);
    }
    /**
     * Creates or updates the bookmark.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param bookmarkId Bookmark ID
     * @param bookmark The bookmark
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, workspaceName, bookmarkId, bookmark, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, bookmarkId, bookmark, options }, createOrUpdateOperationSpec$8);
    }
    /**
     * Delete the bookmark.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param bookmarkId Bookmark ID
     * @param options The options parameters.
     */
    delete(resourceGroupName, workspaceName, bookmarkId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, bookmarkId, options }, deleteOperationSpec$f);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, workspaceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, nextLink, options }, listNextOperationSpec$h);
    }
}
// Operation Specifications
const serializer$s = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$l = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/bookmarks",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BookmarkList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName
    ],
    headerParameters: [accept],
    serializer: serializer$s
};
const getOperationSpec$j = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/bookmarks/{bookmarkId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Bookmark
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        bookmarkId
    ],
    headerParameters: [accept],
    serializer: serializer$s
};
const createOrUpdateOperationSpec$8 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/bookmarks/{bookmarkId}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Bookmark
        },
        201: {
            bodyMapper: Bookmark
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: bookmark,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        bookmarkId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$s
};
const deleteOperationSpec$f = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/bookmarks/{bookmarkId}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        bookmarkId
    ],
    headerParameters: [accept],
    serializer: serializer$s
};
const listNextOperationSpec$h = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BookmarkList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$s
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing BookmarkRelations operations. */
class BookmarkRelationsImpl {
    /**
     * Initialize a new instance of the class BookmarkRelations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets all bookmark relations.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param bookmarkId Bookmark ID
     * @param options The options parameters.
     */
    list(resourceGroupName, workspaceName, bookmarkId, options) {
        const iter = this.listPagingAll(resourceGroupName, workspaceName, bookmarkId, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, workspaceName, bookmarkId, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, workspaceName, bookmarkId, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, workspaceName, bookmarkId, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, workspaceName, bookmarkId, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, workspaceName, bookmarkId, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, workspaceName, bookmarkId, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets all bookmark relations.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param bookmarkId Bookmark ID
     * @param options The options parameters.
     */
    _list(resourceGroupName, workspaceName, bookmarkId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, bookmarkId, options }, listOperationSpec$k);
    }
    /**
     * Gets a bookmark relation.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param bookmarkId Bookmark ID
     * @param relationName Relation Name
     * @param options The options parameters.
     */
    get(resourceGroupName, workspaceName, bookmarkId, relationName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, bookmarkId, relationName, options }, getOperationSpec$i);
    }
    /**
     * Creates the bookmark relation.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param bookmarkId Bookmark ID
     * @param relationName Relation Name
     * @param relation The relation model
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, workspaceName, bookmarkId, relationName, relation, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            workspaceName,
            bookmarkId,
            relationName,
            relation,
            options
        }, createOrUpdateOperationSpec$7);
    }
    /**
     * Delete the bookmark relation.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param bookmarkId Bookmark ID
     * @param relationName Relation Name
     * @param options The options parameters.
     */
    delete(resourceGroupName, workspaceName, bookmarkId, relationName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, bookmarkId, relationName, options }, deleteOperationSpec$e);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param bookmarkId Bookmark ID
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, workspaceName, bookmarkId, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, bookmarkId, nextLink, options }, listNextOperationSpec$g);
    }
}
// Operation Specifications
const serializer$r = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$k = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/bookmarks/{bookmarkId}/relations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: RelationList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [
        apiVersion,
        filter,
        orderby,
        top,
        skipToken
    ],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        bookmarkId
    ],
    headerParameters: [accept],
    serializer: serializer$r
};
const getOperationSpec$i = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/bookmarks/{bookmarkId}/relations/{relationName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Relation
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        bookmarkId,
        relationName
    ],
    headerParameters: [accept],
    serializer: serializer$r
};
const createOrUpdateOperationSpec$7 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/bookmarks/{bookmarkId}/relations/{relationName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Relation
        },
        201: {
            bodyMapper: Relation
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: relation,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        bookmarkId,
        relationName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$r
};
const deleteOperationSpec$e = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/bookmarks/{bookmarkId}/relations/{relationName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        bookmarkId,
        relationName
    ],
    headerParameters: [accept],
    serializer: serializer$r
};
const listNextOperationSpec$g = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: RelationList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        nextLink,
        bookmarkId
    ],
    headerParameters: [accept],
    serializer: serializer$r
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing BookmarkOperations operations. */
class BookmarkOperationsImpl {
    /**
     * Initialize a new instance of the class BookmarkOperations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Expand an bookmark
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param bookmarkId Bookmark ID
     * @param parameters The parameters required to execute an expand operation on the given bookmark.
     * @param options The options parameters.
     */
    expand(resourceGroupName, workspaceName, bookmarkId, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, bookmarkId, parameters, options }, expandOperationSpec$1);
    }
}
// Operation Specifications
const serializer$q = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const expandOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/bookmarks/{bookmarkId}/expand",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: BookmarkExpandResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: parameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        bookmarkId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$q
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing IPGeodata operations. */
class IPGeodataImpl {
    /**
     * Initialize a new instance of the class IPGeodata class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get geodata for a single IP address
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param ipAddress IP address (v4 or v6) to be enriched
     * @param options The options parameters.
     */
    get(resourceGroupName, ipAddress, options) {
        return this.client.sendOperationRequest({ resourceGroupName, ipAddress, options }, getOperationSpec$h);
    }
}
// Operation Specifications
const serializer$p = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$h = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SecurityInsights/enrichment/ip/geodata/",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: EnrichmentIpGeodata
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion, ipAddress],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$p
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing DomainWhois operations. */
class DomainWhoisImpl {
    /**
     * Initialize a new instance of the class DomainWhois class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get whois information for a single domain name
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param domain Domain name to be enriched
     * @param options The options parameters.
     */
    get(resourceGroupName, domain, options) {
        return this.client.sendOperationRequest({ resourceGroupName, domain, options }, getOperationSpec$g);
    }
}
// Operation Specifications
const serializer$o = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$g = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SecurityInsights/enrichment/domain/whois/",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: EnrichmentDomainWhois
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion, domain],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$o
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Entities operations. */
class EntitiesImpl {
    /**
     * Initialize a new instance of the class Entities class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets all entities.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName, workspaceName, options) {
        const iter = this.listPagingAll(resourceGroupName, workspaceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, workspaceName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, workspaceName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, workspaceName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, workspaceName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, workspaceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, workspaceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets all entities.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    _list(resourceGroupName, workspaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, options }, listOperationSpec$j);
    }
    /**
     * Gets an entity.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param entityId entity ID
     * @param options The options parameters.
     */
    get(resourceGroupName, workspaceName, entityId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, entityId, options }, getOperationSpec$f);
    }
    /**
     * Expands an entity.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param entityId entity ID
     * @param parameters The parameters required to execute an expand operation on the given entity.
     * @param options The options parameters.
     */
    expand(resourceGroupName, workspaceName, entityId, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, entityId, parameters, options }, expandOperationSpec);
    }
    /**
     * Get Insights and Activities for an entity.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param entityId entity ID
     * @param kind The Kind parameter for queries
     * @param options The options parameters.
     */
    queries(resourceGroupName, workspaceName, entityId, kind, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, entityId, kind, options }, queriesOperationSpec);
    }
    /**
     * Execute Insights for an entity.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param entityId entity ID
     * @param parameters The parameters required to execute insights on the given entity.
     * @param options The options parameters.
     */
    getInsights(resourceGroupName, workspaceName, entityId, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, entityId, parameters, options }, getInsightsOperationSpec);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, workspaceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, nextLink, options }, listNextOperationSpec$f);
    }
}
// Operation Specifications
const serializer$n = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$j = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/entities",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: EntityList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName
    ],
    headerParameters: [accept],
    serializer: serializer$n
};
const getOperationSpec$f = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/entities/{entityId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Entity
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        entityId
    ],
    headerParameters: [accept],
    serializer: serializer$n
};
const expandOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/entities/{entityId}/expand",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: EntityExpandResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: parameters1,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        entityId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$n
};
const queriesOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/entities/{entityId}/queries",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: GetQueriesResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion, kind],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        entityId
    ],
    headerParameters: [accept],
    serializer: serializer$n
};
const getInsightsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/entities/{entityId}/getInsights",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: EntityGetInsightsResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: parameters2,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        entityId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$n
};
const listNextOperationSpec$f = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: EntityList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$n
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing EntitiesGetTimeline operations. */
class EntitiesGetTimelineImpl {
    /**
     * Initialize a new instance of the class EntitiesGetTimeline class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Timeline for an entity.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param entityId entity ID
     * @param parameters The parameters required to execute an timeline operation on the given entity.
     * @param options The options parameters.
     */
    list(resourceGroupName, workspaceName, entityId, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, entityId, parameters, options }, listOperationSpec$i);
    }
}
// Operation Specifications
const serializer$m = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$i = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/entities/{entityId}/getTimeline",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: EntityTimelineResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: parameters3,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        entityId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$m
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing EntitiesRelations operations. */
class EntitiesRelationsImpl {
    /**
     * Initialize a new instance of the class EntitiesRelations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets all relations of an entity.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param entityId entity ID
     * @param options The options parameters.
     */
    list(resourceGroupName, workspaceName, entityId, options) {
        const iter = this.listPagingAll(resourceGroupName, workspaceName, entityId, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, workspaceName, entityId, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, workspaceName, entityId, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, workspaceName, entityId, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, workspaceName, entityId, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, workspaceName, entityId, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, workspaceName, entityId, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets all relations of an entity.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param entityId entity ID
     * @param options The options parameters.
     */
    _list(resourceGroupName, workspaceName, entityId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, entityId, options }, listOperationSpec$h);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param entityId entity ID
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, workspaceName, entityId, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, entityId, nextLink, options }, listNextOperationSpec$e);
    }
}
// Operation Specifications
const serializer$l = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$h = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/entities/{entityId}/relations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: RelationList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [
        apiVersion,
        filter,
        orderby,
        top,
        skipToken
    ],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        entityId
    ],
    headerParameters: [accept],
    serializer: serializer$l
};
const listNextOperationSpec$e = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: RelationList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        nextLink,
        entityId
    ],
    headerParameters: [accept],
    serializer: serializer$l
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing EntityRelations operations. */
class EntityRelationsImpl {
    /**
     * Initialize a new instance of the class EntityRelations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets an entity relation.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param entityId entity ID
     * @param relationName Relation Name
     * @param options The options parameters.
     */
    getRelation(resourceGroupName, workspaceName, entityId, relationName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, entityId, relationName, options }, getRelationOperationSpec);
    }
}
// Operation Specifications
const serializer$k = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getRelationOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/entities/{entityId}/relations/{relationName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Relation
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        relationName,
        entityId
    ],
    headerParameters: [accept],
    serializer: serializer$k
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing EntityQueries operations. */
class EntityQueriesImpl {
    /**
     * Initialize a new instance of the class EntityQueries class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets all entity queries.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName, workspaceName, options) {
        const iter = this.listPagingAll(resourceGroupName, workspaceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, workspaceName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, workspaceName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, workspaceName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, workspaceName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, workspaceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, workspaceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets all entity queries.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    _list(resourceGroupName, workspaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, options }, listOperationSpec$g);
    }
    /**
     * Gets an entity query.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param entityQueryId entity query ID
     * @param options The options parameters.
     */
    get(resourceGroupName, workspaceName, entityQueryId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, entityQueryId, options }, getOperationSpec$e);
    }
    /**
     * Creates or updates the entity query.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param entityQueryId entity query ID
     * @param entityQuery The entity query we want to create or update
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, workspaceName, entityQueryId, entityQuery, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, entityQueryId, entityQuery, options }, createOrUpdateOperationSpec$6);
    }
    /**
     * Delete the entity query.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param entityQueryId entity query ID
     * @param options The options parameters.
     */
    delete(resourceGroupName, workspaceName, entityQueryId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, entityQueryId, options }, deleteOperationSpec$d);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, workspaceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, nextLink, options }, listNextOperationSpec$d);
    }
}
// Operation Specifications
const serializer$j = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$g = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/entityQueries",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: EntityQueryList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion, kind1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName
    ],
    headerParameters: [accept],
    serializer: serializer$j
};
const getOperationSpec$e = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/entityQueries/{entityQueryId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: EntityQuery
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        entityQueryId
    ],
    headerParameters: [accept],
    serializer: serializer$j
};
const createOrUpdateOperationSpec$6 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/entityQueries/{entityQueryId}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: EntityQuery
        },
        201: {
            bodyMapper: EntityQuery
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: entityQuery,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        entityQueryId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$j
};
const deleteOperationSpec$d = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/entityQueries/{entityQueryId}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        entityQueryId
    ],
    headerParameters: [accept],
    serializer: serializer$j
};
const listNextOperationSpec$d = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: EntityQueryList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$j
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing EntityQueryTemplates operations. */
class EntityQueryTemplatesImpl {
    /**
     * Initialize a new instance of the class EntityQueryTemplates class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets all entity query templates.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName, workspaceName, options) {
        const iter = this.listPagingAll(resourceGroupName, workspaceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, workspaceName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, workspaceName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, workspaceName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, workspaceName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, workspaceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, workspaceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets all entity query templates.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    _list(resourceGroupName, workspaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, options }, listOperationSpec$f);
    }
    /**
     * Gets an entity query.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param entityQueryTemplateId entity query template ID
     * @param options The options parameters.
     */
    get(resourceGroupName, workspaceName, entityQueryTemplateId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, entityQueryTemplateId, options }, getOperationSpec$d);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, workspaceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, nextLink, options }, listNextOperationSpec$c);
    }
}
// Operation Specifications
const serializer$i = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$f = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/entityQueryTemplates",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: EntityQueryTemplateList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion, kind2],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName
    ],
    headerParameters: [accept],
    serializer: serializer$i
};
const getOperationSpec$d = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/entityQueryTemplates/{entityQueryTemplateId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: EntityQueryTemplate
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        entityQueryTemplateId
    ],
    headerParameters: [accept],
    serializer: serializer$i
};
const listNextOperationSpec$c = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: EntityQueryTemplateList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$i
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class LroImpl {
    constructor(sendOperationFn, args, spec, requestPath = spec.path, requestMethod = spec.httpMethod) {
        this.sendOperationFn = sendOperationFn;
        this.args = args;
        this.spec = spec;
        this.requestPath = requestPath;
        this.requestMethod = requestMethod;
    }
    sendInitialRequest() {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            return this.sendOperationFn(this.args, this.spec);
        });
    }
    sendPollRequest(path) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const _a = this.spec, restSpec = tslib.__rest(_a, ["requestBody"]);
            return this.sendOperationFn(this.args, Object.assign(Object.assign({}, restSpec), { path, httpMethod: "GET" }));
        });
    }
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing FileImports operations. */
class FileImportsImpl {
    /**
     * Initialize a new instance of the class FileImports class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets all file imports.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName, workspaceName, options) {
        const iter = this.listPagingAll(resourceGroupName, workspaceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, workspaceName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, workspaceName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, workspaceName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, workspaceName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, workspaceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, workspaceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets all file imports.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    _list(resourceGroupName, workspaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, options }, listOperationSpec$e);
    }
    /**
     * Gets a file import.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param fileImportId File import ID
     * @param options The options parameters.
     */
    get(resourceGroupName, workspaceName, fileImportId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, fileImportId, options }, getOperationSpec$c);
    }
    /**
     * Creates the file import.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param fileImportId File import ID
     * @param fileImport The file import
     * @param options The options parameters.
     */
    create(resourceGroupName, workspaceName, fileImportId, fileImport, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, fileImportId, fileImport, options }, createOperationSpec$4);
    }
    /**
     * Delete the file import.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param fileImportId File import ID
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, workspaceName, fileImportId, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, workspaceName, fileImportId, options }, deleteOperationSpec$c);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                lroResourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Delete the file import.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param fileImportId File import ID
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, workspaceName, fileImportId, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, workspaceName, fileImportId, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, workspaceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, nextLink, options }, listNextOperationSpec$b);
    }
}
// Operation Specifications
const serializer$h = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$e = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/fileImports",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: FileImportList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [
        apiVersion,
        filter,
        orderby,
        top,
        skipToken
    ],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName
    ],
    headerParameters: [accept],
    serializer: serializer$h
};
const getOperationSpec$c = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/fileImports/{fileImportId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: FileImport
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        fileImportId
    ],
    headerParameters: [accept],
    serializer: serializer$h
};
const createOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/fileImports/{fileImportId}",
    httpMethod: "PUT",
    responses: {
        201: {
            bodyMapper: FileImport
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: fileImport,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        fileImportId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$h
};
const deleteOperationSpec$c = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/fileImports/{fileImportId}",
    httpMethod: "DELETE",
    responses: {
        200: {
            bodyMapper: FileImport
        },
        201: {
            bodyMapper: FileImport
        },
        202: {
            bodyMapper: FileImport
        },
        204: {
            bodyMapper: FileImport
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        fileImportId
    ],
    headerParameters: [accept],
    serializer: serializer$h
};
const listNextOperationSpec$b = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: FileImportList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$h
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing IncidentComments operations. */
class IncidentCommentsImpl {
    /**
     * Initialize a new instance of the class IncidentComments class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets all incident comments.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param incidentId Incident ID
     * @param options The options parameters.
     */
    list(resourceGroupName, workspaceName, incidentId, options) {
        const iter = this.listPagingAll(resourceGroupName, workspaceName, incidentId, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, workspaceName, incidentId, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, workspaceName, incidentId, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, workspaceName, incidentId, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, workspaceName, incidentId, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, workspaceName, incidentId, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, workspaceName, incidentId, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets all incident comments.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param incidentId Incident ID
     * @param options The options parameters.
     */
    _list(resourceGroupName, workspaceName, incidentId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, incidentId, options }, listOperationSpec$d);
    }
    /**
     * Gets an incident comment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param incidentId Incident ID
     * @param incidentCommentId Incident comment ID
     * @param options The options parameters.
     */
    get(resourceGroupName, workspaceName, incidentId, incidentCommentId, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            workspaceName,
            incidentId,
            incidentCommentId,
            options
        }, getOperationSpec$b);
    }
    /**
     * Creates or updates the incident comment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param incidentId Incident ID
     * @param incidentCommentId Incident comment ID
     * @param incidentComment The incident comment
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, workspaceName, incidentId, incidentCommentId, incidentComment, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            workspaceName,
            incidentId,
            incidentCommentId,
            incidentComment,
            options
        }, createOrUpdateOperationSpec$5);
    }
    /**
     * Delete the incident comment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param incidentId Incident ID
     * @param incidentCommentId Incident comment ID
     * @param options The options parameters.
     */
    delete(resourceGroupName, workspaceName, incidentId, incidentCommentId, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            workspaceName,
            incidentId,
            incidentCommentId,
            options
        }, deleteOperationSpec$b);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param incidentId Incident ID
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, workspaceName, incidentId, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, incidentId, nextLink, options }, listNextOperationSpec$a);
    }
}
// Operation Specifications
const serializer$g = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$d = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/incidents/{incidentId}/comments",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: IncidentCommentList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [
        apiVersion,
        filter,
        orderby,
        top,
        skipToken
    ],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        incidentId
    ],
    headerParameters: [accept],
    serializer: serializer$g
};
const getOperationSpec$b = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/incidents/{incidentId}/comments/{incidentCommentId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: IncidentComment
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        incidentId,
        incidentCommentId
    ],
    headerParameters: [accept],
    serializer: serializer$g
};
const createOrUpdateOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/incidents/{incidentId}/comments/{incidentCommentId}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: IncidentComment
        },
        201: {
            bodyMapper: IncidentComment
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: incidentComment,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        incidentId,
        incidentCommentId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$g
};
const deleteOperationSpec$b = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/incidents/{incidentId}/comments/{incidentCommentId}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        incidentId,
        incidentCommentId
    ],
    headerParameters: [accept],
    serializer: serializer$g
};
const listNextOperationSpec$a = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: IncidentCommentList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        nextLink,
        incidentId
    ],
    headerParameters: [accept],
    serializer: serializer$g
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing IncidentRelations operations. */
class IncidentRelationsImpl {
    /**
     * Initialize a new instance of the class IncidentRelations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets all incident relations.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param incidentId Incident ID
     * @param options The options parameters.
     */
    list(resourceGroupName, workspaceName, incidentId, options) {
        const iter = this.listPagingAll(resourceGroupName, workspaceName, incidentId, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, workspaceName, incidentId, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, workspaceName, incidentId, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, workspaceName, incidentId, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, workspaceName, incidentId, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, workspaceName, incidentId, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, workspaceName, incidentId, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets all incident relations.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param incidentId Incident ID
     * @param options The options parameters.
     */
    _list(resourceGroupName, workspaceName, incidentId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, incidentId, options }, listOperationSpec$c);
    }
    /**
     * Gets an incident relation.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param incidentId Incident ID
     * @param relationName Relation Name
     * @param options The options parameters.
     */
    get(resourceGroupName, workspaceName, incidentId, relationName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, incidentId, relationName, options }, getOperationSpec$a);
    }
    /**
     * Creates or updates the incident relation.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param incidentId Incident ID
     * @param relationName Relation Name
     * @param relation The relation model
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, workspaceName, incidentId, relationName, relation, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            workspaceName,
            incidentId,
            relationName,
            relation,
            options
        }, createOrUpdateOperationSpec$4);
    }
    /**
     * Delete the incident relation.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param incidentId Incident ID
     * @param relationName Relation Name
     * @param options The options parameters.
     */
    delete(resourceGroupName, workspaceName, incidentId, relationName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, incidentId, relationName, options }, deleteOperationSpec$a);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param incidentId Incident ID
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, workspaceName, incidentId, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, incidentId, nextLink, options }, listNextOperationSpec$9);
    }
}
// Operation Specifications
const serializer$f = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$c = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/incidents/{incidentId}/relations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: RelationList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [
        apiVersion,
        filter,
        orderby,
        top,
        skipToken
    ],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        incidentId
    ],
    headerParameters: [accept],
    serializer: serializer$f
};
const getOperationSpec$a = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/incidents/{incidentId}/relations/{relationName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Relation
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        incidentId,
        relationName
    ],
    headerParameters: [accept],
    serializer: serializer$f
};
const createOrUpdateOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/incidents/{incidentId}/relations/{relationName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Relation
        },
        201: {
            bodyMapper: Relation
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: relation,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        incidentId,
        relationName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$f
};
const deleteOperationSpec$a = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/incidents/{incidentId}/relations/{relationName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        incidentId,
        relationName
    ],
    headerParameters: [accept],
    serializer: serializer$f
};
const listNextOperationSpec$9 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: RelationList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        nextLink,
        incidentId
    ],
    headerParameters: [accept],
    serializer: serializer$f
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Metadata operations. */
class MetadataImpl {
    /**
     * Initialize a new instance of the class Metadata class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List of all metadata
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName, workspaceName, options) {
        const iter = this.listPagingAll(resourceGroupName, workspaceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, workspaceName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, workspaceName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, workspaceName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, workspaceName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, workspaceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, workspaceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List of all metadata
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    _list(resourceGroupName, workspaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, options }, listOperationSpec$b);
    }
    /**
     * Get a Metadata.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param metadataName The Metadata name.
     * @param options The options parameters.
     */
    get(resourceGroupName, workspaceName, metadataName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, metadataName, options }, getOperationSpec$9);
    }
    /**
     * Delete a Metadata.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param metadataName The Metadata name.
     * @param options The options parameters.
     */
    delete(resourceGroupName, workspaceName, metadataName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, metadataName, options }, deleteOperationSpec$9);
    }
    /**
     * Create a Metadata.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param metadataName The Metadata name.
     * @param metadata Metadata resource.
     * @param options The options parameters.
     */
    create(resourceGroupName, workspaceName, metadataName, metadata, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, metadataName, metadata, options }, createOperationSpec$3);
    }
    /**
     * Update an existing Metadata.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param metadataName The Metadata name.
     * @param metadataPatch Partial metadata request.
     * @param options The options parameters.
     */
    update(resourceGroupName, workspaceName, metadataName, metadataPatch, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            workspaceName,
            metadataName,
            metadataPatch,
            options
        }, updateOperationSpec$1);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, workspaceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, nextLink, options }, listNextOperationSpec$8);
    }
}
// Operation Specifications
const serializer$e = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$b = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/metadata",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: MetadataList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [
        apiVersion,
        filter,
        orderby,
        top,
        skip
    ],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName
    ],
    headerParameters: [accept],
    serializer: serializer$e
};
const getOperationSpec$9 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/metadata/{metadataName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: MetadataModel
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        metadataName
    ],
    headerParameters: [accept],
    serializer: serializer$e
};
const deleteOperationSpec$9 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/metadata/{metadataName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        metadataName
    ],
    headerParameters: [accept],
    serializer: serializer$e
};
const createOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/metadata/{metadataName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: MetadataModel
        },
        201: {
            bodyMapper: MetadataModel
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: metadata,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        metadataName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$e
};
const updateOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/metadata/{metadataName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: MetadataModel
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: metadataPatch,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        metadataName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$e
};
const listNextOperationSpec$8 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: MetadataList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$e
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing OfficeConsents operations. */
class OfficeConsentsImpl {
    /**
     * Initialize a new instance of the class OfficeConsents class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets all office365 consents.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName, workspaceName, options) {
        const iter = this.listPagingAll(resourceGroupName, workspaceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, workspaceName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, workspaceName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, workspaceName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, workspaceName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, workspaceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, workspaceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets all office365 consents.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    _list(resourceGroupName, workspaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, options }, listOperationSpec$a);
    }
    /**
     * Gets an office365 consent.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param consentId consent ID
     * @param options The options parameters.
     */
    get(resourceGroupName, workspaceName, consentId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, consentId, options }, getOperationSpec$8);
    }
    /**
     * Delete the office365 consent.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param consentId consent ID
     * @param options The options parameters.
     */
    delete(resourceGroupName, workspaceName, consentId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, consentId, options }, deleteOperationSpec$8);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, workspaceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, nextLink, options }, listNextOperationSpec$7);
    }
}
// Operation Specifications
const serializer$d = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$a = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/officeConsents",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OfficeConsentList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName
    ],
    headerParameters: [accept],
    serializer: serializer$d
};
const getOperationSpec$8 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/officeConsents/{consentId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OfficeConsent
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        consentId
    ],
    headerParameters: [accept],
    serializer: serializer$d
};
const deleteOperationSpec$8 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/officeConsents/{consentId}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        consentId
    ],
    headerParameters: [accept],
    serializer: serializer$d
};
const listNextOperationSpec$7 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OfficeConsentList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$d
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing SentinelOnboardingStates operations. */
class SentinelOnboardingStatesImpl {
    /**
     * Initialize a new instance of the class SentinelOnboardingStates class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get Sentinel onboarding state
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sentinelOnboardingStateName The Sentinel onboarding state name. Supports - default
     * @param options The options parameters.
     */
    get(resourceGroupName, workspaceName, sentinelOnboardingStateName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            workspaceName,
            sentinelOnboardingStateName,
            options
        }, getOperationSpec$7);
    }
    /**
     * Create Sentinel onboarding state
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sentinelOnboardingStateName The Sentinel onboarding state name. Supports - default
     * @param options The options parameters.
     */
    create(resourceGroupName, workspaceName, sentinelOnboardingStateName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            workspaceName,
            sentinelOnboardingStateName,
            options
        }, createOperationSpec$2);
    }
    /**
     * Delete Sentinel onboarding state
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sentinelOnboardingStateName The Sentinel onboarding state name. Supports - default
     * @param options The options parameters.
     */
    delete(resourceGroupName, workspaceName, sentinelOnboardingStateName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            workspaceName,
            sentinelOnboardingStateName,
            options
        }, deleteOperationSpec$7);
    }
    /**
     * Gets all Sentinel onboarding states
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName, workspaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, options }, listOperationSpec$9);
    }
}
// Operation Specifications
const serializer$c = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$7 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/onboardingStates/{sentinelOnboardingStateName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SentinelOnboardingState
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        sentinelOnboardingStateName
    ],
    headerParameters: [accept],
    serializer: serializer$c
};
const createOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/onboardingStates/{sentinelOnboardingStateName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: SentinelOnboardingState
        },
        201: {
            bodyMapper: SentinelOnboardingState
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: sentinelOnboardingStateParameter,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        sentinelOnboardingStateName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$c
};
const deleteOperationSpec$7 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/onboardingStates/{sentinelOnboardingStateName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        sentinelOnboardingStateName
    ],
    headerParameters: [accept],
    serializer: serializer$c
};
const listOperationSpec$9 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/onboardingStates",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SentinelOnboardingStatesList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName
    ],
    headerParameters: [accept],
    serializer: serializer$c
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing SecurityMLAnalyticsSettings operations. */
class SecurityMLAnalyticsSettingsImpl {
    /**
     * Initialize a new instance of the class SecurityMLAnalyticsSettings class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets all Security ML Analytics Settings.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName, workspaceName, options) {
        const iter = this.listPagingAll(resourceGroupName, workspaceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, workspaceName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, workspaceName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, workspaceName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, workspaceName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, workspaceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, workspaceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets all Security ML Analytics Settings.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    _list(resourceGroupName, workspaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, options }, listOperationSpec$8);
    }
    /**
     * Gets the Security ML Analytics Settings.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param settingsResourceName Security ML Analytics Settings resource name
     * @param options The options parameters.
     */
    get(resourceGroupName, workspaceName, settingsResourceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, settingsResourceName, options }, getOperationSpec$6);
    }
    /**
     * Creates or updates the Security ML Analytics Settings.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param settingsResourceName Security ML Analytics Settings resource name
     * @param securityMLAnalyticsSetting The security ML Analytics setting
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, workspaceName, settingsResourceName, securityMLAnalyticsSetting, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            workspaceName,
            settingsResourceName,
            securityMLAnalyticsSetting,
            options
        }, createOrUpdateOperationSpec$3);
    }
    /**
     * Delete the Security ML Analytics Settings.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param settingsResourceName Security ML Analytics Settings resource name
     * @param options The options parameters.
     */
    delete(resourceGroupName, workspaceName, settingsResourceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, settingsResourceName, options }, deleteOperationSpec$6);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, workspaceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, nextLink, options }, listNextOperationSpec$6);
    }
}
// Operation Specifications
const serializer$b = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$8 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/securityMLAnalyticsSettings",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SecurityMLAnalyticsSettingsList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName
    ],
    headerParameters: [accept],
    serializer: serializer$b
};
const getOperationSpec$6 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/securityMLAnalyticsSettings/{settingsResourceName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SecurityMLAnalyticsSetting
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        settingsResourceName
    ],
    headerParameters: [accept],
    serializer: serializer$b
};
const createOrUpdateOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/securityMLAnalyticsSettings/{settingsResourceName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: SecurityMLAnalyticsSetting
        },
        201: {
            bodyMapper: SecurityMLAnalyticsSetting
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: securityMLAnalyticsSetting,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        settingsResourceName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$b
};
const deleteOperationSpec$6 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/securityMLAnalyticsSettings/{settingsResourceName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        settingsResourceName
    ],
    headerParameters: [accept],
    serializer: serializer$b
};
const listNextOperationSpec$6 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SecurityMLAnalyticsSettingsList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$b
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing ProductSettings operations. */
class ProductSettingsImpl {
    /**
     * Initialize a new instance of the class ProductSettings class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List of all the settings
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName, workspaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, options }, listOperationSpec$7);
    }
    /**
     * Gets a setting.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param settingsName The setting name. Supports - Anomalies, EyesOn, EntityAnalytics, Ueba
     * @param options The options parameters.
     */
    get(resourceGroupName, workspaceName, settingsName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, settingsName, options }, getOperationSpec$5);
    }
    /**
     * Delete setting of the product.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param settingsName The setting name. Supports - Anomalies, EyesOn, EntityAnalytics, Ueba
     * @param options The options parameters.
     */
    delete(resourceGroupName, workspaceName, settingsName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, settingsName, options }, deleteOperationSpec$5);
    }
    /**
     * Updates setting.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param settingsName The setting name. Supports - Anomalies, EyesOn, EntityAnalytics, Ueba
     * @param settings The setting
     * @param options The options parameters.
     */
    update(resourceGroupName, workspaceName, settingsName, settings, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, settingsName, settings, options }, updateOperationSpec);
    }
}
// Operation Specifications
const serializer$a = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$7 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/settings",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SettingList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName
    ],
    headerParameters: [accept],
    serializer: serializer$a
};
const getOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/settings/{settingsName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Settings
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        settingsName
    ],
    headerParameters: [accept],
    serializer: serializer$a
};
const deleteOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/settings/{settingsName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        settingsName
    ],
    headerParameters: [accept],
    serializer: serializer$a
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/settings/{settingsName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Settings
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: settings,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        settingsName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$a
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing SourceControlOperations operations. */
class SourceControlOperationsImpl {
    /**
     * Initialize a new instance of the class SourceControlOperations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets a list of repositories metadata.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param repoType The repo type.
     * @param options The options parameters.
     */
    listRepositories(resourceGroupName, workspaceName, repoType, options) {
        const iter = this.listRepositoriesPagingAll(resourceGroupName, workspaceName, repoType, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listRepositoriesPagingPage(resourceGroupName, workspaceName, repoType, options, settings);
            }
        };
    }
    listRepositoriesPagingPage(resourceGroupName, workspaceName, repoType, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listRepositoriesPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listRepositories(resourceGroupName, workspaceName, repoType, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listRepositoriesNext(resourceGroupName, workspaceName, repoType, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listRepositoriesPagingAll(resourceGroupName, workspaceName, repoType, options) {
        return tslib.__asyncGenerator(this, arguments, function* listRepositoriesPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listRepositoriesPagingPage(resourceGroupName, workspaceName, repoType, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets a list of repositories metadata.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param repoType The repo type.
     * @param options The options parameters.
     */
    _listRepositories(resourceGroupName, workspaceName, repoType, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, repoType, options }, listRepositoriesOperationSpec);
    }
    /**
     * ListRepositoriesNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param repoType The repo type.
     * @param nextLink The nextLink from the previous successful call to the ListRepositories method.
     * @param options The options parameters.
     */
    _listRepositoriesNext(resourceGroupName, workspaceName, repoType, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, repoType, nextLink, options }, listRepositoriesNextOperationSpec);
    }
}
// Operation Specifications
const serializer$9 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listRepositoriesOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/listRepositories",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: RepoList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: repoType,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$9
};
const listRepositoriesNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: RepoList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        nextLink
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$9
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing SourceControls operations. */
class SourceControlsImpl {
    /**
     * Initialize a new instance of the class SourceControls class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets all source controls, without source control items.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName, workspaceName, options) {
        const iter = this.listPagingAll(resourceGroupName, workspaceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, workspaceName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, workspaceName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, workspaceName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, workspaceName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, workspaceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, workspaceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets all source controls, without source control items.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    _list(resourceGroupName, workspaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, options }, listOperationSpec$6);
    }
    /**
     * Gets a source control byt its identifier.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sourceControlId Source control Id
     * @param options The options parameters.
     */
    get(resourceGroupName, workspaceName, sourceControlId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, sourceControlId, options }, getOperationSpec$4);
    }
    /**
     * Delete a source control.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sourceControlId Source control Id
     * @param options The options parameters.
     */
    delete(resourceGroupName, workspaceName, sourceControlId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, sourceControlId, options }, deleteOperationSpec$4);
    }
    /**
     * Creates a source control.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sourceControlId Source control Id
     * @param sourceControl The SourceControl
     * @param options The options parameters.
     */
    create(resourceGroupName, workspaceName, sourceControlId, sourceControl, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            workspaceName,
            sourceControlId,
            sourceControl,
            options
        }, createOperationSpec$1);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, workspaceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, nextLink, options }, listNextOperationSpec$5);
    }
}
// Operation Specifications
const serializer$8 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$6 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/sourcecontrols",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SourceControlList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName
    ],
    headerParameters: [accept],
    serializer: serializer$8
};
const getOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/sourcecontrols/{sourceControlId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SourceControl
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        sourceControlId
    ],
    headerParameters: [accept],
    serializer: serializer$8
};
const deleteOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/sourcecontrols/{sourceControlId}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        sourceControlId
    ],
    headerParameters: [accept],
    serializer: serializer$8
};
const createOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/sourcecontrols/{sourceControlId}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: SourceControl
        },
        201: {
            bodyMapper: SourceControl
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: sourceControl,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        sourceControlId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$8
};
const listNextOperationSpec$5 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SourceControlList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$8
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ThreatIntelligenceIndicator operations. */
class ThreatIntelligenceIndicatorImpl {
    /**
     * Initialize a new instance of the class ThreatIntelligenceIndicator class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Query threat intelligence indicators as per filtering criteria.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param threatIntelligenceFilteringCriteria Filtering criteria for querying threat intelligence
     *                                            indicators.
     * @param options The options parameters.
     */
    listQueryIndicators(resourceGroupName, workspaceName, threatIntelligenceFilteringCriteria, options) {
        const iter = this.queryIndicatorsPagingAll(resourceGroupName, workspaceName, threatIntelligenceFilteringCriteria, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.queryIndicatorsPagingPage(resourceGroupName, workspaceName, threatIntelligenceFilteringCriteria, options, settings);
            }
        };
    }
    queryIndicatorsPagingPage(resourceGroupName, workspaceName, threatIntelligenceFilteringCriteria, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* queryIndicatorsPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._queryIndicators(resourceGroupName, workspaceName, threatIntelligenceFilteringCriteria, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._queryIndicatorsNext(resourceGroupName, workspaceName, threatIntelligenceFilteringCriteria, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    queryIndicatorsPagingAll(resourceGroupName, workspaceName, threatIntelligenceFilteringCriteria, options) {
        return tslib.__asyncGenerator(this, arguments, function* queryIndicatorsPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.queryIndicatorsPagingPage(resourceGroupName, workspaceName, threatIntelligenceFilteringCriteria, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Create a new threat intelligence indicator.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param threatIntelligenceProperties Properties of threat intelligence indicators to create and
     *                                     update.
     * @param options The options parameters.
     */
    createIndicator(resourceGroupName, workspaceName, threatIntelligenceProperties, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            workspaceName,
            threatIntelligenceProperties,
            options
        }, createIndicatorOperationSpec);
    }
    /**
     * View a threat intelligence indicator by name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param name Threat intelligence indicator name field.
     * @param options The options parameters.
     */
    get(resourceGroupName, workspaceName, name, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, name, options }, getOperationSpec$3);
    }
    /**
     * Update a threat Intelligence indicator.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param name Threat intelligence indicator name field.
     * @param threatIntelligenceProperties Properties of threat intelligence indicators to create and
     *                                     update.
     * @param options The options parameters.
     */
    create(resourceGroupName, workspaceName, name, threatIntelligenceProperties, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            workspaceName,
            name,
            threatIntelligenceProperties,
            options
        }, createOperationSpec);
    }
    /**
     * Delete a threat intelligence indicator.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param name Threat intelligence indicator name field.
     * @param options The options parameters.
     */
    delete(resourceGroupName, workspaceName, name, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, name, options }, deleteOperationSpec$3);
    }
    /**
     * Query threat intelligence indicators as per filtering criteria.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param threatIntelligenceFilteringCriteria Filtering criteria for querying threat intelligence
     *                                            indicators.
     * @param options The options parameters.
     */
    _queryIndicators(resourceGroupName, workspaceName, threatIntelligenceFilteringCriteria, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            workspaceName,
            threatIntelligenceFilteringCriteria,
            options
        }, queryIndicatorsOperationSpec);
    }
    /**
     * Append tags to a threat intelligence indicator.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param name Threat intelligence indicator name field.
     * @param threatIntelligenceAppendTags The threat intelligence append tags request body
     * @param options The options parameters.
     */
    appendTags(resourceGroupName, workspaceName, name, threatIntelligenceAppendTags, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            workspaceName,
            name,
            threatIntelligenceAppendTags,
            options
        }, appendTagsOperationSpec);
    }
    /**
     * Replace tags added to a threat intelligence indicator.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param name Threat intelligence indicator name field.
     * @param threatIntelligenceReplaceTags Tags in the threat intelligence indicator to be replaced.
     * @param options The options parameters.
     */
    replaceTags(resourceGroupName, workspaceName, name, threatIntelligenceReplaceTags, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            workspaceName,
            name,
            threatIntelligenceReplaceTags,
            options
        }, replaceTagsOperationSpec);
    }
    /**
     * QueryIndicatorsNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param threatIntelligenceFilteringCriteria Filtering criteria for querying threat intelligence
     *                                            indicators.
     * @param nextLink The nextLink from the previous successful call to the QueryIndicators method.
     * @param options The options parameters.
     */
    _queryIndicatorsNext(resourceGroupName, workspaceName, threatIntelligenceFilteringCriteria, nextLink, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            workspaceName,
            threatIntelligenceFilteringCriteria,
            nextLink,
            options
        }, queryIndicatorsNextOperationSpec);
    }
}
// Operation Specifications
const serializer$7 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const createIndicatorOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/threatIntelligence/main/createIndicator",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ThreatIntelligenceInformation
        },
        201: {
            bodyMapper: ThreatIntelligenceInformation
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: threatIntelligenceProperties,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$7
};
const getOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/threatIntelligence/main/indicators/{name}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ThreatIntelligenceInformation
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        name
    ],
    headerParameters: [accept],
    serializer: serializer$7
};
const createOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/threatIntelligence/main/indicators/{name}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ThreatIntelligenceInformation
        },
        201: {
            bodyMapper: ThreatIntelligenceInformation
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: threatIntelligenceProperties,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        name
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$7
};
const deleteOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/threatIntelligence/main/indicators/{name}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        name
    ],
    headerParameters: [accept],
    serializer: serializer$7
};
const queryIndicatorsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/threatIntelligence/main/queryIndicators",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ThreatIntelligenceInformationList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: threatIntelligenceFilteringCriteria,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$7
};
const appendTagsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/threatIntelligence/main/indicators/{name}/appendTags",
    httpMethod: "POST",
    responses: {
        200: {},
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: threatIntelligenceAppendTags,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        name
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$7
};
const replaceTagsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/threatIntelligence/main/indicators/{name}/replaceTags",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ThreatIntelligenceInformation
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: threatIntelligenceReplaceTags,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        name
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$7
};
const queryIndicatorsNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ThreatIntelligenceInformationList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        nextLink
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$7
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ThreatIntelligenceIndicators operations. */
class ThreatIntelligenceIndicatorsImpl {
    /**
     * Initialize a new instance of the class ThreatIntelligenceIndicators class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get all threat intelligence indicators.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName, workspaceName, options) {
        const iter = this.listPagingAll(resourceGroupName, workspaceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, workspaceName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, workspaceName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, workspaceName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, workspaceName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, workspaceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, workspaceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get all threat intelligence indicators.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    _list(resourceGroupName, workspaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, options }, listOperationSpec$5);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, workspaceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, nextLink, options }, listNextOperationSpec$4);
    }
}
// Operation Specifications
const serializer$6 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/threatIntelligence/main/indicators",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ThreatIntelligenceInformationList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [
        apiVersion,
        filter,
        orderby,
        top,
        skipToken
    ],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName
    ],
    headerParameters: [accept],
    serializer: serializer$6
};
const listNextOperationSpec$4 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ThreatIntelligenceInformationList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$6
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing ThreatIntelligenceIndicatorMetrics operations. */
class ThreatIntelligenceIndicatorMetricsImpl {
    /**
     * Initialize a new instance of the class ThreatIntelligenceIndicatorMetrics class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get threat intelligence indicators metrics (Indicators counts by Type, Threat Type, Source).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName, workspaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, options }, listOperationSpec$4);
    }
}
// Operation Specifications
const serializer$5 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/threatIntelligence/main/metrics",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ThreatIntelligenceMetricsList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Watchlists operations. */
class WatchlistsImpl {
    /**
     * Initialize a new instance of the class Watchlists class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets all watchlists, without watchlist items.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName, workspaceName, options) {
        const iter = this.listPagingAll(resourceGroupName, workspaceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, workspaceName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, workspaceName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, workspaceName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, workspaceName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, workspaceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, workspaceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets all watchlists, without watchlist items.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    _list(resourceGroupName, workspaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, options }, listOperationSpec$3);
    }
    /**
     * Gets a watchlist, without its watchlist items.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param watchlistAlias Watchlist Alias
     * @param options The options parameters.
     */
    get(resourceGroupName, workspaceName, watchlistAlias, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, watchlistAlias, options }, getOperationSpec$2);
    }
    /**
     * Delete a watchlist.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param watchlistAlias Watchlist Alias
     * @param options The options parameters.
     */
    delete(resourceGroupName, workspaceName, watchlistAlias, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, watchlistAlias, options }, deleteOperationSpec$2);
    }
    /**
     * Create or update a Watchlist and its Watchlist Items (bulk creation, e.g. through text/csv content
     * type). To create a Watchlist and its Items, we should call this endpoint with either rawContent or a
     * valid SAR URI and contentType properties. The rawContent is mainly used for small watchlist (content
     * size below 3.8 MB). The SAS URI enables the creation of large watchlist, where the content size can
     * go up to 500 MB. The status of processing such large file can be polled through the URL returned in
     * Azure-AsyncOperation header.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param watchlistAlias Watchlist Alias
     * @param watchlist The watchlist
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, workspaceName, watchlistAlias, watchlist, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, watchlistAlias, watchlist, options }, createOrUpdateOperationSpec$2);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, workspaceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, nextLink, options }, listNextOperationSpec$3);
    }
}
// Operation Specifications
const serializer$4 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/watchlists",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: WatchlistList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion, skipToken],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const getOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/watchlists/{watchlistAlias}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Watchlist
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        watchlistAlias
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const deleteOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/watchlists/{watchlistAlias}",
    httpMethod: "DELETE",
    responses: {
        200: {
            headersMapper: WatchlistsDeleteHeaders
        },
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        watchlistAlias
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const createOrUpdateOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/watchlists/{watchlistAlias}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Watchlist
        },
        201: {
            bodyMapper: Watchlist,
            headersMapper: WatchlistsCreateOrUpdateHeaders
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: watchlist,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        watchlistAlias
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$4
};
const listNextOperationSpec$3 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: WatchlistList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$4
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing WatchlistItems operations. */
class WatchlistItemsImpl {
    /**
     * Initialize a new instance of the class WatchlistItems class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets all watchlist Items.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param watchlistAlias Watchlist Alias
     * @param options The options parameters.
     */
    list(resourceGroupName, workspaceName, watchlistAlias, options) {
        const iter = this.listPagingAll(resourceGroupName, workspaceName, watchlistAlias, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, workspaceName, watchlistAlias, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, workspaceName, watchlistAlias, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, workspaceName, watchlistAlias, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, workspaceName, watchlistAlias, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, workspaceName, watchlistAlias, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, workspaceName, watchlistAlias, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets all watchlist Items.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param watchlistAlias Watchlist Alias
     * @param options The options parameters.
     */
    _list(resourceGroupName, workspaceName, watchlistAlias, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, watchlistAlias, options }, listOperationSpec$2);
    }
    /**
     * Gets a watchlist, without its watchlist items.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param watchlistAlias Watchlist Alias
     * @param watchlistItemId Watchlist Item Id (GUID)
     * @param options The options parameters.
     */
    get(resourceGroupName, workspaceName, watchlistAlias, watchlistItemId, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            workspaceName,
            watchlistAlias,
            watchlistItemId,
            options
        }, getOperationSpec$1);
    }
    /**
     * Delete a watchlist item.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param watchlistAlias Watchlist Alias
     * @param watchlistItemId Watchlist Item Id (GUID)
     * @param options The options parameters.
     */
    delete(resourceGroupName, workspaceName, watchlistAlias, watchlistItemId, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            workspaceName,
            watchlistAlias,
            watchlistItemId,
            options
        }, deleteOperationSpec$1);
    }
    /**
     * Creates or updates a watchlist item.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param watchlistAlias Watchlist Alias
     * @param watchlistItemId Watchlist Item Id (GUID)
     * @param watchlistItem The watchlist item
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, workspaceName, watchlistAlias, watchlistItemId, watchlistItem, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            workspaceName,
            watchlistAlias,
            watchlistItemId,
            watchlistItem,
            options
        }, createOrUpdateOperationSpec$1);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param watchlistAlias Watchlist Alias
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, workspaceName, watchlistAlias, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, watchlistAlias, nextLink, options }, listNextOperationSpec$2);
    }
}
// Operation Specifications
const serializer$3 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/watchlists/{watchlistAlias}/watchlistItems",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: WatchlistItemList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion, skipToken],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        watchlistAlias
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const getOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/watchlists/{watchlistAlias}/watchlistItems/{watchlistItemId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: WatchlistItem
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        watchlistAlias,
        watchlistItemId
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const deleteOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/watchlists/{watchlistAlias}/watchlistItems/{watchlistItemId}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        watchlistAlias,
        watchlistItemId
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const createOrUpdateOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/watchlists/{watchlistAlias}/watchlistItems/{watchlistItemId}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: WatchlistItem
        },
        201: {
            bodyMapper: WatchlistItem
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: watchlistItem,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        watchlistAlias,
        watchlistItemId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$3
};
const listNextOperationSpec$2 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: WatchlistItemList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        nextLink,
        watchlistAlias
    ],
    headerParameters: [accept],
    serializer: serializer$3
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing DataConnectors operations. */
class DataConnectorsImpl {
    /**
     * Initialize a new instance of the class DataConnectors class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets all data connectors.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName, workspaceName, options) {
        const iter = this.listPagingAll(resourceGroupName, workspaceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, workspaceName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, workspaceName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, workspaceName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, workspaceName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, workspaceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, workspaceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets all data connectors.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    _list(resourceGroupName, workspaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, options }, listOperationSpec$1);
    }
    /**
     * Gets a data connector.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param dataConnectorId Connector ID
     * @param options The options parameters.
     */
    get(resourceGroupName, workspaceName, dataConnectorId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, dataConnectorId, options }, getOperationSpec);
    }
    /**
     * Creates or updates the data connector.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param dataConnectorId Connector ID
     * @param dataConnector The data connector
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, workspaceName, dataConnectorId, dataConnector, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            workspaceName,
            dataConnectorId,
            dataConnector,
            options
        }, createOrUpdateOperationSpec);
    }
    /**
     * Delete the data connector.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param dataConnectorId Connector ID
     * @param options The options parameters.
     */
    delete(resourceGroupName, workspaceName, dataConnectorId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, dataConnectorId, options }, deleteOperationSpec);
    }
    /**
     * Connects a data connector.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param dataConnectorId Connector ID
     * @param connectBody The data connector
     * @param options The options parameters.
     */
    connect(resourceGroupName, workspaceName, dataConnectorId, connectBody, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            workspaceName,
            dataConnectorId,
            connectBody,
            options
        }, connectOperationSpec);
    }
    /**
     * Disconnect a data connector.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param dataConnectorId Connector ID
     * @param options The options parameters.
     */
    disconnect(resourceGroupName, workspaceName, dataConnectorId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, dataConnectorId, options }, disconnectOperationSpec);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, workspaceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, nextLink, options }, listNextOperationSpec$1);
    }
}
// Operation Specifications
const serializer$2 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/dataConnectors",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DataConnectorList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/dataConnectors/{dataConnectorId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DataConnector
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        dataConnectorId
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/dataConnectors/{dataConnectorId}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: DataConnector
        },
        201: {
            bodyMapper: DataConnector
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: dataConnector,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        dataConnectorId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$2
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/dataConnectors/{dataConnectorId}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        dataConnectorId
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const connectOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/dataConnectors/{dataConnectorId}/connect",
    httpMethod: "POST",
    responses: {
        200: {},
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: connectBody,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        dataConnectorId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$2
};
const disconnectOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/dataConnectors/{dataConnectorId}/disconnect",
    httpMethod: "POST",
    responses: {
        200: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        dataConnectorId
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DataConnectorList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$2
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing DataConnectorsCheckRequirementsOperations operations. */
class DataConnectorsCheckRequirementsOperationsImpl {
    /**
     * Initialize a new instance of the class DataConnectorsCheckRequirementsOperations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get requirements state for a data connector type.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param dataConnectorsCheckRequirements The parameters for requirements check message
     * @param options The options parameters.
     */
    post(resourceGroupName, workspaceName, dataConnectorsCheckRequirements, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            workspaceName,
            dataConnectorsCheckRequirements,
            options
        }, postOperationSpec);
    }
}
// Operation Specifications
const serializer$1 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const postOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/dataConnectorsCheckRequirements",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: DataConnectorRequirementsState
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: dataConnectorsCheckRequirements,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$1
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Operations operations. */
class OperationsImpl {
    /**
     * Initialize a new instance of the class Operations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all operations available Azure Security Insights Resource Provider.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists all operations available Azure Security Insights Resource Provider.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/providers/Microsoft.SecurityInsights/operations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationsList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationsList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [$host, nextLink],
    headerParameters: [accept],
    serializer
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class SecurityInsights extends coreClient__namespace.ServiceClient {
    /**
     * Initializes a new instance of the SecurityInsights class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials, subscriptionId, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        if (subscriptionId === undefined) {
            throw new Error("'subscriptionId' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-securityinsight/1.0.0-beta.6`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName
            });
            this.pipeline.addPolicy(coreRestPipeline__namespace.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient__namespace.authorizeRequestOnClaimChallenge
                }
            }));
        }
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.apiVersion = options.apiVersion || "2022-09-01-preview";
        this.alertRules = new AlertRulesImpl(this);
        this.actions = new ActionsImpl(this);
        this.alertRuleTemplates = new AlertRuleTemplatesImpl(this);
        this.automationRules = new AutomationRulesImpl(this);
        this.incidents = new IncidentsImpl(this);
        this.bookmarks = new BookmarksImpl(this);
        this.bookmarkRelations = new BookmarkRelationsImpl(this);
        this.bookmarkOperations = new BookmarkOperationsImpl(this);
        this.iPGeodata = new IPGeodataImpl(this);
        this.domainWhois = new DomainWhoisImpl(this);
        this.entities = new EntitiesImpl(this);
        this.entitiesGetTimeline = new EntitiesGetTimelineImpl(this);
        this.entitiesRelations = new EntitiesRelationsImpl(this);
        this.entityRelations = new EntityRelationsImpl(this);
        this.entityQueries = new EntityQueriesImpl(this);
        this.entityQueryTemplates = new EntityQueryTemplatesImpl(this);
        this.fileImports = new FileImportsImpl(this);
        this.incidentComments = new IncidentCommentsImpl(this);
        this.incidentRelations = new IncidentRelationsImpl(this);
        this.metadata = new MetadataImpl(this);
        this.officeConsents = new OfficeConsentsImpl(this);
        this.sentinelOnboardingStates = new SentinelOnboardingStatesImpl(this);
        this.securityMLAnalyticsSettings = new SecurityMLAnalyticsSettingsImpl(this);
        this.productSettings = new ProductSettingsImpl(this);
        this.sourceControlOperations = new SourceControlOperationsImpl(this);
        this.sourceControls = new SourceControlsImpl(this);
        this.threatIntelligenceIndicator = new ThreatIntelligenceIndicatorImpl(this);
        this.threatIntelligenceIndicators = new ThreatIntelligenceIndicatorsImpl(this);
        this.threatIntelligenceIndicatorMetrics = new ThreatIntelligenceIndicatorMetricsImpl(this);
        this.watchlists = new WatchlistsImpl(this);
        this.watchlistItems = new WatchlistItemsImpl(this);
        this.dataConnectors = new DataConnectorsImpl(this);
        this.dataConnectorsCheckRequirementsOperations = new DataConnectorsCheckRequirementsOperationsImpl(this);
        this.operations = new OperationsImpl(this);
        this.addCustomApiVersionPolicy(options.apiVersion);
    }
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    addCustomApiVersionPolicy(apiVersion) {
        if (!apiVersion) {
            return;
        }
        const apiVersionPolicy = {
            name: "CustomApiVersionPolicy",
            sendRequest(request, next) {
                return tslib.__awaiter(this, void 0, void 0, function* () {
                    const param = request.url.split("?");
                    if (param.length > 1) {
                        const newParams = param[1].split("&").map((item) => {
                            if (item.indexOf("api-version") > -1) {
                                return "api-version=" + apiVersion;
                            }
                            else {
                                return item;
                            }
                        });
                        request.url = param[0] + "?" + newParams.join("&");
                    }
                    return next(request);
                });
            }
        };
        this.pipeline.addPolicy(apiVersionPolicy);
    }
}

exports.SecurityInsights = SecurityInsights;
exports.getContinuationToken = getContinuationToken;
//# sourceMappingURL=index.js.map
