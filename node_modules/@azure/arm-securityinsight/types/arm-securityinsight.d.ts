import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { PollerLike } from '@azure/core-lro';
import { PollOperationState } from '@azure/core-lro';

/** Represents AAD (Azure Active Directory) requirements check request. */
export declare interface AADCheckRequirements extends DataConnectorsCheckRequirements {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "AzureActiveDirectory";
    /** The tenant id to connect to, and get the data from. */
    tenantId?: string;
}

/** AAD (Azure Active Directory) requirements check properties. */
export declare interface AADCheckRequirementsProperties extends DataConnectorTenantId {
}

/** Represents AAD (Azure Active Directory) data connector. */
export declare interface AADDataConnector extends DataConnector {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "AzureActiveDirectory";
    /** The tenant id to connect to, and get the data from. */
    tenantId?: string;
    /** The available data types for the connector. */
    dataTypes?: AlertsDataTypeOfDataConnector;
}

/** AAD (Azure Active Directory) data connector properties. */
export declare interface AADDataConnectorProperties extends DataConnectorTenantId, DataConnectorWithAlertsProperties {
}

/** Represents AATP (Azure Advanced Threat Protection) requirements check request. */
export declare interface AatpCheckRequirements extends DataConnectorsCheckRequirements {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "AzureAdvancedThreatProtection";
    /** The tenant id to connect to, and get the data from. */
    tenantId?: string;
}

/** AATP (Azure Advanced Threat Protection) requirements check properties. */
export declare interface AatpCheckRequirementsProperties extends DataConnectorTenantId {
}

/** Represents AATP (Azure Advanced Threat Protection) data connector. */
export declare interface AatpDataConnector extends DataConnector {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "AzureAdvancedThreatProtection";
    /** The tenant id to connect to, and get the data from. */
    tenantId?: string;
    /** The available data types for the connector. */
    dataTypes?: AlertsDataTypeOfDataConnector;
}

/** AATP (Azure Advanced Threat Protection) data connector properties. */
export declare interface AatpDataConnectorProperties extends DataConnectorTenantId, DataConnectorWithAlertsProperties {
}

/** Represents an account entity. */
export declare interface AccountEntity extends Entity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "Account";
    /**
     * A bag of custom fields that should be part of the entity and will be presented to the user.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalData?: {
        [propertyName: string]: Record<string, unknown>;
    };
    /**
     * The graph item display name which is a short humanly readable description of the graph item instance. This property is optional and might be system generated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly friendlyName?: string;
    /**
     * The Azure Active Directory tenant id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly aadTenantId?: string;
    /**
     * The Azure Active Directory user id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly aadUserId?: string;
    /**
     * The name of the account. This field should hold only the name without any domain added to it, i.e. administrator.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly accountName?: string;
    /**
     * The display name of the account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly displayName?: string;
    /**
     * The Host entity id that contains the account in case it is a local account (not domain joined)
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly hostEntityId?: string;
    /**
     * Determines whether this is a domain account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isDomainJoined?: boolean;
    /**
     * The NetBIOS domain name as it appears in the alert format domain/username. Examples: NT AUTHORITY.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly ntDomain?: string;
    /**
     * The objectGUID attribute is a single-value attribute that is the unique identifier for the object, assigned by active directory.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly objectGuid?: string;
    /**
     * The Azure Active Directory Passport User ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly puid?: string;
    /**
     * The account security identifier, e.g. S-1-5-18.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly sid?: string;
    /**
     * The user principal name suffix for the account, in some cases it is also the domain name. Examples: contoso.com.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly upnSuffix?: string;
    /**
     * The fully qualified domain DNS name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dnsDomain?: string;
}

/** Account entity property bag. */
export declare interface AccountEntityProperties extends EntityCommonProperties {
    /**
     * The Azure Active Directory tenant id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly aadTenantId?: string;
    /**
     * The Azure Active Directory user id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly aadUserId?: string;
    /**
     * The name of the account. This field should hold only the name without any domain added to it, i.e. administrator.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly accountName?: string;
    /**
     * The display name of the account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly displayName?: string;
    /**
     * The Host entity id that contains the account in case it is a local account (not domain joined)
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly hostEntityId?: string;
    /**
     * Determines whether this is a domain account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isDomainJoined?: boolean;
    /**
     * The NetBIOS domain name as it appears in the alert format domain/username. Examples: NT AUTHORITY.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly ntDomain?: string;
    /**
     * The objectGUID attribute is a single-value attribute that is the unique identifier for the object, assigned by active directory.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly objectGuid?: string;
    /**
     * The Azure Active Directory Passport User ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly puid?: string;
    /**
     * The account security identifier, e.g. S-1-5-18.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly sid?: string;
    /**
     * The user principal name suffix for the account, in some cases it is also the domain name. Examples: contoso.com.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly upnSuffix?: string;
    /**
     * The fully qualified domain DNS name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dnsDomain?: string;
}

/** Action property bag base. */
export declare interface ActionPropertiesBase {
    /** Logic App Resource Id, /subscriptions/{my-subscription}/resourceGroups/{my-resource-group}/providers/Microsoft.Logic/workflows/{my-workflow-id}. */
    logicAppResourceId: string;
}

/** Action for alert rule. */
export declare interface ActionRequest extends ResourceWithEtag {
    /** Logic App Resource Id, /subscriptions/{my-subscription}/resourceGroups/{my-resource-group}/providers/Microsoft.Logic/workflows/{my-workflow-id}. */
    logicAppResourceId?: string;
    /** Logic App Callback URL for this specific workflow. */
    triggerUri?: string;
}

/** Action property bag. */
export declare interface ActionRequestProperties extends ActionPropertiesBase {
    /** Logic App Callback URL for this specific workflow. */
    triggerUri: string;
}

/** Action for alert rule. */
export declare interface ActionResponse extends ResourceWithEtag {
    /** Logic App Resource Id, /subscriptions/{my-subscription}/resourceGroups/{my-resource-group}/providers/Microsoft.Logic/workflows/{my-workflow-id}. */
    logicAppResourceId?: string;
    /** The name of the logic app's workflow. */
    workflowId?: string;
}

/** Action property bag. */
export declare interface ActionResponseProperties extends ActionPropertiesBase {
    /** The name of the logic app's workflow. */
    workflowId?: string;
}

/** Interface representing a Actions. */
export declare interface Actions {
    /**
     * Gets all actions of alert rule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param ruleId Alert rule ID
     * @param options The options parameters.
     */
    listByAlertRule(resourceGroupName: string, workspaceName: string, ruleId: string, options?: ActionsListByAlertRuleOptionalParams): PagedAsyncIterableIterator<ActionResponse>;
    /**
     * Gets the action of alert rule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param ruleId Alert rule ID
     * @param actionId Action ID
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, ruleId: string, actionId: string, options?: ActionsGetOptionalParams): Promise<ActionsGetResponse>;
    /**
     * Creates or updates the action of alert rule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param ruleId Alert rule ID
     * @param actionId Action ID
     * @param action The action
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, workspaceName: string, ruleId: string, actionId: string, action: ActionRequest, options?: ActionsCreateOrUpdateOptionalParams): Promise<ActionsCreateOrUpdateResponse>;
    /**
     * Delete the action of alert rule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param ruleId Alert rule ID
     * @param actionId Action ID
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, workspaceName: string, ruleId: string, actionId: string, options?: ActionsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface ActionsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type ActionsCreateOrUpdateResponse = ActionResponse;

/** Optional parameters. */
export declare interface ActionsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface ActionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ActionsGetResponse = ActionResponse;

/** List all the actions. */
export declare interface ActionsList {
    /**
     * URL to fetch the next set of actions.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
    /** Array of actions. */
    value: ActionResponse[];
}

/** Optional parameters. */
export declare interface ActionsListByAlertRuleNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByAlertRuleNext operation. */
export declare type ActionsListByAlertRuleNextResponse = ActionsList;

/** Optional parameters. */
export declare interface ActionsListByAlertRuleOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByAlertRule operation. */
export declare type ActionsListByAlertRuleResponse = ActionsList;

/**
 * Defines values for ActionType. \
 * {@link KnownActionType} can be used interchangeably with ActionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ModifyProperties**: Modify an object's properties \
 * **RunPlaybook**: Run a playbook on an object
 */
export declare type ActionType = string;

/** Represents Activity entity query. */
export declare interface ActivityCustomEntityQuery extends CustomEntityQuery {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "Activity";
    /** The entity query title */
    title?: string;
    /** The entity query content to display in timeline */
    content?: string;
    /** The entity query description */
    description?: string;
    /** The Activity query definitions */
    queryDefinitions?: ActivityEntityQueriesPropertiesQueryDefinitions;
    /** The type of the query's source entity */
    inputEntityType?: EntityType;
    /** List of the fields of the source entity that are required to run the query */
    requiredInputFieldsSets?: string[][];
    /** The query applied only to entities matching to all filters */
    entitiesFilter?: {
        [propertyName: string]: string[];
    };
    /** The template id this activity was created from */
    templateName?: string;
    /** Determines whether this activity is enabled or disabled. */
    enabled?: boolean;
    /**
     * The time the activity was created
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdTimeUtc?: Date;
    /**
     * The last time the activity was updated
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastModifiedTimeUtc?: Date;
}

/** The Activity query definitions */
export declare interface ActivityEntityQueriesPropertiesQueryDefinitions {
    /** The Activity query to run on a given entity */
    query?: string;
}

/** Represents Activity entity query. */
export declare interface ActivityEntityQuery extends EntityQuery {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "Activity";
    /** The entity query title */
    title?: string;
    /** The entity query content to display in timeline */
    content?: string;
    /** The entity query description */
    description?: string;
    /** The Activity query definitions */
    queryDefinitions?: ActivityEntityQueriesPropertiesQueryDefinitions;
    /** The type of the query's source entity */
    inputEntityType?: EntityType;
    /** List of the fields of the source entity that are required to run the query */
    requiredInputFieldsSets?: string[][];
    /** The query applied only to entities matching to all filters */
    entitiesFilter?: {
        [propertyName: string]: string[];
    };
    /** The template id this activity was created from */
    templateName?: string;
    /** Determines whether this activity is enabled or disabled. */
    enabled?: boolean;
    /**
     * The time the activity was created
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdTimeUtc?: Date;
    /**
     * The last time the activity was updated
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastModifiedTimeUtc?: Date;
}

/** Represents Activity entity query. */
export declare interface ActivityEntityQueryTemplate extends EntityQueryTemplate {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "Activity";
    /** The entity query title */
    title?: string;
    /** The entity query content to display in timeline */
    content?: string;
    /** The entity query description */
    description?: string;
    /** The Activity query definitions */
    queryDefinitions?: ActivityEntityQueryTemplatePropertiesQueryDefinitions;
    /** List of required data types for the given entity query template */
    dataTypes?: DataTypeDefinitions[];
    /** The type of the query's source entity */
    inputEntityType?: EntityType;
    /** List of the fields of the source entity that are required to run the query */
    requiredInputFieldsSets?: string[][];
    /** The query applied only to entities matching to all filters */
    entitiesFilter?: {
        [propertyName: string]: string[];
    };
}

/** The Activity query definitions */
export declare interface ActivityEntityQueryTemplatePropertiesQueryDefinitions {
    /** The Activity query to run on a given entity */
    query?: string;
    /** The dimensions we want to summarize the timeline results on, this is comma separated list */
    summarizeBy?: string;
}

/** Represents Activity timeline item. */
export declare interface ActivityTimelineItem extends EntityTimelineItem {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "Activity";
    /** The activity query id. */
    queryId: string;
    /** The grouping bucket start time. */
    bucketStartTimeUTC: Date;
    /** The grouping bucket end time. */
    bucketEndTimeUTC: Date;
    /** The time of the first activity in the grouping bucket. */
    firstActivityTimeUTC: Date;
    /** The time of the last activity in the grouping bucket. */
    lastActivityTimeUTC: Date;
    /** The activity timeline content. */
    content: string;
    /** The activity timeline title. */
    title: string;
}

/**
 * Defines values for AlertDetail. \
 * {@link KnownAlertDetail} can be used interchangeably with AlertDetail,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **DisplayName**: Alert display name \
 * **Severity**: Alert severity
 */
export declare type AlertDetail = string;

/** Settings for how to dynamically override alert static details */
export declare interface AlertDetailsOverride {
    /** the format containing columns name(s) to override the alert name */
    alertDisplayNameFormat?: string;
    /** the format containing columns name(s) to override the alert description */
    alertDescriptionFormat?: string;
    /** the column name to take the alert tactics from */
    alertTacticsColumnName?: string;
    /** the column name to take the alert severity from */
    alertSeverityColumnName?: string;
}

/** Alert rule. */
export declare interface AlertRule extends ResourceWithEtag {
    /** The kind of the alert rule */
    kind: AlertRuleKind;
}

/**
 * Defines values for AlertRuleKind. \
 * {@link KnownAlertRuleKind} can be used interchangeably with AlertRuleKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Scheduled** \
 * **MicrosoftSecurityIncidentCreation** \
 * **Fusion** \
 * **MLBehaviorAnalytics** \
 * **ThreatIntelligence** \
 * **NRT**
 */
export declare type AlertRuleKind = string;

/** Interface representing a AlertRules. */
export declare interface AlertRules {
    /**
     * Gets all alert rules.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, options?: AlertRulesListOptionalParams): PagedAsyncIterableIterator<AlertRuleUnion>;
    /**
     * Gets the alert rule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param ruleId Alert rule ID
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, ruleId: string, options?: AlertRulesGetOptionalParams): Promise<AlertRulesGetResponse>;
    /**
     * Creates or updates the alert rule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param ruleId Alert rule ID
     * @param alertRule The alert rule
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, workspaceName: string, ruleId: string, alertRule: AlertRuleUnion, options?: AlertRulesCreateOrUpdateOptionalParams): Promise<AlertRulesCreateOrUpdateResponse>;
    /**
     * Delete the alert rule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param ruleId Alert rule ID
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, workspaceName: string, ruleId: string, options?: AlertRulesDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface AlertRulesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type AlertRulesCreateOrUpdateResponse = AlertRuleUnion;

/** Optional parameters. */
export declare interface AlertRulesDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface AlertRulesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type AlertRulesGetResponse = AlertRuleUnion;

/** List all the alert rules. */
export declare interface AlertRulesList {
    /**
     * URL to fetch the next set of alert rules.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
    /** Array of alert rules. */
    value: AlertRuleUnion[];
}

/** Optional parameters. */
export declare interface AlertRulesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type AlertRulesListNextResponse = AlertRulesList;

/** Optional parameters. */
export declare interface AlertRulesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type AlertRulesListResponse = AlertRulesList;

/** Alert rule template. */
export declare interface AlertRuleTemplate extends Resource {
    /** The kind of the alert rule */
    kind: AlertRuleKind;
}

/** alert rule template data sources */
export declare interface AlertRuleTemplateDataSource {
    /** The connector id that provides the following data types */
    connectorId?: string;
    /** The data types used by the alert rule template */
    dataTypes?: string[];
}

/** Base alert rule template property bag. */
export declare interface AlertRuleTemplatePropertiesBase {
    /** the number of alert rules that were created by this template */
    alertRulesCreatedByTemplateCount?: number;
    /**
     * The last time that this alert rule template has been updated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastUpdatedDateUTC?: Date;
    /**
     * The time that this alert rule template has been added.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdDateUTC?: Date;
    /** The description of the alert rule template. */
    description?: string;
    /** The display name for alert rule template. */
    displayName?: string;
    /** The required data sources for this template */
    requiredDataConnectors?: AlertRuleTemplateDataSource[];
    /** The alert rule template status. */
    status?: TemplateStatus;
}

/** Interface representing a AlertRuleTemplates. */
export declare interface AlertRuleTemplates {
    /**
     * Gets all alert rule templates.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, options?: AlertRuleTemplatesListOptionalParams): PagedAsyncIterableIterator<AlertRuleTemplateUnion>;
    /**
     * Gets the alert rule template.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param alertRuleTemplateId Alert rule template ID
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, alertRuleTemplateId: string, options?: AlertRuleTemplatesGetOptionalParams): Promise<AlertRuleTemplatesGetResponse>;
}

/** Optional parameters. */
export declare interface AlertRuleTemplatesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type AlertRuleTemplatesGetResponse = AlertRuleTemplateUnion;

/** List all the alert rule templates. */
export declare interface AlertRuleTemplatesList {
    /**
     * URL to fetch the next set of alert rule templates.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
    /** Array of alert rule templates. */
    value: AlertRuleTemplateUnion[];
}

/** Optional parameters. */
export declare interface AlertRuleTemplatesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type AlertRuleTemplatesListNextResponse = AlertRuleTemplatesList;

/** Optional parameters. */
export declare interface AlertRuleTemplatesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type AlertRuleTemplatesListResponse = AlertRuleTemplatesList;

export declare type AlertRuleTemplateUnion = AlertRuleTemplate | MLBehaviorAnalyticsAlertRuleTemplate | FusionAlertRuleTemplate | ThreatIntelligenceAlertRuleTemplate | MicrosoftSecurityIncidentCreationAlertRuleTemplate | ScheduledAlertRuleTemplate | NrtAlertRuleTemplate;

/** Alert rule template with MITRE property bag. */
export declare interface AlertRuleTemplateWithMitreProperties extends AlertRuleTemplatePropertiesBase {
    /** The tactics of the alert rule */
    tactics?: AttackTactic[];
    /** The techniques of the alert rule */
    techniques?: string[];
}

export declare type AlertRuleUnion = AlertRule | MLBehaviorAnalyticsAlertRule | FusionAlertRule | ThreatIntelligenceAlertRule | MicrosoftSecurityIncidentCreationAlertRule | ScheduledAlertRule | NrtAlertRule;

/** Alerts data type for data connectors. */
export declare interface AlertsDataTypeOfDataConnector {
    /** Alerts data type connection. */
    alerts: DataConnectorDataTypeCommon;
}

/**
 * Defines values for AlertSeverity. \
 * {@link KnownAlertSeverity} can be used interchangeably with AlertSeverity,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **High**: High severity \
 * **Medium**: Medium severity \
 * **Low**: Low severity \
 * **Informational**: Informational severity
 */
export declare type AlertSeverity = string;

/**
 * Defines values for AlertStatus. \
 * {@link KnownAlertStatus} can be used interchangeably with AlertStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown**: Unknown value \
 * **New**: New alert \
 * **Resolved**: Alert closed after handling \
 * **Dismissed**: Alert dismissed as false positive \
 * **InProgress**: Alert is being handled
 */
export declare type AlertStatus = string;

/** Settings with single toggle. */
export declare interface Anomalies extends Settings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "Anomalies";
    /**
     * Determines whether the setting is enable or disabled.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isEnabled?: boolean;
}

/** Represents Anomaly Security ML Analytics Settings */
export declare interface AnomalySecurityMLAnalyticsSettings extends SecurityMLAnalyticsSetting {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "Anomaly";
    /** The description of the SecurityMLAnalyticsSettings. */
    description?: string;
    /** The display name for settings created by this SecurityMLAnalyticsSettings. */
    displayName?: string;
    /** Determines whether this settings is enabled or disabled. */
    enabled?: boolean;
    /**
     * The last time that this SecurityMLAnalyticsSettings has been modified.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastModifiedUtc?: Date;
    /** The required data sources for this SecurityMLAnalyticsSettings */
    requiredDataConnectors?: SecurityMLAnalyticsSettingsDataSource[];
    /** The tactics of the SecurityMLAnalyticsSettings */
    tactics?: AttackTactic[];
    /** The techniques of the SecurityMLAnalyticsSettings */
    techniques?: string[];
    /** The anomaly version of the AnomalySecurityMLAnalyticsSettings. */
    anomalyVersion?: string;
    /** The customizable observations of the AnomalySecurityMLAnalyticsSettings. */
    customizableObservations?: Record<string, unknown>;
    /** The frequency that this SecurityMLAnalyticsSettings will be run. */
    frequency?: string;
    /** The anomaly SecurityMLAnalyticsSettings status */
    settingsStatus?: SettingsStatus;
    /** Determines whether this anomaly security ml analytics settings is a default settings */
    isDefaultSettings?: boolean;
    /** The anomaly settings version of the Anomaly security ml analytics settings that dictates whether job version gets updated or not. */
    anomalySettingsVersion?: number;
    /** The anomaly settings definition Id */
    settingsDefinitionId?: string;
}

/** Represents anomaly timeline item. */
export declare interface AnomalyTimelineItem extends EntityTimelineItem {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "Anomaly";
    /** The anomaly azure resource id. */
    azureResourceId: string;
    /** The anomaly product name. */
    productName?: string;
    /** The anomaly description. */
    description?: string;
    /** The anomaly name. */
    displayName: string;
    /** The anomaly end time. */
    endTimeUtc: Date;
    /** The anomaly start time. */
    startTimeUtc: Date;
    /** The anomaly generated time. */
    timeGenerated: Date;
    /** The name of the anomaly vendor. */
    vendor?: string;
    /** The intent of the anomaly. */
    intent?: string;
    /** The techniques of the anomaly. */
    techniques?: string[];
    /** The reasons that cause the anomaly. */
    reasons?: string[];
}

/**
 * Defines values for AntispamMailDirection. \
 * {@link KnownAntispamMailDirection} can be used interchangeably with AntispamMailDirection,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown**: Unknown \
 * **Inbound**: Inbound \
 * **Outbound**: Outbound \
 * **Intraorg**: Intraorg
 */
export declare type AntispamMailDirection = string;

/** Represents ASC (Azure Security Center) requirements check request. */
export declare interface ASCCheckRequirements extends DataConnectorsCheckRequirements {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "AzureSecurityCenter";
    /** The subscription id to connect to, and get the data from. */
    subscriptionId?: string;
}

/** Represents ASC (Azure Security Center) data connector. */
export declare interface ASCDataConnector extends DataConnector {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "AzureSecurityCenter";
    /** The available data types for the connector. */
    dataTypes?: AlertsDataTypeOfDataConnector;
    /** The subscription id to connect to, and get the data from. */
    subscriptionId?: string;
}

/** ASC (Azure Security Center) data connector properties. */
export declare interface ASCDataConnectorProperties extends DataConnectorWithAlertsProperties {
    /** The subscription id to connect to, and get the data from. */
    subscriptionId?: string;
}

/**
 * Defines values for AttackTactic. \
 * {@link KnownAttackTactic} can be used interchangeably with AttackTactic,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Reconnaissance** \
 * **ResourceDevelopment** \
 * **InitialAccess** \
 * **Execution** \
 * **Persistence** \
 * **PrivilegeEscalation** \
 * **DefenseEvasion** \
 * **CredentialAccess** \
 * **Discovery** \
 * **LateralMovement** \
 * **Collection** \
 * **Exfiltration** \
 * **CommandAndControl** \
 * **Impact** \
 * **PreAttack** \
 * **ImpairProcessControl** \
 * **InhibitResponseFunction**
 */
export declare type AttackTactic = string;

export declare interface AutomationRule extends ResourceWithEtag {
    /** The display name of the automation rule. */
    displayName: string;
    /** The order of execution of the automation rule. */
    order: number;
    /** Describes automation rule triggering logic. */
    triggeringLogic: AutomationRuleTriggeringLogic;
    /** The actions to execute when the automation rule is triggered. */
    actions: AutomationRuleActionUnion[];
    /**
     * The last time the automation rule was updated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastModifiedTimeUtc?: Date;
    /**
     * The time the automation rule was created.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdTimeUtc?: Date;
    /**
     * Information on the client (user or application) that made some action
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastModifiedBy?: ClientInfo;
    /**
     * Information on the client (user or application) that made some action
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdBy?: ClientInfo;
}

/** Describes an automation rule action. */
export declare interface AutomationRuleAction {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    actionType: "ModifyProperties" | "RunPlaybook";
    order: number;
}

export declare type AutomationRuleActionUnion = AutomationRuleAction | AutomationRuleModifyPropertiesAction | AutomationRuleRunPlaybookAction;

export declare interface AutomationRuleBooleanCondition {
    operator?: AutomationRuleBooleanConditionSupportedOperator;
    innerConditions?: AutomationRuleConditionUnion[];
}

/**
 * Defines values for AutomationRuleBooleanConditionSupportedOperator. \
 * {@link KnownAutomationRuleBooleanConditionSupportedOperator} can be used interchangeably with AutomationRuleBooleanConditionSupportedOperator,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **And**: Evaluates as true if all the item conditions are evaluated as true \
 * **Or**: Evaluates as true if at least one of the item conditions are evaluated as true
 */
export declare type AutomationRuleBooleanConditionSupportedOperator = string;

/** Describes an automation rule condition. */
export declare interface AutomationRuleCondition {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    conditionType: "Boolean" | "PropertyArrayChanged" | "PropertyArray" | "PropertyChanged" | "Property";
}

export declare type AutomationRuleConditionUnion = AutomationRuleCondition | BooleanConditionProperties | PropertyArrayChangedConditionProperties | PropertyArrayConditionProperties | PropertyChangedConditionProperties | PropertyConditionProperties;

/** Describes an automation rule action to modify an object's properties */
export declare interface AutomationRuleModifyPropertiesAction extends AutomationRuleAction {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    actionType: "ModifyProperties";
    actionConfiguration?: IncidentPropertiesAction;
}

/**
 * Defines values for AutomationRulePropertyArrayChangedConditionSupportedArrayType. \
 * {@link KnownAutomationRulePropertyArrayChangedConditionSupportedArrayType} can be used interchangeably with AutomationRulePropertyArrayChangedConditionSupportedArrayType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Alerts**: Evaluate the condition on the alerts \
 * **Labels**: Evaluate the condition on the labels \
 * **Tactics**: Evaluate the condition on the tactics \
 * **Comments**: Evaluate the condition on the comments
 */
export declare type AutomationRulePropertyArrayChangedConditionSupportedArrayType = string;

/**
 * Defines values for AutomationRulePropertyArrayChangedConditionSupportedChangeType. \
 * {@link KnownAutomationRulePropertyArrayChangedConditionSupportedChangeType} can be used interchangeably with AutomationRulePropertyArrayChangedConditionSupportedChangeType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Added**: Evaluate the condition on items added to the array
 */
export declare type AutomationRulePropertyArrayChangedConditionSupportedChangeType = string;

export declare interface AutomationRulePropertyArrayChangedValuesCondition {
    arrayType?: AutomationRulePropertyArrayChangedConditionSupportedArrayType;
    changeType?: AutomationRulePropertyArrayChangedConditionSupportedChangeType;
}

/**
 * Defines values for AutomationRulePropertyArrayConditionSupportedArrayConditionType. \
 * {@link KnownAutomationRulePropertyArrayConditionSupportedArrayConditionType} can be used interchangeably with AutomationRulePropertyArrayConditionSupportedArrayConditionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AnyItem**: Evaluate the condition as true if any item fulfills it
 */
export declare type AutomationRulePropertyArrayConditionSupportedArrayConditionType = string;

/**
 * Defines values for AutomationRulePropertyArrayConditionSupportedArrayType. \
 * {@link KnownAutomationRulePropertyArrayConditionSupportedArrayType} can be used interchangeably with AutomationRulePropertyArrayConditionSupportedArrayType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **CustomDetails**: Evaluate the condition on the custom detail keys \
 * **CustomDetailValues**: Evaluate the condition on a custom detail's values
 */
export declare type AutomationRulePropertyArrayConditionSupportedArrayType = string;

export declare interface AutomationRulePropertyArrayValuesCondition {
    arrayType?: AutomationRulePropertyArrayConditionSupportedArrayType;
    arrayConditionType?: AutomationRulePropertyArrayConditionSupportedArrayConditionType;
    itemConditions?: AutomationRuleConditionUnion[];
}

/**
 * Defines values for AutomationRulePropertyChangedConditionSupportedChangedType. \
 * {@link KnownAutomationRulePropertyChangedConditionSupportedChangedType} can be used interchangeably with AutomationRulePropertyChangedConditionSupportedChangedType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ChangedFrom**: Evaluate the condition on the previous value of the property \
 * **ChangedTo**: Evaluate the condition on the updated value of the property
 */
export declare type AutomationRulePropertyChangedConditionSupportedChangedType = string;

/**
 * Defines values for AutomationRulePropertyChangedConditionSupportedPropertyType. \
 * {@link KnownAutomationRulePropertyChangedConditionSupportedPropertyType} can be used interchangeably with AutomationRulePropertyChangedConditionSupportedPropertyType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **IncidentSeverity**: Evaluate the condition on the incident severity \
 * **IncidentStatus**: Evaluate the condition on the incident status \
 * **IncidentOwner**: Evaluate the condition on the incident owner
 */
export declare type AutomationRulePropertyChangedConditionSupportedPropertyType = string;

/**
 * Defines values for AutomationRulePropertyConditionSupportedOperator. \
 * {@link KnownAutomationRulePropertyConditionSupportedOperator} can be used interchangeably with AutomationRulePropertyConditionSupportedOperator,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Equals**: Evaluates if the property equals at least one of the condition values \
 * **NotEquals**: Evaluates if the property does not equal any of the condition values \
 * **Contains**: Evaluates if the property contains at least one of the condition values \
 * **NotContains**: Evaluates if the property does not contain any of the condition values \
 * **StartsWith**: Evaluates if the property starts with any of the condition values \
 * **NotStartsWith**: Evaluates if the property does not start with any of the condition values \
 * **EndsWith**: Evaluates if the property ends with any of the condition values \
 * **NotEndsWith**: Evaluates if the property does not end with any of the condition values
 */
export declare type AutomationRulePropertyConditionSupportedOperator = string;

/**
 * Defines values for AutomationRulePropertyConditionSupportedProperty. \
 * {@link KnownAutomationRulePropertyConditionSupportedProperty} can be used interchangeably with AutomationRulePropertyConditionSupportedProperty,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **IncidentTitle**: The title of the incident \
 * **IncidentDescription**: The description of the incident \
 * **IncidentSeverity**: The severity of the incident \
 * **IncidentStatus**: The status of the incident \
 * **IncidentRelatedAnalyticRuleIds**: The related Analytic rule ids of the incident \
 * **IncidentTactics**: The tactics of the incident \
 * **IncidentLabel**: The labels of the incident \
 * **IncidentProviderName**: The provider name of the incident \
 * **IncidentUpdatedBySource**: The update source of the incident \
 * **IncidentCustomDetailsKey**: The incident custom detail key \
 * **IncidentCustomDetailsValue**: The incident custom detail value \
 * **AccountAadTenantId**: The account Azure Active Directory tenant id \
 * **AccountAadUserId**: The account Azure Active Directory user id \
 * **AccountName**: The account name \
 * **AccountNTDomain**: The account NetBIOS domain name \
 * **AccountPUID**: The account Azure Active Directory Passport User ID \
 * **AccountSid**: The account security identifier \
 * **AccountObjectGuid**: The account unique identifier \
 * **AccountUPNSuffix**: The account user principal name suffix \
 * **AlertProductNames**: The name of the product of the alert \
 * **AlertAnalyticRuleIds**: The analytic rule ids of the alert \
 * **AzureResourceResourceId**: The Azure resource id \
 * **AzureResourceSubscriptionId**: The Azure resource subscription id \
 * **CloudApplicationAppId**: The cloud application identifier \
 * **CloudApplicationAppName**: The cloud application name \
 * **DNSDomainName**: The dns record domain name \
 * **FileDirectory**: The file directory full path \
 * **FileName**: The file name without path \
 * **FileHashValue**: The file hash value \
 * **HostAzureID**: The host Azure resource id \
 * **HostName**: The host name without domain \
 * **HostNetBiosName**: The host NetBIOS name \
 * **HostNTDomain**: The host NT domain \
 * **HostOSVersion**: The host operating system \
 * **IoTDeviceId**: "The IoT device id \
 * **IoTDeviceName**: The IoT device name \
 * **IoTDeviceType**: The IoT device type \
 * **IoTDeviceVendor**: The IoT device vendor \
 * **IoTDeviceModel**: The IoT device model \
 * **IoTDeviceOperatingSystem**: The IoT device operating system \
 * **IPAddress**: The IP address \
 * **MailboxDisplayName**: The mailbox display name \
 * **MailboxPrimaryAddress**: The mailbox primary address \
 * **MailboxUPN**: The mailbox user principal name \
 * **MailMessageDeliveryAction**: The mail message delivery action \
 * **MailMessageDeliveryLocation**: The mail message delivery location \
 * **MailMessageRecipient**: The mail message recipient \
 * **MailMessageSenderIP**: The mail message sender IP address \
 * **MailMessageSubject**: The mail message subject \
 * **MailMessageP1Sender**: The mail message P1 sender \
 * **MailMessageP2Sender**: The mail message P2 sender \
 * **MalwareCategory**: The malware category \
 * **MalwareName**: The malware name \
 * **ProcessCommandLine**: The process execution command line \
 * **ProcessId**: The process id \
 * **RegistryKey**: The registry key path \
 * **RegistryValueData**: The registry key value in string formatted representation \
 * **Url**: The url
 */
export declare type AutomationRulePropertyConditionSupportedProperty = string;

export declare interface AutomationRulePropertyValuesChangedCondition {
    propertyName?: AutomationRulePropertyChangedConditionSupportedPropertyType;
    changeType?: AutomationRulePropertyChangedConditionSupportedChangedType;
    operator?: AutomationRulePropertyConditionSupportedOperator;
    propertyValues?: string[];
}

export declare interface AutomationRulePropertyValuesCondition {
    /** The property to evaluate in an automation rule property condition. */
    propertyName?: AutomationRulePropertyConditionSupportedProperty;
    operator?: AutomationRulePropertyConditionSupportedOperator;
    propertyValues?: string[];
}

/** Describes an automation rule action to run a playbook */
export declare interface AutomationRuleRunPlaybookAction extends AutomationRuleAction {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    actionType: "RunPlaybook";
    actionConfiguration?: PlaybookActionProperties;
}

/** Interface representing a AutomationRules. */
export declare interface AutomationRules {
    /**
     * Gets all automation rules.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, options?: AutomationRulesListOptionalParams): PagedAsyncIterableIterator<AutomationRule>;
    /**
     * Gets the automation rule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param automationRuleId Automation rule ID
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, automationRuleId: string, options?: AutomationRulesGetOptionalParams): Promise<AutomationRulesGetResponse>;
    /**
     * Creates or updates the automation rule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param automationRuleId Automation rule ID
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, workspaceName: string, automationRuleId: string, options?: AutomationRulesCreateOrUpdateOptionalParams): Promise<AutomationRulesCreateOrUpdateResponse>;
    /**
     * Delete the automation rule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param automationRuleId Automation rule ID
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, workspaceName: string, automationRuleId: string, options?: AutomationRulesDeleteOptionalParams): Promise<AutomationRulesDeleteResponse>;
}

/** Optional parameters. */
export declare interface AutomationRulesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** The automation rule */
    automationRuleToUpsert?: AutomationRule;
}

/** Contains response data for the createOrUpdate operation. */
export declare type AutomationRulesCreateOrUpdateResponse = AutomationRule;

/** Optional parameters. */
export declare interface AutomationRulesDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the delete operation. */
export declare type AutomationRulesDeleteResponse = Record<string, unknown>;

/** Optional parameters. */
export declare interface AutomationRulesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type AutomationRulesGetResponse = AutomationRule;

export declare interface AutomationRulesList {
    value?: AutomationRule[];
    nextLink?: string;
}

/** Optional parameters. */
export declare interface AutomationRulesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type AutomationRulesListNextResponse = AutomationRulesList;

/** Optional parameters. */
export declare interface AutomationRulesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type AutomationRulesListResponse = AutomationRulesList;

/** Describes automation rule triggering logic. */
export declare interface AutomationRuleTriggeringLogic {
    /** Determines whether the automation rule is enabled or disabled. */
    isEnabled: boolean;
    /** Determines when the automation rule should automatically expire and be disabled. */
    expirationTimeUtc?: Date;
    triggersOn: TriggersOn;
    triggersWhen: TriggersWhen;
    /** The conditions to evaluate to determine if the automation rule should be triggered on a given object. */
    conditions?: AutomationRuleConditionUnion[];
}

/** Connector Availability Status */
export declare interface Availability {
    /** The connector Availability Status */
    status?: 1;
    /** Set connector as preview */
    isPreview?: boolean;
}

/** Amazon Web Services CloudTrail requirements check request. */
export declare interface AwsCloudTrailCheckRequirements extends DataConnectorsCheckRequirements {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "AmazonWebServicesCloudTrail";
}

/** Represents Amazon Web Services CloudTrail data connector. */
export declare interface AwsCloudTrailDataConnector extends DataConnector {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "AmazonWebServicesCloudTrail";
    /** The Aws Role Arn (with CloudTrailReadOnly policy) that is used to access the Aws account. */
    awsRoleArn?: string;
    /** The available data types for the connector. */
    dataTypes?: AwsCloudTrailDataConnectorDataTypes;
}

/** The available data types for Amazon Web Services CloudTrail data connector. */
export declare interface AwsCloudTrailDataConnectorDataTypes {
    /** Logs data type. */
    logs: AwsCloudTrailDataConnectorDataTypesLogs;
}

/** Logs data type. */
export declare interface AwsCloudTrailDataConnectorDataTypesLogs extends DataConnectorDataTypeCommon {
}

/** Amazon Web Services S3 requirements check request. */
export declare interface AwsS3CheckRequirements extends DataConnectorsCheckRequirements {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "AmazonWebServicesS3";
}

/** Represents Amazon Web Services S3 data connector. */
export declare interface AwsS3DataConnector extends DataConnector {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "AmazonWebServicesS3";
    /** The logs destination table name in LogAnalytics. */
    destinationTable?: string;
    /** The AWS sqs urls for the connector. */
    sqsUrls?: string[];
    /** The Aws Role Arn that is used to access the Aws account. */
    roleArn?: string;
    /** The available data types for the connector. */
    dataTypes?: AwsS3DataConnectorDataTypes;
}

/** The available data types for Amazon Web Services S3 data connector. */
export declare interface AwsS3DataConnectorDataTypes {
    /** Logs data type. */
    logs: AwsS3DataConnectorDataTypesLogs;
}

/** Logs data type. */
export declare interface AwsS3DataConnectorDataTypesLogs extends DataConnectorDataTypeCommon {
}

/** Resources created in Azure DevOps repository. */
export declare interface AzureDevOpsResourceInfo {
    /** Id of the pipeline created for the source-control. */
    pipelineId?: string;
    /** Id of the service-connection created for the source-control. */
    serviceConnectionId?: string;
}

/** Represents an azure resource entity. */
export declare interface AzureResourceEntity extends Entity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "AzureResource";
    /**
     * A bag of custom fields that should be part of the entity and will be presented to the user.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalData?: {
        [propertyName: string]: Record<string, unknown>;
    };
    /**
     * The graph item display name which is a short humanly readable description of the graph item instance. This property is optional and might be system generated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly friendlyName?: string;
    /**
     * The azure resource id of the resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resourceId?: string;
    /**
     * The subscription id of the resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly subscriptionId?: string;
}

/** AzureResource entity property bag. */
export declare interface AzureResourceEntityProperties extends EntityCommonProperties {
    /**
     * The azure resource id of the resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resourceId?: string;
    /**
     * The subscription id of the resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly subscriptionId?: string;
}

/** Represents a bookmark in Azure Security Insights. */
export declare interface Bookmark extends ResourceWithEtag {
    /** The time the bookmark was created */
    created?: Date;
    /** Describes a user that created the bookmark */
    createdBy?: UserInfo;
    /** The display name of the bookmark */
    displayName?: string;
    /** List of labels relevant to this bookmark */
    labels?: string[];
    /** The notes of the bookmark */
    notes?: string;
    /** The query of the bookmark. */
    query?: string;
    /** The query result of the bookmark. */
    queryResult?: string;
    /** The last time the bookmark was updated */
    updated?: Date;
    /** Describes a user that updated the bookmark */
    updatedBy?: UserInfo;
    /** The bookmark event time */
    eventTime?: Date;
    /** The start time for the query */
    queryStartTime?: Date;
    /** The end time for the query */
    queryEndTime?: Date;
    /** Describes an incident that relates to bookmark */
    incidentInfo?: IncidentInfo;
    /** Describes the entity mappings of the bookmark */
    entityMappings?: BookmarkEntityMappings[];
    /** A list of relevant mitre attacks */
    tactics?: AttackTactic[];
    /** A list of relevant mitre techniques */
    techniques?: string[];
}

/** Describes the entity mappings of a single entity */
export declare interface BookmarkEntityMappings {
    /** The entity type */
    entityType?: string;
    /** Array of fields mapping for that entity type */
    fieldMappings?: EntityFieldMapping[];
}

/** Contains response data for the expand operation. */
export declare type BookmarkExpandOperationResponse = BookmarkExpandResponse;

/** Optional parameters. */
export declare interface BookmarkExpandOptionalParams extends coreClient.OperationOptions {
}

/** The parameters required to execute an expand operation on the given bookmark. */
export declare interface BookmarkExpandParameters {
    /** The end date filter, so the only expansion results returned are before this date. */
    endTime?: Date;
    /** The Id of the expansion to perform. */
    expansionId?: string;
    /** The start date filter, so the only expansion results returned are after this date. */
    startTime?: Date;
}

/** The entity expansion result operation response. */
export declare interface BookmarkExpandResponse {
    /** The metadata from the expansion operation results. */
    metaData?: ExpansionResultsMetadata;
    /** The expansion result values. */
    value?: BookmarkExpandResponseValue;
}

/** The expansion result values. */
export declare interface BookmarkExpandResponseValue {
    /** Array of the expansion result entities. */
    entities?: EntityUnion[];
    /** Array of expansion result connected entities */
    edges?: ConnectedEntity[];
}

/** List all the bookmarks. */
export declare interface BookmarkList {
    /**
     * URL to fetch the next set of bookmarks.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
    /** Array of bookmarks. */
    value: Bookmark[];
}

/** Interface representing a BookmarkOperations. */
export declare interface BookmarkOperations {
    /**
     * Expand an bookmark
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param bookmarkId Bookmark ID
     * @param parameters The parameters required to execute an expand operation on the given bookmark.
     * @param options The options parameters.
     */
    expand(resourceGroupName: string, workspaceName: string, bookmarkId: string, parameters: BookmarkExpandParameters, options?: BookmarkExpandOptionalParams): Promise<BookmarkExpandOperationResponse>;
}

/** Interface representing a BookmarkRelations. */
export declare interface BookmarkRelations {
    /**
     * Gets all bookmark relations.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param bookmarkId Bookmark ID
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, bookmarkId: string, options?: BookmarkRelationsListOptionalParams): PagedAsyncIterableIterator<Relation>;
    /**
     * Gets a bookmark relation.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param bookmarkId Bookmark ID
     * @param relationName Relation Name
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, bookmarkId: string, relationName: string, options?: BookmarkRelationsGetOptionalParams): Promise<BookmarkRelationsGetResponse>;
    /**
     * Creates the bookmark relation.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param bookmarkId Bookmark ID
     * @param relationName Relation Name
     * @param relation The relation model
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, workspaceName: string, bookmarkId: string, relationName: string, relation: Relation, options?: BookmarkRelationsCreateOrUpdateOptionalParams): Promise<BookmarkRelationsCreateOrUpdateResponse>;
    /**
     * Delete the bookmark relation.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param bookmarkId Bookmark ID
     * @param relationName Relation Name
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, workspaceName: string, bookmarkId: string, relationName: string, options?: BookmarkRelationsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface BookmarkRelationsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type BookmarkRelationsCreateOrUpdateResponse = Relation;

/** Optional parameters. */
export declare interface BookmarkRelationsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface BookmarkRelationsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type BookmarkRelationsGetResponse = Relation;

/** Optional parameters. */
export declare interface BookmarkRelationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type BookmarkRelationsListNextResponse = RelationList;

/** Optional parameters. */
export declare interface BookmarkRelationsListOptionalParams extends coreClient.OperationOptions {
    /** Filters the results, based on a Boolean condition. Optional. */
    filter?: string;
    /** Sorts the results. Optional. */
    orderby?: string;
    /** Returns only the first n results. Optional. */
    top?: number;
    /** Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. Optional. */
    skipToken?: string;
}

/** Contains response data for the list operation. */
export declare type BookmarkRelationsListResponse = RelationList;

/** Interface representing a Bookmarks. */
export declare interface Bookmarks {
    /**
     * Gets all bookmarks.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, options?: BookmarksListOptionalParams): PagedAsyncIterableIterator<Bookmark>;
    /**
     * Gets a bookmark.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param bookmarkId Bookmark ID
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, bookmarkId: string, options?: BookmarksGetOptionalParams): Promise<BookmarksGetResponse>;
    /**
     * Creates or updates the bookmark.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param bookmarkId Bookmark ID
     * @param bookmark The bookmark
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, workspaceName: string, bookmarkId: string, bookmark: Bookmark, options?: BookmarksCreateOrUpdateOptionalParams): Promise<BookmarksCreateOrUpdateResponse>;
    /**
     * Delete the bookmark.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param bookmarkId Bookmark ID
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, workspaceName: string, bookmarkId: string, options?: BookmarksDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface BookmarksCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type BookmarksCreateOrUpdateResponse = Bookmark;

/** Optional parameters. */
export declare interface BookmarksDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface BookmarksGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type BookmarksGetResponse = Bookmark;

/** Optional parameters. */
export declare interface BookmarksListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type BookmarksListNextResponse = BookmarkList;

/** Optional parameters. */
export declare interface BookmarksListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type BookmarksListResponse = BookmarkList;

/** Represents bookmark timeline item. */
export declare interface BookmarkTimelineItem extends EntityTimelineItem {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "Bookmark";
    /** The bookmark azure resource id. */
    azureResourceId: string;
    /** The bookmark display name. */
    displayName?: string;
    /** The notes of the bookmark */
    notes?: string;
    /** The bookmark end time. */
    endTimeUtc?: Date;
    /** The bookmark start time. */
    startTimeUtc?: Date;
    /** The bookmark event time. */
    eventTime?: Date;
    /** Describes a user that created the bookmark */
    createdBy?: UserInfo;
    /** List of labels relevant to this bookmark */
    labels?: string[];
}

/** Describes an automation rule condition that applies a boolean operator (e.g AND, OR) to conditions */
export declare interface BooleanConditionProperties extends AutomationRuleCondition {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    conditionType: "Boolean";
    conditionProperties?: AutomationRuleBooleanCondition;
}

/** Information on the client (user or application) that made some action */
export declare interface ClientInfo {
    /** The email of the client. */
    email?: string;
    /** The name of the client. */
    name?: string;
    /** The object id of the client. */
    objectId?: string;
    /** The user principal name of the client. */
    userPrincipalName?: string;
}

/** Represents a cloud application entity. */
export declare interface CloudApplicationEntity extends Entity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "CloudApplication";
    /**
     * A bag of custom fields that should be part of the entity and will be presented to the user.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalData?: {
        [propertyName: string]: Record<string, unknown>;
    };
    /**
     * The graph item display name which is a short humanly readable description of the graph item instance. This property is optional and might be system generated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly friendlyName?: string;
    /**
     * The technical identifier of the application.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly appId?: number;
    /**
     * The name of the related cloud application.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly appName?: string;
    /**
     * The user defined instance name of the cloud application. It is often used to distinguish between several applications of the same type that a customer has.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly instanceName?: string;
}

/** CloudApplication entity property bag. */
export declare interface CloudApplicationEntityProperties extends EntityCommonProperties {
    /**
     * The technical identifier of the application.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly appId?: number;
    /**
     * The name of the related cloud application.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly appName?: string;
    /**
     * The user defined instance name of the cloud application. It is often used to distinguish between several applications of the same type that a customer has.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly instanceName?: string;
}

/** Error response structure. */
export declare interface CloudError {
    /** Error data */
    error?: CloudErrorBody;
}

/** Error details. */
export declare interface CloudErrorBody {
    /**
     * An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * A message describing the error, intended to be suitable for display in a user interface.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
}

/** Represents Codeless API Polling data connector. */
export declare interface CodelessApiPollingDataConnector extends DataConnector {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "APIPolling";
    /** Config to describe the instructions blade */
    connectorUiConfig?: CodelessUiConnectorConfigProperties;
    /** Config to describe the polling instructions */
    pollingConfig?: CodelessConnectorPollingConfigProperties;
}

/** Describe the authentication properties needed to successfully authenticate with the server */
export declare interface CodelessConnectorPollingAuthProperties {
    /** The authentication type */
    authType: string;
    /** The header name which the token is sent with */
    apiKeyName?: string;
    /** A prefix send in the header before the actual token */
    apiKeyIdentifier?: string;
    /** Marks if the key should sent in header */
    isApiKeyInPostPayload?: string;
    /** Describes the flow name, for example 'AuthCode' for Oauth 2.0 */
    flowName?: string;
    /** The endpoint used to issue a token, used in Oauth 2.0 flow */
    tokenEndpoint?: string;
    /** The endpoint used to authorize the user, used in Oauth 2.0 flow */
    authorizationEndpoint?: string;
    /** The query parameters used in authorization request, used in Oauth 2.0 flow */
    authorizationEndpointQueryParameters?: Record<string, unknown>;
    /** The redirect endpoint where we will get the authorization code, used in Oauth 2.0 flow */
    redirectionEndpoint?: string;
    /** The query headers used in token request, used in Oauth 2.0 flow */
    tokenEndpointHeaders?: Record<string, unknown>;
    /** The query parameters used in token request, used in Oauth 2.0 flow */
    tokenEndpointQueryParameters?: Record<string, unknown>;
    /** Marks if we should send the client secret in header or payload, used in Oauth 2.0 flow */
    isClientSecretInHeader?: boolean;
    /** The OAuth token scope */
    scope?: string;
}

/** Config to describe the polling config for API poller connector */
export declare interface CodelessConnectorPollingConfigProperties {
    /** The poller active status */
    isActive?: boolean;
    /** Describe the authentication type of the poller */
    auth: CodelessConnectorPollingAuthProperties;
    /** Describe the poll request config parameters of the poller */
    request: CodelessConnectorPollingRequestProperties;
    /** Describe the poll request paging config of the poller */
    paging?: CodelessConnectorPollingPagingProperties;
    /** Describe the response config parameters of the poller */
    response?: CodelessConnectorPollingResponseProperties;
}

/** Describe the properties needed to make a pagination call */
export declare interface CodelessConnectorPollingPagingProperties {
    /** Describes the type. could be 'None', 'PageToken', 'PageCount', 'TimeStamp' */
    pagingType: string;
    /** Defines the name of a next page attribute */
    nextPageParaName?: string;
    /** Defines the path to a next page token JSON */
    nextPageTokenJsonPath?: string;
    /** Defines the path to a page count attribute */
    pageCountAttributePath?: string;
    /** Defines the path to a page total count attribute */
    pageTotalCountAttributePath?: string;
    /** Defines the path to a paging time stamp attribute */
    pageTimeStampAttributePath?: string;
    /** Determines whether to search for the latest time stamp in the events list */
    searchTheLatestTimeStampFromEventsList?: string;
    /** Defines the name of the page size parameter */
    pageSizeParaName?: string;
    /** Defines the paging size */
    pageSize?: number;
}

/** Describe the request properties needed to successfully pull from the server */
export declare interface CodelessConnectorPollingRequestProperties {
    /** Describe the endpoint we should pull the data from */
    apiEndpoint: string;
    /** Defines the rate limit QPS */
    rateLimitQps?: number;
    /** The window interval we will use the pull the data */
    queryWindowInMin: number;
    /** The http method type we will use in the poll request, GET or POST */
    httpMethod: string;
    /** The time format will be used the query events in a specific window */
    queryTimeFormat: string;
    /** Describe the amount of time we should try and poll the data in case of failure */
    retryCount?: number;
    /** The number of seconds we will consider as a request timeout */
    timeoutInSeconds?: number;
    /** Describe the headers sent in the poll request */
    headers?: Record<string, unknown>;
    /** Describe the query parameters sent in the poll request */
    queryParameters?: Record<string, unknown>;
    /** For advanced scenarios for example user name/password embedded in nested JSON payload */
    queryParametersTemplate?: string;
    /** This will be used the query events from a start of the time window */
    startTimeAttributeName?: string;
    /** This will be used the query events from the end of the time window */
    endTimeAttributeName?: string;
}

/** Describes the response from the external server */
export declare interface CodelessConnectorPollingResponseProperties {
    /** Describes the path we should extract the data in the response */
    eventsJsonPaths: string[];
    /** Describes the path we should extract the status code in the response */
    successStatusJsonPath?: string;
    /** Describes the path we should extract the status value in the response */
    successStatusValue?: string;
    /** Describes if the data in the response is Gzip */
    isGzipCompressed?: boolean;
}

/** Config to describe the instructions blade */
export declare interface CodelessUiConnectorConfigProperties {
    /** Connector blade title */
    title: string;
    /** Connector publisher name */
    publisher: string;
    /** Connector description */
    descriptionMarkdown: string;
    /** An optional custom image to be used when displaying the connector within Azure Sentinel's connector's gallery */
    customImage?: string;
    /** Name of the table the connector will insert the data to */
    graphQueriesTableName: string;
    /** The graph query to show the current data status */
    graphQueries: CodelessUiConnectorConfigPropertiesGraphQueriesItem[];
    /** The sample queries for the connector */
    sampleQueries: CodelessUiConnectorConfigPropertiesSampleQueriesItem[];
    /** Data types to check for last data received */
    dataTypes: CodelessUiConnectorConfigPropertiesDataTypesItem[];
    /** Define the way the connector check connectivity */
    connectivityCriteria: CodelessUiConnectorConfigPropertiesConnectivityCriteriaItem[];
    /** Connector Availability Status */
    availability: Availability;
    /** Permissions required for the connector */
    permissions: Permissions_2;
    /** Instruction steps to enable the connector */
    instructionSteps: CodelessUiConnectorConfigPropertiesInstructionStepsItem[];
}

export declare interface CodelessUiConnectorConfigPropertiesConnectivityCriteriaItem extends ConnectivityCriteria {
}

export declare interface CodelessUiConnectorConfigPropertiesDataTypesItem extends LastDataReceivedDataType {
}

export declare interface CodelessUiConnectorConfigPropertiesGraphQueriesItem extends GraphQueries {
}

export declare interface CodelessUiConnectorConfigPropertiesInstructionStepsItem extends InstructionSteps {
}

export declare interface CodelessUiConnectorConfigPropertiesSampleQueriesItem extends SampleQueries {
}

/** Represents Codeless UI data connector. */
export declare interface CodelessUiDataConnector extends DataConnector {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "GenericUI";
    /** Config to describe the instructions blade */
    connectorUiConfig?: CodelessUiConnectorConfigProperties;
}

/**
 * Defines values for ConditionType. \
 * {@link KnownConditionType} can be used interchangeably with ConditionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Property**: Evaluate an object property value \
 * **PropertyArray**: Evaluate an object array property value \
 * **PropertyChanged**: Evaluate an object property changed value \
 * **PropertyArrayChanged**: Evaluate an object array property changed value \
 * **Boolean**: Apply a boolean operator (e.g AND, OR) to conditions
 */
export declare type ConditionType = string;

/**
 * Defines values for ConfidenceLevel. \
 * {@link KnownConfidenceLevel} can be used interchangeably with ConfidenceLevel,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown**: Unknown confidence, the is the default value \
 * **Low**: Low confidence, meaning we have some doubts this is indeed malicious or part of an attack \
 * **High**: High confidence that the alert is true positive malicious
 */
export declare type ConfidenceLevel = string;

/**
 * Defines values for ConfidenceScoreStatus. \
 * {@link KnownConfidenceScoreStatus} can be used interchangeably with ConfidenceScoreStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotApplicable**: Score will not be calculated for this alert as it is not supported by virtual analyst \
 * **InProcess**: No score was set yet and calculation is in progress \
 * **NotFinal**: Score is calculated and shown as part of the alert, but may be updated again at a later time following the processing of additional data \
 * **Final**: Final score was calculated and available
 */
export declare type ConfidenceScoreStatus = string;

/**
 * Defines values for ConnectAuthKind. \
 * {@link KnownConnectAuthKind} can be used interchangeably with ConnectAuthKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Basic** \
 * **OAuth2** \
 * **APIKey**
 */
export declare type ConnectAuthKind = string;

/** Expansion result connected entities */
export declare interface ConnectedEntity {
    /** Entity Id of the connected entity */
    targetEntityId?: string;
    /** key-value pairs for a connected entity mapping */
    additionalData?: Record<string, unknown>;
}

/** Setting for the connector check connectivity */
export declare interface ConnectivityCriteria {
    /** type of connectivity */
    type?: ConnectivityType;
    /** Queries for checking connectivity */
    value?: string[];
}

/**
 * Defines values for ConnectivityType. \
 * {@link KnownConnectivityType} can be used interchangeably with ConnectivityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **IsConnectedQuery**
 */
export declare type ConnectivityType = string;

/** Instruction step details */
export declare interface ConnectorInstructionModelBase {
    /** The parameters for the setting */
    parameters?: Record<string, unknown>;
    /** The kind of the setting */
    type: SettingType;
}

/** The mapping of content type to a repo path. */
export declare interface ContentPathMap {
    /** Content type. */
    contentType?: ContentType;
    /** The path to the content. */
    path?: string;
}

/**
 * Defines values for ContentType. \
 * {@link KnownContentType} can be used interchangeably with ContentType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AnalyticRule** \
 * **Workbook**
 */
export declare type ContentType = string;

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export declare type CreatedByType = string;

/** Specific entity query that supports put requests. */
export declare interface CustomEntityQuery extends ResourceWithEtag {
    /** the entity query kind */
    kind: CustomEntityQueryKind;
}

/**
 * Defines values for CustomEntityQueryKind. \
 * {@link KnownCustomEntityQueryKind} can be used interchangeably with CustomEntityQueryKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Activity**
 */
export declare type CustomEntityQueryKind = string;

export declare type CustomEntityQueryUnion = CustomEntityQuery | ActivityCustomEntityQuery;

/** Customs permissions required for the connector */
export declare interface Customs extends CustomsPermission {
}

/** Customs permissions required for the connector */
export declare interface CustomsPermission {
    /** Customs permissions name */
    name?: string;
    /** Customs permissions description */
    description?: string;
}

/** Data connector */
export declare interface DataConnector extends ResourceWithEtag {
    /** The data connector kind */
    kind: DataConnectorKind;
}

/**
 * Defines values for DataConnectorAuthorizationState. \
 * {@link KnownDataConnectorAuthorizationState} can be used interchangeably with DataConnectorAuthorizationState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Valid** \
 * **Invalid**
 */
export declare type DataConnectorAuthorizationState = string;

/** Represents Codeless API Polling data connector. */
export declare interface DataConnectorConnectBody {
    /** The authentication kind used to poll the data */
    kind?: ConnectAuthKind;
    /** The API key of the audit server. */
    apiKey?: string;
    /** Used in v2 logs connector. Represents the data collection ingestion endpoint in log analytics. */
    dataCollectionEndpoint?: string;
    /** Used in v2 logs connector. The data collection rule immutable id, the rule defines the transformation and data destination. */
    dataCollectionRuleImmutableId?: string;
    /** Used in v2 logs connector. The stream we are sending the data to, this is the name of the streamDeclarations defined in the DCR. */
    outputStream?: string;
    /** The client secret of the OAuth 2.0 application. */
    clientSecret?: string;
    /** The client id of the OAuth 2.0 application. */
    clientId?: string;
    /** The authorization code used in OAuth 2.0 code flow to issue a token. */
    authorizationCode?: string;
    /** The user name in the audit log server. */
    userName?: string;
    /** The user password in the audit log server. */
    password?: string;
    requestConfigUserInputValues?: Record<string, unknown>[];
}

/** Common field for data type in data connectors. */
export declare interface DataConnectorDataTypeCommon {
    /** Describe whether this data type connection is enabled or not. */
    state: DataTypeState;
}

/**
 * Defines values for DataConnectorKind. \
 * {@link KnownDataConnectorKind} can be used interchangeably with DataConnectorKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AzureActiveDirectory** \
 * **AzureSecurityCenter** \
 * **MicrosoftCloudAppSecurity** \
 * **ThreatIntelligence** \
 * **ThreatIntelligenceTaxii** \
 * **Office365** \
 * **OfficeATP** \
 * **OfficeIRM** \
 * **Office365Project** \
 * **OfficePowerBI** \
 * **AmazonWebServicesCloudTrail** \
 * **AmazonWebServicesS3** \
 * **AzureAdvancedThreatProtection** \
 * **MicrosoftDefenderAdvancedThreatProtection** \
 * **Dynamics365** \
 * **MicrosoftThreatProtection** \
 * **MicrosoftThreatIntelligence** \
 * **GenericUI** \
 * **APIPolling** \
 * **IOT**
 */
export declare type DataConnectorKind = string;

/**
 * Defines values for DataConnectorLicenseState. \
 * {@link KnownDataConnectorLicenseState} can be used interchangeably with DataConnectorLicenseState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Valid** \
 * **Invalid** \
 * **Unknown**
 */
export declare type DataConnectorLicenseState = string;

/** List all the data connectors. */
export declare interface DataConnectorList {
    /**
     * URL to fetch the next set of data connectors.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
    /** Array of data connectors. */
    value: DataConnectorUnion[];
}

/** Data connector requirements status. */
export declare interface DataConnectorRequirementsState {
    /** Authorization state for this connector */
    authorizationState?: DataConnectorAuthorizationState;
    /** License state for this connector */
    licenseState?: DataConnectorLicenseState;
}

/** Interface representing a DataConnectors. */
export declare interface DataConnectors {
    /**
     * Gets all data connectors.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, options?: DataConnectorsListOptionalParams): PagedAsyncIterableIterator<DataConnectorUnion>;
    /**
     * Gets a data connector.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param dataConnectorId Connector ID
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, dataConnectorId: string, options?: DataConnectorsGetOptionalParams): Promise<DataConnectorsGetResponse>;
    /**
     * Creates or updates the data connector.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param dataConnectorId Connector ID
     * @param dataConnector The data connector
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, workspaceName: string, dataConnectorId: string, dataConnector: DataConnectorUnion, options?: DataConnectorsCreateOrUpdateOptionalParams): Promise<DataConnectorsCreateOrUpdateResponse>;
    /**
     * Delete the data connector.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param dataConnectorId Connector ID
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, workspaceName: string, dataConnectorId: string, options?: DataConnectorsDeleteOptionalParams): Promise<void>;
    /**
     * Connects a data connector.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param dataConnectorId Connector ID
     * @param connectBody The data connector
     * @param options The options parameters.
     */
    connect(resourceGroupName: string, workspaceName: string, dataConnectorId: string, connectBody: DataConnectorConnectBody, options?: DataConnectorsConnectOptionalParams): Promise<void>;
    /**
     * Disconnect a data connector.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param dataConnectorId Connector ID
     * @param options The options parameters.
     */
    disconnect(resourceGroupName: string, workspaceName: string, dataConnectorId: string, options?: DataConnectorsDisconnectOptionalParams): Promise<void>;
}

/** Data connector requirements properties. */
export declare interface DataConnectorsCheckRequirements {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "AzureActiveDirectory" | "AzureAdvancedThreatProtection" | "AzureSecurityCenter" | "AmazonWebServicesCloudTrail" | "AmazonWebServicesS3" | "Dynamics365" | "MicrosoftCloudAppSecurity" | "MicrosoftDefenderAdvancedThreatProtection" | "MicrosoftThreatIntelligence" | "MicrosoftThreatProtection" | "OfficeATP" | "OfficeIRM" | "Office365Project" | "OfficePowerBI" | "ThreatIntelligence" | "ThreatIntelligenceTaxii" | "IOT";
}

/** Interface representing a DataConnectorsCheckRequirementsOperations. */
export declare interface DataConnectorsCheckRequirementsOperations {
    /**
     * Get requirements state for a data connector type.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param dataConnectorsCheckRequirements The parameters for requirements check message
     * @param options The options parameters.
     */
    post(resourceGroupName: string, workspaceName: string, dataConnectorsCheckRequirements: DataConnectorsCheckRequirementsUnion, options?: DataConnectorsCheckRequirementsPostOptionalParams): Promise<DataConnectorsCheckRequirementsPostResponse>;
}

/** Optional parameters. */
export declare interface DataConnectorsCheckRequirementsPostOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the post operation. */
export declare type DataConnectorsCheckRequirementsPostResponse = DataConnectorRequirementsState;

export declare type DataConnectorsCheckRequirementsUnion = DataConnectorsCheckRequirements | AADCheckRequirements | AatpCheckRequirements | ASCCheckRequirements | AwsCloudTrailCheckRequirements | AwsS3CheckRequirements | Dynamics365CheckRequirements | McasCheckRequirements | MdatpCheckRequirements | MstiCheckRequirements | MtpCheckRequirements | OfficeATPCheckRequirements | OfficeIRMCheckRequirements | Office365ProjectCheckRequirements | OfficePowerBICheckRequirements | TICheckRequirements | TiTaxiiCheckRequirements | IoTCheckRequirements;

/** Optional parameters. */
export declare interface DataConnectorsConnectOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface DataConnectorsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type DataConnectorsCreateOrUpdateResponse = DataConnectorUnion;

/** Optional parameters. */
export declare interface DataConnectorsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface DataConnectorsDisconnectOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface DataConnectorsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type DataConnectorsGetResponse = DataConnectorUnion;

/** Optional parameters. */
export declare interface DataConnectorsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type DataConnectorsListNextResponse = DataConnectorList;

/** Optional parameters. */
export declare interface DataConnectorsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type DataConnectorsListResponse = DataConnectorList;

/** Properties data connector on tenant level. */
export declare interface DataConnectorTenantId {
    /** The tenant id to connect to, and get the data from. */
    tenantId: string;
}

export declare type DataConnectorUnion = DataConnector | AADDataConnector | MstiDataConnector | MTPDataConnector | AatpDataConnector | ASCDataConnector | AwsCloudTrailDataConnector | AwsS3DataConnector | McasDataConnector | Dynamics365DataConnector | OfficeATPDataConnector | Office365ProjectDataConnector | OfficePowerBIDataConnector | OfficeIRMDataConnector | MdatpDataConnector | OfficeDataConnector | TIDataConnector | TiTaxiiDataConnector | IoTDataConnector | CodelessUiDataConnector | CodelessApiPollingDataConnector;

/** Data connector properties. */
export declare interface DataConnectorWithAlertsProperties {
    /** The available data types for the connector. */
    dataTypes?: AlertsDataTypeOfDataConnector;
}

/** The data type definition */
export declare interface DataTypeDefinitions {
    /** The data type name */
    dataType?: string;
}

/**
 * Defines values for DataTypeState. \
 * {@link KnownDataTypeState} can be used interchangeably with DataTypeState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export declare type DataTypeState = string;

/**
 * Defines values for DeleteStatus. \
 * {@link KnownDeleteStatus} can be used interchangeably with DeleteStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Deleted**: The file was deleted. \
 * **NotDeleted**: The file was not deleted. \
 * **Unspecified**: Unspecified
 */
export declare type DeleteStatus = string;

/** Defines values for DeliveryAction. */
export declare type DeliveryAction = "Unknown" | "DeliveredAsSpam" | "Delivered" | "Blocked" | "Replaced";

/** Defines values for DeliveryLocation. */
export declare type DeliveryLocation = "Unknown" | "Inbox" | "JunkFolder" | "DeletedFolder" | "Quarantine" | "External" | "Failed" | "Dropped" | "Forwarded";

/** Description about a deployment. */
export declare interface Deployment {
    /** Deployment identifier. */
    deploymentId?: string;
    /** Current status of the deployment. */
    deploymentState?: DeploymentState;
    /** The outcome of the deployment. */
    deploymentResult?: DeploymentResult;
    /** The time when the deployment finished. */
    deploymentTime?: Date;
    /** Url to access repository action logs. */
    deploymentLogsUrl?: string;
}

/**
 * Defines values for DeploymentFetchStatus. \
 * {@link KnownDeploymentFetchStatus} can be used interchangeably with DeploymentFetchStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Success** \
 * **Unauthorized** \
 * **NotFound**
 */
export declare type DeploymentFetchStatus = string;

/** Information regarding a deployment. */
export declare interface DeploymentInfo {
    /** Status while fetching the last deployment. */
    deploymentFetchStatus?: DeploymentFetchStatus;
    /** Deployment information. */
    deployment?: Deployment;
    /** Additional details about the deployment that can be shown to the user. */
    message?: string;
}

/**
 * Defines values for DeploymentResult. \
 * {@link KnownDeploymentResult} can be used interchangeably with DeploymentResult,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Success** \
 * **Canceled** \
 * **Failed**
 */
export declare type DeploymentResult = string;

/**
 * Defines values for DeploymentState. \
 * {@link KnownDeploymentState} can be used interchangeably with DeploymentState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **In_Progress** \
 * **Completed** \
 * **Queued** \
 * **Canceling**
 */
export declare type DeploymentState = string;

/**
 * Defines values for DeviceImportance. \
 * {@link KnownDeviceImportance} can be used interchangeably with DeviceImportance,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown**: Unknown - Default value \
 * **Low**: Low \
 * **Normal**: Normal \
 * **High**: High
 */
export declare type DeviceImportance = string;

/** Represents a dns entity. */
export declare interface DnsEntity extends Entity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "DnsResolution";
    /**
     * A bag of custom fields that should be part of the entity and will be presented to the user.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalData?: {
        [propertyName: string]: Record<string, unknown>;
    };
    /**
     * The graph item display name which is a short humanly readable description of the graph item instance. This property is optional and might be system generated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly friendlyName?: string;
    /**
     * An ip entity id for the dns server resolving the request
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dnsServerIpEntityId?: string;
    /**
     * The name of the dns record associated with the alert
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly domainName?: string;
    /**
     * An ip entity id for the dns request client
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly hostIpAddressEntityId?: string;
    /**
     * Ip entity identifiers for the resolved ip address.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly ipAddressEntityIds?: string[];
}

/** Dns entity property bag. */
export declare interface DnsEntityProperties extends EntityCommonProperties {
    /**
     * An ip entity id for the dns server resolving the request
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dnsServerIpEntityId?: string;
    /**
     * The name of the dns record associated with the alert
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly domainName?: string;
    /**
     * An ip entity id for the dns request client
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly hostIpAddressEntityId?: string;
    /**
     * Ip entity identifiers for the resolved ip address.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly ipAddressEntityIds?: string[];
}

/** Interface representing a DomainWhois. */
export declare interface DomainWhois {
    /**
     * Get whois information for a single domain name
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param domain Domain name to be enriched
     * @param options The options parameters.
     */
    get(resourceGroupName: string, domain: string, options?: DomainWhoisGetOptionalParams): Promise<DomainWhoisGetResponse>;
}

/** Optional parameters. */
export declare interface DomainWhoisGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type DomainWhoisGetResponse = EnrichmentDomainWhois;

/** Represents Dynamics365 requirements check request. */
export declare interface Dynamics365CheckRequirements extends DataConnectorsCheckRequirements {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "Dynamics365";
    /** The tenant id to connect to, and get the data from. */
    tenantId?: string;
}

/** Dynamics365 requirements check properties. */
export declare interface Dynamics365CheckRequirementsProperties extends DataConnectorTenantId {
}

/** Represents Dynamics365 data connector. */
export declare interface Dynamics365DataConnector extends DataConnector {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "Dynamics365";
    /** The tenant id to connect to, and get the data from. */
    tenantId?: string;
    /** The available data types for the connector. */
    dataTypes?: Dynamics365DataConnectorDataTypes;
}

/** The available data types for Dynamics365 data connector. */
export declare interface Dynamics365DataConnectorDataTypes {
    /** Common Data Service data type connection. */
    dynamics365CdsActivities: Dynamics365DataConnectorDataTypesDynamics365CdsActivities;
}

/** Common Data Service data type connection. */
export declare interface Dynamics365DataConnectorDataTypesDynamics365CdsActivities extends DataConnectorDataTypeCommon {
}

/** Dynamics365 data connector properties. */
export declare interface Dynamics365DataConnectorProperties extends DataConnectorTenantId {
    /** The available data types for the connector. */
    dataTypes: Dynamics365DataConnectorDataTypes;
}

/** Defines values for ElevationToken. */
export declare type ElevationToken = "Default" | "Full" | "Limited";

/** Whois information for a given domain and associated metadata */
export declare interface EnrichmentDomainWhois {
    /** The domain for this whois record */
    domain?: string;
    /** The hostname of this registrar's whois server */
    server?: string;
    /** The timestamp at which this record was created */
    created?: Date;
    /** The timestamp at which this record was last updated */
    updated?: Date;
    /** The timestamp at which this record will expire */
    expires?: Date;
    /** The whois record for a given domain */
    parsedWhois?: EnrichmentDomainWhoisDetails;
}

/** An individual contact associated with this domain */
export declare interface EnrichmentDomainWhoisContact {
    /** The name of this contact */
    name?: string;
    /** The organization for this contact */
    org?: string;
    /** A list describing the street address for this contact */
    street?: string[];
    /** The city for this contact */
    city?: string;
    /** The state for this contact */
    state?: string;
    /** The postal code for this contact */
    postal?: string;
    /** The country for this contact */
    country?: string;
    /** The phone number for this contact */
    phone?: string;
    /** The fax number for this contact */
    fax?: string;
    /** The email address for this contact */
    email?: string;
}

/** The set of contacts associated with this domain */
export declare interface EnrichmentDomainWhoisContacts {
    /** The admin contact for this whois record */
    admin?: EnrichmentDomainWhoisContact;
    /** The billing contact for this whois record */
    billing?: EnrichmentDomainWhoisContact;
    /** The registrant contact for this whois record */
    registrant?: EnrichmentDomainWhoisContact;
    /** The technical contact for this whois record */
    tech?: EnrichmentDomainWhoisContact;
}

/** The whois record for a given domain */
export declare interface EnrichmentDomainWhoisDetails {
    /** The registrar associated with this domain */
    registrar?: EnrichmentDomainWhoisRegistrarDetails;
    /** The set of contacts associated with this domain */
    contacts?: EnrichmentDomainWhoisContacts;
    /** A list of name servers associated with this domain */
    nameServers?: string[];
    /** The set of status flags for this whois record */
    statuses?: string[];
}

/** The registrar associated with this domain */
export declare interface EnrichmentDomainWhoisRegistrarDetails {
    /** The name of this registrar */
    name?: string;
    /** This registrar's abuse contact email */
    abuseContactEmail?: string;
    /** This registrar's abuse contact phone number */
    abuseContactPhone?: string;
    /** This registrar's Internet Assigned Numbers Authority id */
    ianaId?: string;
    /** This registrar's URL */
    url?: string;
    /** The hostname of this registrar's whois server */
    whoisServer?: string;
}

/** Geodata information for a given IP address */
export declare interface EnrichmentIpGeodata {
    /** The autonomous system number associated with this IP address */
    asn?: string;
    /** The name of the carrier for this IP address */
    carrier?: string;
    /** The city this IP address is located in */
    city?: string;
    /** A numeric rating of confidence that the value in the 'city' field is correct, on a scale of 0-100 */
    cityCf?: number;
    /** The continent this IP address is located on */
    continent?: string;
    /** The county this IP address is located in */
    country?: string;
    /** A numeric rating of confidence that the value in the 'country' field is correct on a scale of 0-100 */
    countryCf?: number;
    /** The dotted-decimal or colon-separated string representation of the IP address */
    ipAddr?: string;
    /** A description of the connection type of this IP address */
    ipRoutingType?: string;
    /** The latitude of this IP address */
    latitude?: string;
    /** The longitude of this IP address */
    longitude?: string;
    /** The name of the organization for this IP address */
    organization?: string;
    /** The type of the organization for this IP address */
    organizationType?: string;
    /** The geographic region this IP address is located in */
    region?: string;
    /** The state this IP address is located in */
    state?: string;
    /** A numeric rating of confidence that the value in the 'state' field is correct on a scale of 0-100 */
    stateCf?: number;
    /** The abbreviated name for the state this IP address is located in */
    stateCode?: string;
}

/** Interface representing a Entities. */
export declare interface Entities {
    /**
     * Gets all entities.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, options?: EntitiesListOptionalParams): PagedAsyncIterableIterator<EntityUnion>;
    /**
     * Gets an entity.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param entityId entity ID
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, entityId: string, options?: EntitiesGetOptionalParams): Promise<EntitiesGetResponse>;
    /**
     * Expands an entity.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param entityId entity ID
     * @param parameters The parameters required to execute an expand operation on the given entity.
     * @param options The options parameters.
     */
    expand(resourceGroupName: string, workspaceName: string, entityId: string, parameters: EntityExpandParameters, options?: EntitiesExpandOptionalParams): Promise<EntitiesExpandResponse>;
    /**
     * Get Insights and Activities for an entity.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param entityId entity ID
     * @param kind The Kind parameter for queries
     * @param options The options parameters.
     */
    queries(resourceGroupName: string, workspaceName: string, entityId: string, kind: EntityItemQueryKind, options?: EntitiesQueriesOptionalParams): Promise<EntitiesQueriesResponse>;
    /**
     * Execute Insights for an entity.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param entityId entity ID
     * @param parameters The parameters required to execute insights on the given entity.
     * @param options The options parameters.
     */
    getInsights(resourceGroupName: string, workspaceName: string, entityId: string, parameters: EntityGetInsightsParameters, options?: EntitiesGetInsightsOptionalParams): Promise<EntitiesGetInsightsResponse>;
}

/** Optional parameters. */
export declare interface EntitiesExpandOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the expand operation. */
export declare type EntitiesExpandResponse = EntityExpandResponse;

/** Optional parameters. */
export declare interface EntitiesGetInsightsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getInsights operation. */
export declare type EntitiesGetInsightsResponse = EntityGetInsightsResponse;

/** Optional parameters. */
export declare interface EntitiesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type EntitiesGetResponse = EntityUnion;

/** Interface representing a EntitiesGetTimeline. */
export declare interface EntitiesGetTimeline {
    /**
     * Timeline for an entity.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param entityId entity ID
     * @param parameters The parameters required to execute an timeline operation on the given entity.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, entityId: string, parameters: EntityTimelineParameters, options?: EntitiesGetTimelineListOptionalParams): Promise<EntitiesGetTimelineListResponse>;
}

/** Optional parameters. */
export declare interface EntitiesGetTimelineListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type EntitiesGetTimelineListResponse = EntityTimelineResponse;

/** Optional parameters. */
export declare interface EntitiesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type EntitiesListNextResponse = EntityList;

/** Optional parameters. */
export declare interface EntitiesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type EntitiesListResponse = EntityList;

/** Optional parameters. */
export declare interface EntitiesQueriesOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the queries operation. */
export declare type EntitiesQueriesResponse = GetQueriesResponse;

/** Interface representing a EntitiesRelations. */
export declare interface EntitiesRelations {
    /**
     * Gets all relations of an entity.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param entityId entity ID
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, entityId: string, options?: EntitiesRelationsListOptionalParams): PagedAsyncIterableIterator<Relation>;
}

/** Optional parameters. */
export declare interface EntitiesRelationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type EntitiesRelationsListNextResponse = RelationList;

/** Optional parameters. */
export declare interface EntitiesRelationsListOptionalParams extends coreClient.OperationOptions {
    /** Filters the results, based on a Boolean condition. Optional. */
    filter?: string;
    /** Sorts the results. Optional. */
    orderby?: string;
    /** Returns only the first n results. Optional. */
    top?: number;
    /** Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. Optional. */
    skipToken?: string;
}

/** Contains response data for the list operation. */
export declare type EntitiesRelationsListResponse = RelationList;

/** Specific entity. */
export declare interface Entity extends Resource {
    /** The kind of the entity. */
    kind: EntityKind;
}

/** Settings with single toggle. */
export declare interface EntityAnalytics extends Settings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "EntityAnalytics";
    /** The relevant entity providers that are synced */
    entityProviders?: EntityProviders[];
}

/** Entity common property bag. */
export declare interface EntityCommonProperties {
    /**
     * A bag of custom fields that should be part of the entity and will be presented to the user.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalData?: {
        [propertyName: string]: Record<string, unknown>;
    };
    /**
     * The graph item display name which is a short humanly readable description of the graph item instance. This property is optional and might be system generated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly friendlyName?: string;
}

/** The edge that connects the entity to the other entity. */
export declare interface EntityEdges {
    /** The target entity Id. */
    targetEntityId?: string;
    /** A bag of custom fields that should be part of the entity and will be presented to the user. */
    additionalData?: {
        [propertyName: string]: Record<string, unknown>;
    };
}

/** The parameters required to execute an expand operation on the given entity. */
export declare interface EntityExpandParameters {
    /** The end date filter, so the only expansion results returned are before this date. */
    endTime?: Date;
    /** The Id of the expansion to perform. */
    expansionId?: string;
    /** The start date filter, so the only expansion results returned are after this date. */
    startTime?: Date;
}

/** The entity expansion result operation response. */
export declare interface EntityExpandResponse {
    /** The metadata from the expansion operation results. */
    metaData?: ExpansionResultsMetadata;
    /** The expansion result values. */
    value?: EntityExpandResponseValue;
}

/** The expansion result values. */
export declare interface EntityExpandResponseValue {
    /** Array of the expansion result entities. */
    entities?: EntityUnion[];
    /** Array of edges that connects the entity to the list of entities. */
    edges?: EntityEdges[];
}

/** Map identifiers of a single entity */
export declare interface EntityFieldMapping {
    /** Alert V3 identifier */
    identifier?: string;
    /** The value of the identifier */
    value?: string;
}

/** The parameters required to execute insights operation on the given entity. */
export declare interface EntityGetInsightsParameters {
    /** The start timeline date, so the results returned are after this date. */
    startTime: Date;
    /** The end timeline date, so the results returned are before this date. */
    endTime: Date;
    /** Indicates if query time range should be extended with default time range of the query. Default value is false */
    addDefaultExtendedTimeRange?: boolean;
    /** List of Insights Query Id. If empty, default value is all insights of this entity */
    insightQueryIds?: string[];
}

/** The Get Insights result operation response. */
export declare interface EntityGetInsightsResponse {
    /** The metadata from the get insights operation results. */
    metaData?: GetInsightsResultsMetadata;
    /** The insights result values. */
    value?: EntityInsightItem[];
}

/** Entity insight Item. */
export declare interface EntityInsightItem {
    /** The query id of the insight */
    queryId?: string;
    /** The Time interval that the query actually executed on. */
    queryTimeInterval?: EntityInsightItemQueryTimeInterval;
    /** Query results for table insights query. */
    tableQueryResults?: InsightsTableResult;
    /** Query results for table insights query. */
    chartQueryResults?: InsightsTableResult[];
}

/** The Time interval that the query actually executed on. */
export declare interface EntityInsightItemQueryTimeInterval {
    /** Insight query start time */
    startTime?: Date;
    /** Insight query end time */
    endTime?: Date;
}

/**
 * Defines values for EntityItemQueryKind. \
 * {@link KnownEntityItemQueryKind} can be used interchangeably with EntityItemQueryKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Insight**: insight
 */
export declare type EntityItemQueryKind = string;

/**
 * Defines values for EntityKind. \
 * {@link KnownEntityKind} can be used interchangeably with EntityKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Account**: Entity represents account in the system. \
 * **Host**: Entity represents host in the system. \
 * **File**: Entity represents file in the system. \
 * **AzureResource**: Entity represents azure resource in the system. \
 * **CloudApplication**: Entity represents cloud application in the system. \
 * **DnsResolution**: Entity represents dns resolution in the system. \
 * **FileHash**: Entity represents file hash in the system. \
 * **Ip**: Entity represents ip in the system. \
 * **Malware**: Entity represents malware in the system. \
 * **Process**: Entity represents process in the system. \
 * **RegistryKey**: Entity represents registry key in the system. \
 * **RegistryValue**: Entity represents registry value in the system. \
 * **SecurityGroup**: Entity represents security group in the system. \
 * **Url**: Entity represents url in the system. \
 * **IoTDevice**: Entity represents IoT device in the system. \
 * **SecurityAlert**: Entity represents security alert in the system. \
 * **Bookmark**: Entity represents bookmark in the system. \
 * **MailCluster**: Entity represents mail cluster in the system. \
 * **MailMessage**: Entity represents mail message in the system. \
 * **Mailbox**: Entity represents mailbox in the system. \
 * **SubmissionMail**: Entity represents submission mail in the system. \
 * **Nic**: Entity represents network interface in the system.
 */
export declare type EntityKind = string;

/** List of all the entities. */
export declare interface EntityList {
    /**
     * URL to fetch the next set of entities.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
    /** Array of entities. */
    value: EntityUnion[];
}

/** Single entity mapping for the alert rule */
export declare interface EntityMapping {
    /** The V3 type of the mapped entity */
    entityType?: EntityMappingType;
    /** array of field mappings for the given entity mapping */
    fieldMappings?: FieldMapping[];
}

/**
 * Defines values for EntityMappingType. \
 * {@link KnownEntityMappingType} can be used interchangeably with EntityMappingType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Account**: User account entity type \
 * **Host**: Host entity type \
 * **IP**: IP address entity type \
 * **Malware**: Malware entity type \
 * **File**: System file entity type \
 * **Process**: Process entity type \
 * **CloudApplication**: Cloud app entity type \
 * **DNS**: DNS entity type \
 * **AzureResource**: Azure resource entity type \
 * **FileHash**: File-hash entity type \
 * **RegistryKey**: Registry key entity type \
 * **RegistryValue**: Registry value entity type \
 * **SecurityGroup**: Security group entity type \
 * **URL**: URL entity type \
 * **Mailbox**: Mailbox entity type \
 * **MailCluster**: Mail cluster entity type \
 * **MailMessage**: Mail message entity type \
 * **SubmissionMail**: Submission mail entity type
 */
export declare type EntityMappingType = string;

/**
 * Defines values for EntityProviders. \
 * {@link KnownEntityProviders} can be used interchangeably with EntityProviders,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ActiveDirectory** \
 * **AzureActiveDirectory**
 */
export declare type EntityProviders = string;

/** Interface representing a EntityQueries. */
export declare interface EntityQueries {
    /**
     * Gets all entity queries.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, options?: EntityQueriesListOptionalParams): PagedAsyncIterableIterator<EntityQueryUnion>;
    /**
     * Gets an entity query.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param entityQueryId entity query ID
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, entityQueryId: string, options?: EntityQueriesGetOptionalParams): Promise<EntityQueriesGetResponse>;
    /**
     * Creates or updates the entity query.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param entityQueryId entity query ID
     * @param entityQuery The entity query we want to create or update
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, workspaceName: string, entityQueryId: string, entityQuery: CustomEntityQueryUnion, options?: EntityQueriesCreateOrUpdateOptionalParams): Promise<EntityQueriesCreateOrUpdateResponse>;
    /**
     * Delete the entity query.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param entityQueryId entity query ID
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, workspaceName: string, entityQueryId: string, options?: EntityQueriesDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface EntityQueriesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type EntityQueriesCreateOrUpdateResponse = EntityQueryUnion;

/** Optional parameters. */
export declare interface EntityQueriesDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface EntityQueriesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type EntityQueriesGetResponse = EntityQueryUnion;

/** Optional parameters. */
export declare interface EntityQueriesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type EntityQueriesListNextResponse = EntityQueryList;

/** Optional parameters. */
export declare interface EntityQueriesListOptionalParams extends coreClient.OperationOptions {
    /** The entity query kind we want to fetch */
    kind?: Enum13;
}

/** Contains response data for the list operation. */
export declare type EntityQueriesListResponse = EntityQueryList;

/** Specific entity query. */
export declare interface EntityQuery extends ResourceWithEtag {
    /** the entity query kind */
    kind: EntityQueryKind;
}

/** An abstract Query item for entity */
export declare interface EntityQueryItem {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "Insight";
    /**
     * Query Template ARM ID
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /** Query Template ARM Name */
    name?: string;
    /** ARM Type */
    type?: string;
}

/** An properties abstract Query item for entity */
export declare interface EntityQueryItemProperties {
    /** Data types for template */
    dataTypes?: EntityQueryItemPropertiesDataTypesItem[];
    /** The type of the entity */
    inputEntityType?: EntityType;
    /** Data types for template */
    requiredInputFieldsSets?: string[][];
    /** The query applied only to entities matching to all filters */
    entitiesFilter?: Record<string, unknown>;
}

export declare interface EntityQueryItemPropertiesDataTypesItem {
    /** Data type name */
    dataType?: string;
}

export declare type EntityQueryItemUnion = EntityQueryItem | InsightQueryItem;

/**
 * Defines values for EntityQueryKind. \
 * {@link KnownEntityQueryKind} can be used interchangeably with EntityQueryKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Expansion** \
 * **Insight** \
 * **Activity**
 */
export declare type EntityQueryKind = string;

/** List of all the entity queries. */
export declare interface EntityQueryList {
    /**
     * URL to fetch the next set of entity queries.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
    /** Array of entity queries. */
    value: EntityQueryUnion[];
}

/** Specific entity query template. */
export declare interface EntityQueryTemplate extends Resource {
    /** the entity query template kind */
    kind: EntityQueryTemplateKind;
}

/**
 * Defines values for EntityQueryTemplateKind. \
 * {@link KnownEntityQueryTemplateKind} can be used interchangeably with EntityQueryTemplateKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Activity**
 */
export declare type EntityQueryTemplateKind = string;

/** List of all the entity query templates. */
export declare interface EntityQueryTemplateList {
    /**
     * URL to fetch the next set of entity query templates.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
    /** Array of entity query templates. */
    value: EntityQueryTemplateUnion[];
}

/** Interface representing a EntityQueryTemplates. */
export declare interface EntityQueryTemplates {
    /**
     * Gets all entity query templates.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, options?: EntityQueryTemplatesListOptionalParams): PagedAsyncIterableIterator<EntityQueryTemplateUnion>;
    /**
     * Gets an entity query.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param entityQueryTemplateId entity query template ID
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, entityQueryTemplateId: string, options?: EntityQueryTemplatesGetOptionalParams): Promise<EntityQueryTemplatesGetResponse>;
}

/** Optional parameters. */
export declare interface EntityQueryTemplatesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type EntityQueryTemplatesGetResponse = EntityQueryTemplateUnion;

/** Optional parameters. */
export declare interface EntityQueryTemplatesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type EntityQueryTemplatesListNextResponse = EntityQueryTemplateList;

/** Optional parameters. */
export declare interface EntityQueryTemplatesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type EntityQueryTemplatesListResponse = EntityQueryTemplateList;

export declare type EntityQueryTemplateUnion = EntityQueryTemplate | ActivityEntityQueryTemplate;

export declare type EntityQueryUnion = EntityQuery | ExpansionEntityQuery | ActivityEntityQuery;

/** Interface representing a EntityRelations. */
export declare interface EntityRelations {
    /**
     * Gets an entity relation.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param entityId entity ID
     * @param relationName Relation Name
     * @param options The options parameters.
     */
    getRelation(resourceGroupName: string, workspaceName: string, entityId: string, relationName: string, options?: EntityRelationsGetRelationOptionalParams): Promise<EntityRelationsGetRelationResponse>;
}

/** Optional parameters. */
export declare interface EntityRelationsGetRelationOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getRelation operation. */
export declare type EntityRelationsGetRelationResponse = Relation;

/** Entity timeline Item. */
export declare interface EntityTimelineItem {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "Activity" | "Bookmark" | "Anomaly" | "SecurityAlert";
}

export declare type EntityTimelineItemUnion = EntityTimelineItem | ActivityTimelineItem | BookmarkTimelineItem | AnomalyTimelineItem | SecurityAlertTimelineItem;

/**
 * Defines values for EntityTimelineKind. \
 * {@link KnownEntityTimelineKind} can be used interchangeably with EntityTimelineKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Activity**: activity \
 * **Bookmark**: bookmarks \
 * **SecurityAlert**: security alerts \
 * **Anomaly**: anomaly
 */
export declare type EntityTimelineKind = string;

/** The parameters required to execute s timeline operation on the given entity. */
export declare interface EntityTimelineParameters {
    /** Array of timeline Item kinds. */
    kinds?: EntityTimelineKind[];
    /** The start timeline date, so the results returned are after this date. */
    startTime: Date;
    /** The end timeline date, so the results returned are before this date. */
    endTime: Date;
    /** The number of bucket for timeline queries aggregation. */
    numberOfBucket?: number;
}

/** The entity timeline result operation response. */
export declare interface EntityTimelineResponse {
    /** The metadata from the timeline operation results. */
    metaData?: TimelineResultsMetadata;
    /** The timeline result values. */
    value?: EntityTimelineItemUnion[];
}

/**
 * Defines values for EntityType. \
 * {@link KnownEntityType} can be used interchangeably with EntityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Account**: Entity represents account in the system. \
 * **Host**: Entity represents host in the system. \
 * **File**: Entity represents file in the system. \
 * **AzureResource**: Entity represents azure resource in the system. \
 * **CloudApplication**: Entity represents cloud application in the system. \
 * **DNS**: Entity represents dns in the system. \
 * **FileHash**: Entity represents file hash in the system. \
 * **IP**: Entity represents ip in the system. \
 * **Malware**: Entity represents malware in the system. \
 * **Process**: Entity represents process in the system. \
 * **RegistryKey**: Entity represents registry key in the system. \
 * **RegistryValue**: Entity represents registry value in the system. \
 * **SecurityGroup**: Entity represents security group in the system. \
 * **URL**: Entity represents url in the system. \
 * **IoTDevice**: Entity represents IoT device in the system. \
 * **SecurityAlert**: Entity represents security alert in the system. \
 * **HuntingBookmark**: Entity represents HuntingBookmark in the system. \
 * **MailCluster**: Entity represents mail cluster in the system. \
 * **MailMessage**: Entity represents mail message in the system. \
 * **Mailbox**: Entity represents mailbox in the system. \
 * **SubmissionMail**: Entity represents submission mail in the system. \
 * **Nic**: Entity represents network interface in the system.
 */
export declare type EntityType = string;

export declare type EntityUnion = Entity | SecurityAlert | HuntingBookmark | AccountEntity | AzureResourceEntity | CloudApplicationEntity | DnsEntity | FileEntity | FileHashEntity | HostEntity | IoTDeviceEntity | IpEntity | MailboxEntity | MailClusterEntity | MailMessageEntity | MalwareEntity | ProcessEntity | RegistryKeyEntity | RegistryValueEntity | SecurityGroupEntity | SubmissionMailEntity | UrlEntity | NicEntity;

/**
 * Defines values for Enum13. \
 * {@link KnownEnum13} can be used interchangeably with Enum13,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Expansion** \
 * **Activity**
 */
export declare type Enum13 = string;

/**
 * Defines values for EventGroupingAggregationKind. \
 * {@link KnownEventGroupingAggregationKind} can be used interchangeably with EventGroupingAggregationKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SingleAlert** \
 * **AlertPerResult**
 */
export declare type EventGroupingAggregationKind = string;

/** Event grouping settings property bag. */
export declare interface EventGroupingSettings {
    /** The event grouping aggregation kinds */
    aggregationKind?: EventGroupingAggregationKind;
}

/** Represents Expansion entity query. */
export declare interface ExpansionEntityQuery extends EntityQuery {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "Expansion";
    /** List of the data sources that are required to run the query */
    dataSources?: string[];
    /** The query display name */
    displayName?: string;
    /** The type of the query's source entity */
    inputEntityType?: EntityType;
    /** List of the fields of the source entity that are required to run the query */
    inputFields?: string[];
    /** List of the desired output types to be constructed from the result */
    outputEntityTypes?: EntityType[];
    /** The template query string to be parsed and formatted */
    queryTemplate?: string;
}

/** Information of a specific aggregation in the expansion result. */
export declare interface ExpansionResultAggregation {
    /** The common type of the aggregation. (for e.g. entity field name) */
    aggregationType?: string;
    /** Total number of aggregations of the given kind (and aggregationType if given) in the expansion result. */
    count: number;
    /** The display name of the aggregation by type. */
    displayName?: string;
    /** The kind of the aggregated entity. */
    entityKind: EntityKind;
}

/** Expansion result metadata. */
export declare interface ExpansionResultsMetadata {
    /** Information of the aggregated nodes in the expansion result. */
    aggregations?: ExpansionResultAggregation[];
}

/** Settings with single toggle. */
export declare interface EyesOn extends Settings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "EyesOn";
    /**
     * Determines whether the setting is enable or disabled.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isEnabled?: boolean;
}

/** A single field mapping of the mapped entity */
export declare interface FieldMapping {
    /** the V3 identifier of the entity */
    identifier?: string;
    /** the column name to be mapped to the identifier */
    columnName?: string;
}

/** Represents a file entity. */
export declare interface FileEntity extends Entity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "File";
    /**
     * A bag of custom fields that should be part of the entity and will be presented to the user.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalData?: {
        [propertyName: string]: Record<string, unknown>;
    };
    /**
     * The graph item display name which is a short humanly readable description of the graph item instance. This property is optional and might be system generated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly friendlyName?: string;
    /**
     * The full path to the file.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly directory?: string;
    /**
     * The file hash entity identifiers associated with this file
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly fileHashEntityIds?: string[];
    /**
     * The file name without path (some alerts might not include path).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly fileName?: string;
    /**
     * The Host entity id which the file belongs to
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly hostEntityId?: string;
}

/** File entity property bag. */
export declare interface FileEntityProperties extends EntityCommonProperties {
    /**
     * The full path to the file.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly directory?: string;
    /**
     * The file hash entity identifiers associated with this file
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly fileHashEntityIds?: string[];
    /**
     * The file name without path (some alerts might not include path).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly fileName?: string;
    /**
     * The Host entity id which the file belongs to
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly hostEntityId?: string;
}

/**
 * Defines values for FileFormat. \
 * {@link KnownFileFormat} can be used interchangeably with FileFormat,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **CSV**: A CSV file. \
 * **JSON**: A JSON file. \
 * **Unspecified**: A file of other format.
 */
export declare type FileFormat = string;

/**
 * Defines values for FileHashAlgorithm. \
 * {@link KnownFileHashAlgorithm} can be used interchangeably with FileHashAlgorithm,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown**: Unknown hash algorithm \
 * **MD5**: MD5 hash type \
 * **SHA1**: SHA1 hash type \
 * **SHA256**: SHA256 hash type \
 * **SHA256AC**: SHA256 Authenticode hash type
 */
export declare type FileHashAlgorithm = string;

/** Represents a file hash entity. */
export declare interface FileHashEntity extends Entity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "FileHash";
    /**
     * A bag of custom fields that should be part of the entity and will be presented to the user.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalData?: {
        [propertyName: string]: Record<string, unknown>;
    };
    /**
     * The graph item display name which is a short humanly readable description of the graph item instance. This property is optional and might be system generated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly friendlyName?: string;
    /**
     * The hash algorithm type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly algorithm?: FileHashAlgorithm;
    /**
     * The file hash value.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly hashValue?: string;
}

/** FileHash entity property bag. */
export declare interface FileHashEntityProperties extends EntityCommonProperties {
    /**
     * The hash algorithm type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly algorithm?: FileHashAlgorithm;
    /**
     * The file hash value.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly hashValue?: string;
}

/** Represents a file import in Azure Security Insights. */
export declare interface FileImport extends Resource {
    /** Describes how to ingest the records in the file. */
    ingestionMode?: IngestionMode;
    /** The content type of this file. */
    contentType?: FileImportContentType;
    /**
     * The time the file was imported.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdTimeUTC?: Date;
    /**
     * Represents the error file (if the import was ingested with errors or failed the validation).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly errorFile?: FileMetadata;
    /**
     * An ordered list of some of the errors that were encountered during validation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly errorsPreview?: ValidationError[];
    /** Represents the imported file. */
    importFile?: FileMetadata;
    /**
     * The number of records that have been successfully ingested.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly ingestedRecordCount?: number;
    /** The source for the data in the file. */
    source?: string;
    /**
     * The state of the file import.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly state?: FileImportState;
    /**
     * The number of records in the file.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly totalRecordCount?: number;
    /**
     * The number of records that have passed validation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly validRecordCount?: number;
    /**
     * The time the files associated with this import are deleted from the storage account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly filesValidUntilTimeUTC?: Date;
    /**
     * The time the file import record is soft deleted from the database and history.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly importValidUntilTimeUTC?: Date;
}

/**
 * Defines values for FileImportContentType. \
 * {@link KnownFileImportContentType} can be used interchangeably with FileImportContentType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **BasicIndicator**: File containing records with the core fields of an indicator, plus the observables to construct the STIX pattern. \
 * **StixIndicator**: File containing STIX indicators. \
 * **Unspecified**: File containing other records.
 */
export declare type FileImportContentType = string;

/** List all the file imports. */
export declare interface FileImportList {
    /**
     * URL to fetch the next set of file imports.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
    /** Array of file imports. */
    value: FileImport[];
}

/** Interface representing a FileImports. */
export declare interface FileImports {
    /**
     * Gets all file imports.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, options?: FileImportsListOptionalParams): PagedAsyncIterableIterator<FileImport>;
    /**
     * Gets a file import.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param fileImportId File import ID
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, fileImportId: string, options?: FileImportsGetOptionalParams): Promise<FileImportsGetResponse>;
    /**
     * Creates the file import.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param fileImportId File import ID
     * @param fileImport The file import
     * @param options The options parameters.
     */
    create(resourceGroupName: string, workspaceName: string, fileImportId: string, fileImport: FileImport, options?: FileImportsCreateOptionalParams): Promise<FileImportsCreateResponse>;
    /**
     * Delete the file import.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param fileImportId File import ID
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, workspaceName: string, fileImportId: string, options?: FileImportsDeleteOptionalParams): Promise<PollerLike<PollOperationState<FileImportsDeleteResponse>, FileImportsDeleteResponse>>;
    /**
     * Delete the file import.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param fileImportId File import ID
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, workspaceName: string, fileImportId: string, options?: FileImportsDeleteOptionalParams): Promise<FileImportsDeleteResponse>;
}

/** Optional parameters. */
export declare interface FileImportsCreateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the create operation. */
export declare type FileImportsCreateResponse = FileImport;

/** Optional parameters. */
export declare interface FileImportsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export declare type FileImportsDeleteResponse = FileImport;

/** Optional parameters. */
export declare interface FileImportsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type FileImportsGetResponse = FileImport;

/** Optional parameters. */
export declare interface FileImportsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type FileImportsListNextResponse = FileImportList;

/** Optional parameters. */
export declare interface FileImportsListOptionalParams extends coreClient.OperationOptions {
    /** Filters the results, based on a Boolean condition. Optional. */
    filter?: string;
    /** Sorts the results. Optional. */
    orderby?: string;
    /** Returns only the first n results. Optional. */
    top?: number;
    /** Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. Optional. */
    skipToken?: string;
}

/** Contains response data for the list operation. */
export declare type FileImportsListResponse = FileImportList;

/**
 * Defines values for FileImportState. \
 * {@link KnownFileImportState} can be used interchangeably with FileImportState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **FatalError**: A fatal error has occurred while ingesting the file. \
 * **Ingested**: The file has been ingested. \
 * **IngestedWithErrors**: The file has been ingested with errors. \
 * **InProgress**: The file ingestion is in progress. \
 * **Invalid**: The file is invalid. \
 * **WaitingForUpload**: Waiting for the file to be uploaded. \
 * **Unspecified**: Unspecified state.
 */
export declare type FileImportState = string;

/** Represents a file. */
export declare interface FileMetadata {
    /** The format of the file */
    fileFormat?: FileFormat;
    /** The name of the file. */
    fileName?: string;
    /** The size of the file. */
    fileSize?: number;
    /**
     * A URI with a valid SAS token to allow uploading / downloading the file.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly fileContentUri?: string;
    /**
     * Indicates whether the file was deleted from the storage account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly deleteStatus?: DeleteStatus;
}

/** Represents Fusion alert rule. */
export declare interface FusionAlertRule extends AlertRule {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "Fusion";
    /** The Name of the alert rule template used to create this rule. */
    alertRuleTemplateName?: string;
    /**
     * The description of the alert rule.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly description?: string;
    /**
     * The display name for alerts created by this alert rule.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly displayName?: string;
    /** Determines whether this alert rule is enabled or disabled. */
    enabled?: boolean;
    /** Configuration for all supported source signals in fusion detection. */
    sourceSettings?: FusionSourceSettings[];
    /** Configuration to exclude scenarios in fusion detection. */
    scenarioExclusionPatterns?: FusionScenarioExclusionPattern[];
    /**
     * The last time that this alert has been modified.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastModifiedUtc?: Date;
    /**
     * The severity for alerts created by this alert rule.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly severity?: AlertSeverity;
    /**
     * The tactics of the alert rule
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tactics?: AttackTactic[];
    /**
     * The techniques of the alert rule
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly techniques?: string[];
}

/** Represents Fusion alert rule template. */
export declare interface FusionAlertRuleTemplate extends AlertRuleTemplate {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "Fusion";
    /** the number of alert rules that were created by this template */
    alertRulesCreatedByTemplateCount?: number;
    /**
     * The time that this alert rule template has been added.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdDateUTC?: Date;
    /**
     * The time that this alert rule template was last updated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastUpdatedDateUTC?: Date;
    /** The description of the alert rule template. */
    description?: string;
    /** The display name for alert rule template. */
    displayName?: string;
    /** The required data connectors for this template */
    requiredDataConnectors?: AlertRuleTemplateDataSource[];
    /** The alert rule template status. */
    status?: TemplateStatus;
    /** The severity for alerts created by this alert rule. */
    severity?: AlertSeverity;
    /** The tactics of the alert rule template */
    tactics?: AttackTactic[];
    /** The techniques of the alert rule */
    techniques?: string[];
    /** All supported source signal configurations consumed in fusion detection. */
    sourceSettings?: FusionTemplateSourceSetting[];
}

/** Represents a Fusion scenario exclusion patterns in Fusion detection. */
export declare interface FusionScenarioExclusionPattern {
    /** Scenario exclusion pattern. */
    exclusionPattern: string;
    /** DateTime when scenario exclusion pattern is added in UTC. */
    dateAddedInUTC: string;
}

/** Represents a supported source signal configuration in Fusion detection. */
export declare interface FusionSourceSettings {
    /** Determines whether this source signal is enabled or disabled in Fusion detection. */
    enabled: boolean;
    /** Name of the Fusion source signal. Refer to Fusion alert rule template for supported values. */
    sourceName: string;
    /** Configuration for all source subtypes under this source signal consumed in fusion detection. */
    sourceSubTypes?: FusionSourceSubTypeSetting[];
}

/** Represents a supported source subtype configuration under a source signal in Fusion detection. */
export declare interface FusionSourceSubTypeSetting {
    /** Determines whether this source subtype under source signal is enabled or disabled in Fusion detection. */
    enabled: boolean;
    /** The Name of the source subtype under a given source signal in Fusion detection. Refer to Fusion alert rule template for supported values. */
    sourceSubTypeName: string;
    /**
     * The display name of source subtype under a source signal consumed in Fusion detection.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly sourceSubTypeDisplayName?: string;
    /** Severity configuration for a source subtype consumed in fusion detection. */
    severityFilters: FusionSubTypeSeverityFilter;
}

/** Represents severity configuration for a source subtype consumed in Fusion detection. */
export declare interface FusionSubTypeSeverityFilter {
    /**
     * Determines whether this source subtype supports severity configuration or not.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isSupported?: boolean;
    /** Individual Severity configuration settings for a given source subtype consumed in Fusion detection. */
    filters?: FusionSubTypeSeverityFiltersItem[];
}

/** Represents a Severity filter setting for a given source subtype consumed in Fusion detection. */
export declare interface FusionSubTypeSeverityFiltersItem {
    /** The Severity for a given source subtype consumed in Fusion detection. */
    severity: AlertSeverity;
    /** Determines whether this severity is enabled or disabled for this source subtype consumed in Fusion detection. */
    enabled: boolean;
}

/** Represents a source signal consumed in Fusion detection. */
export declare interface FusionTemplateSourceSetting {
    /** The name of a source signal consumed in Fusion detection. */
    sourceName: string;
    /** All supported source subtypes under this source signal consumed in fusion detection. */
    sourceSubTypes?: FusionTemplateSourceSubType[];
}

/** Represents a source subtype under a source signal consumed in Fusion detection. */
export declare interface FusionTemplateSourceSubType {
    /** The name of source subtype under a source signal consumed in Fusion detection. */
    sourceSubTypeName: string;
    /**
     * The display name of source subtype under a source signal consumed in Fusion detection.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly sourceSubTypeDisplayName?: string;
    /** Severity configuration available for a source subtype consumed in fusion detection. */
    severityFilter: FusionTemplateSubTypeSeverityFilter;
}

/** Represents severity configurations available for a source subtype consumed in Fusion detection. */
export declare interface FusionTemplateSubTypeSeverityFilter {
    /** Determines whether severity configuration is supported for this source subtype consumed in Fusion detection. */
    isSupported: boolean;
    /** List of all supported severities for this source subtype consumed in Fusion detection. */
    severityFilters?: AlertSeverity[];
}

/** The geo-location context attached to the ip entity */
export declare interface GeoLocation {
    /**
     * Autonomous System Number
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly asn?: number;
    /**
     * City name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly city?: string;
    /**
     * The country code according to ISO 3166 format
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly countryCode?: string;
    /**
     * Country name according to ISO 3166 Alpha 2: the lowercase of the English Short Name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly countryName?: string;
    /**
     * The longitude of the identified location, expressed as a floating point number with range of -180 to 180, with positive numbers representing East and negative numbers representing West. Latitude and longitude are derived from the city or postal code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly latitude?: number;
    /**
     * The latitude of the identified location, expressed as a floating point number with range of - 90 to 90, with positive numbers representing North and negative numbers representing South. Latitude and longitude are derived from the city or postal code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly longitude?: number;
    /**
     * State name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly state?: string;
}

/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/**
 * Defines values for GetInsightsError. \
 * {@link KnownGetInsightsError} can be used interchangeably with GetInsightsError,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Insight**
 */
export declare type GetInsightsError = string;

/** GetInsights Query Errors. */
export declare interface GetInsightsErrorKind {
    /** the query kind */
    kind: GetInsightsError;
    /** the query id */
    queryId?: string;
    /** the error message */
    errorMessage: string;
}

/** Get Insights result metadata. */
export declare interface GetInsightsResultsMetadata {
    /** the total items found for the insights request */
    totalCount: number;
    /** information about the failed queries */
    errors?: GetInsightsErrorKind[];
}

/** Retrieve queries for entity result operation response. */
export declare interface GetQueriesResponse {
    /** The query result values. */
    value?: EntityQueryItemUnion[];
}

/** Resources created in GitHub repository. */
export declare interface GitHubResourceInfo {
    /** GitHub application installation id. */
    appInstallationId?: string;
}

/** The graph query to show the current data status */
export declare interface GraphQueries {
    /** the metric that the query is checking */
    metricName?: string;
    /** The legend for the graph */
    legend?: string;
    /** The base query for the graph */
    baseQuery?: string;
}

/** Grouping configuration property bag. */
export declare interface GroupingConfiguration {
    /** Grouping enabled */
    enabled: boolean;
    /** Re-open closed matching incidents */
    reopenClosedIncident: boolean;
    /** Limit the group to alerts created within the lookback duration (in ISO 8601 duration format) */
    lookbackDuration: string;
    /** Grouping matching method. When method is Selected at least one of groupByEntities, groupByAlertDetails, groupByCustomDetails must be provided and not empty. */
    matchingMethod: MatchingMethod;
    /** A list of entity types to group by (when matchingMethod is Selected). Only entities defined in the current alert rule may be used. */
    groupByEntities?: EntityMappingType[];
    /** A list of alert details to group by (when matchingMethod is Selected) */
    groupByAlertDetails?: AlertDetail[];
    /** A list of custom details keys to group by (when matchingMethod is Selected). Only keys defined in the current alert rule may be used. */
    groupByCustomDetails?: string[];
}

/** Represents a host entity. */
export declare interface HostEntity extends Entity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "Host";
    /**
     * A bag of custom fields that should be part of the entity and will be presented to the user.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalData?: {
        [propertyName: string]: Record<string, unknown>;
    };
    /**
     * The graph item display name which is a short humanly readable description of the graph item instance. This property is optional and might be system generated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly friendlyName?: string;
    /**
     * The azure resource id of the VM.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly azureID?: string;
    /**
     * The DNS domain that this host belongs to. Should contain the compete DNS suffix for the domain
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dnsDomain?: string;
    /**
     * The hostname without the domain suffix.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly hostName?: string;
    /**
     * Determines whether this host belongs to a domain.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isDomainJoined?: boolean;
    /**
     * The host name (pre-windows2000).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly netBiosName?: string;
    /**
     * The NT domain that this host belongs to.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly ntDomain?: string;
    /**
     * The OMS agent id, if the host has OMS agent installed.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly omsAgentID?: string;
    /** The operating system type. */
    osFamily?: OSFamily;
    /**
     * A free text representation of the operating system. This field is meant to hold specific versions the are more fine grained than OSFamily or future values not supported by OSFamily enumeration
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly osVersion?: string;
}

/** Host entity property bag. */
export declare interface HostEntityProperties extends EntityCommonProperties {
    /**
     * The azure resource id of the VM.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly azureID?: string;
    /**
     * The DNS domain that this host belongs to. Should contain the compete DNS suffix for the domain
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dnsDomain?: string;
    /**
     * The hostname without the domain suffix.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly hostName?: string;
    /**
     * Determines whether this host belongs to a domain.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isDomainJoined?: boolean;
    /**
     * The host name (pre-windows2000).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly netBiosName?: string;
    /**
     * The NT domain that this host belongs to.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly ntDomain?: string;
    /**
     * The OMS agent id, if the host has OMS agent installed.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly omsAgentID?: string;
    /** The operating system type. */
    osFamily?: OSFamily;
    /**
     * A free text representation of the operating system. This field is meant to hold specific versions the are more fine grained than OSFamily or future values not supported by OSFamily enumeration
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly osVersion?: string;
}

/** Represents a Hunting bookmark entity. */
export declare interface HuntingBookmark extends Entity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "Bookmark";
    /**
     * A bag of custom fields that should be part of the entity and will be presented to the user.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalData?: {
        [propertyName: string]: Record<string, unknown>;
    };
    /**
     * The graph item display name which is a short humanly readable description of the graph item instance. This property is optional and might be system generated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly friendlyName?: string;
    /** The time the bookmark was created */
    created?: Date;
    /** Describes a user that created the bookmark */
    createdBy?: UserInfo;
    /** The display name of the bookmark */
    displayName?: string;
    /** The time of the event */
    eventTime?: Date;
    /** List of labels relevant to this bookmark */
    labels?: string[];
    /** The notes of the bookmark */
    notes?: string;
    /** The query of the bookmark. */
    query?: string;
    /** The query result of the bookmark. */
    queryResult?: string;
    /** The last time the bookmark was updated */
    updated?: Date;
    /** Describes a user that updated the bookmark */
    updatedBy?: UserInfo;
    /** Describes an incident that relates to bookmark */
    incidentInfo?: IncidentInfo;
}

/** Describes bookmark properties */
export declare interface HuntingBookmarkProperties extends EntityCommonProperties {
    /** The time the bookmark was created */
    created?: Date;
    /** Describes a user that created the bookmark */
    createdBy?: UserInfo;
    /** The display name of the bookmark */
    displayName: string;
    /** The time of the event */
    eventTime?: Date;
    /** List of labels relevant to this bookmark */
    labels?: string[];
    /** The notes of the bookmark */
    notes?: string;
    /** The query of the bookmark. */
    query: string;
    /** The query result of the bookmark. */
    queryResult?: string;
    /** The last time the bookmark was updated */
    updated?: Date;
    /** Describes a user that updated the bookmark */
    updatedBy?: UserInfo;
    /** Describes an incident that relates to bookmark */
    incidentInfo?: IncidentInfo;
}

/** Represents an incident in Azure Security Insights. */
export declare interface Incident extends ResourceWithEtag {
    /**
     * Additional data on the incident
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalData?: IncidentAdditionalData;
    /** The reason the incident was closed */
    classification?: IncidentClassification;
    /** Describes the reason the incident was closed */
    classificationComment?: string;
    /** The classification reason the incident was closed with */
    classificationReason?: IncidentClassificationReason;
    /**
     * The time the incident was created
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdTimeUtc?: Date;
    /** The description of the incident */
    description?: string;
    /** The time of the first activity in the incident */
    firstActivityTimeUtc?: Date;
    /**
     * The deep-link url to the incident in Azure portal
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly incidentUrl?: string;
    /**
     * A sequential number
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly incidentNumber?: number;
    /** List of labels relevant to this incident */
    labels?: IncidentLabel[];
    /** The name of the source provider that generated the incident */
    providerName?: string;
    /** The incident ID assigned by the incident provider */
    providerIncidentId?: string;
    /** The time of the last activity in the incident */
    lastActivityTimeUtc?: Date;
    /**
     * The last time the incident was updated
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastModifiedTimeUtc?: Date;
    /** Describes a user that the incident is assigned to */
    owner?: IncidentOwnerInfo;
    /**
     * List of resource ids of Analytic rules related to the incident
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly relatedAnalyticRuleIds?: string[];
    /** The severity of the incident */
    severity?: IncidentSeverity;
    /** The status of the incident */
    status?: IncidentStatus;
    /** Describes a team for the incident */
    teamInformation?: TeamInformation;
    /** The title of the incident */
    title?: string;
}

/** Incident additional data property bag. */
export declare interface IncidentAdditionalData {
    /**
     * The number of alerts in the incident
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly alertsCount?: number;
    /**
     * The number of bookmarks in the incident
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly bookmarksCount?: number;
    /**
     * The number of comments in the incident
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly commentsCount?: number;
    /**
     * List of product names of alerts in the incident
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly alertProductNames?: string[];
    /**
     * The provider incident url to the incident in Microsoft 365 Defender portal
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly providerIncidentUrl?: string;
    /**
     * The tactics associated with incident
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tactics?: AttackTactic[];
    /**
     * The techniques associated with incident's tactics'
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly techniques?: string[];
}

/** List of incident alerts. */
export declare interface IncidentAlertList {
    /** Array of incident alerts. */
    value: SecurityAlert[];
}

/** List of incident bookmarks. */
export declare interface IncidentBookmarkList {
    /** Array of incident bookmarks. */
    value: HuntingBookmark[];
}

/**
 * Defines values for IncidentClassification. \
 * {@link KnownIncidentClassification} can be used interchangeably with IncidentClassification,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Undetermined**: Incident classification was undetermined \
 * **TruePositive**: Incident was true positive \
 * **BenignPositive**: Incident was benign positive \
 * **FalsePositive**: Incident was false positive
 */
export declare type IncidentClassification = string;

/**
 * Defines values for IncidentClassificationReason. \
 * {@link KnownIncidentClassificationReason} can be used interchangeably with IncidentClassificationReason,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SuspiciousActivity**: Classification reason was suspicious activity \
 * **SuspiciousButExpected**: Classification reason was suspicious but expected \
 * **IncorrectAlertLogic**: Classification reason was incorrect alert logic \
 * **InaccurateData**: Classification reason was inaccurate data
 */
export declare type IncidentClassificationReason = string;

/** Represents an incident comment */
export declare interface IncidentComment extends ResourceWithEtag {
    /**
     * The time the comment was created
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdTimeUtc?: Date;
    /**
     * The time the comment was updated
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastModifiedTimeUtc?: Date;
    /** The comment message */
    message?: string;
    /**
     * Describes the client that created the comment
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly author?: ClientInfo;
}

/** List of incident comments. */
export declare interface IncidentCommentList {
    /**
     * URL to fetch the next set of comments.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
    /** Array of comments. */
    value: IncidentComment[];
}

/** Interface representing a IncidentComments. */
export declare interface IncidentComments {
    /**
     * Gets all incident comments.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param incidentId Incident ID
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, incidentId: string, options?: IncidentCommentsListOptionalParams): PagedAsyncIterableIterator<IncidentComment>;
    /**
     * Gets an incident comment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param incidentId Incident ID
     * @param incidentCommentId Incident comment ID
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, incidentId: string, incidentCommentId: string, options?: IncidentCommentsGetOptionalParams): Promise<IncidentCommentsGetResponse>;
    /**
     * Creates or updates the incident comment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param incidentId Incident ID
     * @param incidentCommentId Incident comment ID
     * @param incidentComment The incident comment
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, workspaceName: string, incidentId: string, incidentCommentId: string, incidentComment: IncidentComment, options?: IncidentCommentsCreateOrUpdateOptionalParams): Promise<IncidentCommentsCreateOrUpdateResponse>;
    /**
     * Delete the incident comment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param incidentId Incident ID
     * @param incidentCommentId Incident comment ID
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, workspaceName: string, incidentId: string, incidentCommentId: string, options?: IncidentCommentsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface IncidentCommentsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type IncidentCommentsCreateOrUpdateResponse = IncidentComment;

/** Optional parameters. */
export declare interface IncidentCommentsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface IncidentCommentsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type IncidentCommentsGetResponse = IncidentComment;

/** Optional parameters. */
export declare interface IncidentCommentsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type IncidentCommentsListNextResponse = IncidentCommentList;

/** Optional parameters. */
export declare interface IncidentCommentsListOptionalParams extends coreClient.OperationOptions {
    /** Filters the results, based on a Boolean condition. Optional. */
    filter?: string;
    /** Sorts the results. Optional. */
    orderby?: string;
    /** Returns only the first n results. Optional. */
    top?: number;
    /** Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. Optional. */
    skipToken?: string;
}

/** Contains response data for the list operation. */
export declare type IncidentCommentsListResponse = IncidentCommentList;

/** Incident Configuration property bag. */
export declare interface IncidentConfiguration {
    /** Create incidents from alerts triggered by this analytics rule */
    createIncident: boolean;
    /** Set how the alerts that are triggered by this analytics rule, are grouped into incidents */
    groupingConfiguration?: GroupingConfiguration;
}

/** The incident related entities response. */
export declare interface IncidentEntitiesResponse {
    /** Array of the incident related entities. */
    entities?: EntityUnion[];
    /** The metadata from the incident related entities results. */
    metaData?: IncidentEntitiesResultsMetadata[];
}

/** Information of a specific aggregation in the incident related entities result. */
export declare interface IncidentEntitiesResultsMetadata {
    /** Total number of aggregations of the given kind in the incident related entities result. */
    count: number;
    /** The kind of the aggregated entity. */
    entityKind: EntityKind;
}

/** Describes related incident information for the bookmark */
export declare interface IncidentInfo {
    /** Incident Id */
    incidentId?: string;
    /** The severity of the incident */
    severity?: IncidentSeverity;
    /** The title of the incident */
    title?: string;
    /** Relation Name */
    relationName?: string;
}

/** Represents an incident label */
export declare interface IncidentLabel {
    /** The name of the label */
    labelName: string;
    /**
     * The type of the label
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly labelType?: IncidentLabelType;
}

/**
 * Defines values for IncidentLabelType. \
 * {@link KnownIncidentLabelType} can be used interchangeably with IncidentLabelType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User**: Label manually created by a user \
 * **AutoAssigned**: Label automatically created by the system
 */
export declare type IncidentLabelType = string;

/** List all the incidents. */
export declare interface IncidentList {
    /**
     * URL to fetch the next set of incidents.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
    /** Array of incidents. */
    value: Incident[];
}

/** Information on the user an incident is assigned to */
export declare interface IncidentOwnerInfo {
    /** The email of the user the incident is assigned to. */
    email?: string;
    /** The name of the user the incident is assigned to. */
    assignedTo?: string;
    /** The object id of the user the incident is assigned to. */
    objectId?: string;
    /** The user principal name of the user the incident is assigned to. */
    userPrincipalName?: string;
    /** The type of the owner the incident is assigned to. */
    ownerType?: OwnerType;
}

export declare interface IncidentPropertiesAction {
    /** The severity of the incident */
    severity?: IncidentSeverity;
    /** The status of the incident */
    status?: IncidentStatus;
    /** The reason the incident was closed */
    classification?: IncidentClassification;
    /** The classification reason the incident was closed with */
    classificationReason?: IncidentClassificationReason;
    /** Describes the reason the incident was closed. */
    classificationComment?: string;
    /** Information on the user an incident is assigned to */
    owner?: IncidentOwnerInfo;
    /** List of labels to add to the incident. */
    labels?: IncidentLabel[];
}

/** Interface representing a IncidentRelations. */
export declare interface IncidentRelations {
    /**
     * Gets all incident relations.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param incidentId Incident ID
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, incidentId: string, options?: IncidentRelationsListOptionalParams): PagedAsyncIterableIterator<Relation>;
    /**
     * Gets an incident relation.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param incidentId Incident ID
     * @param relationName Relation Name
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, incidentId: string, relationName: string, options?: IncidentRelationsGetOptionalParams): Promise<IncidentRelationsGetResponse>;
    /**
     * Creates or updates the incident relation.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param incidentId Incident ID
     * @param relationName Relation Name
     * @param relation The relation model
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, workspaceName: string, incidentId: string, relationName: string, relation: Relation, options?: IncidentRelationsCreateOrUpdateOptionalParams): Promise<IncidentRelationsCreateOrUpdateResponse>;
    /**
     * Delete the incident relation.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param incidentId Incident ID
     * @param relationName Relation Name
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, workspaceName: string, incidentId: string, relationName: string, options?: IncidentRelationsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface IncidentRelationsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type IncidentRelationsCreateOrUpdateResponse = Relation;

/** Optional parameters. */
export declare interface IncidentRelationsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface IncidentRelationsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type IncidentRelationsGetResponse = Relation;

/** Optional parameters. */
export declare interface IncidentRelationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type IncidentRelationsListNextResponse = RelationList;

/** Optional parameters. */
export declare interface IncidentRelationsListOptionalParams extends coreClient.OperationOptions {
    /** Filters the results, based on a Boolean condition. Optional. */
    filter?: string;
    /** Sorts the results. Optional. */
    orderby?: string;
    /** Returns only the first n results. Optional. */
    top?: number;
    /** Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. Optional. */
    skipToken?: string;
}

/** Contains response data for the list operation. */
export declare type IncidentRelationsListResponse = RelationList;

/** Interface representing a Incidents. */
export declare interface Incidents {
    /**
     * Gets all incidents.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, options?: IncidentsListOptionalParams): PagedAsyncIterableIterator<Incident>;
    /**
     * Triggers playbook on a specific incident
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param incidentIdentifier
     * @param options The options parameters.
     */
    runPlaybook(resourceGroupName: string, workspaceName: string, incidentIdentifier: string, options?: IncidentsRunPlaybookOptionalParams): Promise<IncidentsRunPlaybookResponse>;
    /**
     * Gets an incident.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param incidentId Incident ID
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, incidentId: string, options?: IncidentsGetOptionalParams): Promise<IncidentsGetResponse>;
    /**
     * Creates or updates the incident.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param incidentId Incident ID
     * @param incident The incident
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, workspaceName: string, incidentId: string, incident: Incident, options?: IncidentsCreateOrUpdateOptionalParams): Promise<IncidentsCreateOrUpdateResponse>;
    /**
     * Delete the incident.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param incidentId Incident ID
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, workspaceName: string, incidentId: string, options?: IncidentsDeleteOptionalParams): Promise<void>;
    /**
     * Creates a Microsoft team to investigate the incident by sharing information and insights between
     * participants.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param incidentId Incident ID
     * @param teamProperties Team properties
     * @param options The options parameters.
     */
    createTeam(resourceGroupName: string, workspaceName: string, incidentId: string, teamProperties: TeamProperties, options?: IncidentsCreateTeamOptionalParams): Promise<IncidentsCreateTeamResponse>;
    /**
     * Gets all incident alerts.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param incidentId Incident ID
     * @param options The options parameters.
     */
    listAlerts(resourceGroupName: string, workspaceName: string, incidentId: string, options?: IncidentsListAlertsOptionalParams): Promise<IncidentsListAlertsResponse>;
    /**
     * Gets all incident bookmarks.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param incidentId Incident ID
     * @param options The options parameters.
     */
    listBookmarks(resourceGroupName: string, workspaceName: string, incidentId: string, options?: IncidentsListBookmarksOptionalParams): Promise<IncidentsListBookmarksResponse>;
    /**
     * Gets all incident related entities.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param incidentId Incident ID
     * @param options The options parameters.
     */
    listEntities(resourceGroupName: string, workspaceName: string, incidentId: string, options?: IncidentsListEntitiesOptionalParams): Promise<IncidentsListEntitiesResponse>;
}

/** Optional parameters. */
export declare interface IncidentsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type IncidentsCreateOrUpdateResponse = Incident;

/** Optional parameters. */
export declare interface IncidentsCreateTeamOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createTeam operation. */
export declare type IncidentsCreateTeamResponse = TeamInformation;

/** Optional parameters. */
export declare interface IncidentsDeleteOptionalParams extends coreClient.OperationOptions {
}

/**
 * Defines values for IncidentSeverity. \
 * {@link KnownIncidentSeverity} can be used interchangeably with IncidentSeverity,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **High**: High severity \
 * **Medium**: Medium severity \
 * **Low**: Low severity \
 * **Informational**: Informational severity
 */
export declare type IncidentSeverity = string;

/** Optional parameters. */
export declare interface IncidentsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type IncidentsGetResponse = Incident;

/** Optional parameters. */
export declare interface IncidentsListAlertsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listAlerts operation. */
export declare type IncidentsListAlertsResponse = IncidentAlertList;

/** Optional parameters. */
export declare interface IncidentsListBookmarksOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBookmarks operation. */
export declare type IncidentsListBookmarksResponse = IncidentBookmarkList;

/** Optional parameters. */
export declare interface IncidentsListEntitiesOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listEntities operation. */
export declare type IncidentsListEntitiesResponse = IncidentEntitiesResponse;

/** Optional parameters. */
export declare interface IncidentsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type IncidentsListNextResponse = IncidentList;

/** Optional parameters. */
export declare interface IncidentsListOptionalParams extends coreClient.OperationOptions {
    /** Filters the results, based on a Boolean condition. Optional. */
    filter?: string;
    /** Sorts the results. Optional. */
    orderby?: string;
    /** Returns only the first n results. Optional. */
    top?: number;
    /** Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. Optional. */
    skipToken?: string;
}

/** Contains response data for the list operation. */
export declare type IncidentsListResponse = IncidentList;

/** Optional parameters. */
export declare interface IncidentsRunPlaybookOptionalParams extends coreClient.OperationOptions {
    requestBody?: ManualTriggerRequestBody;
}

/** Contains response data for the runPlaybook operation. */
export declare type IncidentsRunPlaybookResponse = Record<string, unknown>;

/**
 * Defines values for IncidentStatus. \
 * {@link KnownIncidentStatus} can be used interchangeably with IncidentStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **New**: An active incident which isn't being handled currently \
 * **Active**: An active incident which is being handled \
 * **Closed**: A non-active incident
 */
export declare type IncidentStatus = string;

/**
 * Defines values for IngestionMode. \
 * {@link KnownIngestionMode} can be used interchangeably with IngestionMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **IngestOnlyIfAllAreValid**: No records should be ingested when invalid records are detected. \
 * **IngestAnyValidRecords**: Valid records should still be ingested when invalid records are detected. \
 * **Unspecified**: Unspecified
 */
export declare type IngestionMode = string;

/** Represents Insight Query. */
export declare interface InsightQueryItem extends EntityQueryItem {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "Insight";
    /** Properties bag for InsightQueryItem */
    properties?: InsightQueryItemProperties;
}

/** Represents Insight Query. */
export declare interface InsightQueryItemProperties extends EntityQueryItemProperties {
    /** The insight display name. */
    displayName?: string;
    /** The insight description. */
    description?: string;
    /** The base query of the insight. */
    baseQuery?: string;
    /** The insight table query. */
    tableQuery?: InsightQueryItemPropertiesTableQuery;
    /** The insight chart query. */
    chartQuery?: Record<string, unknown>;
    /** The activity query definitions. */
    additionalQuery?: InsightQueryItemPropertiesAdditionalQuery;
    /** The insight chart query. */
    defaultTimeRange?: InsightQueryItemPropertiesDefaultTimeRange;
    /** The insight chart query. */
    referenceTimeRange?: InsightQueryItemPropertiesReferenceTimeRange;
}

/** The activity query definitions. */
export declare interface InsightQueryItemPropertiesAdditionalQuery {
    /** The insight query. */
    query?: string;
    /** The insight text. */
    text?: string;
}

/** The insight chart query. */
export declare interface InsightQueryItemPropertiesDefaultTimeRange {
    /** The padding for the start time of the query. */
    beforeRange?: string;
    /** The padding for the end time of the query. */
    afterRange?: string;
}

/** The insight chart query. */
export declare interface InsightQueryItemPropertiesReferenceTimeRange {
    /** Additional query time for looking back. */
    beforeRange?: string;
}

/** The insight table query. */
export declare interface InsightQueryItemPropertiesTableQuery {
    /** List of insight column definitions. */
    columnsDefinitions?: InsightQueryItemPropertiesTableQueryColumnsDefinitionsItem[];
    /** List of insight queries definitions. */
    queriesDefinitions?: InsightQueryItemPropertiesTableQueryQueriesDefinitionsItem[];
}

export declare interface InsightQueryItemPropertiesTableQueryColumnsDefinitionsItem {
    /** Insight column header. */
    header?: string;
    /** Insights Column type. */
    outputType?: OutputType;
    /** Is query supports deep-link. */
    supportDeepLink?: boolean;
}

export declare interface InsightQueryItemPropertiesTableQueryQueriesDefinitionsItem {
    /** Insight column header. */
    filter?: string;
    /** Insight column header. */
    summarize?: string;
    /** Insight column header. */
    project?: string;
    /** Insight column header. */
    linkColumnsDefinitions?: InsightQueryItemPropertiesTableQueryQueriesDefinitionsPropertiesItemsItem[];
}

export declare interface InsightQueryItemPropertiesTableQueryQueriesDefinitionsPropertiesItemsItem {
    /** Insight Link Definition Projected Name. */
    projectedName?: string;
    /** Insight Link Definition Query. */
    query?: string;
}

/** Query results for table insights query. */
export declare interface InsightsTableResult {
    /** Columns Metadata of the table */
    columns?: InsightsTableResultColumnsItem[];
    /** Rows data of the table */
    rows?: string[][];
}

export declare interface InsightsTableResultColumnsItem {
    /** the type of the colum */
    type?: string;
    /** the name of the colum */
    name?: string;
}

/** Instruction steps to enable the connector */
export declare interface InstructionSteps {
    /** Instruction step title */
    title?: string;
    /** Instruction step description */
    description?: string;
    /** Instruction step details */
    instructions?: InstructionStepsInstructionsItem[];
}

export declare interface InstructionStepsInstructionsItem extends ConnectorInstructionModelBase {
}

/** Represents IoT requirements check request. */
export declare interface IoTCheckRequirements extends DataConnectorsCheckRequirements {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "IOT";
    /** The subscription id to connect to, and get the data from. */
    subscriptionId?: string;
}

/** Represents IoT data connector. */
export declare interface IoTDataConnector extends DataConnector {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "IOT";
    /** The available data types for the connector. */
    dataTypes?: AlertsDataTypeOfDataConnector;
    /** The subscription id to connect to, and get the data from. */
    subscriptionId?: string;
}

/** IoT data connector properties. */
export declare interface IoTDataConnectorProperties extends DataConnectorWithAlertsProperties {
    /** The subscription id to connect to, and get the data from. */
    subscriptionId?: string;
}

/** Represents an IoT device entity. */
export declare interface IoTDeviceEntity extends Entity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "IoTDevice";
    /**
     * A bag of custom fields that should be part of the entity and will be presented to the user.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalData?: {
        [propertyName: string]: Record<string, unknown>;
    };
    /**
     * The graph item display name which is a short humanly readable description of the graph item instance. This property is optional and might be system generated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly friendlyName?: string;
    /**
     * The ID of the IoT Device in the IoT Hub
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly deviceId?: string;
    /**
     * The friendly name of the device
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly deviceName?: string;
    /**
     * The source of the device
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly source?: string;
    /**
     * The ID of the security agent running on the device
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly iotSecurityAgentId?: string;
    /**
     * The type of the device
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly deviceType?: string;
    /**
     * The vendor of the device
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly vendor?: string;
    /**
     * The ID of the edge device
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly edgeId?: string;
    /**
     * The MAC address of the device
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly macAddress?: string;
    /**
     * The model of the device
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly model?: string;
    /**
     * The serial number of the device
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly serialNumber?: string;
    /**
     * The firmware version of the device
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly firmwareVersion?: string;
    /**
     * The operating system of the device
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly operatingSystem?: string;
    /**
     * The AzureResource entity id of the IoT Hub
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly iotHubEntityId?: string;
    /**
     * The Host entity id of this device
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly hostEntityId?: string;
    /**
     * The IP entity if of this device
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly ipAddressEntityId?: string;
    /**
     * A list of TI contexts attached to the IoTDevice entity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly threatIntelligence?: ThreatIntelligence[];
    /**
     * A list of protocols of the IoTDevice entity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly protocols?: string[];
    /**
     * A list of owners of the IoTDevice entity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly owners?: string[];
    /**
     * A list of Nic entity ids of the IoTDevice entity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nicEntityIds?: string[];
    /**
     * The site of the device
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly site?: string;
    /**
     * The zone location of the device within a site
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly zone?: string;
    /**
     * The sensor the device is monitored by
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly sensor?: string;
    /**
     * The subType of the device ('PLC', 'HMI', 'EWS', etc.)
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly deviceSubType?: string;
    /** Device importance, determines if the device classified as 'crown jewel' */
    importance?: DeviceImportance;
    /**
     * The Purdue Layer of the device
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly purdueLayer?: string;
    /**
     * Determines whether the device classified as authorized device
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isAuthorized?: boolean;
    /**
     * Determines whether the device classified as programming device
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isProgramming?: boolean;
    /**
     * Is the device classified as a scanner device
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isScanner?: boolean;
}

/** IoTDevice entity property bag. */
export declare interface IoTDeviceEntityProperties extends EntityCommonProperties {
    /**
     * The ID of the IoT Device in the IoT Hub
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly deviceId?: string;
    /**
     * The friendly name of the device
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly deviceName?: string;
    /**
     * The source of the device
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly source?: string;
    /**
     * The ID of the security agent running on the device
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly iotSecurityAgentId?: string;
    /**
     * The type of the device
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly deviceType?: string;
    /**
     * The vendor of the device
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly vendor?: string;
    /**
     * The ID of the edge device
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly edgeId?: string;
    /**
     * The MAC address of the device
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly macAddress?: string;
    /**
     * The model of the device
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly model?: string;
    /**
     * The serial number of the device
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly serialNumber?: string;
    /**
     * The firmware version of the device
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly firmwareVersion?: string;
    /**
     * The operating system of the device
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly operatingSystem?: string;
    /**
     * The AzureResource entity id of the IoT Hub
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly iotHubEntityId?: string;
    /**
     * The Host entity id of this device
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly hostEntityId?: string;
    /**
     * The IP entity if of this device
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly ipAddressEntityId?: string;
    /**
     * A list of TI contexts attached to the IoTDevice entity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly threatIntelligence?: ThreatIntelligence[];
    /**
     * A list of protocols of the IoTDevice entity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly protocols?: string[];
    /**
     * A list of owners of the IoTDevice entity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly owners?: string[];
    /**
     * A list of Nic entity ids of the IoTDevice entity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nicEntityIds?: string[];
    /**
     * The site of the device
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly site?: string;
    /**
     * The zone location of the device within a site
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly zone?: string;
    /**
     * The sensor the device is monitored by
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly sensor?: string;
    /**
     * The subType of the device ('PLC', 'HMI', 'EWS', etc.)
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly deviceSubType?: string;
    /** Device importance, determines if the device classified as 'crown jewel' */
    importance?: DeviceImportance;
    /**
     * The Purdue Layer of the device
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly purdueLayer?: string;
    /**
     * Determines whether the device classified as authorized device
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isAuthorized?: boolean;
    /**
     * Determines whether the device classified as programming device
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isProgramming?: boolean;
    /**
     * Is the device classified as a scanner device
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isScanner?: boolean;
}

/** Represents an ip entity. */
export declare interface IpEntity extends Entity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "Ip";
    /**
     * A bag of custom fields that should be part of the entity and will be presented to the user.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalData?: {
        [propertyName: string]: Record<string, unknown>;
    };
    /**
     * The graph item display name which is a short humanly readable description of the graph item instance. This property is optional and might be system generated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly friendlyName?: string;
    /**
     * The IP address as string, e.g. 127.0.0.1 (either in Ipv4 or Ipv6)
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly address?: string;
    /**
     * The geo-location context attached to the ip entity
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly location?: GeoLocation;
    /**
     * A list of TI contexts attached to the ip entity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly threatIntelligence?: ThreatIntelligence[];
}

/** Ip entity property bag. */
export declare interface IpEntityProperties extends EntityCommonProperties {
    /**
     * The IP address as string, e.g. 127.0.0.1 (either in Ipv4 or Ipv6)
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly address?: string;
    /**
     * The geo-location context attached to the ip entity
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly location?: GeoLocation;
    /**
     * A list of TI contexts attached to the ip entity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly threatIntelligence?: ThreatIntelligence[];
}

/** Interface representing a IPGeodata. */
export declare interface IPGeodata {
    /**
     * Get geodata for a single IP address
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param ipAddress IP address (v4 or v6) to be enriched
     * @param options The options parameters.
     */
    get(resourceGroupName: string, ipAddress: string, options?: IPGeodataGetOptionalParams): Promise<IPGeodataGetResponse>;
}

/** Optional parameters. */
export declare interface IPGeodataGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type IPGeodataGetResponse = EnrichmentIpGeodata;

/**
 * Defines values for KillChainIntent. \
 * {@link KnownKillChainIntent} can be used interchangeably with KillChainIntent,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown**: The default value. \
 * **Probing**: Probing could be an attempt to access a certain resource regardless of a malicious intent or a failed attempt to gain access to a target system to gather information prior to exploitation. This step is usually detected as an attempt originating from outside the network in attempt to scan the target system and find a way in. \
 * **Exploitation**: Exploitation is the stage where an attacker manage to get foothold on the attacked resource. This stage is applicable not only for compute hosts, but also for resources such as user accounts, certificates etc. Adversaries will often be able to control the resource after this stage. \
 * **Persistence**: Persistence is any access, action, or configuration change to a system that gives an adversary a persistent presence on that system. Adversaries will often need to maintain access to systems through interruptions such as system restarts, loss of credentials, or other failures that would require a remote access tool to restart or alternate backdoor for them to regain access. \
 * **PrivilegeEscalation**: Privilege escalation is the result of actions that allow an adversary to obtain a higher level of permissions on a system or network. Certain tools or actions require a higher level of privilege to work and are likely necessary at many points throughout an operation. User accounts with permissions to access specific systems or perform specific functions necessary for adversaries to achieve their objective may also be considered an escalation of privilege. \
 * **DefenseEvasion**: Defense evasion consists of techniques an adversary may use to evade detection or avoid other defenses. Sometimes these actions are the same as or variations of techniques in other categories that have the added benefit of subverting a particular defense or mitigation.  \
 * **CredentialAccess**: Credential access represents techniques resulting in access to or control over system, domain, or service credentials that are used within an enterprise environment. Adversaries will likely attempt to obtain legitimate credentials from users or administrator accounts (local system administrator or domain users with administrator access) to use within the network. With sufficient access within a network, an adversary can create accounts for later use within the environment. \
 * **Discovery**: Discovery consists of techniques that allow the adversary to gain knowledge about the system and internal network. When adversaries gain access to a new system, they must orient themselves to what they now have control of and what benefits operating from that system give to their current objective or overall goals during the intrusion. The operating system provides many native tools that aid in this post-compromise information-gathering phase. \
 * **LateralMovement**: Lateral movement consists of techniques that enable an adversary to access and control remote systems on a network and could, but does not necessarily, include execution of tools on remote systems. The lateral movement techniques could allow an adversary to gather information from a system without needing additional tools, such as a remote access tool. An adversary can use lateral movement for many purposes, including remote Execution of tools, pivoting to additional systems, access to specific information or files, access to additional credentials, or to cause an effect. \
 * **Execution**: The execution tactic represents techniques that result in execution of adversary-controlled code on a local or remote system. This tactic is often used in conjunction with lateral movement to expand access to remote systems on a network. \
 * **Collection**: Collection consists of techniques used to identify and gather information, such as sensitive files, from a target network prior to exfiltration. This category also covers locations on a system or network where the adversary may look for information to exfiltrate. \
 * **Exfiltration**: Exfiltration refers to techniques and attributes that result or aid in the adversary removing files and information from a target network. This category also covers locations on a system or network where the adversary may look for information to exfiltrate. \
 * **CommandAndControl**: The command and control tactic represents how adversaries communicate with systems under their control within a target network. \
 * **Impact**: The impact intent primary objective is to directly reduce the availability or integrity of a system, service, or network; including manipulation of data to impact a business or operational process. This would often refer to techniques such as ransom-ware, defacement, data manipulation and others.
 */
export declare type KillChainIntent = string;

/**
 * Defines values for Kind. \
 * {@link KnownKind} can be used interchangeably with Kind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **DataConnector** \
 * **DataType** \
 * **Workbook** \
 * **WorkbookTemplate** \
 * **Playbook** \
 * **PlaybookTemplate** \
 * **AnalyticsRuleTemplate** \
 * **AnalyticsRule** \
 * **HuntingQuery** \
 * **InvestigationQuery** \
 * **Parser** \
 * **Watchlist** \
 * **WatchlistTemplate** \
 * **Solution** \
 * **AzureFunction** \
 * **LogicAppsCustomConnector** \
 * **AutomationRule**
 */
export declare type Kind = string;

/** Known values of {@link ActionType} that the service accepts. */
export declare enum KnownActionType {
    /** Modify an object's properties */
    ModifyProperties = "ModifyProperties",
    /** Run a playbook on an object */
    RunPlaybook = "RunPlaybook"
}

/** Known values of {@link AlertDetail} that the service accepts. */
export declare enum KnownAlertDetail {
    /** Alert display name */
    DisplayName = "DisplayName",
    /** Alert severity */
    Severity = "Severity"
}

/** Known values of {@link AlertRuleKind} that the service accepts. */
export declare enum KnownAlertRuleKind {
    /** Scheduled */
    Scheduled = "Scheduled",
    /** MicrosoftSecurityIncidentCreation */
    MicrosoftSecurityIncidentCreation = "MicrosoftSecurityIncidentCreation",
    /** Fusion */
    Fusion = "Fusion",
    /** MLBehaviorAnalytics */
    MLBehaviorAnalytics = "MLBehaviorAnalytics",
    /** ThreatIntelligence */
    ThreatIntelligence = "ThreatIntelligence",
    /** NRT */
    NRT = "NRT"
}

/** Known values of {@link AlertSeverity} that the service accepts. */
export declare enum KnownAlertSeverity {
    /** High severity */
    High = "High",
    /** Medium severity */
    Medium = "Medium",
    /** Low severity */
    Low = "Low",
    /** Informational severity */
    Informational = "Informational"
}

/** Known values of {@link AlertStatus} that the service accepts. */
export declare enum KnownAlertStatus {
    /** Unknown value */
    Unknown = "Unknown",
    /** New alert */
    New = "New",
    /** Alert closed after handling */
    Resolved = "Resolved",
    /** Alert dismissed as false positive */
    Dismissed = "Dismissed",
    /** Alert is being handled */
    InProgress = "InProgress"
}

/** Known values of {@link AntispamMailDirection} that the service accepts. */
export declare enum KnownAntispamMailDirection {
    /** Unknown */
    Unknown = "Unknown",
    /** Inbound */
    Inbound = "Inbound",
    /** Outbound */
    Outbound = "Outbound",
    /** Intraorg */
    Intraorg = "Intraorg"
}

/** Known values of {@link AttackTactic} that the service accepts. */
export declare enum KnownAttackTactic {
    /** Reconnaissance */
    Reconnaissance = "Reconnaissance",
    /** ResourceDevelopment */
    ResourceDevelopment = "ResourceDevelopment",
    /** InitialAccess */
    InitialAccess = "InitialAccess",
    /** Execution */
    Execution = "Execution",
    /** Persistence */
    Persistence = "Persistence",
    /** PrivilegeEscalation */
    PrivilegeEscalation = "PrivilegeEscalation",
    /** DefenseEvasion */
    DefenseEvasion = "DefenseEvasion",
    /** CredentialAccess */
    CredentialAccess = "CredentialAccess",
    /** Discovery */
    Discovery = "Discovery",
    /** LateralMovement */
    LateralMovement = "LateralMovement",
    /** Collection */
    Collection = "Collection",
    /** Exfiltration */
    Exfiltration = "Exfiltration",
    /** CommandAndControl */
    CommandAndControl = "CommandAndControl",
    /** Impact */
    Impact = "Impact",
    /** PreAttack */
    PreAttack = "PreAttack",
    /** ImpairProcessControl */
    ImpairProcessControl = "ImpairProcessControl",
    /** InhibitResponseFunction */
    InhibitResponseFunction = "InhibitResponseFunction"
}

/** Known values of {@link AutomationRuleBooleanConditionSupportedOperator} that the service accepts. */
export declare enum KnownAutomationRuleBooleanConditionSupportedOperator {
    /** Evaluates as true if all the item conditions are evaluated as true */
    And = "And",
    /** Evaluates as true if at least one of the item conditions are evaluated as true */
    Or = "Or"
}

/** Known values of {@link AutomationRulePropertyArrayChangedConditionSupportedArrayType} that the service accepts. */
export declare enum KnownAutomationRulePropertyArrayChangedConditionSupportedArrayType {
    /** Evaluate the condition on the alerts */
    Alerts = "Alerts",
    /** Evaluate the condition on the labels */
    Labels = "Labels",
    /** Evaluate the condition on the tactics */
    Tactics = "Tactics",
    /** Evaluate the condition on the comments */
    Comments = "Comments"
}

/** Known values of {@link AutomationRulePropertyArrayChangedConditionSupportedChangeType} that the service accepts. */
export declare enum KnownAutomationRulePropertyArrayChangedConditionSupportedChangeType {
    /** Evaluate the condition on items added to the array */
    Added = "Added"
}

/** Known values of {@link AutomationRulePropertyArrayConditionSupportedArrayConditionType} that the service accepts. */
export declare enum KnownAutomationRulePropertyArrayConditionSupportedArrayConditionType {
    /** Evaluate the condition as true if any item fulfills it */
    AnyItem = "AnyItem"
}

/** Known values of {@link AutomationRulePropertyArrayConditionSupportedArrayType} that the service accepts. */
export declare enum KnownAutomationRulePropertyArrayConditionSupportedArrayType {
    /** Evaluate the condition on the custom detail keys */
    CustomDetails = "CustomDetails",
    /** Evaluate the condition on a custom detail's values */
    CustomDetailValues = "CustomDetailValues"
}

/** Known values of {@link AutomationRulePropertyChangedConditionSupportedChangedType} that the service accepts. */
export declare enum KnownAutomationRulePropertyChangedConditionSupportedChangedType {
    /** Evaluate the condition on the previous value of the property */
    ChangedFrom = "ChangedFrom",
    /** Evaluate the condition on the updated value of the property */
    ChangedTo = "ChangedTo"
}

/** Known values of {@link AutomationRulePropertyChangedConditionSupportedPropertyType} that the service accepts. */
export declare enum KnownAutomationRulePropertyChangedConditionSupportedPropertyType {
    /** Evaluate the condition on the incident severity */
    IncidentSeverity = "IncidentSeverity",
    /** Evaluate the condition on the incident status */
    IncidentStatus = "IncidentStatus",
    /** Evaluate the condition on the incident owner */
    IncidentOwner = "IncidentOwner"
}

/** Known values of {@link AutomationRulePropertyConditionSupportedOperator} that the service accepts. */
export declare enum KnownAutomationRulePropertyConditionSupportedOperator {
    /** Evaluates if the property equals at least one of the condition values */
    Equals = "Equals",
    /** Evaluates if the property does not equal any of the condition values */
    NotEquals = "NotEquals",
    /** Evaluates if the property contains at least one of the condition values */
    Contains = "Contains",
    /** Evaluates if the property does not contain any of the condition values */
    NotContains = "NotContains",
    /** Evaluates if the property starts with any of the condition values */
    StartsWith = "StartsWith",
    /** Evaluates if the property does not start with any of the condition values */
    NotStartsWith = "NotStartsWith",
    /** Evaluates if the property ends with any of the condition values */
    EndsWith = "EndsWith",
    /** Evaluates if the property does not end with any of the condition values */
    NotEndsWith = "NotEndsWith"
}

/** Known values of {@link AutomationRulePropertyConditionSupportedProperty} that the service accepts. */
export declare enum KnownAutomationRulePropertyConditionSupportedProperty {
    /** The title of the incident */
    IncidentTitle = "IncidentTitle",
    /** The description of the incident */
    IncidentDescription = "IncidentDescription",
    /** The severity of the incident */
    IncidentSeverity = "IncidentSeverity",
    /** The status of the incident */
    IncidentStatus = "IncidentStatus",
    /** The related Analytic rule ids of the incident */
    IncidentRelatedAnalyticRuleIds = "IncidentRelatedAnalyticRuleIds",
    /** The tactics of the incident */
    IncidentTactics = "IncidentTactics",
    /** The labels of the incident */
    IncidentLabel = "IncidentLabel",
    /** The provider name of the incident */
    IncidentProviderName = "IncidentProviderName",
    /** The update source of the incident */
    IncidentUpdatedBySource = "IncidentUpdatedBySource",
    /** The incident custom detail key */
    IncidentCustomDetailsKey = "IncidentCustomDetailsKey",
    /** The incident custom detail value */
    IncidentCustomDetailsValue = "IncidentCustomDetailsValue",
    /** The account Azure Active Directory tenant id */
    AccountAadTenantId = "AccountAadTenantId",
    /** The account Azure Active Directory user id */
    AccountAadUserId = "AccountAadUserId",
    /** The account name */
    AccountName = "AccountName",
    /** The account NetBIOS domain name */
    AccountNTDomain = "AccountNTDomain",
    /** The account Azure Active Directory Passport User ID */
    AccountPuid = "AccountPUID",
    /** The account security identifier */
    AccountSid = "AccountSid",
    /** The account unique identifier */
    AccountObjectGuid = "AccountObjectGuid",
    /** The account user principal name suffix */
    AccountUPNSuffix = "AccountUPNSuffix",
    /** The name of the product of the alert */
    AlertProductNames = "AlertProductNames",
    /** The analytic rule ids of the alert */
    AlertAnalyticRuleIds = "AlertAnalyticRuleIds",
    /** The Azure resource id */
    AzureResourceResourceId = "AzureResourceResourceId",
    /** The Azure resource subscription id */
    AzureResourceSubscriptionId = "AzureResourceSubscriptionId",
    /** The cloud application identifier */
    CloudApplicationAppId = "CloudApplicationAppId",
    /** The cloud application name */
    CloudApplicationAppName = "CloudApplicationAppName",
    /** The dns record domain name */
    DNSDomainName = "DNSDomainName",
    /** The file directory full path */
    FileDirectory = "FileDirectory",
    /** The file name without path */
    FileName = "FileName",
    /** The file hash value */
    FileHashValue = "FileHashValue",
    /** The host Azure resource id */
    HostAzureID = "HostAzureID",
    /** The host name without domain */
    HostName = "HostName",
    /** The host NetBIOS name */
    HostNetBiosName = "HostNetBiosName",
    /** The host NT domain */
    HostNTDomain = "HostNTDomain",
    /** The host operating system */
    HostOSVersion = "HostOSVersion",
    /** "The IoT device id */
    IoTDeviceId = "IoTDeviceId",
    /** The IoT device name */
    IoTDeviceName = "IoTDeviceName",
    /** The IoT device type */
    IoTDeviceType = "IoTDeviceType",
    /** The IoT device vendor */
    IoTDeviceVendor = "IoTDeviceVendor",
    /** The IoT device model */
    IoTDeviceModel = "IoTDeviceModel",
    /** The IoT device operating system */
    IoTDeviceOperatingSystem = "IoTDeviceOperatingSystem",
    /** The IP address */
    IPAddress = "IPAddress",
    /** The mailbox display name */
    MailboxDisplayName = "MailboxDisplayName",
    /** The mailbox primary address */
    MailboxPrimaryAddress = "MailboxPrimaryAddress",
    /** The mailbox user principal name */
    MailboxUPN = "MailboxUPN",
    /** The mail message delivery action */
    MailMessageDeliveryAction = "MailMessageDeliveryAction",
    /** The mail message delivery location */
    MailMessageDeliveryLocation = "MailMessageDeliveryLocation",
    /** The mail message recipient */
    MailMessageRecipient = "MailMessageRecipient",
    /** The mail message sender IP address */
    MailMessageSenderIP = "MailMessageSenderIP",
    /** The mail message subject */
    MailMessageSubject = "MailMessageSubject",
    /** The mail message P1 sender */
    MailMessageP1Sender = "MailMessageP1Sender",
    /** The mail message P2 sender */
    MailMessageP2Sender = "MailMessageP2Sender",
    /** The malware category */
    MalwareCategory = "MalwareCategory",
    /** The malware name */
    MalwareName = "MalwareName",
    /** The process execution command line */
    ProcessCommandLine = "ProcessCommandLine",
    /** The process id */
    ProcessId = "ProcessId",
    /** The registry key path */
    RegistryKey = "RegistryKey",
    /** The registry key value in string formatted representation */
    RegistryValueData = "RegistryValueData",
    /** The url */
    Url = "Url"
}

/** Known values of {@link ConditionType} that the service accepts. */
export declare enum KnownConditionType {
    /** Evaluate an object property value */
    Property = "Property",
    /** Evaluate an object array property value */
    PropertyArray = "PropertyArray",
    /** Evaluate an object property changed value */
    PropertyChanged = "PropertyChanged",
    /** Evaluate an object array property changed value */
    PropertyArrayChanged = "PropertyArrayChanged",
    /** Apply a boolean operator (e.g AND, OR) to conditions */
    Boolean = "Boolean"
}

/** Known values of {@link ConfidenceLevel} that the service accepts. */
export declare enum KnownConfidenceLevel {
    /** Unknown confidence, the is the default value */
    Unknown = "Unknown",
    /** Low confidence, meaning we have some doubts this is indeed malicious or part of an attack */
    Low = "Low",
    /** High confidence that the alert is true positive malicious */
    High = "High"
}

/** Known values of {@link ConfidenceScoreStatus} that the service accepts. */
export declare enum KnownConfidenceScoreStatus {
    /** Score will not be calculated for this alert as it is not supported by virtual analyst */
    NotApplicable = "NotApplicable",
    /** No score was set yet and calculation is in progress */
    InProcess = "InProcess",
    /** Score is calculated and shown as part of the alert, but may be updated again at a later time following the processing of additional data */
    NotFinal = "NotFinal",
    /** Final score was calculated and available */
    Final = "Final"
}

/** Known values of {@link ConnectAuthKind} that the service accepts. */
export declare enum KnownConnectAuthKind {
    /** Basic */
    Basic = "Basic",
    /** OAuth2 */
    OAuth2 = "OAuth2",
    /** APIKey */
    APIKey = "APIKey"
}

/** Known values of {@link ConnectivityType} that the service accepts. */
export declare enum KnownConnectivityType {
    /** IsConnectedQuery */
    IsConnectedQuery = "IsConnectedQuery"
}

/** Known values of {@link ContentType} that the service accepts. */
export declare enum KnownContentType {
    /** AnalyticRule */
    AnalyticRule = "AnalyticRule",
    /** Workbook */
    Workbook = "Workbook"
}

/** Known values of {@link CreatedByType} that the service accepts. */
export declare enum KnownCreatedByType {
    /** User */
    User = "User",
    /** Application */
    Application = "Application",
    /** ManagedIdentity */
    ManagedIdentity = "ManagedIdentity",
    /** Key */
    Key = "Key"
}

/** Known values of {@link CustomEntityQueryKind} that the service accepts. */
export declare enum KnownCustomEntityQueryKind {
    /** Activity */
    Activity = "Activity"
}

/** Known values of {@link DataConnectorAuthorizationState} that the service accepts. */
export declare enum KnownDataConnectorAuthorizationState {
    /** Valid */
    Valid = "Valid",
    /** Invalid */
    Invalid = "Invalid"
}

/** Known values of {@link DataConnectorKind} that the service accepts. */
export declare enum KnownDataConnectorKind {
    /** AzureActiveDirectory */
    AzureActiveDirectory = "AzureActiveDirectory",
    /** AzureSecurityCenter */
    AzureSecurityCenter = "AzureSecurityCenter",
    /** MicrosoftCloudAppSecurity */
    MicrosoftCloudAppSecurity = "MicrosoftCloudAppSecurity",
    /** ThreatIntelligence */
    ThreatIntelligence = "ThreatIntelligence",
    /** ThreatIntelligenceTaxii */
    ThreatIntelligenceTaxii = "ThreatIntelligenceTaxii",
    /** Office365 */
    Office365 = "Office365",
    /** OfficeATP */
    OfficeATP = "OfficeATP",
    /** OfficeIRM */
    OfficeIRM = "OfficeIRM",
    /** Office365Project */
    Office365Project = "Office365Project",
    /** OfficePowerBI */
    OfficePowerBI = "OfficePowerBI",
    /** AmazonWebServicesCloudTrail */
    AmazonWebServicesCloudTrail = "AmazonWebServicesCloudTrail",
    /** AmazonWebServicesS3 */
    AmazonWebServicesS3 = "AmazonWebServicesS3",
    /** AzureAdvancedThreatProtection */
    AzureAdvancedThreatProtection = "AzureAdvancedThreatProtection",
    /** MicrosoftDefenderAdvancedThreatProtection */
    MicrosoftDefenderAdvancedThreatProtection = "MicrosoftDefenderAdvancedThreatProtection",
    /** Dynamics365 */
    Dynamics365 = "Dynamics365",
    /** MicrosoftThreatProtection */
    MicrosoftThreatProtection = "MicrosoftThreatProtection",
    /** MicrosoftThreatIntelligence */
    MicrosoftThreatIntelligence = "MicrosoftThreatIntelligence",
    /** GenericUI */
    GenericUI = "GenericUI",
    /** APIPolling */
    APIPolling = "APIPolling",
    /** IOT */
    IOT = "IOT"
}

/** Known values of {@link DataConnectorLicenseState} that the service accepts. */
export declare enum KnownDataConnectorLicenseState {
    /** Valid */
    Valid = "Valid",
    /** Invalid */
    Invalid = "Invalid",
    /** Unknown */
    Unknown = "Unknown"
}

/** Known values of {@link DataTypeState} that the service accepts. */
export declare enum KnownDataTypeState {
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled"
}

/** Known values of {@link DeleteStatus} that the service accepts. */
export declare enum KnownDeleteStatus {
    /** The file was deleted. */
    Deleted = "Deleted",
    /** The file was not deleted. */
    NotDeleted = "NotDeleted",
    /** Unspecified */
    Unspecified = "Unspecified"
}

/** Known values of {@link DeploymentFetchStatus} that the service accepts. */
export declare enum KnownDeploymentFetchStatus {
    /** Success */
    Success = "Success",
    /** Unauthorized */
    Unauthorized = "Unauthorized",
    /** NotFound */
    NotFound = "NotFound"
}

/** Known values of {@link DeploymentResult} that the service accepts. */
export declare enum KnownDeploymentResult {
    /** Success */
    Success = "Success",
    /** Canceled */
    Canceled = "Canceled",
    /** Failed */
    Failed = "Failed"
}

/** Known values of {@link DeploymentState} that the service accepts. */
export declare enum KnownDeploymentState {
    /** InProgress */
    InProgress = "In_Progress",
    /** Completed */
    Completed = "Completed",
    /** Queued */
    Queued = "Queued",
    /** Canceling */
    Canceling = "Canceling"
}

/** Known values of {@link DeviceImportance} that the service accepts. */
export declare enum KnownDeviceImportance {
    /** Unknown - Default value */
    Unknown = "Unknown",
    /** Low */
    Low = "Low",
    /** Normal */
    Normal = "Normal",
    /** High */
    High = "High"
}

/** Known values of {@link EntityItemQueryKind} that the service accepts. */
export declare enum KnownEntityItemQueryKind {
    /** insight */
    Insight = "Insight"
}

/** Known values of {@link EntityKind} that the service accepts. */
export declare enum KnownEntityKind {
    /** Entity represents account in the system. */
    Account = "Account",
    /** Entity represents host in the system. */
    Host = "Host",
    /** Entity represents file in the system. */
    File = "File",
    /** Entity represents azure resource in the system. */
    AzureResource = "AzureResource",
    /** Entity represents cloud application in the system. */
    CloudApplication = "CloudApplication",
    /** Entity represents dns resolution in the system. */
    DnsResolution = "DnsResolution",
    /** Entity represents file hash in the system. */
    FileHash = "FileHash",
    /** Entity represents ip in the system. */
    Ip = "Ip",
    /** Entity represents malware in the system. */
    Malware = "Malware",
    /** Entity represents process in the system. */
    Process = "Process",
    /** Entity represents registry key in the system. */
    RegistryKey = "RegistryKey",
    /** Entity represents registry value in the system. */
    RegistryValue = "RegistryValue",
    /** Entity represents security group in the system. */
    SecurityGroup = "SecurityGroup",
    /** Entity represents url in the system. */
    Url = "Url",
    /** Entity represents IoT device in the system. */
    IoTDevice = "IoTDevice",
    /** Entity represents security alert in the system. */
    SecurityAlert = "SecurityAlert",
    /** Entity represents bookmark in the system. */
    Bookmark = "Bookmark",
    /** Entity represents mail cluster in the system. */
    MailCluster = "MailCluster",
    /** Entity represents mail message in the system. */
    MailMessage = "MailMessage",
    /** Entity represents mailbox in the system. */
    Mailbox = "Mailbox",
    /** Entity represents submission mail in the system. */
    SubmissionMail = "SubmissionMail",
    /** Entity represents network interface in the system. */
    Nic = "Nic"
}

/** Known values of {@link EntityMappingType} that the service accepts. */
export declare enum KnownEntityMappingType {
    /** User account entity type */
    Account = "Account",
    /** Host entity type */
    Host = "Host",
    /** IP address entity type */
    IP = "IP",
    /** Malware entity type */
    Malware = "Malware",
    /** System file entity type */
    File = "File",
    /** Process entity type */
    Process = "Process",
    /** Cloud app entity type */
    CloudApplication = "CloudApplication",
    /** DNS entity type */
    DNS = "DNS",
    /** Azure resource entity type */
    AzureResource = "AzureResource",
    /** File-hash entity type */
    FileHash = "FileHash",
    /** Registry key entity type */
    RegistryKey = "RegistryKey",
    /** Registry value entity type */
    RegistryValue = "RegistryValue",
    /** Security group entity type */
    SecurityGroup = "SecurityGroup",
    /** URL entity type */
    URL = "URL",
    /** Mailbox entity type */
    Mailbox = "Mailbox",
    /** Mail cluster entity type */
    MailCluster = "MailCluster",
    /** Mail message entity type */
    MailMessage = "MailMessage",
    /** Submission mail entity type */
    SubmissionMail = "SubmissionMail"
}

/** Known values of {@link EntityProviders} that the service accepts. */
export declare enum KnownEntityProviders {
    /** ActiveDirectory */
    ActiveDirectory = "ActiveDirectory",
    /** AzureActiveDirectory */
    AzureActiveDirectory = "AzureActiveDirectory"
}

/** Known values of {@link EntityQueryKind} that the service accepts. */
export declare enum KnownEntityQueryKind {
    /** Expansion */
    Expansion = "Expansion",
    /** Insight */
    Insight = "Insight",
    /** Activity */
    Activity = "Activity"
}

/** Known values of {@link EntityQueryTemplateKind} that the service accepts. */
export declare enum KnownEntityQueryTemplateKind {
    /** Activity */
    Activity = "Activity"
}

/** Known values of {@link EntityTimelineKind} that the service accepts. */
export declare enum KnownEntityTimelineKind {
    /** activity */
    Activity = "Activity",
    /** bookmarks */
    Bookmark = "Bookmark",
    /** security alerts */
    SecurityAlert = "SecurityAlert",
    /** anomaly */
    Anomaly = "Anomaly"
}

/** Known values of {@link EntityType} that the service accepts. */
export declare enum KnownEntityType {
    /** Entity represents account in the system. */
    Account = "Account",
    /** Entity represents host in the system. */
    Host = "Host",
    /** Entity represents file in the system. */
    File = "File",
    /** Entity represents azure resource in the system. */
    AzureResource = "AzureResource",
    /** Entity represents cloud application in the system. */
    CloudApplication = "CloudApplication",
    /** Entity represents dns in the system. */
    DNS = "DNS",
    /** Entity represents file hash in the system. */
    FileHash = "FileHash",
    /** Entity represents ip in the system. */
    IP = "IP",
    /** Entity represents malware in the system. */
    Malware = "Malware",
    /** Entity represents process in the system. */
    Process = "Process",
    /** Entity represents registry key in the system. */
    RegistryKey = "RegistryKey",
    /** Entity represents registry value in the system. */
    RegistryValue = "RegistryValue",
    /** Entity represents security group in the system. */
    SecurityGroup = "SecurityGroup",
    /** Entity represents url in the system. */
    URL = "URL",
    /** Entity represents IoT device in the system. */
    IoTDevice = "IoTDevice",
    /** Entity represents security alert in the system. */
    SecurityAlert = "SecurityAlert",
    /** Entity represents HuntingBookmark in the system. */
    HuntingBookmark = "HuntingBookmark",
    /** Entity represents mail cluster in the system. */
    MailCluster = "MailCluster",
    /** Entity represents mail message in the system. */
    MailMessage = "MailMessage",
    /** Entity represents mailbox in the system. */
    Mailbox = "Mailbox",
    /** Entity represents submission mail in the system. */
    SubmissionMail = "SubmissionMail",
    /** Entity represents network interface in the system. */
    Nic = "Nic"
}

/** Known values of {@link Enum13} that the service accepts. */
export declare enum KnownEnum13 {
    /** Expansion */
    Expansion = "Expansion",
    /** Activity */
    Activity = "Activity"
}

/** Known values of {@link EventGroupingAggregationKind} that the service accepts. */
export declare enum KnownEventGroupingAggregationKind {
    /** SingleAlert */
    SingleAlert = "SingleAlert",
    /** AlertPerResult */
    AlertPerResult = "AlertPerResult"
}

/** Known values of {@link FileFormat} that the service accepts. */
export declare enum KnownFileFormat {
    /** A CSV file. */
    CSV = "CSV",
    /** A JSON file. */
    Json = "JSON",
    /** A file of other format. */
    Unspecified = "Unspecified"
}

/** Known values of {@link FileHashAlgorithm} that the service accepts. */
export declare enum KnownFileHashAlgorithm {
    /** Unknown hash algorithm */
    Unknown = "Unknown",
    /** MD5 hash type */
    MD5 = "MD5",
    /** SHA1 hash type */
    SHA1 = "SHA1",
    /** SHA256 hash type */
    SHA256 = "SHA256",
    /** SHA256 Authenticode hash type */
    SHA256AC = "SHA256AC"
}

/** Known values of {@link FileImportContentType} that the service accepts. */
export declare enum KnownFileImportContentType {
    /** File containing records with the core fields of an indicator, plus the observables to construct the STIX pattern. */
    BasicIndicator = "BasicIndicator",
    /** File containing STIX indicators. */
    StixIndicator = "StixIndicator",
    /** File containing other records. */
    Unspecified = "Unspecified"
}

/** Known values of {@link FileImportState} that the service accepts. */
export declare enum KnownFileImportState {
    /** A fatal error has occurred while ingesting the file. */
    FatalError = "FatalError",
    /** The file has been ingested. */
    Ingested = "Ingested",
    /** The file has been ingested with errors. */
    IngestedWithErrors = "IngestedWithErrors",
    /** The file ingestion is in progress. */
    InProgress = "InProgress",
    /** The file is invalid. */
    Invalid = "Invalid",
    /** Waiting for the file to be uploaded. */
    WaitingForUpload = "WaitingForUpload",
    /** Unspecified state. */
    Unspecified = "Unspecified"
}

/** Known values of {@link GetInsightsError} that the service accepts. */
export declare enum KnownGetInsightsError {
    /** Insight */
    Insight = "Insight"
}

/** Known values of {@link IncidentClassification} that the service accepts. */
export declare enum KnownIncidentClassification {
    /** Incident classification was undetermined */
    Undetermined = "Undetermined",
    /** Incident was true positive */
    TruePositive = "TruePositive",
    /** Incident was benign positive */
    BenignPositive = "BenignPositive",
    /** Incident was false positive */
    FalsePositive = "FalsePositive"
}

/** Known values of {@link IncidentClassificationReason} that the service accepts. */
export declare enum KnownIncidentClassificationReason {
    /** Classification reason was suspicious activity */
    SuspiciousActivity = "SuspiciousActivity",
    /** Classification reason was suspicious but expected */
    SuspiciousButExpected = "SuspiciousButExpected",
    /** Classification reason was incorrect alert logic */
    IncorrectAlertLogic = "IncorrectAlertLogic",
    /** Classification reason was inaccurate data */
    InaccurateData = "InaccurateData"
}

/** Known values of {@link IncidentLabelType} that the service accepts. */
export declare enum KnownIncidentLabelType {
    /** Label manually created by a user */
    User = "User",
    /** Label automatically created by the system */
    AutoAssigned = "AutoAssigned"
}

/** Known values of {@link IncidentSeverity} that the service accepts. */
export declare enum KnownIncidentSeverity {
    /** High severity */
    High = "High",
    /** Medium severity */
    Medium = "Medium",
    /** Low severity */
    Low = "Low",
    /** Informational severity */
    Informational = "Informational"
}

/** Known values of {@link IncidentStatus} that the service accepts. */
export declare enum KnownIncidentStatus {
    /** An active incident which isn't being handled currently */
    New = "New",
    /** An active incident which is being handled */
    Active = "Active",
    /** A non-active incident */
    Closed = "Closed"
}

/** Known values of {@link IngestionMode} that the service accepts. */
export declare enum KnownIngestionMode {
    /** No records should be ingested when invalid records are detected. */
    IngestOnlyIfAllAreValid = "IngestOnlyIfAllAreValid",
    /** Valid records should still be ingested when invalid records are detected. */
    IngestAnyValidRecords = "IngestAnyValidRecords",
    /** Unspecified */
    Unspecified = "Unspecified"
}

/** Known values of {@link KillChainIntent} that the service accepts. */
export declare enum KnownKillChainIntent {
    /** The default value. */
    Unknown = "Unknown",
    /** Probing could be an attempt to access a certain resource regardless of a malicious intent or a failed attempt to gain access to a target system to gather information prior to exploitation. This step is usually detected as an attempt originating from outside the network in attempt to scan the target system and find a way in. */
    Probing = "Probing",
    /** Exploitation is the stage where an attacker manage to get foothold on the attacked resource. This stage is applicable not only for compute hosts, but also for resources such as user accounts, certificates etc. Adversaries will often be able to control the resource after this stage. */
    Exploitation = "Exploitation",
    /** Persistence is any access, action, or configuration change to a system that gives an adversary a persistent presence on that system. Adversaries will often need to maintain access to systems through interruptions such as system restarts, loss of credentials, or other failures that would require a remote access tool to restart or alternate backdoor for them to regain access. */
    Persistence = "Persistence",
    /** Privilege escalation is the result of actions that allow an adversary to obtain a higher level of permissions on a system or network. Certain tools or actions require a higher level of privilege to work and are likely necessary at many points throughout an operation. User accounts with permissions to access specific systems or perform specific functions necessary for adversaries to achieve their objective may also be considered an escalation of privilege. */
    PrivilegeEscalation = "PrivilegeEscalation",
    /** Defense evasion consists of techniques an adversary may use to evade detection or avoid other defenses. Sometimes these actions are the same as or variations of techniques in other categories that have the added benefit of subverting a particular defense or mitigation. */
    DefenseEvasion = "DefenseEvasion",
    /** Credential access represents techniques resulting in access to or control over system, domain, or service credentials that are used within an enterprise environment. Adversaries will likely attempt to obtain legitimate credentials from users or administrator accounts (local system administrator or domain users with administrator access) to use within the network. With sufficient access within a network, an adversary can create accounts for later use within the environment. */
    CredentialAccess = "CredentialAccess",
    /** Discovery consists of techniques that allow the adversary to gain knowledge about the system and internal network. When adversaries gain access to a new system, they must orient themselves to what they now have control of and what benefits operating from that system give to their current objective or overall goals during the intrusion. The operating system provides many native tools that aid in this post-compromise information-gathering phase. */
    Discovery = "Discovery",
    /** Lateral movement consists of techniques that enable an adversary to access and control remote systems on a network and could, but does not necessarily, include execution of tools on remote systems. The lateral movement techniques could allow an adversary to gather information from a system without needing additional tools, such as a remote access tool. An adversary can use lateral movement for many purposes, including remote Execution of tools, pivoting to additional systems, access to specific information or files, access to additional credentials, or to cause an effect. */
    LateralMovement = "LateralMovement",
    /** The execution tactic represents techniques that result in execution of adversary-controlled code on a local or remote system. This tactic is often used in conjunction with lateral movement to expand access to remote systems on a network. */
    Execution = "Execution",
    /** Collection consists of techniques used to identify and gather information, such as sensitive files, from a target network prior to exfiltration. This category also covers locations on a system or network where the adversary may look for information to exfiltrate. */
    Collection = "Collection",
    /** Exfiltration refers to techniques and attributes that result or aid in the adversary removing files and information from a target network. This category also covers locations on a system or network where the adversary may look for information to exfiltrate. */
    Exfiltration = "Exfiltration",
    /** The command and control tactic represents how adversaries communicate with systems under their control within a target network. */
    CommandAndControl = "CommandAndControl",
    /** The impact intent primary objective is to directly reduce the availability or integrity of a system, service, or network; including manipulation of data to impact a business or operational process. This would often refer to techniques such as ransom-ware, defacement, data manipulation and others. */
    Impact = "Impact"
}

/** Known values of {@link Kind} that the service accepts. */
export declare enum KnownKind {
    /** DataConnector */
    DataConnector = "DataConnector",
    /** DataType */
    DataType = "DataType",
    /** Workbook */
    Workbook = "Workbook",
    /** WorkbookTemplate */
    WorkbookTemplate = "WorkbookTemplate",
    /** Playbook */
    Playbook = "Playbook",
    /** PlaybookTemplate */
    PlaybookTemplate = "PlaybookTemplate",
    /** AnalyticsRuleTemplate */
    AnalyticsRuleTemplate = "AnalyticsRuleTemplate",
    /** AnalyticsRule */
    AnalyticsRule = "AnalyticsRule",
    /** HuntingQuery */
    HuntingQuery = "HuntingQuery",
    /** InvestigationQuery */
    InvestigationQuery = "InvestigationQuery",
    /** Parser */
    Parser = "Parser",
    /** Watchlist */
    Watchlist = "Watchlist",
    /** WatchlistTemplate */
    WatchlistTemplate = "WatchlistTemplate",
    /** Solution */
    Solution = "Solution",
    /** AzureFunction */
    AzureFunction = "AzureFunction",
    /** LogicAppsCustomConnector */
    LogicAppsCustomConnector = "LogicAppsCustomConnector",
    /** AutomationRule */
    AutomationRule = "AutomationRule"
}

/** Known values of {@link MatchingMethod} that the service accepts. */
export declare enum KnownMatchingMethod {
    /** Grouping alerts into a single incident if all the entities match */
    AllEntities = "AllEntities",
    /** Grouping any alerts triggered by this rule into a single incident */
    AnyAlert = "AnyAlert",
    /** Grouping alerts into a single incident if the selected entities, custom details and alert details match */
    Selected = "Selected"
}

/** Known values of {@link MicrosoftSecurityProductName} that the service accepts. */
export declare enum KnownMicrosoftSecurityProductName {
    /** MicrosoftCloudAppSecurity */
    MicrosoftCloudAppSecurity = "Microsoft Cloud App Security",
    /** AzureSecurityCenter */
    AzureSecurityCenter = "Azure Security Center",
    /** AzureAdvancedThreatProtection */
    AzureAdvancedThreatProtection = "Azure Advanced Threat Protection",
    /** AzureActiveDirectoryIdentityProtection */
    AzureActiveDirectoryIdentityProtection = "Azure Active Directory Identity Protection",
    /** AzureSecurityCenterForIoT */
    AzureSecurityCenterForIoT = "Azure Security Center for IoT",
    /** Office365AdvancedThreatProtection */
    Office365AdvancedThreatProtection = "Office 365 Advanced Threat Protection",
    /** MicrosoftDefenderAdvancedThreatProtection */
    MicrosoftDefenderAdvancedThreatProtection = "Microsoft Defender Advanced Threat Protection"
}

/** Known values of {@link Operator} that the service accepts. */
export declare enum KnownOperator {
    /** AND */
    AND = "AND",
    /** OR */
    OR = "OR"
}

/** Known values of {@link OutputType} that the service accepts. */
export declare enum KnownOutputType {
    /** Number */
    Number = "Number",
    /** String */
    String = "String",
    /** Date */
    Date = "Date",
    /** Entity */
    Entity = "Entity"
}

/** Known values of {@link OwnerType} that the service accepts. */
export declare enum KnownOwnerType {
    /** The incident owner type is unknown */
    Unknown = "Unknown",
    /** The incident owner type is an AAD user */
    User = "User",
    /** The incident owner type is an AAD group */
    Group = "Group"
}

/** Known values of {@link PermissionProviderScope} that the service accepts. */
export declare enum KnownPermissionProviderScope {
    /** ResourceGroup */
    ResourceGroup = "ResourceGroup",
    /** Subscription */
    Subscription = "Subscription",
    /** Workspace */
    Workspace = "Workspace"
}

/** Known values of {@link PollingFrequency} that the service accepts. */
export declare enum KnownPollingFrequency {
    /** Once a minute */
    OnceAMinute = "OnceAMinute",
    /** Once an hour */
    OnceAnHour = "OnceAnHour",
    /** Once a day */
    OnceADay = "OnceADay"
}

/** Known values of {@link ProviderName} that the service accepts. */
export declare enum KnownProviderName {
    /** MicrosoftOperationalInsightsSolutions */
    MicrosoftOperationalInsightsSolutions = "Microsoft.OperationalInsights/solutions",
    /** MicrosoftOperationalInsightsWorkspaces */
    MicrosoftOperationalInsightsWorkspaces = "Microsoft.OperationalInsights/workspaces",
    /** MicrosoftOperationalInsightsWorkspacesDatasources */
    MicrosoftOperationalInsightsWorkspacesDatasources = "Microsoft.OperationalInsights/workspaces/datasources",
    /** MicrosoftAadiamDiagnosticSettings */
    MicrosoftAadiamDiagnosticSettings = "microsoft.aadiam/diagnosticSettings",
    /** MicrosoftOperationalInsightsWorkspacesSharedKeys */
    MicrosoftOperationalInsightsWorkspacesSharedKeys = "Microsoft.OperationalInsights/workspaces/sharedKeys",
    /** MicrosoftAuthorizationPolicyAssignments */
    MicrosoftAuthorizationPolicyAssignments = "Microsoft.Authorization/policyAssignments"
}

/** Known values of {@link RegistryHive} that the service accepts. */
export declare enum KnownRegistryHive {
    /** HKEY_LOCAL_MACHINE */
    HkeyLocalMachine = "HKEY_LOCAL_MACHINE",
    /** HKEY_CLASSES_ROOT */
    HkeyClassesRoot = "HKEY_CLASSES_ROOT",
    /** HKEY_CURRENT_CONFIG */
    HkeyCurrentConfig = "HKEY_CURRENT_CONFIG",
    /** HKEY_USERS */
    HkeyUsers = "HKEY_USERS",
    /** HKEY_CURRENT_USER_LOCAL_SETTINGS */
    HkeyCurrentUserLocalSettings = "HKEY_CURRENT_USER_LOCAL_SETTINGS",
    /** HKEY_PERFORMANCE_DATA */
    HkeyPerformanceData = "HKEY_PERFORMANCE_DATA",
    /** HKEY_PERFORMANCE_NLSTEXT */
    HkeyPerformanceNlstext = "HKEY_PERFORMANCE_NLSTEXT",
    /** HKEY_PERFORMANCE_TEXT */
    HkeyPerformanceText = "HKEY_PERFORMANCE_TEXT",
    /** HKEY_A */
    HkeyA = "HKEY_A",
    /** HKEY_CURRENT_USER */
    HkeyCurrentUser = "HKEY_CURRENT_USER"
}

/** Known values of {@link RegistryValueKind} that the service accepts. */
export declare enum KnownRegistryValueKind {
    /** None */
    None = "None",
    /** Unknown value type */
    Unknown = "Unknown",
    /** String value type */
    String = "String",
    /** ExpandString value type */
    ExpandString = "ExpandString",
    /** Binary value type */
    Binary = "Binary",
    /** DWord value type */
    DWord = "DWord",
    /** MultiString value type */
    MultiString = "MultiString",
    /** QWord value type */
    QWord = "QWord"
}

/** Known values of {@link RepoType} that the service accepts. */
export declare enum KnownRepoType {
    /** Github */
    Github = "Github",
    /** DevOps */
    DevOps = "DevOps"
}

/** Known values of {@link SecurityMLAnalyticsSettingsKind} that the service accepts. */
export declare enum KnownSecurityMLAnalyticsSettingsKind {
    /** Anomaly */
    Anomaly = "Anomaly"
}

/** Known values of {@link SettingKind} that the service accepts. */
export declare enum KnownSettingKind {
    /** Anomalies */
    Anomalies = "Anomalies",
    /** EyesOn */
    EyesOn = "EyesOn",
    /** EntityAnalytics */
    EntityAnalytics = "EntityAnalytics",
    /** Ueba */
    Ueba = "Ueba"
}

/** Known values of {@link SettingsStatus} that the service accepts. */
export declare enum KnownSettingsStatus {
    /** Anomaly settings status in Production mode */
    Production = "Production",
    /** Anomaly settings status in Flighting mode */
    Flighting = "Flighting"
}

/** Known values of {@link SettingType} that the service accepts. */
export declare enum KnownSettingType {
    /** CopyableLabel */
    CopyableLabel = "CopyableLabel",
    /** InstructionStepsGroup */
    InstructionStepsGroup = "InstructionStepsGroup",
    /** InfoMessage */
    InfoMessage = "InfoMessage"
}

/** Known values of {@link SourceKind} that the service accepts. */
export declare enum KnownSourceKind {
    /** LocalWorkspace */
    LocalWorkspace = "LocalWorkspace",
    /** Community */
    Community = "Community",
    /** Solution */
    Solution = "Solution",
    /** SourceRepository */
    SourceRepository = "SourceRepository"
}

/** Known values of {@link SourceType} that the service accepts. */
export declare enum KnownSourceType {
    /** LocalFile */
    LocalFile = "Local file",
    /** RemoteStorage */
    RemoteStorage = "Remote storage"
}

/** Known values of {@link SupportTier} that the service accepts. */
export declare enum KnownSupportTier {
    /** Microsoft */
    Microsoft = "Microsoft",
    /** Partner */
    Partner = "Partner",
    /** Community */
    Community = "Community"
}

/** Known values of {@link TemplateStatus} that the service accepts. */
export declare enum KnownTemplateStatus {
    /** Alert rule template installed. and can not use more then once */
    Installed = "Installed",
    /** Alert rule template is available. */
    Available = "Available",
    /** Alert rule template is not available */
    NotAvailable = "NotAvailable"
}

/** Known values of {@link ThreatIntelligenceResourceKindEnum} that the service accepts. */
export declare enum KnownThreatIntelligenceResourceKindEnum {
    /** Entity represents threat intelligence indicator in the system. */
    Indicator = "indicator"
}

/** Known values of {@link ThreatIntelligenceSortingCriteriaEnum} that the service accepts. */
export declare enum KnownThreatIntelligenceSortingCriteriaEnum {
    /** Unsorted */
    Unsorted = "unsorted",
    /** Ascending */
    Ascending = "ascending",
    /** Descending */
    Descending = "descending"
}

/** Known values of {@link TriggersOn} that the service accepts. */
export declare enum KnownTriggersOn {
    /** Trigger on Incidents */
    Incidents = "Incidents",
    /** Trigger on Alerts */
    Alerts = "Alerts"
}

/** Known values of {@link TriggersWhen} that the service accepts. */
export declare enum KnownTriggersWhen {
    /** Trigger on created objects */
    Created = "Created",
    /** Trigger on updated objects */
    Updated = "Updated"
}

/** Known values of {@link UebaDataSources} that the service accepts. */
export declare enum KnownUebaDataSources {
    /** AuditLogs */
    AuditLogs = "AuditLogs",
    /** AzureActivity */
    AzureActivity = "AzureActivity",
    /** SecurityEvent */
    SecurityEvent = "SecurityEvent",
    /** SigninLogs */
    SigninLogs = "SigninLogs"
}

/** Known values of {@link Version} that the service accepts. */
export declare enum KnownVersion {
    /** V1 */
    V1 = "V1",
    /** V2 */
    V2 = "V2"
}

/** Data type for last data received */
export declare interface LastDataReceivedDataType {
    /** Name of the data type to show in the graph. can be use with {{graphQueriesTableName}} placeholder */
    name?: string;
    /** Query for indicate last data received */
    lastDataReceivedQuery?: string;
}

/** Represents a mailbox entity. */
export declare interface MailboxEntity extends Entity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "Mailbox";
    /**
     * A bag of custom fields that should be part of the entity and will be presented to the user.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalData?: {
        [propertyName: string]: Record<string, unknown>;
    };
    /**
     * The graph item display name which is a short humanly readable description of the graph item instance. This property is optional and might be system generated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly friendlyName?: string;
    /**
     * The mailbox's primary address
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly mailboxPrimaryAddress?: string;
    /**
     * The mailbox's display name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly displayName?: string;
    /**
     * The mailbox's UPN
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly upn?: string;
    /**
     * The AzureAD identifier of mailbox. Similar to AadUserId in account entity but this property is specific to mailbox object on office side
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly externalDirectoryObjectId?: string;
}

/** Mailbox entity property bag. */
export declare interface MailboxEntityProperties extends EntityCommonProperties {
    /**
     * The mailbox's primary address
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly mailboxPrimaryAddress?: string;
    /**
     * The mailbox's display name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly displayName?: string;
    /**
     * The mailbox's UPN
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly upn?: string;
    /**
     * The AzureAD identifier of mailbox. Similar to AadUserId in account entity but this property is specific to mailbox object on office side
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly externalDirectoryObjectId?: string;
}

/** Represents a mail cluster entity. */
export declare interface MailClusterEntity extends Entity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "MailCluster";
    /**
     * A bag of custom fields that should be part of the entity and will be presented to the user.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalData?: {
        [propertyName: string]: Record<string, unknown>;
    };
    /**
     * The graph item display name which is a short humanly readable description of the graph item instance. This property is optional and might be system generated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly friendlyName?: string;
    /**
     * The mail message IDs that are part of the mail cluster
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly networkMessageIds?: string[];
    /**
     * Count of mail messages by DeliveryStatus string representation
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly countByDeliveryStatus?: Record<string, unknown>;
    /**
     * Count of mail messages by ThreatType string representation
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly countByThreatType?: Record<string, unknown>;
    /**
     * Count of mail messages by ProtectionStatus string representation
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly countByProtectionStatus?: Record<string, unknown>;
    /**
     * The threats of mail messages that are part of the mail cluster
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly threats?: string[];
    /**
     * The query that was used to identify the messages of the mail cluster
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly query?: string;
    /**
     * The query time
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly queryTime?: Date;
    /**
     * The number of mail messages that are part of the mail cluster
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly mailCount?: number;
    /**
     * Is this a volume anomaly mail cluster
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isVolumeAnomaly?: boolean;
    /**
     * The source of the mail cluster (default is 'O365 ATP')
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly source?: string;
    /**
     * The id of the cluster source
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly clusterSourceIdentifier?: string;
    /**
     * The type of the cluster source
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly clusterSourceType?: string;
    /**
     * The cluster query start time
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly clusterQueryStartTime?: Date;
    /**
     * The cluster query end time
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly clusterQueryEndTime?: Date;
    /**
     * The cluster group
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly clusterGroup?: string;
}

/** Mail cluster entity property bag. */
export declare interface MailClusterEntityProperties extends EntityCommonProperties {
    /**
     * The mail message IDs that are part of the mail cluster
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly networkMessageIds?: string[];
    /**
     * Count of mail messages by DeliveryStatus string representation
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly countByDeliveryStatus?: Record<string, unknown>;
    /**
     * Count of mail messages by ThreatType string representation
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly countByThreatType?: Record<string, unknown>;
    /**
     * Count of mail messages by ProtectionStatus string representation
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly countByProtectionStatus?: Record<string, unknown>;
    /**
     * The threats of mail messages that are part of the mail cluster
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly threats?: string[];
    /**
     * The query that was used to identify the messages of the mail cluster
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly query?: string;
    /**
     * The query time
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly queryTime?: Date;
    /**
     * The number of mail messages that are part of the mail cluster
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly mailCount?: number;
    /**
     * Is this a volume anomaly mail cluster
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isVolumeAnomaly?: boolean;
    /**
     * The source of the mail cluster (default is 'O365 ATP')
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly source?: string;
    /**
     * The id of the cluster source
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly clusterSourceIdentifier?: string;
    /**
     * The type of the cluster source
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly clusterSourceType?: string;
    /**
     * The cluster query start time
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly clusterQueryStartTime?: Date;
    /**
     * The cluster query end time
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly clusterQueryEndTime?: Date;
    /**
     * The cluster group
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly clusterGroup?: string;
}

/** Represents a mail message entity. */
export declare interface MailMessageEntity extends Entity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "MailMessage";
    /**
     * A bag of custom fields that should be part of the entity and will be presented to the user.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalData?: {
        [propertyName: string]: Record<string, unknown>;
    };
    /**
     * The graph item display name which is a short humanly readable description of the graph item instance. This property is optional and might be system generated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly friendlyName?: string;
    /**
     * The File entity ids of this mail message's attachments
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly fileEntityIds?: string[];
    /**
     * The recipient of this mail message. Note that in case of multiple recipients the mail message is forked and each copy has one recipient
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly recipient?: string;
    /**
     * The Urls contained in this mail message
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly urls?: string[];
    /**
     * The threats of this mail message
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly threats?: string[];
    /**
     * The p1 sender's email address
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly p1Sender?: string;
    /**
     * The p1 sender's display name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly p1SenderDisplayName?: string;
    /**
     * The p1 sender's domain
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly p1SenderDomain?: string;
    /**
     * The sender's IP address
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly senderIP?: string;
    /**
     * The p2 sender's email address
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly p2Sender?: string;
    /**
     * The p2 sender's display name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly p2SenderDisplayName?: string;
    /**
     * The p2 sender's domain
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly p2SenderDomain?: string;
    /**
     * The receive date of this message
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly receiveDate?: Date;
    /**
     * The network message id of this mail message
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly networkMessageId?: string;
    /**
     * The internet message id of this mail message
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly internetMessageId?: string;
    /**
     * The subject of this mail message
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly subject?: string;
    /**
     * The language of this mail message
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly language?: string;
    /**
     * The threat detection methods
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly threatDetectionMethods?: string[];
    /** The bodyFingerprintBin1 */
    bodyFingerprintBin1?: number;
    /** The bodyFingerprintBin2 */
    bodyFingerprintBin2?: number;
    /** The bodyFingerprintBin3 */
    bodyFingerprintBin3?: number;
    /** The bodyFingerprintBin4 */
    bodyFingerprintBin4?: number;
    /** The bodyFingerprintBin5 */
    bodyFingerprintBin5?: number;
    /** The directionality of this mail message */
    antispamDirection?: AntispamMailDirection;
    /** The delivery action of this mail message like Delivered, Blocked, Replaced etc */
    deliveryAction?: DeliveryAction;
    /** The delivery location of this mail message like Inbox, JunkFolder etc */
    deliveryLocation?: DeliveryLocation;
}

/** Mail message entity property bag. */
export declare interface MailMessageEntityProperties extends EntityCommonProperties {
    /**
     * The File entity ids of this mail message's attachments
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly fileEntityIds?: string[];
    /**
     * The recipient of this mail message. Note that in case of multiple recipients the mail message is forked and each copy has one recipient
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly recipient?: string;
    /**
     * The Urls contained in this mail message
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly urls?: string[];
    /**
     * The threats of this mail message
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly threats?: string[];
    /**
     * The p1 sender's email address
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly p1Sender?: string;
    /**
     * The p1 sender's display name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly p1SenderDisplayName?: string;
    /**
     * The p1 sender's domain
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly p1SenderDomain?: string;
    /**
     * The sender's IP address
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly senderIP?: string;
    /**
     * The p2 sender's email address
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly p2Sender?: string;
    /**
     * The p2 sender's display name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly p2SenderDisplayName?: string;
    /**
     * The p2 sender's domain
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly p2SenderDomain?: string;
    /**
     * The receive date of this message
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly receiveDate?: Date;
    /**
     * The network message id of this mail message
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly networkMessageId?: string;
    /**
     * The internet message id of this mail message
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly internetMessageId?: string;
    /**
     * The subject of this mail message
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly subject?: string;
    /**
     * The language of this mail message
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly language?: string;
    /**
     * The threat detection methods
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly threatDetectionMethods?: string[];
    /** The bodyFingerprintBin1 */
    bodyFingerprintBin1?: number;
    /** The bodyFingerprintBin2 */
    bodyFingerprintBin2?: number;
    /** The bodyFingerprintBin3 */
    bodyFingerprintBin3?: number;
    /** The bodyFingerprintBin4 */
    bodyFingerprintBin4?: number;
    /** The bodyFingerprintBin5 */
    bodyFingerprintBin5?: number;
    /** The directionality of this mail message */
    antispamDirection?: AntispamMailDirection;
    /** The delivery action of this mail message like Delivered, Blocked, Replaced etc */
    deliveryAction?: DeliveryAction;
    /** The delivery location of this mail message like Inbox, JunkFolder etc */
    deliveryLocation?: DeliveryLocation;
}

/** Represents a malware entity. */
export declare interface MalwareEntity extends Entity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "Malware";
    /**
     * A bag of custom fields that should be part of the entity and will be presented to the user.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalData?: {
        [propertyName: string]: Record<string, unknown>;
    };
    /**
     * The graph item display name which is a short humanly readable description of the graph item instance. This property is optional and might be system generated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly friendlyName?: string;
    /**
     * The malware category by the vendor, e.g. Trojan
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly category?: string;
    /**
     * List of linked file entity identifiers on which the malware was found
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly fileEntityIds?: string[];
    /**
     * The malware name by the vendor, e.g. Win32/Toga!rfn
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly malwareName?: string;
    /**
     * List of linked process entity identifiers on which the malware was found.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly processEntityIds?: string[];
}

/** Malware entity property bag. */
export declare interface MalwareEntityProperties extends EntityCommonProperties {
    /**
     * The malware category by the vendor, e.g. Trojan
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly category?: string;
    /**
     * List of linked file entity identifiers on which the malware was found
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly fileEntityIds?: string[];
    /**
     * The malware name by the vendor, e.g. Win32/Toga!rfn
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly malwareName?: string;
    /**
     * List of linked process entity identifiers on which the malware was found.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly processEntityIds?: string[];
}

export declare interface ManualTriggerRequestBody {
    tenantId?: string;
    logicAppsResourceId: string;
}

/**
 * Defines values for MatchingMethod. \
 * {@link KnownMatchingMethod} can be used interchangeably with MatchingMethod,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AllEntities**: Grouping alerts into a single incident if all the entities match \
 * **AnyAlert**: Grouping any alerts triggered by this rule into a single incident \
 * **Selected**: Grouping alerts into a single incident if the selected entities, custom details and alert details match
 */
export declare type MatchingMethod = string;

/** Represents MCAS (Microsoft Cloud App Security) requirements check request. */
export declare interface McasCheckRequirements extends DataConnectorsCheckRequirements {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "MicrosoftCloudAppSecurity";
    /** The tenant id to connect to, and get the data from. */
    tenantId?: string;
}

/** MCAS (Microsoft Cloud App Security) requirements check properties. */
export declare interface McasCheckRequirementsProperties extends DataConnectorTenantId {
}

/** Represents MCAS (Microsoft Cloud App Security) data connector. */
export declare interface McasDataConnector extends DataConnector {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "MicrosoftCloudAppSecurity";
    /** The tenant id to connect to, and get the data from. */
    tenantId?: string;
    /** The available data types for the connector. */
    dataTypes?: McasDataConnectorDataTypes;
}

/** The available data types for MCAS (Microsoft Cloud App Security) data connector. */
export declare interface McasDataConnectorDataTypes extends AlertsDataTypeOfDataConnector {
    /** Discovery log data type connection. */
    discoveryLogs?: DataConnectorDataTypeCommon;
}

/** MCAS (Microsoft Cloud App Security) data connector properties. */
export declare interface McasDataConnectorProperties extends DataConnectorTenantId {
    /** The available data types for the connector. */
    dataTypes: McasDataConnectorDataTypes;
}

/** Represents MDATP (Microsoft Defender Advanced Threat Protection) requirements check request. */
export declare interface MdatpCheckRequirements extends DataConnectorsCheckRequirements {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "MicrosoftDefenderAdvancedThreatProtection";
    /** The tenant id to connect to, and get the data from. */
    tenantId?: string;
}

/** MDATP (Microsoft Defender Advanced Threat Protection) requirements check properties. */
export declare interface MdatpCheckRequirementsProperties extends DataConnectorTenantId {
}

/** Represents MDATP (Microsoft Defender Advanced Threat Protection) data connector. */
export declare interface MdatpDataConnector extends DataConnector {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "MicrosoftDefenderAdvancedThreatProtection";
    /** The tenant id to connect to, and get the data from. */
    tenantId?: string;
    /** The available data types for the connector. */
    dataTypes?: AlertsDataTypeOfDataConnector;
}

/** MDATP (Microsoft Defender Advanced Threat Protection) data connector properties. */
export declare interface MdatpDataConnectorProperties extends DataConnectorTenantId, DataConnectorWithAlertsProperties {
}

/** Interface representing a Metadata. */
export declare interface Metadata {
    /**
     * List of all metadata
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, options?: MetadataListOptionalParams): PagedAsyncIterableIterator<MetadataModel>;
    /**
     * Get a Metadata.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param metadataName The Metadata name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, metadataName: string, options?: MetadataGetOptionalParams): Promise<MetadataGetResponse>;
    /**
     * Delete a Metadata.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param metadataName The Metadata name.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, workspaceName: string, metadataName: string, options?: MetadataDeleteOptionalParams): Promise<void>;
    /**
     * Create a Metadata.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param metadataName The Metadata name.
     * @param metadata Metadata resource.
     * @param options The options parameters.
     */
    create(resourceGroupName: string, workspaceName: string, metadataName: string, metadata: MetadataModel, options?: MetadataCreateOptionalParams): Promise<MetadataCreateResponse>;
    /**
     * Update an existing Metadata.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param metadataName The Metadata name.
     * @param metadataPatch Partial metadata request.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, workspaceName: string, metadataName: string, metadataPatch: MetadataPatch, options?: MetadataUpdateOptionalParams): Promise<MetadataUpdateResponse>;
}

/** Publisher or creator of the content item. */
export declare interface MetadataAuthor {
    /** Name of the author. Company or person. */
    name?: string;
    /** Email of author contact */
    email?: string;
    /** Link for author/vendor page */
    link?: string;
}

/** ies for the solution content item */
export declare interface MetadataCategories {
    /** domain for the solution content item */
    domains?: string[];
    /** Industry verticals for the solution content item */
    verticals?: string[];
}

/** Optional parameters. */
export declare interface MetadataCreateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the create operation. */
export declare type MetadataCreateResponse = MetadataModel;

/** Optional parameters. */
export declare interface MetadataDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Dependencies for the content item, what other content items it requires to work.  Can describe more complex dependencies using a recursive/nested structure. For a single dependency an id/kind/version can be supplied or operator/criteria for complex dependencies. */
export declare interface MetadataDependencies {
    /** Id of the content item we depend on */
    contentId?: string;
    /** Type of the content item we depend on */
    kind?: Kind;
    /** Version of the the content item we depend on.  Can be blank, * or missing to indicate any version fulfills the dependency.  If version does not match our defined numeric format then an exact match is required. */
    version?: string;
    /** Name of the content item */
    name?: string;
    /** Operator used for list of dependencies in criteria array. */
    operator?: Operator;
    /** This is the list of dependencies we must fulfill, according to the AND/OR operator */
    criteria?: MetadataDependencies[];
}

/** Optional parameters. */
export declare interface MetadataGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type MetadataGetResponse = MetadataModel;

/** List of all the metadata. */
export declare interface MetadataList {
    /** Array of metadata. */
    value: MetadataModel[];
    /**
     * URL to fetch the next page of metadata.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Optional parameters. */
export declare interface MetadataListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type MetadataListNextResponse = MetadataList;

/** Optional parameters. */
export declare interface MetadataListOptionalParams extends coreClient.OperationOptions {
    /** Filters the results, based on a Boolean condition. Optional. */
    filter?: string;
    /** Sorts the results. Optional. */
    orderby?: string;
    /** Returns only the first n results. Optional. */
    top?: number;
    /** Used to skip n elements in the OData query (offset). Returns a nextLink to the next page of results if there are any left. */
    skip?: number;
}

/** Contains response data for the list operation. */
export declare type MetadataListResponse = MetadataList;

/** Metadata resource definition. */
export declare interface MetadataModel extends ResourceWithEtag {
    /** Static ID for the content.  Used to identify dependencies and content from solutions or community.  Hard-coded/static for out of the box content and solutions. Dynamic for user-created.  This is the resource name */
    contentId?: string;
    /** Full parent resource ID of the content item the metadata is for.  This is the full resource ID including the scope (subscription and resource group) */
    parentId?: string;
    /** Version of the content.  Default and recommended format is numeric (e.g. 1, 1.0, 1.0.0, 1.0.0.0), following ARM template best practices.  Can also be any string, but then we cannot guarantee any version checks */
    version?: string;
    /** The kind of content the metadata is for. */
    kind?: Kind;
    /** Source of the content.  This is where/how it was created. */
    source?: MetadataSource;
    /** The creator of the content item. */
    author?: MetadataAuthor;
    /** Support information for the metadata - type, name, contact information */
    support?: MetadataSupport;
    /** Dependencies for the content item, what other content items it requires to work.  Can describe more complex dependencies using a recursive/nested structure. For a single dependency an id/kind/version can be supplied or operator/criteria for complex formats. */
    dependencies?: MetadataDependencies;
    /** Categories for the solution content item */
    categories?: MetadataCategories;
    /** Providers for the solution content item */
    providers?: string[];
    /** first publish date solution content item */
    firstPublishDate?: Date;
    /** last publish date for the solution content item */
    lastPublishDate?: Date;
    /** The custom version of the content. A optional free text */
    customVersion?: string;
    /** Schema version of the content. Can be used to distinguish between different flow based on the schema version */
    contentSchemaVersion?: string;
    /** the icon identifier. this id can later be fetched from the solution template */
    icon?: string;
    /** the tactics the resource covers */
    threatAnalysisTactics?: string[];
    /** the techniques the resource covers, these have to be aligned with the tactics being used */
    threatAnalysisTechniques?: string[];
    /** preview image file names. These will be taken from the solution artifacts */
    previewImages?: string[];
    /** preview image file names. These will be taken from the solution artifacts. used for dark theme support */
    previewImagesDark?: string[];
}

/** Metadata patch request body. */
export declare interface MetadataPatch extends ResourceWithEtag {
    /** Static ID for the content.  Used to identify dependencies and content from solutions or community.  Hard-coded/static for out of the box content and solutions. Dynamic for user-created.  This is the resource name */
    contentId?: string;
    /** Full parent resource ID of the content item the metadata is for.  This is the full resource ID including the scope (subscription and resource group) */
    parentId?: string;
    /** Version of the content.  Default and recommended format is numeric (e.g. 1, 1.0, 1.0.0, 1.0.0.0), following ARM template best practices.  Can also be any string, but then we cannot guarantee any version checks */
    version?: string;
    /** The kind of content the metadata is for. */
    kind?: Kind;
    /** Source of the content.  This is where/how it was created. */
    source?: MetadataSource;
    /** The creator of the content item. */
    author?: MetadataAuthor;
    /** Support information for the metadata - type, name, contact information */
    support?: MetadataSupport;
    /** Dependencies for the content item, what other content items it requires to work.  Can describe more complex dependencies using a recursive/nested structure. For a single dependency an id/kind/version can be supplied or operator/criteria for complex formats. */
    dependencies?: MetadataDependencies;
    /** Categories for the solution content item */
    categories?: MetadataCategories;
    /** Providers for the solution content item */
    providers?: string[];
    /** first publish date solution content item */
    firstPublishDate?: Date;
    /** last publish date for the solution content item */
    lastPublishDate?: Date;
    /** The custom version of the content. A optional free text */
    customVersion?: string;
    /** Schema version of the content. Can be used to distinguish between different flow based on the schema version */
    contentSchemaVersion?: string;
    /** the icon identifier. this id can later be fetched from the solution template */
    icon?: string;
    /** the tactics the resource covers */
    threatAnalysisTactics?: string[];
    /** the techniques the resource covers, these have to be aligned with the tactics being used */
    threatAnalysisTechniques?: string[];
    /** preview image file names. These will be taken from the solution artifacts */
    previewImages?: string[];
    /** preview image file names. These will be taken from the solution artifacts. used for dark theme support */
    previewImagesDark?: string[];
}

/** The original source of the content item, where it comes from. */
export declare interface MetadataSource {
    /** Source type of the content */
    kind: SourceKind;
    /** Name of the content source.  The repo name, solution name, LA workspace name etc. */
    name?: string;
    /** ID of the content source.  The solution ID, workspace ID, etc */
    sourceId?: string;
}

/** Support information for the content item. */
export declare interface MetadataSupport {
    /** Type of support for content item */
    tier: SupportTier;
    /** Name of the support contact. Company or person. */
    name?: string;
    /** Email of support contact */
    email?: string;
    /** Link for support help, like to support page to open a ticket etc. */
    link?: string;
}

/** Optional parameters. */
export declare interface MetadataUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type MetadataUpdateResponse = MetadataModel;

/** Represents MicrosoftSecurityIncidentCreation rule. */
export declare interface MicrosoftSecurityIncidentCreationAlertRule extends AlertRule {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "MicrosoftSecurityIncidentCreation";
    /** the alerts' displayNames on which the cases will be generated */
    displayNamesFilter?: string[];
    /** the alerts' displayNames on which the cases will not be generated */
    displayNamesExcludeFilter?: string[];
    /** The alerts' productName on which the cases will be generated */
    productFilter?: MicrosoftSecurityProductName;
    /** the alerts' severities on which the cases will be generated */
    severitiesFilter?: AlertSeverity[];
    /** The Name of the alert rule template used to create this rule. */
    alertRuleTemplateName?: string;
    /** The description of the alert rule. */
    description?: string;
    /** The display name for alerts created by this alert rule. */
    displayName?: string;
    /** Determines whether this alert rule is enabled or disabled. */
    enabled?: boolean;
    /**
     * The last time that this alert has been modified.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastModifiedUtc?: Date;
}

/** MicrosoftSecurityIncidentCreation rule common property bag. */
export declare interface MicrosoftSecurityIncidentCreationAlertRuleCommonProperties {
    /** the alerts' displayNames on which the cases will be generated */
    displayNamesFilter?: string[];
    /** the alerts' displayNames on which the cases will not be generated */
    displayNamesExcludeFilter?: string[];
    /** The alerts' productName on which the cases will be generated */
    productFilter: MicrosoftSecurityProductName;
    /** the alerts' severities on which the cases will be generated */
    severitiesFilter?: AlertSeverity[];
}

/** MicrosoftSecurityIncidentCreation rule property bag. */
export declare interface MicrosoftSecurityIncidentCreationAlertRuleProperties extends MicrosoftSecurityIncidentCreationAlertRuleCommonProperties {
    /** The Name of the alert rule template used to create this rule. */
    alertRuleTemplateName?: string;
    /** The description of the alert rule. */
    description?: string;
    /** The display name for alerts created by this alert rule. */
    displayName: string;
    /** Determines whether this alert rule is enabled or disabled. */
    enabled: boolean;
    /**
     * The last time that this alert has been modified.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastModifiedUtc?: Date;
}

/** Represents MicrosoftSecurityIncidentCreation rule template. */
export declare interface MicrosoftSecurityIncidentCreationAlertRuleTemplate extends AlertRuleTemplate {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "MicrosoftSecurityIncidentCreation";
    /** the number of alert rules that were created by this template */
    alertRulesCreatedByTemplateCount?: number;
    /**
     * The last time that this alert rule template has been updated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastUpdatedDateUTC?: Date;
    /**
     * The time that this alert rule template has been added.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdDateUTC?: Date;
    /** The description of the alert rule template. */
    description?: string;
    /** The display name for alert rule template. */
    displayName?: string;
    /** The required data sources for this template */
    requiredDataConnectors?: AlertRuleTemplateDataSource[];
    /** The alert rule template status. */
    status?: TemplateStatus;
    /** the alerts' displayNames on which the cases will be generated */
    displayNamesFilter?: string[];
    /** the alerts' displayNames on which the cases will not be generated */
    displayNamesExcludeFilter?: string[];
    /** The alerts' productName on which the cases will be generated */
    productFilter?: MicrosoftSecurityProductName;
    /** the alerts' severities on which the cases will be generated */
    severitiesFilter?: AlertSeverity[];
}

/** MicrosoftSecurityIncidentCreation rule template properties */
export declare interface MicrosoftSecurityIncidentCreationAlertRuleTemplateProperties extends AlertRuleTemplatePropertiesBase {
    /** the alerts' displayNames on which the cases will be generated */
    displayNamesFilter?: string[];
    /** the alerts' displayNames on which the cases will not be generated */
    displayNamesExcludeFilter?: string[];
    /** The alerts' productName on which the cases will be generated */
    productFilter?: MicrosoftSecurityProductName;
    /** the alerts' severities on which the cases will be generated */
    severitiesFilter?: AlertSeverity[];
}

/**
 * Defines values for MicrosoftSecurityProductName. \
 * {@link KnownMicrosoftSecurityProductName} can be used interchangeably with MicrosoftSecurityProductName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Microsoft Cloud App Security** \
 * **Azure Security Center** \
 * **Azure Advanced Threat Protection** \
 * **Azure Active Directory Identity Protection** \
 * **Azure Security Center for IoT** \
 * **Office 365 Advanced Threat Protection** \
 * **Microsoft Defender Advanced Threat Protection**
 */
export declare type MicrosoftSecurityProductName = string;

/** Represents MLBehaviorAnalytics alert rule. */
export declare interface MLBehaviorAnalyticsAlertRule extends AlertRule {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "MLBehaviorAnalytics";
    /** The Name of the alert rule template used to create this rule. */
    alertRuleTemplateName?: string;
    /**
     * The description of the alert rule.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly description?: string;
    /**
     * The display name for alerts created by this alert rule.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly displayName?: string;
    /** Determines whether this alert rule is enabled or disabled. */
    enabled?: boolean;
    /**
     * The last time that this alert rule has been modified.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastModifiedUtc?: Date;
    /**
     * The severity for alerts created by this alert rule.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly severity?: AlertSeverity;
    /**
     * The tactics of the alert rule
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tactics?: AttackTactic[];
    /**
     * The techniques of the alert rule
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly techniques?: string[];
}

/** Represents MLBehaviorAnalytics alert rule template. */
export declare interface MLBehaviorAnalyticsAlertRuleTemplate extends AlertRuleTemplate {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "MLBehaviorAnalytics";
    /** the number of alert rules that were created by this template */
    alertRulesCreatedByTemplateCount?: number;
    /**
     * The last time that this alert rule template has been updated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastUpdatedDateUTC?: Date;
    /**
     * The time that this alert rule template has been added.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdDateUTC?: Date;
    /** The description of the alert rule template. */
    description?: string;
    /** The display name for alert rule template. */
    displayName?: string;
    /** The required data sources for this template */
    requiredDataConnectors?: AlertRuleTemplateDataSource[];
    /** The alert rule template status. */
    status?: TemplateStatus;
    /** The tactics of the alert rule */
    tactics?: AttackTactic[];
    /** The techniques of the alert rule */
    techniques?: string[];
    /** The severity for alerts created by this alert rule. */
    severity?: AlertSeverity;
}

/** MLBehaviorAnalytics alert rule template properties. */
export declare interface MLBehaviorAnalyticsAlertRuleTemplateProperties extends AlertRuleTemplateWithMitreProperties {
    /** The severity for alerts created by this alert rule. */
    severity: AlertSeverity;
}

/** Represents Microsoft Threat Intelligence requirements check request. */
export declare interface MstiCheckRequirements extends DataConnectorsCheckRequirements {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "MicrosoftThreatIntelligence";
    /** The tenant id to connect to, and get the data from. */
    tenantId?: string;
}

/** Microsoft Threat Intelligence requirements check properties. */
export declare interface MstiCheckRequirementsProperties extends DataConnectorTenantId {
}

/** Represents Microsoft Threat Intelligence data connector. */
export declare interface MstiDataConnector extends DataConnector {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "MicrosoftThreatIntelligence";
    /** The tenant id to connect to, and get the data from. */
    tenantId?: string;
    /** The available data types for the connector. */
    dataTypes?: MstiDataConnectorDataTypes;
}

/** The available data types for Microsoft Threat Intelligence Platforms data connector. */
export declare interface MstiDataConnectorDataTypes {
    /** Data type for Microsoft Threat Intelligence Platforms data connector. */
    bingSafetyPhishingURL: MstiDataConnectorDataTypesBingSafetyPhishingURL;
    /** Data type for Microsoft Threat Intelligence Platforms data connector. */
    microsoftEmergingThreatFeed: MstiDataConnectorDataTypesMicrosoftEmergingThreatFeed;
}

/** Data type for Microsoft Threat Intelligence Platforms data connector. */
export declare interface MstiDataConnectorDataTypesBingSafetyPhishingURL extends DataConnectorDataTypeCommon {
    /** lookback period */
    lookbackPeriod: string;
}

/** Data type for Microsoft Threat Intelligence Platforms data connector. */
export declare interface MstiDataConnectorDataTypesMicrosoftEmergingThreatFeed extends DataConnectorDataTypeCommon {
    /** lookback period */
    lookbackPeriod: string;
}

/** Microsoft Threat Intelligence data connector properties. */
export declare interface MstiDataConnectorProperties extends DataConnectorTenantId {
    /** The available data types for the connector. */
    dataTypes: MstiDataConnectorDataTypes;
}

/** Represents MTP (Microsoft Threat Protection) requirements check request. */
export declare interface MtpCheckRequirements extends DataConnectorsCheckRequirements {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "MicrosoftThreatProtection";
    /** The tenant id to connect to, and get the data from. */
    tenantId?: string;
}

/** MTP (Microsoft Threat Protection) requirements check properties. */
export declare interface MTPCheckRequirementsProperties extends DataConnectorTenantId {
}

/** Represents MTP (Microsoft Threat Protection) data connector. */
export declare interface MTPDataConnector extends DataConnector {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "MicrosoftThreatProtection";
    /** The tenant id to connect to, and get the data from. */
    tenantId?: string;
    /** The available data types for the connector. */
    dataTypes?: MTPDataConnectorDataTypes;
}

/** The available data types for Microsoft Threat Protection Platforms data connector. */
export declare interface MTPDataConnectorDataTypes {
    /** Data type for Microsoft Threat Protection Platforms data connector. */
    incidents: MTPDataConnectorDataTypesIncidents;
}

/** Data type for Microsoft Threat Protection Platforms data connector. */
export declare interface MTPDataConnectorDataTypesIncidents extends DataConnectorDataTypeCommon {
}

/** MTP (Microsoft Threat Protection) data connector properties. */
export declare interface MTPDataConnectorProperties extends DataConnectorTenantId {
    /** The available data types for the connector. */
    dataTypes: MTPDataConnectorDataTypes;
}

/** Represents an network interface entity. */
export declare interface NicEntity extends Entity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "Nic";
    /**
     * A bag of custom fields that should be part of the entity and will be presented to the user.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalData?: {
        [propertyName: string]: Record<string, unknown>;
    };
    /**
     * The graph item display name which is a short humanly readable description of the graph item instance. This property is optional and might be system generated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly friendlyName?: string;
    /**
     * The MAC address of this network interface
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly macAddress?: string;
    /**
     * The IP entity id of this network interface
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly ipAddressEntityId?: string;
    /**
     * A list of VLANs of the network interface entity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly vlans?: string[];
}

/** Nic entity property bag. */
export declare interface NicEntityProperties extends EntityCommonProperties {
    /**
     * The MAC address of this network interface
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly macAddress?: string;
    /**
     * The IP entity id of this network interface
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly ipAddressEntityId?: string;
    /**
     * A list of VLANs of the network interface entity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly vlans?: string[];
}

/** Represents NRT alert rule. */
export declare interface NrtAlertRule extends AlertRule {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "NRT";
    /** The Name of the alert rule template used to create this rule. */
    alertRuleTemplateName?: string;
    /** The version of the alert rule template used to create this rule - in format <a.b.c>, where all are numbers, for example 0 <1.0.2> */
    templateVersion?: string;
    /** The description of the alert rule. */
    description?: string;
    /** The query that creates alerts for this rule. */
    query?: string;
    /** The tactics of the alert rule */
    tactics?: AttackTactic[];
    /** The techniques of the alert rule */
    techniques?: string[];
    /** The display name for alerts created by this alert rule. */
    displayName?: string;
    /** Determines whether this alert rule is enabled or disabled. */
    enabled?: boolean;
    /**
     * The last time that this alert rule has been modified.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastModifiedUtc?: Date;
    /** The suppression (in ISO 8601 duration format) to wait since last time this alert rule been triggered. */
    suppressionDuration?: string;
    /** Determines whether the suppression for this alert rule is enabled or disabled. */
    suppressionEnabled?: boolean;
    /** The severity for alerts created by this alert rule. */
    severity?: AlertSeverity;
    /** The settings of the incidents that created from alerts triggered by this analytics rule */
    incidentConfiguration?: IncidentConfiguration;
    /** Dictionary of string key-value pairs of columns to be attached to the alert */
    customDetails?: {
        [propertyName: string]: string;
    };
    /** Array of the entity mappings of the alert rule */
    entityMappings?: EntityMapping[];
    /** The alert details override settings */
    alertDetailsOverride?: AlertDetailsOverride;
    /** The event grouping settings. */
    eventGroupingSettings?: EventGroupingSettings;
}

/** Represents NRT alert rule template. */
export declare interface NrtAlertRuleTemplate extends AlertRuleTemplate {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "NRT";
    /** the number of alert rules that were created by this template */
    alertRulesCreatedByTemplateCount?: number;
    /**
     * The last time that this alert rule template has been updated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastUpdatedDateUTC?: Date;
    /**
     * The time that this alert rule template has been added.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdDateUTC?: Date;
    /** The description of the alert rule template. */
    description?: string;
    /** The display name for alert rule template. */
    displayName?: string;
    /** The required data sources for this template */
    requiredDataConnectors?: AlertRuleTemplateDataSource[];
    /** The alert rule template status. */
    status?: TemplateStatus;
    /** The tactics of the alert rule */
    tactics?: AttackTactic[];
    /** The techniques of the alert rule */
    techniques?: string[];
    /** The query that creates alerts for this rule. */
    query?: string;
    /** The severity for alerts created by this alert rule. */
    severity?: AlertSeverity;
    /** The version of this template - in format <a.b.c>, where all are numbers. For example <1.0.2>. */
    version?: string;
    /** Dictionary of string key-value pairs of columns to be attached to the alert */
    customDetails?: {
        [propertyName: string]: string;
    };
    /** Array of the entity mappings of the alert rule */
    entityMappings?: EntityMapping[];
    /** The alert details override settings */
    alertDetailsOverride?: AlertDetailsOverride;
    /** The event grouping settings. */
    eventGroupingSettings?: EventGroupingSettings;
}

/** NRT alert rule template properties */
export declare interface NrtAlertRuleTemplateProperties extends AlertRuleTemplateWithMitreProperties, QueryBasedAlertRuleTemplateProperties {
}

/** Represents Office365 Project requirements check request. */
export declare interface Office365ProjectCheckRequirements extends DataConnectorsCheckRequirements {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "Office365Project";
    /** The tenant id to connect to, and get the data from. */
    tenantId?: string;
}

/** Office365 Project requirements check properties. */
export declare interface Office365ProjectCheckRequirementsProperties extends DataConnectorTenantId {
}

/** The available data types for Office Microsoft Project data connector. */
export declare interface Office365ProjectConnectorDataTypes {
    /** Logs data type. */
    logs: Office365ProjectConnectorDataTypesLogs;
}

/** Logs data type. */
export declare interface Office365ProjectConnectorDataTypesLogs extends DataConnectorDataTypeCommon {
}

/** Represents Office Microsoft Project data connector. */
export declare interface Office365ProjectDataConnector extends DataConnector {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "Office365Project";
    /** The tenant id to connect to, and get the data from. */
    tenantId?: string;
    /** The available data types for the connector. */
    dataTypes?: Office365ProjectConnectorDataTypes;
}

/** Office Microsoft Project data connector properties. */
export declare interface Office365ProjectDataConnectorProperties extends DataConnectorTenantId {
    /** The available data types for the connector. */
    dataTypes: Office365ProjectConnectorDataTypes;
}

/** Represents OfficeATP (Office 365 Advanced Threat Protection) requirements check request. */
export declare interface OfficeATPCheckRequirements extends DataConnectorsCheckRequirements {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "OfficeATP";
    /** The tenant id to connect to, and get the data from. */
    tenantId?: string;
}

/** OfficeATP (Office 365 Advanced Threat Protection) requirements check properties. */
export declare interface OfficeATPCheckRequirementsProperties extends DataConnectorTenantId {
}

/** Represents OfficeATP (Office 365 Advanced Threat Protection) data connector. */
export declare interface OfficeATPDataConnector extends DataConnector {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "OfficeATP";
    /** The tenant id to connect to, and get the data from. */
    tenantId?: string;
    /** The available data types for the connector. */
    dataTypes?: AlertsDataTypeOfDataConnector;
}

/** OfficeATP (Office 365 Advanced Threat Protection) data connector properties. */
export declare interface OfficeATPDataConnectorProperties extends DataConnectorTenantId, DataConnectorWithAlertsProperties {
}

/** Consent for Office365 tenant that already made. */
export declare interface OfficeConsent extends Resource {
    /** The tenantId of the Office365 with the consent. */
    tenantId?: string;
    /** Help to easily cascade among the data layers. */
    consentId?: string;
}

/** List of all the office365 consents. */
export declare interface OfficeConsentList {
    /**
     * URL to fetch the next set of office consents.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
    /** Array of the consents. */
    value: OfficeConsent[];
}

/** Interface representing a OfficeConsents. */
export declare interface OfficeConsents {
    /**
     * Gets all office365 consents.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, options?: OfficeConsentsListOptionalParams): PagedAsyncIterableIterator<OfficeConsent>;
    /**
     * Gets an office365 consent.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param consentId consent ID
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, consentId: string, options?: OfficeConsentsGetOptionalParams): Promise<OfficeConsentsGetResponse>;
    /**
     * Delete the office365 consent.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param consentId consent ID
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, workspaceName: string, consentId: string, options?: OfficeConsentsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface OfficeConsentsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface OfficeConsentsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type OfficeConsentsGetResponse = OfficeConsent;

/** Optional parameters. */
export declare interface OfficeConsentsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type OfficeConsentsListNextResponse = OfficeConsentList;

/** Optional parameters. */
export declare interface OfficeConsentsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OfficeConsentsListResponse = OfficeConsentList;

/** Represents office data connector. */
export declare interface OfficeDataConnector extends DataConnector {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "Office365";
    /** The tenant id to connect to, and get the data from. */
    tenantId?: string;
    /** The available data types for the connector. */
    dataTypes?: OfficeDataConnectorDataTypes;
}

/** The available data types for office data connector. */
export declare interface OfficeDataConnectorDataTypes {
    /** Exchange data type connection. */
    exchange: OfficeDataConnectorDataTypesExchange;
    /** SharePoint data type connection. */
    sharePoint: OfficeDataConnectorDataTypesSharePoint;
    /** Teams data type connection. */
    teams: OfficeDataConnectorDataTypesTeams;
}

/** Exchange data type connection. */
export declare interface OfficeDataConnectorDataTypesExchange extends DataConnectorDataTypeCommon {
}

/** SharePoint data type connection. */
export declare interface OfficeDataConnectorDataTypesSharePoint extends DataConnectorDataTypeCommon {
}

/** Teams data type connection. */
export declare interface OfficeDataConnectorDataTypesTeams extends DataConnectorDataTypeCommon {
}

/** Office data connector properties. */
export declare interface OfficeDataConnectorProperties extends DataConnectorTenantId {
    /** The available data types for the connector. */
    dataTypes: OfficeDataConnectorDataTypes;
}

/** Represents OfficeIRM (Microsoft Insider Risk Management) requirements check request. */
export declare interface OfficeIRMCheckRequirements extends DataConnectorsCheckRequirements {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "OfficeIRM";
    /** The tenant id to connect to, and get the data from. */
    tenantId?: string;
}

/** OfficeIRM (Microsoft Insider Risk Management) requirements check properties. */
export declare interface OfficeIRMCheckRequirementsProperties extends DataConnectorTenantId {
}

/** Represents OfficeIRM (Microsoft Insider Risk Management) data connector. */
export declare interface OfficeIRMDataConnector extends DataConnector {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "OfficeIRM";
    /** The tenant id to connect to, and get the data from. */
    tenantId?: string;
    /** The available data types for the connector. */
    dataTypes?: AlertsDataTypeOfDataConnector;
}

/** OfficeIRM (Microsoft Insider Risk Management) data connector properties. */
export declare interface OfficeIRMDataConnectorProperties extends DataConnectorTenantId, DataConnectorWithAlertsProperties {
}

/** Represents Office PowerBI requirements check request. */
export declare interface OfficePowerBICheckRequirements extends DataConnectorsCheckRequirements {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "OfficePowerBI";
    /** The tenant id to connect to, and get the data from. */
    tenantId?: string;
}

/** Office PowerBI requirements check properties. */
export declare interface OfficePowerBICheckRequirementsProperties extends DataConnectorTenantId {
}

/** The available data types for Office Microsoft PowerBI data connector. */
export declare interface OfficePowerBIConnectorDataTypes {
    /** Logs data type. */
    logs: OfficePowerBIConnectorDataTypesLogs;
}

/** Logs data type. */
export declare interface OfficePowerBIConnectorDataTypesLogs extends DataConnectorDataTypeCommon {
}

/** Represents Office Microsoft PowerBI data connector. */
export declare interface OfficePowerBIDataConnector extends DataConnector {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "OfficePowerBI";
    /** The tenant id to connect to, and get the data from. */
    tenantId?: string;
    /** The available data types for the connector. */
    dataTypes?: OfficePowerBIConnectorDataTypes;
}

/** Office Microsoft PowerBI data connector properties. */
export declare interface OfficePowerBIDataConnectorProperties extends DataConnectorTenantId {
    /** The available data types for the connector. */
    dataTypes: OfficePowerBIConnectorDataTypes;
}

/** Operation provided by provider */
export declare interface Operation {
    /** Properties of the operation */
    display?: OperationDisplay;
    /** Name of the operation */
    name?: string;
    /** The origin of the operation */
    origin?: string;
    /** Indicates whether the operation is a data action */
    isDataAction?: boolean;
}

/** Properties of the operation */
export declare interface OperationDisplay {
    /** Description of the operation */
    description?: string;
    /** Operation name */
    operation?: string;
    /** Provider name */
    provider?: string;
    /** Resource name */
    resource?: string;
}

/** Interface representing a Operations. */
export declare interface Operations {
    /**
     * Lists all operations available Azure Security Insights Resource Provider.
     * @param options The options parameters.
     */
    list(options?: OperationsListOptionalParams): PagedAsyncIterableIterator<Operation>;
}

/** Lists the operations available in the SecurityInsights RP. */
export declare interface OperationsList {
    /**
     * URL to fetch the next set of operations.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
    /** Array of operations */
    value: Operation[];
}

/** Optional parameters. */
export declare interface OperationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type OperationsListNextResponse = OperationsList;

/** Optional parameters. */
export declare interface OperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OperationsListResponse = OperationsList;

/**
 * Defines values for Operator. \
 * {@link KnownOperator} can be used interchangeably with Operator,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AND** \
 * **OR**
 */
export declare type Operator = string;

/** Defines values for OSFamily. */
export declare type OSFamily = "Linux" | "Windows" | "Android" | "IOS" | "Unknown";

/**
 * Defines values for OutputType. \
 * {@link KnownOutputType} can be used interchangeably with OutputType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Number** \
 * **String** \
 * **Date** \
 * **Entity**
 */
export declare type OutputType = string;

/**
 * Defines values for OwnerType. \
 * {@link KnownOwnerType} can be used interchangeably with OwnerType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown**: The incident owner type is unknown \
 * **User**: The incident owner type is an AAD user \
 * **Group**: The incident owner type is an AAD group
 */
export declare type OwnerType = string;

/**
 * Defines values for PermissionProviderScope. \
 * {@link KnownPermissionProviderScope} can be used interchangeably with PermissionProviderScope,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ResourceGroup** \
 * **Subscription** \
 * **Workspace**
 */
export declare type PermissionProviderScope = string;

/** Permissions required for the connector */
declare interface Permissions_2 {
    /** Resource provider permissions required for the connector */
    resourceProvider?: PermissionsResourceProviderItem[];
    /** Customs permissions required for the connector */
    customs?: PermissionsCustomsItem[];
}
export { Permissions_2 as Permissions }

export declare interface PermissionsCustomsItem extends Customs {
}

export declare interface PermissionsResourceProviderItem extends ResourceProvider {
}

export declare interface PlaybookActionProperties {
    /** The resource id of the playbook resource. */
    logicAppResourceId?: string;
    /** The tenant id of the playbook resource. */
    tenantId?: string;
}

/**
 * Defines values for PollingFrequency. \
 * {@link KnownPollingFrequency} can be used interchangeably with PollingFrequency,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **OnceAMinute**: Once a minute \
 * **OnceAnHour**: Once an hour \
 * **OnceADay**: Once a day
 */
export declare type PollingFrequency = string;

/** Represents a process entity. */
export declare interface ProcessEntity extends Entity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "Process";
    /**
     * A bag of custom fields that should be part of the entity and will be presented to the user.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalData?: {
        [propertyName: string]: Record<string, unknown>;
    };
    /**
     * The graph item display name which is a short humanly readable description of the graph item instance. This property is optional and might be system generated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly friendlyName?: string;
    /**
     * The account entity id running the processes.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly accountEntityId?: string;
    /**
     * The command line used to create the process
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly commandLine?: string;
    /**
     * The time when the process started to run
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly creationTimeUtc?: Date;
    /** The elevation token associated with the process. */
    elevationToken?: ElevationToken;
    /**
     * The host entity id on which the process was running
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly hostEntityId?: string;
    /**
     * The session entity id in which the process was running
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly hostLogonSessionEntityId?: string;
    /**
     * Image file entity id
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly imageFileEntityId?: string;
    /**
     * The parent process entity id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly parentProcessEntityId?: string;
    /**
     * The process ID
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly processId?: string;
}

/** Process entity property bag. */
export declare interface ProcessEntityProperties extends EntityCommonProperties {
    /**
     * The account entity id running the processes.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly accountEntityId?: string;
    /**
     * The command line used to create the process
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly commandLine?: string;
    /**
     * The time when the process started to run
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly creationTimeUtc?: Date;
    /** The elevation token associated with the process. */
    elevationToken?: ElevationToken;
    /**
     * The host entity id on which the process was running
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly hostEntityId?: string;
    /**
     * The session entity id in which the process was running
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly hostLogonSessionEntityId?: string;
    /**
     * Image file entity id
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly imageFileEntityId?: string;
    /**
     * The parent process entity id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly parentProcessEntityId?: string;
    /**
     * The process ID
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly processId?: string;
}

/** Interface representing a ProductSettings. */
export declare interface ProductSettings {
    /**
     * List of all the settings
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, options?: ProductSettingsListOptionalParams): Promise<ProductSettingsListResponse>;
    /**
     * Gets a setting.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param settingsName The setting name. Supports - Anomalies, EyesOn, EntityAnalytics, Ueba
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, settingsName: string, options?: ProductSettingsGetOptionalParams): Promise<ProductSettingsGetResponse>;
    /**
     * Delete setting of the product.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param settingsName The setting name. Supports - Anomalies, EyesOn, EntityAnalytics, Ueba
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, workspaceName: string, settingsName: string, options?: ProductSettingsDeleteOptionalParams): Promise<void>;
    /**
     * Updates setting.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param settingsName The setting name. Supports - Anomalies, EyesOn, EntityAnalytics, Ueba
     * @param settings The setting
     * @param options The options parameters.
     */
    update(resourceGroupName: string, workspaceName: string, settingsName: string, settings: SettingsUnion, options?: ProductSettingsUpdateOptionalParams): Promise<ProductSettingsUpdateResponse>;
}

/** Optional parameters. */
export declare interface ProductSettingsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface ProductSettingsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ProductSettingsGetResponse = SettingsUnion;

/** Optional parameters. */
export declare interface ProductSettingsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type ProductSettingsListResponse = SettingList;

/** Optional parameters. */
export declare interface ProductSettingsUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type ProductSettingsUpdateResponse = SettingsUnion;

/** Describes an automation rule condition that evaluates an array property's value change */
export declare interface PropertyArrayChangedConditionProperties extends AutomationRuleCondition {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    conditionType: "PropertyArrayChanged";
    conditionProperties?: AutomationRulePropertyArrayChangedValuesCondition;
}

/** Describes an automation rule condition that evaluates an array property's value */
export declare interface PropertyArrayConditionProperties extends AutomationRuleCondition {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    conditionType: "PropertyArray";
    conditionProperties?: AutomationRulePropertyArrayValuesCondition;
}

/** Describes an automation rule condition that evaluates a property's value change */
export declare interface PropertyChangedConditionProperties extends AutomationRuleCondition {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    conditionType: "PropertyChanged";
    conditionProperties?: AutomationRulePropertyValuesChangedCondition;
}

/** Describes an automation rule condition that evaluates a property's value */
export declare interface PropertyConditionProperties extends AutomationRuleCondition {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    conditionType: "Property";
    conditionProperties?: AutomationRulePropertyValuesCondition;
}

/**
 * Defines values for ProviderName. \
 * {@link KnownProviderName} can be used interchangeably with ProviderName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Microsoft.OperationalInsights\/solutions** \
 * **Microsoft.OperationalInsights\/workspaces** \
 * **Microsoft.OperationalInsights\/workspaces\/datasources** \
 * **microsoft.aadiam\/diagnosticSettings** \
 * **Microsoft.OperationalInsights\/workspaces\/sharedKeys** \
 * **Microsoft.Authorization\/policyAssignments**
 */
export declare type ProviderName = string;

/** Query based alert rule template base property bag. */
export declare interface QueryBasedAlertRuleTemplateProperties {
    /** The query that creates alerts for this rule. */
    query?: string;
    /** The severity for alerts created by this alert rule. */
    severity?: AlertSeverity;
    /** The version of this template - in format <a.b.c>, where all are numbers. For example <1.0.2>. */
    version?: string;
    /** Dictionary of string key-value pairs of columns to be attached to the alert */
    customDetails?: {
        [propertyName: string]: string;
    };
    /** Array of the entity mappings of the alert rule */
    entityMappings?: EntityMapping[];
    /** The alert details override settings */
    alertDetailsOverride?: AlertDetailsOverride;
    /** The event grouping settings. */
    eventGroupingSettings?: EventGroupingSettings;
}

/**
 * Defines values for RegistryHive. \
 * {@link KnownRegistryHive} can be used interchangeably with RegistryHive,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **HKEY_LOCAL_MACHINE**: HKEY_LOCAL_MACHINE \
 * **HKEY_CLASSES_ROOT**: HKEY_CLASSES_ROOT \
 * **HKEY_CURRENT_CONFIG**: HKEY_CURRENT_CONFIG \
 * **HKEY_USERS**: HKEY_USERS \
 * **HKEY_CURRENT_USER_LOCAL_SETTINGS**: HKEY_CURRENT_USER_LOCAL_SETTINGS \
 * **HKEY_PERFORMANCE_DATA**: HKEY_PERFORMANCE_DATA \
 * **HKEY_PERFORMANCE_NLSTEXT**: HKEY_PERFORMANCE_NLSTEXT \
 * **HKEY_PERFORMANCE_TEXT**: HKEY_PERFORMANCE_TEXT \
 * **HKEY_A**: HKEY_A \
 * **HKEY_CURRENT_USER**: HKEY_CURRENT_USER
 */
export declare type RegistryHive = string;

/** Represents a registry key entity. */
export declare interface RegistryKeyEntity extends Entity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "RegistryKey";
    /**
     * A bag of custom fields that should be part of the entity and will be presented to the user.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalData?: {
        [propertyName: string]: Record<string, unknown>;
    };
    /**
     * The graph item display name which is a short humanly readable description of the graph item instance. This property is optional and might be system generated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly friendlyName?: string;
    /**
     * the hive that holds the registry key.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly hive?: RegistryHive;
    /**
     * The registry key path.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly key?: string;
}

/** RegistryKey entity property bag. */
export declare interface RegistryKeyEntityProperties extends EntityCommonProperties {
    /**
     * the hive that holds the registry key.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly hive?: RegistryHive;
    /**
     * The registry key path.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly key?: string;
}

/** Represents a registry value entity. */
export declare interface RegistryValueEntity extends Entity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "RegistryValue";
    /**
     * A bag of custom fields that should be part of the entity and will be presented to the user.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalData?: {
        [propertyName: string]: Record<string, unknown>;
    };
    /**
     * The graph item display name which is a short humanly readable description of the graph item instance. This property is optional and might be system generated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly friendlyName?: string;
    /**
     * The registry key entity id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly keyEntityId?: string;
    /**
     * String formatted representation of the value data.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly valueData?: string;
    /**
     * The registry value name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly valueName?: string;
    /**
     * Specifies the data types to use when storing values in the registry, or identifies the data type of a value in the registry.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly valueType?: RegistryValueKind;
}

/** RegistryValue entity property bag. */
export declare interface RegistryValueEntityProperties extends EntityCommonProperties {
    /**
     * The registry key entity id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly keyEntityId?: string;
    /**
     * String formatted representation of the value data.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly valueData?: string;
    /**
     * The registry value name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly valueName?: string;
    /**
     * Specifies the data types to use when storing values in the registry, or identifies the data type of a value in the registry.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly valueType?: RegistryValueKind;
}

/**
 * Defines values for RegistryValueKind. \
 * {@link KnownRegistryValueKind} can be used interchangeably with RegistryValueKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None**: None \
 * **Unknown**: Unknown value type \
 * **String**: String value type \
 * **ExpandString**: ExpandString value type \
 * **Binary**: Binary value type \
 * **DWord**: DWord value type \
 * **MultiString**: MultiString value type \
 * **QWord**: QWord value type
 */
export declare type RegistryValueKind = string;

/** Represents a relation between two resources */
export declare interface Relation extends ResourceWithEtag {
    /** The resource ID of the related resource */
    relatedResourceId?: string;
    /**
     * The name of the related resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly relatedResourceName?: string;
    /**
     * The resource type of the related resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly relatedResourceType?: string;
    /**
     * The resource kind of the related resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly relatedResourceKind?: string;
}

/** List of relations. */
export declare interface RelationList {
    /**
     * URL to fetch the next set of relations.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
    /** Array of relations. */
    value: Relation[];
}

/** Represents a repository. */
export declare interface Repo {
    /** The url to access the repository. */
    url?: string;
    /** The name of the repository. */
    fullName?: string;
    /** Array of branches. */
    branches?: string[];
}

/** List all the source controls. */
export declare interface RepoList {
    /**
     * URL to fetch the next set of repositories.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
    /** Array of repositories. */
    value: Repo[];
}

/** metadata of a repository. */
export declare interface Repository {
    /** Url of repository. */
    url?: string;
    /** Branch name of repository. */
    branch?: string;
    /** Display url of repository. */
    displayUrl?: string;
    /** Url to access repository action logs. */
    deploymentLogsUrl?: string;
    /** Dictionary of source control content type and path mapping. */
    pathMapping?: ContentPathMap[];
}

/** Resources created in user's repository for the source-control. */
export declare interface RepositoryResourceInfo {
    /** The webhook object created for the source-control. */
    webhook?: Webhook;
    /** Resources created in GitHub for this source-control. */
    gitHubResourceInfo?: GitHubResourceInfo;
    /** Resources created in Azure DevOps for this source-control. */
    azureDevOpsResourceInfo?: AzureDevOpsResourceInfo;
}

/**
 * Defines values for RepoType. \
 * {@link KnownRepoType} can be used interchangeably with RepoType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Github** \
 * **DevOps**
 */
export declare type RepoType = string;

/** Required permissions for the connector */
export declare interface RequiredPermissions {
    /** action permission */
    action?: boolean;
    /** write permission */
    write?: boolean;
    /** read permission */
    read?: boolean;
    /** delete permission */
    delete?: boolean;
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export declare interface Resource {
    /**
     * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
}

/** Resource provider permissions required for the connector */
export declare interface ResourceProvider {
    /** Provider name */
    provider?: ProviderName;
    /** Permission description text */
    permissionsDisplayText?: string;
    /** Permission provider display name */
    providerDisplayName?: string;
    /** Permission provider scope */
    scope?: PermissionProviderScope;
    /** Required permissions for the connector */
    requiredPermissions?: RequiredPermissions;
}

/** An azure resource object with an Etag property */
export declare interface ResourceWithEtag extends Resource {
    /** Etag of the azure resource */
    etag?: string;
}

/** The sample queries for the connector */
export declare interface SampleQueries {
    /** The sample query description */
    description?: string;
    /** the sample query */
    query?: string;
}

/** Represents scheduled alert rule. */
export declare interface ScheduledAlertRule extends AlertRule {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "Scheduled";
    /** The query that creates alerts for this rule. */
    query?: string;
    /** The frequency (in ISO 8601 duration format) for this alert rule to run. */
    queryFrequency?: string;
    /** The period (in ISO 8601 duration format) that this alert rule looks at. */
    queryPeriod?: string;
    /** The severity for alerts created by this alert rule. */
    severity?: AlertSeverity;
    /** The operation against the threshold that triggers alert rule. */
    triggerOperator?: TriggerOperator;
    /** The threshold triggers this alert rule. */
    triggerThreshold?: number;
    /** The event grouping settings. */
    eventGroupingSettings?: EventGroupingSettings;
    /** Dictionary of string key-value pairs of columns to be attached to the alert */
    customDetails?: {
        [propertyName: string]: string;
    };
    /** Array of the entity mappings of the alert rule */
    entityMappings?: EntityMapping[];
    /** The alert details override settings */
    alertDetailsOverride?: AlertDetailsOverride;
    /** The Name of the alert rule template used to create this rule. */
    alertRuleTemplateName?: string;
    /** The version of the alert rule template used to create this rule - in format <a.b.c>, where all are numbers, for example 0 <1.0.2> */
    templateVersion?: string;
    /** The description of the alert rule. */
    description?: string;
    /** The display name for alerts created by this alert rule. */
    displayName?: string;
    /** Determines whether this alert rule is enabled or disabled. */
    enabled?: boolean;
    /**
     * The last time that this alert rule has been modified.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastModifiedUtc?: Date;
    /** The suppression (in ISO 8601 duration format) to wait since last time this alert rule been triggered. */
    suppressionDuration?: string;
    /** Determines whether the suppression for this alert rule is enabled or disabled. */
    suppressionEnabled?: boolean;
    /** The tactics of the alert rule */
    tactics?: AttackTactic[];
    /** The techniques of the alert rule */
    techniques?: string[];
    /** The settings of the incidents that created from alerts triggered by this analytics rule */
    incidentConfiguration?: IncidentConfiguration;
}

/** Scheduled alert rule template property bag. */
export declare interface ScheduledAlertRuleCommonProperties {
    /** The query that creates alerts for this rule. */
    query?: string;
    /** The frequency (in ISO 8601 duration format) for this alert rule to run. */
    queryFrequency?: string;
    /** The period (in ISO 8601 duration format) that this alert rule looks at. */
    queryPeriod?: string;
    /** The severity for alerts created by this alert rule. */
    severity?: AlertSeverity;
    /** The operation against the threshold that triggers alert rule. */
    triggerOperator?: TriggerOperator;
    /** The threshold triggers this alert rule. */
    triggerThreshold?: number;
    /** The event grouping settings. */
    eventGroupingSettings?: EventGroupingSettings;
    /** Dictionary of string key-value pairs of columns to be attached to the alert */
    customDetails?: {
        [propertyName: string]: string;
    };
    /** Array of the entity mappings of the alert rule */
    entityMappings?: EntityMapping[];
    /** The alert details override settings */
    alertDetailsOverride?: AlertDetailsOverride;
}

/** Scheduled alert rule base property bag. */
export declare interface ScheduledAlertRuleProperties extends ScheduledAlertRuleCommonProperties {
    /** The Name of the alert rule template used to create this rule. */
    alertRuleTemplateName?: string;
    /** The version of the alert rule template used to create this rule - in format <a.b.c>, where all are numbers, for example 0 <1.0.2> */
    templateVersion?: string;
    /** The description of the alert rule. */
    description?: string;
    /** The display name for alerts created by this alert rule. */
    displayName: string;
    /** Determines whether this alert rule is enabled or disabled. */
    enabled: boolean;
    /**
     * The last time that this alert rule has been modified.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastModifiedUtc?: Date;
    /** The suppression (in ISO 8601 duration format) to wait since last time this alert rule been triggered. */
    suppressionDuration: string;
    /** Determines whether the suppression for this alert rule is enabled or disabled. */
    suppressionEnabled: boolean;
    /** The tactics of the alert rule */
    tactics?: AttackTactic[];
    /** The techniques of the alert rule */
    techniques?: string[];
    /** The settings of the incidents that created from alerts triggered by this analytics rule */
    incidentConfiguration?: IncidentConfiguration;
}

/** Represents scheduled alert rule template. */
export declare interface ScheduledAlertRuleTemplate extends AlertRuleTemplate {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "Scheduled";
    /** the number of alert rules that were created by this template */
    alertRulesCreatedByTemplateCount?: number;
    /**
     * The time that this alert rule template has been added.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdDateUTC?: Date;
    /**
     * The time that this alert rule template was last updated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastUpdatedDateUTC?: Date;
    /** The description of the alert rule template. */
    description?: string;
    /** The display name for alert rule template. */
    displayName?: string;
    /** The required data connectors for this template */
    requiredDataConnectors?: AlertRuleTemplateDataSource[];
    /** The alert rule template status. */
    status?: TemplateStatus;
    /** The query that creates alerts for this rule. */
    query?: string;
    /** The frequency (in ISO 8601 duration format) for this alert rule to run. */
    queryFrequency?: string;
    /** The period (in ISO 8601 duration format) that this alert rule looks at. */
    queryPeriod?: string;
    /** The severity for alerts created by this alert rule. */
    severity?: AlertSeverity;
    /** The operation against the threshold that triggers alert rule. */
    triggerOperator?: TriggerOperator;
    /** The threshold triggers this alert rule. */
    triggerThreshold?: number;
    /** The tactics of the alert rule template */
    tactics?: AttackTactic[];
    /** The techniques of the alert rule */
    techniques?: string[];
    /** The version of this template - in format <a.b.c>, where all are numbers. For example <1.0.2>. */
    version?: string;
    /** The event grouping settings. */
    eventGroupingSettings?: EventGroupingSettings;
    /** Dictionary of string key-value pairs of columns to be attached to the alert */
    customDetails?: {
        [propertyName: string]: string;
    };
    /** Array of the entity mappings of the alert rule */
    entityMappings?: EntityMapping[];
    /** The alert details override settings */
    alertDetailsOverride?: AlertDetailsOverride;
}

/** Represents a security alert entity. */
export declare interface SecurityAlert extends Entity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "SecurityAlert";
    /**
     * A bag of custom fields that should be part of the entity and will be presented to the user.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalData?: {
        [propertyName: string]: Record<string, unknown>;
    };
    /**
     * The graph item display name which is a short humanly readable description of the graph item instance. This property is optional and might be system generated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly friendlyName?: string;
    /**
     * The display name of the alert.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly alertDisplayName?: string;
    /**
     * The type name of the alert.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly alertType?: string;
    /**
     * Display name of the main entity being reported on.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly compromisedEntity?: string;
    /**
     * The confidence level of this alert.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly confidenceLevel?: ConfidenceLevel;
    /**
     * The confidence reasons
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly confidenceReasons?: SecurityAlertPropertiesConfidenceReasonsItem[];
    /**
     * The confidence score of the alert.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly confidenceScore?: number;
    /**
     * The confidence score calculation status, i.e. indicating if score calculation is pending for this alert, not applicable or final.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly confidenceScoreStatus?: ConfidenceScoreStatus;
    /**
     * Alert description.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly description?: string;
    /**
     * The impact end time of the alert (the time of the last event contributing to the alert).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly endTimeUtc?: Date;
    /**
     * Holds the alert intent stage(s) mapping for this alert.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly intent?: KillChainIntent;
    /**
     * The identifier of the alert inside the product which generated the alert.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly providerAlertId?: string;
    /**
     * The time the alert was made available for consumption.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly processingEndTime?: Date;
    /**
     * The name of a component inside the product which generated the alert.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly productComponentName?: string;
    /**
     * The name of the product which published this alert.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly productName?: string;
    /**
     * The version of the product generating the alert.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly productVersion?: string;
    /**
     * Manual action items to take to remediate the alert.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly remediationSteps?: string[];
    /** The severity of the alert */
    severity?: AlertSeverity;
    /**
     * The impact start time of the alert (the time of the first event contributing to the alert).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly startTimeUtc?: Date;
    /**
     * The lifecycle status of the alert.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: AlertStatus;
    /**
     * Holds the product identifier of the alert for the product.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemAlertId?: string;
    /**
     * The tactics of the alert
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tactics?: AttackTactic[];
    /**
     * The time the alert was generated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly timeGenerated?: Date;
    /**
     * The name of the vendor that raise the alert.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly vendorName?: string;
    /**
     * The uri link of the alert.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly alertLink?: string;
    /**
     * The list of resource identifiers of the alert.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resourceIdentifiers?: Record<string, unknown>[];
}

/** SecurityAlert entity property bag. */
export declare interface SecurityAlertProperties extends EntityCommonProperties {
    /**
     * The display name of the alert.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly alertDisplayName?: string;
    /**
     * The type name of the alert.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly alertType?: string;
    /**
     * Display name of the main entity being reported on.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly compromisedEntity?: string;
    /**
     * The confidence level of this alert.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly confidenceLevel?: ConfidenceLevel;
    /**
     * The confidence reasons
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly confidenceReasons?: SecurityAlertPropertiesConfidenceReasonsItem[];
    /**
     * The confidence score of the alert.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly confidenceScore?: number;
    /**
     * The confidence score calculation status, i.e. indicating if score calculation is pending for this alert, not applicable or final.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly confidenceScoreStatus?: ConfidenceScoreStatus;
    /**
     * Alert description.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly description?: string;
    /**
     * The impact end time of the alert (the time of the last event contributing to the alert).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly endTimeUtc?: Date;
    /**
     * Holds the alert intent stage(s) mapping for this alert.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly intent?: KillChainIntent;
    /**
     * The identifier of the alert inside the product which generated the alert.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly providerAlertId?: string;
    /**
     * The time the alert was made available for consumption.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly processingEndTime?: Date;
    /**
     * The name of a component inside the product which generated the alert.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly productComponentName?: string;
    /**
     * The name of the product which published this alert.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly productName?: string;
    /**
     * The version of the product generating the alert.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly productVersion?: string;
    /**
     * Manual action items to take to remediate the alert.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly remediationSteps?: string[];
    /** The severity of the alert */
    severity?: AlertSeverity;
    /**
     * The impact start time of the alert (the time of the first event contributing to the alert).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly startTimeUtc?: Date;
    /**
     * The lifecycle status of the alert.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: AlertStatus;
    /**
     * Holds the product identifier of the alert for the product.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemAlertId?: string;
    /**
     * The tactics of the alert
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tactics?: AttackTactic[];
    /**
     * The time the alert was generated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly timeGenerated?: Date;
    /**
     * The name of the vendor that raise the alert.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly vendorName?: string;
    /**
     * The uri link of the alert.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly alertLink?: string;
    /**
     * The list of resource identifiers of the alert.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resourceIdentifiers?: Record<string, unknown>[];
}

/** confidence reason item */
export declare interface SecurityAlertPropertiesConfidenceReasonsItem {
    /**
     * The reason's description
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly reason?: string;
    /**
     * The type (category) of the reason
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly reasonType?: string;
}

/** Represents security alert timeline item. */
export declare interface SecurityAlertTimelineItem extends EntityTimelineItem {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "SecurityAlert";
    /** The alert azure resource id. */
    azureResourceId: string;
    /** The alert product name. */
    productName?: string;
    /** The alert description. */
    description?: string;
    /** The alert name. */
    displayName: string;
    /** The alert severity. */
    severity: AlertSeverity;
    /** The alert end time. */
    endTimeUtc: Date;
    /** The alert start time. */
    startTimeUtc: Date;
    /** The alert generated time. */
    timeGenerated: Date;
    /** The name of the alert type. */
    alertType: string;
}

/** Represents a security group entity. */
export declare interface SecurityGroupEntity extends Entity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "SecurityGroup";
    /**
     * A bag of custom fields that should be part of the entity and will be presented to the user.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalData?: {
        [propertyName: string]: Record<string, unknown>;
    };
    /**
     * The graph item display name which is a short humanly readable description of the graph item instance. This property is optional and might be system generated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly friendlyName?: string;
    /**
     * The group distinguished name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly distinguishedName?: string;
    /**
     * A single-value attribute that is the unique identifier for the object, assigned by active directory.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly objectGuid?: string;
    /**
     * The SID attribute is a single-value attribute that specifies the security identifier (SID) of the group
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly sid?: string;
}

/** SecurityGroup entity property bag. */
export declare interface SecurityGroupEntityProperties extends EntityCommonProperties {
    /**
     * The group distinguished name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly distinguishedName?: string;
    /**
     * A single-value attribute that is the unique identifier for the object, assigned by active directory.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly objectGuid?: string;
    /**
     * The SID attribute is a single-value attribute that specifies the security identifier (SID) of the group
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly sid?: string;
}

export declare class SecurityInsights extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the SecurityInsights class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: SecurityInsightsOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    alertRules: AlertRules;
    actions: Actions;
    alertRuleTemplates: AlertRuleTemplates;
    automationRules: AutomationRules;
    incidents: Incidents;
    bookmarks: Bookmarks;
    bookmarkRelations: BookmarkRelations;
    bookmarkOperations: BookmarkOperations;
    iPGeodata: IPGeodata;
    domainWhois: DomainWhois;
    entities: Entities;
    entitiesGetTimeline: EntitiesGetTimeline;
    entitiesRelations: EntitiesRelations;
    entityRelations: EntityRelations;
    entityQueries: EntityQueries;
    entityQueryTemplates: EntityQueryTemplates;
    fileImports: FileImports;
    incidentComments: IncidentComments;
    incidentRelations: IncidentRelations;
    metadata: Metadata;
    officeConsents: OfficeConsents;
    sentinelOnboardingStates: SentinelOnboardingStates;
    securityMLAnalyticsSettings: SecurityMLAnalyticsSettings;
    productSettings: ProductSettings;
    sourceControlOperations: SourceControlOperations;
    sourceControls: SourceControls;
    threatIntelligenceIndicator: ThreatIntelligenceIndicator;
    threatIntelligenceIndicators: ThreatIntelligenceIndicators;
    threatIntelligenceIndicatorMetrics: ThreatIntelligenceIndicatorMetrics;
    watchlists: Watchlists;
    watchlistItems: WatchlistItems;
    dataConnectors: DataConnectors;
    dataConnectorsCheckRequirementsOperations: DataConnectorsCheckRequirementsOperations;
    operations: Operations;
}

/** Optional parameters. */
export declare interface SecurityInsightsOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** Security ML Analytics Setting */
export declare interface SecurityMLAnalyticsSetting extends ResourceWithEtag {
    /** The kind of security ML Analytics Settings */
    kind: SecurityMLAnalyticsSettingsKind;
}

/** Interface representing a SecurityMLAnalyticsSettings. */
export declare interface SecurityMLAnalyticsSettings {
    /**
     * Gets all Security ML Analytics Settings.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, options?: SecurityMLAnalyticsSettingsListOptionalParams): PagedAsyncIterableIterator<SecurityMLAnalyticsSettingUnion>;
    /**
     * Gets the Security ML Analytics Settings.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param settingsResourceName Security ML Analytics Settings resource name
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, settingsResourceName: string, options?: SecurityMLAnalyticsSettingsGetOptionalParams): Promise<SecurityMLAnalyticsSettingsGetResponse>;
    /**
     * Creates or updates the Security ML Analytics Settings.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param settingsResourceName Security ML Analytics Settings resource name
     * @param securityMLAnalyticsSetting The security ML Analytics setting
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, workspaceName: string, settingsResourceName: string, securityMLAnalyticsSetting: SecurityMLAnalyticsSettingUnion, options?: SecurityMLAnalyticsSettingsCreateOrUpdateOptionalParams): Promise<SecurityMLAnalyticsSettingsCreateOrUpdateResponse>;
    /**
     * Delete the Security ML Analytics Settings.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param settingsResourceName Security ML Analytics Settings resource name
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, workspaceName: string, settingsResourceName: string, options?: SecurityMLAnalyticsSettingsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface SecurityMLAnalyticsSettingsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type SecurityMLAnalyticsSettingsCreateOrUpdateResponse = SecurityMLAnalyticsSettingUnion;

/** security ml analytics settings data sources */
export declare interface SecurityMLAnalyticsSettingsDataSource {
    /** The connector id that provides the following data types */
    connectorId?: string;
    /** The data types used by the security ml analytics settings */
    dataTypes?: string[];
}

/** Optional parameters. */
export declare interface SecurityMLAnalyticsSettingsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface SecurityMLAnalyticsSettingsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type SecurityMLAnalyticsSettingsGetResponse = SecurityMLAnalyticsSettingUnion;

/**
 * Defines values for SecurityMLAnalyticsSettingsKind. \
 * {@link KnownSecurityMLAnalyticsSettingsKind} can be used interchangeably with SecurityMLAnalyticsSettingsKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Anomaly**
 */
export declare type SecurityMLAnalyticsSettingsKind = string;

/** List all the SecurityMLAnalyticsSettings */
export declare interface SecurityMLAnalyticsSettingsList {
    /**
     * URL to fetch the next set of SecurityMLAnalyticsSettings.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
    /** Array of SecurityMLAnalyticsSettings */
    value: SecurityMLAnalyticsSettingUnion[];
}

/** Optional parameters. */
export declare interface SecurityMLAnalyticsSettingsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type SecurityMLAnalyticsSettingsListNextResponse = SecurityMLAnalyticsSettingsList;

/** Optional parameters. */
export declare interface SecurityMLAnalyticsSettingsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type SecurityMLAnalyticsSettingsListResponse = SecurityMLAnalyticsSettingsList;

export declare type SecurityMLAnalyticsSettingUnion = SecurityMLAnalyticsSetting | AnomalySecurityMLAnalyticsSettings;

/** Sentinel onboarding state */
export declare interface SentinelOnboardingState extends ResourceWithEtag {
    /** Flag that indicates the status of the CMK setting */
    customerManagedKey?: boolean;
}

/** Interface representing a SentinelOnboardingStates. */
export declare interface SentinelOnboardingStates {
    /**
     * Get Sentinel onboarding state
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sentinelOnboardingStateName The Sentinel onboarding state name. Supports - default
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, sentinelOnboardingStateName: string, options?: SentinelOnboardingStatesGetOptionalParams): Promise<SentinelOnboardingStatesGetResponse>;
    /**
     * Create Sentinel onboarding state
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sentinelOnboardingStateName The Sentinel onboarding state name. Supports - default
     * @param options The options parameters.
     */
    create(resourceGroupName: string, workspaceName: string, sentinelOnboardingStateName: string, options?: SentinelOnboardingStatesCreateOptionalParams): Promise<SentinelOnboardingStatesCreateResponse>;
    /**
     * Delete Sentinel onboarding state
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sentinelOnboardingStateName The Sentinel onboarding state name. Supports - default
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, workspaceName: string, sentinelOnboardingStateName: string, options?: SentinelOnboardingStatesDeleteOptionalParams): Promise<void>;
    /**
     * Gets all Sentinel onboarding states
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, options?: SentinelOnboardingStatesListOptionalParams): Promise<SentinelOnboardingStatesListResponse>;
}

/** Optional parameters. */
export declare interface SentinelOnboardingStatesCreateOptionalParams extends coreClient.OperationOptions {
    /** The Sentinel onboarding state parameter */
    sentinelOnboardingStateParameter?: SentinelOnboardingState;
}

/** Contains response data for the create operation. */
export declare type SentinelOnboardingStatesCreateResponse = SentinelOnboardingState;

/** Optional parameters. */
export declare interface SentinelOnboardingStatesDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface SentinelOnboardingStatesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type SentinelOnboardingStatesGetResponse = SentinelOnboardingState;

/** List of the Sentinel onboarding states */
export declare interface SentinelOnboardingStatesList {
    /** Array of Sentinel onboarding states */
    value: SentinelOnboardingState[];
}

/** Optional parameters. */
export declare interface SentinelOnboardingStatesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type SentinelOnboardingStatesListResponse = SentinelOnboardingStatesList;

/**
 * Defines values for SettingKind. \
 * {@link KnownSettingKind} can be used interchangeably with SettingKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Anomalies** \
 * **EyesOn** \
 * **EntityAnalytics** \
 * **Ueba**
 */
export declare type SettingKind = string;

/** List of all the settings. */
export declare interface SettingList {
    /** Array of settings. */
    value: SettingsUnion[];
}

/** The Setting. */
export declare interface Settings extends ResourceWithEtag {
    /** The kind of the setting */
    kind: SettingKind;
}

/**
 * Defines values for SettingsStatus. \
 * {@link KnownSettingsStatus} can be used interchangeably with SettingsStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Production**: Anomaly settings status in Production mode \
 * **Flighting**: Anomaly settings status in Flighting mode
 */
export declare type SettingsStatus = string;

export declare type SettingsUnion = Settings | Anomalies | EyesOn | EntityAnalytics | Ueba;

/**
 * Defines values for SettingType. \
 * {@link KnownSettingType} can be used interchangeably with SettingType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **CopyableLabel** \
 * **InstructionStepsGroup** \
 * **InfoMessage**
 */
export declare type SettingType = string;

/** Represents a SourceControl in Azure Security Insights. */
export declare interface SourceControl extends ResourceWithEtag {
    /** The id (a Guid) of the source control */
    idPropertiesId?: string;
    /** The version number associated with the source control */
    version?: Version;
    /** The display name of the source control */
    displayName?: string;
    /** A description of the source control */
    description?: string;
    /** The repository type of the source control */
    repoType?: RepoType;
    /** Array of source control content types. */
    contentTypes?: ContentType[];
    /** Repository metadata. */
    repository?: Repository;
    /** Information regarding the resources created in user's repository. */
    repositoryResourceInfo?: RepositoryResourceInfo;
    /** Information regarding the latest deployment for the source control. */
    lastDeploymentInfo?: DeploymentInfo;
}

/** List all the source controls. */
export declare interface SourceControlList {
    /**
     * URL to fetch the next set of source controls.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
    /** Array of source controls. */
    value: SourceControl[];
}

/** Optional parameters. */
export declare interface SourceControlListRepositoriesNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listRepositoriesNext operation. */
export declare type SourceControlListRepositoriesNextResponse = RepoList;

/** Optional parameters. */
export declare interface SourceControlListRepositoriesOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listRepositories operation. */
export declare type SourceControlListRepositoriesResponse = RepoList;

/** Interface representing a SourceControlOperations. */
export declare interface SourceControlOperations {
    /**
     * Gets a list of repositories metadata.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param repoType The repo type.
     * @param options The options parameters.
     */
    listRepositories(resourceGroupName: string, workspaceName: string, repoType: RepoType, options?: SourceControlListRepositoriesOptionalParams): PagedAsyncIterableIterator<Repo>;
}

/** Interface representing a SourceControls. */
export declare interface SourceControls {
    /**
     * Gets all source controls, without source control items.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, options?: SourceControlsListOptionalParams): PagedAsyncIterableIterator<SourceControl>;
    /**
     * Gets a source control byt its identifier.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sourceControlId Source control Id
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, sourceControlId: string, options?: SourceControlsGetOptionalParams): Promise<SourceControlsGetResponse>;
    /**
     * Delete a source control.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sourceControlId Source control Id
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, workspaceName: string, sourceControlId: string, options?: SourceControlsDeleteOptionalParams): Promise<void>;
    /**
     * Creates a source control.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sourceControlId Source control Id
     * @param sourceControl The SourceControl
     * @param options The options parameters.
     */
    create(resourceGroupName: string, workspaceName: string, sourceControlId: string, sourceControl: SourceControl, options?: SourceControlsCreateOptionalParams): Promise<SourceControlsCreateResponse>;
}

/** Optional parameters. */
export declare interface SourceControlsCreateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the create operation. */
export declare type SourceControlsCreateResponse = SourceControl;

/** Optional parameters. */
export declare interface SourceControlsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface SourceControlsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type SourceControlsGetResponse = SourceControl;

/** Optional parameters. */
export declare interface SourceControlsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type SourceControlsListNextResponse = SourceControlList;

/** Optional parameters. */
export declare interface SourceControlsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type SourceControlsListResponse = SourceControlList;

/**
 * Defines values for SourceKind. \
 * {@link KnownSourceKind} can be used interchangeably with SourceKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **LocalWorkspace** \
 * **Community** \
 * **Solution** \
 * **SourceRepository**
 */
export declare type SourceKind = string;

/**
 * Defines values for SourceType. \
 * {@link KnownSourceType} can be used interchangeably with SourceType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Local file** \
 * **Remote storage**
 */
export declare type SourceType = string;

/** Represents a submission mail entity. */
export declare interface SubmissionMailEntity extends Entity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "SubmissionMail";
    /**
     * A bag of custom fields that should be part of the entity and will be presented to the user.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalData?: {
        [propertyName: string]: Record<string, unknown>;
    };
    /**
     * The graph item display name which is a short humanly readable description of the graph item instance. This property is optional and might be system generated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly friendlyName?: string;
    /**
     * The network message id of email to which submission belongs
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly networkMessageId?: string;
    /**
     * The submission id
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly submissionId?: string;
    /**
     * The submitter
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly submitter?: string;
    /**
     * The submission date
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly submissionDate?: Date;
    /**
     * The Time stamp when the message is received (Mail)
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly timestamp?: Date;
    /**
     * The recipient of the mail
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly recipient?: string;
    /**
     * The sender of the mail
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly sender?: string;
    /**
     * The sender's IP
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly senderIp?: string;
    /**
     * The subject of submission mail
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly subject?: string;
    /**
     * The submission type for the given instance. This maps to Junk, Phish, Malware or NotJunk.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly reportType?: string;
}

/** Submission mail entity property bag. */
export declare interface SubmissionMailEntityProperties extends EntityCommonProperties {
    /**
     * The network message id of email to which submission belongs
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly networkMessageId?: string;
    /**
     * The submission id
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly submissionId?: string;
    /**
     * The submitter
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly submitter?: string;
    /**
     * The submission date
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly submissionDate?: Date;
    /**
     * The Time stamp when the message is received (Mail)
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly timestamp?: Date;
    /**
     * The recipient of the mail
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly recipient?: string;
    /**
     * The sender of the mail
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly sender?: string;
    /**
     * The sender's IP
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly senderIp?: string;
    /**
     * The subject of submission mail
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly subject?: string;
    /**
     * The submission type for the given instance. This maps to Junk, Phish, Malware or NotJunk.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly reportType?: string;
}

/**
 * Defines values for SupportTier. \
 * {@link KnownSupportTier} can be used interchangeably with SupportTier,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Microsoft** \
 * **Partner** \
 * **Community**
 */
export declare type SupportTier = string;

/** Metadata pertaining to creation and last modification of the resource. */
export declare interface SystemData {
    /** The identity that created the resource. */
    createdBy?: string;
    /** The type of identity that created the resource. */
    createdByType?: CreatedByType;
    /** The timestamp of resource creation (UTC). */
    createdAt?: Date;
    /** The identity that last modified the resource. */
    lastModifiedBy?: string;
    /** The type of identity that last modified the resource. */
    lastModifiedByType?: CreatedByType;
    /** The timestamp of resource last modification (UTC) */
    lastModifiedAt?: Date;
}

/** Describes team information */
export declare interface TeamInformation {
    /**
     * Team ID
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly teamId?: string;
    /**
     * The primary channel URL of the team
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly primaryChannelUrl?: string;
    /**
     * The time the team was created
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly teamCreationTimeUtc?: Date;
    /**
     * The name of the team
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The description of the team
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly description?: string;
}

/** Describes team properties */
export declare interface TeamProperties {
    /** The name of the team */
    teamName: string;
    /** The description of the team */
    teamDescription?: string;
    /** List of member IDs to add to the team */
    memberIds?: string[];
    /** List of group IDs to add their members to the team */
    groupIds?: string[];
}

/**
 * Defines values for TemplateStatus. \
 * {@link KnownTemplateStatus} can be used interchangeably with TemplateStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Installed**: Alert rule template installed. and can not use more then once \
 * **Available**: Alert rule template is available. \
 * **NotAvailable**: Alert rule template is not available
 */
export declare type TemplateStatus = string;

/** ThreatIntelligence property bag. */
export declare interface ThreatIntelligence {
    /**
     * Confidence (must be between 0 and 1)
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly confidence?: number;
    /**
     * Name of the provider from whom this Threat Intelligence information was received
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly providerName?: string;
    /**
     * Report link
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly reportLink?: string;
    /**
     * Threat description (free text)
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly threatDescription?: string;
    /**
     * Threat name (e.g. "Jedobot malware")
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly threatName?: string;
    /**
     * Threat type (e.g. "Botnet")
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly threatType?: string;
}

/** Represents Threat Intelligence alert rule. */
export declare interface ThreatIntelligenceAlertRule extends AlertRule {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "ThreatIntelligence";
    /** The Name of the alert rule template used to create this rule. */
    alertRuleTemplateName?: string;
    /**
     * The description of the alert rule.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly description?: string;
    /**
     * The display name for alerts created by this alert rule.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly displayName?: string;
    /** Determines whether this alert rule is enabled or disabled. */
    enabled?: boolean;
    /**
     * The last time that this alert has been modified.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastModifiedUtc?: Date;
    /**
     * The severity for alerts created by this alert rule.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly severity?: AlertSeverity;
    /**
     * The tactics of the alert rule
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tactics?: AttackTactic[];
    /**
     * The techniques of the alert rule
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly techniques?: string[];
}

/** Represents Threat Intelligence alert rule template. */
export declare interface ThreatIntelligenceAlertRuleTemplate extends AlertRuleTemplate {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "ThreatIntelligence";
    /** the number of alert rules that were created by this template */
    alertRulesCreatedByTemplateCount?: number;
    /**
     * The last time that this alert rule template has been updated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastUpdatedDateUTC?: Date;
    /**
     * The time that this alert rule template has been added.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdDateUTC?: Date;
    /** The description of the alert rule template. */
    description?: string;
    /** The display name for alert rule template. */
    displayName?: string;
    /** The required data sources for this template */
    requiredDataConnectors?: AlertRuleTemplateDataSource[];
    /** The alert rule template status. */
    status?: TemplateStatus;
    /** The tactics of the alert rule */
    tactics?: AttackTactic[];
    /** The techniques of the alert rule */
    techniques?: string[];
    /** The severity for alerts created by this alert rule. */
    severity?: AlertSeverity;
}

/** Threat Intelligence alert rule template properties */
export declare interface ThreatIntelligenceAlertRuleTemplateProperties extends AlertRuleTemplateWithMitreProperties {
    /** The severity for alerts created by this alert rule. */
    severity: AlertSeverity;
}

/** Array of tags to be appended to the threat intelligence indicator. */
export declare interface ThreatIntelligenceAppendTags {
    /** List of tags to be appended. */
    threatIntelligenceTags?: string[];
}

/** Describes external reference */
export declare interface ThreatIntelligenceExternalReference {
    /** External reference description */
    description?: string;
    /** External reference ID */
    externalId?: string;
    /** External reference source name */
    sourceName?: string;
    /** External reference URL */
    url?: string;
    /** External reference hashes */
    hashes?: {
        [propertyName: string]: string;
    };
}

/** Filtering criteria for querying threat intelligence indicators. */
export declare interface ThreatIntelligenceFilteringCriteria {
    /** Page size */
    pageSize?: number;
    /** Minimum confidence. */
    minConfidence?: number;
    /** Maximum confidence. */
    maxConfidence?: number;
    /** Start time for ValidUntil filter. */
    minValidUntil?: string;
    /** End time for ValidUntil filter. */
    maxValidUntil?: string;
    /** Parameter to include/exclude disabled indicators. */
    includeDisabled?: boolean;
    /** Columns to sort by and sorting order */
    sortBy?: ThreatIntelligenceSortingCriteria[];
    /** Sources of threat intelligence indicators */
    sources?: string[];
    /** Pattern types */
    patternTypes?: string[];
    /** Threat types of threat intelligence indicators */
    threatTypes?: string[];
    /** Ids of threat intelligence indicators */
    ids?: string[];
    /** Keywords for searching threat intelligence indicators */
    keywords?: string[];
    /** Skip token. */
    skipToken?: string;
}

/** Describes threat granular marking model entity */
export declare interface ThreatIntelligenceGranularMarkingModel {
    /** Language granular marking model */
    language?: string;
    /** marking reference granular marking model */
    markingRef?: number;
    /** granular marking model selectors */
    selectors?: string[];
}

/** Interface representing a ThreatIntelligenceIndicator. */
export declare interface ThreatIntelligenceIndicator {
    /**
     * Query threat intelligence indicators as per filtering criteria.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param threatIntelligenceFilteringCriteria Filtering criteria for querying threat intelligence
     *                                            indicators.
     * @param options The options parameters.
     */
    listQueryIndicators(resourceGroupName: string, workspaceName: string, threatIntelligenceFilteringCriteria: ThreatIntelligenceFilteringCriteria, options?: ThreatIntelligenceIndicatorQueryIndicatorsOptionalParams): PagedAsyncIterableIterator<ThreatIntelligenceInformationUnion>;
    /**
     * Create a new threat intelligence indicator.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param threatIntelligenceProperties Properties of threat intelligence indicators to create and
     *                                     update.
     * @param options The options parameters.
     */
    createIndicator(resourceGroupName: string, workspaceName: string, threatIntelligenceProperties: ThreatIntelligenceIndicatorModel, options?: ThreatIntelligenceIndicatorCreateIndicatorOptionalParams): Promise<ThreatIntelligenceIndicatorCreateIndicatorResponse>;
    /**
     * View a threat intelligence indicator by name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param name Threat intelligence indicator name field.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, name: string, options?: ThreatIntelligenceIndicatorGetOptionalParams): Promise<ThreatIntelligenceIndicatorGetResponse>;
    /**
     * Update a threat Intelligence indicator.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param name Threat intelligence indicator name field.
     * @param threatIntelligenceProperties Properties of threat intelligence indicators to create and
     *                                     update.
     * @param options The options parameters.
     */
    create(resourceGroupName: string, workspaceName: string, name: string, threatIntelligenceProperties: ThreatIntelligenceIndicatorModel, options?: ThreatIntelligenceIndicatorCreateOptionalParams): Promise<ThreatIntelligenceIndicatorCreateResponse>;
    /**
     * Delete a threat intelligence indicator.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param name Threat intelligence indicator name field.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, workspaceName: string, name: string, options?: ThreatIntelligenceIndicatorDeleteOptionalParams): Promise<void>;
    /**
     * Append tags to a threat intelligence indicator.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param name Threat intelligence indicator name field.
     * @param threatIntelligenceAppendTags The threat intelligence append tags request body
     * @param options The options parameters.
     */
    appendTags(resourceGroupName: string, workspaceName: string, name: string, threatIntelligenceAppendTags: ThreatIntelligenceAppendTags, options?: ThreatIntelligenceIndicatorAppendTagsOptionalParams): Promise<void>;
    /**
     * Replace tags added to a threat intelligence indicator.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param name Threat intelligence indicator name field.
     * @param threatIntelligenceReplaceTags Tags in the threat intelligence indicator to be replaced.
     * @param options The options parameters.
     */
    replaceTags(resourceGroupName: string, workspaceName: string, name: string, threatIntelligenceReplaceTags: ThreatIntelligenceIndicatorModel, options?: ThreatIntelligenceIndicatorReplaceTagsOptionalParams): Promise<ThreatIntelligenceIndicatorReplaceTagsResponse>;
}

/** Optional parameters. */
export declare interface ThreatIntelligenceIndicatorAppendTagsOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface ThreatIntelligenceIndicatorCreateIndicatorOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createIndicator operation. */
export declare type ThreatIntelligenceIndicatorCreateIndicatorResponse = ThreatIntelligenceInformationUnion;

/** Optional parameters. */
export declare interface ThreatIntelligenceIndicatorCreateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the create operation. */
export declare type ThreatIntelligenceIndicatorCreateResponse = ThreatIntelligenceInformationUnion;

/** Optional parameters. */
export declare interface ThreatIntelligenceIndicatorDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface ThreatIntelligenceIndicatorGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ThreatIntelligenceIndicatorGetResponse = ThreatIntelligenceInformationUnion;

/** Interface representing a ThreatIntelligenceIndicatorMetrics. */
export declare interface ThreatIntelligenceIndicatorMetrics {
    /**
     * Get threat intelligence indicators metrics (Indicators counts by Type, Threat Type, Source).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, options?: ThreatIntelligenceIndicatorMetricsListOptionalParams): Promise<ThreatIntelligenceIndicatorMetricsListResponse>;
}

/** Optional parameters. */
export declare interface ThreatIntelligenceIndicatorMetricsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type ThreatIntelligenceIndicatorMetricsListResponse = ThreatIntelligenceMetricsList;

/** Threat intelligence indicator entity. */
export declare interface ThreatIntelligenceIndicatorModel extends ThreatIntelligenceInformation {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "indicator";
    /**
     * A bag of custom fields that should be part of the entity and will be presented to the user.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalData?: {
        [propertyName: string]: Record<string, unknown>;
    };
    /**
     * The graph item display name which is a short humanly readable description of the graph item instance. This property is optional and might be system generated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly friendlyName?: string;
    /** List of tags */
    threatIntelligenceTags?: string[];
    /** Last updated time in UTC */
    lastUpdatedTimeUtc?: string;
    /** Source of a threat intelligence entity */
    source?: string;
    /** Display name of a threat intelligence entity */
    displayName?: string;
    /** Description of a threat intelligence entity */
    description?: string;
    /** Indicator types of threat intelligence entities */
    indicatorTypes?: string[];
    /** Pattern of a threat intelligence entity */
    pattern?: string;
    /** Pattern type of a threat intelligence entity */
    patternType?: string;
    /** Pattern version of a threat intelligence entity */
    patternVersion?: string;
    /** Kill chain phases */
    killChainPhases?: ThreatIntelligenceKillChainPhase[];
    /** Parsed patterns */
    parsedPattern?: ThreatIntelligenceParsedPattern[];
    /** External ID of threat intelligence entity */
    externalId?: string;
    /** Created by reference of threat intelligence entity */
    createdByRef?: string;
    /** Is threat intelligence entity defanged */
    defanged?: boolean;
    /** External last updated time in UTC */
    externalLastUpdatedTimeUtc?: string;
    /** External References */
    externalReferences?: ThreatIntelligenceExternalReference[];
    /** Granular Markings */
    granularMarkings?: ThreatIntelligenceGranularMarkingModel[];
    /** Labels  of threat intelligence entity */
    labels?: string[];
    /** Is threat intelligence entity revoked */
    revoked?: boolean;
    /** Confidence of threat intelligence entity */
    confidence?: number;
    /** Threat intelligence entity object marking references */
    objectMarkingRefs?: string[];
    /** Language of threat intelligence entity */
    language?: string;
    /** Threat types */
    threatTypes?: string[];
    /** Valid from */
    validFrom?: string;
    /** Valid until */
    validUntil?: string;
    /** Created by */
    created?: string;
    /** Modified by */
    modified?: string;
    /** Extensions map */
    extensions?: {
        [propertyName: string]: any;
    };
}

/** Describes threat intelligence entity properties */
export declare interface ThreatIntelligenceIndicatorProperties extends EntityCommonProperties {
    /** List of tags */
    threatIntelligenceTags?: string[];
    /** Last updated time in UTC */
    lastUpdatedTimeUtc?: string;
    /** Source of a threat intelligence entity */
    source?: string;
    /** Display name of a threat intelligence entity */
    displayName?: string;
    /** Description of a threat intelligence entity */
    description?: string;
    /** Indicator types of threat intelligence entities */
    indicatorTypes?: string[];
    /** Pattern of a threat intelligence entity */
    pattern?: string;
    /** Pattern type of a threat intelligence entity */
    patternType?: string;
    /** Pattern version of a threat intelligence entity */
    patternVersion?: string;
    /** Kill chain phases */
    killChainPhases?: ThreatIntelligenceKillChainPhase[];
    /** Parsed patterns */
    parsedPattern?: ThreatIntelligenceParsedPattern[];
    /** External ID of threat intelligence entity */
    externalId?: string;
    /** Created by reference of threat intelligence entity */
    createdByRef?: string;
    /** Is threat intelligence entity defanged */
    defanged?: boolean;
    /** External last updated time in UTC */
    externalLastUpdatedTimeUtc?: string;
    /** External References */
    externalReferences?: ThreatIntelligenceExternalReference[];
    /** Granular Markings */
    granularMarkings?: ThreatIntelligenceGranularMarkingModel[];
    /** Labels  of threat intelligence entity */
    labels?: string[];
    /** Is threat intelligence entity revoked */
    revoked?: boolean;
    /** Confidence of threat intelligence entity */
    confidence?: number;
    /** Threat intelligence entity object marking references */
    objectMarkingRefs?: string[];
    /** Language of threat intelligence entity */
    language?: string;
    /** Threat types */
    threatTypes?: string[];
    /** Valid from */
    validFrom?: string;
    /** Valid until */
    validUntil?: string;
    /** Created by */
    created?: string;
    /** Modified by */
    modified?: string;
    /** Extensions map */
    extensions?: {
        [propertyName: string]: any;
    };
}

/** Optional parameters. */
export declare interface ThreatIntelligenceIndicatorQueryIndicatorsNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the queryIndicatorsNext operation. */
export declare type ThreatIntelligenceIndicatorQueryIndicatorsNextResponse = ThreatIntelligenceInformationList;

/** Optional parameters. */
export declare interface ThreatIntelligenceIndicatorQueryIndicatorsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the queryIndicators operation. */
export declare type ThreatIntelligenceIndicatorQueryIndicatorsResponse = ThreatIntelligenceInformationList;

/** Optional parameters. */
export declare interface ThreatIntelligenceIndicatorReplaceTagsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the replaceTags operation. */
export declare type ThreatIntelligenceIndicatorReplaceTagsResponse = ThreatIntelligenceInformationUnion;

/** Interface representing a ThreatIntelligenceIndicators. */
export declare interface ThreatIntelligenceIndicators {
    /**
     * Get all threat intelligence indicators.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, options?: ThreatIntelligenceIndicatorsListOptionalParams): PagedAsyncIterableIterator<ThreatIntelligenceInformationUnion>;
}

/** Optional parameters. */
export declare interface ThreatIntelligenceIndicatorsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type ThreatIntelligenceIndicatorsListNextResponse = ThreatIntelligenceInformationList;

/** Optional parameters. */
export declare interface ThreatIntelligenceIndicatorsListOptionalParams extends coreClient.OperationOptions {
    /** Filters the results, based on a Boolean condition. Optional. */
    filter?: string;
    /** Sorts the results. Optional. */
    orderby?: string;
    /** Returns only the first n results. Optional. */
    top?: number;
    /** Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. Optional. */
    skipToken?: string;
}

/** Contains response data for the list operation. */
export declare type ThreatIntelligenceIndicatorsListResponse = ThreatIntelligenceInformationList;

/** Threat intelligence information object. */
export declare interface ThreatIntelligenceInformation extends ResourceWithEtag {
    /** The kind of the entity. */
    kind: ThreatIntelligenceResourceKindEnum;
}

/** List of all the threat intelligence information objects. */
export declare interface ThreatIntelligenceInformationList {
    /**
     * URL to fetch the next set of information objects.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
    /** Array of threat intelligence information objects. */
    value: ThreatIntelligenceInformationUnion[];
}

export declare type ThreatIntelligenceInformationUnion = ThreatIntelligenceInformation | ThreatIntelligenceIndicatorModel;

/** Describes threat kill chain phase entity */
export declare interface ThreatIntelligenceKillChainPhase {
    /** Kill chainName name */
    killChainName?: string;
    /** Phase name */
    phaseName?: string;
}

/** Describes threat intelligence metric */
export declare interface ThreatIntelligenceMetric {
    /** Last updated indicator metric */
    lastUpdatedTimeUtc?: string;
    /** Threat type metrics */
    threatTypeMetrics?: ThreatIntelligenceMetricEntity[];
    /** Pattern type metrics */
    patternTypeMetrics?: ThreatIntelligenceMetricEntity[];
    /** Source metrics */
    sourceMetrics?: ThreatIntelligenceMetricEntity[];
}

/** Describes threat intelligence metric entity */
export declare interface ThreatIntelligenceMetricEntity {
    /** Metric name */
    metricName?: string;
    /** Metric value */
    metricValue?: number;
}

/** Threat intelligence metrics. */
export declare interface ThreatIntelligenceMetrics {
    /** Threat intelligence metrics. */
    properties?: ThreatIntelligenceMetric;
}

/** List of all the threat intelligence metric fields (type/threat type/source). */
export declare interface ThreatIntelligenceMetricsList {
    /** Array of threat intelligence metric fields (type/threat type/source). */
    value: ThreatIntelligenceMetrics[];
}

/** Describes parsed pattern entity */
export declare interface ThreatIntelligenceParsedPattern {
    /** Pattern type key */
    patternTypeKey?: string;
    /** Pattern type keys */
    patternTypeValues?: ThreatIntelligenceParsedPatternTypeValue[];
}

/** Describes threat kill chain phase entity */
export declare interface ThreatIntelligenceParsedPatternTypeValue {
    /** Type of the value */
    valueType?: string;
    /** Value of parsed pattern */
    value?: string;
}

/**
 * Defines values for ThreatIntelligenceResourceKindEnum. \
 * {@link KnownThreatIntelligenceResourceKindEnum} can be used interchangeably with ThreatIntelligenceResourceKindEnum,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **indicator**: Entity represents threat intelligence indicator in the system.
 */
export declare type ThreatIntelligenceResourceKindEnum = string;

/** List of available columns for sorting */
export declare interface ThreatIntelligenceSortingCriteria {
    /** Column name */
    itemKey?: string;
    /** Sorting order (ascending/descending/unsorted). */
    sortOrder?: ThreatIntelligenceSortingCriteriaEnum;
}

/**
 * Defines values for ThreatIntelligenceSortingCriteriaEnum. \
 * {@link KnownThreatIntelligenceSortingCriteriaEnum} can be used interchangeably with ThreatIntelligenceSortingCriteriaEnum,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **unsorted** \
 * **ascending** \
 * **descending**
 */
export declare type ThreatIntelligenceSortingCriteriaEnum = string;

/** Threat Intelligence Platforms data connector check requirements */
export declare interface TICheckRequirements extends DataConnectorsCheckRequirements {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "ThreatIntelligence";
    /** The tenant id to connect to, and get the data from. */
    tenantId?: string;
}

/** Threat Intelligence Platforms data connector required properties. */
export declare interface TICheckRequirementsProperties extends DataConnectorTenantId {
}

/** Represents threat intelligence data connector. */
export declare interface TIDataConnector extends DataConnector {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "ThreatIntelligence";
    /** The tenant id to connect to, and get the data from. */
    tenantId?: string;
    /** The lookback period for the feed to be imported. */
    tipLookbackPeriod?: Date;
    /** The available data types for the connector. */
    dataTypes?: TIDataConnectorDataTypes;
}

/** The available data types for TI (Threat Intelligence) data connector. */
export declare interface TIDataConnectorDataTypes {
    /** Data type for indicators connection. */
    indicators: TIDataConnectorDataTypesIndicators;
}

/** Data type for indicators connection. */
export declare interface TIDataConnectorDataTypesIndicators extends DataConnectorDataTypeCommon {
}

/** TI (Threat Intelligence) data connector properties. */
export declare interface TIDataConnectorProperties extends DataConnectorTenantId {
    /** The lookback period for the feed to be imported. */
    tipLookbackPeriod?: Date;
    /** The available data types for the connector. */
    dataTypes: TIDataConnectorDataTypes;
}

/** timeline aggregation information per kind */
export declare interface TimelineAggregation {
    /** the total items found for a kind */
    count: number;
    /** the query kind */
    kind: EntityTimelineKind;
}

/** Timeline Query Errors. */
export declare interface TimelineError {
    /** the query kind */
    kind: EntityTimelineKind;
    /** the query id */
    queryId?: string;
    /** the error message */
    errorMessage: string;
}

/** Expansion result metadata. */
export declare interface TimelineResultsMetadata {
    /** the total items found for the timeline request */
    totalCount: number;
    /** timeline aggregation per kind */
    aggregations: TimelineAggregation[];
    /** information about the failure queries */
    errors?: TimelineError[];
}

/** Threat Intelligence TAXII data connector check requirements */
export declare interface TiTaxiiCheckRequirements extends DataConnectorsCheckRequirements {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "ThreatIntelligenceTaxii";
    /** The tenant id to connect to, and get the data from. */
    tenantId?: string;
}

/** Threat Intelligence TAXII data connector required properties. */
export declare interface TiTaxiiCheckRequirementsProperties extends DataConnectorTenantId {
}

/** Data connector to pull Threat intelligence data from TAXII 2.0/2.1 server */
export declare interface TiTaxiiDataConnector extends DataConnector {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "ThreatIntelligenceTaxii";
    /** The tenant id to connect to, and get the data from. */
    tenantId?: string;
    /** The workspace id. */
    workspaceId?: string;
    /** The friendly name for the TAXII server. */
    friendlyName?: string;
    /** The API root for the TAXII server. */
    taxiiServer?: string;
    /** The collection id of the TAXII server. */
    collectionId?: string;
    /** The userName for the TAXII server. */
    userName?: string;
    /** The password for the TAXII server. */
    password?: string;
    /** The lookback period for the TAXII server. */
    taxiiLookbackPeriod?: Date;
    /** The polling frequency for the TAXII server. */
    pollingFrequency?: PollingFrequency;
    /** The available data types for Threat Intelligence TAXII data connector. */
    dataTypes?: TiTaxiiDataConnectorDataTypes;
}

/** The available data types for Threat Intelligence TAXII data connector. */
export declare interface TiTaxiiDataConnectorDataTypes {
    /** Data type for TAXII connector. */
    taxiiClient: TiTaxiiDataConnectorDataTypesTaxiiClient;
}

/** Data type for TAXII connector. */
export declare interface TiTaxiiDataConnectorDataTypesTaxiiClient extends DataConnectorDataTypeCommon {
}

/** Threat Intelligence TAXII data connector properties. */
export declare interface TiTaxiiDataConnectorProperties extends DataConnectorTenantId {
    /** The workspace id. */
    workspaceId?: string;
    /** The friendly name for the TAXII server. */
    friendlyName?: string;
    /** The API root for the TAXII server. */
    taxiiServer?: string;
    /** The collection id of the TAXII server. */
    collectionId?: string;
    /** The userName for the TAXII server. */
    userName?: string;
    /** The password for the TAXII server. */
    password?: string;
    /** The lookback period for the TAXII server. */
    taxiiLookbackPeriod?: Date;
    /** The polling frequency for the TAXII server. */
    pollingFrequency: PollingFrequency | null;
    /** The available data types for Threat Intelligence TAXII data connector. */
    dataTypes: TiTaxiiDataConnectorDataTypes;
}

/** Defines values for TriggerOperator. */
export declare type TriggerOperator = "GreaterThan" | "LessThan" | "Equal" | "NotEqual";

/**
 * Defines values for TriggersOn. \
 * {@link KnownTriggersOn} can be used interchangeably with TriggersOn,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Incidents**: Trigger on Incidents \
 * **Alerts**: Trigger on Alerts
 */
export declare type TriggersOn = string;

/**
 * Defines values for TriggersWhen. \
 * {@link KnownTriggersWhen} can be used interchangeably with TriggersWhen,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Created**: Trigger on created objects \
 * **Updated**: Trigger on updated objects
 */
export declare type TriggersWhen = string;

/** Settings with single toggle. */
export declare interface Ueba extends Settings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "Ueba";
    /** The relevant data sources that enriched by ueba */
    dataSources?: UebaDataSources[];
}

/**
 * Defines values for UebaDataSources. \
 * {@link KnownUebaDataSources} can be used interchangeably with UebaDataSources,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AuditLogs** \
 * **AzureActivity** \
 * **SecurityEvent** \
 * **SigninLogs**
 */
export declare type UebaDataSources = string;

/** Represents a url entity. */
export declare interface UrlEntity extends Entity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "Url";
    /**
     * A bag of custom fields that should be part of the entity and will be presented to the user.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalData?: {
        [propertyName: string]: Record<string, unknown>;
    };
    /**
     * The graph item display name which is a short humanly readable description of the graph item instance. This property is optional and might be system generated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly friendlyName?: string;
    /**
     * A full URL the entity points to
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly url?: string;
}

/** Url entity property bag. */
export declare interface UrlEntityProperties extends EntityCommonProperties {
    /**
     * A full URL the entity points to
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly url?: string;
}

/** User information that made some action */
export declare interface UserInfo {
    /**
     * The email of the user.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly email?: string;
    /**
     * The name of the user.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /** The object id of the user. */
    objectId?: string;
}

/** Describes an error encountered in the file during validation. */
export declare interface ValidationError {
    /** The number of the record that has the error. */
    recordIndex?: number;
    /**
     * A list of descriptions of the error.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly errorMessages?: string[];
}

/**
 * Defines values for Version. \
 * {@link KnownVersion} can be used interchangeably with Version,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **V1** \
 * **V2**
 */
export declare type Version = string;

/** Represents a Watchlist in Azure Security Insights. */
export declare interface Watchlist extends ResourceWithEtag {
    /** The id (a Guid) of the watchlist */
    watchlistId?: string;
    /** The display name of the watchlist */
    displayName?: string;
    /** The provider of the watchlist */
    provider?: string;
    /** The filename of the watchlist, called 'source' */
    source?: string;
    /** The sourceType of the watchlist */
    sourceType?: SourceType;
    /** The time the watchlist was created */
    created?: Date;
    /** The last time the watchlist was updated */
    updated?: Date;
    /** Describes a user that created the watchlist */
    createdBy?: UserInfo;
    /** Describes a user that updated the watchlist */
    updatedBy?: UserInfo;
    /** A description of the watchlist */
    description?: string;
    /** The type of the watchlist */
    watchlistType?: string;
    /** The alias of the watchlist */
    watchlistAlias?: string;
    /** A flag that indicates if the watchlist is deleted or not */
    isDeleted?: boolean;
    /** List of labels relevant to this watchlist */
    labels?: string[];
    /** The default duration of a watchlist (in ISO 8601 duration format) */
    defaultDuration?: string;
    /** The tenantId where the watchlist belongs to */
    tenantId?: string;
    /** The number of lines in a csv/tsv content to skip before the header */
    numberOfLinesToSkip?: number;
    /** The raw content that represents to watchlist items to create. In case of csv/tsv content type, it's the content of the file that will parsed by the endpoint */
    rawContent?: string;
    /** The search key is used to optimize query performance when using watchlists for joins with other data. For example, enable a column with IP addresses to be the designated SearchKey field, then use this field as the key field when joining to other event data by IP address. */
    itemsSearchKey?: string;
    /** The content type of the raw content. Example : text/csv or text/tsv */
    contentType?: string;
    /** The status of the Watchlist upload : New, InProgress or Complete. Pls note : When a Watchlist upload status is equal to InProgress, the Watchlist cannot be deleted */
    uploadStatus?: string;
}

/** Represents a Watchlist item in Azure Security Insights. */
export declare interface WatchlistItem extends ResourceWithEtag {
    /** The type of the watchlist item */
    watchlistItemType?: string;
    /** The id (a Guid) of the watchlist item */
    watchlistItemId?: string;
    /** The tenantId to which the watchlist item belongs to */
    tenantId?: string;
    /** A flag that indicates if the watchlist item is deleted or not */
    isDeleted?: boolean;
    /** The time the watchlist item was created */
    created?: Date;
    /** The last time the watchlist item was updated */
    updated?: Date;
    /** Describes a user that created the watchlist item */
    createdBy?: UserInfo;
    /** Describes a user that updated the watchlist item */
    updatedBy?: UserInfo;
    /** key-value pairs for a watchlist item */
    itemsKeyValue?: {
        [propertyName: string]: any;
    };
    /** key-value pairs for a watchlist item entity mapping */
    entityMapping?: {
        [propertyName: string]: any;
    };
}

/** List all the watchlist items. */
export declare interface WatchlistItemList {
    /**
     * URL to fetch the next set of watchlist item.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
    /** Array of watchlist items. */
    value: WatchlistItem[];
}

/** Interface representing a WatchlistItems. */
export declare interface WatchlistItems {
    /**
     * Gets all watchlist Items.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param watchlistAlias Watchlist Alias
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, watchlistAlias: string, options?: WatchlistItemsListOptionalParams): PagedAsyncIterableIterator<WatchlistItem>;
    /**
     * Gets a watchlist, without its watchlist items.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param watchlistAlias Watchlist Alias
     * @param watchlistItemId Watchlist Item Id (GUID)
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, watchlistAlias: string, watchlistItemId: string, options?: WatchlistItemsGetOptionalParams): Promise<WatchlistItemsGetResponse>;
    /**
     * Delete a watchlist item.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param watchlistAlias Watchlist Alias
     * @param watchlistItemId Watchlist Item Id (GUID)
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, workspaceName: string, watchlistAlias: string, watchlistItemId: string, options?: WatchlistItemsDeleteOptionalParams): Promise<void>;
    /**
     * Creates or updates a watchlist item.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param watchlistAlias Watchlist Alias
     * @param watchlistItemId Watchlist Item Id (GUID)
     * @param watchlistItem The watchlist item
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, workspaceName: string, watchlistAlias: string, watchlistItemId: string, watchlistItem: WatchlistItem, options?: WatchlistItemsCreateOrUpdateOptionalParams): Promise<WatchlistItemsCreateOrUpdateResponse>;
}

/** Optional parameters. */
export declare interface WatchlistItemsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type WatchlistItemsCreateOrUpdateResponse = WatchlistItem;

/** Optional parameters. */
export declare interface WatchlistItemsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface WatchlistItemsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type WatchlistItemsGetResponse = WatchlistItem;

/** Optional parameters. */
export declare interface WatchlistItemsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type WatchlistItemsListNextResponse = WatchlistItemList;

/** Optional parameters. */
export declare interface WatchlistItemsListOptionalParams extends coreClient.OperationOptions {
    /** Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. Optional. */
    skipToken?: string;
}

/** Contains response data for the list operation. */
export declare type WatchlistItemsListResponse = WatchlistItemList;

/** List all the watchlists. */
export declare interface WatchlistList {
    /**
     * URL to fetch the next set of watchlists.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
    /** Array of watchlist. */
    value: Watchlist[];
}

/** Interface representing a Watchlists. */
export declare interface Watchlists {
    /**
     * Gets all watchlists, without watchlist items.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, options?: WatchlistsListOptionalParams): PagedAsyncIterableIterator<Watchlist>;
    /**
     * Gets a watchlist, without its watchlist items.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param watchlistAlias Watchlist Alias
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, watchlistAlias: string, options?: WatchlistsGetOptionalParams): Promise<WatchlistsGetResponse>;
    /**
     * Delete a watchlist.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param watchlistAlias Watchlist Alias
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, workspaceName: string, watchlistAlias: string, options?: WatchlistsDeleteOptionalParams): Promise<WatchlistsDeleteResponse>;
    /**
     * Create or update a Watchlist and its Watchlist Items (bulk creation, e.g. through text/csv content
     * type). To create a Watchlist and its Items, we should call this endpoint with either rawContent or a
     * valid SAR URI and contentType properties. The rawContent is mainly used for small watchlist (content
     * size below 3.8 MB). The SAS URI enables the creation of large watchlist, where the content size can
     * go up to 500 MB. The status of processing such large file can be polled through the URL returned in
     * Azure-AsyncOperation header.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param watchlistAlias Watchlist Alias
     * @param watchlist The watchlist
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, workspaceName: string, watchlistAlias: string, watchlist: Watchlist, options?: WatchlistsCreateOrUpdateOptionalParams): Promise<WatchlistsCreateOrUpdateResponse>;
}

/** Defines headers for Watchlists_createOrUpdate operation. */
export declare interface WatchlistsCreateOrUpdateHeaders {
    /** Contains the status URL on which clients are expected to poll the status of the operation. */
    azureAsyncOperation?: string;
}

/** Optional parameters. */
export declare interface WatchlistsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type WatchlistsCreateOrUpdateResponse = Watchlist;

/** Defines headers for Watchlists_delete operation. */
export declare interface WatchlistsDeleteHeaders {
    /** Contains the status URL on which clients are expected to poll the status of the delete operation. */
    azureAsyncOperation?: string;
}

/** Optional parameters. */
export declare interface WatchlistsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the delete operation. */
export declare type WatchlistsDeleteResponse = WatchlistsDeleteHeaders;

/** Optional parameters. */
export declare interface WatchlistsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type WatchlistsGetResponse = Watchlist;

/** Optional parameters. */
export declare interface WatchlistsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type WatchlistsListNextResponse = WatchlistList;

/** Optional parameters. */
export declare interface WatchlistsListOptionalParams extends coreClient.OperationOptions {
    /** Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. Optional. */
    skipToken?: string;
}

/** Contains response data for the list operation. */
export declare type WatchlistsListResponse = WatchlistList;

/** Detail about the webhook object. */
export declare interface Webhook {
    /** Unique identifier for the webhook. */
    webhookId?: string;
    /** URL that gets invoked by the webhook. */
    webhookUrl?: string;
    /** Time when the webhook secret was updated. */
    webhookSecretUpdateTime?: string;
    /** A flag to instruct the backend service to rotate webhook secret. */
    rotateWebhookSecret?: boolean;
}

export { }
