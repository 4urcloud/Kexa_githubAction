/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { CustomerInsightsManagementClient } from "@azure/arm-customerinsights";
import { DefaultAzureCredential } from "@azure/identity";
/**
 * This sample demonstrates how to Creates a Prediction or updates an existing Prediction in the hub.
 *
 * @summary Creates a Prediction or updates an existing Prediction in the hub.
 * x-ms-original-file: specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/PredictionsCreateOrUpdate.json
 */
function predictionsCreateOrUpdate() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "c909e979-ef71-4def-a970-bc7c154db8c5";
        const resourceGroupName = "TestHubRG";
        const hubName = "sdkTestHub";
        const predictionName = "sdktest";
        const parameters = {
            description: { enUs: "sdktest" },
            autoAnalyze: true,
            displayName: { enUs: "sdktest" },
            grades: [],
            involvedInteractionTypes: [],
            involvedKpiTypes: [],
            involvedRelationships: [],
            mappings: {
                grade: "sdktest_Grade",
                reason: "sdktest_Reason",
                score: "sdktest_Score"
            },
            negativeOutcomeExpression: "Customers.FirstName = 'Mike'",
            positiveOutcomeExpression: "Customers.FirstName = 'David'",
            predictionName: "sdktest",
            primaryProfileType: "Customers",
            scopeExpression: "*",
            scoreLabel: "score label"
        };
        const credential = new DefaultAzureCredential();
        const client = new CustomerInsightsManagementClient(credential, subscriptionId);
        const result = yield client.predictions.beginCreateOrUpdateAndWait(resourceGroupName, hubName, predictionName, parameters);
        console.log(result);
    });
}
predictionsCreateOrUpdate().catch(console.error);
//# sourceMappingURL=predictionsCreateOrUpdateSample.js.map