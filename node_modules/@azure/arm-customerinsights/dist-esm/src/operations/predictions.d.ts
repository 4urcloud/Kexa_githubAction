import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Predictions } from "../operationsInterfaces";
import { CustomerInsightsManagementClient } from "../customerInsightsManagementClient";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import { PredictionResourceFormat, PredictionsListByHubOptionalParams, PredictionsCreateOrUpdateOptionalParams, PredictionsCreateOrUpdateResponse, PredictionsGetOptionalParams, PredictionsGetResponse, PredictionsDeleteOptionalParams, PredictionsGetTrainingResultsOptionalParams, PredictionsGetTrainingResultsResponse, PredictionsGetModelStatusOptionalParams, PredictionsGetModelStatusResponse, PredictionModelStatus, PredictionsModelStatusOptionalParams } from "../models";
/** Class containing Predictions operations. */
export declare class PredictionsImpl implements Predictions {
    private readonly client;
    /**
     * Initialize a new instance of the class Predictions class.
     * @param client Reference to the service client
     */
    constructor(client: CustomerInsightsManagementClient);
    /**
     * Gets all the predictions in the specified hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param options The options parameters.
     */
    listByHub(resourceGroupName: string, hubName: string, options?: PredictionsListByHubOptionalParams): PagedAsyncIterableIterator<PredictionResourceFormat>;
    private listByHubPagingPage;
    private listByHubPagingAll;
    /**
     * Creates a Prediction or updates an existing Prediction in the hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param predictionName The name of the Prediction.
     * @param parameters Parameters supplied to the create/update Prediction operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, hubName: string, predictionName: string, parameters: PredictionResourceFormat, options?: PredictionsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<PredictionsCreateOrUpdateResponse>, PredictionsCreateOrUpdateResponse>>;
    /**
     * Creates a Prediction or updates an existing Prediction in the hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param predictionName The name of the Prediction.
     * @param parameters Parameters supplied to the create/update Prediction operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, hubName: string, predictionName: string, parameters: PredictionResourceFormat, options?: PredictionsCreateOrUpdateOptionalParams): Promise<PredictionsCreateOrUpdateResponse>;
    /**
     * Gets a Prediction in the hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param predictionName The name of the Prediction.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, hubName: string, predictionName: string, options?: PredictionsGetOptionalParams): Promise<PredictionsGetResponse>;
    /**
     * Deletes a Prediction in the hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param predictionName The name of the Prediction.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, hubName: string, predictionName: string, options?: PredictionsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes a Prediction in the hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param predictionName The name of the Prediction.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, hubName: string, predictionName: string, options?: PredictionsDeleteOptionalParams): Promise<void>;
    /**
     * Gets training results.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param predictionName The name of the Prediction.
     * @param options The options parameters.
     */
    getTrainingResults(resourceGroupName: string, hubName: string, predictionName: string, options?: PredictionsGetTrainingResultsOptionalParams): Promise<PredictionsGetTrainingResultsResponse>;
    /**
     * Gets model status of the prediction.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param predictionName The name of the Prediction.
     * @param options The options parameters.
     */
    getModelStatus(resourceGroupName: string, hubName: string, predictionName: string, options?: PredictionsGetModelStatusOptionalParams): Promise<PredictionsGetModelStatusResponse>;
    /**
     * Creates or updates the model status of prediction.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param predictionName The name of the Prediction.
     * @param parameters Parameters supplied to the create/update prediction model status operation.
     * @param options The options parameters.
     */
    modelStatus(resourceGroupName: string, hubName: string, predictionName: string, parameters: PredictionModelStatus, options?: PredictionsModelStatusOptionalParams): Promise<void>;
    /**
     * Gets all the predictions in the specified hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param options The options parameters.
     */
    private _listByHub;
    /**
     * ListByHubNext
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param nextLink The nextLink from the previous successful call to the ListByHub method.
     * @param options The options parameters.
     */
    private _listByHubNext;
}
//# sourceMappingURL=predictions.d.ts.map