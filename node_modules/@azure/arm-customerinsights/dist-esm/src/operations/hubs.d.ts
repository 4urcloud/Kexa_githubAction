import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Hubs } from "../operationsInterfaces";
import { CustomerInsightsManagementClient } from "../customerInsightsManagementClient";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import { Hub, HubsListByResourceGroupOptionalParams, HubsListOptionalParams, HubsCreateOrUpdateOptionalParams, HubsCreateOrUpdateResponse, HubsUpdateOptionalParams, HubsUpdateResponse, HubsDeleteOptionalParams, HubsGetOptionalParams, HubsGetResponse } from "../models";
/** Class containing Hubs operations. */
export declare class HubsImpl implements Hubs {
    private readonly client;
    /**
     * Initialize a new instance of the class Hubs class.
     * @param client Reference to the service client
     */
    constructor(client: CustomerInsightsManagementClient);
    /**
     * Gets all the hubs in a resource group.
     * @param resourceGroupName The name of the resource group.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: HubsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<Hub>;
    private listByResourceGroupPagingPage;
    private listByResourceGroupPagingAll;
    /**
     * Gets all hubs in the specified subscription.
     * @param options The options parameters.
     */
    list(options?: HubsListOptionalParams): PagedAsyncIterableIterator<Hub>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Creates a hub, or updates an existing hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the Hub.
     * @param parameters Parameters supplied to the CreateOrUpdate Hub operation.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, hubName: string, parameters: Hub, options?: HubsCreateOrUpdateOptionalParams): Promise<HubsCreateOrUpdateResponse>;
    /**
     * Updates a Hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the Hub.
     * @param parameters Parameters supplied to the Update Hub operation.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, hubName: string, parameters: Hub, options?: HubsUpdateOptionalParams): Promise<HubsUpdateResponse>;
    /**
     * Deletes the specified hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, hubName: string, options?: HubsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes the specified hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, hubName: string, options?: HubsDeleteOptionalParams): Promise<void>;
    /**
     * Gets information about the specified hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, hubName: string, options?: HubsGetOptionalParams): Promise<HubsGetResponse>;
    /**
     * Gets all the hubs in a resource group.
     * @param resourceGroupName The name of the resource group.
     * @param options The options parameters.
     */
    private _listByResourceGroup;
    /**
     * Gets all hubs in the specified subscription.
     * @param options The options parameters.
     */
    private _list;
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName The name of the resource group.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    private _listByResourceGroupNext;
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
}
//# sourceMappingURL=hubs.d.ts.map