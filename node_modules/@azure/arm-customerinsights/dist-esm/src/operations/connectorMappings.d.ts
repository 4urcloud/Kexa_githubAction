import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { ConnectorMappings } from "../operationsInterfaces";
import { CustomerInsightsManagementClient } from "../customerInsightsManagementClient";
import { ConnectorMappingResourceFormat, ConnectorMappingsListByConnectorOptionalParams, ConnectorMappingsCreateOrUpdateOptionalParams, ConnectorMappingsCreateOrUpdateResponse, ConnectorMappingsGetOptionalParams, ConnectorMappingsGetResponse, ConnectorMappingsDeleteOptionalParams } from "../models";
/** Class containing ConnectorMappings operations. */
export declare class ConnectorMappingsImpl implements ConnectorMappings {
    private readonly client;
    /**
     * Initialize a new instance of the class ConnectorMappings class.
     * @param client Reference to the service client
     */
    constructor(client: CustomerInsightsManagementClient);
    /**
     * Gets all the connector mappings in the specified connector.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param connectorName The name of the connector.
     * @param options The options parameters.
     */
    listByConnector(resourceGroupName: string, hubName: string, connectorName: string, options?: ConnectorMappingsListByConnectorOptionalParams): PagedAsyncIterableIterator<ConnectorMappingResourceFormat>;
    private listByConnectorPagingPage;
    private listByConnectorPagingAll;
    /**
     * Creates a connector mapping or updates an existing connector mapping in the connector.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param connectorName The name of the connector.
     * @param mappingName The name of the connector mapping.
     * @param parameters Parameters supplied to the CreateOrUpdate Connector Mapping operation.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, hubName: string, connectorName: string, mappingName: string, parameters: ConnectorMappingResourceFormat, options?: ConnectorMappingsCreateOrUpdateOptionalParams): Promise<ConnectorMappingsCreateOrUpdateResponse>;
    /**
     * Gets a connector mapping in the connector.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param connectorName The name of the connector.
     * @param mappingName The name of the connector mapping.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, hubName: string, connectorName: string, mappingName: string, options?: ConnectorMappingsGetOptionalParams): Promise<ConnectorMappingsGetResponse>;
    /**
     * Deletes a connector mapping in the connector.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param connectorName The name of the connector.
     * @param mappingName The name of the connector mapping.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, hubName: string, connectorName: string, mappingName: string, options?: ConnectorMappingsDeleteOptionalParams): Promise<void>;
    /**
     * Gets all the connector mappings in the specified connector.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param connectorName The name of the connector.
     * @param options The options parameters.
     */
    private _listByConnector;
    /**
     * ListByConnectorNext
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param connectorName The name of the connector.
     * @param nextLink The nextLink from the previous successful call to the ListByConnector method.
     * @param options The options parameters.
     */
    private _listByConnectorNext;
}
//# sourceMappingURL=connectorMappings.d.ts.map