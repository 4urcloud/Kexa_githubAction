/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from "tslib";
import { setContinuationToken } from "../pagingHelper";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/// <reference lib="esnext.asynciterable" />
/** Class containing ConnectorMappings operations. */
export class ConnectorMappingsImpl {
    /**
     * Initialize a new instance of the class ConnectorMappings class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets all the connector mappings in the specified connector.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param connectorName The name of the connector.
     * @param options The options parameters.
     */
    listByConnector(resourceGroupName, hubName, connectorName, options) {
        const iter = this.listByConnectorPagingAll(resourceGroupName, hubName, connectorName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByConnectorPagingPage(resourceGroupName, hubName, connectorName, options, settings);
            }
        };
    }
    listByConnectorPagingPage(resourceGroupName, hubName, connectorName, options, settings) {
        return __asyncGenerator(this, arguments, function* listByConnectorPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listByConnector(resourceGroupName, hubName, connectorName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listByConnectorNext(resourceGroupName, hubName, connectorName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listByConnectorPagingAll(resourceGroupName, hubName, connectorName, options) {
        return __asyncGenerator(this, arguments, function* listByConnectorPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = __asyncValues(this.listByConnectorPagingPage(resourceGroupName, hubName, connectorName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Creates a connector mapping or updates an existing connector mapping in the connector.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param connectorName The name of the connector.
     * @param mappingName The name of the connector mapping.
     * @param parameters Parameters supplied to the CreateOrUpdate Connector Mapping operation.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, hubName, connectorName, mappingName, parameters, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            hubName,
            connectorName,
            mappingName,
            parameters,
            options
        }, createOrUpdateOperationSpec);
    }
    /**
     * Gets a connector mapping in the connector.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param connectorName The name of the connector.
     * @param mappingName The name of the connector mapping.
     * @param options The options parameters.
     */
    get(resourceGroupName, hubName, connectorName, mappingName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, hubName, connectorName, mappingName, options }, getOperationSpec);
    }
    /**
     * Deletes a connector mapping in the connector.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param connectorName The name of the connector.
     * @param mappingName The name of the connector mapping.
     * @param options The options parameters.
     */
    delete(resourceGroupName, hubName, connectorName, mappingName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, hubName, connectorName, mappingName, options }, deleteOperationSpec);
    }
    /**
     * Gets all the connector mappings in the specified connector.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param connectorName The name of the connector.
     * @param options The options parameters.
     */
    _listByConnector(resourceGroupName, hubName, connectorName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, hubName, connectorName, options }, listByConnectorOperationSpec);
    }
    /**
     * ListByConnectorNext
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param connectorName The name of the connector.
     * @param nextLink The nextLink from the previous successful call to the ListByConnector method.
     * @param options The options parameters.
     */
    _listByConnectorNext(resourceGroupName, hubName, connectorName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, hubName, connectorName, nextLink, options }, listByConnectorNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/connectors/{connectorName}/mappings/{mappingName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.ConnectorMappingResourceFormat
        },
        201: {
            bodyMapper: Mappers.ConnectorMappingResourceFormat
        }
    },
    requestBody: Parameters.parameters7,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.subscriptionId,
        Parameters.hubName1,
        Parameters.connectorName1,
        Parameters.mappingName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/connectors/{connectorName}/mappings/{mappingName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ConnectorMappingResourceFormat
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.subscriptionId,
        Parameters.hubName1,
        Parameters.connectorName1,
        Parameters.mappingName1
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/connectors/{connectorName}/mappings/{mappingName}",
    httpMethod: "DELETE",
    responses: { 200: {}, 204: {} },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.subscriptionId,
        Parameters.hubName1,
        Parameters.connectorName1,
        Parameters.mappingName1
    ],
    serializer
};
const listByConnectorOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/connectors/{connectorName}/mappings",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ConnectorMappingListResult
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.subscriptionId,
        Parameters.hubName1,
        Parameters.connectorName1
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listByConnectorNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ConnectorMappingListResult
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.nextLink,
        Parameters.resourceGroupName,
        Parameters.subscriptionId,
        Parameters.hubName1,
        Parameters.connectorName1
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=connectorMappings.js.map