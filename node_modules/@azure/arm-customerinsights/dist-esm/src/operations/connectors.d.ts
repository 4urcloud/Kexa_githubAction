import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Connectors } from "../operationsInterfaces";
import { CustomerInsightsManagementClient } from "../customerInsightsManagementClient";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import { ConnectorResourceFormat, ConnectorsListByHubOptionalParams, ConnectorsCreateOrUpdateOptionalParams, ConnectorsCreateOrUpdateResponse, ConnectorsGetOptionalParams, ConnectorsGetResponse, ConnectorsDeleteOptionalParams } from "../models";
/** Class containing Connectors operations. */
export declare class ConnectorsImpl implements Connectors {
    private readonly client;
    /**
     * Initialize a new instance of the class Connectors class.
     * @param client Reference to the service client
     */
    constructor(client: CustomerInsightsManagementClient);
    /**
     * Gets all the connectors in the specified hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param options The options parameters.
     */
    listByHub(resourceGroupName: string, hubName: string, options?: ConnectorsListByHubOptionalParams): PagedAsyncIterableIterator<ConnectorResourceFormat>;
    private listByHubPagingPage;
    private listByHubPagingAll;
    /**
     * Creates a connector or updates an existing connector in the hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param connectorName The name of the connector.
     * @param parameters Parameters supplied to the CreateOrUpdate Connector operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, hubName: string, connectorName: string, parameters: ConnectorResourceFormat, options?: ConnectorsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<ConnectorsCreateOrUpdateResponse>, ConnectorsCreateOrUpdateResponse>>;
    /**
     * Creates a connector or updates an existing connector in the hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param connectorName The name of the connector.
     * @param parameters Parameters supplied to the CreateOrUpdate Connector operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, hubName: string, connectorName: string, parameters: ConnectorResourceFormat, options?: ConnectorsCreateOrUpdateOptionalParams): Promise<ConnectorsCreateOrUpdateResponse>;
    /**
     * Gets a connector in the hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param connectorName The name of the connector.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, hubName: string, connectorName: string, options?: ConnectorsGetOptionalParams): Promise<ConnectorsGetResponse>;
    /**
     * Deletes a connector in the hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param connectorName The name of the connector.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, hubName: string, connectorName: string, options?: ConnectorsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes a connector in the hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param connectorName The name of the connector.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, hubName: string, connectorName: string, options?: ConnectorsDeleteOptionalParams): Promise<void>;
    /**
     * Gets all the connectors in the specified hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param options The options parameters.
     */
    private _listByHub;
    /**
     * ListByHubNext
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param nextLink The nextLink from the previous successful call to the ListByHub method.
     * @param options The options parameters.
     */
    private _listByHubNext;
}
//# sourceMappingURL=connectors.d.ts.map