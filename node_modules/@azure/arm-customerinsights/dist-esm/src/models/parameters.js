/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { Hub as HubMapper, ProfileResourceFormat as ProfileResourceFormatMapper, InteractionResourceFormat as InteractionResourceFormatMapper, RelationshipResourceFormat as RelationshipResourceFormatMapper, RelationshipLinkResourceFormat as RelationshipLinkResourceFormatMapper, AuthorizationPolicyResourceFormat as AuthorizationPolicyResourceFormatMapper, ConnectorResourceFormat as ConnectorResourceFormatMapper, ConnectorMappingResourceFormat as ConnectorMappingResourceFormatMapper, KpiResourceFormat as KpiResourceFormatMapper, ViewResourceFormat as ViewResourceFormatMapper, LinkResourceFormat as LinkResourceFormatMapper, RoleAssignmentResourceFormat as RoleAssignmentResourceFormatMapper, GetImageUploadUrlInput as GetImageUploadUrlInputMapper, PredictionResourceFormat as PredictionResourceFormatMapper, PredictionModelStatus as PredictionModelStatusMapper } from "../models/mappers";
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2017-04-26",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export const parameters = {
    parameterPath: "parameters",
    mapper: HubMapper
};
export const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const hubName = {
    parameterPath: "hubName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z][a-zA-Z0-9]+$"),
            MaxLength: 64,
            MinLength: 1
        },
        serializedName: "hubName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const hubName1 = {
    parameterPath: "hubName",
    mapper: {
        serializedName: "hubName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters1 = {
    parameterPath: "parameters",
    mapper: ProfileResourceFormatMapper
};
export const profileName = {
    parameterPath: "profileName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z][a-zA-Z0-9_]+$"),
            MaxLength: 128,
            MinLength: 1
        },
        serializedName: "profileName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const profileName1 = {
    parameterPath: "profileName",
    mapper: {
        serializedName: "profileName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const localeCode = {
    parameterPath: ["options", "localeCode"],
    mapper: {
        defaultValue: "en-us",
        serializedName: "locale-code",
        type: {
            name: "String"
        }
    }
};
export const parameters2 = {
    parameterPath: "parameters",
    mapper: InteractionResourceFormatMapper
};
export const interactionName = {
    parameterPath: "interactionName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z][a-zA-Z0-9_]+$"),
            MaxLength: 128,
            MinLength: 1
        },
        serializedName: "interactionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const interactionName1 = {
    parameterPath: "interactionName",
    mapper: {
        serializedName: "interactionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters3 = {
    parameterPath: "parameters",
    mapper: RelationshipResourceFormatMapper
};
export const relationshipName = {
    parameterPath: "relationshipName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z][a-zA-Z0-9_]+$"),
            MaxLength: 512,
            MinLength: 1
        },
        serializedName: "relationshipName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const relationshipName1 = {
    parameterPath: "relationshipName",
    mapper: {
        serializedName: "relationshipName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters4 = {
    parameterPath: "parameters",
    mapper: RelationshipLinkResourceFormatMapper
};
export const relationshipLinkName = {
    parameterPath: "relationshipLinkName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z][a-zA-Z0-9_]+$"),
            MaxLength: 512,
            MinLength: 1
        },
        serializedName: "relationshipLinkName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const relationshipLinkName1 = {
    parameterPath: "relationshipLinkName",
    mapper: {
        serializedName: "relationshipLinkName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters5 = {
    parameterPath: "parameters",
    mapper: AuthorizationPolicyResourceFormatMapper
};
export const authorizationPolicyName = {
    parameterPath: "authorizationPolicyName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[A-Za-z0-9]$|^[A-Za-z0-9][\\w-\\.]*[A-Za-z0-9]$"),
            MaxLength: 50,
            MinLength: 1
        },
        serializedName: "authorizationPolicyName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const authorizationPolicyName1 = {
    parameterPath: "authorizationPolicyName",
    mapper: {
        serializedName: "authorizationPolicyName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters6 = {
    parameterPath: "parameters",
    mapper: ConnectorResourceFormatMapper
};
export const connectorName = {
    parameterPath: "connectorName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z][a-zA-Z0-9_]+$"),
            MaxLength: 128,
            MinLength: 1
        },
        serializedName: "connectorName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const connectorName1 = {
    parameterPath: "connectorName",
    mapper: {
        serializedName: "connectorName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters7 = {
    parameterPath: "parameters",
    mapper: ConnectorMappingResourceFormatMapper
};
export const mappingName = {
    parameterPath: "mappingName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z][a-zA-Z0-9_]+$"),
            MaxLength: 128,
            MinLength: 1
        },
        serializedName: "mappingName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const mappingName1 = {
    parameterPath: "mappingName",
    mapper: {
        serializedName: "mappingName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters8 = {
    parameterPath: "parameters",
    mapper: KpiResourceFormatMapper
};
export const kpiName = {
    parameterPath: "kpiName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z][a-zA-Z0-9_]+$"),
            MaxLength: 512,
            MinLength: 1
        },
        serializedName: "kpiName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const kpiName1 = {
    parameterPath: "kpiName",
    mapper: {
        serializedName: "kpiName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const widgetTypeName = {
    parameterPath: "widgetTypeName",
    mapper: {
        serializedName: "widgetTypeName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const userId = {
    parameterPath: "userId",
    mapper: {
        serializedName: "userId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters9 = {
    parameterPath: "parameters",
    mapper: ViewResourceFormatMapper
};
export const viewName = {
    parameterPath: "viewName",
    mapper: {
        constraints: {
            MaxLength: 512,
            MinLength: 1
        },
        serializedName: "viewName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const viewName1 = {
    parameterPath: "viewName",
    mapper: {
        serializedName: "viewName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters10 = {
    parameterPath: "parameters",
    mapper: LinkResourceFormatMapper
};
export const linkName = {
    parameterPath: "linkName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z][a-zA-Z0-9_]+$"),
            MaxLength: 512,
            MinLength: 1
        },
        serializedName: "linkName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const linkName1 = {
    parameterPath: "linkName",
    mapper: {
        serializedName: "linkName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters11 = {
    parameterPath: "parameters",
    mapper: RoleAssignmentResourceFormatMapper
};
export const assignmentName = {
    parameterPath: "assignmentName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z][a-zA-Z0-9_]+$"),
            MaxLength: 128,
            MinLength: 1
        },
        serializedName: "assignmentName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const assignmentName1 = {
    parameterPath: "assignmentName",
    mapper: {
        serializedName: "assignmentName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters12 = {
    parameterPath: "parameters",
    mapper: GetImageUploadUrlInputMapper
};
export const parameters13 = {
    parameterPath: "parameters",
    mapper: PredictionResourceFormatMapper
};
export const predictionName = {
    parameterPath: "predictionName",
    mapper: {
        constraints: {
            MaxLength: 512,
            MinLength: 1
        },
        serializedName: "predictionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const predictionName1 = {
    parameterPath: "predictionName",
    mapper: {
        serializedName: "predictionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters14 = {
    parameterPath: "parameters",
    mapper: PredictionModelStatusMapper
};
//# sourceMappingURL=parameters.js.map