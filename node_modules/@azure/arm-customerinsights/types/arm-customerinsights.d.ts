import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { PollerLike } from '@azure/core-lro';
import { PollOperationState } from '@azure/core-lro';

/** The AssignmentPrincipal */
export declare interface AssignmentPrincipal {
    /** The principal id being assigned to. */
    principalId: string;
    /** The Type of the principal ID. */
    principalType: string;
    /** Other metadata for the principal. */
    principalMetadata?: {
        [propertyName: string]: string;
    };
}

/** Interface representing a AuthorizationPolicies. */
export declare interface AuthorizationPolicies {
    /**
     * Gets all the authorization policies in a specified hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param options The options parameters.
     */
    listByHub(resourceGroupName: string, hubName: string, options?: AuthorizationPoliciesListByHubOptionalParams): PagedAsyncIterableIterator<AuthorizationPolicyResourceFormat>;
    /**
     * Creates an authorization policy or updates an existing authorization policy.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param authorizationPolicyName The name of the policy.
     * @param parameters Parameters supplied to the CreateOrUpdate authorization policy operation.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, hubName: string, authorizationPolicyName: string, parameters: AuthorizationPolicyResourceFormat, options?: AuthorizationPoliciesCreateOrUpdateOptionalParams): Promise<AuthorizationPoliciesCreateOrUpdateResponse>;
    /**
     * Gets an authorization policy in the hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param authorizationPolicyName The name of the policy.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, hubName: string, authorizationPolicyName: string, options?: AuthorizationPoliciesGetOptionalParams): Promise<AuthorizationPoliciesGetResponse>;
    /**
     * Regenerates the primary policy key of the specified authorization policy.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param authorizationPolicyName The name of the policy.
     * @param options The options parameters.
     */
    regeneratePrimaryKey(resourceGroupName: string, hubName: string, authorizationPolicyName: string, options?: AuthorizationPoliciesRegeneratePrimaryKeyOptionalParams): Promise<AuthorizationPoliciesRegeneratePrimaryKeyResponse>;
    /**
     * Regenerates the secondary policy key of the specified authorization policy.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param authorizationPolicyName The name of the policy.
     * @param options The options parameters.
     */
    regenerateSecondaryKey(resourceGroupName: string, hubName: string, authorizationPolicyName: string, options?: AuthorizationPoliciesRegenerateSecondaryKeyOptionalParams): Promise<AuthorizationPoliciesRegenerateSecondaryKeyResponse>;
}

/** Optional parameters. */
export declare interface AuthorizationPoliciesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type AuthorizationPoliciesCreateOrUpdateResponse = AuthorizationPolicyResourceFormat;

/** Optional parameters. */
export declare interface AuthorizationPoliciesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type AuthorizationPoliciesGetResponse = AuthorizationPolicyResourceFormat;

/** Optional parameters. */
export declare interface AuthorizationPoliciesListByHubNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByHubNext operation. */
export declare type AuthorizationPoliciesListByHubNextResponse = AuthorizationPolicyListResult;

/** Optional parameters. */
export declare interface AuthorizationPoliciesListByHubOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByHub operation. */
export declare type AuthorizationPoliciesListByHubResponse = AuthorizationPolicyListResult;

/** Optional parameters. */
export declare interface AuthorizationPoliciesRegeneratePrimaryKeyOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the regeneratePrimaryKey operation. */
export declare type AuthorizationPoliciesRegeneratePrimaryKeyResponse = AuthorizationPolicy;

/** Optional parameters. */
export declare interface AuthorizationPoliciesRegenerateSecondaryKeyOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the regenerateSecondaryKey operation. */
export declare type AuthorizationPoliciesRegenerateSecondaryKeyResponse = AuthorizationPolicy;

/** The authorization policy. */
export declare interface AuthorizationPolicy {
    /**
     * Name of the policy.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly policyName?: string;
    /** The permissions associated with the policy. */
    permissions: PermissionTypes[];
    /** Primary key associated with the policy. */
    primaryKey?: string;
    /** Secondary key associated with the policy. */
    secondaryKey?: string;
}

/** The response of list authorization policy operation. */
export declare interface AuthorizationPolicyListResult {
    /** Results of the list operation. */
    value?: AuthorizationPolicyResourceFormat[];
    /** Link to the next set of results. */
    nextLink?: string;
}

/** The authorization policy resource format. */
export declare interface AuthorizationPolicyResourceFormat extends ProxyResource {
    /**
     * Name of the policy.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly policyName?: string;
    /** The permissions associated with the policy. */
    permissions?: PermissionTypes[];
    /** Primary key associated with the policy. */
    primaryKey?: string;
    /** Secondary key associated with the policy. */
    secondaryKey?: string;
}

/** The Azure Blob connector properties. */
export declare interface AzureBlobConnectorProperties {
    /** The connection KeyVault URL. */
    connectionKeyVaultUrl: string;
}

/** Defines values for CalculationWindowTypes. */
export declare type CalculationWindowTypes = "Lifetime" | "Hour" | "Day" | "Week" | "Month";

/** Definition of canonical profile. */
export declare interface CanonicalProfileDefinition {
    /** Canonical profile ID. */
    canonicalProfileId?: number;
    /** Properties of the canonical profile. */
    properties?: CanonicalProfileDefinitionPropertiesItem[];
}

/** The definition of a canonical profile property. */
export declare interface CanonicalProfileDefinitionPropertiesItem {
    /** Profile name. */
    profileName?: string;
    /** Property name of profile. */
    profilePropertyName?: string;
    /** The rank. */
    rank?: number;
    /** Type of canonical property value. */
    type?: CanonicalPropertyValueType;
    /** Value of the canonical property. */
    value?: string;
}

/**
 * Defines values for CanonicalPropertyValueType. \
 * {@link KnownCanonicalPropertyValueType} can be used interchangeably with CanonicalPropertyValueType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Numeric** \
 * **Categorical** \
 * **DerivedCategorical** \
 * **DerivedNumeric**
 */
export declare type CanonicalPropertyValueType = string;

/** Defines values for CardinalityTypes. */
export declare type CardinalityTypes = "OneToOne" | "OneToMany" | "ManyToMany";

/** Defines values for CompletionOperationTypes. */
export declare type CompletionOperationTypes = "DoNothing" | "DeleteFile" | "MoveFile";

/** The response of list connector operation. */
export declare interface ConnectorListResult {
    /** Results of the list operation. */
    value?: ConnectorResourceFormat[];
    /** Link to the next set of results. */
    nextLink?: string;
}

/** Connector mapping property availability. */
export declare interface ConnectorMappingAvailability {
    /** The frequency to update. */
    frequency?: FrequencyTypes;
    /** The interval of the given frequency to use. */
    interval: number;
}

/** The complete operation. */
export declare interface ConnectorMappingCompleteOperation {
    /** The type of completion operation. */
    completionOperationType?: CompletionOperationTypes;
    /** The destination folder where files will be moved to once the import is done. */
    destinationFolder?: string;
}

/** The error management. */
export declare interface ConnectorMappingErrorManagement {
    /** The type of error management to use for the mapping. */
    errorManagementType: ErrorManagementTypes;
    /** The error limit allowed while importing data. */
    errorLimit?: number;
}

/** Connector mapping property format. */
export declare interface ConnectorMappingFormat {
    /** The type mapping format. */
    formatType: "TextFormat";
    /** The character that signifies a break between columns. */
    columnDelimiter?: string;
    /** The oData language. */
    acceptLanguage?: string;
    /** Quote character, used to indicate enquoted fields. */
    quoteCharacter?: string;
    /** Escape character for quotes, can be the same as the quoteCharacter. */
    quoteEscapeCharacter?: string;
    /** Character separating array elements. */
    arraySeparator?: string;
}

/** The response of list connector mapping operation. */
export declare interface ConnectorMappingListResult {
    /** Results of the list operation. */
    value?: ConnectorMappingResourceFormat[];
    /** Link to the next set of results. */
    nextLink?: string;
}

/** The connector mapping properties. */
export declare interface ConnectorMappingProperties {
    /** The folder path for the mapping. */
    folderPath?: string;
    /** The file filter for the mapping. */
    fileFilter?: string;
    /** If the file contains a header or not. */
    hasHeader?: boolean;
    /** The error management setting for the mapping. */
    errorManagement: ConnectorMappingErrorManagement;
    /** The format of mapping property. */
    format: ConnectorMappingFormat;
    /** The availability of mapping property. */
    availability: ConnectorMappingAvailability;
    /** Ingestion mapping information at property level. */
    structure: ConnectorMappingStructure[];
    /** The operation after import is done. */
    completeOperation: ConnectorMappingCompleteOperation;
}

/** The connector mapping resource format. */
export declare interface ConnectorMappingResourceFormat extends ProxyResource {
    /**
     * The connector name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly connectorName?: string;
    /** Type of connector. */
    connectorType?: ConnectorTypes;
    /**
     * The created time.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly created?: Date;
    /**
     * The last modified time.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastModified?: Date;
    /** Defines which entity type the file should map to. */
    entityType?: EntityTypes;
    /** The mapping entity name. */
    entityTypeName?: string;
    /**
     * The connector mapping name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly connectorMappingName?: string;
    /** Display name for the connector mapping. */
    displayName?: string;
    /** The description of the connector mapping. */
    description?: string;
    /**
     * The DataFormat ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dataFormatId?: string;
    /** The properties of the mapping. */
    mappingProperties?: ConnectorMappingProperties;
    /**
     * The next run time based on customer's settings.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextRunTime?: Date;
    /**
     * The RunId.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly runId?: string;
    /**
     * State of connector mapping.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly state?: ConnectorMappingStates;
    /**
     * The hub name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
}

/** Interface representing a ConnectorMappings. */
export declare interface ConnectorMappings {
    /**
     * Gets all the connector mappings in the specified connector.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param connectorName The name of the connector.
     * @param options The options parameters.
     */
    listByConnector(resourceGroupName: string, hubName: string, connectorName: string, options?: ConnectorMappingsListByConnectorOptionalParams): PagedAsyncIterableIterator<ConnectorMappingResourceFormat>;
    /**
     * Creates a connector mapping or updates an existing connector mapping in the connector.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param connectorName The name of the connector.
     * @param mappingName The name of the connector mapping.
     * @param parameters Parameters supplied to the CreateOrUpdate Connector Mapping operation.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, hubName: string, connectorName: string, mappingName: string, parameters: ConnectorMappingResourceFormat, options?: ConnectorMappingsCreateOrUpdateOptionalParams): Promise<ConnectorMappingsCreateOrUpdateResponse>;
    /**
     * Gets a connector mapping in the connector.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param connectorName The name of the connector.
     * @param mappingName The name of the connector mapping.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, hubName: string, connectorName: string, mappingName: string, options?: ConnectorMappingsGetOptionalParams): Promise<ConnectorMappingsGetResponse>;
    /**
     * Deletes a connector mapping in the connector.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param connectorName The name of the connector.
     * @param mappingName The name of the connector mapping.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, hubName: string, connectorName: string, mappingName: string, options?: ConnectorMappingsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface ConnectorMappingsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type ConnectorMappingsCreateOrUpdateResponse = ConnectorMappingResourceFormat;

/** Optional parameters. */
export declare interface ConnectorMappingsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface ConnectorMappingsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ConnectorMappingsGetResponse = ConnectorMappingResourceFormat;

/** Optional parameters. */
export declare interface ConnectorMappingsListByConnectorNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByConnectorNext operation. */
export declare type ConnectorMappingsListByConnectorNextResponse = ConnectorMappingListResult;

/** Optional parameters. */
export declare interface ConnectorMappingsListByConnectorOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByConnector operation. */
export declare type ConnectorMappingsListByConnectorResponse = ConnectorMappingListResult;

/** Defines values for ConnectorMappingStates. */
export declare type ConnectorMappingStates = "Creating" | "Created" | "Failed" | "Ready" | "Running" | "Stopped" | "Expiring";

/** Connector mapping property structure. */
export declare interface ConnectorMappingStructure {
    /** The property name of the mapping entity. */
    propertyName: string;
    /** The column name of the import file. */
    columnName: string;
    /** Custom format specifier for input parsing. */
    customFormatSpecifier?: string;
    /** Indicates if the column is encrypted. */
    isEncrypted?: boolean;
}

/** The connector resource format. */
export declare interface ConnectorResourceFormat extends ProxyResource {
    /**
     * ID of the connector.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly connectorId?: number;
    /** Name of the connector. */
    connectorName?: string;
    /** Type of connector. */
    connectorType?: ConnectorTypes;
    /** Display name of the connector. */
    displayName?: string;
    /** Description of the connector. */
    description?: string;
    /** The connector properties. */
    connectorProperties?: {
        [propertyName: string]: Record<string, unknown>;
    };
    /**
     * The created time.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly created?: Date;
    /**
     * The last modified time.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastModified?: Date;
    /**
     * State of connector.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly state?: ConnectorStates;
    /**
     * The hub name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
    /** If this is an internal connector. */
    isInternal?: boolean;
}

/** Interface representing a Connectors. */
export declare interface Connectors {
    /**
     * Gets all the connectors in the specified hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param options The options parameters.
     */
    listByHub(resourceGroupName: string, hubName: string, options?: ConnectorsListByHubOptionalParams): PagedAsyncIterableIterator<ConnectorResourceFormat>;
    /**
     * Creates a connector or updates an existing connector in the hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param connectorName The name of the connector.
     * @param parameters Parameters supplied to the CreateOrUpdate Connector operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, hubName: string, connectorName: string, parameters: ConnectorResourceFormat, options?: ConnectorsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<ConnectorsCreateOrUpdateResponse>, ConnectorsCreateOrUpdateResponse>>;
    /**
     * Creates a connector or updates an existing connector in the hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param connectorName The name of the connector.
     * @param parameters Parameters supplied to the CreateOrUpdate Connector operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, hubName: string, connectorName: string, parameters: ConnectorResourceFormat, options?: ConnectorsCreateOrUpdateOptionalParams): Promise<ConnectorsCreateOrUpdateResponse>;
    /**
     * Gets a connector in the hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param connectorName The name of the connector.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, hubName: string, connectorName: string, options?: ConnectorsGetOptionalParams): Promise<ConnectorsGetResponse>;
    /**
     * Deletes a connector in the hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param connectorName The name of the connector.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, hubName: string, connectorName: string, options?: ConnectorsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes a connector in the hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param connectorName The name of the connector.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, hubName: string, connectorName: string, options?: ConnectorsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface ConnectorsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type ConnectorsCreateOrUpdateResponse = ConnectorResourceFormat;

/** Optional parameters. */
export declare interface ConnectorsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface ConnectorsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ConnectorsGetResponse = ConnectorResourceFormat;

/** Optional parameters. */
export declare interface ConnectorsListByHubNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByHubNext operation. */
export declare type ConnectorsListByHubNextResponse = ConnectorListResult;

/** Optional parameters. */
export declare interface ConnectorsListByHubOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByHub operation. */
export declare type ConnectorsListByHubResponse = ConnectorListResult;

/** Defines values for ConnectorStates. */
export declare type ConnectorStates = "Creating" | "Created" | "Ready" | "Expiring" | "Deleting" | "Failed";

/**
 * Defines values for ConnectorTypes. \
 * {@link KnownConnectorTypes} can be used interchangeably with ConnectorTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **CRM** \
 * **AzureBlob** \
 * **Salesforce** \
 * **ExchangeOnline** \
 * **Outbound**
 */
export declare type ConnectorTypes = string;

/** The CRM connector entities. */
export declare interface CrmConnectorEntities {
    /** The logical name. */
    logicalName: string;
    /** The display name. */
    displayName?: string;
    /** Indicating whether this is profile. */
    isProfile?: boolean;
}

/** The CRM connector properties. */
export declare interface CrmConnectorProperties {
    /** The connection string. */
    connectionString?: string;
    /** The organization ID. */
    organizationId: string;
    /** The organization URL. */
    organizationUrl: string;
    /** The entities like account, contact, opportunity. */
    entities: CrmConnectorEntities[];
    /** The access token. */
    accessToken?: string;
}

export declare class CustomerInsightsManagementClient extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the CustomerInsightsManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure
     *                       subscription. The subscription ID forms part of the URI for every service call.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: CustomerInsightsManagementClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    operations: Operations;
    hubs: Hubs;
    profiles: Profiles;
    interactions: Interactions;
    relationships: Relationships;
    relationshipLinks: RelationshipLinks;
    authorizationPolicies: AuthorizationPolicies;
    connectors: Connectors;
    connectorMappings: ConnectorMappings;
    kpi: Kpi;
    widgetTypes: WidgetTypes;
    views: Views;
    links: Links;
    roles: Roles;
    roleAssignments: RoleAssignments;
    images: Images;
    predictions: Predictions;
}

/** Optional parameters. */
export declare interface CustomerInsightsManagementClientOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** The data source precedence is a way to know the precedence of each data source. */
export declare interface DataSourcePrecedence {
    /** the precedence value. */
    precedence?: number;
    /**
     * The data source name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The data source type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dataSourceType?: DataSourceType;
    /**
     * The data source status.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: Status;
    /**
     * The data source ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: number;
    /**
     * The data source reference id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dataSourceReferenceId?: string;
}

/**
 * Defines values for DataSourceType. \
 * {@link KnownDataSourceType} can be used interchangeably with DataSourceType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Connector** \
 * **LinkInteraction** \
 * **SystemDefault**
 */
export declare type DataSourceType = string;

/** The enriching KPI definition. */
export declare interface EnrichingKpi extends KpiDefinition {
}

/** Defines values for EntityType. */
export declare type EntityType = "None" | "Profile" | "Interaction" | "Relationship";

/** Describes an entity. */
export declare interface EntityTypeDefinition extends MetadataDefinitionBase {
    /** The api entity set name. This becomes the odata entity set name for the entity Type being referred in this object. */
    apiEntitySetName?: string;
    /** Type of entity. */
    entityType?: EntityTypes;
    /** The properties of the Profile. */
    fields?: PropertyDefinition[];
    /** The instance count. */
    instancesCount?: number;
    /**
     * The last changed time for the type definition.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastChangedUtc?: Date;
    /**
     * Provisioning state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningStates;
    /** The schema org link. This helps ACI identify and suggest semantic models. */
    schemaItemTypeLink?: string;
    /**
     * The hub name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
    /** The timestamp property name. Represents the time when the interaction or profile update happened. */
    timestampFieldName?: string;
    /** The name of the entity. */
    typeName?: string;
}

/** Defines values for EntityTypes. */
export declare type EntityTypes = "None" | "Profile" | "Interaction" | "Relationship";

/** Defines values for ErrorManagementTypes. */
export declare type ErrorManagementTypes = "RejectAndContinue" | "StopImport" | "RejectUntilLimit";

/** Defines values for FrequencyTypes. */
export declare type FrequencyTypes = "Minute" | "Hour" | "Day" | "Week" | "Month";

/**
 * Given a result page from a pageable operation, returns a
 * continuation token that can be used to begin paging from
 * that point later.
 * @param page A result object from calling .byPage() on a paged operation.
 * @returns The continuation token that can be passed into byPage().
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/** Input type for getting image upload url. */
export declare interface GetImageUploadUrlInput {
    /** Type of entity. Can be Profile or Interaction. */
    entityType?: string;
    /** Name of the entity type. */
    entityTypeName?: string;
    /** Relative path of the image. */
    relativePath?: string;
}

/** Hub resource. */
export declare interface Hub extends Resource {
    /**
     * API endpoint URL of the hub.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly apiEndpoint?: string;
    /**
     * Web endpoint URL of the hub.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly webEndpoint?: string;
    /**
     * Provisioning state of the hub.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /** The bit flags for enabled hub features. Bit 0 is set to 1 indicates graph is enabled, or disabled if set to 0. Bit 1 is set to 1 indicates the hub is disabled, or enabled if set to 0. */
    tenantFeatures?: number;
    /** Billing settings of the hub. */
    hubBillingInfo?: HubBillingInfoFormat;
}

/** Hub billing info. */
export declare interface HubBillingInfoFormat {
    /** The sku name. */
    skuName?: string;
    /** The minimum number of units will be billed. One unit is 10,000 Profiles and 100,000 Interactions. */
    minUnits?: number;
    /** The maximum number of units can be used.  One unit is 10,000 Profiles and 100,000 Interactions. */
    maxUnits?: number;
}

/** Response of list hub operation. */
export declare interface HubListResult {
    /** Results of the list operation. */
    value?: Hub[];
    /** Link for next set of results. */
    nextLink?: string;
}

/** Interface representing a Hubs. */
export declare interface Hubs {
    /**
     * Gets all the hubs in a resource group.
     * @param resourceGroupName The name of the resource group.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: HubsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<Hub>;
    /**
     * Gets all hubs in the specified subscription.
     * @param options The options parameters.
     */
    list(options?: HubsListOptionalParams): PagedAsyncIterableIterator<Hub>;
    /**
     * Creates a hub, or updates an existing hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the Hub.
     * @param parameters Parameters supplied to the CreateOrUpdate Hub operation.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, hubName: string, parameters: Hub, options?: HubsCreateOrUpdateOptionalParams): Promise<HubsCreateOrUpdateResponse>;
    /**
     * Updates a Hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the Hub.
     * @param parameters Parameters supplied to the Update Hub operation.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, hubName: string, parameters: Hub, options?: HubsUpdateOptionalParams): Promise<HubsUpdateResponse>;
    /**
     * Deletes the specified hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, hubName: string, options?: HubsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes the specified hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, hubName: string, options?: HubsDeleteOptionalParams): Promise<void>;
    /**
     * Gets information about the specified hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, hubName: string, options?: HubsGetOptionalParams): Promise<HubsGetResponse>;
}

/** Optional parameters. */
export declare interface HubsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type HubsCreateOrUpdateResponse = Hub;

/** Optional parameters. */
export declare interface HubsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface HubsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type HubsGetResponse = Hub;

/** Optional parameters. */
export declare interface HubsListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type HubsListByResourceGroupNextResponse = HubListResult;

/** Optional parameters. */
export declare interface HubsListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type HubsListByResourceGroupResponse = HubListResult;

/** Optional parameters. */
export declare interface HubsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type HubsListNextResponse = HubListResult;

/** Optional parameters. */
export declare interface HubsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type HubsListResponse = HubListResult;

/** Optional parameters. */
export declare interface HubsUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type HubsUpdateResponse = Hub;

/** The image definition. */
export declare interface ImageDefinition {
    /** Whether image exists already. */
    imageExists?: boolean;
    /** Content URL for the image blob. */
    contentUrl?: string;
    /** Relative path of the image. */
    relativePath?: string;
}

/** Interface representing a Images. */
export declare interface Images {
    /**
     * Gets entity type (profile or interaction) image upload URL.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param parameters Parameters supplied to the GetUploadUrlForEntityType operation.
     * @param options The options parameters.
     */
    getUploadUrlForEntityType(resourceGroupName: string, hubName: string, parameters: GetImageUploadUrlInput, options?: ImagesGetUploadUrlForEntityTypeOptionalParams): Promise<ImagesGetUploadUrlForEntityTypeResponse>;
    /**
     * Gets data image upload URL.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param parameters Parameters supplied to the GetUploadUrlForData operation.
     * @param options The options parameters.
     */
    getUploadUrlForData(resourceGroupName: string, hubName: string, parameters: GetImageUploadUrlInput, options?: ImagesGetUploadUrlForDataOptionalParams): Promise<ImagesGetUploadUrlForDataResponse>;
}

/** Optional parameters. */
export declare interface ImagesGetUploadUrlForDataOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getUploadUrlForData operation. */
export declare type ImagesGetUploadUrlForDataResponse = ImageDefinition;

/** Optional parameters. */
export declare interface ImagesGetUploadUrlForEntityTypeOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getUploadUrlForEntityType operation. */
export declare type ImagesGetUploadUrlForEntityTypeResponse = ImageDefinition;

/** Defines values for InstanceOperationType. */
export declare type InstanceOperationType = "Upsert" | "Delete";

/** The response of list interaction operation. */
export declare interface InteractionListResult {
    /** Results of the list operation. */
    value?: InteractionResourceFormat[];
    /** Link to the next set of results. */
    nextLink?: string;
}

/** The interaction resource format. */
export declare interface InteractionResourceFormat extends ProxyResource {
    /** The attributes for the Type. */
    attributes?: {
        [propertyName: string]: string[];
    };
    /** Localized descriptions for the property. */
    description?: {
        [propertyName: string]: string;
    };
    /** Localized display names for the property. */
    displayName?: {
        [propertyName: string]: string;
    };
    /** Any custom localized attributes for the Type. */
    localizedAttributes?: {
        [propertyName: string]: {
            [propertyName: string]: string;
        };
    };
    /** Small Image associated with the Property or EntityType. */
    smallImage?: string;
    /** Medium Image associated with the Property or EntityType. */
    mediumImage?: string;
    /** Large Image associated with the Property or EntityType. */
    largeImage?: string;
    /** The api entity set name. This becomes the odata entity set name for the entity Type being referred in this object. */
    apiEntitySetName?: string;
    /** Type of entity. */
    entityType?: EntityTypes;
    /** The properties of the Profile. */
    fields?: PropertyDefinition[];
    /** The instance count. */
    instancesCount?: number;
    /**
     * The last changed time for the type definition.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastChangedUtc?: Date;
    /**
     * Provisioning state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningStates;
    /** The schema org link. This helps ACI identify and suggest semantic models. */
    schemaItemTypeLink?: string;
    /**
     * The hub name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
    /** The timestamp property name. Represents the time when the interaction or profile update happened. */
    timestampFieldName?: string;
    /** The name of the entity. */
    typeName?: string;
    /** The id property names. Properties which uniquely identify an interaction instance. */
    idPropertyNames?: string[];
    /** Profiles that participated in the interaction. */
    participantProfiles?: Participant[];
    /** The primary participant property name for an interaction ,This is used to logically represent the agent of the interaction, Specify the participant name here from ParticipantName. */
    primaryParticipantProfilePropertyName?: string;
    /**
     * This is specific to interactions modeled as activities. Data sources are used to determine where data is stored and also in precedence rules.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dataSourcePrecedenceRules?: DataSourcePrecedence[];
    /** An interaction can be tagged as an activity only during create. This enables the interaction to be editable and can enable merging of properties from multiple data sources based on precedence, which is defined at a link level. */
    isActivity?: boolean;
    /**
     * The data source name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly namePropertiesDefaultDataSourceName?: string;
    /**
     * The data source type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dataSourceType?: DataSourceType;
    /**
     * The data source status.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: Status;
    /**
     * The data source ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly idPropertiesDefaultDataSourceId?: number;
    /**
     * The data source reference id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dataSourceReferenceId?: string;
}

/** Interface representing a Interactions. */
export declare interface Interactions {
    /**
     * Gets all interactions in the hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param options The options parameters.
     */
    listByHub(resourceGroupName: string, hubName: string, options?: InteractionsListByHubOptionalParams): PagedAsyncIterableIterator<InteractionResourceFormat>;
    /**
     * Creates an interaction or updates an existing interaction within a hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param interactionName The name of the interaction.
     * @param parameters Parameters supplied to the CreateOrUpdate Interaction operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, hubName: string, interactionName: string, parameters: InteractionResourceFormat, options?: InteractionsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<InteractionsCreateOrUpdateResponse>, InteractionsCreateOrUpdateResponse>>;
    /**
     * Creates an interaction or updates an existing interaction within a hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param interactionName The name of the interaction.
     * @param parameters Parameters supplied to the CreateOrUpdate Interaction operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, hubName: string, interactionName: string, parameters: InteractionResourceFormat, options?: InteractionsCreateOrUpdateOptionalParams): Promise<InteractionsCreateOrUpdateResponse>;
    /**
     * Gets information about the specified interaction.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param interactionName The name of the interaction.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, hubName: string, interactionName: string, options?: InteractionsGetOptionalParams): Promise<InteractionsGetResponse>;
    /**
     * Suggests relationships to create relationship links.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param interactionName The name of the interaction.
     * @param options The options parameters.
     */
    suggestRelationshipLinks(resourceGroupName: string, hubName: string, interactionName: string, options?: InteractionsSuggestRelationshipLinksOptionalParams): Promise<InteractionsSuggestRelationshipLinksResponse>;
}

/** Optional parameters. */
export declare interface InteractionsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type InteractionsCreateOrUpdateResponse = InteractionResourceFormat;

/** Optional parameters. */
export declare interface InteractionsGetOptionalParams extends coreClient.OperationOptions {
    /** Locale of interaction to retrieve, default is en-us. */
    localeCode?: string;
}

/** Contains response data for the get operation. */
export declare type InteractionsGetResponse = InteractionResourceFormat;

/** Optional parameters. */
export declare interface InteractionsListByHubNextOptionalParams extends coreClient.OperationOptions {
    /** Locale of interaction to retrieve, default is en-us. */
    localeCode?: string;
}

/** Contains response data for the listByHubNext operation. */
export declare type InteractionsListByHubNextResponse = InteractionListResult;

/** Optional parameters. */
export declare interface InteractionsListByHubOptionalParams extends coreClient.OperationOptions {
    /** Locale of interaction to retrieve, default is en-us. */
    localeCode?: string;
}

/** Contains response data for the listByHub operation. */
export declare type InteractionsListByHubResponse = InteractionListResult;

/** Optional parameters. */
export declare interface InteractionsSuggestRelationshipLinksOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the suggestRelationshipLinks operation. */
export declare type InteractionsSuggestRelationshipLinksResponse = SuggestRelationshipLinksResponse;

/** The Interaction Type Definition */
export declare interface InteractionTypeDefinition extends EntityTypeDefinition {
    /** The id property names. Properties which uniquely identify an interaction instance. */
    idPropertyNames?: string[];
    /** Profiles that participated in the interaction. */
    participantProfiles?: Participant[];
    /** The primary participant property name for an interaction ,This is used to logically represent the agent of the interaction, Specify the participant name here from ParticipantName. */
    primaryParticipantProfilePropertyName?: string;
    /**
     * This is specific to interactions modeled as activities. Data sources are used to determine where data is stored and also in precedence rules.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dataSourcePrecedenceRules?: DataSourcePrecedence[];
    /** An interaction can be tagged as an activity only during create. This enables the interaction to be editable and can enable merging of properties from multiple data sources based on precedence, which is defined at a link level. */
    isActivity?: boolean;
    /**
     * The data source name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The data source type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dataSourceType?: DataSourceType;
    /**
     * The data source status.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: Status;
    /**
     * The data source ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: number;
    /**
     * The data source reference id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dataSourceReferenceId?: string;
}

/** Known values of {@link CanonicalPropertyValueType} that the service accepts. */
export declare enum KnownCanonicalPropertyValueType {
    /** Numeric */
    Numeric = "Numeric",
    /** Categorical */
    Categorical = "Categorical",
    /** DerivedCategorical */
    DerivedCategorical = "DerivedCategorical",
    /** DerivedNumeric */
    DerivedNumeric = "DerivedNumeric"
}

/** Known values of {@link ConnectorTypes} that the service accepts. */
export declare enum KnownConnectorTypes {
    /** None */
    None = "None",
    /** CRM */
    CRM = "CRM",
    /** AzureBlob */
    AzureBlob = "AzureBlob",
    /** Salesforce */
    Salesforce = "Salesforce",
    /** ExchangeOnline */
    ExchangeOnline = "ExchangeOnline",
    /** Outbound */
    Outbound = "Outbound"
}

/** Known values of {@link DataSourceType} that the service accepts. */
export declare enum KnownDataSourceType {
    /** Connector */
    Connector = "Connector",
    /** LinkInteraction */
    LinkInteraction = "LinkInteraction",
    /** SystemDefault */
    SystemDefault = "SystemDefault"
}

/** Known values of {@link PredictionModelLifeCycle} that the service accepts. */
export declare enum KnownPredictionModelLifeCycle {
    /** New */
    New = "New",
    /** Provisioning */
    Provisioning = "Provisioning",
    /** ProvisioningFailed */
    ProvisioningFailed = "ProvisioningFailed",
    /** PendingDiscovering */
    PendingDiscovering = "PendingDiscovering",
    /** Discovering */
    Discovering = "Discovering",
    /** PendingFeaturing */
    PendingFeaturing = "PendingFeaturing",
    /** Featuring */
    Featuring = "Featuring",
    /** FeaturingFailed */
    FeaturingFailed = "FeaturingFailed",
    /** PendingTraining */
    PendingTraining = "PendingTraining",
    /** Training */
    Training = "Training",
    /** TrainingFailed */
    TrainingFailed = "TrainingFailed",
    /** Evaluating */
    Evaluating = "Evaluating",
    /** EvaluatingFailed */
    EvaluatingFailed = "EvaluatingFailed",
    /** PendingModelConfirmation */
    PendingModelConfirmation = "PendingModelConfirmation",
    /** Active */
    Active = "Active",
    /** Deleted */
    Deleted = "Deleted",
    /** HumanIntervention */
    HumanIntervention = "HumanIntervention",
    /** Failed */
    Failed = "Failed"
}

/** Known values of {@link ProvisioningStates} that the service accepts. */
export declare enum KnownProvisioningStates {
    /** Provisioning */
    Provisioning = "Provisioning",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Expiring */
    Expiring = "Expiring",
    /** Deleting */
    Deleting = "Deleting",
    /** HumanIntervention */
    HumanIntervention = "HumanIntervention",
    /** Failed */
    Failed = "Failed"
}

/** Known values of {@link Status} that the service accepts. */
export declare enum KnownStatus {
    /** None */
    None = "None",
    /** Active */
    Active = "Active",
    /** Deleted */
    Deleted = "Deleted"
}

/** Interface representing a Kpi. */
export declare interface Kpi {
    /**
     * Gets all the KPIs in the specified hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param options The options parameters.
     */
    listByHub(resourceGroupName: string, hubName: string, options?: KpiListByHubOptionalParams): PagedAsyncIterableIterator<KpiResourceFormat>;
    /**
     * Creates a KPI or updates an existing KPI in the hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param kpiName The name of the KPI.
     * @param parameters Parameters supplied to the create/update KPI operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, hubName: string, kpiName: string, parameters: KpiResourceFormat, options?: KpiCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<KpiCreateOrUpdateResponse>, KpiCreateOrUpdateResponse>>;
    /**
     * Creates a KPI or updates an existing KPI in the hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param kpiName The name of the KPI.
     * @param parameters Parameters supplied to the create/update KPI operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, hubName: string, kpiName: string, parameters: KpiResourceFormat, options?: KpiCreateOrUpdateOptionalParams): Promise<KpiCreateOrUpdateResponse>;
    /**
     * Gets a KPI in the hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param kpiName The name of the KPI.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, hubName: string, kpiName: string, options?: KpiGetOptionalParams): Promise<KpiGetResponse>;
    /**
     * Deletes a KPI in the hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param kpiName The name of the KPI.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, hubName: string, kpiName: string, options?: KpiDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes a KPI in the hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param kpiName The name of the KPI.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, hubName: string, kpiName: string, options?: KpiDeleteOptionalParams): Promise<void>;
    /**
     * Reprocesses the Kpi values of the specified KPI.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param kpiName The name of the KPI.
     * @param options The options parameters.
     */
    reprocess(resourceGroupName: string, hubName: string, kpiName: string, options?: KpiReprocessOptionalParams): Promise<void>;
}

/** The KPI alias. */
export declare interface KpiAlias {
    /** KPI alias name. */
    aliasName: string;
    /** The expression. */
    expression: string;
}

/** Optional parameters. */
export declare interface KpiCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type KpiCreateOrUpdateResponse = KpiResourceFormat;

/** Defines the KPI Threshold limits. */
export declare interface KpiDefinition {
    /** The mapping entity type. */
    entityType: EntityTypes;
    /** The mapping entity name. */
    entityTypeName: string;
    /**
     * The hub name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
    /**
     * The KPI name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly kpiName?: string;
    /** Localized display name for the KPI. */
    displayName?: {
        [propertyName: string]: string;
    };
    /** Localized description for the KPI. */
    description?: {
        [propertyName: string]: string;
    };
    /** The calculation window. */
    calculationWindow: CalculationWindowTypes;
    /** Name of calculation window field. */
    calculationWindowFieldName?: string;
    /** The computation function for the KPI. */
    function: KpiFunctions;
    /** The computation expression for the KPI. */
    expression: string;
    /** The unit of measurement for the KPI. */
    unit?: string;
    /** The filter expression for the KPI. */
    filter?: string;
    /** the group by properties for the KPI. */
    groupBy?: string[];
    /**
     * The KPI GroupByMetadata.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly groupByMetadata?: KpiGroupByMetadata[];
    /**
     * The participant profiles.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly participantProfilesMetadata?: KpiParticipantProfilesMetadata[];
    /**
     * Provisioning state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningStates;
    /** The KPI thresholds. */
    thresHolds?: KpiThresholds;
    /** The aliases. */
    aliases?: KpiAlias[];
    /** The KPI extracts. */
    extracts?: KpiExtract[];
}

/** Optional parameters. */
export declare interface KpiDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** The KPI extract. */
export declare interface KpiExtract {
    /** KPI extract name. */
    extractName: string;
    /** The expression. */
    expression: string;
}

/** Defines values for KpiFunctions. */
export declare type KpiFunctions = "Sum" | "Avg" | "Min" | "Max" | "Last" | "Count" | "None" | "CountDistinct";

/** Optional parameters. */
export declare interface KpiGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type KpiGetResponse = KpiResourceFormat;

/** The KPI GroupBy field metadata. */
export declare interface KpiGroupByMetadata {
    /** The display name. */
    displayName?: {
        [propertyName: string]: string;
    };
    /** The name of the field. */
    fieldName?: string;
    /** The type of the field. */
    fieldType?: string;
}

/** Optional parameters. */
export declare interface KpiListByHubNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByHubNext operation. */
export declare type KpiListByHubNextResponse = KpiListResult;

/** Optional parameters. */
export declare interface KpiListByHubOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByHub operation. */
export declare type KpiListByHubResponse = KpiListResult;

/** The response of list KPI operation. */
export declare interface KpiListResult {
    /** Results of the list operation. */
    value?: KpiResourceFormat[];
    /** Link to the next set of results. */
    nextLink?: string;
}

/** The KPI participant profile metadata. */
export declare interface KpiParticipantProfilesMetadata {
    /** Name of the type. */
    typeName: string;
}

/** Optional parameters. */
export declare interface KpiReprocessOptionalParams extends coreClient.OperationOptions {
}

/** The KPI resource format. */
export declare interface KpiResourceFormat extends ProxyResource {
    /** The mapping entity type. */
    entityType?: EntityTypes;
    /** The mapping entity name. */
    entityTypeName?: string;
    /**
     * The hub name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
    /**
     * The KPI name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly kpiName?: string;
    /** Localized display name for the KPI. */
    displayName?: {
        [propertyName: string]: string;
    };
    /** Localized description for the KPI. */
    description?: {
        [propertyName: string]: string;
    };
    /** The calculation window. */
    calculationWindow?: CalculationWindowTypes;
    /** Name of calculation window field. */
    calculationWindowFieldName?: string;
    /** The computation function for the KPI. */
    function?: KpiFunctions;
    /** The computation expression for the KPI. */
    expression?: string;
    /** The unit of measurement for the KPI. */
    unit?: string;
    /** The filter expression for the KPI. */
    filter?: string;
    /** the group by properties for the KPI. */
    groupBy?: string[];
    /**
     * The KPI GroupByMetadata.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly groupByMetadata?: KpiGroupByMetadata[];
    /**
     * The participant profiles.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly participantProfilesMetadata?: KpiParticipantProfilesMetadata[];
    /**
     * Provisioning state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningStates;
    /** The KPI thresholds. */
    thresHolds?: KpiThresholds;
    /** The aliases. */
    aliases?: KpiAlias[];
    /** The KPI extracts. */
    extracts?: KpiExtract[];
}

/** Defines the KPI Threshold limits. */
export declare interface KpiThresholds {
    /** The lower threshold limit. */
    lowerLimit: number;
    /** The upper threshold limit. */
    upperLimit: number;
    /** Whether or not the KPI is an increasing KPI. */
    increasingKpi: boolean;
}

/** The response of list link operation. */
export declare interface LinkListResult {
    /** Results of the list operation. */
    value?: LinkResourceFormat[];
    /** Link to the next set of results. */
    nextLink?: string;
}

/** The link resource format. */
export declare interface LinkResourceFormat extends ProxyResource {
    /**
     * The hub name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
    /**
     * The link name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly linkName?: string;
    /** Type of source entity. */
    sourceEntityType?: EntityType;
    /** Type of target entity. */
    targetEntityType?: EntityType;
    /** Name of the source Entity Type. */
    sourceEntityTypeName?: string;
    /** Name of the target Entity Type. */
    targetEntityTypeName?: string;
    /** Localized display name for the Link. */
    displayName?: {
        [propertyName: string]: string;
    };
    /** Localized descriptions for the Link. */
    description?: {
        [propertyName: string]: string;
    };
    /** The set of properties mappings between the source and target Types. */
    mappings?: TypePropertiesMapping[];
    /** The properties that represent the participating profile. */
    participantPropertyReferences?: ParticipantPropertyReference[];
    /**
     * Provisioning state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningStates;
    /** Indicating whether the link is reference only link. This flag is ignored if the Mappings are defined. If the mappings are not defined and it is set to true, links processing will not create or update profiles. */
    referenceOnly?: boolean;
    /** Determines whether this link is supposed to create or delete instances if Link is NOT Reference Only. */
    operationType?: InstanceOperationType;
}

/** Interface representing a Links. */
export declare interface Links {
    /**
     * Gets all the links in the specified hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param options The options parameters.
     */
    listByHub(resourceGroupName: string, hubName: string, options?: LinksListByHubOptionalParams): PagedAsyncIterableIterator<LinkResourceFormat>;
    /**
     * Creates a link or updates an existing link in the hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param linkName The name of the link.
     * @param parameters Parameters supplied to the CreateOrUpdate Link operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, hubName: string, linkName: string, parameters: LinkResourceFormat, options?: LinksCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<LinksCreateOrUpdateResponse>, LinksCreateOrUpdateResponse>>;
    /**
     * Creates a link or updates an existing link in the hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param linkName The name of the link.
     * @param parameters Parameters supplied to the CreateOrUpdate Link operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, hubName: string, linkName: string, parameters: LinkResourceFormat, options?: LinksCreateOrUpdateOptionalParams): Promise<LinksCreateOrUpdateResponse>;
    /**
     * Gets a link in the hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param linkName The name of the link.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, hubName: string, linkName: string, options?: LinksGetOptionalParams): Promise<LinksGetResponse>;
    /**
     * Deletes a link in the hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param linkName The name of the link.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, hubName: string, linkName: string, options?: LinksDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface LinksCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type LinksCreateOrUpdateResponse = LinkResourceFormat;

/** Optional parameters. */
export declare interface LinksDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface LinksGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type LinksGetResponse = LinkResourceFormat;

/** Optional parameters. */
export declare interface LinksListByHubNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByHubNext operation. */
export declare type LinksListByHubNextResponse = LinkListResult;

/** Optional parameters. */
export declare interface LinksListByHubOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByHub operation. */
export declare type LinksListByHubResponse = LinkListResult;

/** Defines values for LinkTypes. */
export declare type LinkTypes = "UpdateAlways" | "CopyIfNull";

/** The Metadata definition base. */
export declare interface MetadataDefinitionBase {
    /** The attributes for the Type. */
    attributes?: {
        [propertyName: string]: string[];
    };
    /** Localized descriptions for the property. */
    description?: {
        [propertyName: string]: string;
    };
    /** Localized display names for the property. */
    displayName?: {
        [propertyName: string]: string;
    };
    /** Any custom localized attributes for the Type. */
    localizedAttributes?: {
        [propertyName: string]: {
            [propertyName: string]: string;
        };
    };
    /** Small Image associated with the Property or EntityType. */
    smallImage?: string;
    /** Medium Image associated with the Property or EntityType. */
    mediumImage?: string;
    /** Large Image associated with the Property or EntityType. */
    largeImage?: string;
}

/** A Customer Insights REST API operation */
export declare interface Operation {
    /**
     * Operation name: {provider}/{resource}/{operation}
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /** The object that represents the operation. */
    display?: OperationDisplay;
}

/** The object that represents the operation. */
export declare interface OperationDisplay {
    /**
     * Service provider: Microsoft.CustomerInsights
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provider?: string;
    /**
     * Resource on which the operation is performed: Invoice, etc.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resource?: string;
    /**
     * Operation type: Read, write, delete, etc.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly operation?: string;
}

/** Result of the request to list Customer Insights operations. It contains a list of operations and a URL link to get the next set of results. */
export declare interface OperationListResult {
    /**
     * List of Customer Insights operations supported by the Microsoft.CustomerInsights resource provider.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: Operation[];
    /**
     * URL to get the next set of operation list results if there are any.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a Operations. */
export declare interface Operations {
    /**
     * Lists all of the available Customer Insights REST API operations.
     * @param options The options parameters.
     */
    list(options?: OperationsListOptionalParams): PagedAsyncIterableIterator<Operation>;
}

/** Optional parameters. */
export declare interface OperationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export declare interface OperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OperationsListResponse = OperationListResult;

/** Describes a profile type participating in an interaction. */
export declare interface Participant {
    /** Profile type name. */
    profileTypeName: string;
    /** The property references. */
    participantPropertyReferences: ParticipantPropertyReference[];
    /** Participant name. */
    participantName: string;
    /** Localized display name. */
    displayName?: {
        [propertyName: string]: string;
    };
    /** Localized descriptions. */
    description?: {
        [propertyName: string]: string;
    };
    /** The role that the participant is playing in the interaction. */
    role?: string;
}

/** The participant profile property reference. */
export declare interface ParticipantProfilePropertyReference {
    /** The source interaction property that maps to the target profile property. */
    interactionPropertyName: string;
    /** The target profile property that maps to the source interaction property. */
    profilePropertyName: string;
}

/** The participant property reference. */
export declare interface ParticipantPropertyReference {
    /** The source property that maps to the target property. */
    sourcePropertyName: string;
    /** The target property that maps to the source property. */
    targetPropertyName: string;
}

/** Defines values for PermissionTypes. */
export declare type PermissionTypes = "Read" | "Write" | "Manage";

/** The definition of the prediction distribution. */
export declare interface PredictionDistributionDefinition {
    /** Total positive in the distribution. */
    totalPositives?: number;
    /** Total negatives in the distribution. */
    totalNegatives?: number;
    /** Distributions of the prediction. */
    distributions?: PredictionDistributionDefinitionDistributionsItem[];
}

/** The definition of a prediction distribution. */
export declare interface PredictionDistributionDefinitionDistributionsItem {
    /** Score threshold. */
    scoreThreshold?: number;
    /** Number of positives. */
    positives?: number;
    /** Number of negatives. */
    negatives?: number;
    /** Number of positives above threshold. */
    positivesAboveThreshold?: number;
    /** Number of negatives above threshold. */
    negativesAboveThreshold?: number;
}

/** The definition of a prediction grade. */
export declare interface PredictionGradesItem {
    /** Name of the grade. */
    gradeName?: string;
    /** Minimum score threshold. */
    minScoreThreshold?: number;
    /** Maximum score threshold. */
    maxScoreThreshold?: number;
}

/** The response of list predictions operation. */
export declare interface PredictionListResult {
    /** Results of the list operation. */
    value?: PredictionResourceFormat[];
    /** Link to the next set of results. */
    nextLink?: string;
}

/** Definition of the link mapping of prediction. */
export declare interface PredictionMappings {
    /** The score of the link mapping. */
    score: string;
    /** The grade of the link mapping. */
    grade: string;
    /** The reason of the link mapping. */
    reason: string;
}

/**
 * Defines values for PredictionModelLifeCycle. \
 * {@link KnownPredictionModelLifeCycle} can be used interchangeably with PredictionModelLifeCycle,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **New** \
 * **Provisioning** \
 * **ProvisioningFailed** \
 * **PendingDiscovering** \
 * **Discovering** \
 * **PendingFeaturing** \
 * **Featuring** \
 * **FeaturingFailed** \
 * **PendingTraining** \
 * **Training** \
 * **TrainingFailed** \
 * **Evaluating** \
 * **EvaluatingFailed** \
 * **PendingModelConfirmation** \
 * **Active** \
 * **Deleted** \
 * **HumanIntervention** \
 * **Failed**
 */
export declare type PredictionModelLifeCycle = string;

/** The prediction model status. */
export declare interface PredictionModelStatus {
    /**
     * The hub name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
    /**
     * The prediction name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly predictionName?: string;
    /**
     * The prediction GUID ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly predictionGuidId?: string;
    /** Prediction model life cycle.  When prediction is in PendingModelConfirmation status, it is allowed to update the status to PendingFeaturing or Active through API. */
    status: PredictionModelLifeCycle;
    /**
     * The model status message.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
    /**
     * Count of the training set.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly trainingSetCount?: number;
    /**
     * Count of the test set.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly testSetCount?: number;
    /**
     * Count of the validation set.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly validationSetCount?: number;
    /**
     * The training accuracy.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly trainingAccuracy?: number;
    /**
     * The signals used.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly signalsUsed?: number;
    /**
     * Version of the model.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly modelVersion?: string;
}

/** The prediction resource format. */
export declare interface PredictionResourceFormat extends ProxyResource {
    /** Description of the prediction. */
    description?: {
        [propertyName: string]: string;
    };
    /** Display name of the prediction. */
    displayName?: {
        [propertyName: string]: string;
    };
    /** Interaction types involved in the prediction. */
    involvedInteractionTypes?: string[];
    /** KPI types involved in the prediction. */
    involvedKpiTypes?: string[];
    /** Relationships involved in the prediction. */
    involvedRelationships?: string[];
    /** Negative outcome expression. */
    negativeOutcomeExpression?: string;
    /** Positive outcome expression. */
    positiveOutcomeExpression?: string;
    /** Primary profile type. */
    primaryProfileType?: string;
    /**
     * Provisioning state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningStates;
    /** Name of the prediction. */
    predictionName?: string;
    /** Scope expression. */
    scopeExpression?: string;
    /**
     * The hub name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
    /** Whether do auto analyze. */
    autoAnalyze?: boolean;
    /** Definition of the link mapping of prediction. */
    mappings?: PredictionMappings;
    /** Score label. */
    scoreLabel?: string;
    /** The prediction grades. */
    grades?: PredictionGradesItem[];
    /**
     * System generated entities.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemGeneratedEntities?: PredictionSystemGeneratedEntities;
}

/** Interface representing a Predictions. */
export declare interface Predictions {
    /**
     * Gets all the predictions in the specified hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param options The options parameters.
     */
    listByHub(resourceGroupName: string, hubName: string, options?: PredictionsListByHubOptionalParams): PagedAsyncIterableIterator<PredictionResourceFormat>;
    /**
     * Creates a Prediction or updates an existing Prediction in the hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param predictionName The name of the Prediction.
     * @param parameters Parameters supplied to the create/update Prediction operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, hubName: string, predictionName: string, parameters: PredictionResourceFormat, options?: PredictionsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<PredictionsCreateOrUpdateResponse>, PredictionsCreateOrUpdateResponse>>;
    /**
     * Creates a Prediction or updates an existing Prediction in the hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param predictionName The name of the Prediction.
     * @param parameters Parameters supplied to the create/update Prediction operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, hubName: string, predictionName: string, parameters: PredictionResourceFormat, options?: PredictionsCreateOrUpdateOptionalParams): Promise<PredictionsCreateOrUpdateResponse>;
    /**
     * Gets a Prediction in the hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param predictionName The name of the Prediction.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, hubName: string, predictionName: string, options?: PredictionsGetOptionalParams): Promise<PredictionsGetResponse>;
    /**
     * Deletes a Prediction in the hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param predictionName The name of the Prediction.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, hubName: string, predictionName: string, options?: PredictionsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes a Prediction in the hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param predictionName The name of the Prediction.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, hubName: string, predictionName: string, options?: PredictionsDeleteOptionalParams): Promise<void>;
    /**
     * Gets training results.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param predictionName The name of the Prediction.
     * @param options The options parameters.
     */
    getTrainingResults(resourceGroupName: string, hubName: string, predictionName: string, options?: PredictionsGetTrainingResultsOptionalParams): Promise<PredictionsGetTrainingResultsResponse>;
    /**
     * Gets model status of the prediction.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param predictionName The name of the Prediction.
     * @param options The options parameters.
     */
    getModelStatus(resourceGroupName: string, hubName: string, predictionName: string, options?: PredictionsGetModelStatusOptionalParams): Promise<PredictionsGetModelStatusResponse>;
    /**
     * Creates or updates the model status of prediction.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param predictionName The name of the Prediction.
     * @param parameters Parameters supplied to the create/update prediction model status operation.
     * @param options The options parameters.
     */
    modelStatus(resourceGroupName: string, hubName: string, predictionName: string, parameters: PredictionModelStatus, options?: PredictionsModelStatusOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface PredictionsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type PredictionsCreateOrUpdateResponse = PredictionResourceFormat;

/** Optional parameters. */
export declare interface PredictionsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface PredictionsGetModelStatusOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getModelStatus operation. */
export declare type PredictionsGetModelStatusResponse = PredictionModelStatus;

/** Optional parameters. */
export declare interface PredictionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type PredictionsGetResponse = PredictionResourceFormat;

/** Optional parameters. */
export declare interface PredictionsGetTrainingResultsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getTrainingResults operation. */
export declare type PredictionsGetTrainingResultsResponse = PredictionTrainingResults;

/** Optional parameters. */
export declare interface PredictionsListByHubNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByHubNext operation. */
export declare type PredictionsListByHubNextResponse = PredictionListResult;

/** Optional parameters. */
export declare interface PredictionsListByHubOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByHub operation. */
export declare type PredictionsListByHubResponse = PredictionListResult;

/** Optional parameters. */
export declare interface PredictionsModelStatusOptionalParams extends coreClient.OperationOptions {
}

/** System generated entities. */
export declare interface PredictionSystemGeneratedEntities {
    /** Generated interaction types. */
    generatedInteractionTypes?: string[];
    /** Generated links. */
    generatedLinks?: string[];
    /** Generated KPIs. */
    generatedKpis?: {
        [propertyName: string]: string;
    };
}

/** The training results of the prediction. */
export declare interface PredictionTrainingResults {
    /**
     * The hub name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
    /**
     * Score name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly scoreName?: string;
    /**
     * Prediction distribution.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly predictionDistribution?: PredictionDistributionDefinition;
    /**
     * Canonical profiles.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly canonicalProfiles?: CanonicalProfileDefinition[];
    /**
     * Instance count of the primary profile.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly primaryProfileInstanceCount?: number;
}

/** Valid enum values in case of an enum property. */
export declare interface ProfileEnumValidValuesFormat {
    /** The integer value of the enum member. */
    value?: number;
    /** Localized names of the enum member. */
    localizedValueNames?: {
        [propertyName: string]: string;
    };
}

/** The response of list profile operation. */
export declare interface ProfileListResult {
    /** Results of the list operation. */
    value?: ProfileResourceFormat[];
    /** Link to the next set of results. */
    nextLink?: string;
}

/** The profile resource format. */
export declare interface ProfileResourceFormat extends ProxyResource {
    /** The attributes for the Type. */
    attributes?: {
        [propertyName: string]: string[];
    };
    /** Localized descriptions for the property. */
    description?: {
        [propertyName: string]: string;
    };
    /** Localized display names for the property. */
    displayName?: {
        [propertyName: string]: string;
    };
    /** Any custom localized attributes for the Type. */
    localizedAttributes?: {
        [propertyName: string]: {
            [propertyName: string]: string;
        };
    };
    /** Small Image associated with the Property or EntityType. */
    smallImage?: string;
    /** Medium Image associated with the Property or EntityType. */
    mediumImage?: string;
    /** Large Image associated with the Property or EntityType. */
    largeImage?: string;
    /** The api entity set name. This becomes the odata entity set name for the entity Type being referred in this object. */
    apiEntitySetName?: string;
    /** Type of entity. */
    entityType?: EntityTypes;
    /** The properties of the Profile. */
    fields?: PropertyDefinition[];
    /** The instance count. */
    instancesCount?: number;
    /**
     * The last changed time for the type definition.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastChangedUtc?: Date;
    /**
     * Provisioning state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningStates;
    /** The schema org link. This helps ACI identify and suggest semantic models. */
    schemaItemTypeLink?: string;
    /**
     * The hub name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
    /** The timestamp property name. Represents the time when the interaction or profile update happened. */
    timestampFieldName?: string;
    /** The name of the entity. */
    typeName?: string;
    /** The strong IDs. */
    strongIds?: StrongId[];
}

/** Interface representing a Profiles. */
export declare interface Profiles {
    /**
     * Gets all profile in the hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param options The options parameters.
     */
    listByHub(resourceGroupName: string, hubName: string, options?: ProfilesListByHubOptionalParams): PagedAsyncIterableIterator<ProfileResourceFormat>;
    /**
     * Creates a profile within a Hub, or updates an existing profile.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param profileName The name of the profile.
     * @param parameters Parameters supplied to the create/delete Profile type operation
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, hubName: string, profileName: string, parameters: ProfileResourceFormat, options?: ProfilesCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<ProfilesCreateOrUpdateResponse>, ProfilesCreateOrUpdateResponse>>;
    /**
     * Creates a profile within a Hub, or updates an existing profile.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param profileName The name of the profile.
     * @param parameters Parameters supplied to the create/delete Profile type operation
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, hubName: string, profileName: string, parameters: ProfileResourceFormat, options?: ProfilesCreateOrUpdateOptionalParams): Promise<ProfilesCreateOrUpdateResponse>;
    /**
     * Gets information about the specified profile.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param profileName The name of the profile.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, hubName: string, profileName: string, options?: ProfilesGetOptionalParams): Promise<ProfilesGetResponse>;
    /**
     * Deletes a profile within a hub
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param profileName The name of the profile.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, hubName: string, profileName: string, options?: ProfilesDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes a profile within a hub
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param profileName The name of the profile.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, hubName: string, profileName: string, options?: ProfilesDeleteOptionalParams): Promise<void>;
    /**
     * Gets the KPIs that enrich the profile Type identified by the supplied name. Enrichment happens
     * through participants of the Interaction on an Interaction KPI and through Relationships for Profile
     * KPIs.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param profileName The name of the profile.
     * @param options The options parameters.
     */
    getEnrichingKpis(resourceGroupName: string, hubName: string, profileName: string, options?: ProfilesGetEnrichingKpisOptionalParams): Promise<ProfilesGetEnrichingKpisResponse>;
}

/** Optional parameters. */
export declare interface ProfilesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type ProfilesCreateOrUpdateResponse = ProfileResourceFormat;

/** Optional parameters. */
export declare interface ProfilesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Locale of profile to retrieve, default is en-us. */
    localeCode?: string;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface ProfilesGetEnrichingKpisOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getEnrichingKpis operation. */
export declare type ProfilesGetEnrichingKpisResponse = KpiDefinition[];

/** Optional parameters. */
export declare interface ProfilesGetOptionalParams extends coreClient.OperationOptions {
    /** Locale of profile to retrieve, default is en-us. */
    localeCode?: string;
}

/** Contains response data for the get operation. */
export declare type ProfilesGetResponse = ProfileResourceFormat;

/** Optional parameters. */
export declare interface ProfilesListByHubNextOptionalParams extends coreClient.OperationOptions {
    /** Locale of profile to retrieve, default is en-us. */
    localeCode?: string;
}

/** Contains response data for the listByHubNext operation. */
export declare type ProfilesListByHubNextResponse = ProfileListResult;

/** Optional parameters. */
export declare interface ProfilesListByHubOptionalParams extends coreClient.OperationOptions {
    /** Locale of profile to retrieve, default is en-us. */
    localeCode?: string;
}

/** Contains response data for the listByHub operation. */
export declare type ProfilesListByHubResponse = ProfileListResult;

/** The profile type definition. */
export declare interface ProfileTypeDefinition extends EntityTypeDefinition {
    /** The strong IDs. */
    strongIds?: StrongId[];
}

/** Property definition. */
export declare interface PropertyDefinition {
    /** Array value separator for properties with isArray set. */
    arrayValueSeparator?: string;
    /** Describes valid values for an enum property. */
    enumValidValues?: ProfileEnumValidValuesFormat[];
    /** Name of the property. */
    fieldName: string;
    /** Type of the property. */
    fieldType: string;
    /** Indicates if the property is actually an array of the fieldType above on the data api. */
    isArray?: boolean;
    /** Indicates if the property is an enum. */
    isEnum?: boolean;
    /** Indicates if the property is an flag enum. */
    isFlagEnum?: boolean;
    /** Whether the property is an Image. */
    isImage?: boolean;
    /** Whether the property is a localized string. */
    isLocalizedString?: boolean;
    /** Whether the property is a name or a part of name. */
    isName?: boolean;
    /** Whether property value is required on instances, IsRequired field only for Interaction. Profile Instance will not check for required field. */
    isRequired?: boolean;
    /** The ID associated with the property. */
    propertyId?: string;
    /** URL encoded schema.org item prop link for the property. */
    schemaItemPropLink?: string;
    /** Max length of string. Used only if type is string. */
    maxLength?: number;
    /** Whether property is available in graph or not. */
    isAvailableInGraph?: boolean;
    /**
     * This is specific to interactions modeled as activities. Data sources are used to determine where data is stored and also in precedence rules.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dataSourcePrecedenceRules?: DataSourcePrecedence[];
}

/**
 * Defines values for ProvisioningStates. \
 * {@link KnownProvisioningStates} can be used interchangeably with ProvisioningStates,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Provisioning** \
 * **Succeeded** \
 * **Expiring** \
 * **Deleting** \
 * **HumanIntervention** \
 * **Failed**
 */
export declare type ProvisioningStates = string;

/** Common properties of proxy resource. */
export declare interface ProxyResource {
    /**
     * Resource ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Resource name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Resource type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
}

/** The fields mapping for Relationships. */
export declare interface RelationshipLinkFieldMapping {
    /** The field name on the Interaction Type. */
    interactionFieldName: string;
    /** Link type. */
    linkType?: LinkTypes;
    /** The field name on the Relationship metadata. */
    relationshipFieldName: string;
}

/** The response of list relationship link operation. */
export declare interface RelationshipLinkListResult {
    /** Results of the list operation. */
    value?: RelationshipLinkResourceFormat[];
    /** Link to the next set of results. */
    nextLink?: string;
}

/** The relationship link resource format. */
export declare interface RelationshipLinkResourceFormat extends ProxyResource {
    /** Localized display name for the Relationship Link. */
    displayName?: {
        [propertyName: string]: string;
    };
    /** Localized descriptions for the Relationship Link. */
    description?: {
        [propertyName: string]: string;
    };
    /** The InteractionType associated with the Relationship Link. */
    interactionType?: string;
    /**
     * The name of the Relationship Link.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly linkName?: string;
    /** The mappings between Interaction and Relationship fields. */
    mappings?: RelationshipLinkFieldMapping[];
    /** The property references for the Profile of the Relationship. */
    profilePropertyReferences?: ParticipantProfilePropertyReference[];
    /**
     * Provisioning state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningStates;
    /** The property references for the Related Profile of the Relationship. */
    relatedProfilePropertyReferences?: ParticipantProfilePropertyReference[];
    /** The Relationship associated with the Link. */
    relationshipName?: string;
    /**
     * The relationship guid id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly relationshipGuidId?: string;
    /**
     * The hub name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
}

/** Interface representing a RelationshipLinks. */
export declare interface RelationshipLinks {
    /**
     * Gets all relationship links in the hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param options The options parameters.
     */
    listByHub(resourceGroupName: string, hubName: string, options?: RelationshipLinksListByHubOptionalParams): PagedAsyncIterableIterator<RelationshipLinkResourceFormat>;
    /**
     * Creates a relationship link or updates an existing relationship link within a hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param relationshipLinkName The name of the relationship link.
     * @param parameters Parameters supplied to the CreateOrUpdate relationship link operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, hubName: string, relationshipLinkName: string, parameters: RelationshipLinkResourceFormat, options?: RelationshipLinksCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<RelationshipLinksCreateOrUpdateResponse>, RelationshipLinksCreateOrUpdateResponse>>;
    /**
     * Creates a relationship link or updates an existing relationship link within a hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param relationshipLinkName The name of the relationship link.
     * @param parameters Parameters supplied to the CreateOrUpdate relationship link operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, hubName: string, relationshipLinkName: string, parameters: RelationshipLinkResourceFormat, options?: RelationshipLinksCreateOrUpdateOptionalParams): Promise<RelationshipLinksCreateOrUpdateResponse>;
    /**
     * Gets information about the specified relationship Link.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param relationshipLinkName The name of the relationship link.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, hubName: string, relationshipLinkName: string, options?: RelationshipLinksGetOptionalParams): Promise<RelationshipLinksGetResponse>;
    /**
     * Deletes a relationship link within a hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param relationshipLinkName The name of the relationship.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, hubName: string, relationshipLinkName: string, options?: RelationshipLinksDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes a relationship link within a hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param relationshipLinkName The name of the relationship.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, hubName: string, relationshipLinkName: string, options?: RelationshipLinksDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface RelationshipLinksCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type RelationshipLinksCreateOrUpdateResponse = RelationshipLinkResourceFormat;

/** Optional parameters. */
export declare interface RelationshipLinksDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface RelationshipLinksGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type RelationshipLinksGetResponse = RelationshipLinkResourceFormat;

/** Optional parameters. */
export declare interface RelationshipLinksListByHubNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByHubNext operation. */
export declare type RelationshipLinksListByHubNextResponse = RelationshipLinkListResult;

/** Optional parameters. */
export declare interface RelationshipLinksListByHubOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByHub operation. */
export declare type RelationshipLinksListByHubResponse = RelationshipLinkListResult;

/** The response of list relationship operation. */
export declare interface RelationshipListResult {
    /** Results of the list operation. */
    value?: RelationshipResourceFormat[];
    /** Link to the next set of results. */
    nextLink?: string;
}

/** The relationship resource format. */
export declare interface RelationshipResourceFormat extends ProxyResource {
    /** The Relationship Cardinality. */
    cardinality?: CardinalityTypes;
    /** Localized display name for the Relationship. */
    displayName?: {
        [propertyName: string]: string;
    };
    /** Localized descriptions for the Relationship. */
    description?: {
        [propertyName: string]: string;
    };
    /** The expiry date time in UTC. */
    expiryDateTimeUtc?: Date;
    /** The properties of the Relationship. */
    fields?: PropertyDefinition[];
    /** Optional property to be used to map fields in profile to their strong ids in related profile. */
    lookupMappings?: RelationshipTypeMapping[];
    /** Profile type. */
    profileType?: string;
    /**
     * Provisioning state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningStates;
    /**
     * The Relationship name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly relationshipName?: string;
    /** Related profile being referenced. */
    relatedProfileType?: string;
    /**
     * The relationship guid id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly relationshipGuidId?: string;
    /**
     * The hub name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
}

/** Interface representing a Relationships. */
export declare interface Relationships {
    /**
     * Gets all relationships in the hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param options The options parameters.
     */
    listByHub(resourceGroupName: string, hubName: string, options?: RelationshipsListByHubOptionalParams): PagedAsyncIterableIterator<RelationshipResourceFormat>;
    /**
     * Creates a relationship or updates an existing relationship within a hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param relationshipName The name of the Relationship.
     * @param parameters Parameters supplied to the CreateOrUpdate Relationship operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, hubName: string, relationshipName: string, parameters: RelationshipResourceFormat, options?: RelationshipsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<RelationshipsCreateOrUpdateResponse>, RelationshipsCreateOrUpdateResponse>>;
    /**
     * Creates a relationship or updates an existing relationship within a hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param relationshipName The name of the Relationship.
     * @param parameters Parameters supplied to the CreateOrUpdate Relationship operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, hubName: string, relationshipName: string, parameters: RelationshipResourceFormat, options?: RelationshipsCreateOrUpdateOptionalParams): Promise<RelationshipsCreateOrUpdateResponse>;
    /**
     * Gets information about the specified relationship.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param relationshipName The name of the relationship.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, hubName: string, relationshipName: string, options?: RelationshipsGetOptionalParams): Promise<RelationshipsGetResponse>;
    /**
     * Deletes a relationship within a hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param relationshipName The name of the relationship.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, hubName: string, relationshipName: string, options?: RelationshipsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes a relationship within a hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param relationshipName The name of the relationship.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, hubName: string, relationshipName: string, options?: RelationshipsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface RelationshipsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type RelationshipsCreateOrUpdateResponse = RelationshipResourceFormat;

/** Optional parameters. */
export declare interface RelationshipsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface RelationshipsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type RelationshipsGetResponse = RelationshipResourceFormat;

/** Optional parameters. */
export declare interface RelationshipsListByHubNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByHubNext operation. */
export declare type RelationshipsListByHubNextResponse = RelationshipListResult;

/** Optional parameters. */
export declare interface RelationshipsListByHubOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByHub operation. */
export declare type RelationshipsListByHubResponse = RelationshipListResult;

/** The definition of suggested relationship for the type. */
export declare interface RelationshipsLookup {
    /**
     * The relationship profile.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly profileName?: string;
    /**
     * The property references for the profile type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly profilePropertyReferences?: ParticipantProfilePropertyReference[];
    /**
     * The related profile.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly relatedProfileName?: string;
    /**
     * The property references for the related profile type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly relatedProfilePropertyReferences?: ParticipantProfilePropertyReference[];
    /**
     * The name of existing Relationship.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly existingRelationshipName?: string;
}

/** Map a field of profile to its corresponding StrongId in Related Profile. */
export declare interface RelationshipTypeFieldMapping {
    /** Specifies the fieldName in profile. */
    profileFieldName: string;
    /** Specifies the KeyProperty (from StrongId) of the related profile. */
    relatedProfileKeyProperty: string;
}

/** Maps fields in Profile to their corresponding StrongIds in Related Profile. */
export declare interface RelationshipTypeMapping {
    /** Maps a profile property with the StrongId of related profile. This is an array to support StrongIds that are composite key as well. */
    fieldMappings: RelationshipTypeFieldMapping[];
}

/** Common properties of Azure resource. */
export declare interface Resource {
    /**
     * Resource ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Resource name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Resource type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** Resource location. */
    location?: string;
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
}

/** The resource set description. */
export declare interface ResourceSetDescription {
    /** The elements included in the set. */
    elements?: string[];
    /** The elements that are not included in the set, in case elements contains '*' indicating 'all'. */
    exceptions?: string[];
}

/** The response of list role assignment operation. */
export declare interface RoleAssignmentListResult {
    /** Results of the list operation. */
    value?: RoleAssignmentResourceFormat[];
    /** Link to the next set of results. */
    nextLink?: string;
}

/** The Role Assignment resource format. */
export declare interface RoleAssignmentResourceFormat extends ProxyResource {
    /**
     * The hub name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
    /**
     * The name of the metadata object.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly assignmentName?: string;
    /** Localized display names for the metadata. */
    displayName?: {
        [propertyName: string]: string;
    };
    /** Localized description for the metadata. */
    description?: {
        [propertyName: string]: string;
    };
    /**
     * Provisioning state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningStates;
    /** Type of roles. */
    role?: RoleTypes;
    /** The principals being assigned to. */
    principals?: AssignmentPrincipal[];
    /** Profiles set for the assignment. */
    profiles?: ResourceSetDescription;
    /** Interactions set for the assignment. */
    interactions?: ResourceSetDescription;
    /** Links set for the assignment. */
    links?: ResourceSetDescription;
    /** Kpis set for the assignment. */
    kpis?: ResourceSetDescription;
    /** Sas Policies set for the assignment. */
    sasPolicies?: ResourceSetDescription;
    /** Connectors set for the assignment. */
    connectors?: ResourceSetDescription;
    /** Views set for the assignment. */
    views?: ResourceSetDescription;
    /** The Role assignments set for the relationship links. */
    relationshipLinks?: ResourceSetDescription;
    /** The Role assignments set for the relationships. */
    relationships?: ResourceSetDescription;
    /** Widget types set for the assignment. */
    widgetTypes?: ResourceSetDescription;
    /** The Role assignments set for the assignment. */
    roleAssignments?: ResourceSetDescription;
    /** Widget types set for the assignment. */
    conflationPolicies?: ResourceSetDescription;
    /** The Role assignments set for the assignment. */
    segments?: ResourceSetDescription;
}

/** Interface representing a RoleAssignments. */
export declare interface RoleAssignments {
    /**
     * Gets all the role assignments for the specified hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param options The options parameters.
     */
    listByHub(resourceGroupName: string, hubName: string, options?: RoleAssignmentsListByHubOptionalParams): PagedAsyncIterableIterator<RoleAssignmentResourceFormat>;
    /**
     * Creates or updates a role assignment in the hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param assignmentName The assignment name
     * @param parameters Parameters supplied to the CreateOrUpdate RoleAssignment operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, hubName: string, assignmentName: string, parameters: RoleAssignmentResourceFormat, options?: RoleAssignmentsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<RoleAssignmentsCreateOrUpdateResponse>, RoleAssignmentsCreateOrUpdateResponse>>;
    /**
     * Creates or updates a role assignment in the hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param assignmentName The assignment name
     * @param parameters Parameters supplied to the CreateOrUpdate RoleAssignment operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, hubName: string, assignmentName: string, parameters: RoleAssignmentResourceFormat, options?: RoleAssignmentsCreateOrUpdateOptionalParams): Promise<RoleAssignmentsCreateOrUpdateResponse>;
    /**
     * Gets the role assignment in the hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param assignmentName The name of the role assignment.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, hubName: string, assignmentName: string, options?: RoleAssignmentsGetOptionalParams): Promise<RoleAssignmentsGetResponse>;
    /**
     * Deletes the role assignment in the hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param assignmentName The name of the role assignment.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, hubName: string, assignmentName: string, options?: RoleAssignmentsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface RoleAssignmentsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type RoleAssignmentsCreateOrUpdateResponse = RoleAssignmentResourceFormat;

/** Optional parameters. */
export declare interface RoleAssignmentsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface RoleAssignmentsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type RoleAssignmentsGetResponse = RoleAssignmentResourceFormat;

/** Optional parameters. */
export declare interface RoleAssignmentsListByHubNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByHubNext operation. */
export declare type RoleAssignmentsListByHubNextResponse = RoleAssignmentListResult;

/** Optional parameters. */
export declare interface RoleAssignmentsListByHubOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByHub operation. */
export declare type RoleAssignmentsListByHubResponse = RoleAssignmentListResult;

/** The response of list role assignment operation. */
export declare interface RoleListResult {
    /** Results of the list operation. */
    value?: RoleResourceFormat[];
    /** Link to the next set of results. */
    nextLink?: string;
}

/** The role resource format. */
export declare interface RoleResourceFormat extends ProxyResource {
    /** The role name. */
    roleName?: string;
    /** The description of the role. */
    description?: string;
}

/** Interface representing a Roles. */
export declare interface Roles {
    /**
     * Gets all the roles for the hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param options The options parameters.
     */
    listByHub(resourceGroupName: string, hubName: string, options?: RolesListByHubOptionalParams): PagedAsyncIterableIterator<RoleResourceFormat>;
}

/** Optional parameters. */
export declare interface RolesListByHubNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByHubNext operation. */
export declare type RolesListByHubNextResponse = RoleListResult;

/** Optional parameters. */
export declare interface RolesListByHubOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByHub operation. */
export declare type RolesListByHubResponse = RoleListResult;

/** Defines values for RoleTypes. */
export declare type RoleTypes = "Admin" | "Reader" | "ManageAdmin" | "ManageReader" | "DataAdmin" | "DataReader";

/** The Salesforce connector properties. */
export declare interface SalesforceConnectorProperties {
    /** The user settings. */
    usersetting: SalesforceDiscoverSetting;
    /** The Salesforce tables. */
    salesforcetables: SalesforceTable[];
}

/** Salesforce discover setting. */
export declare interface SalesforceDiscoverSetting {
    /** The salesforce connection string secret URL. */
    salesforceConnectionStringSecretUrl: string;
}

/** Salesforce table. */
export declare interface SalesforceTable {
    /** Indicating whether this instance is profile. */
    isProfile?: string;
    /** The table category. */
    tableCategory: string;
    /** The name of the table. */
    tableName: string;
    /** The table remarks. */
    tableRemarks?: string;
    /** The table schema. */
    tableSchema: string;
}

/**
 * Defines values for Status. \
 * {@link KnownStatus} can be used interchangeably with Status,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Active** \
 * **Deleted**
 */
export declare type Status = string;

/** Property/Properties which represent a unique ID. */
export declare interface StrongId {
    /** The properties which make up the unique ID. */
    keyPropertyNames: string[];
    /** The Name identifying the strong ID. */
    strongIdName: string;
    /** Localized display name. */
    displayName?: {
        [propertyName: string]: string;
    };
    /** Localized descriptions. */
    description?: {
        [propertyName: string]: string;
    };
}

/** The response of suggest relationship links operation. */
export declare interface SuggestRelationshipLinksResponse {
    /**
     * The interaction name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly interactionName?: string;
    /**
     * Suggested relationships for the type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly suggestedRelationships?: RelationshipsLookup[];
}

/** Metadata for a Link's property mapping. */
export declare interface TypePropertiesMapping {
    /**  Property name on the source Entity Type. */
    sourcePropertyName: string;
    /** Property name on the target Entity Type. */
    targetPropertyName: string;
    /** Link type. */
    linkType?: LinkTypes;
}

/** The response of list view operation. */
export declare interface ViewListResult {
    /** Results of the list operation. */
    value?: ViewResourceFormat[];
    /** Link to the next set of results. */
    nextLink?: string;
}

/** The view resource format. */
export declare interface ViewResourceFormat extends ProxyResource {
    /**
     * Name of the view.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly viewName?: string;
    /** the user ID. */
    userId?: string;
    /**
     * the hub name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
    /** Localized display name for the view. */
    displayName?: {
        [propertyName: string]: string;
    };
    /** View definition. */
    definition?: string;
    /**
     * Date time when view was last modified.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly changed?: Date;
    /**
     * Date time when view was created.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly created?: Date;
}

/** Interface representing a Views. */
export declare interface Views {
    /**
     * Gets all available views for given user in the specified hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param userId The user ID. Use * to retrieve hub level views.
     * @param options The options parameters.
     */
    listByHub(resourceGroupName: string, hubName: string, userId: string, options?: ViewsListByHubOptionalParams): PagedAsyncIterableIterator<ViewResourceFormat>;
    /**
     * Creates a view or updates an existing view in the hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param viewName The name of the view.
     * @param parameters Parameters supplied to the CreateOrUpdate View operation.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, hubName: string, viewName: string, parameters: ViewResourceFormat, options?: ViewsCreateOrUpdateOptionalParams): Promise<ViewsCreateOrUpdateResponse>;
    /**
     * Gets a view in the hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param viewName The name of the view.
     * @param userId The user ID. Use * to retrieve hub level view.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, hubName: string, viewName: string, userId: string, options?: ViewsGetOptionalParams): Promise<ViewsGetResponse>;
    /**
     * Deletes a view in the specified hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param viewName The name of the view.
     * @param userId The user ID. Use * to retrieve hub level view.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, hubName: string, viewName: string, userId: string, options?: ViewsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface ViewsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type ViewsCreateOrUpdateResponse = ViewResourceFormat;

/** Optional parameters. */
export declare interface ViewsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface ViewsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ViewsGetResponse = ViewResourceFormat;

/** Optional parameters. */
export declare interface ViewsListByHubNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByHubNext operation. */
export declare type ViewsListByHubNextResponse = ViewListResult;

/** Optional parameters. */
export declare interface ViewsListByHubOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByHub operation. */
export declare type ViewsListByHubResponse = ViewListResult;

/** The response of list widget type operation. */
export declare interface WidgetTypeListResult {
    /** Results of the list operation. */
    value?: WidgetTypeResourceFormat[];
    /** Link to the next set of results. */
    nextLink?: string;
}

/** The WidgetTypeResourceFormat */
export declare interface WidgetTypeResourceFormat extends ProxyResource {
    /**
     * Name of the widget type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly widgetTypeName?: string;
    /** Definition for widget type. */
    definition?: string;
    /** Description for widget type. */
    description?: string;
    /** Localized display name for the widget type. */
    displayName?: {
        [propertyName: string]: string;
    };
    /** The image URL. */
    imageUrl?: string;
    /**
     * The hub name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
    /** The widget version. */
    widgetVersion?: string;
    /**
     * Date time when widget type was last modified.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly changed?: Date;
    /**
     * Date time when widget type was created.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly created?: Date;
}

/** Interface representing a WidgetTypes. */
export declare interface WidgetTypes {
    /**
     * Gets all available widget types in the specified hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param options The options parameters.
     */
    listByHub(resourceGroupName: string, hubName: string, options?: WidgetTypesListByHubOptionalParams): PagedAsyncIterableIterator<WidgetTypeResourceFormat>;
    /**
     * Gets a widget type in the specified hub.
     * @param resourceGroupName The name of the resource group.
     * @param hubName The name of the hub.
     * @param widgetTypeName The name of the widget type.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, hubName: string, widgetTypeName: string, options?: WidgetTypesGetOptionalParams): Promise<WidgetTypesGetResponse>;
}

/** Optional parameters. */
export declare interface WidgetTypesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type WidgetTypesGetResponse = WidgetTypeResourceFormat;

/** Optional parameters. */
export declare interface WidgetTypesListByHubNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByHubNext operation. */
export declare type WidgetTypesListByHubNextResponse = WidgetTypeListResult;

/** Optional parameters. */
export declare interface WidgetTypesListByHubOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByHub operation. */
export declare type WidgetTypesListByHubResponse = WidgetTypeListResult;

export { }
