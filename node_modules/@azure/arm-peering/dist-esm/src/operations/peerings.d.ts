import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Peerings } from "../operationsInterfaces";
import { PeeringManagementClient } from "../peeringManagementClient";
import { Peering, PeeringsListByResourceGroupOptionalParams, PeeringsListBySubscriptionOptionalParams, PeeringsGetOptionalParams, PeeringsGetResponse, PeeringsCreateOrUpdateOptionalParams, PeeringsCreateOrUpdateResponse, PeeringsDeleteOptionalParams, ResourceTags, PeeringsUpdateOptionalParams, PeeringsUpdateResponse } from "../models";
/** Class containing Peerings operations. */
export declare class PeeringsImpl implements Peerings {
    private readonly client;
    /**
     * Initialize a new instance of the class Peerings class.
     * @param client Reference to the service client
     */
    constructor(client: PeeringManagementClient);
    /**
     * Lists all of the peerings under the given subscription and resource group.
     * @param resourceGroupName The name of the resource group.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: PeeringsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<Peering>;
    private listByResourceGroupPagingPage;
    private listByResourceGroupPagingAll;
    /**
     * Lists all of the peerings under the given subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: PeeringsListBySubscriptionOptionalParams): PagedAsyncIterableIterator<Peering>;
    private listBySubscriptionPagingPage;
    private listBySubscriptionPagingAll;
    /**
     * Gets an existing peering with the specified name under the given subscription and resource group.
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, peeringName: string, options?: PeeringsGetOptionalParams): Promise<PeeringsGetResponse>;
    /**
     * Creates a new peering or updates an existing peering with the specified name under the given
     * subscription and resource group.
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param peering The properties needed to create or update a peering.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, peeringName: string, peering: Peering, options?: PeeringsCreateOrUpdateOptionalParams): Promise<PeeringsCreateOrUpdateResponse>;
    /**
     * Deletes an existing peering with the specified name under the given subscription and resource group.
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, peeringName: string, options?: PeeringsDeleteOptionalParams): Promise<void>;
    /**
     * Updates tags for a peering with the specified name under the given subscription and resource group.
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param tags The resource tags.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, peeringName: string, tags: ResourceTags, options?: PeeringsUpdateOptionalParams): Promise<PeeringsUpdateResponse>;
    /**
     * Lists all of the peerings under the given subscription and resource group.
     * @param resourceGroupName The name of the resource group.
     * @param options The options parameters.
     */
    private _listByResourceGroup;
    /**
     * Lists all of the peerings under the given subscription.
     * @param options The options parameters.
     */
    private _listBySubscription;
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName The name of the resource group.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    private _listByResourceGroupNext;
    /**
     * ListBySubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
     * @param options The options parameters.
     */
    private _listBySubscriptionNext;
}
//# sourceMappingURL=peerings.d.ts.map