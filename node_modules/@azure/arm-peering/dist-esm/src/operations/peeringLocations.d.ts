import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PeeringLocations } from "../operationsInterfaces";
import { PeeringManagementClient } from "../peeringManagementClient";
import { PeeringLocation, PeeringLocationsKind, PeeringLocationsListOptionalParams } from "../models";
/** Class containing PeeringLocations operations. */
export declare class PeeringLocationsImpl implements PeeringLocations {
    private readonly client;
    /**
     * Initialize a new instance of the class PeeringLocations class.
     * @param client Reference to the service client
     */
    constructor(client: PeeringManagementClient);
    /**
     * Lists all of the available peering locations for the specified kind of peering.
     * @param kind The kind of the peering.
     * @param options The options parameters.
     */
    list(kind: PeeringLocationsKind, options?: PeeringLocationsListOptionalParams): PagedAsyncIterableIterator<PeeringLocation>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Lists all of the available peering locations for the specified kind of peering.
     * @param kind The kind of the peering.
     * @param options The options parameters.
     */
    private _list;
    /**
     * ListNext
     * @param kind The kind of the peering.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
}
//# sourceMappingURL=peeringLocations.d.ts.map