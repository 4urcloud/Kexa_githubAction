import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { ConnectionMonitorTests } from "../operationsInterfaces";
import { PeeringManagementClient } from "../peeringManagementClient";
import { ConnectionMonitorTest, ConnectionMonitorTestsListByPeeringServiceOptionalParams, ConnectionMonitorTestsGetOptionalParams, ConnectionMonitorTestsGetResponse, ConnectionMonitorTestsCreateOrUpdateOptionalParams, ConnectionMonitorTestsCreateOrUpdateResponse, ConnectionMonitorTestsDeleteOptionalParams } from "../models";
/** Class containing ConnectionMonitorTests operations. */
export declare class ConnectionMonitorTestsImpl implements ConnectionMonitorTests {
    private readonly client;
    /**
     * Initialize a new instance of the class ConnectionMonitorTests class.
     * @param client Reference to the service client
     */
    constructor(client: PeeringManagementClient);
    /**
     * Lists all connection monitor tests under the given subscription, resource group and peering service.
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param options The options parameters.
     */
    listByPeeringService(resourceGroupName: string, peeringServiceName: string, options?: ConnectionMonitorTestsListByPeeringServiceOptionalParams): PagedAsyncIterableIterator<ConnectionMonitorTest>;
    private listByPeeringServicePagingPage;
    private listByPeeringServicePagingAll;
    /**
     * Gets an existing connection monitor test with the specified name under the given subscription,
     * resource group and peering service.
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param connectionMonitorTestName The name of the connection monitor test
     * @param options The options parameters.
     */
    get(resourceGroupName: string, peeringServiceName: string, connectionMonitorTestName: string, options?: ConnectionMonitorTestsGetOptionalParams): Promise<ConnectionMonitorTestsGetResponse>;
    /**
     * Creates or updates a connection monitor test with the specified name under the given subscription,
     * resource group and peering service.
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param connectionMonitorTestName The name of the connection monitor test
     * @param connectionMonitorTest The properties needed to create a connection monitor test
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, peeringServiceName: string, connectionMonitorTestName: string, connectionMonitorTest: ConnectionMonitorTest, options?: ConnectionMonitorTestsCreateOrUpdateOptionalParams): Promise<ConnectionMonitorTestsCreateOrUpdateResponse>;
    /**
     * Deletes an existing connection monitor test with the specified name under the given subscription,
     * resource group and peering service.
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param connectionMonitorTestName The name of the connection monitor test
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, peeringServiceName: string, connectionMonitorTestName: string, options?: ConnectionMonitorTestsDeleteOptionalParams): Promise<void>;
    /**
     * Lists all connection monitor tests under the given subscription, resource group and peering service.
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param options The options parameters.
     */
    private _listByPeeringService;
    /**
     * ListByPeeringServiceNext
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param nextLink The nextLink from the previous successful call to the ListByPeeringService method.
     * @param options The options parameters.
     */
    private _listByPeeringServiceNext;
}
//# sourceMappingURL=connectionMonitorTests.d.ts.map