/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/** Class containing LookingGlass operations. */
export class LookingGlassImpl {
    /**
     * Initialize a new instance of the class LookingGlass class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Run looking glass functionality
     * @param command The command to be executed: ping, traceroute, bgpRoute.
     * @param sourceType The type of the source: Edge site or Azure Region.
     * @param sourceLocation The location of the source.
     * @param destinationIP The IP address of the destination.
     * @param options The options parameters.
     */
    invoke(command, sourceType, sourceLocation, destinationIP, options) {
        return this.client.sendOperationRequest({ command, sourceType, sourceLocation, destinationIP, options }, invokeOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const invokeOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Peering/lookingGlass",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.LookingGlassOutput
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.command,
        Parameters.sourceType,
        Parameters.sourceLocation,
        Parameters.destinationIP
    ],
    urlParameters: [Parameters.$host, Parameters.subscriptionId],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=lookingGlass.js.map