import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PeeringServices } from "../operationsInterfaces";
import { PeeringManagementClient } from "../peeringManagementClient";
import { PeeringService, PeeringServicesListByResourceGroupOptionalParams, PeeringServicesListBySubscriptionOptionalParams, PeeringServicesGetOptionalParams, PeeringServicesGetResponse, PeeringServicesCreateOrUpdateOptionalParams, PeeringServicesCreateOrUpdateResponse, PeeringServicesDeleteOptionalParams, ResourceTags, PeeringServicesUpdateOptionalParams, PeeringServicesUpdateResponse, PeeringServicesInitializeConnectionMonitorOptionalParams } from "../models";
/** Class containing PeeringServices operations. */
export declare class PeeringServicesImpl implements PeeringServices {
    private readonly client;
    /**
     * Initialize a new instance of the class PeeringServices class.
     * @param client Reference to the service client
     */
    constructor(client: PeeringManagementClient);
    /**
     * Lists all of the peering services under the given subscription and resource group.
     * @param resourceGroupName The name of the resource group.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: PeeringServicesListByResourceGroupOptionalParams): PagedAsyncIterableIterator<PeeringService>;
    private listByResourceGroupPagingPage;
    private listByResourceGroupPagingAll;
    /**
     * Lists all of the peerings under the given subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: PeeringServicesListBySubscriptionOptionalParams): PagedAsyncIterableIterator<PeeringService>;
    private listBySubscriptionPagingPage;
    private listBySubscriptionPagingAll;
    /**
     * Gets an existing peering service with the specified name under the given subscription and resource
     * group.
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, peeringServiceName: string, options?: PeeringServicesGetOptionalParams): Promise<PeeringServicesGetResponse>;
    /**
     * Creates a new peering service or updates an existing peering with the specified name under the given
     * subscription and resource group.
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param peeringService The properties needed to create or update a peering service.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, peeringServiceName: string, peeringService: PeeringService, options?: PeeringServicesCreateOrUpdateOptionalParams): Promise<PeeringServicesCreateOrUpdateResponse>;
    /**
     * Deletes an existing peering service with the specified name under the given subscription and
     * resource group.
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, peeringServiceName: string, options?: PeeringServicesDeleteOptionalParams): Promise<void>;
    /**
     * Updates tags for a peering service with the specified name under the given subscription and resource
     * group.
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param tags The resource tags.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, peeringServiceName: string, tags: ResourceTags, options?: PeeringServicesUpdateOptionalParams): Promise<PeeringServicesUpdateResponse>;
    /**
     * Lists all of the peering services under the given subscription and resource group.
     * @param resourceGroupName The name of the resource group.
     * @param options The options parameters.
     */
    private _listByResourceGroup;
    /**
     * Lists all of the peerings under the given subscription.
     * @param options The options parameters.
     */
    private _listBySubscription;
    /**
     * Initialize Peering Service for Connection Monitor functionality
     * @param options The options parameters.
     */
    initializeConnectionMonitor(options?: PeeringServicesInitializeConnectionMonitorOptionalParams): Promise<void>;
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName The name of the resource group.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    private _listByResourceGroupNext;
    /**
     * ListBySubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
     * @param options The options parameters.
     */
    private _listBySubscriptionNext;
}
//# sourceMappingURL=peeringServices.d.ts.map