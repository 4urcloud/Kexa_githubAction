import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Prefixes } from "../operationsInterfaces";
import { PeeringManagementClient } from "../peeringManagementClient";
import { PeeringServicePrefix, PrefixesListByPeeringServiceOptionalParams, PrefixesGetOptionalParams, PrefixesGetResponse, PrefixesCreateOrUpdateOptionalParams, PrefixesCreateOrUpdateResponse, PrefixesDeleteOptionalParams } from "../models";
/** Class containing Prefixes operations. */
export declare class PrefixesImpl implements Prefixes {
    private readonly client;
    /**
     * Initialize a new instance of the class Prefixes class.
     * @param client Reference to the service client
     */
    constructor(client: PeeringManagementClient);
    /**
     * Lists all prefixes under the given subscription, resource group and peering service.
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param options The options parameters.
     */
    listByPeeringService(resourceGroupName: string, peeringServiceName: string, options?: PrefixesListByPeeringServiceOptionalParams): PagedAsyncIterableIterator<PeeringServicePrefix>;
    private listByPeeringServicePagingPage;
    private listByPeeringServicePagingAll;
    /**
     * Gets an existing prefix with the specified name under the given subscription, resource group and
     * peering service.
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param prefixName The name of the prefix.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, peeringServiceName: string, prefixName: string, options?: PrefixesGetOptionalParams): Promise<PrefixesGetResponse>;
    /**
     * Creates a new prefix with the specified name under the given subscription, resource group and
     * peering service.
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param prefixName The name of the prefix.
     * @param peeringServicePrefix The properties needed to create a prefix.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, peeringServiceName: string, prefixName: string, peeringServicePrefix: PeeringServicePrefix, options?: PrefixesCreateOrUpdateOptionalParams): Promise<PrefixesCreateOrUpdateResponse>;
    /**
     * Deletes an existing prefix with the specified name under the given subscription, resource group and
     * peering service.
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param prefixName The name of the prefix.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, peeringServiceName: string, prefixName: string, options?: PrefixesDeleteOptionalParams): Promise<void>;
    /**
     * Lists all prefixes under the given subscription, resource group and peering service.
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param options The options parameters.
     */
    private _listByPeeringService;
    /**
     * ListByPeeringServiceNext
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param nextLink The nextLink from the previous successful call to the ListByPeeringService method.
     * @param options The options parameters.
     */
    private _listByPeeringServiceNext;
}
//# sourceMappingURL=prefixes.d.ts.map