import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { RegisteredPrefixes } from "../operationsInterfaces";
import { PeeringManagementClient } from "../peeringManagementClient";
import { PeeringRegisteredPrefix, RegisteredPrefixesListByPeeringOptionalParams, RegisteredPrefixesGetOptionalParams, RegisteredPrefixesGetResponse, RegisteredPrefixesCreateOrUpdateOptionalParams, RegisteredPrefixesCreateOrUpdateResponse, RegisteredPrefixesDeleteOptionalParams } from "../models";
/** Class containing RegisteredPrefixes operations. */
export declare class RegisteredPrefixesImpl implements RegisteredPrefixes {
    private readonly client;
    /**
     * Initialize a new instance of the class RegisteredPrefixes class.
     * @param client Reference to the service client
     */
    constructor(client: PeeringManagementClient);
    /**
     * Lists all registered prefixes under the given subscription, resource group and peering.
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param options The options parameters.
     */
    listByPeering(resourceGroupName: string, peeringName: string, options?: RegisteredPrefixesListByPeeringOptionalParams): PagedAsyncIterableIterator<PeeringRegisteredPrefix>;
    private listByPeeringPagingPage;
    private listByPeeringPagingAll;
    /**
     * Gets an existing registered prefix with the specified name under the given subscription, resource
     * group and peering.
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param registeredPrefixName The name of the registered prefix.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, peeringName: string, registeredPrefixName: string, options?: RegisteredPrefixesGetOptionalParams): Promise<RegisteredPrefixesGetResponse>;
    /**
     * Creates a new registered prefix with the specified name under the given subscription, resource group
     * and peering.
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param registeredPrefixName The name of the registered prefix.
     * @param registeredPrefix The properties needed to create a registered prefix.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, peeringName: string, registeredPrefixName: string, registeredPrefix: PeeringRegisteredPrefix, options?: RegisteredPrefixesCreateOrUpdateOptionalParams): Promise<RegisteredPrefixesCreateOrUpdateResponse>;
    /**
     * Deletes an existing registered prefix with the specified name under the given subscription, resource
     * group and peering.
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param registeredPrefixName The name of the registered prefix.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, peeringName: string, registeredPrefixName: string, options?: RegisteredPrefixesDeleteOptionalParams): Promise<void>;
    /**
     * Lists all registered prefixes under the given subscription, resource group and peering.
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param options The options parameters.
     */
    private _listByPeering;
    /**
     * ListByPeeringNext
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param nextLink The nextLink from the previous successful call to the ListByPeering method.
     * @param options The options parameters.
     */
    private _listByPeeringNext;
}
//# sourceMappingURL=registeredPrefixes.d.ts.map