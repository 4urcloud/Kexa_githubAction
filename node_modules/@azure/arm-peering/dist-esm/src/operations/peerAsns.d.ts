import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PeerAsns } from "../operationsInterfaces";
import { PeeringManagementClient } from "../peeringManagementClient";
import { PeerAsn, PeerAsnsListBySubscriptionOptionalParams, PeerAsnsGetOptionalParams, PeerAsnsGetResponse, PeerAsnsCreateOrUpdateOptionalParams, PeerAsnsCreateOrUpdateResponse, PeerAsnsDeleteOptionalParams } from "../models";
/** Class containing PeerAsns operations. */
export declare class PeerAsnsImpl implements PeerAsns {
    private readonly client;
    /**
     * Initialize a new instance of the class PeerAsns class.
     * @param client Reference to the service client
     */
    constructor(client: PeeringManagementClient);
    /**
     * Lists all of the peer ASNs under the given subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: PeerAsnsListBySubscriptionOptionalParams): PagedAsyncIterableIterator<PeerAsn>;
    private listBySubscriptionPagingPage;
    private listBySubscriptionPagingAll;
    /**
     * Gets the peer ASN with the specified name under the given subscription.
     * @param peerAsnName The peer ASN name.
     * @param options The options parameters.
     */
    get(peerAsnName: string, options?: PeerAsnsGetOptionalParams): Promise<PeerAsnsGetResponse>;
    /**
     * Creates a new peer ASN or updates an existing peer ASN with the specified name under the given
     * subscription.
     * @param peerAsnName The peer ASN name.
     * @param peerAsn The peer ASN.
     * @param options The options parameters.
     */
    createOrUpdate(peerAsnName: string, peerAsn: PeerAsn, options?: PeerAsnsCreateOrUpdateOptionalParams): Promise<PeerAsnsCreateOrUpdateResponse>;
    /**
     * Deletes an existing peer ASN with the specified name under the given subscription.
     * @param peerAsnName The peer ASN name.
     * @param options The options parameters.
     */
    delete(peerAsnName: string, options?: PeerAsnsDeleteOptionalParams): Promise<void>;
    /**
     * Lists all of the peer ASNs under the given subscription.
     * @param options The options parameters.
     */
    private _listBySubscription;
    /**
     * ListBySubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
     * @param options The options parameters.
     */
    private _listBySubscriptionNext;
}
//# sourceMappingURL=peerAsns.d.ts.map