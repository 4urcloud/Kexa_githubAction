import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { RegisteredAsns } from "../operationsInterfaces";
import { PeeringManagementClient } from "../peeringManagementClient";
import { PeeringRegisteredAsn, RegisteredAsnsListByPeeringOptionalParams, RegisteredAsnsGetOptionalParams, RegisteredAsnsGetResponse, RegisteredAsnsCreateOrUpdateOptionalParams, RegisteredAsnsCreateOrUpdateResponse, RegisteredAsnsDeleteOptionalParams } from "../models";
/** Class containing RegisteredAsns operations. */
export declare class RegisteredAsnsImpl implements RegisteredAsns {
    private readonly client;
    /**
     * Initialize a new instance of the class RegisteredAsns class.
     * @param client Reference to the service client
     */
    constructor(client: PeeringManagementClient);
    /**
     * Lists all registered ASNs under the given subscription, resource group and peering.
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param options The options parameters.
     */
    listByPeering(resourceGroupName: string, peeringName: string, options?: RegisteredAsnsListByPeeringOptionalParams): PagedAsyncIterableIterator<PeeringRegisteredAsn>;
    private listByPeeringPagingPage;
    private listByPeeringPagingAll;
    /**
     * Gets an existing registered ASN with the specified name under the given subscription, resource group
     * and peering.
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param registeredAsnName The name of the registered ASN.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, peeringName: string, registeredAsnName: string, options?: RegisteredAsnsGetOptionalParams): Promise<RegisteredAsnsGetResponse>;
    /**
     * Creates a new registered ASN with the specified name under the given subscription, resource group
     * and peering.
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param registeredAsnName The name of the ASN.
     * @param registeredAsn The properties needed to create a registered ASN.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, peeringName: string, registeredAsnName: string, registeredAsn: PeeringRegisteredAsn, options?: RegisteredAsnsCreateOrUpdateOptionalParams): Promise<RegisteredAsnsCreateOrUpdateResponse>;
    /**
     * Deletes an existing registered ASN with the specified name under the given subscription, resource
     * group and peering.
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param registeredAsnName The name of the registered ASN.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, peeringName: string, registeredAsnName: string, options?: RegisteredAsnsDeleteOptionalParams): Promise<void>;
    /**
     * Lists all registered ASNs under the given subscription, resource group and peering.
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param options The options parameters.
     */
    private _listByPeering;
    /**
     * ListByPeeringNext
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param nextLink The nextLink from the previous successful call to the ListByPeering method.
     * @param options The options parameters.
     */
    private _listByPeeringNext;
}
//# sourceMappingURL=registeredAsns.d.ts.map