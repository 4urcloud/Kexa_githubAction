import { LookingGlass } from "../operationsInterfaces";
import { PeeringManagementClient } from "../peeringManagementClient";
import { LookingGlassCommand, LookingGlassSourceType, LookingGlassInvokeOptionalParams, LookingGlassInvokeResponse } from "../models";
/** Class containing LookingGlass operations. */
export declare class LookingGlassImpl implements LookingGlass {
    private readonly client;
    /**
     * Initialize a new instance of the class LookingGlass class.
     * @param client Reference to the service client
     */
    constructor(client: PeeringManagementClient);
    /**
     * Run looking glass functionality
     * @param command The command to be executed: ping, traceroute, bgpRoute.
     * @param sourceType The type of the source: Edge site or Azure Region.
     * @param sourceLocation The location of the source.
     * @param destinationIP The IP address of the destination.
     * @param options The options parameters.
     */
    invoke(command: LookingGlassCommand, sourceType: LookingGlassSourceType, sourceLocation: string, destinationIP: string, options?: LookingGlassInvokeOptionalParams): Promise<LookingGlassInvokeResponse>;
}
//# sourceMappingURL=lookingGlass.d.ts.map