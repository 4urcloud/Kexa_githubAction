/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { CheckServiceProviderAvailabilityInput as CheckServiceProviderAvailabilityInputMapper, PeerAsn as PeerAsnMapper, PeeringRegisteredAsn as PeeringRegisteredAsnMapper, PeeringRegisteredPrefix as PeeringRegisteredPrefixMapper, Peering as PeeringMapper, ResourceTags as ResourceTagsMapper, ConnectionMonitorTest as ConnectionMonitorTestMapper, PeeringServicePrefix as PeeringServicePrefixMapper, PeeringService as PeeringServiceMapper } from "../models/mappers";
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const peeringLocation = {
    parameterPath: "peeringLocation",
    mapper: {
        serializedName: "peeringLocation",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2021-06-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export const checkServiceProviderAvailabilityInput = {
    parameterPath: "checkServiceProviderAvailabilityInput",
    mapper: CheckServiceProviderAvailabilityInputMapper
};
export const kind = {
    parameterPath: "kind",
    mapper: {
        serializedName: "kind",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const asn = {
    parameterPath: ["options", "asn"],
    mapper: {
        serializedName: "asn",
        type: {
            name: "Number"
        }
    }
};
export const command = {
    parameterPath: "command",
    mapper: {
        serializedName: "command",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const sourceType = {
    parameterPath: "sourceType",
    mapper: {
        serializedName: "sourceType",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const sourceLocation = {
    parameterPath: "sourceLocation",
    mapper: {
        serializedName: "sourceLocation",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const destinationIP = {
    parameterPath: "destinationIP",
    mapper: {
        serializedName: "destinationIP",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const peerAsnName = {
    parameterPath: "peerAsnName",
    mapper: {
        serializedName: "peerAsnName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const peerAsn = {
    parameterPath: "peerAsn",
    mapper: PeerAsnMapper
};
export const kind1 = {
    parameterPath: "kind",
    mapper: {
        serializedName: "kind",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const directPeeringType = {
    parameterPath: ["options", "directPeeringType"],
    mapper: {
        serializedName: "directPeeringType",
        type: {
            name: "String"
        }
    }
};
export const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const peeringName = {
    parameterPath: "peeringName",
    mapper: {
        serializedName: "peeringName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const registeredAsnName = {
    parameterPath: "registeredAsnName",
    mapper: {
        serializedName: "registeredAsnName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const registeredAsn = {
    parameterPath: "registeredAsn",
    mapper: PeeringRegisteredAsnMapper
};
export const registeredPrefixName = {
    parameterPath: "registeredPrefixName",
    mapper: {
        serializedName: "registeredPrefixName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const registeredPrefix = {
    parameterPath: "registeredPrefix",
    mapper: PeeringRegisteredPrefixMapper
};
export const peering = {
    parameterPath: "peering",
    mapper: PeeringMapper
};
export const tags = {
    parameterPath: "tags",
    mapper: ResourceTagsMapper
};
export const prefix = {
    parameterPath: ["options", "prefix"],
    mapper: {
        serializedName: "prefix",
        type: {
            name: "String"
        }
    }
};
export const asPath = {
    parameterPath: ["options", "asPath"],
    mapper: {
        serializedName: "asPath",
        type: {
            name: "String"
        }
    }
};
export const originAsValidationState = {
    parameterPath: ["options", "originAsValidationState"],
    mapper: {
        serializedName: "originAsValidationState",
        type: {
            name: "String"
        }
    }
};
export const rpkiValidationState = {
    parameterPath: ["options", "rpkiValidationState"],
    mapper: {
        serializedName: "rpkiValidationState",
        type: {
            name: "String"
        }
    }
};
export const skipToken = {
    parameterPath: ["options", "skipToken"],
    mapper: {
        serializedName: "$skipToken",
        type: {
            name: "String"
        }
    }
};
export const peeringServiceName = {
    parameterPath: "peeringServiceName",
    mapper: {
        serializedName: "peeringServiceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const connectionMonitorTestName = {
    parameterPath: "connectionMonitorTestName",
    mapper: {
        serializedName: "connectionMonitorTestName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const connectionMonitorTest = {
    parameterPath: "connectionMonitorTest",
    mapper: ConnectionMonitorTestMapper
};
export const country = {
    parameterPath: ["options", "country"],
    mapper: {
        serializedName: "country",
        type: {
            name: "String"
        }
    }
};
export const prefixName = {
    parameterPath: "prefixName",
    mapper: {
        serializedName: "prefixName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const expand = {
    parameterPath: ["options", "expand"],
    mapper: {
        serializedName: "$expand",
        type: {
            name: "String"
        }
    }
};
export const peeringServicePrefix = {
    parameterPath: "peeringServicePrefix",
    mapper: PeeringServicePrefixMapper
};
export const peeringService = {
    parameterPath: "peeringService",
    mapper: PeeringServiceMapper
};
//# sourceMappingURL=parameters.js.map