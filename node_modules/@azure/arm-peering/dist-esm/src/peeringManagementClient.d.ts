import * as coreClient from "@azure/core-client";
import * as coreAuth from "@azure/core-auth";
import { CdnPeeringPrefixes, LegacyPeerings, LookingGlass, Operations, PeerAsns, PeeringLocations, RegisteredAsns, RegisteredPrefixes, Peerings, ReceivedRoutes, ConnectionMonitorTests, PeeringServiceCountries, PeeringServiceLocations, Prefixes, PeeringServiceProviders, PeeringServices } from "./operationsInterfaces";
import { PeeringManagementClientOptionalParams, CheckServiceProviderAvailabilityInput, CheckServiceProviderAvailabilityOptionalParams, CheckServiceProviderAvailabilityResponse } from "./models";
export declare class PeeringManagementClient extends coreClient.ServiceClient {
    $host: string;
    subscriptionId: string;
    apiVersion: string;
    /**
     * Initializes a new instance of the PeeringManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The Azure subscription ID.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: PeeringManagementClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    /**
     * Checks if the peering service provider is present within 1000 miles of customer's location
     * @param checkServiceProviderAvailabilityInput The CheckServiceProviderAvailabilityInput indicating
     *                                              customer location and service provider.
     * @param options The options parameters.
     */
    checkServiceProviderAvailability(checkServiceProviderAvailabilityInput: CheckServiceProviderAvailabilityInput, options?: CheckServiceProviderAvailabilityOptionalParams): Promise<CheckServiceProviderAvailabilityResponse>;
    cdnPeeringPrefixes: CdnPeeringPrefixes;
    legacyPeerings: LegacyPeerings;
    lookingGlass: LookingGlass;
    operations: Operations;
    peerAsns: PeerAsns;
    peeringLocations: PeeringLocations;
    registeredAsns: RegisteredAsns;
    registeredPrefixes: RegisteredPrefixes;
    peerings: Peerings;
    receivedRoutes: ReceivedRoutes;
    connectionMonitorTests: ConnectionMonitorTests;
    peeringServiceCountries: PeeringServiceCountries;
    peeringServiceLocations: PeeringServiceLocations;
    prefixes: Prefixes;
    peeringServiceProviders: PeeringServiceProviders;
    peeringServices: PeeringServices;
}
//# sourceMappingURL=peeringManagementClient.d.ts.map