import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { PagedAsyncIterableIterator } from '@azure/core-paging';

/** The properties that define a BGP session. */
export declare interface BgpSession {
    /** The IPv4 prefix that contains both ends' IPv4 addresses. */
    sessionPrefixV4?: string;
    /** The IPv6 prefix that contains both ends' IPv6 addresses. */
    sessionPrefixV6?: string;
    /** The IPv4 session address on Microsoft's end. */
    microsoftSessionIPv4Address?: string;
    /** The IPv6 session address on Microsoft's end. */
    microsoftSessionIPv6Address?: string;
    /** The IPv4 session address on peer's end. */
    peerSessionIPv4Address?: string;
    /** The IPv6 session address on peer's end. */
    peerSessionIPv6Address?: string;
    /**
     * The state of the IPv4 session.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly sessionStateV4?: SessionStateV4;
    /**
     * The state of the IPv6 session.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly sessionStateV6?: SessionStateV6;
    /** The maximum number of prefixes advertised over the IPv4 session. */
    maxPrefixesAdvertisedV4?: number;
    /** The maximum number of prefixes advertised over the IPv6 session. */
    maxPrefixesAdvertisedV6?: number;
    /** The MD5 authentication key of the session. */
    md5AuthenticationKey?: string;
}

/** The CDN peering prefix */
export declare interface CdnPeeringPrefix extends Resource {
    /**
     * The prefix.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly prefix?: string;
    /**
     * The Azure region.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly azureRegion?: string;
    /**
     * The Azure service.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly azureService?: string;
    /**
     * The flag that indicates whether or not this is the primary region.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isPrimaryRegion?: boolean;
    /**
     * The BGP Community
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly bgpCommunity?: string;
}

/** Interface representing a CdnPeeringPrefixes. */
export declare interface CdnPeeringPrefixes {
    /**
     * Lists all of the advertised prefixes for the specified peering location
     * @param peeringLocation The peering location.
     * @param options The options parameters.
     */
    list(peeringLocation: string, options?: CdnPeeringPrefixesListOptionalParams): PagedAsyncIterableIterator<CdnPeeringPrefix>;
}

/** Optional parameters. */
export declare interface CdnPeeringPrefixesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type CdnPeeringPrefixesListNextResponse = CdnPeeringPrefixListResult;

/** Optional parameters. */
export declare interface CdnPeeringPrefixesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type CdnPeeringPrefixesListResponse = CdnPeeringPrefixListResult;

/** The paginated list of CDN peering prefixes. */
export declare interface CdnPeeringPrefixListResult {
    /** The list of CDN peering prefixes. */
    value?: CdnPeeringPrefix[];
    /** The link to fetch the next page of CDN peering prefixes. */
    nextLink?: string;
}

/** Class for CheckServiceProviderAvailabilityInput */
export declare interface CheckServiceProviderAvailabilityInput {
    /** Gets or sets the peering service location. */
    peeringServiceLocation?: string;
    /** Gets or sets the peering service provider. */
    peeringServiceProvider?: string;
}

/** Optional parameters. */
export declare interface CheckServiceProviderAvailabilityOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the checkServiceProviderAvailability operation. */
export declare type CheckServiceProviderAvailabilityResponse = {
    /** The parsed response body. */
    body: Enum0;
};

/**
 * Defines values for Command. \
 * {@link KnownCommand} can be used interchangeably with Command,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Traceroute** \
 * **Ping** \
 * **BgpRoute**
 */
export declare type Command = string;

/** The Connection Monitor Test class. */
export declare interface ConnectionMonitorTest extends Resource {
    /** The Connection Monitor test source agent */
    sourceAgent?: string;
    /** The Connection Monitor test destination */
    destination?: string;
    /** The Connection Monitor test destination port */
    destinationPort?: number;
    /** The Connection Monitor test frequency in seconds */
    testFrequencyInSec?: number;
    /**
     * The flag that indicates if the Connection Monitor test is successful or not.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isTestSuccessful?: boolean;
    /**
     * The path representing the Connection Monitor test.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly path?: string[];
    /**
     * The provisioning state of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
}

/** The paginated list of [T]. */
export declare interface ConnectionMonitorTestListResult {
    /** The list of [T]. */
    value?: ConnectionMonitorTest[];
    /** The link to fetch the next page of [T]. */
    nextLink?: string;
}

/** Interface representing a ConnectionMonitorTests. */
export declare interface ConnectionMonitorTests {
    /**
     * Lists all connection monitor tests under the given subscription, resource group and peering service.
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param options The options parameters.
     */
    listByPeeringService(resourceGroupName: string, peeringServiceName: string, options?: ConnectionMonitorTestsListByPeeringServiceOptionalParams): PagedAsyncIterableIterator<ConnectionMonitorTest>;
    /**
     * Gets an existing connection monitor test with the specified name under the given subscription,
     * resource group and peering service.
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param connectionMonitorTestName The name of the connection monitor test
     * @param options The options parameters.
     */
    get(resourceGroupName: string, peeringServiceName: string, connectionMonitorTestName: string, options?: ConnectionMonitorTestsGetOptionalParams): Promise<ConnectionMonitorTestsGetResponse>;
    /**
     * Creates or updates a connection monitor test with the specified name under the given subscription,
     * resource group and peering service.
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param connectionMonitorTestName The name of the connection monitor test
     * @param connectionMonitorTest The properties needed to create a connection monitor test
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, peeringServiceName: string, connectionMonitorTestName: string, connectionMonitorTest: ConnectionMonitorTest, options?: ConnectionMonitorTestsCreateOrUpdateOptionalParams): Promise<ConnectionMonitorTestsCreateOrUpdateResponse>;
    /**
     * Deletes an existing connection monitor test with the specified name under the given subscription,
     * resource group and peering service.
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param connectionMonitorTestName The name of the connection monitor test
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, peeringServiceName: string, connectionMonitorTestName: string, options?: ConnectionMonitorTestsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface ConnectionMonitorTestsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type ConnectionMonitorTestsCreateOrUpdateResponse = ConnectionMonitorTest;

/** Optional parameters. */
export declare interface ConnectionMonitorTestsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface ConnectionMonitorTestsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ConnectionMonitorTestsGetResponse = ConnectionMonitorTest;

/** Optional parameters. */
export declare interface ConnectionMonitorTestsListByPeeringServiceNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByPeeringServiceNext operation. */
export declare type ConnectionMonitorTestsListByPeeringServiceNextResponse = ConnectionMonitorTestListResult;

/** Optional parameters. */
export declare interface ConnectionMonitorTestsListByPeeringServiceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByPeeringService operation. */
export declare type ConnectionMonitorTestsListByPeeringServiceResponse = ConnectionMonitorTestListResult;

/**
 * Defines values for ConnectionState. \
 * {@link KnownConnectionState} can be used interchangeably with ConnectionState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **PendingApproval** \
 * **Approved** \
 * **ProvisioningStarted** \
 * **ProvisioningFailed** \
 * **ProvisioningCompleted** \
 * **Validating** \
 * **Active**
 */
export declare type ConnectionState = string;

/** The contact detail class. */
export declare interface ContactDetail {
    /** The role of the contact. */
    role?: Role;
    /** The e-mail address of the contact. */
    email?: string;
    /** The phone number of the contact. */
    phone?: string;
}

/** The properties that define a direct connection. */
export declare interface DirectConnection {
    /** The bandwidth of the connection. */
    bandwidthInMbps?: number;
    /**
     * The bandwidth that is actually provisioned.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisionedBandwidthInMbps?: number;
    /** The field indicating if Microsoft provides session ip addresses. */
    sessionAddressProvider?: SessionAddressProvider;
    /** The flag that indicates whether or not the connection is used for peering service. */
    useForPeeringService?: boolean;
    /**
     * The ID used within Microsoft's peering provisioning system to track the connection
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly microsoftTrackingId?: string;
    /** The PeeringDB.com ID of the facility at which the connection has to be set up. */
    peeringDBFacilityId?: number;
    /**
     * The state of the connection.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly connectionState?: ConnectionState;
    /** The BGP session associated with the connection. */
    bgpSession?: BgpSession;
    /** The unique identifier (GUID) for the connection. */
    connectionIdentifier?: string;
    /**
     * The error message related to the connection state, if any.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly errorMessage?: string;
}

/** The properties that define a direct peering facility. */
export declare interface DirectPeeringFacility {
    /** The address of the direct peering facility. */
    address?: string;
    /** The type of the direct peering. */
    directPeeringType?: DirectPeeringType;
    /** The PeeringDB.com ID of the facility. */
    peeringDBFacilityId?: number;
    /** The PeeringDB.com URL of the facility. */
    peeringDBFacilityLink?: string;
}

/**
 * Defines values for DirectPeeringType. \
 * {@link KnownDirectPeeringType} can be used interchangeably with DirectPeeringType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Edge** \
 * **Transit** \
 * **Cdn** \
 * **Internal** \
 * **Ix** \
 * **IxRs** \
 * **Voice**
 */
export declare type DirectPeeringType = string;

/**
 * Defines values for Enum0. \
 * {@link KnownEnum0} can be used interchangeably with Enum0,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Available** \
 * **Unavailable**
 */
export declare type Enum0 = string;

/** The error detail that describes why an operation has failed. */
export declare interface ErrorDetail {
    /**
     * The error code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * The error message.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
}

/** The error response that indicates why an operation has failed. */
export declare interface ErrorResponse {
    /** The error detail that describes why an operation has failed. */
    error?: ErrorDetail;
}

/** The properties that define an exchange connection. */
export declare interface ExchangeConnection {
    /** The PeeringDB.com ID of the facility at which the connection has to be set up. */
    peeringDBFacilityId?: number;
    /**
     * The state of the connection.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly connectionState?: ConnectionState;
    /** The BGP session associated with the connection. */
    bgpSession?: BgpSession;
    /** The unique identifier (GUID) for the connection. */
    connectionIdentifier?: string;
    /**
     * The error message related to the connection state, if any.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly errorMessage?: string;
}

/** The properties that define an exchange peering facility. */
export declare interface ExchangePeeringFacility {
    /** The name of the exchange peering facility. */
    exchangeName?: string;
    /** The bandwidth of the connection between Microsoft and the exchange peering facility. */
    bandwidthInMbps?: number;
    /** The IPv4 address of Microsoft at the exchange peering facility. */
    microsoftIPv4Address?: string;
    /** The IPv6 address of Microsoft at the exchange peering facility. */
    microsoftIPv6Address?: string;
    /** The IPv4 prefixes associated with the exchange peering facility. */
    facilityIPv4Prefix?: string;
    /** The IPv6 prefixes associated with the exchange peering facility. */
    facilityIPv6Prefix?: string;
    /** The PeeringDB.com ID of the facility. */
    peeringDBFacilityId?: number;
    /** The PeeringDB.com URL of the facility. */
    peeringDBFacilityLink?: string;
}

/**
 * Defines values for Family. \
 * {@link KnownFamily} can be used interchangeably with Family,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Direct** \
 * **Exchange**
 */
export declare type Family = string;

/**
 * Given a result page from a pageable operation, returns a
 * continuation token that can be used to begin paging from
 * that point later.
 * @param page A result object from calling .byPage() on a paged operation.
 * @returns The continuation token that can be passed into byPage().
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/**
 * Defines values for Kind. \
 * {@link KnownKind} can be used interchangeably with Kind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Direct** \
 * **Exchange**
 */
export declare type Kind = string;

/** Known values of {@link Command} that the service accepts. */
export declare enum KnownCommand {
    /** Traceroute */
    Traceroute = "Traceroute",
    /** Ping */
    Ping = "Ping",
    /** BgpRoute */
    BgpRoute = "BgpRoute"
}

/** Known values of {@link ConnectionState} that the service accepts. */
export declare enum KnownConnectionState {
    /** None */
    None = "None",
    /** PendingApproval */
    PendingApproval = "PendingApproval",
    /** Approved */
    Approved = "Approved",
    /** ProvisioningStarted */
    ProvisioningStarted = "ProvisioningStarted",
    /** ProvisioningFailed */
    ProvisioningFailed = "ProvisioningFailed",
    /** ProvisioningCompleted */
    ProvisioningCompleted = "ProvisioningCompleted",
    /** Validating */
    Validating = "Validating",
    /** Active */
    Active = "Active"
}

/** Known values of {@link DirectPeeringType} that the service accepts. */
export declare enum KnownDirectPeeringType {
    /** Edge */
    Edge = "Edge",
    /** Transit */
    Transit = "Transit",
    /** Cdn */
    Cdn = "Cdn",
    /** Internal */
    Internal = "Internal",
    /** Ix */
    Ix = "Ix",
    /** IxRs */
    IxRs = "IxRs",
    /** Voice */
    Voice = "Voice"
}

/** Known values of {@link Enum0} that the service accepts. */
export declare enum KnownEnum0 {
    /** Available */
    Available = "Available",
    /** Unavailable */
    Unavailable = "Unavailable"
}

/** Known values of {@link Family} that the service accepts. */
export declare enum KnownFamily {
    /** Direct */
    Direct = "Direct",
    /** Exchange */
    Exchange = "Exchange"
}

/** Known values of {@link Kind} that the service accepts. */
export declare enum KnownKind {
    /** Direct */
    Direct = "Direct",
    /** Exchange */
    Exchange = "Exchange"
}

/** Known values of {@link LearnedType} that the service accepts. */
export declare enum KnownLearnedType {
    /** None */
    None = "None",
    /** ViaServiceProvider */
    ViaServiceProvider = "ViaServiceProvider",
    /** ViaSession */
    ViaSession = "ViaSession"
}

/** Known values of {@link LegacyPeeringsKind} that the service accepts. */
export declare enum KnownLegacyPeeringsKind {
    /** Direct */
    Direct = "Direct",
    /** Exchange */
    Exchange = "Exchange"
}

/** Known values of {@link LookingGlassCommand} that the service accepts. */
export declare enum KnownLookingGlassCommand {
    /** Traceroute */
    Traceroute = "Traceroute",
    /** Ping */
    Ping = "Ping",
    /** BgpRoute */
    BgpRoute = "BgpRoute"
}

/** Known values of {@link LookingGlassSourceType} that the service accepts. */
export declare enum KnownLookingGlassSourceType {
    /** EdgeSite */
    EdgeSite = "EdgeSite",
    /** AzureRegion */
    AzureRegion = "AzureRegion"
}

/** Known values of {@link PeeringLocationsDirectPeeringType} that the service accepts. */
export declare enum KnownPeeringLocationsDirectPeeringType {
    /** Edge */
    Edge = "Edge",
    /** Transit */
    Transit = "Transit",
    /** Cdn */
    Cdn = "Cdn",
    /** Internal */
    Internal = "Internal",
    /** Ix */
    Ix = "Ix",
    /** IxRs */
    IxRs = "IxRs",
    /** Voice */
    Voice = "Voice"
}

/** Known values of {@link PeeringLocationsKind} that the service accepts. */
export declare enum KnownPeeringLocationsKind {
    /** Direct */
    Direct = "Direct",
    /** Exchange */
    Exchange = "Exchange"
}

/** Known values of {@link PrefixValidationState} that the service accepts. */
export declare enum KnownPrefixValidationState {
    /** None */
    None = "None",
    /** Invalid */
    Invalid = "Invalid",
    /** Verified */
    Verified = "Verified",
    /** Failed */
    Failed = "Failed",
    /** Pending */
    Pending = "Pending",
    /** Warning */
    Warning = "Warning",
    /** Unknown */
    Unknown = "Unknown"
}

/** Known values of {@link ProvisioningState} that the service accepts. */
export declare enum KnownProvisioningState {
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Updating */
    Updating = "Updating",
    /** Deleting */
    Deleting = "Deleting",
    /** Failed */
    Failed = "Failed"
}

/** Known values of {@link Role} that the service accepts. */
export declare enum KnownRole {
    /** Noc */
    Noc = "Noc",
    /** Policy */
    Policy = "Policy",
    /** Technical */
    Technical = "Technical",
    /** Service */
    Service = "Service",
    /** Escalation */
    Escalation = "Escalation",
    /** Other */
    Other = "Other"
}

/** Known values of {@link SessionAddressProvider} that the service accepts. */
export declare enum KnownSessionAddressProvider {
    /** Microsoft */
    Microsoft = "Microsoft",
    /** Peer */
    Peer = "Peer"
}

/** Known values of {@link SessionStateV4} that the service accepts. */
export declare enum KnownSessionStateV4 {
    /** None */
    None = "None",
    /** Idle */
    Idle = "Idle",
    /** Connect */
    Connect = "Connect",
    /** Active */
    Active = "Active",
    /** OpenSent */
    OpenSent = "OpenSent",
    /** OpenConfirm */
    OpenConfirm = "OpenConfirm",
    /** OpenReceived */
    OpenReceived = "OpenReceived",
    /** Established */
    Established = "Established",
    /** PendingAdd */
    PendingAdd = "PendingAdd",
    /** PendingUpdate */
    PendingUpdate = "PendingUpdate",
    /** PendingRemove */
    PendingRemove = "PendingRemove"
}

/** Known values of {@link SessionStateV6} that the service accepts. */
export declare enum KnownSessionStateV6 {
    /** None */
    None = "None",
    /** Idle */
    Idle = "Idle",
    /** Connect */
    Connect = "Connect",
    /** Active */
    Active = "Active",
    /** OpenSent */
    OpenSent = "OpenSent",
    /** OpenConfirm */
    OpenConfirm = "OpenConfirm",
    /** OpenReceived */
    OpenReceived = "OpenReceived",
    /** Established */
    Established = "Established",
    /** PendingAdd */
    PendingAdd = "PendingAdd",
    /** PendingUpdate */
    PendingUpdate = "PendingUpdate",
    /** PendingRemove */
    PendingRemove = "PendingRemove"
}

/** Known values of {@link Size} that the service accepts. */
export declare enum KnownSize {
    /** Free */
    Free = "Free",
    /** Metered */
    Metered = "Metered",
    /** Unlimited */
    Unlimited = "Unlimited"
}

/** Known values of {@link Tier} that the service accepts. */
export declare enum KnownTier {
    /** Basic */
    Basic = "Basic",
    /** Premium */
    Premium = "Premium"
}

/** Known values of {@link ValidationState} that the service accepts. */
export declare enum KnownValidationState {
    /** None */
    None = "None",
    /** Pending */
    Pending = "Pending",
    /** Approved */
    Approved = "Approved",
    /** Failed */
    Failed = "Failed"
}

/**
 * Defines values for LearnedType. \
 * {@link KnownLearnedType} can be used interchangeably with LearnedType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **ViaServiceProvider** \
 * **ViaSession**
 */
export declare type LearnedType = string;

/** Interface representing a LegacyPeerings. */
export declare interface LegacyPeerings {
    /**
     * Lists all of the legacy peerings under the given subscription matching the specified kind and
     * location.
     * @param peeringLocation The location of the peering.
     * @param kind The kind of the peering.
     * @param options The options parameters.
     */
    list(peeringLocation: string, kind: LegacyPeeringsKind, options?: LegacyPeeringsListOptionalParams): PagedAsyncIterableIterator<Peering>;
}

/**
 * Defines values for LegacyPeeringsKind. \
 * {@link KnownLegacyPeeringsKind} can be used interchangeably with LegacyPeeringsKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Direct** \
 * **Exchange**
 */
export declare type LegacyPeeringsKind = string;

/** Optional parameters. */
export declare interface LegacyPeeringsListNextOptionalParams extends coreClient.OperationOptions {
    /** The ASN number associated with a legacy peering. */
    asn?: number;
}

/** Contains response data for the listNext operation. */
export declare type LegacyPeeringsListNextResponse = PeeringListResult;

/** Optional parameters. */
export declare interface LegacyPeeringsListOptionalParams extends coreClient.OperationOptions {
    /** The ASN number associated with a legacy peering. */
    asn?: number;
}

/** Contains response data for the list operation. */
export declare type LegacyPeeringsListResponse = PeeringListResult;

/** The properties that define a Log Analytics Workspace. */
export declare interface LogAnalyticsWorkspaceProperties {
    /**
     * The Workspace ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly workspaceID?: string;
    /**
     * The Workspace Key.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly key?: string;
    /**
     * The list of connected agents.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly connectedAgents?: string[];
}

/** Interface representing a LookingGlass. */
export declare interface LookingGlass {
    /**
     * Run looking glass functionality
     * @param command The command to be executed: ping, traceroute, bgpRoute.
     * @param sourceType The type of the source: Edge site or Azure Region.
     * @param sourceLocation The location of the source.
     * @param destinationIP The IP address of the destination.
     * @param options The options parameters.
     */
    invoke(command: LookingGlassCommand, sourceType: LookingGlassSourceType, sourceLocation: string, destinationIP: string, options?: LookingGlassInvokeOptionalParams): Promise<LookingGlassInvokeResponse>;
}

/**
 * Defines values for LookingGlassCommand. \
 * {@link KnownLookingGlassCommand} can be used interchangeably with LookingGlassCommand,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Traceroute** \
 * **Ping** \
 * **BgpRoute**
 */
export declare type LookingGlassCommand = string;

/** Optional parameters. */
export declare interface LookingGlassInvokeOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the invoke operation. */
export declare type LookingGlassInvokeResponse = LookingGlassOutput;

/** Looking glass output model */
export declare interface LookingGlassOutput {
    /** Invoked command */
    command?: Command;
    /** Output of the command */
    output?: string;
}

/**
 * Defines values for LookingGlassSourceType. \
 * {@link KnownLookingGlassSourceType} can be used interchangeably with LookingGlassSourceType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **EdgeSite** \
 * **AzureRegion**
 */
export declare type LookingGlassSourceType = string;

/** Dimensions of the metric. */
export declare interface MetricDimension {
    /**
     * Name of the dimension.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Localized friendly display name of the dimension.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly displayName?: string;
}

/** Specifications of the Metrics for Azure Monitoring. */
export declare interface MetricSpecification {
    /**
     * Name of the metric.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Localized friendly display name of the metric.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly displayName?: string;
    /**
     * Localized friendly description of the metric.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly displayDescription?: string;
    /**
     * Unit that makes sense for the metric.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly unit?: string;
    /**
     * Aggregation type will be set to one of the values: Average, Minimum, Maximum, Total, Count.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly aggregationType?: string;
    /**
     * Supported time grain types for the metric.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly supportedTimeGrainTypes?: string[];
    /**
     * Dimensions of the metric.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dimensions?: MetricDimension[];
}

/** The peering API operation. */
export declare interface Operation {
    /**
     * The name of the operation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The information related to the operation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly display?: OperationDisplayInfo;
    /**
     * The flag that indicates whether the operation applies to data plane.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isDataAction?: boolean;
    /**
     * Service specification payload.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly serviceSpecification?: ServiceSpecification;
}

/** The information related to the operation. */
export declare interface OperationDisplayInfo {
    /**
     * The name of the resource provider.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provider?: string;
    /**
     * The type of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resource?: string;
    /**
     * The name of the operation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly operation?: string;
    /**
     * The description of the operation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly description?: string;
}

/** The paginated list of peering API operations. */
export declare interface OperationListResult {
    /** The list of peering API operations. */
    value?: Operation[];
    /** The link to fetch the next page of peering API operations. */
    nextLink?: string;
}

/** Interface representing a Operations. */
export declare interface Operations {
    /**
     * Lists all of the available API operations for peering resources.
     * @param options The options parameters.
     */
    list(options?: OperationsListOptionalParams): PagedAsyncIterableIterator<Operation>;
}

/** Optional parameters. */
export declare interface OperationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export declare interface OperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OperationsListResponse = OperationListResult;

/** The essential information related to the peer's ASN. */
export declare interface PeerAsn extends Resource {
    /** The Autonomous System Number (ASN) of the peer. */
    peerAsn?: number;
    /** The contact details of the peer. */
    peerContactDetail?: ContactDetail[];
    /** The name of the peer. */
    peerName?: string;
    /**
     * The validation state of the ASN associated with the peer.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly validationState?: ValidationState;
    /**
     * The error message for the validation state
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly errorMessage?: string;
}

/** The paginated list of peer ASNs. */
export declare interface PeerAsnListResult {
    /** The list of peer ASNs. */
    value?: PeerAsn[];
    /** The link to fetch the next page of peer ASNs. */
    nextLink?: string;
}

/** Interface representing a PeerAsns. */
export declare interface PeerAsns {
    /**
     * Lists all of the peer ASNs under the given subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: PeerAsnsListBySubscriptionOptionalParams): PagedAsyncIterableIterator<PeerAsn>;
    /**
     * Gets the peer ASN with the specified name under the given subscription.
     * @param peerAsnName The peer ASN name.
     * @param options The options parameters.
     */
    get(peerAsnName: string, options?: PeerAsnsGetOptionalParams): Promise<PeerAsnsGetResponse>;
    /**
     * Creates a new peer ASN or updates an existing peer ASN with the specified name under the given
     * subscription.
     * @param peerAsnName The peer ASN name.
     * @param peerAsn The peer ASN.
     * @param options The options parameters.
     */
    createOrUpdate(peerAsnName: string, peerAsn: PeerAsn, options?: PeerAsnsCreateOrUpdateOptionalParams): Promise<PeerAsnsCreateOrUpdateResponse>;
    /**
     * Deletes an existing peer ASN with the specified name under the given subscription.
     * @param peerAsnName The peer ASN name.
     * @param options The options parameters.
     */
    delete(peerAsnName: string, options?: PeerAsnsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface PeerAsnsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type PeerAsnsCreateOrUpdateResponse = PeerAsn;

/** Optional parameters. */
export declare interface PeerAsnsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface PeerAsnsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type PeerAsnsGetResponse = PeerAsn;

/** Optional parameters. */
export declare interface PeerAsnsListBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionNext operation. */
export declare type PeerAsnsListBySubscriptionNextResponse = PeerAsnListResult;

/** Optional parameters. */
export declare interface PeerAsnsListBySubscriptionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscription operation. */
export declare type PeerAsnsListBySubscriptionResponse = PeerAsnListResult;

/** Peering is a logical representation of a set of connections to the Microsoft Cloud Edge at a location. */
export declare interface Peering extends Resource {
    /** The SKU that defines the tier and kind of the peering. */
    sku: PeeringSku;
    /** The kind of the peering. */
    kind: Kind;
    /** The location of the resource. */
    location: string;
    /** The resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** The properties that define a direct peering. */
    direct?: PeeringPropertiesDirect;
    /** The properties that define an exchange peering. */
    exchange?: PeeringPropertiesExchange;
    /** The location of the peering. */
    peeringLocation?: string;
    /**
     * The provisioning state of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
}

/** The properties that define a peering bandwidth offer. */
export declare interface PeeringBandwidthOffer {
    /** The name of the bandwidth offer. */
    offerName?: string;
    /** The value of the bandwidth offer in Mbps. */
    valueInMbps?: number;
}

/** The paginated list of peerings. */
export declare interface PeeringListResult {
    /** The list of peerings. */
    value?: Peering[];
    /** The link to fetch the next page of peerings. */
    nextLink?: string;
}

/** Peering location is where connectivity could be established to the Microsoft Cloud Edge. */
export declare interface PeeringLocation extends Resource {
    /** The kind of peering that the peering location supports. */
    kind?: Kind;
    /** The properties that define a direct peering location. */
    direct?: PeeringLocationPropertiesDirect;
    /** The properties that define an exchange peering location. */
    exchange?: PeeringLocationPropertiesExchange;
    /** The name of the peering location. */
    peeringLocation?: string;
    /** The country in which the peering location exists. */
    country?: string;
    /** The Azure region associated with the peering location. */
    azureRegion?: string;
}

/** The paginated list of peering locations. */
export declare interface PeeringLocationListResult {
    /** The list of peering locations. */
    value?: PeeringLocation[];
    /** The link to fetch the next page of peering locations. */
    nextLink?: string;
}

/** The properties that define a direct peering location. */
export declare interface PeeringLocationPropertiesDirect {
    /** The list of direct peering facilities at the peering location. */
    peeringFacilities?: DirectPeeringFacility[];
    /** The list of bandwidth offers available at the peering location. */
    bandwidthOffers?: PeeringBandwidthOffer[];
}

/** The properties that define an exchange peering location. */
export declare interface PeeringLocationPropertiesExchange {
    /** The list of exchange peering facilities at the peering location. */
    peeringFacilities?: ExchangePeeringFacility[];
}

/** Interface representing a PeeringLocations. */
export declare interface PeeringLocations {
    /**
     * Lists all of the available peering locations for the specified kind of peering.
     * @param kind The kind of the peering.
     * @param options The options parameters.
     */
    list(kind: PeeringLocationsKind, options?: PeeringLocationsListOptionalParams): PagedAsyncIterableIterator<PeeringLocation>;
}

/**
 * Defines values for PeeringLocationsDirectPeeringType. \
 * {@link KnownPeeringLocationsDirectPeeringType} can be used interchangeably with PeeringLocationsDirectPeeringType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Edge** \
 * **Transit** \
 * **Cdn** \
 * **Internal** \
 * **Ix** \
 * **IxRs** \
 * **Voice**
 */
export declare type PeeringLocationsDirectPeeringType = string;

/**
 * Defines values for PeeringLocationsKind. \
 * {@link KnownPeeringLocationsKind} can be used interchangeably with PeeringLocationsKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Direct** \
 * **Exchange**
 */
export declare type PeeringLocationsKind = string;

/** Optional parameters. */
export declare interface PeeringLocationsListNextOptionalParams extends coreClient.OperationOptions {
    /** The type of direct peering. */
    directPeeringType?: PeeringLocationsDirectPeeringType;
}

/** Contains response data for the listNext operation. */
export declare type PeeringLocationsListNextResponse = PeeringLocationListResult;

/** Optional parameters. */
export declare interface PeeringLocationsListOptionalParams extends coreClient.OperationOptions {
    /** The type of direct peering. */
    directPeeringType?: PeeringLocationsDirectPeeringType;
}

/** Contains response data for the list operation. */
export declare type PeeringLocationsListResponse = PeeringLocationListResult;

export declare class PeeringManagementClient extends coreClient.ServiceClient {
    $host: string;
    subscriptionId: string;
    apiVersion: string;
    /**
     * Initializes a new instance of the PeeringManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The Azure subscription ID.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: PeeringManagementClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    /**
     * Checks if the peering service provider is present within 1000 miles of customer's location
     * @param checkServiceProviderAvailabilityInput The CheckServiceProviderAvailabilityInput indicating
     *                                              customer location and service provider.
     * @param options The options parameters.
     */
    checkServiceProviderAvailability(checkServiceProviderAvailabilityInput: CheckServiceProviderAvailabilityInput, options?: CheckServiceProviderAvailabilityOptionalParams): Promise<CheckServiceProviderAvailabilityResponse>;
    cdnPeeringPrefixes: CdnPeeringPrefixes;
    legacyPeerings: LegacyPeerings;
    lookingGlass: LookingGlass;
    operations: Operations;
    peerAsns: PeerAsns;
    peeringLocations: PeeringLocations;
    registeredAsns: RegisteredAsns;
    registeredPrefixes: RegisteredPrefixes;
    peerings: Peerings;
    receivedRoutes: ReceivedRoutes;
    connectionMonitorTests: ConnectionMonitorTests;
    peeringServiceCountries: PeeringServiceCountries;
    peeringServiceLocations: PeeringServiceLocations;
    prefixes: Prefixes;
    peeringServiceProviders: PeeringServiceProviders;
    peeringServices: PeeringServices;
}

/** Optional parameters. */
export declare interface PeeringManagementClientOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** The properties that define a direct peering. */
export declare interface PeeringPropertiesDirect {
    /** The set of connections that constitute a direct peering. */
    connections?: DirectConnection[];
    /**
     * The flag that indicates whether or not the peering is used for peering service.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly useForPeeringService?: boolean;
    /** The reference of the peer ASN. */
    peerAsn?: SubResource;
    /** The type of direct peering. */
    directPeeringType?: DirectPeeringType;
}

/** The properties that define an exchange peering. */
export declare interface PeeringPropertiesExchange {
    /** The set of connections that constitute an exchange peering. */
    connections?: ExchangeConnection[];
    /** The reference of the peer ASN. */
    peerAsn?: SubResource;
}

/** The properties that define a received route. */
export declare interface PeeringReceivedRoute {
    /**
     * The prefix.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly prefix?: string;
    /**
     * The next hop for the prefix.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextHop?: string;
    /**
     * The AS path for the prefix.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly asPath?: string;
    /**
     * The origin AS change information for the prefix.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly originAsValidationState?: string;
    /**
     * The RPKI validation state for the prefix and origin AS that's listed in the AS path.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly rpkiValidationState?: string;
    /**
     * The authority which holds the Route Origin Authorization record for the prefix, if any.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly trustAnchor?: string;
    /**
     * The received timestamp associated with the prefix.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly receivedTimestamp?: string;
}

/** The paginated list of received routes for the peering. */
export declare interface PeeringReceivedRouteListResult {
    /** The list of received routes for the peering. */
    value?: PeeringReceivedRoute[];
    /** The link to fetch the next page of received routes for the peering. */
    nextLink?: string;
}

/** The customer's ASN that is registered by the peering service provider. */
export declare interface PeeringRegisteredAsn extends Resource {
    /** The customer's ASN from which traffic originates. */
    asn?: number;
    /**
     * The peering service prefix key that is to be shared with the customer.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly peeringServicePrefixKey?: string;
    /**
     * The provisioning state of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
}

/** The paginated list of peering registered ASNs. */
export declare interface PeeringRegisteredAsnListResult {
    /** The list of peering registered ASNs. */
    value?: PeeringRegisteredAsn[];
    /** The link to fetch the next page of peering registered ASNs. */
    nextLink?: string;
}

/** The customer's prefix that is registered by the peering service provider. */
export declare interface PeeringRegisteredPrefix extends Resource {
    /** The customer's prefix from which traffic originates. */
    prefix?: string;
    /**
     * The prefix validation state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly prefixValidationState?: PrefixValidationState;
    /**
     * The peering service prefix key that is to be shared with the customer.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly peeringServicePrefixKey?: string;
    /**
     * The error message associated with the validation state, if any.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly errorMessage?: string;
    /**
     * The provisioning state of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
}

/** The paginated list of peering registered prefixes. */
export declare interface PeeringRegisteredPrefixListResult {
    /** The list of peering registered prefixes. */
    value?: PeeringRegisteredPrefix[];
    /** The link to fetch the next page of peering registered prefixes. */
    nextLink?: string;
}

/** Interface representing a Peerings. */
export declare interface Peerings {
    /**
     * Lists all of the peerings under the given subscription and resource group.
     * @param resourceGroupName The name of the resource group.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: PeeringsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<Peering>;
    /**
     * Lists all of the peerings under the given subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: PeeringsListBySubscriptionOptionalParams): PagedAsyncIterableIterator<Peering>;
    /**
     * Gets an existing peering with the specified name under the given subscription and resource group.
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, peeringName: string, options?: PeeringsGetOptionalParams): Promise<PeeringsGetResponse>;
    /**
     * Creates a new peering or updates an existing peering with the specified name under the given
     * subscription and resource group.
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param peering The properties needed to create or update a peering.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, peeringName: string, peering: Peering, options?: PeeringsCreateOrUpdateOptionalParams): Promise<PeeringsCreateOrUpdateResponse>;
    /**
     * Deletes an existing peering with the specified name under the given subscription and resource group.
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, peeringName: string, options?: PeeringsDeleteOptionalParams): Promise<void>;
    /**
     * Updates tags for a peering with the specified name under the given subscription and resource group.
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param tags The resource tags.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, peeringName: string, tags: ResourceTags, options?: PeeringsUpdateOptionalParams): Promise<PeeringsUpdateResponse>;
}

/** Optional parameters. */
export declare interface PeeringsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type PeeringsCreateOrUpdateResponse = Peering;

/** Optional parameters. */
export declare interface PeeringsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Peering Service */
export declare interface PeeringService extends Resource {
    /** The SKU that defines the type of the peering service. */
    sku?: PeeringServiceSku;
    /** The location of the resource. */
    location: string;
    /** The resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** The location (state/province) of the customer. */
    peeringServiceLocation?: string;
    /** The name of the service provider. */
    peeringServiceProvider?: string;
    /**
     * The provisioning state of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /** The primary peering (Microsoft/service provider) location to be used for customer traffic. */
    providerPrimaryPeeringLocation?: string;
    /** The backup peering (Microsoft/service provider) location to be used for customer traffic. */
    providerBackupPeeringLocation?: string;
    /** The Log Analytics Workspace Properties */
    logAnalyticsWorkspaceProperties?: LogAnalyticsWorkspaceProperties;
}

/** Interface representing a PeeringServiceCountries. */
export declare interface PeeringServiceCountries {
    /**
     * Lists all of the available countries for peering service.
     * @param options The options parameters.
     */
    list(options?: PeeringServiceCountriesListOptionalParams): PagedAsyncIterableIterator<PeeringServiceCountry>;
}

/** Optional parameters. */
export declare interface PeeringServiceCountriesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type PeeringServiceCountriesListNextResponse = PeeringServiceCountryListResult;

/** Optional parameters. */
export declare interface PeeringServiceCountriesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type PeeringServiceCountriesListResponse = PeeringServiceCountryListResult;

/** The peering service country. */
export declare interface PeeringServiceCountry extends Resource {
}

/** The paginated list of peering service countries. */
export declare interface PeeringServiceCountryListResult {
    /** The list of peering service countries. */
    value?: PeeringServiceCountry[];
    /** The link to fetch the next page of peering service countries. */
    nextLink?: string;
}

/** The paginated list of peering services. */
export declare interface PeeringServiceListResult {
    /** The list of peering services. */
    value?: PeeringService[];
    /** The link to fetch the next page of peering services. */
    nextLink?: string;
}

/** The peering service location. */
export declare interface PeeringServiceLocation extends Resource {
    /** Country of the customer */
    country?: string;
    /** State of the customer */
    state?: string;
    /** Azure region for the location */
    azureRegion?: string;
}

/** The paginated list of peering service locations. */
export declare interface PeeringServiceLocationListResult {
    /** The list of peering service locations. */
    value?: PeeringServiceLocation[];
    /** The link to fetch the next page of peering service locations. */
    nextLink?: string;
}

/** Interface representing a PeeringServiceLocations. */
export declare interface PeeringServiceLocations {
    /**
     * Lists all of the available locations for peering service.
     * @param options The options parameters.
     */
    list(options?: PeeringServiceLocationsListOptionalParams): PagedAsyncIterableIterator<PeeringServiceLocation>;
}

/** Optional parameters. */
export declare interface PeeringServiceLocationsListNextOptionalParams extends coreClient.OperationOptions {
    /** The country of interest, in which the locations are to be present. */
    country?: string;
}

/** Contains response data for the listNext operation. */
export declare type PeeringServiceLocationsListNextResponse = PeeringServiceLocationListResult;

/** Optional parameters. */
export declare interface PeeringServiceLocationsListOptionalParams extends coreClient.OperationOptions {
    /** The country of interest, in which the locations are to be present. */
    country?: string;
}

/** Contains response data for the list operation. */
export declare type PeeringServiceLocationsListResponse = PeeringServiceLocationListResult;

/** The peering service prefix class. */
export declare interface PeeringServicePrefix extends Resource {
    /** The prefix from which your traffic originates. */
    prefix?: string;
    /**
     * The prefix validation state
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly prefixValidationState?: PrefixValidationState;
    /**
     * The prefix learned type
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly learnedType?: LearnedType;
    /**
     * The error message for validation state
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly errorMessage?: string;
    /**
     * The list of events for peering service prefix
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly events?: PeeringServicePrefixEvent[];
    /** The peering service prefix key */
    peeringServicePrefixKey?: string;
    /**
     * The provisioning state of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
}

/** The details of the event associated with a prefix. */
export declare interface PeeringServicePrefixEvent {
    /**
     * The timestamp of the event associated with a prefix.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly eventTimestamp?: Date;
    /**
     * The type of the event associated with a prefix.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly eventType?: string;
    /**
     * The summary of the event associated with a prefix.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly eventSummary?: string;
    /**
     * The level of the event associated with a prefix.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly eventLevel?: string;
    /**
     * The description of the event associated with a prefix.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly eventDescription?: string;
}

/** The paginated list of peering service prefixes. */
export declare interface PeeringServicePrefixListResult {
    /** The list of peering service prefixes. */
    value?: PeeringServicePrefix[];
    /** The link to fetch the next page of peering service prefixes. */
    nextLink?: string;
}

/** PeeringService provider */
export declare interface PeeringServiceProvider extends Resource {
    /** The name of the service provider. */
    serviceProviderName?: string;
    /** The list of locations at which the service provider peers with Microsoft. */
    peeringLocations?: string[];
}

/** The paginated list of peering service providers. */
export declare interface PeeringServiceProviderListResult {
    /** The list of peering service providers. */
    value?: PeeringServiceProvider[];
    /** The link to fetch the next page of peering service providers. */
    nextLink?: string;
}

/** Interface representing a PeeringServiceProviders. */
export declare interface PeeringServiceProviders {
    /**
     * Lists all of the available peering service locations for the specified kind of peering.
     * @param options The options parameters.
     */
    list(options?: PeeringServiceProvidersListOptionalParams): PagedAsyncIterableIterator<PeeringServiceProvider>;
}

/** Optional parameters. */
export declare interface PeeringServiceProvidersListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type PeeringServiceProvidersListNextResponse = PeeringServiceProviderListResult;

/** Optional parameters. */
export declare interface PeeringServiceProvidersListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type PeeringServiceProvidersListResponse = PeeringServiceProviderListResult;

/** Interface representing a PeeringServices. */
export declare interface PeeringServices {
    /**
     * Lists all of the peering services under the given subscription and resource group.
     * @param resourceGroupName The name of the resource group.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: PeeringServicesListByResourceGroupOptionalParams): PagedAsyncIterableIterator<PeeringService>;
    /**
     * Lists all of the peerings under the given subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: PeeringServicesListBySubscriptionOptionalParams): PagedAsyncIterableIterator<PeeringService>;
    /**
     * Gets an existing peering service with the specified name under the given subscription and resource
     * group.
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, peeringServiceName: string, options?: PeeringServicesGetOptionalParams): Promise<PeeringServicesGetResponse>;
    /**
     * Creates a new peering service or updates an existing peering with the specified name under the given
     * subscription and resource group.
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param peeringService The properties needed to create or update a peering service.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, peeringServiceName: string, peeringService: PeeringService, options?: PeeringServicesCreateOrUpdateOptionalParams): Promise<PeeringServicesCreateOrUpdateResponse>;
    /**
     * Deletes an existing peering service with the specified name under the given subscription and
     * resource group.
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, peeringServiceName: string, options?: PeeringServicesDeleteOptionalParams): Promise<void>;
    /**
     * Updates tags for a peering service with the specified name under the given subscription and resource
     * group.
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param tags The resource tags.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, peeringServiceName: string, tags: ResourceTags, options?: PeeringServicesUpdateOptionalParams): Promise<PeeringServicesUpdateResponse>;
    /**
     * Initialize Peering Service for Connection Monitor functionality
     * @param options The options parameters.
     */
    initializeConnectionMonitor(options?: PeeringServicesInitializeConnectionMonitorOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface PeeringServicesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type PeeringServicesCreateOrUpdateResponse = PeeringService;

/** Optional parameters. */
export declare interface PeeringServicesDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface PeeringServicesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type PeeringServicesGetResponse = PeeringService;

/** Optional parameters. */
export declare interface PeeringServicesInitializeConnectionMonitorOptionalParams extends coreClient.OperationOptions {
}

/** The SKU that defines the type of the peering service. */
export declare interface PeeringServiceSku {
    /** The name of the peering service SKU. */
    name?: string;
}

/** Optional parameters. */
export declare interface PeeringServicesListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type PeeringServicesListByResourceGroupNextResponse = PeeringServiceListResult;

/** Optional parameters. */
export declare interface PeeringServicesListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type PeeringServicesListByResourceGroupResponse = PeeringServiceListResult;

/** Optional parameters. */
export declare interface PeeringServicesListBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionNext operation. */
export declare type PeeringServicesListBySubscriptionNextResponse = PeeringServiceListResult;

/** Optional parameters. */
export declare interface PeeringServicesListBySubscriptionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscription operation. */
export declare type PeeringServicesListBySubscriptionResponse = PeeringServiceListResult;

/** Optional parameters. */
export declare interface PeeringServicesUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type PeeringServicesUpdateResponse = PeeringService;

/** Optional parameters. */
export declare interface PeeringsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type PeeringsGetResponse = Peering;

/** The SKU that defines the tier and kind of the peering. */
export declare interface PeeringSku {
    /** The name of the peering SKU. */
    name?: string;
    /**
     * The tier of the peering SKU.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tier?: Tier;
    /**
     * The family of the peering SKU.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly family?: Family;
    /**
     * The size of the peering SKU.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly size?: Size;
}

/** Optional parameters. */
export declare interface PeeringsListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type PeeringsListByResourceGroupNextResponse = PeeringListResult;

/** Optional parameters. */
export declare interface PeeringsListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type PeeringsListByResourceGroupResponse = PeeringListResult;

/** Optional parameters. */
export declare interface PeeringsListBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionNext operation. */
export declare type PeeringsListBySubscriptionNextResponse = PeeringListResult;

/** Optional parameters. */
export declare interface PeeringsListBySubscriptionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscription operation. */
export declare type PeeringsListBySubscriptionResponse = PeeringListResult;

/** Optional parameters. */
export declare interface PeeringsUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type PeeringsUpdateResponse = Peering;

/** Interface representing a Prefixes. */
export declare interface Prefixes {
    /**
     * Lists all prefixes under the given subscription, resource group and peering service.
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param options The options parameters.
     */
    listByPeeringService(resourceGroupName: string, peeringServiceName: string, options?: PrefixesListByPeeringServiceOptionalParams): PagedAsyncIterableIterator<PeeringServicePrefix>;
    /**
     * Gets an existing prefix with the specified name under the given subscription, resource group and
     * peering service.
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param prefixName The name of the prefix.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, peeringServiceName: string, prefixName: string, options?: PrefixesGetOptionalParams): Promise<PrefixesGetResponse>;
    /**
     * Creates a new prefix with the specified name under the given subscription, resource group and
     * peering service.
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param prefixName The name of the prefix.
     * @param peeringServicePrefix The properties needed to create a prefix.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, peeringServiceName: string, prefixName: string, peeringServicePrefix: PeeringServicePrefix, options?: PrefixesCreateOrUpdateOptionalParams): Promise<PrefixesCreateOrUpdateResponse>;
    /**
     * Deletes an existing prefix with the specified name under the given subscription, resource group and
     * peering service.
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param prefixName The name of the prefix.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, peeringServiceName: string, prefixName: string, options?: PrefixesDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface PrefixesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type PrefixesCreateOrUpdateResponse = PeeringServicePrefix;

/** Optional parameters. */
export declare interface PrefixesDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface PrefixesGetOptionalParams extends coreClient.OperationOptions {
    /** The properties to be expanded. */
    expand?: string;
}

/** Contains response data for the get operation. */
export declare type PrefixesGetResponse = PeeringServicePrefix;

/** Optional parameters. */
export declare interface PrefixesListByPeeringServiceNextOptionalParams extends coreClient.OperationOptions {
    /** The properties to be expanded. */
    expand?: string;
}

/** Contains response data for the listByPeeringServiceNext operation. */
export declare type PrefixesListByPeeringServiceNextResponse = PeeringServicePrefixListResult;

/** Optional parameters. */
export declare interface PrefixesListByPeeringServiceOptionalParams extends coreClient.OperationOptions {
    /** The properties to be expanded. */
    expand?: string;
}

/** Contains response data for the listByPeeringService operation. */
export declare type PrefixesListByPeeringServiceResponse = PeeringServicePrefixListResult;

/**
 * Defines values for PrefixValidationState. \
 * {@link KnownPrefixValidationState} can be used interchangeably with PrefixValidationState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Invalid** \
 * **Verified** \
 * **Failed** \
 * **Pending** \
 * **Warning** \
 * **Unknown**
 */
export declare type PrefixValidationState = string;

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Updating** \
 * **Deleting** \
 * **Failed**
 */
export declare type ProvisioningState = string;

/** Interface representing a ReceivedRoutes. */
export declare interface ReceivedRoutes {
    /**
     * Lists the prefixes received over the specified peering under the given subscription and resource
     * group.
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param options The options parameters.
     */
    listByPeering(resourceGroupName: string, peeringName: string, options?: ReceivedRoutesListByPeeringOptionalParams): PagedAsyncIterableIterator<PeeringReceivedRoute>;
}

/** Optional parameters. */
export declare interface ReceivedRoutesListByPeeringNextOptionalParams extends coreClient.OperationOptions {
    /** The optional prefix that can be used to filter the routes. */
    prefix?: string;
    /** The optional AS path that can be used to filter the routes. */
    asPath?: string;
    /** The optional origin AS validation state that can be used to filter the routes. */
    originAsValidationState?: string;
    /** The optional RPKI validation state that can be used to filter the routes. */
    rpkiValidationState?: string;
    /** The optional page continuation token that is used in the event of paginated result. */
    skipToken?: string;
}

/** Contains response data for the listByPeeringNext operation. */
export declare type ReceivedRoutesListByPeeringNextResponse = PeeringReceivedRouteListResult;

/** Optional parameters. */
export declare interface ReceivedRoutesListByPeeringOptionalParams extends coreClient.OperationOptions {
    /** The optional prefix that can be used to filter the routes. */
    prefix?: string;
    /** The optional AS path that can be used to filter the routes. */
    asPath?: string;
    /** The optional origin AS validation state that can be used to filter the routes. */
    originAsValidationState?: string;
    /** The optional RPKI validation state that can be used to filter the routes. */
    rpkiValidationState?: string;
    /** The optional page continuation token that is used in the event of paginated result. */
    skipToken?: string;
}

/** Contains response data for the listByPeering operation. */
export declare type ReceivedRoutesListByPeeringResponse = PeeringReceivedRouteListResult;

/** Interface representing a RegisteredAsns. */
export declare interface RegisteredAsns {
    /**
     * Lists all registered ASNs under the given subscription, resource group and peering.
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param options The options parameters.
     */
    listByPeering(resourceGroupName: string, peeringName: string, options?: RegisteredAsnsListByPeeringOptionalParams): PagedAsyncIterableIterator<PeeringRegisteredAsn>;
    /**
     * Gets an existing registered ASN with the specified name under the given subscription, resource group
     * and peering.
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param registeredAsnName The name of the registered ASN.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, peeringName: string, registeredAsnName: string, options?: RegisteredAsnsGetOptionalParams): Promise<RegisteredAsnsGetResponse>;
    /**
     * Creates a new registered ASN with the specified name under the given subscription, resource group
     * and peering.
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param registeredAsnName The name of the ASN.
     * @param registeredAsn The properties needed to create a registered ASN.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, peeringName: string, registeredAsnName: string, registeredAsn: PeeringRegisteredAsn, options?: RegisteredAsnsCreateOrUpdateOptionalParams): Promise<RegisteredAsnsCreateOrUpdateResponse>;
    /**
     * Deletes an existing registered ASN with the specified name under the given subscription, resource
     * group and peering.
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param registeredAsnName The name of the registered ASN.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, peeringName: string, registeredAsnName: string, options?: RegisteredAsnsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface RegisteredAsnsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type RegisteredAsnsCreateOrUpdateResponse = PeeringRegisteredAsn;

/** Optional parameters. */
export declare interface RegisteredAsnsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface RegisteredAsnsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type RegisteredAsnsGetResponse = PeeringRegisteredAsn;

/** Optional parameters. */
export declare interface RegisteredAsnsListByPeeringNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByPeeringNext operation. */
export declare type RegisteredAsnsListByPeeringNextResponse = PeeringRegisteredAsnListResult;

/** Optional parameters. */
export declare interface RegisteredAsnsListByPeeringOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByPeering operation. */
export declare type RegisteredAsnsListByPeeringResponse = PeeringRegisteredAsnListResult;

/** Interface representing a RegisteredPrefixes. */
export declare interface RegisteredPrefixes {
    /**
     * Lists all registered prefixes under the given subscription, resource group and peering.
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param options The options parameters.
     */
    listByPeering(resourceGroupName: string, peeringName: string, options?: RegisteredPrefixesListByPeeringOptionalParams): PagedAsyncIterableIterator<PeeringRegisteredPrefix>;
    /**
     * Gets an existing registered prefix with the specified name under the given subscription, resource
     * group and peering.
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param registeredPrefixName The name of the registered prefix.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, peeringName: string, registeredPrefixName: string, options?: RegisteredPrefixesGetOptionalParams): Promise<RegisteredPrefixesGetResponse>;
    /**
     * Creates a new registered prefix with the specified name under the given subscription, resource group
     * and peering.
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param registeredPrefixName The name of the registered prefix.
     * @param registeredPrefix The properties needed to create a registered prefix.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, peeringName: string, registeredPrefixName: string, registeredPrefix: PeeringRegisteredPrefix, options?: RegisteredPrefixesCreateOrUpdateOptionalParams): Promise<RegisteredPrefixesCreateOrUpdateResponse>;
    /**
     * Deletes an existing registered prefix with the specified name under the given subscription, resource
     * group and peering.
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param registeredPrefixName The name of the registered prefix.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, peeringName: string, registeredPrefixName: string, options?: RegisteredPrefixesDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface RegisteredPrefixesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type RegisteredPrefixesCreateOrUpdateResponse = PeeringRegisteredPrefix;

/** Optional parameters. */
export declare interface RegisteredPrefixesDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface RegisteredPrefixesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type RegisteredPrefixesGetResponse = PeeringRegisteredPrefix;

/** Optional parameters. */
export declare interface RegisteredPrefixesListByPeeringNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByPeeringNext operation. */
export declare type RegisteredPrefixesListByPeeringNextResponse = PeeringRegisteredPrefixListResult;

/** Optional parameters. */
export declare interface RegisteredPrefixesListByPeeringOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByPeering operation. */
export declare type RegisteredPrefixesListByPeeringResponse = PeeringRegisteredPrefixListResult;

/** The ARM resource class. */
export declare interface Resource {
    /**
     * The name of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The ID of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The type of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
}

/** The resource tags. */
export declare interface ResourceTags {
    /** Gets or sets the tags, a dictionary of descriptors arm object */
    tags?: {
        [propertyName: string]: string;
    };
}

/**
 * Defines values for Role. \
 * {@link KnownRole} can be used interchangeably with Role,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Noc** \
 * **Policy** \
 * **Technical** \
 * **Service** \
 * **Escalation** \
 * **Other**
 */
export declare type Role = string;

/** Service specification payload. */
export declare interface ServiceSpecification {
    /**
     * Specifications of the Metrics for Azure Monitoring.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly metricSpecifications?: MetricSpecification[];
}

/**
 * Defines values for SessionAddressProvider. \
 * {@link KnownSessionAddressProvider} can be used interchangeably with SessionAddressProvider,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Microsoft** \
 * **Peer**
 */
export declare type SessionAddressProvider = string;

/**
 * Defines values for SessionStateV4. \
 * {@link KnownSessionStateV4} can be used interchangeably with SessionStateV4,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Idle** \
 * **Connect** \
 * **Active** \
 * **OpenSent** \
 * **OpenConfirm** \
 * **OpenReceived** \
 * **Established** \
 * **PendingAdd** \
 * **PendingUpdate** \
 * **PendingRemove**
 */
export declare type SessionStateV4 = string;

/**
 * Defines values for SessionStateV6. \
 * {@link KnownSessionStateV6} can be used interchangeably with SessionStateV6,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Idle** \
 * **Connect** \
 * **Active** \
 * **OpenSent** \
 * **OpenConfirm** \
 * **OpenReceived** \
 * **Established** \
 * **PendingAdd** \
 * **PendingUpdate** \
 * **PendingRemove**
 */
export declare type SessionStateV6 = string;

/**
 * Defines values for Size. \
 * {@link KnownSize} can be used interchangeably with Size,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Free** \
 * **Metered** \
 * **Unlimited**
 */
export declare type Size = string;

/** The sub resource. */
export declare interface SubResource {
    /** The identifier of the referenced resource. */
    id?: string;
}

/**
 * Defines values for Tier. \
 * {@link KnownTier} can be used interchangeably with Tier,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Basic** \
 * **Premium**
 */
export declare type Tier = string;

/**
 * Defines values for ValidationState. \
 * {@link KnownValidationState} can be used interchangeably with ValidationState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Pending** \
 * **Approved** \
 * **Failed**
 */
export declare type ValidationState = string;

export { }
