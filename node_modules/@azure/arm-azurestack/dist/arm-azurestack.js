/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@azure/ms-rest-azure-js'), require('@azure/ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', '@azure/ms-rest-azure-js', '@azure/ms-rest-js'], factory) :
    (global = global || self, factory((global.Azure = global.Azure || {}, global.Azure.ArmAzurestack = {}), global.msRestAzure, global.msRest));
}(this, (function (exports, msRestAzure, msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var index = /*#__PURE__*/Object.freeze({
        __proto__: null
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TrackedResource = {
        serializedName: "TrackedResource",
        type: {
            name: "Composite",
            className: "TrackedResource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    required: true,
                    isConstant: true,
                    serializedName: "location",
                    defaultValue: 'global',
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Display = {
        serializedName: "Display",
        type: {
            name: "Composite",
            className: "Display",
            modelProperties: {
                provider: {
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Operation = {
        serializedName: "Operation",
        type: {
            name: "Composite",
            className: "Operation",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "Display"
                    }
                },
                origin: {
                    serializedName: "origin",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ErrorDetails = {
        serializedName: "ErrorDetails",
        type: {
            name: "Composite",
            className: "ErrorDetails",
            modelProperties: {
                code: {
                    readOnly: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                target: {
                    readOnly: true,
                    serializedName: "target",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ErrorResponse = {
        serializedName: "ErrorResponse",
        type: {
            name: "Composite",
            className: "ErrorResponse",
            modelProperties: {
                error: {
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "ErrorDetails"
                    }
                }
            }
        }
    };
    var OsDiskImage = {
        serializedName: "OsDiskImage",
        type: {
            name: "Composite",
            className: "OsDiskImage",
            modelProperties: {
                operatingSystem: {
                    readOnly: true,
                    serializedName: "operatingSystem",
                    type: {
                        name: "String"
                    }
                },
                sourceBlobSasUri: {
                    readOnly: true,
                    serializedName: "sourceBlobSasUri",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DataDiskImage = {
        serializedName: "DataDiskImage",
        type: {
            name: "Composite",
            className: "DataDiskImage",
            modelProperties: {
                lun: {
                    readOnly: true,
                    serializedName: "lun",
                    type: {
                        name: "Number"
                    }
                },
                sourceBlobSasUri: {
                    readOnly: true,
                    serializedName: "sourceBlobSasUri",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ExtendedProduct = {
        serializedName: "ExtendedProduct",
        type: {
            name: "Composite",
            className: "ExtendedProduct",
            modelProperties: {
                galleryPackageBlobSasUri: {
                    readOnly: true,
                    serializedName: "galleryPackageBlobSasUri",
                    type: {
                        name: "String"
                    }
                },
                productKind: {
                    readOnly: true,
                    serializedName: "productKind",
                    type: {
                        name: "String"
                    }
                },
                computeRole: {
                    readOnly: true,
                    serializedName: "properties.computeRole",
                    type: {
                        name: "String"
                    }
                },
                isSystemExtension: {
                    readOnly: true,
                    serializedName: "properties.isSystemExtension",
                    type: {
                        name: "Boolean"
                    }
                },
                uri: {
                    readOnly: true,
                    serializedName: "properties.sourceBlob.uri",
                    type: {
                        name: "String"
                    }
                },
                supportMultipleExtensions: {
                    readOnly: true,
                    serializedName: "properties.supportMultipleExtensions",
                    type: {
                        name: "Boolean"
                    }
                },
                version: {
                    readOnly: true,
                    serializedName: "properties.version",
                    type: {
                        name: "String"
                    }
                },
                vmOsType: {
                    readOnly: true,
                    serializedName: "properties.vmOsType",
                    type: {
                        name: "String"
                    }
                },
                vmScaleSetEnabled: {
                    readOnly: true,
                    serializedName: "properties.vmScaleSetEnabled",
                    type: {
                        name: "Boolean"
                    }
                },
                osDiskImage: {
                    readOnly: true,
                    serializedName: "properties.osDiskImage",
                    type: {
                        name: "Composite",
                        className: "OsDiskImage"
                    }
                },
                dataDiskImages: {
                    readOnly: true,
                    serializedName: "properties.dataDiskImages",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DataDiskImage"
                            }
                        }
                    }
                }
            }
        }
    };
    var VirtualMachineExtensionProductProperties = {
        serializedName: "VirtualMachineExtensionProductProperties",
        type: {
            name: "Composite",
            className: "VirtualMachineExtensionProductProperties",
            modelProperties: {
                computeRole: {
                    readOnly: true,
                    serializedName: "computeRole",
                    type: {
                        name: "String"
                    }
                },
                isSystemExtension: {
                    readOnly: true,
                    serializedName: "isSystemExtension",
                    type: {
                        name: "Boolean"
                    }
                },
                uri: {
                    readOnly: true,
                    serializedName: "sourceBlob.uri",
                    type: {
                        name: "String"
                    }
                },
                supportMultipleExtensions: {
                    readOnly: true,
                    serializedName: "supportMultipleExtensions",
                    type: {
                        name: "Boolean"
                    }
                },
                version: {
                    readOnly: true,
                    serializedName: "version",
                    type: {
                        name: "String"
                    }
                },
                vmOsType: {
                    readOnly: true,
                    serializedName: "vmOsType",
                    type: {
                        name: "String"
                    }
                },
                vmScaleSetEnabled: {
                    readOnly: true,
                    serializedName: "vmScaleSetEnabled",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var VirtualMachineProductProperties = {
        serializedName: "VirtualMachineProductProperties",
        type: {
            name: "Composite",
            className: "VirtualMachineProductProperties",
            modelProperties: {
                version: {
                    readOnly: true,
                    serializedName: "version",
                    type: {
                        name: "String"
                    }
                },
                osDiskImage: {
                    readOnly: true,
                    serializedName: "osDiskImage",
                    type: {
                        name: "Composite",
                        className: "OsDiskImage"
                    }
                },
                dataDiskImages: {
                    readOnly: true,
                    serializedName: "dataDiskImages",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DataDiskImage"
                            }
                        }
                    }
                }
            }
        }
    };
    var IconUris = {
        serializedName: "IconUris",
        type: {
            name: "Composite",
            className: "IconUris",
            modelProperties: {
                large: {
                    serializedName: "large",
                    type: {
                        name: "String"
                    }
                },
                wide: {
                    serializedName: "wide",
                    type: {
                        name: "String"
                    }
                },
                medium: {
                    serializedName: "medium",
                    type: {
                        name: "String"
                    }
                },
                small: {
                    serializedName: "small",
                    type: {
                        name: "String"
                    }
                },
                hero: {
                    serializedName: "hero",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ProductLink = {
        serializedName: "ProductLink",
        type: {
            name: "Composite",
            className: "ProductLink",
            modelProperties: {
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                uri: {
                    serializedName: "uri",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ProductProperties = {
        serializedName: "ProductProperties",
        type: {
            name: "Composite",
            className: "ProductProperties",
            modelProperties: {
                version: {
                    serializedName: "version",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Compatibility = {
        serializedName: "Compatibility",
        type: {
            name: "Composite",
            className: "Compatibility",
            modelProperties: {
                isCompatible: {
                    serializedName: "isCompatible",
                    type: {
                        name: "Boolean"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                issues: {
                    serializedName: "issues",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var Product = {
        serializedName: "Product",
        type: {
            name: "Composite",
            className: "Product",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { displayName: {
                    serializedName: "properties.displayName",
                    type: {
                        name: "String"
                    }
                }, description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, publisherDisplayName: {
                    serializedName: "properties.publisherDisplayName",
                    type: {
                        name: "String"
                    }
                }, publisherIdentifier: {
                    serializedName: "properties.publisherIdentifier",
                    type: {
                        name: "String"
                    }
                }, offer: {
                    serializedName: "properties.offer",
                    type: {
                        name: "String"
                    }
                }, offerVersion: {
                    serializedName: "properties.offerVersion",
                    type: {
                        name: "String"
                    }
                }, sku: {
                    serializedName: "properties.sku",
                    type: {
                        name: "String"
                    }
                }, billingPartNumber: {
                    serializedName: "properties.billingPartNumber",
                    type: {
                        name: "String"
                    }
                }, vmExtensionType: {
                    serializedName: "properties.vmExtensionType",
                    type: {
                        name: "String"
                    }
                }, galleryItemIdentity: {
                    serializedName: "properties.galleryItemIdentity",
                    type: {
                        name: "String"
                    }
                }, iconUris: {
                    serializedName: "properties.iconUris",
                    type: {
                        name: "Composite",
                        className: "IconUris"
                    }
                }, links: {
                    serializedName: "properties.links",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ProductLink"
                            }
                        }
                    }
                }, legalTerms: {
                    serializedName: "properties.legalTerms",
                    type: {
                        name: "String"
                    }
                }, privacyPolicy: {
                    serializedName: "properties.privacyPolicy",
                    type: {
                        name: "String"
                    }
                }, payloadLength: {
                    serializedName: "properties.payloadLength",
                    type: {
                        name: "Number"
                    }
                }, productKind: {
                    serializedName: "properties.productKind",
                    type: {
                        name: "String"
                    }
                }, productProperties: {
                    serializedName: "properties.productProperties",
                    type: {
                        name: "Composite",
                        className: "ProductProperties"
                    }
                }, compatibility: {
                    serializedName: "properties.compatibility",
                    type: {
                        name: "Composite",
                        className: "Compatibility"
                    }
                } })
        }
    };
    var DeviceConfiguration = {
        serializedName: "DeviceConfiguration",
        type: {
            name: "Composite",
            className: "DeviceConfiguration",
            modelProperties: {
                deviceVersion: {
                    readOnly: true,
                    serializedName: "deviceVersion",
                    type: {
                        name: "String"
                    }
                },
                identitySystem: {
                    readOnly: true,
                    serializedName: "identitySystem",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MarketplaceProductLogUpdate = {
        serializedName: "MarketplaceProductLogUpdate",
        type: {
            name: "Composite",
            className: "MarketplaceProductLogUpdate",
            modelProperties: {
                operation: {
                    readOnly: true,
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                error: {
                    readOnly: true,
                    serializedName: "error",
                    type: {
                        name: "String"
                    }
                },
                details: {
                    readOnly: true,
                    serializedName: "details",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ProductLog = {
        serializedName: "ProductLog",
        type: {
            name: "Composite",
            className: "ProductLog",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                productId: {
                    readOnly: true,
                    serializedName: "productId",
                    type: {
                        name: "String"
                    }
                },
                subscriptionId: {
                    readOnly: true,
                    serializedName: "subscriptionId",
                    type: {
                        name: "String"
                    }
                },
                registrationName: {
                    readOnly: true,
                    serializedName: "registrationName",
                    type: {
                        name: "String"
                    }
                },
                resourceGroupName: {
                    readOnly: true,
                    serializedName: "resourceGroupName",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    readOnly: true,
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                startDate: {
                    readOnly: true,
                    serializedName: "startDate",
                    type: {
                        name: "String"
                    }
                },
                endDate: {
                    readOnly: true,
                    serializedName: "endDate",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                error: {
                    readOnly: true,
                    serializedName: "error",
                    type: {
                        name: "String"
                    }
                },
                details: {
                    readOnly: true,
                    serializedName: "details",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Registration = {
        serializedName: "Registration",
        type: {
            name: "Composite",
            className: "Registration",
            modelProperties: __assign(__assign({}, TrackedResource.type.modelProperties), { objectId: {
                    serializedName: "properties.objectId",
                    type: {
                        name: "String"
                    }
                }, cloudId: {
                    serializedName: "properties.cloudId",
                    type: {
                        name: "String"
                    }
                }, billingModel: {
                    serializedName: "properties.billingModel",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ActivationKeyResult = {
        serializedName: "ActivationKeyResult",
        type: {
            name: "Composite",
            className: "ActivationKeyResult",
            modelProperties: {
                activationKey: {
                    serializedName: "activationKey",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RegistrationParameter = {
        serializedName: "RegistrationParameter",
        type: {
            name: "Composite",
            className: "RegistrationParameter",
            modelProperties: {
                registrationToken: {
                    required: true,
                    serializedName: "properties.registrationToken",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CustomerSubscription = {
        serializedName: "CustomerSubscription",
        type: {
            name: "Composite",
            className: "CustomerSubscription",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { tenantId: {
                    serializedName: "properties.tenantId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var OperationList = {
        serializedName: "OperationList",
        type: {
            name: "Composite",
            className: "OperationList",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Operation"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ProductList = {
        serializedName: "ProductList",
        type: {
            name: "Composite",
            className: "ProductList",
            modelProperties: {
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Product"
                            }
                        }
                    }
                }
            }
        }
    };
    var RegistrationList = {
        serializedName: "RegistrationList",
        type: {
            name: "Composite",
            className: "RegistrationList",
            modelProperties: {
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Registration"
                            }
                        }
                    }
                }
            }
        }
    };
    var CustomerSubscriptionList = {
        serializedName: "CustomerSubscriptionList",
        type: {
            name: "Composite",
            className: "CustomerSubscriptionList",
            modelProperties: {
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CustomerSubscription"
                            }
                        }
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        __proto__: null,
        CloudError: CloudError,
        BaseResource: BaseResource,
        Resource: Resource,
        TrackedResource: TrackedResource,
        Display: Display,
        Operation: Operation,
        ErrorDetails: ErrorDetails,
        ErrorResponse: ErrorResponse,
        OsDiskImage: OsDiskImage,
        DataDiskImage: DataDiskImage,
        ExtendedProduct: ExtendedProduct,
        VirtualMachineExtensionProductProperties: VirtualMachineExtensionProductProperties,
        VirtualMachineProductProperties: VirtualMachineProductProperties,
        IconUris: IconUris,
        ProductLink: ProductLink,
        ProductProperties: ProductProperties,
        Compatibility: Compatibility,
        Product: Product,
        DeviceConfiguration: DeviceConfiguration,
        MarketplaceProductLogUpdate: MarketplaceProductLogUpdate,
        ProductLog: ProductLog,
        Registration: Registration,
        ActivationKeyResult: ActivationKeyResult,
        RegistrationParameter: RegistrationParameter,
        CustomerSubscription: CustomerSubscription,
        OperationList: OperationList,
        ProductList: ProductList,
        RegistrationList: RegistrationList,
        CustomerSubscriptionList: CustomerSubscriptionList
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        __proto__: null,
        CloudError: CloudError,
        Display: Display,
        Operation: Operation,
        OperationList: OperationList
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            defaultValue: '2017-06-01',
            type: {
                name: "String"
            }
        }
    };
    var customerSubscriptionName = {
        parameterPath: "customerSubscriptionName",
        mapper: {
            required: true,
            serializedName: "customerSubscriptionName",
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var productName = {
        parameterPath: "productName",
        mapper: {
            required: true,
            serializedName: "productName",
            type: {
                name: "String"
            }
        }
    };
    var registrationName = {
        parameterPath: "registrationName",
        mapper: {
            required: true,
            serializedName: "registrationName",
            type: {
                name: "String"
            }
        }
    };
    var resourceGroup = {
        parameterPath: "resourceGroup",
        mapper: {
            required: true,
            serializedName: "resourceGroup",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {AzureStackManagementClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        Operations.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var listOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.AzureStack/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Compatibility: Compatibility,
        CustomerSubscription: CustomerSubscription,
        DataDiskImage: DataDiskImage,
        DeviceConfiguration: DeviceConfiguration,
        ErrorDetails: ErrorDetails,
        ErrorResponse: ErrorResponse,
        ExtendedProduct: ExtendedProduct,
        IconUris: IconUris,
        MarketplaceProductLogUpdate: MarketplaceProductLogUpdate,
        OsDiskImage: OsDiskImage,
        Product: Product,
        ProductLink: ProductLink,
        ProductList: ProductList,
        ProductLog: ProductLog,
        ProductProperties: ProductProperties,
        Registration: Registration,
        Resource: Resource,
        TrackedResource: TrackedResource
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Products. */
    var Products = /** @class */ (function () {
        /**
         * Create a Products.
         * @param {AzureStackManagementClientContext} client Reference to the service client.
         */
        function Products(client) {
            this.client = client;
        }
        Products.prototype.list = function (resourceGroup, registrationName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroup: resourceGroup,
                registrationName: registrationName,
                options: options
            }, listOperationSpec$1, callback);
        };
        Products.prototype.get = function (resourceGroup, registrationName, productName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroup: resourceGroup,
                registrationName: registrationName,
                productName: productName,
                options: options
            }, getOperationSpec, callback);
        };
        Products.prototype.listDetails = function (resourceGroup, registrationName, productName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroup: resourceGroup,
                registrationName: registrationName,
                productName: productName,
                options: options
            }, listDetailsOperationSpec, callback);
        };
        Products.prototype.getProducts = function (resourceGroup, registrationName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroup: resourceGroup,
                registrationName: registrationName,
                options: options
            }, getProductsOperationSpec, callback);
        };
        Products.prototype.getProduct = function (resourceGroup, registrationName, productName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroup: resourceGroup,
                registrationName: registrationName,
                productName: productName,
                options: options
            }, getProductOperationSpec, callback);
        };
        Products.prototype.uploadLog = function (resourceGroup, registrationName, productName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroup: resourceGroup,
                registrationName: registrationName,
                productName: productName,
                options: options
            }, uploadLogOperationSpec, callback);
        };
        Products.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$1, callback);
        };
        return Products;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/products",
        urlParameters: [
            subscriptionId,
            resourceGroup,
            registrationName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProductList
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/products/{productName}",
        urlParameters: [
            subscriptionId,
            resourceGroup,
            registrationName,
            productName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Product
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listDetailsOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/products/{productName}/listDetails",
        urlParameters: [
            subscriptionId,
            resourceGroup,
            registrationName,
            productName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ExtendedProduct
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var getProductsOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/products/_all/GetProducts",
        urlParameters: [
            subscriptionId,
            resourceGroup,
            registrationName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "deviceConfiguration"
            ],
            mapper: DeviceConfiguration
        },
        responses: {
            200: {
                bodyMapper: ProductList
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var getProductOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/products/{productName}/GetProduct",
        urlParameters: [
            subscriptionId,
            resourceGroup,
            registrationName,
            productName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "deviceConfiguration"
            ],
            mapper: DeviceConfiguration
        },
        responses: {
            200: {
                bodyMapper: Product
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var uploadLogOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/products/{productName}/uploadProductLog",
        urlParameters: [
            subscriptionId,
            resourceGroup,
            registrationName,
            productName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "marketplaceProductLogUpdate"
            ],
            mapper: MarketplaceProductLogUpdate
        },
        responses: {
            200: {
                bodyMapper: ProductLog
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProductList
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ActivationKeyResult: ActivationKeyResult,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Compatibility: Compatibility,
        CustomerSubscription: CustomerSubscription,
        ErrorDetails: ErrorDetails,
        ErrorResponse: ErrorResponse,
        IconUris: IconUris,
        Product: Product,
        ProductLink: ProductLink,
        ProductProperties: ProductProperties,
        Registration: Registration,
        RegistrationList: RegistrationList,
        RegistrationParameter: RegistrationParameter,
        Resource: Resource,
        TrackedResource: TrackedResource
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Registrations. */
    var Registrations = /** @class */ (function () {
        /**
         * Create a Registrations.
         * @param {AzureStackManagementClientContext} client Reference to the service client.
         */
        function Registrations(client) {
            this.client = client;
        }
        Registrations.prototype.list = function (resourceGroup, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroup: resourceGroup,
                options: options
            }, listOperationSpec$2, callback);
        };
        Registrations.prototype.get = function (resourceGroup, registrationName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroup: resourceGroup,
                registrationName: registrationName,
                options: options
            }, getOperationSpec$1, callback);
        };
        Registrations.prototype.deleteMethod = function (resourceGroup, registrationName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroup: resourceGroup,
                registrationName: registrationName,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        Registrations.prototype.createOrUpdate = function (resourceGroup, registrationName, token, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroup: resourceGroup,
                registrationName: registrationName,
                token: token,
                options: options
            }, createOrUpdateOperationSpec, callback);
        };
        Registrations.prototype.update = function (resourceGroup, registrationName, token, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroup: resourceGroup,
                registrationName: registrationName,
                token: token,
                options: options
            }, updateOperationSpec, callback);
        };
        Registrations.prototype.getActivationKey = function (resourceGroup, registrationName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroup: resourceGroup,
                registrationName: registrationName,
                options: options
            }, getActivationKeyOperationSpec, callback);
        };
        Registrations.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$2, callback);
        };
        return Registrations;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var listOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations",
        urlParameters: [
            subscriptionId,
            resourceGroup
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RegistrationList
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}",
        urlParameters: [
            subscriptionId,
            resourceGroup,
            registrationName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Registration
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}",
        urlParameters: [
            subscriptionId,
            resourceGroup,
            registrationName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var createOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}",
        urlParameters: [
            subscriptionId,
            resourceGroup,
            registrationName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "token",
            mapper: __assign(__assign({}, RegistrationParameter), { required: true })
        },
        responses: {
            200: {
                bodyMapper: Registration
            },
            201: {
                bodyMapper: Registration
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var updateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}",
        urlParameters: [
            subscriptionId,
            resourceGroup,
            registrationName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "token",
            mapper: __assign(__assign({}, RegistrationParameter), { required: true })
        },
        responses: {
            200: {
                bodyMapper: Registration
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var getActivationKeyOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/getactivationkey",
        urlParameters: [
            subscriptionId,
            resourceGroup,
            registrationName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ActivationKeyResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RegistrationList
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Compatibility: Compatibility,
        CustomerSubscription: CustomerSubscription,
        CustomerSubscriptionList: CustomerSubscriptionList,
        ErrorDetails: ErrorDetails,
        ErrorResponse: ErrorResponse,
        IconUris: IconUris,
        Product: Product,
        ProductLink: ProductLink,
        ProductProperties: ProductProperties,
        Registration: Registration,
        Resource: Resource,
        TrackedResource: TrackedResource
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a CustomerSubscriptions. */
    var CustomerSubscriptions = /** @class */ (function () {
        /**
         * Create a CustomerSubscriptions.
         * @param {AzureStackManagementClientContext} client Reference to the service client.
         */
        function CustomerSubscriptions(client) {
            this.client = client;
        }
        CustomerSubscriptions.prototype.list = function (resourceGroup, registrationName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroup: resourceGroup,
                registrationName: registrationName,
                options: options
            }, listOperationSpec$3, callback);
        };
        CustomerSubscriptions.prototype.get = function (resourceGroup, registrationName, customerSubscriptionName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroup: resourceGroup,
                registrationName: registrationName,
                customerSubscriptionName: customerSubscriptionName,
                options: options
            }, getOperationSpec$2, callback);
        };
        CustomerSubscriptions.prototype.deleteMethod = function (resourceGroup, registrationName, customerSubscriptionName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroup: resourceGroup,
                registrationName: registrationName,
                customerSubscriptionName: customerSubscriptionName,
                options: options
            }, deleteMethodOperationSpec$1, callback);
        };
        CustomerSubscriptions.prototype.create = function (resourceGroup, registrationName, customerSubscriptionName, customerCreationParameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroup: resourceGroup,
                registrationName: registrationName,
                customerSubscriptionName: customerSubscriptionName,
                customerCreationParameters: customerCreationParameters,
                options: options
            }, createOperationSpec, callback);
        };
        CustomerSubscriptions.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$3, callback);
        };
        return CustomerSubscriptions;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var listOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/customerSubscriptions",
        urlParameters: [
            subscriptionId,
            resourceGroup,
            registrationName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CustomerSubscriptionList
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var getOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/customerSubscriptions/{customerSubscriptionName}",
        urlParameters: [
            subscriptionId,
            resourceGroup,
            registrationName,
            customerSubscriptionName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CustomerSubscription
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var deleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/customerSubscriptions/{customerSubscriptionName}",
        urlParameters: [
            subscriptionId,
            resourceGroup,
            registrationName,
            customerSubscriptionName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var createOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/customerSubscriptions/{customerSubscriptionName}",
        urlParameters: [
            subscriptionId,
            resourceGroup,
            registrationName,
            customerSubscriptionName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "customerCreationParameters",
            mapper: __assign(__assign({}, CustomerSubscription), { required: true })
        },
        responses: {
            200: {
                bodyMapper: CustomerSubscription
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listNextOperationSpec$3 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CustomerSubscriptionList
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-azurestack";
    var packageVersion = "2.1.1";
    var AzureStackManagementClientContext = /** @class */ (function (_super) {
        __extends(AzureStackManagementClientContext, _super);
        /**
         * Initializes a new instance of the AzureStackManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure. Credentials
         * implementing the TokenCredential interface from the @azure/identity package are recommended. For
         * more information about these credentials, see
         * {@link https://www.npmjs.com/package/@azure/identity}. Credentials implementing the
         * ServiceClientCredentials interface from the older packages @azure/ms-rest-nodeauth and
         * @azure/ms-rest-browserauth are also supported.
         * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure
         * subscription. The subscription ID forms part of the URI for every service call.
         * @param [options] The parameter options
         */
        function AzureStackManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            if (!options.userAgent) {
                var defaultUserAgent = msRestAzure.getDefaultUserAgentValue();
                options.userAgent = packageName + "/" + packageVersion + " " + defaultUserAgent;
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2017-06-01';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return AzureStackManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var AzureStackManagementClient = /** @class */ (function (_super) {
        __extends(AzureStackManagementClient, _super);
        /**
         * Initializes a new instance of the AzureStackManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure. Credentials
         * implementing the TokenCredential interface from the @azure/identity package are recommended. For
         * more information about these credentials, see
         * {@link https://www.npmjs.com/package/@azure/identity}. Credentials implementing the
         * ServiceClientCredentials interface from the older packages @azure/ms-rest-nodeauth and
         * @azure/ms-rest-browserauth are also supported.
         * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure
         * subscription. The subscription ID forms part of the URI for every service call.
         * @param [options] The parameter options
         */
        function AzureStackManagementClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.operations = new Operations(_this);
            _this.products = new Products(_this);
            _this.registrations = new Registrations(_this);
            _this.customerSubscriptions = new CustomerSubscriptions(_this);
            return _this;
        }
        return AzureStackManagementClient;
    }(AzureStackManagementClientContext));

    exports.AzureStackManagementClient = AzureStackManagementClient;
    exports.AzureStackManagementClientContext = AzureStackManagementClientContext;
    exports.AzureStackManagementMappers = mappers;
    exports.AzureStackManagementModels = index;
    exports.CustomerSubscriptions = CustomerSubscriptions;
    exports.Operations = Operations;
    exports.Products = Products;
    exports.Registrations = Registrations;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-azurestack.js.map
