/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/registrationsMappers";
import * as Parameters from "../models/parameters";
/** Class representing a Registrations. */
var Registrations = /** @class */ (function () {
    /**
     * Create a Registrations.
     * @param {AzureStackManagementClientContext} client Reference to the service client.
     */
    function Registrations(client) {
        this.client = client;
    }
    Registrations.prototype.list = function (resourceGroup, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroup: resourceGroup,
            options: options
        }, listOperationSpec, callback);
    };
    Registrations.prototype.get = function (resourceGroup, registrationName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroup: resourceGroup,
            registrationName: registrationName,
            options: options
        }, getOperationSpec, callback);
    };
    Registrations.prototype.deleteMethod = function (resourceGroup, registrationName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroup: resourceGroup,
            registrationName: registrationName,
            options: options
        }, deleteMethodOperationSpec, callback);
    };
    Registrations.prototype.createOrUpdate = function (resourceGroup, registrationName, token, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroup: resourceGroup,
            registrationName: registrationName,
            token: token,
            options: options
        }, createOrUpdateOperationSpec, callback);
    };
    Registrations.prototype.update = function (resourceGroup, registrationName, token, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroup: resourceGroup,
            registrationName: registrationName,
            token: token,
            options: options
        }, updateOperationSpec, callback);
    };
    Registrations.prototype.getActivationKey = function (resourceGroup, registrationName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroup: resourceGroup,
            registrationName: registrationName,
            options: options
        }, getActivationKeyOperationSpec, callback);
    };
    Registrations.prototype.listNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listNextOperationSpec, callback);
    };
    return Registrations;
}());
export { Registrations };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var listOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroup
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.RegistrationList
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroup,
        Parameters.registrationName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.Registration
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var deleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroup,
        Parameters.registrationName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var createOrUpdateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroup,
        Parameters.registrationName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "token",
        mapper: __assign(__assign({}, Mappers.RegistrationParameter), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.Registration
        },
        201: {
            bodyMapper: Mappers.Registration
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var updateOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroup,
        Parameters.registrationName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "token",
        mapper: __assign(__assign({}, Mappers.RegistrationParameter), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.Registration
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var getActivationKeyOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/getactivationkey",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroup,
        Parameters.registrationName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ActivationKeyResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.RegistrationList
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
//# sourceMappingURL=registrations.js.map