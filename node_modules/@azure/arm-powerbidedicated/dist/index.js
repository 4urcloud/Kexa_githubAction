'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var coreClient = require('@azure/core-client');
var coreRestPipeline = require('@azure/core-rest-pipeline');
var coreLro = require('@azure/core-lro');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var coreClient__namespace = /*#__PURE__*/_interopNamespace(coreClient);
var coreRestPipeline__namespace = /*#__PURE__*/_interopNamespace(coreRestPipeline);

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const pageMap = new WeakMap();
/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
function getContinuationToken(page) {
    var _a;
    if (typeof page !== "object" || page === null) {
        return undefined;
    }
    return (_a = pageMap.get(page)) === null || _a === void 0 ? void 0 : _a.continuationToken;
}
function setContinuationToken(page, continuationToken) {
    var _a;
    if (typeof page !== "object" || page === null || !continuationToken) {
        return;
    }
    const pageInfo = (_a = pageMap.get(page)) !== null && _a !== void 0 ? _a : {};
    pageInfo.continuationToken = continuationToken;
    pageMap.set(page, pageInfo);
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link CapacitySkuTier} that the service accepts. */
exports.KnownCapacitySkuTier = void 0;
(function (KnownCapacitySkuTier) {
    /** PbieAzure */
    KnownCapacitySkuTier["PbieAzure"] = "PBIE_Azure";
    /** Premium */
    KnownCapacitySkuTier["Premium"] = "Premium";
    /** AutoPremiumHost */
    KnownCapacitySkuTier["AutoPremiumHost"] = "AutoPremiumHost";
})(exports.KnownCapacitySkuTier || (exports.KnownCapacitySkuTier = {}));
/** Known values of {@link State} that the service accepts. */
exports.KnownState = void 0;
(function (KnownState) {
    /** Deleting */
    KnownState["Deleting"] = "Deleting";
    /** Succeeded */
    KnownState["Succeeded"] = "Succeeded";
    /** Failed */
    KnownState["Failed"] = "Failed";
    /** Paused */
    KnownState["Paused"] = "Paused";
    /** Suspended */
    KnownState["Suspended"] = "Suspended";
    /** Provisioning */
    KnownState["Provisioning"] = "Provisioning";
    /** Updating */
    KnownState["Updating"] = "Updating";
    /** Suspending */
    KnownState["Suspending"] = "Suspending";
    /** Pausing */
    KnownState["Pausing"] = "Pausing";
    /** Resuming */
    KnownState["Resuming"] = "Resuming";
    /** Preparing */
    KnownState["Preparing"] = "Preparing";
    /** Scaling */
    KnownState["Scaling"] = "Scaling";
})(exports.KnownState || (exports.KnownState = {}));
/** Known values of {@link CapacityProvisioningState} that the service accepts. */
exports.KnownCapacityProvisioningState = void 0;
(function (KnownCapacityProvisioningState) {
    /** Deleting */
    KnownCapacityProvisioningState["Deleting"] = "Deleting";
    /** Succeeded */
    KnownCapacityProvisioningState["Succeeded"] = "Succeeded";
    /** Failed */
    KnownCapacityProvisioningState["Failed"] = "Failed";
    /** Paused */
    KnownCapacityProvisioningState["Paused"] = "Paused";
    /** Suspended */
    KnownCapacityProvisioningState["Suspended"] = "Suspended";
    /** Provisioning */
    KnownCapacityProvisioningState["Provisioning"] = "Provisioning";
    /** Updating */
    KnownCapacityProvisioningState["Updating"] = "Updating";
    /** Suspending */
    KnownCapacityProvisioningState["Suspending"] = "Suspending";
    /** Pausing */
    KnownCapacityProvisioningState["Pausing"] = "Pausing";
    /** Resuming */
    KnownCapacityProvisioningState["Resuming"] = "Resuming";
    /** Preparing */
    KnownCapacityProvisioningState["Preparing"] = "Preparing";
    /** Scaling */
    KnownCapacityProvisioningState["Scaling"] = "Scaling";
})(exports.KnownCapacityProvisioningState || (exports.KnownCapacityProvisioningState = {}));
/** Known values of {@link Mode} that the service accepts. */
exports.KnownMode = void 0;
(function (KnownMode) {
    /** Gen1 */
    KnownMode["Gen1"] = "Gen1";
    /** Gen2 */
    KnownMode["Gen2"] = "Gen2";
})(exports.KnownMode || (exports.KnownMode = {}));
/** Known values of {@link IdentityType} that the service accepts. */
exports.KnownIdentityType = void 0;
(function (KnownIdentityType) {
    /** User */
    KnownIdentityType["User"] = "User";
    /** Application */
    KnownIdentityType["Application"] = "Application";
    /** ManagedIdentity */
    KnownIdentityType["ManagedIdentity"] = "ManagedIdentity";
    /** Key */
    KnownIdentityType["Key"] = "Key";
})(exports.KnownIdentityType || (exports.KnownIdentityType = {}));
/** Known values of {@link VCoreSkuTier} that the service accepts. */
exports.KnownVCoreSkuTier = void 0;
(function (KnownVCoreSkuTier) {
    /** AutoScale */
    KnownVCoreSkuTier["AutoScale"] = "AutoScale";
})(exports.KnownVCoreSkuTier || (exports.KnownVCoreSkuTier = {}));
/** Known values of {@link VCoreProvisioningState} that the service accepts. */
exports.KnownVCoreProvisioningState = void 0;
(function (KnownVCoreProvisioningState) {
    /** Succeeded */
    KnownVCoreProvisioningState["Succeeded"] = "Succeeded";
})(exports.KnownVCoreProvisioningState || (exports.KnownVCoreProvisioningState = {}));

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const CapacitySku = {
    type: {
        name: "Composite",
        className: "CapacitySku",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            tier: {
                serializedName: "tier",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DedicatedCapacityMutableProperties = {
    type: {
        name: "Composite",
        className: "DedicatedCapacityMutableProperties",
        modelProperties: {
            administration: {
                serializedName: "administration",
                type: {
                    name: "Composite",
                    className: "DedicatedCapacityAdministrators"
                }
            },
            mode: {
                serializedName: "mode",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DedicatedCapacityAdministrators = {
    type: {
        name: "Composite",
        className: "DedicatedCapacityAdministrators",
        modelProperties: {
            members: {
                serializedName: "members",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const Resource = {
    type: {
        name: "Composite",
        className: "Resource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            location: {
                serializedName: "location",
                required: true,
                type: {
                    name: "String"
                }
            },
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }
        }
    }
};
const SystemData = {
    type: {
        name: "Composite",
        className: "SystemData",
        modelProperties: {
            createdBy: {
                serializedName: "createdBy",
                type: {
                    name: "String"
                }
            },
            createdByType: {
                serializedName: "createdByType",
                type: {
                    name: "String"
                }
            },
            createdAt: {
                serializedName: "createdAt",
                type: {
                    name: "DateTime"
                }
            },
            lastModifiedBy: {
                serializedName: "lastModifiedBy",
                type: {
                    name: "String"
                }
            },
            lastModifiedByType: {
                serializedName: "lastModifiedByType",
                type: {
                    name: "String"
                }
            },
            lastModifiedAt: {
                serializedName: "lastModifiedAt",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const ErrorResponse = {
    type: {
        name: "Composite",
        className: "ErrorResponse",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorResponseError"
                }
            }
        }
    }
};
const ErrorResponseError = {
    type: {
        name: "Composite",
        className: "ErrorResponseError",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DedicatedCapacityUpdateParameters = {
    type: {
        name: "Composite",
        className: "DedicatedCapacityUpdateParameters",
        modelProperties: {
            sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "CapacitySku"
                }
            },
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            administration: {
                serializedName: "properties.administration",
                type: {
                    name: "Composite",
                    className: "DedicatedCapacityAdministrators"
                }
            },
            mode: {
                serializedName: "properties.mode",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DedicatedCapacities = {
    type: {
        name: "Composite",
        className: "DedicatedCapacities",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DedicatedCapacity"
                        }
                    }
                }
            }
        }
    }
};
const SkuEnumerationForNewResourceResult = {
    type: {
        name: "Composite",
        className: "SkuEnumerationForNewResourceResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CapacitySku"
                        }
                    }
                }
            }
        }
    }
};
const SkuEnumerationForExistingResourceResult = {
    type: {
        name: "Composite",
        className: "SkuEnumerationForExistingResourceResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SkuDetailsForExistingResource"
                        }
                    }
                }
            }
        }
    }
};
const SkuDetailsForExistingResource = {
    type: {
        name: "Composite",
        className: "SkuDetailsForExistingResource",
        modelProperties: {
            sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "CapacitySku"
                }
            }
        }
    }
};
const OperationListResult = {
    type: {
        name: "Composite",
        className: "OperationListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Operation"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Operation = {
    type: {
        name: "Composite",
        className: "Operation",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            display: {
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "OperationDisplay"
                }
            }
        }
    }
};
const OperationDisplay = {
    type: {
        name: "Composite",
        className: "OperationDisplay",
        modelProperties: {
            provider: {
                serializedName: "provider",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "resource",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CheckCapacityNameAvailabilityParameters = {
    type: {
        name: "Composite",
        className: "CheckCapacityNameAvailabilityParameters",
        modelProperties: {
            name: {
                constraints: {
                    Pattern: new RegExp("^[a-z][a-z0-9]*$"),
                    MaxLength: 63,
                    MinLength: 3
                },
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            type: {
                defaultValue: "Microsoft.PowerBIDedicated/capacities",
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CheckCapacityNameAvailabilityResult = {
    type: {
        name: "Composite",
        className: "CheckCapacityNameAvailabilityResult",
        modelProperties: {
            nameAvailable: {
                serializedName: "nameAvailable",
                type: {
                    name: "Boolean"
                }
            },
            reason: {
                serializedName: "reason",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AutoScaleVCoreSku = {
    type: {
        name: "Composite",
        className: "AutoScaleVCoreSku",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            tier: {
                serializedName: "tier",
                type: {
                    name: "String"
                }
            },
            capacity: {
                serializedName: "capacity",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const AutoScaleVCoreMutableProperties = {
    type: {
        name: "Composite",
        className: "AutoScaleVCoreMutableProperties",
        modelProperties: {
            capacityLimit: {
                serializedName: "capacityLimit",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const AutoScaleVCoreUpdateParameters = {
    type: {
        name: "Composite",
        className: "AutoScaleVCoreUpdateParameters",
        modelProperties: {
            sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "AutoScaleVCoreSku"
                }
            },
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            capacityLimit: {
                serializedName: "properties.capacityLimit",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const AutoScaleVCoreListResult = {
    type: {
        name: "Composite",
        className: "AutoScaleVCoreListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AutoScaleVCore"
                        }
                    }
                }
            }
        }
    }
};
const DedicatedCapacityProperties = {
    type: {
        name: "Composite",
        className: "DedicatedCapacityProperties",
        modelProperties: Object.assign(Object.assign({}, DedicatedCapacityMutableProperties.type.modelProperties), { state: {
                serializedName: "state",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const DedicatedCapacity = {
    type: {
        name: "Composite",
        className: "DedicatedCapacity",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "CapacitySku"
                }
            }, administration: {
                serializedName: "properties.administration",
                type: {
                    name: "Composite",
                    className: "DedicatedCapacityAdministrators"
                }
            }, mode: {
                serializedName: "properties.mode",
                type: {
                    name: "String"
                }
            }, state: {
                serializedName: "properties.state",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const AutoScaleVCore = {
    type: {
        name: "Composite",
        className: "AutoScaleVCore",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "AutoScaleVCoreSku"
                }
            }, capacityLimit: {
                serializedName: "properties.capacityLimit",
                type: {
                    name: "Number"
                }
            }, capacityObjectId: {
                serializedName: "properties.capacityObjectId",
                type: {
                    name: "String"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const AutoScaleVCoreProperties = {
    type: {
        name: "Composite",
        className: "AutoScaleVCoreProperties",
        modelProperties: Object.assign(Object.assign({}, AutoScaleVCoreMutableProperties.type.modelProperties), { capacityObjectId: {
                serializedName: "capacityObjectId",
                type: {
                    name: "String"
                }
            }, provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    CapacitySku: CapacitySku,
    DedicatedCapacityMutableProperties: DedicatedCapacityMutableProperties,
    DedicatedCapacityAdministrators: DedicatedCapacityAdministrators,
    Resource: Resource,
    SystemData: SystemData,
    ErrorResponse: ErrorResponse,
    ErrorResponseError: ErrorResponseError,
    DedicatedCapacityUpdateParameters: DedicatedCapacityUpdateParameters,
    DedicatedCapacities: DedicatedCapacities,
    SkuEnumerationForNewResourceResult: SkuEnumerationForNewResourceResult,
    SkuEnumerationForExistingResourceResult: SkuEnumerationForExistingResourceResult,
    SkuDetailsForExistingResource: SkuDetailsForExistingResource,
    OperationListResult: OperationListResult,
    Operation: Operation,
    OperationDisplay: OperationDisplay,
    CheckCapacityNameAvailabilityParameters: CheckCapacityNameAvailabilityParameters,
    CheckCapacityNameAvailabilityResult: CheckCapacityNameAvailabilityResult,
    AutoScaleVCoreSku: AutoScaleVCoreSku,
    AutoScaleVCoreMutableProperties: AutoScaleVCoreMutableProperties,
    AutoScaleVCoreUpdateParameters: AutoScaleVCoreUpdateParameters,
    AutoScaleVCoreListResult: AutoScaleVCoreListResult,
    DedicatedCapacityProperties: DedicatedCapacityProperties,
    DedicatedCapacity: DedicatedCapacity,
    AutoScaleVCore: AutoScaleVCore,
    AutoScaleVCoreProperties: AutoScaleVCoreProperties
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[-\\w\\._\\(\\)]+$"),
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const dedicatedCapacityName = {
    parameterPath: "dedicatedCapacityName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-z][a-z0-9]*$"),
            MaxLength: 63,
            MinLength: 3
        },
        serializedName: "dedicatedCapacityName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2021-01-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const capacityParameters = {
    parameterPath: "capacityParameters",
    mapper: DedicatedCapacity
};
const capacityUpdateParameters = {
    parameterPath: "capacityUpdateParameters",
    mapper: DedicatedCapacityUpdateParameters
};
const capacityParameters1 = {
    parameterPath: "capacityParameters",
    mapper: CheckCapacityNameAvailabilityParameters
};
const location = {
    parameterPath: "location",
    mapper: {
        serializedName: "location",
        required: true,
        type: {
            name: "String"
        }
    }
};
const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const vcoreName = {
    parameterPath: "vcoreName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[-a-zA-Z0-9_]+$"),
            MaxLength: 63,
            MinLength: 3
        },
        serializedName: "vcoreName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const vCoreParameters = {
    parameterPath: "vCoreParameters",
    mapper: AutoScaleVCore
};
const vCoreUpdateParameters = {
    parameterPath: "vCoreUpdateParameters",
    mapper: AutoScaleVCoreUpdateParameters
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class LroImpl {
    constructor(sendOperationFn, args, spec, requestPath = spec.path, requestMethod = spec.httpMethod) {
        this.sendOperationFn = sendOperationFn;
        this.args = args;
        this.spec = spec;
        this.requestPath = requestPath;
        this.requestMethod = requestMethod;
    }
    sendInitialRequest() {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            return this.sendOperationFn(this.args, this.spec);
        });
    }
    sendPollRequest(path) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const _a = this.spec, restSpec = tslib.__rest(_a, ["requestBody"]);
            return this.sendOperationFn(this.args, Object.assign(Object.assign({}, restSpec), { path, httpMethod: "GET" }));
        });
    }
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Capacities operations. */
class CapacitiesImpl {
    /**
     * Initialize a new instance of the class Capacities class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets all the Dedicated capacities for the given resource group.
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated
     *                          capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName, options) {
        const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByResourceGroupPagingPage(resourceGroupName, options, settings);
            }
        };
    }
    listByResourceGroupPagingPage(resourceGroupName, options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingPage_1() {
            let result;
            result = yield tslib.__await(this._listByResourceGroup(resourceGroupName, options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listByResourceGroupPagingAll(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByResourceGroupPagingPage(resourceGroupName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists all the Dedicated capacities for the given subscription.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            result = yield tslib.__await(this._list(options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Gets details about the specified dedicated capacity.
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated
     *                          capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param dedicatedCapacityName The name of the dedicated capacity. It must be a minimum of 3
     *                              characters, and a maximum of 63.
     * @param options The options parameters.
     */
    getDetails(resourceGroupName, dedicatedCapacityName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, dedicatedCapacityName, options }, getDetailsOperationSpec);
    }
    /**
     * Provisions the specified Dedicated capacity based on the configuration specified in the request.
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated
     *                          capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param dedicatedCapacityName The name of the Dedicated capacity. It must be a minimum of 3
     *                              characters, and a maximum of 63.
     * @param capacityParameters Contains the information used to provision the Dedicated capacity.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName, dedicatedCapacityName, capacityParameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, dedicatedCapacityName, capacityParameters, options }, createOperationSpec$1);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Provisions the specified Dedicated capacity based on the configuration specified in the request.
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated
     *                          capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param dedicatedCapacityName The name of the Dedicated capacity. It must be a minimum of 3
     *                              characters, and a maximum of 63.
     * @param capacityParameters Contains the information used to provision the Dedicated capacity.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName, dedicatedCapacityName, capacityParameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreate(resourceGroupName, dedicatedCapacityName, capacityParameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Deletes the specified Dedicated capacity.
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated
     *                          capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param dedicatedCapacityName The name of the Dedicated capacity. It must be at least 3 characters in
     *                              length, and no more than 63.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, dedicatedCapacityName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, dedicatedCapacityName, options }, deleteOperationSpec$1);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes the specified Dedicated capacity.
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated
     *                          capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param dedicatedCapacityName The name of the Dedicated capacity. It must be at least 3 characters in
     *                              length, and no more than 63.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, dedicatedCapacityName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, dedicatedCapacityName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Updates the current state of the specified Dedicated capacity.
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated
     *                          capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param dedicatedCapacityName The name of the Dedicated capacity. It must be at least 3 characters in
     *                              length, and no more than 63.
     * @param capacityUpdateParameters Request object that contains the updated information for the
     *                                 capacity.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, dedicatedCapacityName, capacityUpdateParameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                dedicatedCapacityName,
                capacityUpdateParameters,
                options
            }, updateOperationSpec$1);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Updates the current state of the specified Dedicated capacity.
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated
     *                          capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param dedicatedCapacityName The name of the Dedicated capacity. It must be at least 3 characters in
     *                              length, and no more than 63.
     * @param capacityUpdateParameters Request object that contains the updated information for the
     *                                 capacity.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, dedicatedCapacityName, capacityUpdateParameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, dedicatedCapacityName, capacityUpdateParameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Suspends operation of the specified dedicated capacity instance.
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated
     *                          capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param dedicatedCapacityName The name of the Dedicated capacity. It must be at least 3 characters in
     *                              length, and no more than 63.
     * @param options The options parameters.
     */
    beginSuspend(resourceGroupName, dedicatedCapacityName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, dedicatedCapacityName, options }, suspendOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Suspends operation of the specified dedicated capacity instance.
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated
     *                          capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param dedicatedCapacityName The name of the Dedicated capacity. It must be at least 3 characters in
     *                              length, and no more than 63.
     * @param options The options parameters.
     */
    beginSuspendAndWait(resourceGroupName, dedicatedCapacityName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginSuspend(resourceGroupName, dedicatedCapacityName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Resumes operation of the specified Dedicated capacity instance.
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated
     *                          capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param dedicatedCapacityName The name of the Dedicated capacity. It must be at least 3 characters in
     *                              length, and no more than 63.
     * @param options The options parameters.
     */
    beginResume(resourceGroupName, dedicatedCapacityName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, dedicatedCapacityName, options }, resumeOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Resumes operation of the specified Dedicated capacity instance.
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated
     *                          capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param dedicatedCapacityName The name of the Dedicated capacity. It must be at least 3 characters in
     *                              length, and no more than 63.
     * @param options The options parameters.
     */
    beginResumeAndWait(resourceGroupName, dedicatedCapacityName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginResume(resourceGroupName, dedicatedCapacityName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Gets all the Dedicated capacities for the given resource group.
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated
     *                          capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param options The options parameters.
     */
    _listByResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listByResourceGroupOperationSpec$1);
    }
    /**
     * Lists all the Dedicated capacities for the given subscription.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$1);
    }
    /**
     * Lists eligible SKUs for PowerBI Dedicated resource provider.
     * @param options The options parameters.
     */
    listSkus(options) {
        return this.client.sendOperationRequest({ options }, listSkusOperationSpec);
    }
    /**
     * Lists eligible SKUs for a PowerBI Dedicated resource.
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated
     *                          capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param dedicatedCapacityName The name of the Dedicated capacity. It must be at least 3 characters in
     *                              length, and no more than 63.
     * @param options The options parameters.
     */
    listSkusForCapacity(resourceGroupName, dedicatedCapacityName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, dedicatedCapacityName, options }, listSkusForCapacityOperationSpec);
    }
    /**
     * Check the name availability in the target location.
     * @param location The region name which the operation will lookup into.
     * @param capacityParameters The name of the capacity.
     * @param options The options parameters.
     */
    checkNameAvailability(location, capacityParameters, options) {
        return this.client.sendOperationRequest({ location, capacityParameters, options }, checkNameAvailabilityOperationSpec);
    }
}
// Operation Specifications
const serializer$2 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getDetailsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PowerBIDedicated/capacities/{dedicatedCapacityName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DedicatedCapacity
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        dedicatedCapacityName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const createOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PowerBIDedicated/capacities/{dedicatedCapacityName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: DedicatedCapacity
        },
        201: {
            bodyMapper: DedicatedCapacity
        },
        202: {
            bodyMapper: DedicatedCapacity
        },
        204: {
            bodyMapper: DedicatedCapacity
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: capacityParameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        dedicatedCapacityName,
        subscriptionId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$2
};
const deleteOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PowerBIDedicated/capacities/{dedicatedCapacityName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        dedicatedCapacityName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const updateOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PowerBIDedicated/capacities/{dedicatedCapacityName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: DedicatedCapacity
        },
        201: {
            bodyMapper: DedicatedCapacity
        },
        202: {
            bodyMapper: DedicatedCapacity
        },
        204: {
            bodyMapper: DedicatedCapacity
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: capacityUpdateParameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        dedicatedCapacityName,
        subscriptionId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$2
};
const suspendOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PowerBIDedicated/capacities/{dedicatedCapacityName}/suspend",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        dedicatedCapacityName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const resumeOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PowerBIDedicated/capacities/{dedicatedCapacityName}/resume",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        dedicatedCapacityName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listByResourceGroupOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PowerBIDedicated/capacities",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DedicatedCapacities
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.PowerBIDedicated/capacities",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DedicatedCapacities
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$2
};
const listSkusOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.PowerBIDedicated/skus",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SkuEnumerationForNewResourceResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$2
};
const listSkusForCapacityOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PowerBIDedicated/capacities/{dedicatedCapacityName}/skus",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SkuEnumerationForExistingResourceResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        dedicatedCapacityName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const checkNameAvailabilityOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.PowerBIDedicated/locations/{location}/checkNameAvailability",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: CheckCapacityNameAvailabilityResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: capacityParameters1,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        location
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$2
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Operations operations. */
class OperationsImpl {
    /**
     * Initialize a new instance of the class Operations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all of the available PowerBIDedicated REST API operations.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists all of the available PowerBIDedicated REST API operations.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec);
    }
}
// Operation Specifications
const serializer$1 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/providers/Microsoft.PowerBIDedicated/operations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer: serializer$1
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [$host, nextLink],
    headerParameters: [accept],
    serializer: serializer$1
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing AutoScaleVCores operations. */
class AutoScaleVCoresImpl {
    /**
     * Initialize a new instance of the class AutoScaleVCores class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets all the auto scale v-cores for the given resource group.
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated
     *                          capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName, options) {
        const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByResourceGroupPagingPage(resourceGroupName, options, settings);
            }
        };
    }
    listByResourceGroupPagingPage(resourceGroupName, options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingPage_1() {
            let result;
            result = yield tslib.__await(this._listByResourceGroup(resourceGroupName, options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listByResourceGroupPagingAll(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByResourceGroupPagingPage(resourceGroupName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists all the auto scale v-cores for the given subscription.
     * @param options The options parameters.
     */
    listBySubscription(options) {
        const iter = this.listBySubscriptionPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listBySubscriptionPagingPage(options, settings);
            }
        };
    }
    listBySubscriptionPagingPage(options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionPagingPage_1() {
            let result;
            result = yield tslib.__await(this._listBySubscription(options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listBySubscriptionPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listBySubscriptionPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Gets details about the specified auto scale v-core.
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated
     *                          capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param vcoreName The name of the auto scale v-core. It must be a minimum of 3 characters, and a
     *                  maximum of 63.
     * @param options The options parameters.
     */
    get(resourceGroupName, vcoreName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, vcoreName, options }, getOperationSpec);
    }
    /**
     * Provisions the specified auto scale v-core based on the configuration specified in the request.
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated
     *                          capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param vcoreName The name of the auto scale v-core. It must be a minimum of 3 characters, and a
     *                  maximum of 63.
     * @param vCoreParameters Contains the information used to provision the auto scale v-core.
     * @param options The options parameters.
     */
    create(resourceGroupName, vcoreName, vCoreParameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, vcoreName, vCoreParameters, options }, createOperationSpec);
    }
    /**
     * Deletes the specified auto scale v-core.
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated
     *                          capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param vcoreName The name of the auto scale v-core. It must be a minimum of 3 characters, and a
     *                  maximum of 63.
     * @param options The options parameters.
     */
    delete(resourceGroupName, vcoreName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, vcoreName, options }, deleteOperationSpec);
    }
    /**
     * Updates the current state of the specified auto scale v-core.
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated
     *                          capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param vcoreName The name of the auto scale v-core. It must be a minimum of 3 characters, and a
     *                  maximum of 63.
     * @param vCoreUpdateParameters Request object that contains the updated information for the auto scale
     *                              v-core.
     * @param options The options parameters.
     */
    update(resourceGroupName, vcoreName, vCoreUpdateParameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, vcoreName, vCoreUpdateParameters, options }, updateOperationSpec);
    }
    /**
     * Gets all the auto scale v-cores for the given resource group.
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated
     *                          capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param options The options parameters.
     */
    _listByResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listByResourceGroupOperationSpec);
    }
    /**
     * Lists all the auto scale v-cores for the given subscription.
     * @param options The options parameters.
     */
    _listBySubscription(options) {
        return this.client.sendOperationRequest({ options }, listBySubscriptionOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PowerBIDedicated/autoScaleVCores/{vcoreName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AutoScaleVCore
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        vcoreName
    ],
    headerParameters: [accept],
    serializer
};
const createOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PowerBIDedicated/autoScaleVCores/{vcoreName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: AutoScaleVCore
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: vCoreParameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        vcoreName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PowerBIDedicated/autoScaleVCores/{vcoreName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        vcoreName
    ],
    headerParameters: [accept],
    serializer
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PowerBIDedicated/autoScaleVCores/{vcoreName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: AutoScaleVCore
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: vCoreUpdateParameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        vcoreName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};
const listByResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PowerBIDedicated/autoScaleVCores",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AutoScaleVCoreListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer
};
const listBySubscriptionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.PowerBIDedicated/autoScaleVCores",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AutoScaleVCoreListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class PowerBIDedicated extends coreClient__namespace.ServiceClient {
    /**
     * Initializes a new instance of the PowerBIDedicated class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID
     *                       forms part of the URI for every service call.
     * @param options The parameter options
     */
    constructor(credentials, subscriptionId, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        if (subscriptionId === undefined) {
            throw new Error("'subscriptionId' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-powerbidedicated/4.0.1`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName
            });
            this.pipeline.addPolicy(coreRestPipeline__namespace.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient__namespace.authorizeRequestOnClaimChallenge
                }
            }));
        }
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.apiVersion = options.apiVersion || "2021-01-01";
        this.capacities = new CapacitiesImpl(this);
        this.operations = new OperationsImpl(this);
        this.autoScaleVCores = new AutoScaleVCoresImpl(this);
        this.addCustomApiVersionPolicy(options.apiVersion);
    }
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    addCustomApiVersionPolicy(apiVersion) {
        if (!apiVersion) {
            return;
        }
        const apiVersionPolicy = {
            name: "CustomApiVersionPolicy",
            sendRequest(request, next) {
                return tslib.__awaiter(this, void 0, void 0, function* () {
                    const param = request.url.split("?");
                    if (param.length > 1) {
                        const newParams = param[1].split("&").map((item) => {
                            if (item.indexOf("api-version") > -1) {
                                return "api-version=" + apiVersion;
                            }
                            else {
                                return item;
                            }
                        });
                        request.url = param[0] + "?" + newParams.join("&");
                    }
                    return next(request);
                });
            }
        };
        this.pipeline.addPolicy(apiVersionPolicy);
    }
}

exports.PowerBIDedicated = PowerBIDedicated;
exports.getContinuationToken = getContinuationToken;
//# sourceMappingURL=index.js.map
