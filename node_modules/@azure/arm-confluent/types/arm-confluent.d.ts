import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { OperationState } from '@azure/core-lro';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { SimplePollerLike } from '@azure/core-lro';

/** Interface representing a Access. */
export declare interface Access {
    /**
     * Organization users details
     * @param resourceGroupName Resource group name
     * @param organizationName Organization resource name
     * @param body List Access Request Model
     * @param options The options parameters.
     */
    listUsers(resourceGroupName: string, organizationName: string, body: ListAccessRequestModel, options?: AccessListUsersOptionalParams): Promise<AccessListUsersResponse>;
    /**
     * Organization service accounts details
     * @param resourceGroupName Resource group name
     * @param organizationName Organization resource name
     * @param body List Access Request Model
     * @param options The options parameters.
     */
    listServiceAccounts(resourceGroupName: string, organizationName: string, body: ListAccessRequestModel, options?: AccessListServiceAccountsOptionalParams): Promise<AccessListServiceAccountsResponse>;
    /**
     * Organization accounts invitation details
     * @param resourceGroupName Resource group name
     * @param organizationName Organization resource name
     * @param body List Access Request Model
     * @param options The options parameters.
     */
    listInvitations(resourceGroupName: string, organizationName: string, body: ListAccessRequestModel, options?: AccessListInvitationsOptionalParams): Promise<AccessListInvitationsResponse>;
    /**
     * Invite user to the organization
     * @param resourceGroupName Resource group name
     * @param organizationName Organization resource name
     * @param body Invite user account model
     * @param options The options parameters.
     */
    inviteUser(resourceGroupName: string, organizationName: string, body: AccessInviteUserAccountModel, options?: AccessInviteUserOptionalParams): Promise<AccessInviteUserResponse>;
    /**
     * Environment list of an organization
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param body List Access Request Model
     * @param options The options parameters.
     */
    listEnvironments(resourceGroupName: string, organizationName: string, body: ListAccessRequestModel, options?: AccessListEnvironmentsOptionalParams): Promise<AccessListEnvironmentsResponse>;
    /**
     * Cluster details
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param body List Access Request Model
     * @param options The options parameters.
     */
    listClusters(resourceGroupName: string, organizationName: string, body: ListAccessRequestModel, options?: AccessListClustersOptionalParams): Promise<AccessListClustersResponse>;
    /**
     * Organization role bindings
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param body List Access Request Model
     * @param options The options parameters.
     */
    listRoleBindings(resourceGroupName: string, organizationName: string, body: ListAccessRequestModel, options?: AccessListRoleBindingsOptionalParams): Promise<AccessListRoleBindingsResponse>;
    /**
     * Organization role bindings
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param body Create role binding Request Model
     * @param options The options parameters.
     */
    createRoleBinding(resourceGroupName: string, organizationName: string, body: AccessCreateRoleBindingRequestModel, options?: AccessCreateRoleBindingOptionalParams): Promise<AccessCreateRoleBindingResponse>;
    /**
     * Organization role bindings
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param roleBindingId Confluent Role binding id
     * @param options The options parameters.
     */
    deleteRoleBinding(resourceGroupName: string, organizationName: string, roleBindingId: string, options?: AccessDeleteRoleBindingOptionalParams): Promise<void>;
    /**
     * Organization role bindings
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param body List Access Request Model
     * @param options The options parameters.
     */
    listRoleBindingNameList(resourceGroupName: string, organizationName: string, body: ListAccessRequestModel, options?: AccessListRoleBindingNameListOptionalParams): Promise<AccessListRoleBindingNameListResponse>;
}

/** Optional parameters. */
export declare interface AccessCreateRoleBindingOptionalParams extends coreClient.OperationOptions {
}

/** Create role binding request model */
export declare interface AccessCreateRoleBindingRequestModel {
    /** The principal User or Group to bind the role to */
    principal?: string;
    /** The name of the role to bind to the principal */
    roleName?: string;
    /** A CRN that specifies the scope and resource patterns necessary for the role to bind */
    crnPattern?: string;
}

/** Contains response data for the createRoleBinding operation. */
export declare type AccessCreateRoleBindingResponse = RoleBindingRecord;

/** Optional parameters. */
export declare interface AccessDeleteRoleBindingOptionalParams extends coreClient.OperationOptions {
}

/** Details of the user being invited */
export declare interface AccessInvitedUserDetails {
    /** UPN/Email of the user who is being invited */
    invitedEmail?: string;
    /** Auth type of the user */
    authType?: string;
}

/** Invite User Account model */
export declare interface AccessInviteUserAccountModel {
    /** Id of the organization */
    organizationId?: string;
    /** Email of the logged in user */
    email?: string;
    /** Upn of the logged in user */
    upn?: string;
    /** Details of the user who is being invited */
    invitedUserDetails?: AccessInvitedUserDetails;
}

/** Optional parameters. */
export declare interface AccessInviteUserOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the inviteUser operation. */
export declare type AccessInviteUserResponse = InvitationRecord;

/** Optional parameters. */
export declare interface AccessListClustersOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listClusters operation. */
export declare type AccessListClustersResponse = AccessListClusterSuccessResponse;

/** Details of the clusters returned on successful response */
export declare interface AccessListClusterSuccessResponse {
    /** Type of response */
    kind?: string;
    /** Metadata of the list */
    metadata?: ConfluentListMetadata;
    /** List of clusters */
    data?: ClusterRecord[];
}

/** Optional parameters. */
export declare interface AccessListEnvironmentsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listEnvironments operation. */
export declare type AccessListEnvironmentsResponse = AccessListEnvironmentsSuccessResponse;

/** Details of the environments returned on successful response */
export declare interface AccessListEnvironmentsSuccessResponse {
    /** Type of response */
    kind?: string;
    /** Metadata of the  environment list */
    metadata?: ConfluentListMetadata;
    /** Environment list data */
    data?: EnvironmentRecord[];
}

/** Optional parameters. */
export declare interface AccessListInvitationsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listInvitations operation. */
export declare type AccessListInvitationsResponse = AccessListInvitationsSuccessResponse;

/** List invitations success response */
export declare interface AccessListInvitationsSuccessResponse {
    /** Type of response */
    kind?: string;
    /** Metadata of the list */
    metadata?: ConfluentListMetadata;
    /** Data of the invitations list */
    data?: InvitationRecord[];
}

/** Optional parameters. */
export declare interface AccessListRoleBindingNameListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listRoleBindingNameList operation. */
export declare type AccessListRoleBindingNameListResponse = AccessRoleBindingNameListSuccessResponse;

/** Optional parameters. */
export declare interface AccessListRoleBindingsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listRoleBindings operation. */
export declare type AccessListRoleBindingsResponse = AccessListRoleBindingsSuccessResponse;

/** Details of the role bindings returned on successful response */
export declare interface AccessListRoleBindingsSuccessResponse {
    /** Type of response */
    kind?: string;
    /** Metadata of the list */
    metadata?: ConfluentListMetadata;
    /** List of role binding */
    data?: RoleBindingRecord[];
}

/** Optional parameters. */
export declare interface AccessListServiceAccountsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listServiceAccounts operation. */
export declare type AccessListServiceAccountsResponse = AccessListServiceAccountsSuccessResponse;

/** List service accounts success response */
export declare interface AccessListServiceAccountsSuccessResponse {
    /** Type of response */
    kind?: string;
    /** Metadata of the list */
    metadata?: ConfluentListMetadata;
    /** Data of the service accounts list */
    data?: ServiceAccountRecord[];
}

/** Optional parameters. */
export declare interface AccessListUsersOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listUsers operation. */
export declare type AccessListUsersResponse = AccessListUsersSuccessResponse;

/** List users success response */
export declare interface AccessListUsersSuccessResponse {
    /** Type of response */
    kind?: string;
    /** Metadata of the list */
    metadata?: ConfluentListMetadata;
    /** Data of the users list */
    data?: UserRecord[];
}

/** Details of the role binding names returned on successful response */
export declare interface AccessRoleBindingNameListSuccessResponse {
    /** Type of response */
    kind?: string;
    /** Metadata of the list */
    metadata?: ConfluentListMetadata;
    /** List of role binding names */
    data?: string[];
}

/** API Key Owner details which can be a user or service account */
export declare interface APIKeyOwnerEntity {
    /** API Key owner id */
    id?: string;
    /** API URL for accessing or modifying the referred object */
    related?: string;
    /** CRN reference to the referred resource */
    resourceName?: string;
    /** Type of the owner service or user account */
    kind?: string;
}

/** Details API key */
export declare interface APIKeyRecord {
    /** Type of api key */
    kind?: string;
    /** Id of the api key */
    id?: string;
    /** Metadata of the record */
    metadata?: SCMetadataEntity;
    /** Specification of the API Key */
    spec?: APIKeySpecEntity;
}

/** API Key Resource details which can be kafka cluster or schema registry cluster */
export declare interface APIKeyResourceEntity {
    /** Id of the resource */
    id?: string;
    /** The environment of the api key */
    environment?: string;
    /** API URL for accessing or modifying the api key resource object */
    related?: string;
    /** CRN reference to the referred resource */
    resourceName?: string;
    /** Type of the owner which can be service or user account */
    kind?: string;
}

/** Spec of the API Key record */
export declare interface APIKeySpecEntity {
    /** The description of the API Key */
    description?: string;
    /** The name of the API Key */
    name?: string;
    /** API Key Secret */
    secret?: string;
    /** Specification of the cluster */
    resource?: APIKeyResourceEntity;
    /** Specification of the cluster */
    owner?: APIKeyOwnerEntity;
}

/** The network associated with this object */
export declare interface ClusterByokEntity {
    /** ID of the referred resource */
    id?: string;
    /** API URL for accessing or modifying the referred object */
    related?: string;
    /** CRN reference to the referred resource */
    resourceName?: string;
}

/** The configuration of the Kafka cluster */
export declare interface ClusterConfigEntity {
    /** The lifecycle phase of the cluster */
    kind?: string;
}

/** The environment to which cluster belongs */
export declare interface ClusterEnvironmentEntity {
    /** ID of the referred resource */
    id?: string;
    /** Environment of the referred resource */
    environment?: string;
    /** API URL for accessing or modifying the referred object */
    related?: string;
    /** CRN reference to the referred resource */
    resourceName?: string;
}

/** The network associated with this object */
export declare interface ClusterNetworkEntity {
    /** ID of the referred resource */
    id?: string;
    /** Environment of the referred resource */
    environment?: string;
    /** API URL for accessing or modifying the referred object */
    related?: string;
    /** CRN reference to the referred resource */
    resourceName?: string;
}

/** Details of cluster record */
export declare interface ClusterRecord {
    /** Type of cluster */
    kind?: string;
    /** Id of the cluster */
    id?: string;
    /** Metadata of the record */
    metadata?: MetadataEntity;
    /** Display name of the cluster */
    displayName?: string;
    /** Specification of the cluster */
    spec?: ClusterSpecEntity;
    /** Specification of the cluster */
    status?: ClusterStatusEntity;
}

/** Spec of the cluster record */
export declare interface ClusterSpecEntity {
    /** The name of the cluster */
    displayName?: string;
    /** The availability zone configuration of the cluster */
    availability?: string;
    /** The cloud service provider */
    cloud?: string;
    /** type of zone availability */
    zone?: string;
    /** The cloud service provider region */
    region?: string;
    /** The bootstrap endpoint used by Kafka clients to connect to the cluster */
    kafkaBootstrapEndpoint?: string;
    /** The cluster HTTP request URL. */
    httpEndpoint?: string;
    /** The Kafka API cluster endpoint */
    apiEndpoint?: string;
    /** Specification of the cluster */
    config?: ClusterConfigEntity;
    /** Specification of the cluster */
    environment?: ClusterEnvironmentEntity;
    /** Specification of the cluster */
    network?: ClusterNetworkEntity;
    /** Specification of the cluster */
    byok?: ClusterByokEntity;
}

/** Status of the cluster record */
export declare interface ClusterStatusEntity {
    /** The lifecycle phase of the cluster */
    phase?: string;
    /** The number of Confluent Kafka Units */
    cku?: number;
}

/** Agreement Terms definition */
export declare interface ConfluentAgreementResource {
    /**
     * The ARM id of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the agreement.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of the agreement.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * Metadata pertaining to creation and last modification of the resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** Publisher identifier string. */
    publisher?: string;
    /** Product identifier string. */
    product?: string;
    /** Plan identifier string. */
    plan?: string;
    /** Link to HTML with Microsoft and Publisher terms. */
    licenseTextLink?: string;
    /** Link to the privacy policy of the publisher. */
    privacyPolicyLink?: string;
    /** Date and time in UTC of when the terms were accepted. This is empty if Accepted is false. */
    retrieveDatetime?: Date;
    /** Terms signature. */
    signature?: string;
    /** If any version of the terms have been accepted, otherwise false. */
    accepted?: boolean;
}

/** Response of a list operation. */
export declare interface ConfluentAgreementResourceListResponse {
    /** Results of a list operation. */
    value?: ConfluentAgreementResource[];
    /** Link to the next set of results, if any. */
    nextLink?: string;
}

/** Metadata of the list */
export declare interface ConfluentListMetadata {
    /** First page of the list */
    first?: string;
    /** Last page of the list */
    last?: string;
    /** Previous page of the list */
    prev?: string;
    /** Next page of the list */
    next?: string;
    /** Total size of the list */
    totalSize?: number;
}

export declare class ConfluentManagementClient extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    subscriptionId?: string;
    /**
     * Initializes a new instance of the ConfluentManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId Microsoft Azure subscription id
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: ConfluentManagementClientOptionalParams);
    constructor(credentials: coreAuth.TokenCredential, options?: ConfluentManagementClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    marketplaceAgreements: MarketplaceAgreements;
    organizationOperations: OrganizationOperations;
    organization: Organization;
    validations: Validations;
    access: Access;
}

/** Optional parameters. */
export declare interface ConfluentManagementClientOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** Create API Key model */
export declare interface CreateAPIKeyModel {
    /** Name of the API Key */
    name?: string;
    /** Description of the API Key */
    description?: string;
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export declare type CreatedByType = string;

/** Details about environment name, metadata and environment id of an environment */
export declare interface EnvironmentRecord {
    /** Type of environment */
    kind?: string;
    /** Id of the environment */
    id?: string;
    /** Metadata of the record */
    metadata?: MetadataEntity;
    /** Display name of the user */
    displayName?: string;
}

/** Response body of Error */
export declare interface ErrorResponseBody {
    /**
     * Error code
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * Error message
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
    /**
     * Error target
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly target?: string;
    /**
     * Error detail
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly details?: ErrorResponseBody[];
}

/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/** Result of GET request to list Confluent operations. */
export declare interface GetEnvironmentsResponse {
    /** List of environments in a confluent organization */
    value?: SCEnvironmentRecord[];
    /** URL to get the next set of environment records if there are any. */
    nextLink?: string;
}

/** Record of the invitation */
export declare interface InvitationRecord {
    /** Type of account */
    kind?: string;
    /** Id of the invitation */
    id?: string;
    /** Metadata of the record */
    metadata?: MetadataEntity;
    /** Email of the user */
    email?: string;
    /** Auth type of the user */
    authType?: string;
    /** Status of the invitation */
    status?: string;
    /** Accepted date time of the invitation */
    acceptedAt?: string;
    /** Expiration date time of the invitation */
    expiresAt?: string;
}

/** Known values of {@link CreatedByType} that the service accepts. */
export declare enum KnownCreatedByType {
    /** User */
    User = "User",
    /** Application */
    Application = "Application",
    /** ManagedIdentity */
    ManagedIdentity = "ManagedIdentity",
    /** Key */
    Key = "Key"
}

/** Known values of {@link ProvisionState} that the service accepts. */
export declare enum KnownProvisionState {
    /** Accepted */
    Accepted = "Accepted",
    /** Creating */
    Creating = "Creating",
    /** Updating */
    Updating = "Updating",
    /** Deleting */
    Deleting = "Deleting",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Canceled */
    Canceled = "Canceled",
    /** Deleted */
    Deleted = "Deleted",
    /** NotSpecified */
    NotSpecified = "NotSpecified"
}

/** Known values of {@link SaaSOfferStatus} that the service accepts. */
export declare enum KnownSaaSOfferStatus {
    /** Started */
    Started = "Started",
    /** PendingFulfillmentStart */
    PendingFulfillmentStart = "PendingFulfillmentStart",
    /** InProgress */
    InProgress = "InProgress",
    /** Subscribed */
    Subscribed = "Subscribed",
    /** Suspended */
    Suspended = "Suspended",
    /** Reinstated */
    Reinstated = "Reinstated",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Unsubscribed */
    Unsubscribed = "Unsubscribed",
    /** Updating */
    Updating = "Updating"
}

/** Link an existing Confluent organization */
export declare interface LinkOrganization {
    /** User auth token */
    token: string;
}

/** List Access Request Model */
export declare interface ListAccessRequestModel {
    /** Search filters for the request */
    searchFilters?: {
        [propertyName: string]: string;
    };
}

/** Result of GET request to list clusters in the environment of a confluent organization */
export declare interface ListClustersSuccessResponse {
    /** List of clusters in an environment of a confluent organization */
    value?: SCClusterRecord[];
    /** URL to get the next set of cluster records if there are any. */
    nextLink?: string;
}

/** Result of POST request to list regions supported by confluent */
export declare interface ListRegionsSuccessResponse {
    /** List of regions supported by confluent */
    data?: RegionRecord[];
}

/** Result of GET request to list schema registry clusters in the environment of a confluent organization */
export declare interface ListSchemaRegistryClustersResponse {
    /** List of schema registry clusters in an environment of a confluent organization */
    value?: SchemaRegistryClusterRecord[];
    /** URL to get the next set of schema registry cluster records if there are any. */
    nextLink?: string;
}

/** Interface representing a MarketplaceAgreements. */
export declare interface MarketplaceAgreements {
    /**
     * List Confluent marketplace agreements in the subscription.
     * @param options The options parameters.
     */
    list(options?: MarketplaceAgreementsListOptionalParams): PagedAsyncIterableIterator<ConfluentAgreementResource>;
    /**
     * Create Confluent Marketplace agreement in the subscription.
     * @param options The options parameters.
     */
    create(options?: MarketplaceAgreementsCreateOptionalParams): Promise<MarketplaceAgreementsCreateResponse>;
}

/** Optional parameters. */
export declare interface MarketplaceAgreementsCreateOptionalParams extends coreClient.OperationOptions {
    /** Confluent Marketplace Agreement resource */
    body?: ConfluentAgreementResource;
}

/** Contains response data for the create operation. */
export declare type MarketplaceAgreementsCreateResponse = ConfluentAgreementResource;

/** Optional parameters. */
export declare interface MarketplaceAgreementsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type MarketplaceAgreementsListNextResponse = ConfluentAgreementResourceListResponse;

/** Optional parameters. */
export declare interface MarketplaceAgreementsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type MarketplaceAgreementsListResponse = ConfluentAgreementResourceListResponse;

/** Metadata of the data record */
export declare interface MetadataEntity {
    /** Self lookup url */
    self?: string;
    /** Resource name of the record */
    resourceName?: string;
    /** Created Date Time */
    createdAt?: string;
    /** Updated Date time */
    updatedAt?: string;
    /** Deleted Date time */
    deletedAt?: string;
}

/** Confluent Offer detail */
export declare interface OfferDetail {
    /** Publisher Id */
    publisherId: string;
    /** Offer Id */
    id: string;
    /** Offer Plan Id */
    planId: string;
    /** Offer Plan Name */
    planName: string;
    /** Offer Plan Term unit */
    termUnit: string;
    /** Offer Plan Term Id */
    termId?: string;
    /** Private Offer Id */
    privateOfferId?: string;
    /** Array of Private Offer Ids */
    privateOfferIds?: string[];
    /** SaaS Offer Status */
    status?: SaaSOfferStatus;
}

/** The object that represents the operation. */
export declare interface OperationDisplay {
    /** Service provider: Microsoft.Confluent */
    provider?: string;
    /** Type on which the operation is performed, e.g., 'clusters'. */
    resource?: string;
    /** Operation type, e.g., read, write, delete, etc. */
    operation?: string;
    /** Description of the operation, e.g., 'Write confluent'. */
    description?: string;
}

/** Result of GET request to list Confluent operations. */
export declare interface OperationListResult {
    /** List of Confluent operations supported by the Microsoft.Confluent provider. */
    value?: OperationResult[];
    /** URL to get the next set of operation list results if there are any. */
    nextLink?: string;
}

/** An Confluent REST API operation. */
export declare interface OperationResult {
    /** Operation name: {provider}/{resource}/{operation} */
    name?: string;
    /** The object that represents the operation. */
    display?: OperationDisplay;
    /** Indicates whether the operation is a data action */
    isDataAction?: boolean;
}

/** Interface representing a Organization. */
export declare interface Organization {
    /**
     * List all organizations under the specified subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: OrganizationListBySubscriptionOptionalParams): PagedAsyncIterableIterator<OrganizationResource>;
    /**
     * List all Organizations under the specified resource group.
     * @param resourceGroupName Resource group name
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: OrganizationListByResourceGroupOptionalParams): PagedAsyncIterableIterator<OrganizationResource>;
    /**
     * Lists of all the environments in a organization
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param options The options parameters.
     */
    listEnvironments(resourceGroupName: string, organizationName: string, options?: OrganizationListEnvironmentsOptionalParams): PagedAsyncIterableIterator<SCEnvironmentRecord>;
    /**
     * Lists of all the clusters in a environment
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param environmentId Confluent environment id
     * @param options The options parameters.
     */
    listClusters(resourceGroupName: string, organizationName: string, environmentId: string, options?: OrganizationListClustersOptionalParams): PagedAsyncIterableIterator<SCClusterRecord>;
    /**
     * Get schema registry clusters
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param environmentId Confluent environment id
     * @param options The options parameters.
     */
    listSchemaRegistryClusters(resourceGroupName: string, organizationName: string, environmentId: string, options?: OrganizationListSchemaRegistryClustersOptionalParams): PagedAsyncIterableIterator<SchemaRegistryClusterRecord>;
    /**
     * Get the properties of a specific Organization resource.
     * @param resourceGroupName Resource group name
     * @param organizationName Organization resource name
     * @param options The options parameters.
     */
    get(resourceGroupName: string, organizationName: string, options?: OrganizationGetOptionalParams): Promise<OrganizationGetResponse>;
    /**
     * Create Organization resource
     * @param resourceGroupName Resource group name
     * @param organizationName Organization resource name
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName: string, organizationName: string, options?: OrganizationCreateOptionalParams): Promise<SimplePollerLike<OperationState<OrganizationCreateResponse>, OrganizationCreateResponse>>;
    /**
     * Create Organization resource
     * @param resourceGroupName Resource group name
     * @param organizationName Organization resource name
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName: string, organizationName: string, options?: OrganizationCreateOptionalParams): Promise<OrganizationCreateResponse>;
    /**
     * Update Organization resource
     * @param resourceGroupName Resource group name
     * @param organizationName Organization resource name
     * @param options The options parameters.
     */
    update(resourceGroupName: string, organizationName: string, options?: OrganizationUpdateOptionalParams): Promise<OrganizationUpdateResponse>;
    /**
     * Delete Organization resource
     * @param resourceGroupName Resource group name
     * @param organizationName Organization resource name
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, organizationName: string, options?: OrganizationDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Delete Organization resource
     * @param resourceGroupName Resource group name
     * @param organizationName Organization resource name
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, organizationName: string, options?: OrganizationDeleteOptionalParams): Promise<void>;
    /**
     * Get Environment details by environment Id
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param environmentId Confluent environment id
     * @param options The options parameters.
     */
    getEnvironmentById(resourceGroupName: string, organizationName: string, environmentId: string, options?: OrganizationGetEnvironmentByIdOptionalParams): Promise<OrganizationGetEnvironmentByIdResponse>;
    /**
     * cloud provider regions available for creating Schema Registry clusters.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param body List Access Request Model
     * @param options The options parameters.
     */
    listRegions(resourceGroupName: string, organizationName: string, body: ListAccessRequestModel, options?: OrganizationListRegionsOptionalParams): Promise<OrganizationListRegionsResponse>;
    /**
     * Creates API key for a schema registry Cluster ID or Kafka Cluster ID under a environment
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param environmentId Confluent environment id
     * @param clusterId Confluent kafka or schema registry cluster id
     * @param body Request payload for get creating API Key for schema registry Cluster ID or Kafka Cluster
     *             ID under a environment
     * @param options The options parameters.
     */
    createAPIKey(resourceGroupName: string, organizationName: string, environmentId: string, clusterId: string, body: CreateAPIKeyModel, options?: OrganizationCreateAPIKeyOptionalParams): Promise<OrganizationCreateAPIKeyResponse>;
    /**
     * Deletes API key of a kafka or schema registry cluster
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param apiKeyId Confluent API Key id
     * @param options The options parameters.
     */
    deleteClusterAPIKey(resourceGroupName: string, organizationName: string, apiKeyId: string, options?: OrganizationDeleteClusterAPIKeyOptionalParams): Promise<void>;
    /**
     * Get API key details of a kafka or schema registry cluster
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param apiKeyId Confluent API Key id
     * @param options The options parameters.
     */
    getClusterAPIKey(resourceGroupName: string, organizationName: string, apiKeyId: string, options?: OrganizationGetClusterAPIKeyOptionalParams): Promise<OrganizationGetClusterAPIKeyResponse>;
    /**
     * Get schema registry cluster by Id
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param environmentId Confluent environment id
     * @param clusterId Confluent kafka or schema registry cluster id
     * @param options The options parameters.
     */
    getSchemaRegistryClusterById(resourceGroupName: string, organizationName: string, environmentId: string, clusterId: string, options?: OrganizationGetSchemaRegistryClusterByIdOptionalParams): Promise<OrganizationGetSchemaRegistryClusterByIdResponse>;
    /**
     * Get cluster by Id
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param environmentId Confluent environment id
     * @param clusterId Confluent kafka or schema registry cluster id
     * @param options The options parameters.
     */
    getClusterById(resourceGroupName: string, organizationName: string, environmentId: string, clusterId: string, options?: OrganizationGetClusterByIdOptionalParams): Promise<OrganizationGetClusterByIdResponse>;
}

/** Optional parameters. */
export declare interface OrganizationCreateAPIKeyOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createAPIKey operation. */
export declare type OrganizationCreateAPIKeyResponse = APIKeyRecord;

/** Optional parameters. */
export declare interface OrganizationCreateOptionalParams extends coreClient.OperationOptions {
    /** Organization resource model */
    body?: OrganizationResource;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the create operation. */
export declare type OrganizationCreateResponse = OrganizationResource;

/** Optional parameters. */
export declare interface OrganizationDeleteClusterAPIKeyOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface OrganizationDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface OrganizationGetClusterAPIKeyOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getClusterAPIKey operation. */
export declare type OrganizationGetClusterAPIKeyResponse = APIKeyRecord;

/** Optional parameters. */
export declare interface OrganizationGetClusterByIdOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getClusterById operation. */
export declare type OrganizationGetClusterByIdResponse = SCClusterRecord;

/** Optional parameters. */
export declare interface OrganizationGetEnvironmentByIdOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getEnvironmentById operation. */
export declare type OrganizationGetEnvironmentByIdResponse = SCEnvironmentRecord;

/** Optional parameters. */
export declare interface OrganizationGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type OrganizationGetResponse = OrganizationResource;

/** Optional parameters. */
export declare interface OrganizationGetSchemaRegistryClusterByIdOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getSchemaRegistryClusterById operation. */
export declare type OrganizationGetSchemaRegistryClusterByIdResponse = SchemaRegistryClusterRecord;

/** Optional parameters. */
export declare interface OrganizationListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type OrganizationListByResourceGroupNextResponse = OrganizationResourceListResult;

/** Optional parameters. */
export declare interface OrganizationListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type OrganizationListByResourceGroupResponse = OrganizationResourceListResult;

/** Optional parameters. */
export declare interface OrganizationListBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionNext operation. */
export declare type OrganizationListBySubscriptionNextResponse = OrganizationResourceListResult;

/** Optional parameters. */
export declare interface OrganizationListBySubscriptionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscription operation. */
export declare type OrganizationListBySubscriptionResponse = OrganizationResourceListResult;

/** Optional parameters. */
export declare interface OrganizationListClustersNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listClustersNext operation. */
export declare type OrganizationListClustersNextResponse = ListClustersSuccessResponse;

/** Optional parameters. */
export declare interface OrganizationListClustersOptionalParams extends coreClient.OperationOptions {
    /** Pagination size */
    pageSize?: number;
    /** An opaque pagination token to fetch the next set of records */
    pageToken?: string;
}

/** Contains response data for the listClusters operation. */
export declare type OrganizationListClustersResponse = ListClustersSuccessResponse;

/** Optional parameters. */
export declare interface OrganizationListEnvironmentsNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listEnvironmentsNext operation. */
export declare type OrganizationListEnvironmentsNextResponse = GetEnvironmentsResponse;

/** Optional parameters. */
export declare interface OrganizationListEnvironmentsOptionalParams extends coreClient.OperationOptions {
    /** Pagination size */
    pageSize?: number;
    /** An opaque pagination token to fetch the next set of records */
    pageToken?: string;
}

/** Contains response data for the listEnvironments operation. */
export declare type OrganizationListEnvironmentsResponse = GetEnvironmentsResponse;

/** Optional parameters. */
export declare interface OrganizationListRegionsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listRegions operation. */
export declare type OrganizationListRegionsResponse = ListRegionsSuccessResponse;

/** Optional parameters. */
export declare interface OrganizationListSchemaRegistryClustersNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listSchemaRegistryClustersNext operation. */
export declare type OrganizationListSchemaRegistryClustersNextResponse = ListSchemaRegistryClustersResponse;

/** Optional parameters. */
export declare interface OrganizationListSchemaRegistryClustersOptionalParams extends coreClient.OperationOptions {
    /** Pagination size */
    pageSize?: number;
    /** An opaque pagination token to fetch the next set of records */
    pageToken?: string;
}

/** Contains response data for the listSchemaRegistryClusters operation. */
export declare type OrganizationListSchemaRegistryClustersResponse = ListSchemaRegistryClustersResponse;

/** Interface representing a OrganizationOperations. */
export declare interface OrganizationOperations {
    /**
     * List all operations provided by Microsoft.Confluent.
     * @param options The options parameters.
     */
    list(options?: OrganizationOperationsListOptionalParams): PagedAsyncIterableIterator<OperationResult>;
}

/** Optional parameters. */
export declare interface OrganizationOperationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type OrganizationOperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export declare interface OrganizationOperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OrganizationOperationsListResponse = OperationListResult;

/** Organization resource. */
export declare interface OrganizationResource {
    /**
     * The ARM id of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * Metadata pertaining to creation and last modification of the resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** Organization resource tags */
    tags?: {
        [propertyName: string]: string;
    };
    /** Location of Organization resource */
    location?: string;
    /**
     * The creation time of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdTime?: Date;
    /**
     * Provision states for confluent RP
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisionState;
    /**
     * Id of the Confluent organization.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly organizationId?: string;
    /**
     * SSO url for the Confluent organization.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly ssoUrl?: string;
    /** Confluent offer detail */
    offerDetail: OfferDetail;
    /** Subscriber detail */
    userDetail: UserDetail;
    /** Link an existing Confluent organization */
    linkOrganization?: LinkOrganization;
}

/** The response of a list operation. */
export declare interface OrganizationResourceListResult {
    /** Result of a list operation. */
    value?: OrganizationResource[];
    /** Link to the next set of results, if any. */
    nextLink?: string;
}

/** Organization Resource update */
export declare interface OrganizationResourceUpdate {
    /** ARM resource tags */
    tags?: {
        [propertyName: string]: string;
    };
}

/** Optional parameters. */
export declare interface OrganizationUpdateOptionalParams extends coreClient.OperationOptions {
    /** Updated Organization resource */
    body?: OrganizationResourceUpdate;
}

/** Contains response data for the update operation. */
export declare type OrganizationUpdateResponse = OrganizationResource;

/**
 * Defines values for ProvisionState. \
 * {@link KnownProvisionState} can be used interchangeably with ProvisionState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Accepted** \
 * **Creating** \
 * **Updating** \
 * **Deleting** \
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **Deleted** \
 * **NotSpecified**
 */
export declare type ProvisionState = string;

/** Details of region record */
export declare interface RegionRecord {
    /** Kind of the cluster */
    kind?: string;
    /** Id of the cluster */
    id?: string;
    /** Metadata of the record */
    metadata?: SCMetadataEntity;
    /** Specification of the region */
    spec?: RegionSpecEntity;
}

/** Region spec details */
export declare interface RegionSpecEntity {
    /** Display Name of the region */
    name?: string;
    /** Cloud provider name */
    cloud?: string;
    /** Region name */
    regionName?: string;
    packages?: string[];
}

/** Default error response for resource provider */
export declare interface ResourceProviderDefaultErrorResponse {
    /**
     * Response body of Error
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly error?: ErrorResponseBody;
}

/** Details on principal, role name and crn pattern of a role binding */
export declare interface RoleBindingRecord {
    /** The type of the resource. */
    kind?: string;
    /** Id of the role binding */
    id?: string;
    /** Metadata of the record */
    metadata?: MetadataEntity;
    /** The principal User or Group to bind the role to */
    principal?: string;
    /** The name of the role to bind to the principal */
    roleName?: string;
    /** A CRN that specifies the scope and resource patterns necessary for the role to bind */
    crnPattern?: string;
}

/**
 * Defines values for SaaSOfferStatus. \
 * {@link KnownSaaSOfferStatus} can be used interchangeably with SaaSOfferStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Started** \
 * **PendingFulfillmentStart** \
 * **InProgress** \
 * **Subscribed** \
 * **Suspended** \
 * **Reinstated** \
 * **Succeeded** \
 * **Failed** \
 * **Unsubscribed** \
 * **Updating**
 */
export declare type SaaSOfferStatus = string;

/** The network associated with this object */
export declare interface SCClusterByokEntity {
    /** ID of the referred resource */
    id?: string;
    /** API URL for accessing or modifying the referred object */
    related?: string;
    /** CRN reference to the referred resource */
    resourceName?: string;
}

/** The environment or the network to which cluster belongs */
export declare interface SCClusterNetworkEnvironmentEntity {
    /** ID of the referred resource */
    id?: string;
    /** Environment of the referred resource */
    environment?: string;
    /** API URL for accessing or modifying the referred object */
    related?: string;
    /** CRN reference to the referred resource */
    resourceName?: string;
}

/** Details of cluster record */
export declare interface SCClusterRecord {
    /** Type of cluster */
    kind?: string;
    /** Id of the cluster */
    id?: string;
    /** Display name of the cluster */
    name?: string;
    /** Metadata of the record */
    metadata?: SCMetadataEntity;
    /** Specification of the cluster */
    spec?: SCClusterSpecEntity;
    /** Specification of the cluster status */
    status?: ClusterStatusEntity;
}

/** Spec of the cluster record */
export declare interface SCClusterSpecEntity {
    /** The name of the cluster */
    name?: string;
    /** The availability zone configuration of the cluster */
    availability?: string;
    /** The cloud service provider */
    cloud?: string;
    /** type of zone availability */
    zone?: string;
    /** The cloud service provider region */
    region?: string;
    /** The bootstrap endpoint used by Kafka clients to connect to the cluster */
    kafkaBootstrapEndpoint?: string;
    /** The cluster HTTP request URL. */
    httpEndpoint?: string;
    /** The Kafka API cluster endpoint */
    apiEndpoint?: string;
    /** Specification of the cluster configuration */
    config?: ClusterConfigEntity;
    /** Specification of the cluster environment */
    environment?: SCClusterNetworkEnvironmentEntity;
    /** Specification of the cluster network */
    network?: SCClusterNetworkEnvironmentEntity;
    /** Specification of the cluster byok */
    byok?: SCClusterByokEntity;
}

/** Metadata of the list */
export declare interface SCConfluentListMetadata {
    /** First page of the list */
    first?: string;
    /** Last page of the list */
    last?: string;
    /** Previous page of the list */
    prev?: string;
    /** Next page of the list */
    next?: string;
    /** Total size of the list */
    totalSize?: number;
}

/** Details about environment name, metadata and environment id of an environment */
export declare interface SCEnvironmentRecord {
    /** Type of environment */
    kind?: string;
    /** Id of the environment */
    id?: string;
    /** Display name of the environment */
    name?: string;
    /** Metadata of the record */
    metadata?: SCMetadataEntity;
}

/** The environment associated with this object */
export declare interface SchemaRegistryClusterEnvironmentRegionEntity {
    /** ID of the referred resource */
    id?: string;
    /** API URL for accessing or modifying the referred object */
    related?: string;
    /** CRN reference to the referred resource */
    resourceName?: string;
}

/** Details of schema registry cluster record */
export declare interface SchemaRegistryClusterRecord {
    /** Kind of the cluster */
    kind?: string;
    /** Id of the cluster */
    id?: string;
    /** Metadata of the record */
    metadata?: SCMetadataEntity;
    /** Specification of the schema registry cluster */
    spec?: SchemaRegistryClusterSpecEntity;
    /** Specification of the cluster status */
    status?: SchemaRegistryClusterStatusEntity;
}

/** Details of schema registry cluster spec */
export declare interface SchemaRegistryClusterSpecEntity {
    /** Name of the schema registry cluster */
    name?: string;
    /** Http endpoint of the cluster */
    httpEndpoint?: string;
    /** Type of the cluster package Advanced, essentials */
    package?: string;
    /** Region details of the schema registry cluster */
    region?: SchemaRegistryClusterEnvironmentRegionEntity;
    /** Environment details of the schema registry cluster */
    environment?: SchemaRegistryClusterEnvironmentRegionEntity;
    /** The cloud service provider */
    cloud?: string;
}

/** Status of the schema registry cluster record */
export declare interface SchemaRegistryClusterStatusEntity {
    /** The lifecycle phase of the cluster */
    phase?: string;
}

/** Metadata of the data record */
export declare interface SCMetadataEntity {
    /** Self lookup url */
    self?: string;
    /** Resource name of the record */
    resourceName?: string;
    /** Created Date Time */
    createdTimestamp?: string;
    /** Updated Date time */
    updatedTimestamp?: string;
    /** Deleted Date time */
    deletedTimestamp?: string;
}

/** Record of the service account */
export declare interface ServiceAccountRecord {
    /** Type of account */
    kind?: string;
    /** Id of the service account */
    id?: string;
    /** Metadata of the record */
    metadata?: MetadataEntity;
    /** Name of the service account */
    displayName?: string;
    /** Description of the service account */
    description?: string;
}

/** Metadata pertaining to creation and last modification of the resource. */
export declare interface SystemData {
    /** The identity that created the resource. */
    createdBy?: string;
    /** The type of identity that created the resource. */
    createdByType?: CreatedByType;
    /** The timestamp of resource creation (UTC). */
    createdAt?: Date;
    /** The identity that last modified the resource. */
    lastModifiedBy?: string;
    /** The type of identity that last modified the resource. */
    lastModifiedByType?: CreatedByType;
    /** The timestamp of resource last modification (UTC) */
    lastModifiedAt?: Date;
}

/** Subscriber detail */
export declare interface UserDetail {
    /** First name */
    firstName?: string;
    /** Last name */
    lastName?: string;
    /** Email address */
    emailAddress: string;
    /** User principal name */
    userPrincipalName?: string;
    /** AAD email address */
    aadEmail?: string;
}

/** Record of the user */
export declare interface UserRecord {
    /** Type of account */
    kind?: string;
    /** Id of the user */
    id?: string;
    /** Metadata of the record */
    metadata?: MetadataEntity;
    /** Email of the user */
    email?: string;
    /** Name of the user */
    fullName?: string;
    /** Auth type of the user */
    authType?: string;
}

/** Validation response from the provider */
export declare interface ValidationResponse {
    /** Info from the response */
    info?: {
        [propertyName: string]: string;
    };
}

/** Interface representing a Validations. */
export declare interface Validations {
    /**
     * Organization Validate proxy resource
     * @param resourceGroupName Resource group name
     * @param organizationName Organization resource name
     * @param body Organization resource model
     * @param options The options parameters.
     */
    validateOrganization(resourceGroupName: string, organizationName: string, body: OrganizationResource, options?: ValidationsValidateOrganizationOptionalParams): Promise<ValidationsValidateOrganizationResponse>;
    /**
     * Organization Validate proxy resource
     * @param resourceGroupName Resource group name
     * @param organizationName Organization resource name
     * @param body Organization resource model
     * @param options The options parameters.
     */
    validateOrganizationV2(resourceGroupName: string, organizationName: string, body: OrganizationResource, options?: ValidationsValidateOrganizationV2OptionalParams): Promise<ValidationsValidateOrganizationV2Response>;
}

/** Optional parameters. */
export declare interface ValidationsValidateOrganizationOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the validateOrganization operation. */
export declare type ValidationsValidateOrganizationResponse = OrganizationResource;

/** Optional parameters. */
export declare interface ValidationsValidateOrganizationV2OptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the validateOrganizationV2 operation. */
export declare type ValidationsValidateOrganizationV2Response = ValidationResponse;

export { }
