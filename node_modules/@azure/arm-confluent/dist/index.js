'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var coreClient = require('@azure/core-client');
var coreRestPipeline = require('@azure/core-rest-pipeline');
var coreLro = require('@azure/core-lro');

function _interopNamespaceDefault(e) {
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n.default = e;
    return Object.freeze(n);
}

var coreClient__namespace = /*#__PURE__*/_interopNamespaceDefault(coreClient);
var coreRestPipeline__namespace = /*#__PURE__*/_interopNamespaceDefault(coreRestPipeline);

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const pageMap = new WeakMap();
/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
function getContinuationToken(page) {
    var _a;
    if (typeof page !== "object" || page === null) {
        return undefined;
    }
    return (_a = pageMap.get(page)) === null || _a === void 0 ? void 0 : _a.continuationToken;
}
function setContinuationToken(page, continuationToken) {
    var _a;
    if (typeof page !== "object" || page === null || !continuationToken) {
        return;
    }
    const pageInfo = (_a = pageMap.get(page)) !== null && _a !== void 0 ? _a : {};
    pageInfo.continuationToken = continuationToken;
    pageMap.set(page, pageInfo);
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link CreatedByType} that the service accepts. */
exports.KnownCreatedByType = void 0;
(function (KnownCreatedByType) {
    /** User */
    KnownCreatedByType["User"] = "User";
    /** Application */
    KnownCreatedByType["Application"] = "Application";
    /** ManagedIdentity */
    KnownCreatedByType["ManagedIdentity"] = "ManagedIdentity";
    /** Key */
    KnownCreatedByType["Key"] = "Key";
})(exports.KnownCreatedByType || (exports.KnownCreatedByType = {}));
/** Known values of {@link ProvisionState} that the service accepts. */
exports.KnownProvisionState = void 0;
(function (KnownProvisionState) {
    /** Accepted */
    KnownProvisionState["Accepted"] = "Accepted";
    /** Creating */
    KnownProvisionState["Creating"] = "Creating";
    /** Updating */
    KnownProvisionState["Updating"] = "Updating";
    /** Deleting */
    KnownProvisionState["Deleting"] = "Deleting";
    /** Succeeded */
    KnownProvisionState["Succeeded"] = "Succeeded";
    /** Failed */
    KnownProvisionState["Failed"] = "Failed";
    /** Canceled */
    KnownProvisionState["Canceled"] = "Canceled";
    /** Deleted */
    KnownProvisionState["Deleted"] = "Deleted";
    /** NotSpecified */
    KnownProvisionState["NotSpecified"] = "NotSpecified";
})(exports.KnownProvisionState || (exports.KnownProvisionState = {}));
/** Known values of {@link SaaSOfferStatus} that the service accepts. */
exports.KnownSaaSOfferStatus = void 0;
(function (KnownSaaSOfferStatus) {
    /** Started */
    KnownSaaSOfferStatus["Started"] = "Started";
    /** PendingFulfillmentStart */
    KnownSaaSOfferStatus["PendingFulfillmentStart"] = "PendingFulfillmentStart";
    /** InProgress */
    KnownSaaSOfferStatus["InProgress"] = "InProgress";
    /** Subscribed */
    KnownSaaSOfferStatus["Subscribed"] = "Subscribed";
    /** Suspended */
    KnownSaaSOfferStatus["Suspended"] = "Suspended";
    /** Reinstated */
    KnownSaaSOfferStatus["Reinstated"] = "Reinstated";
    /** Succeeded */
    KnownSaaSOfferStatus["Succeeded"] = "Succeeded";
    /** Failed */
    KnownSaaSOfferStatus["Failed"] = "Failed";
    /** Unsubscribed */
    KnownSaaSOfferStatus["Unsubscribed"] = "Unsubscribed";
    /** Updating */
    KnownSaaSOfferStatus["Updating"] = "Updating";
})(exports.KnownSaaSOfferStatus || (exports.KnownSaaSOfferStatus = {}));

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const ConfluentAgreementResourceListResponse = {
    type: {
        name: "Composite",
        className: "ConfluentAgreementResourceListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ConfluentAgreementResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ConfluentAgreementResource = {
    type: {
        name: "Composite",
        className: "ConfluentAgreementResource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            },
            publisher: {
                serializedName: "properties.publisher",
                type: {
                    name: "String"
                }
            },
            product: {
                serializedName: "properties.product",
                type: {
                    name: "String"
                }
            },
            plan: {
                serializedName: "properties.plan",
                type: {
                    name: "String"
                }
            },
            licenseTextLink: {
                serializedName: "properties.licenseTextLink",
                type: {
                    name: "String"
                }
            },
            privacyPolicyLink: {
                serializedName: "properties.privacyPolicyLink",
                type: {
                    name: "String"
                }
            },
            retrieveDatetime: {
                serializedName: "properties.retrieveDatetime",
                type: {
                    name: "DateTime"
                }
            },
            signature: {
                serializedName: "properties.signature",
                type: {
                    name: "String"
                }
            },
            accepted: {
                serializedName: "properties.accepted",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const SystemData = {
    type: {
        name: "Composite",
        className: "SystemData",
        modelProperties: {
            createdBy: {
                serializedName: "createdBy",
                type: {
                    name: "String"
                }
            },
            createdByType: {
                serializedName: "createdByType",
                type: {
                    name: "String"
                }
            },
            createdAt: {
                serializedName: "createdAt",
                type: {
                    name: "DateTime"
                }
            },
            lastModifiedBy: {
                serializedName: "lastModifiedBy",
                type: {
                    name: "String"
                }
            },
            lastModifiedByType: {
                serializedName: "lastModifiedByType",
                type: {
                    name: "String"
                }
            },
            lastModifiedAt: {
                serializedName: "lastModifiedAt",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const ResourceProviderDefaultErrorResponse = {
    type: {
        name: "Composite",
        className: "ResourceProviderDefaultErrorResponse",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorResponseBody"
                }
            }
        }
    }
};
const ErrorResponseBody = {
    type: {
        name: "Composite",
        className: "ErrorResponseBody",
        modelProperties: {
            code: {
                serializedName: "code",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorResponseBody"
                        }
                    }
                }
            }
        }
    }
};
const OperationListResult = {
    type: {
        name: "Composite",
        className: "OperationListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "OperationResult"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationResult = {
    type: {
        name: "Composite",
        className: "OperationResult",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            display: {
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "OperationDisplay"
                }
            },
            isDataAction: {
                serializedName: "isDataAction",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const OperationDisplay = {
    type: {
        name: "Composite",
        className: "OperationDisplay",
        modelProperties: {
            provider: {
                serializedName: "provider",
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "resource",
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OrganizationResourceListResult = {
    type: {
        name: "Composite",
        className: "OrganizationResourceListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "OrganizationResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OrganizationResource = {
    type: {
        name: "Composite",
        className: "OrganizationResource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            },
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            createdTime: {
                serializedName: "properties.createdTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            organizationId: {
                serializedName: "properties.organizationId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            ssoUrl: {
                serializedName: "properties.ssoUrl",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            offerDetail: {
                serializedName: "properties.offerDetail",
                type: {
                    name: "Composite",
                    className: "OfferDetail"
                }
            },
            userDetail: {
                serializedName: "properties.userDetail",
                type: {
                    name: "Composite",
                    className: "UserDetail"
                }
            },
            linkOrganization: {
                serializedName: "properties.linkOrganization",
                type: {
                    name: "Composite",
                    className: "LinkOrganization"
                }
            }
        }
    }
};
const OfferDetail = {
    type: {
        name: "Composite",
        className: "OfferDetail",
        modelProperties: {
            publisherId: {
                constraints: {
                    MaxLength: 50
                },
                serializedName: "publisherId",
                required: true,
                type: {
                    name: "String"
                }
            },
            id: {
                constraints: {
                    MaxLength: 50
                },
                serializedName: "id",
                required: true,
                type: {
                    name: "String"
                }
            },
            planId: {
                constraints: {
                    MaxLength: 200
                },
                serializedName: "planId",
                required: true,
                type: {
                    name: "String"
                }
            },
            planName: {
                constraints: {
                    MaxLength: 200
                },
                serializedName: "planName",
                required: true,
                type: {
                    name: "String"
                }
            },
            termUnit: {
                constraints: {
                    MaxLength: 25
                },
                serializedName: "termUnit",
                required: true,
                type: {
                    name: "String"
                }
            },
            termId: {
                constraints: {
                    MaxLength: 50
                },
                serializedName: "termId",
                type: {
                    name: "String"
                }
            },
            privateOfferId: {
                constraints: {
                    MaxLength: 255
                },
                serializedName: "privateOfferId",
                type: {
                    name: "String"
                }
            },
            privateOfferIds: {
                serializedName: "privateOfferIds",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const UserDetail = {
    type: {
        name: "Composite",
        className: "UserDetail",
        modelProperties: {
            firstName: {
                constraints: {
                    MaxLength: 50
                },
                serializedName: "firstName",
                type: {
                    name: "String"
                }
            },
            lastName: {
                constraints: {
                    MaxLength: 50
                },
                serializedName: "lastName",
                type: {
                    name: "String"
                }
            },
            emailAddress: {
                constraints: {
                    Pattern: new RegExp("^\\S+@\\S+\\.\\S+$")
                },
                serializedName: "emailAddress",
                required: true,
                type: {
                    name: "String"
                }
            },
            userPrincipalName: {
                serializedName: "userPrincipalName",
                type: {
                    name: "String"
                }
            },
            aadEmail: {
                serializedName: "aadEmail",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const LinkOrganization = {
    type: {
        name: "Composite",
        className: "LinkOrganization",
        modelProperties: {
            token: {
                serializedName: "token",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OrganizationResourceUpdate = {
    type: {
        name: "Composite",
        className: "OrganizationResourceUpdate",
        modelProperties: {
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }
        }
    }
};
const ValidationResponse = {
    type: {
        name: "Composite",
        className: "ValidationResponse",
        modelProperties: {
            info: {
                serializedName: "info",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }
        }
    }
};
const ListAccessRequestModel = {
    type: {
        name: "Composite",
        className: "ListAccessRequestModel",
        modelProperties: {
            searchFilters: {
                serializedName: "searchFilters",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }
        }
    }
};
const AccessListUsersSuccessResponse = {
    type: {
        name: "Composite",
        className: "AccessListUsersSuccessResponse",
        modelProperties: {
            kind: {
                serializedName: "kind",
                type: {
                    name: "String"
                }
            },
            metadata: {
                serializedName: "metadata",
                type: {
                    name: "Composite",
                    className: "ConfluentListMetadata"
                }
            },
            data: {
                serializedName: "data",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "UserRecord"
                        }
                    }
                }
            }
        }
    }
};
const ConfluentListMetadata = {
    type: {
        name: "Composite",
        className: "ConfluentListMetadata",
        modelProperties: {
            first: {
                serializedName: "first",
                type: {
                    name: "String"
                }
            },
            last: {
                serializedName: "last",
                type: {
                    name: "String"
                }
            },
            prev: {
                serializedName: "prev",
                type: {
                    name: "String"
                }
            },
            next: {
                serializedName: "next",
                type: {
                    name: "String"
                }
            },
            totalSize: {
                serializedName: "total_size",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const UserRecord = {
    type: {
        name: "Composite",
        className: "UserRecord",
        modelProperties: {
            kind: {
                serializedName: "kind",
                type: {
                    name: "String"
                }
            },
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            metadata: {
                serializedName: "metadata",
                type: {
                    name: "Composite",
                    className: "MetadataEntity"
                }
            },
            email: {
                serializedName: "email",
                type: {
                    name: "String"
                }
            },
            fullName: {
                serializedName: "full_name",
                type: {
                    name: "String"
                }
            },
            authType: {
                serializedName: "auth_type",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MetadataEntity = {
    type: {
        name: "Composite",
        className: "MetadataEntity",
        modelProperties: {
            self: {
                serializedName: "self",
                type: {
                    name: "String"
                }
            },
            resourceName: {
                serializedName: "resource_name",
                type: {
                    name: "String"
                }
            },
            createdAt: {
                serializedName: "created_at",
                type: {
                    name: "String"
                }
            },
            updatedAt: {
                serializedName: "updated_at",
                type: {
                    name: "String"
                }
            },
            deletedAt: {
                serializedName: "deleted_at",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AccessListServiceAccountsSuccessResponse = {
    type: {
        name: "Composite",
        className: "AccessListServiceAccountsSuccessResponse",
        modelProperties: {
            kind: {
                serializedName: "kind",
                type: {
                    name: "String"
                }
            },
            metadata: {
                serializedName: "metadata",
                type: {
                    name: "Composite",
                    className: "ConfluentListMetadata"
                }
            },
            data: {
                serializedName: "data",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ServiceAccountRecord"
                        }
                    }
                }
            }
        }
    }
};
const ServiceAccountRecord = {
    type: {
        name: "Composite",
        className: "ServiceAccountRecord",
        modelProperties: {
            kind: {
                serializedName: "kind",
                type: {
                    name: "String"
                }
            },
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            metadata: {
                serializedName: "metadata",
                type: {
                    name: "Composite",
                    className: "MetadataEntity"
                }
            },
            displayName: {
                serializedName: "display_name",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AccessListInvitationsSuccessResponse = {
    type: {
        name: "Composite",
        className: "AccessListInvitationsSuccessResponse",
        modelProperties: {
            kind: {
                serializedName: "kind",
                type: {
                    name: "String"
                }
            },
            metadata: {
                serializedName: "metadata",
                type: {
                    name: "Composite",
                    className: "ConfluentListMetadata"
                }
            },
            data: {
                serializedName: "data",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "InvitationRecord"
                        }
                    }
                }
            }
        }
    }
};
const InvitationRecord = {
    type: {
        name: "Composite",
        className: "InvitationRecord",
        modelProperties: {
            kind: {
                serializedName: "kind",
                type: {
                    name: "String"
                }
            },
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            metadata: {
                serializedName: "metadata",
                type: {
                    name: "Composite",
                    className: "MetadataEntity"
                }
            },
            email: {
                serializedName: "email",
                type: {
                    name: "String"
                }
            },
            authType: {
                serializedName: "auth_type",
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            acceptedAt: {
                serializedName: "accepted_at",
                type: {
                    name: "String"
                }
            },
            expiresAt: {
                serializedName: "expires_at",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AccessInviteUserAccountModel = {
    type: {
        name: "Composite",
        className: "AccessInviteUserAccountModel",
        modelProperties: {
            organizationId: {
                serializedName: "organizationId",
                type: {
                    name: "String"
                }
            },
            email: {
                serializedName: "email",
                type: {
                    name: "String"
                }
            },
            upn: {
                serializedName: "upn",
                type: {
                    name: "String"
                }
            },
            invitedUserDetails: {
                serializedName: "invitedUserDetails",
                type: {
                    name: "Composite",
                    className: "AccessInvitedUserDetails"
                }
            }
        }
    }
};
const AccessInvitedUserDetails = {
    type: {
        name: "Composite",
        className: "AccessInvitedUserDetails",
        modelProperties: {
            invitedEmail: {
                serializedName: "invitedEmail",
                type: {
                    name: "String"
                }
            },
            authType: {
                serializedName: "auth_type",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AccessListEnvironmentsSuccessResponse = {
    type: {
        name: "Composite",
        className: "AccessListEnvironmentsSuccessResponse",
        modelProperties: {
            kind: {
                serializedName: "kind",
                type: {
                    name: "String"
                }
            },
            metadata: {
                serializedName: "metadata",
                type: {
                    name: "Composite",
                    className: "ConfluentListMetadata"
                }
            },
            data: {
                serializedName: "data",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EnvironmentRecord"
                        }
                    }
                }
            }
        }
    }
};
const EnvironmentRecord = {
    type: {
        name: "Composite",
        className: "EnvironmentRecord",
        modelProperties: {
            kind: {
                serializedName: "kind",
                type: {
                    name: "String"
                }
            },
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            metadata: {
                serializedName: "metadata",
                type: {
                    name: "Composite",
                    className: "MetadataEntity"
                }
            },
            displayName: {
                serializedName: "display_name",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AccessListClusterSuccessResponse = {
    type: {
        name: "Composite",
        className: "AccessListClusterSuccessResponse",
        modelProperties: {
            kind: {
                serializedName: "kind",
                type: {
                    name: "String"
                }
            },
            metadata: {
                serializedName: "metadata",
                type: {
                    name: "Composite",
                    className: "ConfluentListMetadata"
                }
            },
            data: {
                serializedName: "data",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ClusterRecord"
                        }
                    }
                }
            }
        }
    }
};
const ClusterRecord = {
    type: {
        name: "Composite",
        className: "ClusterRecord",
        modelProperties: {
            kind: {
                serializedName: "kind",
                type: {
                    name: "String"
                }
            },
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            metadata: {
                serializedName: "metadata",
                type: {
                    name: "Composite",
                    className: "MetadataEntity"
                }
            },
            displayName: {
                serializedName: "display_name",
                type: {
                    name: "String"
                }
            },
            spec: {
                serializedName: "spec",
                type: {
                    name: "Composite",
                    className: "ClusterSpecEntity"
                }
            },
            status: {
                serializedName: "status",
                type: {
                    name: "Composite",
                    className: "ClusterStatusEntity"
                }
            }
        }
    }
};
const ClusterSpecEntity = {
    type: {
        name: "Composite",
        className: "ClusterSpecEntity",
        modelProperties: {
            displayName: {
                serializedName: "display_name",
                type: {
                    name: "String"
                }
            },
            availability: {
                serializedName: "availability",
                type: {
                    name: "String"
                }
            },
            cloud: {
                serializedName: "cloud",
                type: {
                    name: "String"
                }
            },
            zone: {
                serializedName: "zone",
                type: {
                    name: "String"
                }
            },
            region: {
                serializedName: "region",
                type: {
                    name: "String"
                }
            },
            kafkaBootstrapEndpoint: {
                serializedName: "kafka_bootstrap_endpoint",
                type: {
                    name: "String"
                }
            },
            httpEndpoint: {
                serializedName: "http_endpoint",
                type: {
                    name: "String"
                }
            },
            apiEndpoint: {
                serializedName: "api_endpoint",
                type: {
                    name: "String"
                }
            },
            config: {
                serializedName: "config",
                type: {
                    name: "Composite",
                    className: "ClusterConfigEntity"
                }
            },
            environment: {
                serializedName: "environment",
                type: {
                    name: "Composite",
                    className: "ClusterEnvironmentEntity"
                }
            },
            network: {
                serializedName: "network",
                type: {
                    name: "Composite",
                    className: "ClusterNetworkEntity"
                }
            },
            byok: {
                serializedName: "byok",
                type: {
                    name: "Composite",
                    className: "ClusterByokEntity"
                }
            }
        }
    }
};
const ClusterConfigEntity = {
    type: {
        name: "Composite",
        className: "ClusterConfigEntity",
        modelProperties: {
            kind: {
                serializedName: "kind",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ClusterEnvironmentEntity = {
    type: {
        name: "Composite",
        className: "ClusterEnvironmentEntity",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            environment: {
                serializedName: "environment",
                type: {
                    name: "String"
                }
            },
            related: {
                serializedName: "related",
                type: {
                    name: "String"
                }
            },
            resourceName: {
                serializedName: "resource_name",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ClusterNetworkEntity = {
    type: {
        name: "Composite",
        className: "ClusterNetworkEntity",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            environment: {
                serializedName: "environment",
                type: {
                    name: "String"
                }
            },
            related: {
                serializedName: "related",
                type: {
                    name: "String"
                }
            },
            resourceName: {
                serializedName: "resource_name",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ClusterByokEntity = {
    type: {
        name: "Composite",
        className: "ClusterByokEntity",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            related: {
                serializedName: "related",
                type: {
                    name: "String"
                }
            },
            resourceName: {
                serializedName: "resource_name",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ClusterStatusEntity = {
    type: {
        name: "Composite",
        className: "ClusterStatusEntity",
        modelProperties: {
            phase: {
                serializedName: "phase",
                type: {
                    name: "String"
                }
            },
            cku: {
                serializedName: "cku",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const AccessListRoleBindingsSuccessResponse = {
    type: {
        name: "Composite",
        className: "AccessListRoleBindingsSuccessResponse",
        modelProperties: {
            kind: {
                serializedName: "kind",
                type: {
                    name: "String"
                }
            },
            metadata: {
                serializedName: "metadata",
                type: {
                    name: "Composite",
                    className: "ConfluentListMetadata"
                }
            },
            data: {
                serializedName: "data",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RoleBindingRecord"
                        }
                    }
                }
            }
        }
    }
};
const RoleBindingRecord = {
    type: {
        name: "Composite",
        className: "RoleBindingRecord",
        modelProperties: {
            kind: {
                serializedName: "kind",
                type: {
                    name: "String"
                }
            },
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            metadata: {
                serializedName: "metadata",
                type: {
                    name: "Composite",
                    className: "MetadataEntity"
                }
            },
            principal: {
                serializedName: "principal",
                type: {
                    name: "String"
                }
            },
            roleName: {
                serializedName: "role_name",
                type: {
                    name: "String"
                }
            },
            crnPattern: {
                serializedName: "crn_pattern",
                type: {
                    name: "String"
                }
            }
        }
    }
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    AccessInviteUserAccountModel: AccessInviteUserAccountModel,
    AccessInvitedUserDetails: AccessInvitedUserDetails,
    AccessListClusterSuccessResponse: AccessListClusterSuccessResponse,
    AccessListEnvironmentsSuccessResponse: AccessListEnvironmentsSuccessResponse,
    AccessListInvitationsSuccessResponse: AccessListInvitationsSuccessResponse,
    AccessListRoleBindingsSuccessResponse: AccessListRoleBindingsSuccessResponse,
    AccessListServiceAccountsSuccessResponse: AccessListServiceAccountsSuccessResponse,
    AccessListUsersSuccessResponse: AccessListUsersSuccessResponse,
    ClusterByokEntity: ClusterByokEntity,
    ClusterConfigEntity: ClusterConfigEntity,
    ClusterEnvironmentEntity: ClusterEnvironmentEntity,
    ClusterNetworkEntity: ClusterNetworkEntity,
    ClusterRecord: ClusterRecord,
    ClusterSpecEntity: ClusterSpecEntity,
    ClusterStatusEntity: ClusterStatusEntity,
    ConfluentAgreementResource: ConfluentAgreementResource,
    ConfluentAgreementResourceListResponse: ConfluentAgreementResourceListResponse,
    ConfluentListMetadata: ConfluentListMetadata,
    EnvironmentRecord: EnvironmentRecord,
    ErrorResponseBody: ErrorResponseBody,
    InvitationRecord: InvitationRecord,
    LinkOrganization: LinkOrganization,
    ListAccessRequestModel: ListAccessRequestModel,
    MetadataEntity: MetadataEntity,
    OfferDetail: OfferDetail,
    OperationDisplay: OperationDisplay,
    OperationListResult: OperationListResult,
    OperationResult: OperationResult,
    OrganizationResource: OrganizationResource,
    OrganizationResourceListResult: OrganizationResourceListResult,
    OrganizationResourceUpdate: OrganizationResourceUpdate,
    ResourceProviderDefaultErrorResponse: ResourceProviderDefaultErrorResponse,
    RoleBindingRecord: RoleBindingRecord,
    ServiceAccountRecord: ServiceAccountRecord,
    SystemData: SystemData,
    UserDetail: UserDetail,
    UserRecord: UserRecord,
    ValidationResponse: ValidationResponse
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2023-08-22",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "Uuid"
        }
    }
};
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const body = {
    parameterPath: ["options", "body"],
    mapper: ConfluentAgreementResource
};
const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const organizationName = {
    parameterPath: "organizationName",
    mapper: {
        serializedName: "organizationName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const body1 = {
    parameterPath: ["options", "body"],
    mapper: OrganizationResource
};
const body2 = {
    parameterPath: ["options", "body"],
    mapper: OrganizationResourceUpdate
};
const body3 = {
    parameterPath: "body",
    mapper: OrganizationResource
};
const body4 = {
    parameterPath: "body",
    mapper: ListAccessRequestModel
};
const body5 = {
    parameterPath: "body",
    mapper: AccessInviteUserAccountModel
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing MarketplaceAgreements operations. */
class MarketplaceAgreementsImpl {
    /**
     * Initialize a new instance of the class MarketplaceAgreements class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List Confluent marketplace agreements in the subscription.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List Confluent marketplace agreements in the subscription.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$1);
    }
    /**
     * Create Confluent Marketplace agreement in the subscription.
     * @param options The options parameters.
     */
    create(options) {
        return this.client.sendOperationRequest({ options }, createOperationSpec$1);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec$1);
    }
}
// Operation Specifications
const serializer$4 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Confluent/agreements",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ConfluentAgreementResourceListResponse
        },
        default: {
            bodyMapper: ResourceProviderDefaultErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$4
};
const createOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Confluent/agreements/default",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ConfluentAgreementResource
        },
        default: {
            bodyMapper: ResourceProviderDefaultErrorResponse
        }
    },
    requestBody: body,
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$4
};
const listNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ConfluentAgreementResourceListResponse
        },
        default: {
            bodyMapper: ResourceProviderDefaultErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$4
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing OrganizationOperations operations. */
class OrganizationOperationsImpl {
    /**
     * Initialize a new instance of the class OrganizationOperations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List all operations provided by Microsoft.Confluent.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List all operations provided by Microsoft.Confluent.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec);
    }
}
// Operation Specifications
const serializer$3 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/providers/Microsoft.Confluent/operations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationListResult
        },
        default: {
            bodyMapper: ResourceProviderDefaultErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer: serializer$3
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationListResult
        },
        default: {
            bodyMapper: ResourceProviderDefaultErrorResponse
        }
    },
    urlParameters: [$host, nextLink],
    headerParameters: [accept],
    serializer: serializer$3
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
function createLroSpec(inputs) {
    const { args, spec, sendOperationFn } = inputs;
    return {
        requestMethod: spec.httpMethod,
        requestPath: spec.path,
        sendInitialRequest: () => sendOperationFn(args, spec),
        sendPollRequest: (path, options) => {
            const restSpec = tslib.__rest(spec, ["requestBody"]);
            return sendOperationFn(args, Object.assign(Object.assign({}, restSpec), { httpMethod: "GET", path, abortSignal: options === null || options === void 0 ? void 0 : options.abortSignal }));
        }
    };
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Organization operations. */
class OrganizationImpl {
    /**
     * Initialize a new instance of the class Organization class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List all organizations under the specified subscription.
     * @param options The options parameters.
     */
    listBySubscription(options) {
        const iter = this.listBySubscriptionPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listBySubscriptionPagingPage(options, settings);
            }
        };
    }
    listBySubscriptionPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listBySubscription(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listBySubscriptionNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listBySubscriptionPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listBySubscriptionPagingPage(options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List all Organizations under the specified resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName, options) {
        const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByResourceGroupPagingPage(resourceGroupName, options, settings);
            }
        };
    }
    listByResourceGroupPagingPage(resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByResourceGroup(resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByResourceGroupNext(resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByResourceGroupPagingAll(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingAll_1() {
            var _a, e_2, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByResourceGroupPagingPage(resourceGroupName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * List all organizations under the specified subscription.
     * @param options The options parameters.
     */
    _listBySubscription(options) {
        return this.client.sendOperationRequest({ options }, listBySubscriptionOperationSpec);
    }
    /**
     * List all Organizations under the specified resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    _listByResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listByResourceGroupOperationSpec);
    }
    /**
     * Get the properties of a specific Organization resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param options The options parameters.
     */
    get(resourceGroupName, organizationName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, organizationName, options }, getOperationSpec);
    }
    /**
     * Create Organization resource
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName, organizationName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, organizationName, options },
                spec: createOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create Organization resource
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName, organizationName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreate(resourceGroupName, organizationName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Update Organization resource
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param options The options parameters.
     */
    update(resourceGroupName, organizationName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, organizationName, options }, updateOperationSpec);
    }
    /**
     * Delete Organization resource
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, organizationName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, organizationName, options },
                spec: deleteOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Delete Organization resource
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, organizationName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, organizationName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * ListBySubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
     * @param options The options parameters.
     */
    _listBySubscriptionNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listBySubscriptionNextOperationSpec);
    }
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    _listByResourceGroupNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, listByResourceGroupNextOperationSpec);
    }
}
// Operation Specifications
const serializer$2 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listBySubscriptionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Confluent/organizations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OrganizationResourceListResult
        },
        default: {
            bodyMapper: ResourceProviderDefaultErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$2
};
const listByResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OrganizationResourceListResult
        },
        default: {
            bodyMapper: ResourceProviderDefaultErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OrganizationResource
        },
        default: {
            bodyMapper: ResourceProviderDefaultErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        organizationName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const createOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: OrganizationResource
        },
        201: {
            bodyMapper: OrganizationResource
        },
        202: {
            bodyMapper: OrganizationResource
        },
        204: {
            bodyMapper: OrganizationResource
        },
        default: {
            bodyMapper: ResourceProviderDefaultErrorResponse
        }
    },
    requestBody: body1,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        organizationName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$2
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: OrganizationResource
        },
        default: {
            bodyMapper: ResourceProviderDefaultErrorResponse
        }
    },
    requestBody: body2,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        organizationName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$2
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ResourceProviderDefaultErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        organizationName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listBySubscriptionNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OrganizationResourceListResult
        },
        default: {
            bodyMapper: ResourceProviderDefaultErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listByResourceGroupNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OrganizationResourceListResult
        },
        default: {
            bodyMapper: ResourceProviderDefaultErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        nextLink,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing Validations operations. */
class ValidationsImpl {
    /**
     * Initialize a new instance of the class Validations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Organization Validate proxy resource
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param body Organization resource model
     * @param options The options parameters.
     */
    validateOrganization(resourceGroupName, organizationName, body, options) {
        return this.client.sendOperationRequest({ resourceGroupName, organizationName, body, options }, validateOrganizationOperationSpec);
    }
    /**
     * Organization Validate proxy resource
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param body Organization resource model
     * @param options The options parameters.
     */
    validateOrganizationV2(resourceGroupName, organizationName, body, options) {
        return this.client.sendOperationRequest({ resourceGroupName, organizationName, body, options }, validateOrganizationV2OperationSpec);
    }
}
// Operation Specifications
const serializer$1 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const validateOrganizationOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/validations/{organizationName}/orgvalidate",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: OrganizationResource
        },
        default: {
            bodyMapper: ResourceProviderDefaultErrorResponse
        }
    },
    requestBody: body3,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        organizationName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$1
};
const validateOrganizationV2OperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/validations/{organizationName}/orgvalidateV2",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ValidationResponse
        },
        default: {
            bodyMapper: ResourceProviderDefaultErrorResponse
        }
    },
    requestBody: body3,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        organizationName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$1
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing Access operations. */
class AccessImpl {
    /**
     * Initialize a new instance of the class Access class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Organization users details
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param body List Access Request Model
     * @param options The options parameters.
     */
    listUsers(resourceGroupName, organizationName, body, options) {
        return this.client.sendOperationRequest({ resourceGroupName, organizationName, body, options }, listUsersOperationSpec);
    }
    /**
     * Organization service accounts details
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param body List Access Request Model
     * @param options The options parameters.
     */
    listServiceAccounts(resourceGroupName, organizationName, body, options) {
        return this.client.sendOperationRequest({ resourceGroupName, organizationName, body, options }, listServiceAccountsOperationSpec);
    }
    /**
     * Organization accounts invitation details
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param body List Access Request Model
     * @param options The options parameters.
     */
    listInvitations(resourceGroupName, organizationName, body, options) {
        return this.client.sendOperationRequest({ resourceGroupName, organizationName, body, options }, listInvitationsOperationSpec);
    }
    /**
     * Invite user to the organization
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param body Invite user account model
     * @param options The options parameters.
     */
    inviteUser(resourceGroupName, organizationName, body, options) {
        return this.client.sendOperationRequest({ resourceGroupName, organizationName, body, options }, inviteUserOperationSpec);
    }
    /**
     * Environment list of an organization
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param body List Access Request Model
     * @param options The options parameters.
     */
    listEnvironments(resourceGroupName, organizationName, body, options) {
        return this.client.sendOperationRequest({ resourceGroupName, organizationName, body, options }, listEnvironmentsOperationSpec);
    }
    /**
     * Cluster details
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param body List Access Request Model
     * @param options The options parameters.
     */
    listClusters(resourceGroupName, organizationName, body, options) {
        return this.client.sendOperationRequest({ resourceGroupName, organizationName, body, options }, listClustersOperationSpec);
    }
    /**
     * Organization role bindings
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param body List Access Request Model
     * @param options The options parameters.
     */
    listRoleBindings(resourceGroupName, organizationName, body, options) {
        return this.client.sendOperationRequest({ resourceGroupName, organizationName, body, options }, listRoleBindingsOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listUsersOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/access/default/listUsers",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: AccessListUsersSuccessResponse
        },
        default: {
            bodyMapper: ResourceProviderDefaultErrorResponse
        }
    },
    requestBody: body4,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        organizationName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};
const listServiceAccountsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/access/default/listServiceAccounts",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: AccessListServiceAccountsSuccessResponse
        },
        default: {
            bodyMapper: ResourceProviderDefaultErrorResponse
        }
    },
    requestBody: body4,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        organizationName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};
const listInvitationsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/access/default/listInvitations",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: AccessListInvitationsSuccessResponse
        },
        default: {
            bodyMapper: ResourceProviderDefaultErrorResponse
        }
    },
    requestBody: body4,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        organizationName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};
const inviteUserOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/access/default/createInvitation",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: InvitationRecord
        },
        default: {
            bodyMapper: ResourceProviderDefaultErrorResponse
        }
    },
    requestBody: body5,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        organizationName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};
const listEnvironmentsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/access/default/listEnvironments",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: AccessListEnvironmentsSuccessResponse
        },
        default: {
            bodyMapper: ResourceProviderDefaultErrorResponse
        }
    },
    requestBody: body4,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        organizationName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};
const listClustersOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/access/default/listClusters",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: AccessListClusterSuccessResponse
        },
        default: {
            bodyMapper: ResourceProviderDefaultErrorResponse
        }
    },
    requestBody: body4,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        organizationName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};
const listRoleBindingsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/access/default/listRoleBindings",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: AccessListRoleBindingsSuccessResponse
        },
        default: {
            bodyMapper: ResourceProviderDefaultErrorResponse
        }
    },
    requestBody: body4,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        organizationName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class ConfluentManagementClient extends coreClient__namespace.ServiceClient {
    constructor(credentials, subscriptionIdOrOptions, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        let subscriptionId;
        if (typeof subscriptionIdOrOptions === "string") {
            subscriptionId = subscriptionIdOrOptions;
        }
        else if (typeof subscriptionIdOrOptions === "object") {
            options = subscriptionIdOrOptions;
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-confluent/3.0.0`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName
            });
            this.pipeline.addPolicy(coreRestPipeline__namespace.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient__namespace.authorizeRequestOnClaimChallenge
                }
            }));
        }
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.apiVersion = options.apiVersion || "2023-08-22";
        this.marketplaceAgreements = new MarketplaceAgreementsImpl(this);
        this.organizationOperations = new OrganizationOperationsImpl(this);
        this.organization = new OrganizationImpl(this);
        this.validations = new ValidationsImpl(this);
        this.access = new AccessImpl(this);
        this.addCustomApiVersionPolicy(options.apiVersion);
    }
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    addCustomApiVersionPolicy(apiVersion) {
        if (!apiVersion) {
            return;
        }
        const apiVersionPolicy = {
            name: "CustomApiVersionPolicy",
            sendRequest(request, next) {
                return tslib.__awaiter(this, void 0, void 0, function* () {
                    const param = request.url.split("?");
                    if (param.length > 1) {
                        const newParams = param[1].split("&").map((item) => {
                            if (item.indexOf("api-version") > -1) {
                                return "api-version=" + apiVersion;
                            }
                            else {
                                return item;
                            }
                        });
                        request.url = param[0] + "?" + newParams.join("&");
                    }
                    return next(request);
                });
            }
        };
        this.pipeline.addPolicy(apiVersionPolicy);
    }
}

exports.ConfluentManagementClient = ConfluentManagementClient;
exports.getContinuationToken = getContinuationToken;
//# sourceMappingURL=index.js.map
