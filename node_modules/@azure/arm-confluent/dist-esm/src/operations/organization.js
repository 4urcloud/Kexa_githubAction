/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await, __awaiter } from "tslib";
import { setContinuationToken } from "../pagingHelper";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { createHttpPoller, } from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
/// <reference lib="esnext.asynciterable" />
/** Class containing Organization operations. */
export class OrganizationImpl {
    /**
     * Initialize a new instance of the class Organization class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List all organizations under the specified subscription.
     * @param options The options parameters.
     */
    listBySubscription(options) {
        const iter = this.listBySubscriptionPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listBySubscriptionPagingPage(options, settings);
            },
        };
    }
    listBySubscriptionPagingPage(options, settings) {
        return __asyncGenerator(this, arguments, function* listBySubscriptionPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listBySubscription(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listBySubscriptionNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listBySubscriptionPagingAll(options) {
        return __asyncGenerator(this, arguments, function* listBySubscriptionPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.listBySubscriptionPagingPage(options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List all Organizations under the specified resource group.
     * @param resourceGroupName Resource group name
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName, options) {
        const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByResourceGroupPagingPage(resourceGroupName, options, settings);
            },
        };
    }
    listByResourceGroupPagingPage(resourceGroupName, options, settings) {
        return __asyncGenerator(this, arguments, function* listByResourceGroupPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listByResourceGroup(resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listByResourceGroupNext(resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listByResourceGroupPagingAll(resourceGroupName, options) {
        return __asyncGenerator(this, arguments, function* listByResourceGroupPagingAll_1() {
            var _a, e_2, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.listByResourceGroupPagingPage(resourceGroupName, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Lists of all the environments in a organization
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param options The options parameters.
     */
    listEnvironments(resourceGroupName, organizationName, options) {
        const iter = this.listEnvironmentsPagingAll(resourceGroupName, organizationName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listEnvironmentsPagingPage(resourceGroupName, organizationName, options, settings);
            },
        };
    }
    listEnvironmentsPagingPage(resourceGroupName, organizationName, options, settings) {
        return __asyncGenerator(this, arguments, function* listEnvironmentsPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listEnvironments(resourceGroupName, organizationName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listEnvironmentsNext(resourceGroupName, organizationName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listEnvironmentsPagingAll(resourceGroupName, organizationName, options) {
        return __asyncGenerator(this, arguments, function* listEnvironmentsPagingAll_1() {
            var _a, e_3, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.listEnvironmentsPagingPage(resourceGroupName, organizationName, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * Lists of all the clusters in a environment
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param environmentId Confluent environment id
     * @param options The options parameters.
     */
    listClusters(resourceGroupName, organizationName, environmentId, options) {
        const iter = this.listClustersPagingAll(resourceGroupName, organizationName, environmentId, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listClustersPagingPage(resourceGroupName, organizationName, environmentId, options, settings);
            },
        };
    }
    listClustersPagingPage(resourceGroupName, organizationName, environmentId, options, settings) {
        return __asyncGenerator(this, arguments, function* listClustersPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listClusters(resourceGroupName, organizationName, environmentId, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listClustersNext(resourceGroupName, organizationName, environmentId, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listClustersPagingAll(resourceGroupName, organizationName, environmentId, options) {
        return __asyncGenerator(this, arguments, function* listClustersPagingAll_1() {
            var _a, e_4, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.listClustersPagingPage(resourceGroupName, organizationName, environmentId, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_4) throw e_4.error; }
            }
        });
    }
    /**
     * Get schema registry clusters
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param environmentId Confluent environment id
     * @param options The options parameters.
     */
    listSchemaRegistryClusters(resourceGroupName, organizationName, environmentId, options) {
        const iter = this.listSchemaRegistryClustersPagingAll(resourceGroupName, organizationName, environmentId, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listSchemaRegistryClustersPagingPage(resourceGroupName, organizationName, environmentId, options, settings);
            },
        };
    }
    listSchemaRegistryClustersPagingPage(resourceGroupName, organizationName, environmentId, options, settings) {
        return __asyncGenerator(this, arguments, function* listSchemaRegistryClustersPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listSchemaRegistryClusters(resourceGroupName, organizationName, environmentId, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listSchemaRegistryClustersNext(resourceGroupName, organizationName, environmentId, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listSchemaRegistryClustersPagingAll(resourceGroupName, organizationName, environmentId, options) {
        return __asyncGenerator(this, arguments, function* listSchemaRegistryClustersPagingAll_1() {
            var _a, e_5, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.listSchemaRegistryClustersPagingPage(resourceGroupName, organizationName, environmentId, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_5) throw e_5.error; }
            }
        });
    }
    /**
     * List all organizations under the specified subscription.
     * @param options The options parameters.
     */
    _listBySubscription(options) {
        return this.client.sendOperationRequest({ options }, listBySubscriptionOperationSpec);
    }
    /**
     * List all Organizations under the specified resource group.
     * @param resourceGroupName Resource group name
     * @param options The options parameters.
     */
    _listByResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listByResourceGroupOperationSpec);
    }
    /**
     * Get the properties of a specific Organization resource.
     * @param resourceGroupName Resource group name
     * @param organizationName Organization resource name
     * @param options The options parameters.
     */
    get(resourceGroupName, organizationName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, organizationName, options }, getOperationSpec);
    }
    /**
     * Create Organization resource
     * @param resourceGroupName Resource group name
     * @param organizationName Organization resource name
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName, organizationName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, organizationName, options },
                spec: createOperationSpec,
            });
            const poller = yield createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation",
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create Organization resource
     * @param resourceGroupName Resource group name
     * @param organizationName Organization resource name
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName, organizationName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreate(resourceGroupName, organizationName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Update Organization resource
     * @param resourceGroupName Resource group name
     * @param organizationName Organization resource name
     * @param options The options parameters.
     */
    update(resourceGroupName, organizationName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, organizationName, options }, updateOperationSpec);
    }
    /**
     * Delete Organization resource
     * @param resourceGroupName Resource group name
     * @param organizationName Organization resource name
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, organizationName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, organizationName, options },
                spec: deleteOperationSpec,
            });
            const poller = yield createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "location",
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Delete Organization resource
     * @param resourceGroupName Resource group name
     * @param organizationName Organization resource name
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, organizationName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, organizationName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Lists of all the environments in a organization
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param options The options parameters.
     */
    _listEnvironments(resourceGroupName, organizationName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, organizationName, options }, listEnvironmentsOperationSpec);
    }
    /**
     * Get Environment details by environment Id
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param environmentId Confluent environment id
     * @param options The options parameters.
     */
    getEnvironmentById(resourceGroupName, organizationName, environmentId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, organizationName, environmentId, options }, getEnvironmentByIdOperationSpec);
    }
    /**
     * Lists of all the clusters in a environment
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param environmentId Confluent environment id
     * @param options The options parameters.
     */
    _listClusters(resourceGroupName, organizationName, environmentId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, organizationName, environmentId, options }, listClustersOperationSpec);
    }
    /**
     * Get schema registry clusters
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param environmentId Confluent environment id
     * @param options The options parameters.
     */
    _listSchemaRegistryClusters(resourceGroupName, organizationName, environmentId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, organizationName, environmentId, options }, listSchemaRegistryClustersOperationSpec);
    }
    /**
     * cloud provider regions available for creating Schema Registry clusters.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param body List Access Request Model
     * @param options The options parameters.
     */
    listRegions(resourceGroupName, organizationName, body, options) {
        return this.client.sendOperationRequest({ resourceGroupName, organizationName, body, options }, listRegionsOperationSpec);
    }
    /**
     * Creates API key for a schema registry Cluster ID or Kafka Cluster ID under a environment
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param environmentId Confluent environment id
     * @param clusterId Confluent kafka or schema registry cluster id
     * @param body Request payload for get creating API Key for schema registry Cluster ID or Kafka Cluster
     *             ID under a environment
     * @param options The options parameters.
     */
    createAPIKey(resourceGroupName, organizationName, environmentId, clusterId, body, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            organizationName,
            environmentId,
            clusterId,
            body,
            options,
        }, createAPIKeyOperationSpec);
    }
    /**
     * Deletes API key of a kafka or schema registry cluster
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param apiKeyId Confluent API Key id
     * @param options The options parameters.
     */
    deleteClusterAPIKey(resourceGroupName, organizationName, apiKeyId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, organizationName, apiKeyId, options }, deleteClusterAPIKeyOperationSpec);
    }
    /**
     * Get API key details of a kafka or schema registry cluster
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param apiKeyId Confluent API Key id
     * @param options The options parameters.
     */
    getClusterAPIKey(resourceGroupName, organizationName, apiKeyId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, organizationName, apiKeyId, options }, getClusterAPIKeyOperationSpec);
    }
    /**
     * Get schema registry cluster by Id
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param environmentId Confluent environment id
     * @param clusterId Confluent kafka or schema registry cluster id
     * @param options The options parameters.
     */
    getSchemaRegistryClusterById(resourceGroupName, organizationName, environmentId, clusterId, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            organizationName,
            environmentId,
            clusterId,
            options,
        }, getSchemaRegistryClusterByIdOperationSpec);
    }
    /**
     * Get cluster by Id
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param environmentId Confluent environment id
     * @param clusterId Confluent kafka or schema registry cluster id
     * @param options The options parameters.
     */
    getClusterById(resourceGroupName, organizationName, environmentId, clusterId, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            organizationName,
            environmentId,
            clusterId,
            options,
        }, getClusterByIdOperationSpec);
    }
    /**
     * ListBySubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
     * @param options The options parameters.
     */
    _listBySubscriptionNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listBySubscriptionNextOperationSpec);
    }
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName Resource group name
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    _listByResourceGroupNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, listByResourceGroupNextOperationSpec);
    }
    /**
     * ListEnvironmentsNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param nextLink The nextLink from the previous successful call to the ListEnvironments method.
     * @param options The options parameters.
     */
    _listEnvironmentsNext(resourceGroupName, organizationName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, organizationName, nextLink, options }, listEnvironmentsNextOperationSpec);
    }
    /**
     * ListClustersNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param environmentId Confluent environment id
     * @param nextLink The nextLink from the previous successful call to the ListClusters method.
     * @param options The options parameters.
     */
    _listClustersNext(resourceGroupName, organizationName, environmentId, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, organizationName, environmentId, nextLink, options }, listClustersNextOperationSpec);
    }
    /**
     * ListSchemaRegistryClustersNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param environmentId Confluent environment id
     * @param nextLink The nextLink from the previous successful call to the ListSchemaRegistryClusters
     *                 method.
     * @param options The options parameters.
     */
    _listSchemaRegistryClustersNext(resourceGroupName, organizationName, environmentId, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, organizationName, environmentId, nextLink, options }, listSchemaRegistryClustersNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listBySubscriptionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Confluent/organizations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.OrganizationResourceListResult,
        },
        default: {
            bodyMapper: Mappers.ResourceProviderDefaultErrorResponse,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.subscriptionId],
    headerParameters: [Parameters.accept],
    serializer,
};
const listByResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.OrganizationResourceListResult,
        },
        default: {
            bodyMapper: Mappers.ResourceProviderDefaultErrorResponse,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.OrganizationResource,
        },
        default: {
            bodyMapper: Mappers.ResourceProviderDefaultErrorResponse,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.organizationName,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const createOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.OrganizationResource,
        },
        201: {
            bodyMapper: Mappers.OrganizationResource,
        },
        202: {
            bodyMapper: Mappers.OrganizationResource,
        },
        204: {
            bodyMapper: Mappers.OrganizationResource,
        },
        default: {
            bodyMapper: Mappers.ResourceProviderDefaultErrorResponse,
        },
    },
    requestBody: Parameters.body1,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.organizationName,
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer,
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Mappers.OrganizationResource,
        },
        default: {
            bodyMapper: Mappers.ResourceProviderDefaultErrorResponse,
        },
    },
    requestBody: Parameters.body2,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.organizationName,
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer,
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.ResourceProviderDefaultErrorResponse,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.organizationName,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const listEnvironmentsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/environments",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.GetEnvironmentsResponse,
        },
        default: {
            bodyMapper: Mappers.ResourceProviderDefaultErrorResponse,
        },
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.pageSize,
        Parameters.pageToken,
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.organizationName,
        Parameters.resourceGroupName1,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const getEnvironmentByIdOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/environments/{environmentId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.SCEnvironmentRecord,
        },
        default: {
            bodyMapper: Mappers.ResourceProviderDefaultErrorResponse,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.organizationName,
        Parameters.resourceGroupName1,
        Parameters.environmentId,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const listClustersOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/environments/{environmentId}/clusters",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ListClustersSuccessResponse,
        },
        default: {
            bodyMapper: Mappers.ResourceProviderDefaultErrorResponse,
        },
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.pageSize,
        Parameters.pageToken,
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.organizationName,
        Parameters.resourceGroupName1,
        Parameters.environmentId,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const listSchemaRegistryClustersOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/environments/{environmentId}/schemaRegistryClusters",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ListSchemaRegistryClustersResponse,
        },
        default: {
            bodyMapper: Mappers.ResourceProviderDefaultErrorResponse,
        },
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.pageSize,
        Parameters.pageToken,
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.organizationName,
        Parameters.resourceGroupName1,
        Parameters.environmentId,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const listRegionsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/listRegions",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.ListRegionsSuccessResponse,
        },
        default: {
            bodyMapper: Mappers.ResourceProviderDefaultErrorResponse,
        },
    },
    requestBody: Parameters.body3,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.organizationName,
        Parameters.resourceGroupName1,
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer,
};
const createAPIKeyOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/environments/{environmentId}/clusters/{clusterId}/createAPIKey",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.APIKeyRecord,
        },
        default: {
            bodyMapper: Mappers.ResourceProviderDefaultErrorResponse,
        },
    },
    requestBody: Parameters.body4,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.organizationName,
        Parameters.resourceGroupName1,
        Parameters.environmentId,
        Parameters.clusterId,
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer,
};
const deleteClusterAPIKeyOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/apiKeys/{apiKeyId}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.ResourceProviderDefaultErrorResponse,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.organizationName,
        Parameters.resourceGroupName1,
        Parameters.apiKeyId,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const getClusterAPIKeyOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/apiKeys/{apiKeyId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.APIKeyRecord,
        },
        default: {
            bodyMapper: Mappers.ResourceProviderDefaultErrorResponse,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.organizationName,
        Parameters.resourceGroupName1,
        Parameters.apiKeyId,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const getSchemaRegistryClusterByIdOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/environments/{environmentId}/schemaRegistryClusters/{clusterId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.SchemaRegistryClusterRecord,
        },
        default: {
            bodyMapper: Mappers.ResourceProviderDefaultErrorResponse,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.organizationName,
        Parameters.resourceGroupName1,
        Parameters.environmentId,
        Parameters.clusterId,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const getClusterByIdOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/environments/{environmentId}/clusters/{clusterId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.SCClusterRecord,
        },
        default: {
            bodyMapper: Mappers.ResourceProviderDefaultErrorResponse,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.organizationName,
        Parameters.resourceGroupName1,
        Parameters.environmentId,
        Parameters.clusterId,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const listBySubscriptionNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.OrganizationResourceListResult,
        },
        default: {
            bodyMapper: Mappers.ResourceProviderDefaultErrorResponse,
        },
    },
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.nextLink,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const listByResourceGroupNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.OrganizationResourceListResult,
        },
        default: {
            bodyMapper: Mappers.ResourceProviderDefaultErrorResponse,
        },
    },
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.nextLink,
        Parameters.resourceGroupName,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const listEnvironmentsNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.GetEnvironmentsResponse,
        },
        default: {
            bodyMapper: Mappers.ResourceProviderDefaultErrorResponse,
        },
    },
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.nextLink,
        Parameters.organizationName,
        Parameters.resourceGroupName1,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const listClustersNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ListClustersSuccessResponse,
        },
        default: {
            bodyMapper: Mappers.ResourceProviderDefaultErrorResponse,
        },
    },
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.nextLink,
        Parameters.organizationName,
        Parameters.resourceGroupName1,
        Parameters.environmentId,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const listSchemaRegistryClustersNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ListSchemaRegistryClustersResponse,
        },
        default: {
            bodyMapper: Mappers.ResourceProviderDefaultErrorResponse,
        },
    },
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.nextLink,
        Parameters.organizationName,
        Parameters.resourceGroupName1,
        Parameters.environmentId,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
//# sourceMappingURL=organization.js.map