/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/** Class containing Access operations. */
export class AccessImpl {
    /**
     * Initialize a new instance of the class Access class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Organization users details
     * @param resourceGroupName Resource group name
     * @param organizationName Organization resource name
     * @param body List Access Request Model
     * @param options The options parameters.
     */
    listUsers(resourceGroupName, organizationName, body, options) {
        return this.client.sendOperationRequest({ resourceGroupName, organizationName, body, options }, listUsersOperationSpec);
    }
    /**
     * Organization service accounts details
     * @param resourceGroupName Resource group name
     * @param organizationName Organization resource name
     * @param body List Access Request Model
     * @param options The options parameters.
     */
    listServiceAccounts(resourceGroupName, organizationName, body, options) {
        return this.client.sendOperationRequest({ resourceGroupName, organizationName, body, options }, listServiceAccountsOperationSpec);
    }
    /**
     * Organization accounts invitation details
     * @param resourceGroupName Resource group name
     * @param organizationName Organization resource name
     * @param body List Access Request Model
     * @param options The options parameters.
     */
    listInvitations(resourceGroupName, organizationName, body, options) {
        return this.client.sendOperationRequest({ resourceGroupName, organizationName, body, options }, listInvitationsOperationSpec);
    }
    /**
     * Invite user to the organization
     * @param resourceGroupName Resource group name
     * @param organizationName Organization resource name
     * @param body Invite user account model
     * @param options The options parameters.
     */
    inviteUser(resourceGroupName, organizationName, body, options) {
        return this.client.sendOperationRequest({ resourceGroupName, organizationName, body, options }, inviteUserOperationSpec);
    }
    /**
     * Environment list of an organization
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param body List Access Request Model
     * @param options The options parameters.
     */
    listEnvironments(resourceGroupName, organizationName, body, options) {
        return this.client.sendOperationRequest({ resourceGroupName, organizationName, body, options }, listEnvironmentsOperationSpec);
    }
    /**
     * Cluster details
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param body List Access Request Model
     * @param options The options parameters.
     */
    listClusters(resourceGroupName, organizationName, body, options) {
        return this.client.sendOperationRequest({ resourceGroupName, organizationName, body, options }, listClustersOperationSpec);
    }
    /**
     * Organization role bindings
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param body List Access Request Model
     * @param options The options parameters.
     */
    listRoleBindings(resourceGroupName, organizationName, body, options) {
        return this.client.sendOperationRequest({ resourceGroupName, organizationName, body, options }, listRoleBindingsOperationSpec);
    }
    /**
     * Organization role bindings
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param body Create role binding Request Model
     * @param options The options parameters.
     */
    createRoleBinding(resourceGroupName, organizationName, body, options) {
        return this.client.sendOperationRequest({ resourceGroupName, organizationName, body, options }, createRoleBindingOperationSpec);
    }
    /**
     * Organization role bindings
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param roleBindingId Confluent Role binding id
     * @param options The options parameters.
     */
    deleteRoleBinding(resourceGroupName, organizationName, roleBindingId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, organizationName, roleBindingId, options }, deleteRoleBindingOperationSpec);
    }
    /**
     * Organization role bindings
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param body List Access Request Model
     * @param options The options parameters.
     */
    listRoleBindingNameList(resourceGroupName, organizationName, body, options) {
        return this.client.sendOperationRequest({ resourceGroupName, organizationName, body, options }, listRoleBindingNameListOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listUsersOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/access/default/listUsers",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.AccessListUsersSuccessResponse,
        },
        default: {
            bodyMapper: Mappers.ResourceProviderDefaultErrorResponse,
        },
    },
    requestBody: Parameters.body3,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.organizationName,
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer,
};
const listServiceAccountsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/access/default/listServiceAccounts",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.AccessListServiceAccountsSuccessResponse,
        },
        default: {
            bodyMapper: Mappers.ResourceProviderDefaultErrorResponse,
        },
    },
    requestBody: Parameters.body3,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.organizationName,
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer,
};
const listInvitationsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/access/default/listInvitations",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.AccessListInvitationsSuccessResponse,
        },
        default: {
            bodyMapper: Mappers.ResourceProviderDefaultErrorResponse,
        },
    },
    requestBody: Parameters.body3,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.organizationName,
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer,
};
const inviteUserOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/access/default/createInvitation",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.InvitationRecord,
        },
        default: {
            bodyMapper: Mappers.ResourceProviderDefaultErrorResponse,
        },
    },
    requestBody: Parameters.body6,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.organizationName,
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer,
};
const listEnvironmentsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/access/default/listEnvironments",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.AccessListEnvironmentsSuccessResponse,
        },
        default: {
            bodyMapper: Mappers.ResourceProviderDefaultErrorResponse,
        },
    },
    requestBody: Parameters.body3,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.organizationName,
        Parameters.resourceGroupName1,
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer,
};
const listClustersOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/access/default/listClusters",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.AccessListClusterSuccessResponse,
        },
        default: {
            bodyMapper: Mappers.ResourceProviderDefaultErrorResponse,
        },
    },
    requestBody: Parameters.body3,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.organizationName,
        Parameters.resourceGroupName1,
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer,
};
const listRoleBindingsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/access/default/listRoleBindings",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.AccessListRoleBindingsSuccessResponse,
        },
        default: {
            bodyMapper: Mappers.ResourceProviderDefaultErrorResponse,
        },
    },
    requestBody: Parameters.body3,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.organizationName,
        Parameters.resourceGroupName1,
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer,
};
const createRoleBindingOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/access/default/createRoleBinding",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.RoleBindingRecord,
        },
        default: {
            bodyMapper: Mappers.ResourceProviderDefaultErrorResponse,
        },
    },
    requestBody: Parameters.body7,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.organizationName,
        Parameters.resourceGroupName1,
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer,
};
const deleteRoleBindingOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/access/default/deleteRoleBinding/{roleBindingId}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.ResourceProviderDefaultErrorResponse,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.organizationName,
        Parameters.resourceGroupName1,
        Parameters.roleBindingId,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const listRoleBindingNameListOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/access/default/listRoleBindingNameList",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.AccessRoleBindingNameListSuccessResponse,
        },
        default: {
            bodyMapper: Mappers.ResourceProviderDefaultErrorResponse,
        },
    },
    requestBody: Parameters.body3,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.organizationName,
        Parameters.resourceGroupName1,
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer,
};
//# sourceMappingURL=access.js.map