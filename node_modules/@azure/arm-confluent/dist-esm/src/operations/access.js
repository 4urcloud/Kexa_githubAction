/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/** Class containing Access operations. */
export class AccessImpl {
    /**
     * Initialize a new instance of the class Access class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Organization users details
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param body List Access Request Model
     * @param options The options parameters.
     */
    listUsers(resourceGroupName, organizationName, body, options) {
        return this.client.sendOperationRequest({ resourceGroupName, organizationName, body, options }, listUsersOperationSpec);
    }
    /**
     * Organization service accounts details
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param body List Access Request Model
     * @param options The options parameters.
     */
    listServiceAccounts(resourceGroupName, organizationName, body, options) {
        return this.client.sendOperationRequest({ resourceGroupName, organizationName, body, options }, listServiceAccountsOperationSpec);
    }
    /**
     * Organization accounts invitation details
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param body List Access Request Model
     * @param options The options parameters.
     */
    listInvitations(resourceGroupName, organizationName, body, options) {
        return this.client.sendOperationRequest({ resourceGroupName, organizationName, body, options }, listInvitationsOperationSpec);
    }
    /**
     * Invite user to the organization
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param body Invite user account model
     * @param options The options parameters.
     */
    inviteUser(resourceGroupName, organizationName, body, options) {
        return this.client.sendOperationRequest({ resourceGroupName, organizationName, body, options }, inviteUserOperationSpec);
    }
    /**
     * Environment list of an organization
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param body List Access Request Model
     * @param options The options parameters.
     */
    listEnvironments(resourceGroupName, organizationName, body, options) {
        return this.client.sendOperationRequest({ resourceGroupName, organizationName, body, options }, listEnvironmentsOperationSpec);
    }
    /**
     * Cluster details
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param body List Access Request Model
     * @param options The options parameters.
     */
    listClusters(resourceGroupName, organizationName, body, options) {
        return this.client.sendOperationRequest({ resourceGroupName, organizationName, body, options }, listClustersOperationSpec);
    }
    /**
     * Organization role bindings
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param body List Access Request Model
     * @param options The options parameters.
     */
    listRoleBindings(resourceGroupName, organizationName, body, options) {
        return this.client.sendOperationRequest({ resourceGroupName, organizationName, body, options }, listRoleBindingsOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listUsersOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/access/default/listUsers",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.AccessListUsersSuccessResponse
        },
        default: {
            bodyMapper: Mappers.ResourceProviderDefaultErrorResponse
        }
    },
    requestBody: Parameters.body4,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.organizationName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const listServiceAccountsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/access/default/listServiceAccounts",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.AccessListServiceAccountsSuccessResponse
        },
        default: {
            bodyMapper: Mappers.ResourceProviderDefaultErrorResponse
        }
    },
    requestBody: Parameters.body4,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.organizationName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const listInvitationsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/access/default/listInvitations",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.AccessListInvitationsSuccessResponse
        },
        default: {
            bodyMapper: Mappers.ResourceProviderDefaultErrorResponse
        }
    },
    requestBody: Parameters.body4,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.organizationName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const inviteUserOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/access/default/createInvitation",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.InvitationRecord
        },
        default: {
            bodyMapper: Mappers.ResourceProviderDefaultErrorResponse
        }
    },
    requestBody: Parameters.body5,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.organizationName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const listEnvironmentsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/access/default/listEnvironments",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.AccessListEnvironmentsSuccessResponse
        },
        default: {
            bodyMapper: Mappers.ResourceProviderDefaultErrorResponse
        }
    },
    requestBody: Parameters.body4,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.organizationName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const listClustersOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/access/default/listClusters",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.AccessListClusterSuccessResponse
        },
        default: {
            bodyMapper: Mappers.ResourceProviderDefaultErrorResponse
        }
    },
    requestBody: Parameters.body4,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.organizationName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const listRoleBindingsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/access/default/listRoleBindings",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.AccessListRoleBindingsSuccessResponse
        },
        default: {
            bodyMapper: Mappers.ResourceProviderDefaultErrorResponse
        }
    },
    requestBody: Parameters.body4,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.organizationName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
//# sourceMappingURL=access.js.map