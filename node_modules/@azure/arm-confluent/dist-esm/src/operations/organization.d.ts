import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Organization } from "../operationsInterfaces";
import { ConfluentManagementClient } from "../confluentManagementClient";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import { OrganizationResource, OrganizationListBySubscriptionOptionalParams, OrganizationListByResourceGroupOptionalParams, OrganizationGetOptionalParams, OrganizationGetResponse, OrganizationCreateOptionalParams, OrganizationCreateResponse, OrganizationUpdateOptionalParams, OrganizationUpdateResponse, OrganizationDeleteOptionalParams } from "../models";
/** Class containing Organization operations. */
export declare class OrganizationImpl implements Organization {
    private readonly client;
    /**
     * Initialize a new instance of the class Organization class.
     * @param client Reference to the service client
     */
    constructor(client: ConfluentManagementClient);
    /**
     * List all organizations under the specified subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: OrganizationListBySubscriptionOptionalParams): PagedAsyncIterableIterator<OrganizationResource>;
    private listBySubscriptionPagingPage;
    private listBySubscriptionPagingAll;
    /**
     * List all Organizations under the specified resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: OrganizationListByResourceGroupOptionalParams): PagedAsyncIterableIterator<OrganizationResource>;
    private listByResourceGroupPagingPage;
    private listByResourceGroupPagingAll;
    /**
     * List all organizations under the specified subscription.
     * @param options The options parameters.
     */
    private _listBySubscription;
    /**
     * List all Organizations under the specified resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    private _listByResourceGroup;
    /**
     * Get the properties of a specific Organization resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param options The options parameters.
     */
    get(resourceGroupName: string, organizationName: string, options?: OrganizationGetOptionalParams): Promise<OrganizationGetResponse>;
    /**
     * Create Organization resource
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName: string, organizationName: string, options?: OrganizationCreateOptionalParams): Promise<SimplePollerLike<OperationState<OrganizationCreateResponse>, OrganizationCreateResponse>>;
    /**
     * Create Organization resource
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName: string, organizationName: string, options?: OrganizationCreateOptionalParams): Promise<OrganizationCreateResponse>;
    /**
     * Update Organization resource
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param options The options parameters.
     */
    update(resourceGroupName: string, organizationName: string, options?: OrganizationUpdateOptionalParams): Promise<OrganizationUpdateResponse>;
    /**
     * Delete Organization resource
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, organizationName: string, options?: OrganizationDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Delete Organization resource
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, organizationName: string, options?: OrganizationDeleteOptionalParams): Promise<void>;
    /**
     * ListBySubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
     * @param options The options parameters.
     */
    private _listBySubscriptionNext;
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    private _listByResourceGroupNext;
}
//# sourceMappingURL=organization.d.ts.map