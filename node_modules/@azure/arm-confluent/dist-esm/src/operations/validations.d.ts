import { Validations } from "../operationsInterfaces";
import { ConfluentManagementClient } from "../confluentManagementClient";
import { OrganizationResource, ValidationsValidateOrganizationOptionalParams, ValidationsValidateOrganizationResponse, ValidationsValidateOrganizationV2OptionalParams, ValidationsValidateOrganizationV2Response } from "../models";
/** Class containing Validations operations. */
export declare class ValidationsImpl implements Validations {
    private readonly client;
    /**
     * Initialize a new instance of the class Validations class.
     * @param client Reference to the service client
     */
    constructor(client: ConfluentManagementClient);
    /**
     * Organization Validate proxy resource
     * @param resourceGroupName Resource group name
     * @param organizationName Organization resource name
     * @param body Organization resource model
     * @param options The options parameters.
     */
    validateOrganization(resourceGroupName: string, organizationName: string, body: OrganizationResource, options?: ValidationsValidateOrganizationOptionalParams): Promise<ValidationsValidateOrganizationResponse>;
    /**
     * Organization Validate proxy resource
     * @param resourceGroupName Resource group name
     * @param organizationName Organization resource name
     * @param body Organization resource model
     * @param options The options parameters.
     */
    validateOrganizationV2(resourceGroupName: string, organizationName: string, body: OrganizationResource, options?: ValidationsValidateOrganizationV2OptionalParams): Promise<ValidationsValidateOrganizationV2Response>;
}
//# sourceMappingURL=validations.d.ts.map