import * as coreClient from "@azure/core-client";
import * as coreAuth from "@azure/core-auth";
import { Operations, SpatialAnchorsAccounts, RemoteRenderingAccounts } from "./operationsInterfaces";
import { MixedRealityClientOptionalParams, CheckNameAvailabilityRequest, CheckNameAvailabilityLocalOptionalParams, CheckNameAvailabilityLocalResponse } from "./models";
export declare class MixedRealityClient extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the MixedRealityClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g.
     *                       00000000-0000-0000-0000-000000000000)
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: MixedRealityClientOptionalParams);
    /**
     * Check Name Availability for local uniqueness
     * @param location The location in which uniqueness will be verified.
     * @param checkNameAvailability Check Name Availability Request.
     * @param options The options parameters.
     */
    checkNameAvailabilityLocal(location: string, checkNameAvailability: CheckNameAvailabilityRequest, options?: CheckNameAvailabilityLocalOptionalParams): Promise<CheckNameAvailabilityLocalResponse>;
    operations: Operations;
    spatialAnchorsAccounts: SpatialAnchorsAccounts;
    remoteRenderingAccounts: RemoteRenderingAccounts;
}
//# sourceMappingURL=mixedRealityClient.d.ts.map