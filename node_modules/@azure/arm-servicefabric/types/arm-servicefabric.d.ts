import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { OperationState } from '@azure/core-lro';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { SimplePollerLike } from '@azure/core-lro';

/**
 * Defines values for AddOnFeatures. \
 * {@link KnownAddOnFeatures} can be used interchangeably with AddOnFeatures,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **RepairManager** \
 * **DnsService** \
 * **BackupRestoreService** \
 * **ResourceMonitorService**
 */
export declare type AddOnFeatures = string;

/**
 * Defines a delta health policy used to evaluate the health of an application or one of its child entities when upgrading the cluster.
 *
 */
export declare interface ApplicationDeltaHealthPolicy {
    /** The delta health policy used by default to evaluate the health of a service type when upgrading the cluster. */
    defaultServiceTypeDeltaHealthPolicy?: ServiceTypeDeltaHealthPolicy;
    /** The map with service type delta health policy per service type name. The map is empty by default. */
    serviceTypeDeltaHealthPolicies?: {
        [propertyName: string]: ServiceTypeDeltaHealthPolicy;
    };
}

/**
 * Defines a health policy used to evaluate the health of an application or one of its children entities.
 *
 */
export declare interface ApplicationHealthPolicy {
    /** The health policy used by default to evaluate the health of a service type. */
    defaultServiceTypeHealthPolicy?: ServiceTypeHealthPolicy;
    /** The map with service type health policy per service type name. The map is empty by default. */
    serviceTypeHealthPolicies?: {
        [propertyName: string]: ServiceTypeHealthPolicy;
    };
}

/**
 * Describes capacity information for a custom resource balancing metric. This can be used to limit the total consumption of this metric by the services of this application.
 *
 */
export declare interface ApplicationMetricDescription {
    /** The name of the metric. */
    name?: string;
    /**
     * The maximum node capacity for Service Fabric application.
     * This is the maximum Load for an instance of this application on a single node. Even if the capacity of node is greater than this value, Service Fabric will limit the total load of services within the application on each node to this value.
     * If set to zero, capacity for this metric is unlimited on each node.
     * When creating a new application with application capacity defined, the product of MaximumNodes and this value must always be smaller than or equal to TotalApplicationCapacity.
     * When updating existing application with application capacity, the product of MaximumNodes and this value must always be smaller than or equal to TotalApplicationCapacity.
     *
     */
    maximumCapacity?: number;
    /**
     * The node reservation capacity for Service Fabric application.
     * This is the amount of load which is reserved on nodes which have instances of this application.
     * If MinimumNodes is specified, then the product of these values will be the capacity reserved in the cluster for the application.
     * If set to zero, no capacity is reserved for this metric.
     * When setting application capacity or when updating application capacity; this value must be smaller than or equal to MaximumCapacity for each metric.
     *
     */
    reservationCapacity?: number;
    /**
     * The total metric capacity for Service Fabric application.
     * This is the total metric capacity for this application in the cluster. Service Fabric will try to limit the sum of loads of services within the application to this value.
     * When creating a new application with application capacity defined, the product of MaximumNodes and MaximumCapacity must always be smaller than or equal to this value.
     *
     */
    totalApplicationCapacity?: number;
}

/** The application resource. */
export declare interface ApplicationResource extends ProxyResource {
    /** Describes the managed identities for an Azure resource. */
    identity?: ManagedIdentity;
    /** The version of the application type as defined in the application manifest. */
    typeVersion?: string;
    /** List of application parameters with overridden values from their default values specified in the application manifest. */
    parameters?: {
        [propertyName: string]: string;
    };
    /** Describes the policy for a monitored application upgrade. */
    upgradePolicy?: ApplicationUpgradePolicy;
    /** The minimum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. If this property is set to zero, no capacity will be reserved. The value of this property cannot be more than the value of the MaximumNodes property. */
    minimumNodes?: number;
    /** The maximum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. By default, the value of this property is zero and it means that the services can be placed on any node. */
    maximumNodes?: number;
    /** Remove the current application capacity settings. */
    removeApplicationCapacity?: boolean;
    /** List of application capacity metric description. */
    metrics?: ApplicationMetricDescription[];
    /** List of user assigned identities for the application, each mapped to a friendly name. */
    managedIdentities?: ApplicationUserAssignedIdentity[];
    /**
     * The current deployment or provisioning state, which only appears in the response
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /** The application type name as defined in the application manifest. */
    typeName?: string;
}

/** The list of application resources. */
export declare interface ApplicationResourceList {
    value?: ApplicationResource[];
    /**
     * URL to get the next set of application list results if there are any.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** The application resource properties. */
export declare interface ApplicationResourceProperties extends ApplicationResourceUpdateProperties {
    /**
     * The current deployment or provisioning state, which only appears in the response
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /** The application type name as defined in the application manifest. */
    typeName?: string;
}

/** The application resource for patch operations. */
export declare interface ApplicationResourceUpdate extends ProxyResource {
    /** The version of the application type as defined in the application manifest. */
    typeVersion?: string;
    /** List of application parameters with overridden values from their default values specified in the application manifest. */
    parameters?: {
        [propertyName: string]: string;
    };
    /** Describes the policy for a monitored application upgrade. */
    upgradePolicy?: ApplicationUpgradePolicy;
    /** The minimum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. If this property is set to zero, no capacity will be reserved. The value of this property cannot be more than the value of the MaximumNodes property. */
    minimumNodes?: number;
    /** The maximum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. By default, the value of this property is zero and it means that the services can be placed on any node. */
    maximumNodes?: number;
    /** Remove the current application capacity settings. */
    removeApplicationCapacity?: boolean;
    /** List of application capacity metric description. */
    metrics?: ApplicationMetricDescription[];
    /** List of user assigned identities for the application, each mapped to a friendly name. */
    managedIdentities?: ApplicationUserAssignedIdentity[];
}

/** The application resource properties for patch operations. */
export declare interface ApplicationResourceUpdateProperties {
    /** The version of the application type as defined in the application manifest. */
    typeVersion?: string;
    /** List of application parameters with overridden values from their default values specified in the application manifest. */
    parameters?: {
        [propertyName: string]: string;
    };
    /** Describes the policy for a monitored application upgrade. */
    upgradePolicy?: ApplicationUpgradePolicy;
    /** The minimum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. If this property is set to zero, no capacity will be reserved. The value of this property cannot be more than the value of the MaximumNodes property. */
    minimumNodes?: number;
    /** The maximum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. By default, the value of this property is zero and it means that the services can be placed on any node. */
    maximumNodes?: number;
    /** Remove the current application capacity settings. */
    removeApplicationCapacity?: boolean;
    /** List of application capacity metric description. */
    metrics?: ApplicationMetricDescription[];
    /** List of user assigned identities for the application, each mapped to a friendly name. */
    managedIdentities?: ApplicationUserAssignedIdentity[];
}

/** Interface representing a Applications. */
export declare interface Applications {
    /**
     * Gets all application resources created or in the process of being created in the Service Fabric
     * cluster resource.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, clusterName: string, options?: ApplicationsListOptionalParams): PagedAsyncIterableIterator<ApplicationResource>;
    /**
     * Get a Service Fabric application resource created or in the process of being created in the Service
     * Fabric cluster resource.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, clusterName: string, applicationName: string, options?: ApplicationsGetOptionalParams): Promise<ApplicationsGetResponse>;
    /**
     * Create or update a Service Fabric application resource with the specified name.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param parameters The application resource.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, clusterName: string, applicationName: string, parameters: ApplicationResource, options?: ApplicationsCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<ApplicationsCreateOrUpdateResponse>, ApplicationsCreateOrUpdateResponse>>;
    /**
     * Create or update a Service Fabric application resource with the specified name.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param parameters The application resource.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, clusterName: string, applicationName: string, parameters: ApplicationResource, options?: ApplicationsCreateOrUpdateOptionalParams): Promise<ApplicationsCreateOrUpdateResponse>;
    /**
     * Update a Service Fabric application resource with the specified name.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param parameters The application resource for patch operations.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, clusterName: string, applicationName: string, parameters: ApplicationResourceUpdate, options?: ApplicationsUpdateOptionalParams): Promise<SimplePollerLike<OperationState<ApplicationsUpdateResponse>, ApplicationsUpdateResponse>>;
    /**
     * Update a Service Fabric application resource with the specified name.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param parameters The application resource for patch operations.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, clusterName: string, applicationName: string, parameters: ApplicationResourceUpdate, options?: ApplicationsUpdateOptionalParams): Promise<ApplicationsUpdateResponse>;
    /**
     * Delete a Service Fabric application resource with the specified name.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, clusterName: string, applicationName: string, options?: ApplicationsDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Delete a Service Fabric application resource with the specified name.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, clusterName: string, applicationName: string, options?: ApplicationsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface ApplicationsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type ApplicationsCreateOrUpdateResponse = ApplicationResource;

/** Optional parameters. */
export declare interface ApplicationsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface ApplicationsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ApplicationsGetResponse = ApplicationResource;

/** Optional parameters. */
export declare interface ApplicationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type ApplicationsListNextResponse = ApplicationResourceList;

/** Optional parameters. */
export declare interface ApplicationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type ApplicationsListResponse = ApplicationResourceList;

/** Optional parameters. */
export declare interface ApplicationsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type ApplicationsUpdateResponse = ApplicationResource;

/** The application type name resource */
export declare interface ApplicationTypeResource extends ProxyResource {
    /**
     * The current deployment or provisioning state, which only appears in the response.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
}

/** The list of application type names. */
export declare interface ApplicationTypeResourceList {
    value?: ApplicationTypeResource[];
    /**
     * URL to get the next set of application type list results if there are any.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a ApplicationTypes. */
export declare interface ApplicationTypes {
    /**
     * Gets all application type name resources created or in the process of being created in the Service
     * Fabric cluster resource.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, clusterName: string, options?: ApplicationTypesListOptionalParams): PagedAsyncIterableIterator<ApplicationTypeResource>;
    /**
     * Get a Service Fabric application type name resource created or in the process of being created in
     * the Service Fabric cluster resource.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, clusterName: string, applicationTypeName: string, options?: ApplicationTypesGetOptionalParams): Promise<ApplicationTypesGetResponse>;
    /**
     * Create or update a Service Fabric application type name resource with the specified name.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @param parameters The application type name resource.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, clusterName: string, applicationTypeName: string, parameters: ApplicationTypeResource, options?: ApplicationTypesCreateOrUpdateOptionalParams): Promise<ApplicationTypesCreateOrUpdateResponse>;
    /**
     * Delete a Service Fabric application type name resource with the specified name.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, clusterName: string, applicationTypeName: string, options?: ApplicationTypesDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Delete a Service Fabric application type name resource with the specified name.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, clusterName: string, applicationTypeName: string, options?: ApplicationTypesDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface ApplicationTypesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type ApplicationTypesCreateOrUpdateResponse = ApplicationTypeResource;

/** Optional parameters. */
export declare interface ApplicationTypesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface ApplicationTypesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ApplicationTypesGetResponse = ApplicationTypeResource;

/** Optional parameters. */
export declare interface ApplicationTypesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type ApplicationTypesListNextResponse = ApplicationTypeResourceList;

/** Optional parameters. */
export declare interface ApplicationTypesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type ApplicationTypesListResponse = ApplicationTypeResourceList;

/** An application type version resource for the specified application type name resource. */
export declare interface ApplicationTypeVersionResource extends ProxyResource {
    /**
     * The current deployment or provisioning state, which only appears in the response
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /** The URL to the application package */
    appPackageUrl?: string;
    /**
     * List of application type parameters that can be overridden when creating or updating the application.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly defaultParameterList?: {
        [propertyName: string]: string;
    };
}

/** The list of application type version resources for the specified application type name resource. */
export declare interface ApplicationTypeVersionResourceList {
    value?: ApplicationTypeVersionResource[];
    /**
     * URL to get the next set of application type version list results if there are any.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a ApplicationTypeVersions. */
export declare interface ApplicationTypeVersions {
    /**
     * Gets all application type version resources created or in the process of being created in the
     * Service Fabric application type name resource.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, clusterName: string, applicationTypeName: string, options?: ApplicationTypeVersionsListOptionalParams): PagedAsyncIterableIterator<ApplicationTypeVersionResource>;
    /**
     * Get a Service Fabric application type version resource created or in the process of being created in
     * the Service Fabric application type name resource.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @param version The application type version.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, clusterName: string, applicationTypeName: string, version: string, options?: ApplicationTypeVersionsGetOptionalParams): Promise<ApplicationTypeVersionsGetResponse>;
    /**
     * Create or update a Service Fabric application type version resource with the specified name.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @param version The application type version.
     * @param parameters The application type version resource.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, clusterName: string, applicationTypeName: string, version: string, parameters: ApplicationTypeVersionResource, options?: ApplicationTypeVersionsCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<ApplicationTypeVersionsCreateOrUpdateResponse>, ApplicationTypeVersionsCreateOrUpdateResponse>>;
    /**
     * Create or update a Service Fabric application type version resource with the specified name.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @param version The application type version.
     * @param parameters The application type version resource.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, clusterName: string, applicationTypeName: string, version: string, parameters: ApplicationTypeVersionResource, options?: ApplicationTypeVersionsCreateOrUpdateOptionalParams): Promise<ApplicationTypeVersionsCreateOrUpdateResponse>;
    /**
     * Delete a Service Fabric application type version resource with the specified name.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @param version The application type version.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, clusterName: string, applicationTypeName: string, version: string, options?: ApplicationTypeVersionsDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Delete a Service Fabric application type version resource with the specified name.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @param version The application type version.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, clusterName: string, applicationTypeName: string, version: string, options?: ApplicationTypeVersionsDeleteOptionalParams): Promise<void>;
}

export declare interface ApplicationTypeVersionsCleanupPolicy {
    /** Number of unused versions per application type to keep. */
    maxUnusedVersionsToKeep: number;
}

/** Optional parameters. */
export declare interface ApplicationTypeVersionsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type ApplicationTypeVersionsCreateOrUpdateResponse = ApplicationTypeVersionResource;

/** Optional parameters. */
export declare interface ApplicationTypeVersionsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface ApplicationTypeVersionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ApplicationTypeVersionsGetResponse = ApplicationTypeVersionResource;

/** Optional parameters. */
export declare interface ApplicationTypeVersionsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type ApplicationTypeVersionsListNextResponse = ApplicationTypeVersionResourceList;

/** Optional parameters. */
export declare interface ApplicationTypeVersionsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type ApplicationTypeVersionsListResponse = ApplicationTypeVersionResourceList;

/** Describes the policy for a monitored application upgrade. */
export declare interface ApplicationUpgradePolicy {
    /** The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer). */
    upgradeReplicaSetCheckTimeout?: string;
    /** If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data). */
    forceRestart?: boolean;
    /** The policy used for monitoring the application upgrade */
    rollingUpgradeMonitoringPolicy?: ArmRollingUpgradeMonitoringPolicy;
    /**
     * Defines a health policy used to evaluate the health of an application or one of its children entities.
     *
     */
    applicationHealthPolicy?: ArmApplicationHealthPolicy;
    /** The mode used to monitor health during a rolling upgrade. The values are UnmonitoredAuto, UnmonitoredManual, and Monitored. */
    upgradeMode?: RollingUpgradeMode;
    /** Determines whether the application should be recreated on update. If value=true, the rest of the upgrade policy parameters are not allowed and it will result in availability loss. */
    recreateApplication?: boolean;
}

export declare interface ApplicationUserAssignedIdentity {
    /** The friendly name of user assigned identity. */
    name: string;
    /** The principal id of user assigned identity. */
    principalId: string;
}

/**
 * Defines a health policy used to evaluate the health of an application or one of its children entities.
 *
 */
export declare interface ArmApplicationHealthPolicy {
    /** Indicates whether warnings are treated with the same severity as errors. */
    considerWarningAsError?: boolean;
    /**
     * The maximum allowed percentage of unhealthy deployed applications. Allowed values are Byte values from zero to 100.
     * The percentage represents the maximum tolerated percentage of deployed applications that can be unhealthy before the application is considered in error.
     * This is calculated by dividing the number of unhealthy deployed applications over the number of nodes where the application is currently deployed on in the cluster.
     * The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.
     *
     */
    maxPercentUnhealthyDeployedApplications?: number;
    /** The health policy used by default to evaluate the health of a service type. */
    defaultServiceTypeHealthPolicy?: ArmServiceTypeHealthPolicy;
    /** The map with service type health policy per service type name. The map is empty by default. */
    serviceTypeHealthPolicyMap?: {
        [propertyName: string]: ArmServiceTypeHealthPolicy;
    };
}

/** The policy used for monitoring the application upgrade */
export declare interface ArmRollingUpgradeMonitoringPolicy {
    /** The activation Mode of the service package */
    failureAction?: ArmUpgradeFailureAction;
    /** The amount of time to wait after completing an upgrade domain before applying health policies. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds. */
    healthCheckWaitDuration?: string;
    /** The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds. */
    healthCheckStableDuration?: string;
    /** The amount of time to retry health evaluation when the application or cluster is unhealthy before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds. */
    healthCheckRetryTimeout?: string;
    /** The amount of time the overall upgrade has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds. */
    upgradeTimeout?: string;
    /** The amount of time each upgrade domain has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds. */
    upgradeDomainTimeout?: string;
}

/**
 * Defines values for ArmServicePackageActivationMode. \
 * {@link KnownArmServicePackageActivationMode} can be used interchangeably with ArmServicePackageActivationMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SharedProcess**: Indicates the application package activation mode will use shared process. \
 * **ExclusiveProcess**: Indicates the application package activation mode will use exclusive process.
 */
export declare type ArmServicePackageActivationMode = string;

/**
 * Represents the health policy used to evaluate the health of services belonging to a service type.
 *
 */
export declare interface ArmServiceTypeHealthPolicy {
    /**
     * The maximum percentage of services allowed to be unhealthy before your application is considered in error.
     *
     */
    maxPercentUnhealthyServices?: number;
    /**
     * The maximum percentage of partitions per service allowed to be unhealthy before your application is considered in error.
     *
     */
    maxPercentUnhealthyPartitionsPerService?: number;
    /**
     * The maximum percentage of replicas per partition allowed to be unhealthy before your application is considered in error.
     *
     */
    maxPercentUnhealthyReplicasPerPartition?: number;
}

/**
 * Defines values for ArmUpgradeFailureAction. \
 * {@link KnownArmUpgradeFailureAction} can be used interchangeably with ArmUpgradeFailureAction,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Rollback**: Indicates that a rollback of the upgrade will be performed by Service Fabric if the upgrade fails. \
 * **Manual**: Indicates that a manual repair will need to be performed by the administrator if the upgrade fails. Service Fabric will not proceed to the next upgrade domain automatically.
 */
export declare type ArmUpgradeFailureAction = string;

/** Operation supported by the Service Fabric resource provider */
export declare interface AvailableOperationDisplay {
    /** The name of the provider. */
    provider?: string;
    /** The resource on which the operation is performed */
    resource?: string;
    /** The operation that can be performed. */
    operation?: string;
    /** Operation description */
    description?: string;
}

/** The settings to enable AAD authentication on the cluster. */
export declare interface AzureActiveDirectory {
    /** Azure active directory tenant id. */
    tenantId?: string;
    /** Azure active directory cluster application id. */
    clusterApplication?: string;
    /** Azure active directory client application id. */
    clientApplication?: string;
}

/** Describes the certificate details. */
export declare interface CertificateDescription {
    /** Thumbprint of the primary certificate. */
    thumbprint: string;
    /** Thumbprint of the secondary certificate. */
    thumbprintSecondary?: string;
    /** The local certificate store location. */
    x509StoreName?: StoreName;
}

/** Describes the client certificate details using common name. */
export declare interface ClientCertificateCommonName {
    /** Indicates if the client certificate has admin access to the cluster. Non admin clients can perform only read only operations on the cluster. */
    isAdmin: boolean;
    /** The common name of the client certificate. */
    certificateCommonName: string;
    /** The issuer thumbprint of the client certificate. */
    certificateIssuerThumbprint: string;
}

/** Describes the client certificate details using thumbprint. */
export declare interface ClientCertificateThumbprint {
    /** Indicates if the client certificate has admin access to the cluster. Non admin clients can perform only read only operations on the cluster. */
    isAdmin: boolean;
    /** The thumbprint of the client certificate. */
    certificateThumbprint: string;
}

/**
 * The cluster resource
 *
 */
export declare interface Cluster extends Resource {
    /** The list of add-on features to enable in the cluster. */
    addOnFeatures?: AddOnFeatures[];
    /**
     * The Service Fabric runtime versions available for this cluster.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly availableClusterVersions?: ClusterVersionDetails[];
    /** The AAD authentication settings of the cluster. */
    azureActiveDirectory?: AzureActiveDirectory;
    /** The certificate to use for securing the cluster. The certificate provided will be used for node to node security within the cluster, SSL certificate for cluster management endpoint and default admin client. */
    certificate?: CertificateDescription;
    /** Describes a list of server certificates referenced by common name that are used to secure the cluster. */
    certificateCommonNames?: ServerCertificateCommonNames;
    /** The list of client certificates referenced by common name that are allowed to manage the cluster. */
    clientCertificateCommonNames?: ClientCertificateCommonName[];
    /** The list of client certificates referenced by thumbprint that are allowed to manage the cluster. */
    clientCertificateThumbprints?: ClientCertificateThumbprint[];
    /** The Service Fabric runtime version of the cluster. This property can only by set the user when **upgradeMode** is set to 'Manual'. To get list of available Service Fabric versions for new clusters use [ClusterVersion API](https://learn.microsoft.com/rest/api/servicefabric/cluster-versions/list). To get the list of available version for existing clusters use **availableClusterVersions**. */
    clusterCodeVersion?: string;
    /**
     * The Azure Resource Provider endpoint. A system service in the cluster connects to this  endpoint.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly clusterEndpoint?: string;
    /**
     * A service generated unique identifier for the cluster resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly clusterId?: string;
    /**
     * The current state of the cluster.
     *
     *   - WaitingForNodes - Indicates that the cluster resource is created and the resource provider is waiting for Service Fabric VM extension to boot up and report to it.
     *   - Deploying - Indicates that the Service Fabric runtime is being installed on the VMs. Cluster resource will be in this state until the cluster boots up and system services are up.
     *   - BaselineUpgrade - Indicates that the cluster is upgrading to establishes the cluster version. This upgrade is automatically initiated when the cluster boots up for the first time.
     *   - UpdatingUserConfiguration - Indicates that the cluster is being upgraded with the user provided configuration.
     *   - UpdatingUserCertificate - Indicates that the cluster is being upgraded with the user provided certificate.
     *   - UpdatingInfrastructure - Indicates that the cluster is being upgraded with the latest Service Fabric runtime version. This happens only when the **upgradeMode** is set to 'Automatic'.
     *   - EnforcingClusterVersion - Indicates that cluster is on a different version than expected and the cluster is being upgraded to the expected version.
     *   - UpgradeServiceUnreachable - Indicates that the system service in the cluster is no longer polling the Resource Provider. Clusters in this state cannot be managed by the Resource Provider.
     *   - AutoScale - Indicates that the ReliabilityLevel of the cluster is being adjusted.
     *   - Ready - Indicates that the cluster is in a stable state.
     *
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly clusterState?: ClusterState;
    /** The storage account information for storing Service Fabric diagnostic logs. */
    diagnosticsStorageAccountConfig?: DiagnosticsStorageAccountConfig;
    /** Indicates if the event store service is enabled. */
    eventStoreServiceEnabled?: boolean;
    /** The list of custom fabric settings to configure the cluster. */
    fabricSettings?: SettingsSectionDescription[];
    /** The http management endpoint of the cluster. */
    managementEndpoint?: string;
    /** The list of node types in the cluster. */
    nodeTypes?: NodeTypeDescription[];
    /**
     * The provisioning state of the cluster resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /**
     * The reliability level sets the replica set size of system services. Learn about [ReliabilityLevel](https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-capacity).
     *
     *   - None - Run the System services with a target replica set count of 1. This should only be used for test clusters.
     *   - Bronze - Run the System services with a target replica set count of 3. This should only be used for test clusters.
     *   - Silver - Run the System services with a target replica set count of 5.
     *   - Gold - Run the System services with a target replica set count of 7.
     *   - Platinum - Run the System services with a target replica set count of 9.
     *
     */
    reliabilityLevel?: ReliabilityLevel;
    /** The server certificate used by reverse proxy. */
    reverseProxyCertificate?: CertificateDescription;
    /** Describes a list of server certificates referenced by common name that are used to secure the cluster. */
    reverseProxyCertificateCommonNames?: ServerCertificateCommonNames;
    /** The policy to use when upgrading the cluster. */
    upgradeDescription?: ClusterUpgradePolicy;
    /** The upgrade mode of the cluster when new Service Fabric runtime version is available. */
    upgradeMode?: UpgradeMode;
    /** The policy used to clean up unused versions. */
    applicationTypeVersionsCleanupPolicy?: ApplicationTypeVersionsCleanupPolicy;
    /** The VM image VMSS has been configured with. Generic names such as Windows or Linux can be used. */
    vmImage?: string;
    /** This property controls the logical grouping of VMs in upgrade domains (UDs). This property can't be modified if a node type with multiple Availability Zones is already present in the cluster. */
    sfZonalUpgradeMode?: SfZonalUpgradeMode;
    /** This property defines the upgrade mode for the virtual machine scale set, it is mandatory if a node type with multiple Availability Zones is added. */
    vmssZonalUpgradeMode?: VmssZonalUpgradeMode;
    /** Indicates if infrastructure service manager is enabled. */
    infrastructureServiceManager?: boolean;
    /** Indicates when new cluster runtime version upgrades will be applied after they are released. By default is Wave0. Only applies when **upgradeMode** is set to 'Automatic'. */
    upgradeWave?: ClusterUpgradeCadence;
    /** Indicates the start date and time to pause automatic runtime version upgrades on the cluster for an specific period of time on the cluster (UTC). */
    upgradePauseStartTimestampUtc?: Date;
    /** Indicates the end date and time to pause automatic runtime version upgrades on the cluster for an specific period of time on the cluster (UTC). */
    upgradePauseEndTimestampUtc?: Date;
    /** Boolean to pause automatic runtime version upgrades to the cluster. */
    waveUpgradePaused?: boolean;
    /** Indicates a list of notification channels for cluster events. */
    notifications?: Notification_2[];
}

/** The list results of the Service Fabric runtime versions. */
export declare interface ClusterCodeVersionsListResult {
    value?: ClusterCodeVersionsResult[];
    /** The URL to use for getting the next set of results. */
    nextLink?: string;
}

/** The result of the Service Fabric runtime versions */
export declare interface ClusterCodeVersionsResult {
    /** The identification of the result */
    id?: string;
    /** The name of the result */
    name?: string;
    /** The result resource type */
    type?: string;
    /** The Service Fabric runtime version of the cluster. */
    codeVersion?: string;
    /** The date of expiry of support of the version. */
    supportExpiryUtc?: string;
    /** Indicates if this version is for Windows or Linux operating system. */
    environment?: ClusterEnvironment;
}

/**
 * Defines values for ClusterEnvironment. \
 * {@link KnownClusterEnvironment} can be used interchangeably with ClusterEnvironment,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Windows** \
 * **Linux**
 */
export declare type ClusterEnvironment = string;

/**
 * Defines a health policy used to evaluate the health of the cluster or of a cluster node.
 *
 */
export declare interface ClusterHealthPolicy {
    /**
     * The maximum allowed percentage of unhealthy nodes before reporting an error. For example, to allow 10% of nodes to be unhealthy, this value would be 10.
     *
     * The percentage represents the maximum tolerated percentage of nodes that can be unhealthy before the cluster is considered in error.
     * If the percentage is respected but there is at least one unhealthy node, the health is evaluated as Warning.
     * The percentage is calculated by dividing the number of unhealthy nodes over the total number of nodes in the cluster.
     * The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.
     *
     * In large clusters, some nodes will always be down or out for repairs, so this percentage should be configured to tolerate that.
     *
     */
    maxPercentUnhealthyNodes?: number;
    /**
     * The maximum allowed percentage of unhealthy applications before reporting an error. For example, to allow 10% of applications to be unhealthy, this value would be 10.
     *
     * The percentage represents the maximum tolerated percentage of applications that can be unhealthy before the cluster is considered in error.
     * If the percentage is respected but there is at least one unhealthy application, the health is evaluated as Warning.
     * This is calculated by dividing the number of unhealthy applications over the total number of application instances in the cluster, excluding applications of application types that are included in the ApplicationTypeHealthPolicyMap.
     * The computation rounds up to tolerate one failure on small numbers of applications. Default percentage is zero.
     *
     */
    maxPercentUnhealthyApplications?: number;
    /** Defines the application health policy map used to evaluate the health of an application or one of its children entities. */
    applicationHealthPolicies?: {
        [propertyName: string]: ApplicationHealthPolicy;
    };
}

/** Cluster list results */
export declare interface ClusterListResult {
    value?: Cluster[];
    /** The URL to use for getting the next set of results. */
    nextLink?: string;
}

/** Interface representing a Clusters. */
export declare interface Clusters {
    /**
     * Gets all Service Fabric cluster resources created or in the process of being created in the resource
     * group.
     * @param resourceGroupName The name of the resource group.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: ClustersListByResourceGroupOptionalParams): PagedAsyncIterableIterator<Cluster>;
    /**
     * Gets all Service Fabric cluster resources created or in the process of being created in the
     * subscription.
     * @param options The options parameters.
     */
    list(options?: ClustersListOptionalParams): PagedAsyncIterableIterator<Cluster>;
    /**
     * Get a Service Fabric cluster resource created or in the process of being created in the specified
     * resource group.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, clusterName: string, options?: ClustersGetOptionalParams): Promise<ClustersGetResponse>;
    /**
     * Create or update a Service Fabric cluster resource with the specified name.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param parameters The cluster resource.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, clusterName: string, parameters: Cluster, options?: ClustersCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<ClustersCreateOrUpdateResponse>, ClustersCreateOrUpdateResponse>>;
    /**
     * Create or update a Service Fabric cluster resource with the specified name.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param parameters The cluster resource.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, clusterName: string, parameters: Cluster, options?: ClustersCreateOrUpdateOptionalParams): Promise<ClustersCreateOrUpdateResponse>;
    /**
     * Update the configuration of a Service Fabric cluster resource with the specified name.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param parameters The parameters which contains the property value and property name which used to
     *                   update the cluster configuration.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, clusterName: string, parameters: ClusterUpdateParameters, options?: ClustersUpdateOptionalParams): Promise<SimplePollerLike<OperationState<ClustersUpdateResponse>, ClustersUpdateResponse>>;
    /**
     * Update the configuration of a Service Fabric cluster resource with the specified name.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param parameters The parameters which contains the property value and property name which used to
     *                   update the cluster configuration.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, clusterName: string, parameters: ClusterUpdateParameters, options?: ClustersUpdateOptionalParams): Promise<ClustersUpdateResponse>;
    /**
     * Delete a Service Fabric cluster resource with the specified name.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, clusterName: string, options?: ClustersDeleteOptionalParams): Promise<void>;
    /**
     * If a target is not provided, it will get the minimum and maximum versions available from the current
     * cluster version. If a target is given, it will provide the required path to get from the current
     * cluster version to the target version.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param options The options parameters.
     */
    listUpgradableVersions(resourceGroupName: string, clusterName: string, options?: ClustersListUpgradableVersionsOptionalParams): Promise<ClustersListUpgradableVersionsResponse>;
}

/** Optional parameters. */
export declare interface ClustersCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type ClustersCreateOrUpdateResponse = Cluster;

/** Optional parameters. */
export declare interface ClustersDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface ClustersGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ClustersGetResponse = Cluster;

/** Optional parameters. */
export declare interface ClustersListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type ClustersListByResourceGroupNextResponse = ClusterListResult;

/** Optional parameters. */
export declare interface ClustersListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type ClustersListByResourceGroupResponse = ClusterListResult;

/** Optional parameters. */
export declare interface ClustersListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type ClustersListNextResponse = ClusterListResult;

/** Optional parameters. */
export declare interface ClustersListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type ClustersListResponse = ClusterListResult;

/** Optional parameters. */
export declare interface ClustersListUpgradableVersionsOptionalParams extends coreClient.OperationOptions {
    /** The upgrade path description with target version. */
    versionsDescription?: UpgradableVersionsDescription;
}

/** Contains response data for the listUpgradableVersions operation. */
export declare type ClustersListUpgradableVersionsResponse = UpgradableVersionPathResult;

/**
 * Defines values for ClusterState. \
 * {@link KnownClusterState} can be used interchangeably with ClusterState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **WaitingForNodes** \
 * **Deploying** \
 * **BaselineUpgrade** \
 * **UpdatingUserConfiguration** \
 * **UpdatingUserCertificate** \
 * **UpdatingInfrastructure** \
 * **EnforcingClusterVersion** \
 * **UpgradeServiceUnreachable** \
 * **AutoScale** \
 * **Ready**
 */
export declare type ClusterState = string;

/** Optional parameters. */
export declare interface ClustersUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type ClustersUpdateResponse = Cluster;

/** Cluster update request */
export declare interface ClusterUpdateParameters {
    /** Cluster update parameters */
    tags?: {
        [propertyName: string]: string;
    };
    /** The list of add-on features to enable in the cluster. */
    addOnFeatures?: AddOnFeatures[];
    /** The certificate to use for securing the cluster. The certificate provided will be used for  node to node security within the cluster, SSL certificate for cluster management endpoint and default  admin client. */
    certificate?: CertificateDescription;
    /** Describes a list of server certificates referenced by common name that are used to secure the cluster. */
    certificateCommonNames?: ServerCertificateCommonNames;
    /** The list of client certificates referenced by common name that are allowed to manage the cluster. This will overwrite the existing list. */
    clientCertificateCommonNames?: ClientCertificateCommonName[];
    /** The list of client certificates referenced by thumbprint that are allowed to manage the cluster. This will overwrite the existing list. */
    clientCertificateThumbprints?: ClientCertificateThumbprint[];
    /** The Service Fabric runtime version of the cluster. This property can only by set the user when **upgradeMode** is set to 'Manual'. To get list of available Service Fabric versions for new clusters use [ClusterVersion API](https://learn.microsoft.com/rest/api/servicefabric/cluster-versions/list). To get the list of available version for existing clusters use **availableClusterVersions**. */
    clusterCodeVersion?: string;
    /** Indicates if the event store service is enabled. */
    eventStoreServiceEnabled?: boolean;
    /** The list of custom fabric settings to configure the cluster. This will overwrite the existing list. */
    fabricSettings?: SettingsSectionDescription[];
    /** The list of node types in the cluster. This will overwrite the existing list. */
    nodeTypes?: NodeTypeDescription[];
    /**
     * The reliability level sets the replica set size of system services. Learn about [ReliabilityLevel](https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-capacity).
     *
     *   - None - Run the System services with a target replica set count of 1. This should only be used for test clusters.
     *   - Bronze - Run the System services with a target replica set count of 3. This should only be used for test clusters.
     *   - Silver - Run the System services with a target replica set count of 5.
     *   - Gold - Run the System services with a target replica set count of 7.
     *   - Platinum - Run the System services with a target replica set count of 9.
     *
     */
    reliabilityLevel?: ReliabilityLevel;
    /** The server certificate used by reverse proxy. */
    reverseProxyCertificate?: CertificateDescription;
    /** The policy to use when upgrading the cluster. */
    upgradeDescription?: ClusterUpgradePolicy;
    /** The policy used to clean up unused versions. */
    applicationTypeVersionsCleanupPolicy?: ApplicationTypeVersionsCleanupPolicy;
    /** The upgrade mode of the cluster when new Service Fabric runtime version is available. */
    upgradeMode?: UpgradeMode;
    /** This property controls the logical grouping of VMs in upgrade domains (UDs). This property can't be modified if a node type with multiple Availability Zones is already present in the cluster. */
    sfZonalUpgradeMode?: SfZonalUpgradeMode;
    /** This property defines the upgrade mode for the virtual machine scale set, it is mandatory if a node type with multiple Availability Zones is added. */
    vmssZonalUpgradeMode?: VmssZonalUpgradeMode;
    /** Indicates if infrastructure service manager is enabled. */
    infrastructureServiceManager?: boolean;
    /** Indicates when new cluster runtime version upgrades will be applied after they are released. By default is Wave0. Only applies when **upgradeMode** is set to 'Automatic'. */
    upgradeWave?: ClusterUpgradeCadence;
    /** The start timestamp to pause runtime version upgrades on the cluster (UTC). */
    upgradePauseStartTimestampUtc?: Date;
    /** The end timestamp of pause runtime version upgrades on the cluster (UTC). */
    upgradePauseEndTimestampUtc?: Date;
    /** Boolean to pause automatic runtime version upgrades to the cluster. */
    waveUpgradePaused?: boolean;
    /** Indicates a list of notification channels for cluster events. */
    notifications?: Notification_2[];
}

/**
 * Defines values for ClusterUpgradeCadence. \
 * {@link KnownClusterUpgradeCadence} can be used interchangeably with ClusterUpgradeCadence,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Wave0**: Cluster upgrade starts immediately after a new version is rolled out. Recommended for Test\/Dev clusters. \
 * **Wave1**: Cluster upgrade starts 7 days after a new version is rolled out. Recommended for Pre-prod clusters. \
 * **Wave2**: Cluster upgrade starts 14 days after a new version is rolled out. Recommended for Production clusters.
 */
export declare type ClusterUpgradeCadence = string;

/** Describes the delta health policies for the cluster upgrade. */
export declare interface ClusterUpgradeDeltaHealthPolicy {
    /**
     * The maximum allowed percentage of nodes health degradation allowed during cluster upgrades.
     * The delta is measured between the state of the nodes at the beginning of upgrade and the state of the nodes at the time of the health evaluation.
     * The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits.
     *
     */
    maxPercentDeltaUnhealthyNodes: number;
    /**
     * The maximum allowed percentage of upgrade domain nodes health degradation allowed during cluster upgrades.
     * The delta is measured between the state of the upgrade domain nodes at the beginning of upgrade and the state of the upgrade domain nodes at the time of the health evaluation.
     * The check is performed after every upgrade domain upgrade completion for all completed upgrade domains to make sure the state of the upgrade domains is within tolerated limits.
     *
     */
    maxPercentUpgradeDomainDeltaUnhealthyNodes: number;
    /**
     * The maximum allowed percentage of applications health degradation allowed during cluster upgrades.
     * The delta is measured between the state of the applications at the beginning of upgrade and the state of the applications at the time of the health evaluation.
     * The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits. System services are not included in this.
     *
     */
    maxPercentDeltaUnhealthyApplications: number;
    /** Defines the application delta health policy map used to evaluate the health of an application or one of its child entities when upgrading the cluster. */
    applicationDeltaHealthPolicies?: {
        [propertyName: string]: ApplicationDeltaHealthPolicy;
    };
}

/** Describes the policy used when upgrading the cluster. */
export declare interface ClusterUpgradePolicy {
    /** If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data). */
    forceRestart?: boolean;
    /** The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format. */
    upgradeReplicaSetCheckTimeout: string;
    /** The length of time to wait after completing an upgrade domain before performing health checks. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format. */
    healthCheckWaitDuration: string;
    /** The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format. */
    healthCheckStableDuration: string;
    /** The amount of time to retry health evaluation when the application or cluster is unhealthy before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format. */
    healthCheckRetryTimeout: string;
    /** The amount of time the overall upgrade has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format. */
    upgradeTimeout: string;
    /** The amount of time each upgrade domain has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format. */
    upgradeDomainTimeout: string;
    /** The cluster health policy used when upgrading the cluster. */
    healthPolicy: ClusterHealthPolicy;
    /** The cluster delta health policy used when upgrading the cluster. */
    deltaHealthPolicy?: ClusterUpgradeDeltaHealthPolicy;
}

/** The detail of the Service Fabric runtime version result */
export declare interface ClusterVersionDetails {
    /** The Service Fabric runtime version of the cluster. */
    codeVersion?: string;
    /** The date of expiry of support of the version. */
    supportExpiryUtc?: string;
    /** Indicates if this version is for Windows or Linux operating system. */
    environment?: ClusterEnvironment;
}

/** Interface representing a ClusterVersions. */
export declare interface ClusterVersions {
    /**
     * Gets information about an available Service Fabric cluster code version.
     * @param location The location for the cluster code versions. This is different from cluster location.
     * @param clusterVersion The cluster code version.
     * @param options The options parameters.
     */
    get(location: string, clusterVersion: string, options?: ClusterVersionsGetOptionalParams): Promise<ClusterVersionsGetResponse>;
    /**
     * Gets information about an available Service Fabric cluster code version by environment.
     * @param location The location for the cluster code versions. This is different from cluster location.
     * @param environment The operating system of the cluster. The default means all.
     * @param clusterVersion The cluster code version.
     * @param options The options parameters.
     */
    getByEnvironment(location: string, environment: ClusterVersionsEnvironment, clusterVersion: string, options?: ClusterVersionsGetByEnvironmentOptionalParams): Promise<ClusterVersionsGetByEnvironmentResponse>;
    /**
     * Gets all available code versions for Service Fabric cluster resources by location.
     * @param location The location for the cluster code versions. This is different from cluster location.
     * @param options The options parameters.
     */
    list(location: string, options?: ClusterVersionsListOptionalParams): Promise<ClusterVersionsListResponse>;
    /**
     * Gets all available code versions for Service Fabric cluster resources by environment.
     * @param location The location for the cluster code versions. This is different from cluster location.
     * @param environment The operating system of the cluster. The default means all.
     * @param options The options parameters.
     */
    listByEnvironment(location: string, environment: ClusterVersionsEnvironment, options?: ClusterVersionsListByEnvironmentOptionalParams): Promise<ClusterVersionsListByEnvironmentResponse>;
}

/**
 * Defines values for ClusterVersionsEnvironment. \
 * {@link KnownClusterVersionsEnvironment} can be used interchangeably with ClusterVersionsEnvironment,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Windows** \
 * **Linux**
 */
export declare type ClusterVersionsEnvironment = string;

/** Optional parameters. */
export declare interface ClusterVersionsGetByEnvironmentOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getByEnvironment operation. */
export declare type ClusterVersionsGetByEnvironmentResponse = ClusterCodeVersionsListResult;

/** Optional parameters. */
export declare interface ClusterVersionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ClusterVersionsGetResponse = ClusterCodeVersionsListResult;

/** Optional parameters. */
export declare interface ClusterVersionsListByEnvironmentOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByEnvironment operation. */
export declare type ClusterVersionsListByEnvironmentResponse = ClusterCodeVersionsListResult;

/** Optional parameters. */
export declare interface ClusterVersionsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type ClusterVersionsListResponse = ClusterCodeVersionsListResult;

/** The storage account information for storing Service Fabric diagnostic logs. */
export declare interface DiagnosticsStorageAccountConfig {
    /** The Azure storage account name. */
    storageAccountName: string;
    /** The protected diagnostics storage key name. */
    protectedAccountKeyName: string;
    /** The secondary protected diagnostics storage key name. If one of the storage account keys is rotated the cluster will fallback to using the other. */
    protectedAccountKeyName2?: string;
    /** The blob endpoint of the azure storage account. */
    blobEndpoint: string;
    /** The queue endpoint of the azure storage account. */
    queueEndpoint: string;
    /** The table endpoint of the azure storage account. */
    tableEndpoint: string;
}

/**
 * Defines values for DurabilityLevel. \
 * {@link KnownDurabilityLevel} can be used interchangeably with DurabilityLevel,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Bronze** \
 * **Silver** \
 * **Gold**
 */
export declare type DurabilityLevel = string;

/** Port range details */
export declare interface EndpointRangeDescription {
    /** Starting port of a range of ports */
    startPort: number;
    /** End port of a range of ports */
    endPort: number;
}

/** The structure of the error. */
export declare interface ErrorModel {
    /** The error details. */
    error?: ErrorModelError;
}

/** The error details. */
export declare interface ErrorModelError {
    /** The error code. */
    code?: string;
    /** The error message. */
    message?: string;
}

/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/** Known values of {@link AddOnFeatures} that the service accepts. */
export declare enum KnownAddOnFeatures {
    /** RepairManager */
    RepairManager = "RepairManager",
    /** DnsService */
    DnsService = "DnsService",
    /** BackupRestoreService */
    BackupRestoreService = "BackupRestoreService",
    /** ResourceMonitorService */
    ResourceMonitorService = "ResourceMonitorService"
}

/** Known values of {@link ArmServicePackageActivationMode} that the service accepts. */
export declare enum KnownArmServicePackageActivationMode {
    /** Indicates the application package activation mode will use shared process. */
    SharedProcess = "SharedProcess",
    /** Indicates the application package activation mode will use exclusive process. */
    ExclusiveProcess = "ExclusiveProcess"
}

/** Known values of {@link ArmUpgradeFailureAction} that the service accepts. */
export declare enum KnownArmUpgradeFailureAction {
    /** Indicates that a rollback of the upgrade will be performed by Service Fabric if the upgrade fails. */
    Rollback = "Rollback",
    /** Indicates that a manual repair will need to be performed by the administrator if the upgrade fails. Service Fabric will not proceed to the next upgrade domain automatically. */
    Manual = "Manual"
}

/** Known values of {@link ClusterEnvironment} that the service accepts. */
export declare enum KnownClusterEnvironment {
    /** Windows */
    Windows = "Windows",
    /** Linux */
    Linux = "Linux"
}

/** Known values of {@link ClusterState} that the service accepts. */
export declare enum KnownClusterState {
    /** WaitingForNodes */
    WaitingForNodes = "WaitingForNodes",
    /** Deploying */
    Deploying = "Deploying",
    /** BaselineUpgrade */
    BaselineUpgrade = "BaselineUpgrade",
    /** UpdatingUserConfiguration */
    UpdatingUserConfiguration = "UpdatingUserConfiguration",
    /** UpdatingUserCertificate */
    UpdatingUserCertificate = "UpdatingUserCertificate",
    /** UpdatingInfrastructure */
    UpdatingInfrastructure = "UpdatingInfrastructure",
    /** EnforcingClusterVersion */
    EnforcingClusterVersion = "EnforcingClusterVersion",
    /** UpgradeServiceUnreachable */
    UpgradeServiceUnreachable = "UpgradeServiceUnreachable",
    /** AutoScale */
    AutoScale = "AutoScale",
    /** Ready */
    Ready = "Ready"
}

/** Known values of {@link ClusterUpgradeCadence} that the service accepts. */
export declare enum KnownClusterUpgradeCadence {
    /** Cluster upgrade starts immediately after a new version is rolled out. Recommended for Test\/Dev clusters. */
    Wave0 = "Wave0",
    /** Cluster upgrade starts 7 days after a new version is rolled out. Recommended for Pre-prod clusters. */
    Wave1 = "Wave1",
    /** Cluster upgrade starts 14 days after a new version is rolled out. Recommended for Production clusters. */
    Wave2 = "Wave2"
}

/** Known values of {@link ClusterVersionsEnvironment} that the service accepts. */
export declare enum KnownClusterVersionsEnvironment {
    /** Windows */
    Windows = "Windows",
    /** Linux */
    Linux = "Linux"
}

/** Known values of {@link DurabilityLevel} that the service accepts. */
export declare enum KnownDurabilityLevel {
    /** Bronze */
    Bronze = "Bronze",
    /** Silver */
    Silver = "Silver",
    /** Gold */
    Gold = "Gold"
}

/** Known values of {@link MoveCost} that the service accepts. */
export declare enum KnownMoveCost {
    /** Zero move cost. This value is zero. */
    Zero = "Zero",
    /** Specifies the move cost of the service as Low. The value is 1. */
    Low = "Low",
    /** Specifies the move cost of the service as Medium. The value is 2. */
    Medium = "Medium",
    /** Specifies the move cost of the service as High. The value is 3. */
    High = "High"
}

/** Known values of {@link NotificationCategory} that the service accepts. */
export declare enum KnownNotificationCategory {
    /** Notification will be regarding wave progress. */
    WaveProgress = "WaveProgress"
}

/** Known values of {@link NotificationChannel} that the service accepts. */
export declare enum KnownNotificationChannel {
    /** For email user receivers. In this case, the parameter receivers should be a list of email addresses that will receive the notifications. */
    EmailUser = "EmailUser",
    /** For subscription receivers. In this case, the parameter receivers should be a list of roles of the subscription for the cluster (eg. Owner, AccountAdmin, etc) that will receive the notifications. */
    EmailSubscription = "EmailSubscription"
}

/** Known values of {@link NotificationLevel} that the service accepts. */
export declare enum KnownNotificationLevel {
    /** Receive only critical notifications. */
    Critical = "Critical",
    /** Receive all notifications. */
    All = "All"
}

/** Known values of {@link PartitionScheme} that the service accepts. */
export declare enum KnownPartitionScheme {
    /** Indicates the partition kind is invalid. All Service Fabric enumerations have the invalid type. The value is zero. */
    Invalid = "Invalid",
    /** Indicates that the partition is based on string names, and is a SingletonPartitionSchemeDescription object, The value is 1. */
    Singleton = "Singleton",
    /** Indicates that the partition is based on Int64 key ranges, and is a UniformInt64RangePartitionSchemeDescription object. The value is 2. */
    UniformInt64Range = "UniformInt64Range",
    /** Indicates that the partition is based on string names, and is a NamedPartitionSchemeDescription object. The value is 3 */
    Named = "Named"
}

/** Known values of {@link ProvisioningState} that the service accepts. */
export declare enum KnownProvisioningState {
    /** Updating */
    Updating = "Updating",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Canceled */
    Canceled = "Canceled"
}

/** Known values of {@link ReliabilityLevel} that the service accepts. */
export declare enum KnownReliabilityLevel {
    /** None */
    None = "None",
    /** Bronze */
    Bronze = "Bronze",
    /** Silver */
    Silver = "Silver",
    /** Gold */
    Gold = "Gold",
    /** Platinum */
    Platinum = "Platinum"
}

/** Known values of {@link RollingUpgradeMode} that the service accepts. */
export declare enum KnownRollingUpgradeMode {
    /** Indicates the upgrade mode is invalid. All Service Fabric enumerations have the invalid type. The value is zero. */
    Invalid = "Invalid",
    /** The upgrade will proceed automatically without performing any health monitoring. The value is 1 */
    UnmonitoredAuto = "UnmonitoredAuto",
    /** The upgrade will stop after completing each upgrade domain, giving the opportunity to manually monitor health before proceeding. The value is 2 */
    UnmonitoredManual = "UnmonitoredManual",
    /** The upgrade will stop after completing each upgrade domain and automatically monitor health before proceeding. The value is 3 */
    Monitored = "Monitored"
}

/** Known values of {@link ServiceCorrelationScheme} that the service accepts. */
export declare enum KnownServiceCorrelationScheme {
    /** An invalid correlation scheme. Cannot be used. The value is zero. */
    Invalid = "Invalid",
    /** Indicates that this service has an affinity relationship with another service. Provided for backwards compatibility, consider preferring the Aligned or NonAlignedAffinity options. The value is 1. */
    Affinity = "Affinity",
    /** Aligned affinity ensures that the primaries of the partitions of the affinitized services are collocated on the same nodes. This is the default and is the same as selecting the Affinity scheme. The value is 2. */
    AlignedAffinity = "AlignedAffinity",
    /** Non-Aligned affinity guarantees that all replicas of each service will be placed on the same nodes. Unlike Aligned Affinity, this does not guarantee that replicas of particular role will be collocated. The value is 3. */
    NonAlignedAffinity = "NonAlignedAffinity"
}

/** Known values of {@link ServiceKind} that the service accepts. */
export declare enum KnownServiceKind {
    /** Indicates the service kind is invalid. All Service Fabric enumerations have the invalid type. The value is zero. */
    Invalid = "Invalid",
    /** Does not use Service Fabric to make its state highly available or reliable. The value is 1. */
    Stateless = "Stateless",
    /** Uses Service Fabric to make its state or part of its state highly available and reliable. The value is 2. */
    Stateful = "Stateful"
}

/** Known values of {@link ServiceLoadMetricWeight} that the service accepts. */
export declare enum KnownServiceLoadMetricWeight {
    /** Disables resource balancing for this metric. This value is zero. */
    Zero = "Zero",
    /** Specifies the metric weight of the service load as Low. The value is 1. */
    Low = "Low",
    /** Specifies the metric weight of the service load as Medium. The value is 2. */
    Medium = "Medium",
    /** Specifies the metric weight of the service load as High. The value is 3. */
    High = "High"
}

/** Known values of {@link ServicePlacementPolicyType} that the service accepts. */
export declare enum KnownServicePlacementPolicyType {
    /** Indicates the type of the placement policy is invalid. All Service Fabric enumerations have the invalid type. The value is zero. */
    Invalid = "Invalid",
    /** Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementInvalidDomainPolicyDescription, which indicates that a particular fault or upgrade domain cannot be used for placement of this service. The value is 1. */
    InvalidDomain = "InvalidDomain",
    /** Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementRequireDomainDistributionPolicyDescription indicating that the replicas of the service must be placed in a specific domain. The value is 2. */
    RequiredDomain = "RequiredDomain",
    /** Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementPreferPrimaryDomainPolicyDescription, which indicates that if possible the Primary replica for the partitions of the service should be located in a particular domain as an optimization. The value is 3. */
    PreferredPrimaryDomain = "PreferredPrimaryDomain",
    /** Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementRequireDomainDistributionPolicyDescription, indicating that the system will disallow placement of any two replicas from the same partition in the same domain at any time. The value is 4. */
    RequiredDomainDistribution = "RequiredDomainDistribution",
    /** Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementNonPartiallyPlaceServicePolicyDescription, which indicates that if possible all replicas of a particular partition of the service should be placed atomically. The value is 5. */
    NonPartiallyPlaceService = "NonPartiallyPlaceService"
}

/** Known values of {@link SfZonalUpgradeMode} that the service accepts. */
export declare enum KnownSfZonalUpgradeMode {
    /** VMs under the node type are grouped into UDs and ignore the zone info in five UDs. This setting causes UDs across all zones to be upgraded at the same time. This deployment mode is faster for upgrades, we don't recommend it because it goes against the SDP guidelines, which state that the updates should be applied to one zone at a time. */
    Parallel = "Parallel",
    /** If this value is omitted or set to Hierarchical, VMs are grouped to reflect the zonal distribution in up to 15 UDs. Each of the three zones has five UDs. This ensures that the zones are updated one at a time, moving to next zone only after completing five UDs within the first zone. This update process is safer for the cluster and the user application. */
    Hierarchical = "Hierarchical"
}

/** Known values of {@link StoreName} that the service accepts. */
export declare enum KnownStoreName {
    /** AddressBook */
    AddressBook = "AddressBook",
    /** AuthRoot */
    AuthRoot = "AuthRoot",
    /** CertificateAuthority */
    CertificateAuthority = "CertificateAuthority",
    /** Disallowed */
    Disallowed = "Disallowed",
    /** My */
    My = "My",
    /** Root */
    Root = "Root",
    /** TrustedPeople */
    TrustedPeople = "TrustedPeople",
    /** TrustedPublisher */
    TrustedPublisher = "TrustedPublisher"
}

/** Known values of {@link UpgradeMode} that the service accepts. */
export declare enum KnownUpgradeMode {
    /** The cluster will be automatically upgraded to the latest Service Fabric runtime version, **upgradeWave** will determine when the upgrade starts after the new version becomes available. */
    Automatic = "Automatic",
    /** The cluster will not be automatically upgraded to the latest Service Fabric runtime version. The cluster is upgraded by setting the **clusterCodeVersion** property in the cluster resource. */
    Manual = "Manual"
}

/** Known values of {@link VmssZonalUpgradeMode} that the service accepts. */
export declare enum KnownVmssZonalUpgradeMode {
    /** Updates will happen in all Availability Zones at once for the virtual machine scale sets. */
    Parallel = "Parallel",
    /** VMs are grouped to reflect the zonal distribution in up to 15 UDs. Each of the three zones has five UDs. This ensures that the zones are updated one at a time, moving to next zone only after completing five UDs within the first zone. */
    Hierarchical = "Hierarchical"
}

/** Describes the managed identities for an Azure resource. */
export declare interface ManagedIdentity {
    /**
     * The principal id of the managed identity. This property will only be provided for a system assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
    /**
     * The tenant id of the managed identity. This property will only be provided for a system assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
    /** The type of managed identity for the resource. */
    type?: ManagedIdentityType;
    /**
     * The list of user identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form:
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
     *
     */
    userAssignedIdentities?: {
        [propertyName: string]: UserAssignedIdentity;
    };
}

/** Defines values for ManagedIdentityType. */
export declare type ManagedIdentityType = "SystemAssigned" | "UserAssigned" | "SystemAssigned, UserAssigned" | "None";

/**
 * Defines values for MoveCost. \
 * {@link KnownMoveCost} can be used interchangeably with MoveCost,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Zero**: Zero move cost. This value is zero. \
 * **Low**: Specifies the move cost of the service as Low. The value is 1. \
 * **Medium**: Specifies the move cost of the service as Medium. The value is 2. \
 * **High**: Specifies the move cost of the service as High. The value is 3.
 */
export declare type MoveCost = string;

/** Describes the named partition scheme of the service. */
export declare interface NamedPartitionSchemeDescription extends PartitionSchemeDescription {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    partitionScheme: "Named";
    /** The number of partitions. */
    count: number;
    /** Array of size specified by the ‘count’ parameter, for the names of the partitions. */
    names: string[];
}

/** Describes a node type in the cluster, each node type represents sub set of nodes in the cluster. */
export declare interface NodeTypeDescription {
    /** The name of the node type. */
    name: string;
    /** The placement tags applied to nodes in the node type, which can be used to indicate where certain services (workload) should run. */
    placementProperties?: {
        [propertyName: string]: string;
    };
    /** The capacity tags applied to the nodes in the node type, the cluster resource manager uses these tags to understand how much resource a node has. */
    capacities?: {
        [propertyName: string]: string;
    };
    /** The TCP cluster management endpoint port. */
    clientConnectionEndpointPort: number;
    /** The HTTP cluster management endpoint port. */
    httpGatewayEndpointPort: number;
    /**
     * The durability level of the node type. Learn about [DurabilityLevel](https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-capacity).
     *
     *   - Bronze - No privileges. This is the default.
     *   - Silver - The infrastructure jobs can be paused for a duration of 10 minutes per UD.
     *   - Gold - The infrastructure jobs can be paused for a duration of 2 hours per UD. Gold durability can be enabled only on full node VM skus like D15_V2, G5 etc.
     *
     */
    durabilityLevel?: DurabilityLevel;
    /** The range of ports from which cluster assigned port to Service Fabric applications. */
    applicationPorts?: EndpointRangeDescription;
    /** The range of ephemeral ports that nodes in this node type should be configured with. */
    ephemeralPorts?: EndpointRangeDescription;
    /** The node type on which system services will run. Only one node type should be marked as primary. Primary node type cannot be deleted or changed for existing clusters. */
    isPrimary: boolean;
    /** VMInstanceCount should be 1 to n, where n indicates the number of VM instances corresponding to this nodeType. VMInstanceCount = 0 can be done only in these scenarios: NodeType is a secondary nodeType. Durability = Bronze or Durability >= Bronze and InfrastructureServiceManager = true. If VMInstanceCount = 0, implies the VMs for this nodeType will not be used for the initial cluster size computation. */
    vmInstanceCount: number;
    /** The endpoint used by reverse proxy. */
    reverseProxyEndpointPort?: number;
    /** Indicates if the node type can only host Stateless workloads. */
    isStateless?: boolean;
    /** Indicates if the node type is enabled to support multiple zones. */
    multipleAvailabilityZones?: boolean;
}

/** Describes the notification channel for cluster events. */
declare interface Notification_2 {
    /** Indicates if the notification is enabled. */
    isEnabled: boolean;
    /** The category of notification. */
    notificationCategory: NotificationCategory;
    /** The level of notification. */
    notificationLevel: NotificationLevel;
    /** List of targets that subscribe to the notification. */
    notificationTargets: NotificationTarget[];
}
export { Notification_2 as Notification }

/**
 * Defines values for NotificationCategory. \
 * {@link KnownNotificationCategory} can be used interchangeably with NotificationCategory,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **WaveProgress**: Notification will be regarding wave progress.
 */
export declare type NotificationCategory = string;

/**
 * Defines values for NotificationChannel. \
 * {@link KnownNotificationChannel} can be used interchangeably with NotificationChannel,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **EmailUser**: For email user receivers. In this case, the parameter receivers should be a list of email addresses that will receive the notifications. \
 * **EmailSubscription**: For subscription receivers. In this case, the parameter receivers should be a list of roles of the subscription for the cluster (eg. Owner, AccountAdmin, etc) that will receive the notifications.
 */
export declare type NotificationChannel = string;

/**
 * Defines values for NotificationLevel. \
 * {@link KnownNotificationLevel} can be used interchangeably with NotificationLevel,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Critical**: Receive only critical notifications. \
 * **All**: Receive all notifications.
 */
export declare type NotificationLevel = string;

/** Describes the notification target properties. */
export declare interface NotificationTarget {
    /** The notification channel indicates the type of receivers subscribed to the notification, either user or subscription. */
    notificationChannel: NotificationChannel;
    /** List of targets that subscribe to the notification. */
    receivers: string[];
}

/** Describes the result of the request to list Service Fabric resource provider operations. */
export declare interface OperationListResult {
    /** List of operations supported by the Service Fabric resource provider. */
    value?: OperationResult[];
    /**
     * URL to get the next set of operation list results if there are any.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Available operation list result */
export declare interface OperationResult {
    /** The name of the operation. */
    name?: string;
    /** Indicates whether the operation is a data action */
    isDataAction?: boolean;
    /** The object that represents the operation. */
    display?: AvailableOperationDisplay;
    /** Origin result */
    origin?: string;
    /** The URL to use for getting the next set of results. */
    nextLink?: string;
}

/** Interface representing a Operations. */
export declare interface Operations {
    /**
     * Get the list of available Service Fabric resource provider API operations.
     * @param options The options parameters.
     */
    list(options?: OperationsListOptionalParams): PagedAsyncIterableIterator<OperationResult>;
}

/** Optional parameters. */
export declare interface OperationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export declare interface OperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OperationsListResponse = OperationListResult;

/**
 * Defines values for PartitionScheme. \
 * {@link KnownPartitionScheme} can be used interchangeably with PartitionScheme,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Invalid**: Indicates the partition kind is invalid. All Service Fabric enumerations have the invalid type. The value is zero. \
 * **Singleton**: Indicates that the partition is based on string names, and is a SingletonPartitionSchemeDescription object, The value is 1. \
 * **UniformInt64Range**: Indicates that the partition is based on Int64 key ranges, and is a UniformInt64RangePartitionSchemeDescription object. The value is 2. \
 * **Named**: Indicates that the partition is based on string names, and is a NamedPartitionSchemeDescription object. The value is 3
 */
export declare type PartitionScheme = string;

/** Describes how the service is partitioned. */
export declare interface PartitionSchemeDescription {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    partitionScheme: "Named" | "Singleton" | "UniformInt64Range";
}

export declare type PartitionSchemeDescriptionUnion = PartitionSchemeDescription | NamedPartitionSchemeDescription | SingletonPartitionSchemeDescription | UniformInt64RangePartitionSchemeDescription;

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Updating** \
 * **Succeeded** \
 * **Failed** \
 * **Canceled**
 */
export declare type ProvisioningState = string;

/** The resource model definition for proxy-only resource. */
export declare interface ProxyResource {
    /**
     * Azure resource identifier.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Azure resource name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Azure resource type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** It will be deprecated in New API, resource location depends on the parent resource. */
    location?: string;
    /** Azure resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /**
     * Azure resource etag.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly etag?: string;
    /**
     * Metadata pertaining to creation and last modification of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
}

/**
 * Defines values for ReliabilityLevel. \
 * {@link KnownReliabilityLevel} can be used interchangeably with ReliabilityLevel,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Bronze** \
 * **Silver** \
 * **Gold** \
 * **Platinum**
 */
export declare type ReliabilityLevel = string;

/** The resource model definition. */
export declare interface Resource {
    /**
     * Azure resource identifier.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Azure resource name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Azure resource type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** Azure resource location. */
    location: string;
    /** Azure resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /**
     * Azure resource etag.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly etag?: string;
    /**
     * Metadata pertaining to creation and last modification of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
}

/**
 * Defines values for RollingUpgradeMode. \
 * {@link KnownRollingUpgradeMode} can be used interchangeably with RollingUpgradeMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Invalid**: Indicates the upgrade mode is invalid. All Service Fabric enumerations have the invalid type. The value is zero. \
 * **UnmonitoredAuto**: The upgrade will proceed automatically without performing any health monitoring. The value is 1 \
 * **UnmonitoredManual**: The upgrade will stop after completing each upgrade domain, giving the opportunity to manually monitor health before proceeding. The value is 2 \
 * **Monitored**: The upgrade will stop after completing each upgrade domain and automatically monitor health before proceeding. The value is 3
 */
export declare type RollingUpgradeMode = string;

/** Describes the server certificate details using common name. */
export declare interface ServerCertificateCommonName {
    /** The common name of the server certificate. */
    certificateCommonName: string;
    /** The issuer thumbprint of the server certificate. */
    certificateIssuerThumbprint: string;
}

/** Describes a list of server certificates referenced by common name that are used to secure the cluster. */
export declare interface ServerCertificateCommonNames {
    /** The list of server certificates referenced by common name that are used to secure the cluster. */
    commonNames?: ServerCertificateCommonName[];
    /** The local certificate store location. */
    x509StoreName?: StoreName;
}

/** Creates a particular correlation between services. */
export declare interface ServiceCorrelationDescription {
    /** The ServiceCorrelationScheme which describes the relationship between this service and the service specified via ServiceName. */
    scheme: ServiceCorrelationScheme;
    /** The name of the service that the correlation relationship is established with. */
    serviceName: string;
}

/**
 * Defines values for ServiceCorrelationScheme. \
 * {@link KnownServiceCorrelationScheme} can be used interchangeably with ServiceCorrelationScheme,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Invalid**: An invalid correlation scheme. Cannot be used. The value is zero. \
 * **Affinity**: Indicates that this service has an affinity relationship with another service. Provided for backwards compatibility, consider preferring the Aligned or NonAlignedAffinity options. The value is 1. \
 * **AlignedAffinity**: Aligned affinity ensures that the primaries of the partitions of the affinitized services are collocated on the same nodes. This is the default and is the same as selecting the Affinity scheme. The value is 2. \
 * **NonAlignedAffinity**: Non-Aligned affinity guarantees that all replicas of each service will be placed on the same nodes. Unlike Aligned Affinity, this does not guarantee that replicas of particular role will be collocated. The value is 3.
 */
export declare type ServiceCorrelationScheme = string;

export declare class ServiceFabricManagementClient extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the ServiceFabricManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The customer subscription identifier.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: ServiceFabricManagementClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    clusters: Clusters;
    clusterVersions: ClusterVersions;
    operations: Operations;
    applicationTypes: ApplicationTypes;
    applicationTypeVersions: ApplicationTypeVersions;
    applications: Applications;
    services: Services;
}

/** Optional parameters. */
export declare interface ServiceFabricManagementClientOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/**
 * Defines values for ServiceKind. \
 * {@link KnownServiceKind} can be used interchangeably with ServiceKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Invalid**: Indicates the service kind is invalid. All Service Fabric enumerations have the invalid type. The value is zero. \
 * **Stateless**: Does not use Service Fabric to make its state highly available or reliable. The value is 1. \
 * **Stateful**: Uses Service Fabric to make its state or part of its state highly available and reliable. The value is 2.
 */
export declare type ServiceKind = string;

/** Specifies a metric to load balance a service during runtime. */
export declare interface ServiceLoadMetricDescription {
    /** The name of the metric. If the service chooses to report load during runtime, the load metric name should match the name that is specified in Name exactly. Note that metric names are case sensitive. */
    name: string;
    /** The service load metric relative weight, compared to other metrics configured for this service, as a number. */
    weight?: ServiceLoadMetricWeight;
    /** Used only for Stateful services. The default amount of load, as a number, that this service creates for this metric when it is a Primary replica. */
    primaryDefaultLoad?: number;
    /** Used only for Stateful services. The default amount of load, as a number, that this service creates for this metric when it is a Secondary replica. */
    secondaryDefaultLoad?: number;
    /** Used only for Stateless services. The default amount of load, as a number, that this service creates for this metric. */
    defaultLoad?: number;
}

/**
 * Defines values for ServiceLoadMetricWeight. \
 * {@link KnownServiceLoadMetricWeight} can be used interchangeably with ServiceLoadMetricWeight,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Zero**: Disables resource balancing for this metric. This value is zero. \
 * **Low**: Specifies the metric weight of the service load as Low. The value is 1. \
 * **Medium**: Specifies the metric weight of the service load as Medium. The value is 2. \
 * **High**: Specifies the metric weight of the service load as High. The value is 3.
 */
export declare type ServiceLoadMetricWeight = string;

/** Describes the policy to be used for placement of a Service Fabric service. */
export declare interface ServicePlacementPolicyDescription {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "ServicePlacementPolicyDescription";
}

/**
 * Defines values for ServicePlacementPolicyType. \
 * {@link KnownServicePlacementPolicyType} can be used interchangeably with ServicePlacementPolicyType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Invalid**: Indicates the type of the placement policy is invalid. All Service Fabric enumerations have the invalid type. The value is zero. \
 * **InvalidDomain**: Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementInvalidDomainPolicyDescription, which indicates that a particular fault or upgrade domain cannot be used for placement of this service. The value is 1. \
 * **RequiredDomain**: Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementRequireDomainDistributionPolicyDescription indicating that the replicas of the service must be placed in a specific domain. The value is 2. \
 * **PreferredPrimaryDomain**: Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementPreferPrimaryDomainPolicyDescription, which indicates that if possible the Primary replica for the partitions of the service should be located in a particular domain as an optimization. The value is 3. \
 * **RequiredDomainDistribution**: Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementRequireDomainDistributionPolicyDescription, indicating that the system will disallow placement of any two replicas from the same partition in the same domain at any time. The value is 4. \
 * **NonPartiallyPlaceService**: Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementNonPartiallyPlaceServicePolicyDescription, which indicates that if possible all replicas of a particular partition of the service should be placed atomically. The value is 5.
 */
export declare type ServicePlacementPolicyType = string;

/** The service resource. */
export declare interface ServiceResource extends ProxyResource {
    /** The placement constraints as a string. Placement constraints are boolean expressions on node properties and allow for restricting a service to particular nodes based on the service requirements. For example, to place a service on nodes where NodeType is blue specify the following: "NodeColor == blue)". */
    placementConstraints?: string;
    /** A list that describes the correlation of the service with other services. */
    correlationScheme?: ServiceCorrelationDescription[];
    /** The service load metrics is given as an array of ServiceLoadMetricDescription objects. */
    serviceLoadMetrics?: ServiceLoadMetricDescription[];
    /** A list that describes the correlation of the service with other services. */
    servicePlacementPolicies?: ServicePlacementPolicyDescription[];
    /** Specifies the move cost for the service. */
    defaultMoveCost?: MoveCost;
    /**
     * The current deployment or provisioning state, which only appears in the response
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /** The kind of service (Stateless or Stateful). */
    serviceKind?: ServiceKind;
    /** The name of the service type */
    serviceTypeName?: string;
    /** Describes how the service is partitioned. */
    partitionDescription?: PartitionSchemeDescriptionUnion;
    /** The activation Mode of the service package */
    servicePackageActivationMode?: ArmServicePackageActivationMode;
    /** Dns name used for the service. If this is specified, then the service can be accessed via its DNS name instead of service name. */
    serviceDnsName?: string;
}

/** The list of service resources. */
export declare interface ServiceResourceList {
    value?: ServiceResource[];
    /**
     * URL to get the next set of service list results if there are any.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** The service resource properties. */
export declare interface ServiceResourceProperties extends ServiceResourcePropertiesBase {
    /**
     * The current deployment or provisioning state, which only appears in the response
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /** The kind of service (Stateless or Stateful). */
    serviceKind: ServiceKind;
    /** The name of the service type */
    serviceTypeName?: string;
    /** Describes how the service is partitioned. */
    partitionDescription?: PartitionSchemeDescriptionUnion;
    /** The activation Mode of the service package */
    servicePackageActivationMode?: ArmServicePackageActivationMode;
    /** Dns name used for the service. If this is specified, then the service can be accessed via its DNS name instead of service name. */
    serviceDnsName?: string;
}

/** The common service resource properties. */
export declare interface ServiceResourcePropertiesBase {
    /** The placement constraints as a string. Placement constraints are boolean expressions on node properties and allow for restricting a service to particular nodes based on the service requirements. For example, to place a service on nodes where NodeType is blue specify the following: "NodeColor == blue)". */
    placementConstraints?: string;
    /** A list that describes the correlation of the service with other services. */
    correlationScheme?: ServiceCorrelationDescription[];
    /** The service load metrics is given as an array of ServiceLoadMetricDescription objects. */
    serviceLoadMetrics?: ServiceLoadMetricDescription[];
    /** A list that describes the correlation of the service with other services. */
    servicePlacementPolicies?: ServicePlacementPolicyDescription[];
    /** Specifies the move cost for the service. */
    defaultMoveCost?: MoveCost;
}

export declare type ServiceResourcePropertiesUnion = ServiceResourceProperties | StatefulServiceProperties | StatelessServiceProperties;

/** The service resource for patch operations. */
export declare interface ServiceResourceUpdate extends ProxyResource {
    /** The placement constraints as a string. Placement constraints are boolean expressions on node properties and allow for restricting a service to particular nodes based on the service requirements. For example, to place a service on nodes where NodeType is blue specify the following: "NodeColor == blue)". */
    placementConstraints?: string;
    /** A list that describes the correlation of the service with other services. */
    correlationScheme?: ServiceCorrelationDescription[];
    /** The service load metrics is given as an array of ServiceLoadMetricDescription objects. */
    serviceLoadMetrics?: ServiceLoadMetricDescription[];
    /** A list that describes the correlation of the service with other services. */
    servicePlacementPolicies?: ServicePlacementPolicyDescription[];
    /** Specifies the move cost for the service. */
    defaultMoveCost?: MoveCost;
    /** The kind of service (Stateless or Stateful). */
    serviceKind?: ServiceKind;
}

/** The service resource properties for patch operations. */
export declare interface ServiceResourceUpdateProperties extends ServiceResourcePropertiesBase {
    /** The kind of service (Stateless or Stateful). */
    serviceKind: ServiceKind;
}

export declare type ServiceResourceUpdatePropertiesUnion = ServiceResourceUpdateProperties | StatefulServiceUpdateProperties | StatelessServiceUpdateProperties;

/** Interface representing a Services. */
export declare interface Services {
    /**
     * Gets all service resources created or in the process of being created in the Service Fabric
     * application resource.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, clusterName: string, applicationName: string, options?: ServicesListOptionalParams): PagedAsyncIterableIterator<ServiceResource>;
    /**
     * Get a Service Fabric service resource created or in the process of being created in the Service
     * Fabric application resource.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param serviceName The name of the service resource in the format of
     *                    {applicationName}~{serviceName}.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, clusterName: string, applicationName: string, serviceName: string, options?: ServicesGetOptionalParams): Promise<ServicesGetResponse>;
    /**
     * Create or update a Service Fabric service resource with the specified name.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param serviceName The name of the service resource in the format of
     *                    {applicationName}~{serviceName}.
     * @param parameters The service resource.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, clusterName: string, applicationName: string, serviceName: string, parameters: ServiceResource, options?: ServicesCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<ServicesCreateOrUpdateResponse>, ServicesCreateOrUpdateResponse>>;
    /**
     * Create or update a Service Fabric service resource with the specified name.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param serviceName The name of the service resource in the format of
     *                    {applicationName}~{serviceName}.
     * @param parameters The service resource.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, clusterName: string, applicationName: string, serviceName: string, parameters: ServiceResource, options?: ServicesCreateOrUpdateOptionalParams): Promise<ServicesCreateOrUpdateResponse>;
    /**
     * Update a Service Fabric service resource with the specified name.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param serviceName The name of the service resource in the format of
     *                    {applicationName}~{serviceName}.
     * @param parameters The service resource for patch operations.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, clusterName: string, applicationName: string, serviceName: string, parameters: ServiceResourceUpdate, options?: ServicesUpdateOptionalParams): Promise<SimplePollerLike<OperationState<ServicesUpdateResponse>, ServicesUpdateResponse>>;
    /**
     * Update a Service Fabric service resource with the specified name.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param serviceName The name of the service resource in the format of
     *                    {applicationName}~{serviceName}.
     * @param parameters The service resource for patch operations.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, clusterName: string, applicationName: string, serviceName: string, parameters: ServiceResourceUpdate, options?: ServicesUpdateOptionalParams): Promise<ServicesUpdateResponse>;
    /**
     * Delete a Service Fabric service resource with the specified name.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param serviceName The name of the service resource in the format of
     *                    {applicationName}~{serviceName}.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, clusterName: string, applicationName: string, serviceName: string, options?: ServicesDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Delete a Service Fabric service resource with the specified name.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param serviceName The name of the service resource in the format of
     *                    {applicationName}~{serviceName}.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, clusterName: string, applicationName: string, serviceName: string, options?: ServicesDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface ServicesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type ServicesCreateOrUpdateResponse = ServiceResource;

/** Optional parameters. */
export declare interface ServicesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface ServicesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ServicesGetResponse = ServiceResource;

/** Optional parameters. */
export declare interface ServicesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type ServicesListNextResponse = ServiceResourceList;

/** Optional parameters. */
export declare interface ServicesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type ServicesListResponse = ServiceResourceList;

/** Optional parameters. */
export declare interface ServicesUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type ServicesUpdateResponse = ServiceResource;

/**
 * Represents the delta health policy used to evaluate the health of services belonging to a service type when upgrading the cluster.
 *
 */
export declare interface ServiceTypeDeltaHealthPolicy {
    /**
     * The maximum allowed percentage of services health degradation allowed during cluster upgrades.
     * The delta is measured between the state of the services at the beginning of upgrade and the state of the services at the time of the health evaluation.
     * The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits.
     *
     */
    maxPercentDeltaUnhealthyServices?: number;
}

/**
 * Represents the health policy used to evaluate the health of services belonging to a service type.
 *
 */
export declare interface ServiceTypeHealthPolicy {
    /**
     * The maximum percentage of services allowed to be unhealthy before your application is considered in error.
     *
     */
    maxPercentUnhealthyServices?: number;
}

/** Describes a parameter in fabric settings of the cluster. */
export declare interface SettingsParameterDescription {
    /** The parameter name of fabric setting. */
    name: string;
    /** The parameter value of fabric setting. */
    value: string;
}

/** Describes a section in the fabric settings of the cluster. */
export declare interface SettingsSectionDescription {
    /** The section name of the fabric settings. */
    name: string;
    /** The collection of parameters in the section. */
    parameters: SettingsParameterDescription[];
}

/**
 * Defines values for SfZonalUpgradeMode. \
 * {@link KnownSfZonalUpgradeMode} can be used interchangeably with SfZonalUpgradeMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Parallel**: VMs under the node type are grouped into UDs and ignore the zone info in five UDs. This setting causes UDs across all zones to be upgraded at the same time. This deployment mode is faster for upgrades, we don't recommend it because it goes against the SDP guidelines, which state that the updates should be applied to one zone at a time. \
 * **Hierarchical**: If this value is omitted or set to Hierarchical, VMs are grouped to reflect the zonal distribution in up to 15 UDs. Each of the three zones has five UDs. This ensures that the zones are updated one at a time, moving to next zone only after completing five UDs within the first zone. This update process is safer for the cluster and the user application.
 */
export declare type SfZonalUpgradeMode = string;

/** SingletonPartitionSchemeDescription */
export declare interface SingletonPartitionSchemeDescription extends PartitionSchemeDescription {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    partitionScheme: "Singleton";
}

/** The properties of a stateful service resource. */
export declare interface StatefulServiceProperties extends ServiceResourceProperties {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    serviceKind: "Stateful";
    /** A flag indicating whether this is a persistent service which stores states on the local disk. If it is then the value of this property is true, if not it is false. */
    hasPersistedState?: boolean;
    /** The target replica set size as a number. */
    targetReplicaSetSize?: number;
    /** The minimum replica set size as a number. */
    minReplicaSetSize?: number;
    /** The duration between when a replica goes down and when a new replica is created, represented in ISO 8601 format (hh:mm:ss.s). */
    replicaRestartWaitDuration?: Date;
    /** The maximum duration for which a partition is allowed to be in a state of quorum loss, represented in ISO 8601 format (hh:mm:ss.s). */
    quorumLossWaitDuration?: Date;
    /** The definition on how long StandBy replicas should be maintained before being removed, represented in ISO 8601 format (hh:mm:ss.s). */
    standByReplicaKeepDuration?: Date;
}

/** The properties of a stateful service resource for patch operations. */
export declare interface StatefulServiceUpdateProperties extends ServiceResourceUpdateProperties {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    serviceKind: "Stateful";
    /** The target replica set size as a number. */
    targetReplicaSetSize?: number;
    /** The minimum replica set size as a number. */
    minReplicaSetSize?: number;
    /** The duration between when a replica goes down and when a new replica is created, represented in ISO 8601 format (hh:mm:ss.s). */
    replicaRestartWaitDuration?: Date;
    /** The maximum duration for which a partition is allowed to be in a state of quorum loss, represented in ISO 8601 format (hh:mm:ss.s). */
    quorumLossWaitDuration?: Date;
    /** The definition on how long StandBy replicas should be maintained before being removed, represented in ISO 8601 format (hh:mm:ss.s). */
    standByReplicaKeepDuration?: Date;
}

/** The properties of a stateless service resource. */
export declare interface StatelessServiceProperties extends ServiceResourceProperties {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    serviceKind: "Stateless";
    /** The instance count. */
    instanceCount?: number;
    /** Delay duration for RequestDrain feature to ensures that the endpoint advertised by the stateless instance is removed before the delay starts prior to closing the instance. This delay enables existing requests to drain gracefully before the instance actually goes down (https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-application-upgrade-advanced#avoid-connection-drops-during-stateless-service-planned-downtime-preview). It is represented in ISO 8601 format (hh:mm:ss.s). */
    instanceCloseDelayDuration?: string;
}

/** The properties of a stateless service resource for patch operations. */
export declare interface StatelessServiceUpdateProperties extends ServiceResourceUpdateProperties {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    serviceKind: "Stateless";
    /** The instance count. */
    instanceCount?: number;
    /** Delay duration for RequestDrain feature to ensures that the endpoint advertised by the stateless instance is removed before the delay starts prior to closing the instance. This delay enables existing requests to drain gracefully before the instance actually goes down (https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-application-upgrade-advanced#avoid-connection-drops-during-stateless-service-planned-downtime-preview). It is first interpreted as a string representing an ISO 8601 duration. It is represented in ISO 8601 format (hh:mm:ss.s). */
    instanceCloseDelayDuration?: string;
}

/**
 * Defines values for StoreName. \
 * {@link KnownStoreName} can be used interchangeably with StoreName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AddressBook** \
 * **AuthRoot** \
 * **CertificateAuthority** \
 * **Disallowed** \
 * **My** \
 * **Root** \
 * **TrustedPeople** \
 * **TrustedPublisher**
 */
export declare type StoreName = string;

/** Metadata pertaining to creation and last modification of the resource. */
export declare interface SystemData {
    /** The identity that created the resource. */
    createdBy?: string;
    /** The type of identity that created the resource. */
    createdByType?: string;
    /** The timestamp of resource creation (UTC). */
    createdAt?: Date;
    /** The identity that last modified the resource. */
    lastModifiedBy?: string;
    /** The type of identity that last modified the resource. */
    lastModifiedByType?: string;
    /** The timestamp of resource last modification (UTC). */
    lastModifiedAt?: Date;
}

/** Describes a partitioning scheme where an integer range is allocated evenly across a number of partitions. */
export declare interface UniformInt64RangePartitionSchemeDescription extends PartitionSchemeDescription {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    partitionScheme: "UniformInt64Range";
    /** The number of partitions. */
    count: number;
    /**
     * String indicating the lower bound of the partition key range that
     * should be split between the partition ‘count’
     *
     */
    lowKey: string;
    /**
     * String indicating the upper bound of the partition key range that
     * should be split between the partition ‘count’
     *
     */
    highKey: string;
}

/** The list of intermediate cluster code versions for an upgrade or downgrade. Or minimum and maximum upgradable version if no target was given */
export declare interface UpgradableVersionPathResult {
    supportedPath?: string[];
}

export declare interface UpgradableVersionsDescription {
    /** The target code version. */
    targetVersion: string;
}

/**
 * Defines values for UpgradeMode. \
 * {@link KnownUpgradeMode} can be used interchangeably with UpgradeMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Automatic**: The cluster will be automatically upgraded to the latest Service Fabric runtime version, **upgradeWave** will determine when the upgrade starts after the new version becomes available. \
 * **Manual**: The cluster will not be automatically upgraded to the latest Service Fabric runtime version. The cluster is upgraded by setting the **clusterCodeVersion** property in the cluster resource.
 */
export declare type UpgradeMode = string;

export declare interface UserAssignedIdentity {
    /**
     * The principal id of user assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
    /**
     * The client id of user assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly clientId?: string;
}

/**
 * Defines values for VmssZonalUpgradeMode. \
 * {@link KnownVmssZonalUpgradeMode} can be used interchangeably with VmssZonalUpgradeMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Parallel**: Updates will happen in all Availability Zones at once for the virtual machine scale sets. \
 * **Hierarchical**: VMs are grouped to reflect the zonal distribution in up to 15 UDs. Each of the three zones has five UDs. This ensures that the zones are updated one at a time, moving to next zone only after completing five UDs within the first zone.
 */
export declare type VmssZonalUpgradeMode = string;

export { }
