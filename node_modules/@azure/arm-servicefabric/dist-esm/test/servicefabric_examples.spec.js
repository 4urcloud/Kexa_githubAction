/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncValues, __awaiter } from "tslib";
import { env, Recorder, isPlaybackMode, } from "@azure-tools/test-recorder";
import { createTestCredential } from "@azure-tools/test-credential";
import { assert } from "chai";
import { ServiceFabricManagementClient } from "../src/serviceFabricManagementClient";
const replaceableVariables = {
    AZURE_CLIENT_ID: "azure_client_id",
    AZURE_CLIENT_SECRET: "azure_client_secret",
    AZURE_TENANT_ID: "88888888-8888-8888-8888-888888888888",
    SUBSCRIPTION_ID: "azure_subscription_id"
};
const recorderOptions = {
    envSetupForPlayback: replaceableVariables
};
export const testPollingOptions = {
    updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};
describe("ServiceFabric test", () => {
    let recorder;
    let subscriptionId;
    let client;
    let location;
    let resourceGroup;
    let clusterName;
    let applicationTypeName;
    beforeEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            recorder = new Recorder(this.currentTest);
            yield recorder.start(recorderOptions);
            subscriptionId = env.SUBSCRIPTION_ID || '';
            // This is an example of how the environment variables are used
            const credential = createTestCredential();
            client = new ServiceFabricManagementClient(credential, subscriptionId, recorder.configureClientOptions({}));
            location = "eastus";
            resourceGroup = "myjstest";
            clusterName = "myclusterxxxy";
            applicationTypeName = "myapplicationtypexxxy";
        });
    });
    afterEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            yield recorder.stop();
        });
    });
    it("clusters create test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.clusters.beginCreateOrUpdateAndWait(resourceGroup, clusterName, {
                type: "Microsoft.ServiceFabric/clusters",
                location: location,
                id: "/subscriptions/" + subscriptionId + "/resourceGroups/" + resourceGroup + "/providers/Microsoft.ServiceFabric/clusters/" + clusterName,
                name: "myCluster",
                managementEndpoint: "http://myCluster.eastus.cloudapp.azure.com:19080",
                fabricSettings: [
                    {
                        name: "UpgradeService",
                        parameters: [
                            {
                                name: "AppPollIntervalInSeconds",
                                value: "60"
                            }
                        ]
                    }
                ],
                diagnosticsStorageAccountConfig: {
                    storageAccountName: "diag",
                    protectedAccountKeyName: "StorageAccountKey1",
                    blobEndpoint: "https://diag.blob.core.windows.net/",
                    queueEndpoint: "https://diag.queue.core.windows.net/",
                    tableEndpoint: "https://diag.table.core.windows.net/"
                },
                nodeTypes: [
                    {
                        name: "nt1vm",
                        clientConnectionEndpointPort: 19000,
                        httpGatewayEndpointPort: 19007,
                        applicationPorts: {
                            startPort: 20000,
                            endPort: 30000
                        },
                        ephemeralPorts: {
                            startPort: 49000,
                            endPort: 64000
                        },
                        isPrimary: true,
                        vmInstanceCount: 5,
                        durabilityLevel: "Bronze"
                    }
                ],
                reliabilityLevel: "Silver",
                upgradeMode: "Automatic"
            }, testPollingOptions);
            assert.equal(res.name, clusterName);
        });
    });
    it("applicationTypes create test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.applicationTypes.createOrUpdate(resourceGroup, clusterName, applicationTypeName, {
                type: "applicationTypes",
                location: location,
                id: "/subscriptions/" + subscriptionId + "/resourceGroups/" + resourceGroup + "/providers/Microsoft.ServiceFabric/clusters/" + clusterName + "/applicationTypes/" + applicationTypeName,
                name: "myCluster"
            });
            assert.equal(res.name, applicationTypeName);
        });
    });
    it("clusters get test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.clusters.get(resourceGroup, clusterName);
            assert.equal(res.name, clusterName);
        });
    });
    it("applicationTypes get test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.applicationTypes.get(resourceGroup, clusterName, applicationTypeName);
            assert.equal(res.name, applicationTypeName);
        });
    });
    it("clusters list test", function () {
        var _a, e_1, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const resArray = new Array();
            try {
                for (var _d = true, _e = __asyncValues(client.clusters.listByResourceGroup(resourceGroup)), _f; _f = yield _e.next(), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    let item = _c;
                    resArray.push(item);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
                }
                finally { if (e_1) throw e_1.error; }
            }
            assert.equal(resArray.length, 1);
        });
    });
    it("applicationTypes list test", function () {
        var _a, e_2, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const resArray = new Array();
            try {
                for (var _d = true, _e = __asyncValues(client.applicationTypes.list(resourceGroup, clusterName)), _f; _f = yield _e.next(), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    let item = _c;
                    resArray.push(item);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
                }
                finally { if (e_2) throw e_2.error; }
            }
            assert.equal(resArray.length, 1);
        });
    });
    it("clusters update test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            if (isPlaybackMode()) {
                this.skip();
            }
            const res = yield client.clusters.beginUpdateAndWait(resourceGroup, clusterName, {
                tags: {
                    a: "b"
                },
                nodeTypes: [
                    {
                        name: "nt1vm",
                        clientConnectionEndpointPort: 19000,
                        httpGatewayEndpointPort: 19007,
                        applicationPorts: {
                            startPort: 20000,
                            endPort: 30000
                        },
                        ephemeralPorts: {
                            startPort: 49000,
                            endPort: 64000
                        },
                        isPrimary: true,
                        vmInstanceCount: 5,
                        durabilityLevel: "Bronze"
                    },
                    {
                        name: "testnt1",
                        clientConnectionEndpointPort: 0,
                        httpGatewayEndpointPort: 0,
                        applicationPorts: {
                            startPort: 1000,
                            endPort: 2000
                        },
                        ephemeralPorts: {
                            startPort: 3000,
                            endPort: 4000
                        },
                        isPrimary: false,
                        vmInstanceCount: 3,
                        durabilityLevel: "Bronze"
                    }
                ],
                reliabilityLevel: "Bronze",
                upgradeMode: "Automatic",
                eventStoreServiceEnabled: true
            }, testPollingOptions);
            assert.equal(res.upgradeMode, "Automatic");
        });
    });
    it("applicationTypes delete test", function () {
        var _a, e_3, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const resDelete = yield client.applicationTypes.beginDeleteAndWait(resourceGroup, clusterName, applicationTypeName, testPollingOptions);
            const resArray = new Array();
            try {
                for (var _d = true, _e = __asyncValues(client.applicationTypes.list(resourceGroup, clusterName)), _f; _f = yield _e.next(), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    let item = _c;
                    resArray.push(item);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
                }
                finally { if (e_3) throw e_3.error; }
            }
            assert.equal(resArray.length, 0);
        });
    });
    it("clusters delete test", function () {
        var _a, e_4, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const resDelete = yield client.clusters.delete(resourceGroup, clusterName);
            const resArray = new Array();
            try {
                for (var _d = true, _e = __asyncValues(client.clusters.listByResourceGroup(resourceGroup)), _f; _f = yield _e.next(), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    let item = _c;
                    resArray.push(item);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
                }
                finally { if (e_4) throw e_4.error; }
            }
            assert.equal(resArray.length, 0);
        });
    });
});
//# sourceMappingURL=servicefabric_examples.spec.js.map