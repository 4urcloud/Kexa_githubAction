/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { createHttpPoller } from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
/** Class containing ProtectionContainers operations. */
export class ProtectionContainersImpl {
    /**
     * Initialize a new instance of the class ProtectionContainers class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets details of the specific container registered to your Recovery Services Vault.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Name of the fabric where the container belongs.
     * @param containerName Name of the container whose details need to be fetched.
     * @param options The options parameters.
     */
    get(vaultName, resourceGroupName, fabricName, containerName, options) {
        return this.client.sendOperationRequest({ vaultName, resourceGroupName, fabricName, containerName, options }, getOperationSpec);
    }
    /**
     * Registers the container with Recovery Services vault.
     * This is an asynchronous operation. To track the operation status, use location header to call get
     * latest status of
     * the operation.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name associated with the container.
     * @param containerName Name of the container to be registered.
     * @param parameters Request body for operation
     * @param options The options parameters.
     */
    beginRegister(vaultName, resourceGroupName, fabricName, containerName, parameters, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    vaultName,
                    resourceGroupName,
                    fabricName,
                    containerName,
                    parameters,
                    options
                },
                spec: registerOperationSpec
            });
            const poller = yield createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Registers the container with Recovery Services vault.
     * This is an asynchronous operation. To track the operation status, use location header to call get
     * latest status of
     * the operation.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name associated with the container.
     * @param containerName Name of the container to be registered.
     * @param parameters Request body for operation
     * @param options The options parameters.
     */
    beginRegisterAndWait(vaultName, resourceGroupName, fabricName, containerName, parameters, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginRegister(vaultName, resourceGroupName, fabricName, containerName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Unregisters the given container from your Recovery Services Vault. This is an asynchronous
     * operation. To determine
     * whether the backend service has finished processing the request, call Get Container Operation Result
     * API.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Name of the fabric where the container belongs.
     * @param containerName Name of the container which needs to be unregistered from the Recovery Services
     *                      Vault.
     * @param options The options parameters.
     */
    unregister(vaultName, resourceGroupName, fabricName, containerName, options) {
        return this.client.sendOperationRequest({ vaultName, resourceGroupName, fabricName, containerName, options }, unregisterOperationSpec);
    }
    /**
     * This is an async operation and the results should be tracked using location header or
     * Azure-async-url.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric Name associated with the container.
     * @param containerName Name of the container in which inquiry needs to be triggered.
     * @param options The options parameters.
     */
    inquire(vaultName, resourceGroupName, fabricName, containerName, options) {
        return this.client.sendOperationRequest({ vaultName, resourceGroupName, fabricName, containerName, options }, inquireOperationSpec);
    }
    /**
     * Discovers all the containers in the subscription that can be backed up to Recovery Services Vault.
     * This is an
     * asynchronous operation. To know the status of the operation, call GetRefreshOperationResult API.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name associated the container.
     * @param options The options parameters.
     */
    refresh(vaultName, resourceGroupName, fabricName, options) {
        return this.client.sendOperationRequest({ vaultName, resourceGroupName, fabricName, options }, refreshOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupFabrics/{fabricName}/protectionContainers/{containerName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ProtectionContainerResource
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.vaultName,
        Parameters.resourceGroupName,
        Parameters.subscriptionId,
        Parameters.fabricName,
        Parameters.containerName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const registerOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupFabrics/{fabricName}/protectionContainers/{containerName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.ProtectionContainerResource
        },
        201: {
            bodyMapper: Mappers.ProtectionContainerResource
        },
        202: {
            bodyMapper: Mappers.ProtectionContainerResource
        },
        204: {
            bodyMapper: Mappers.ProtectionContainerResource
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    requestBody: Parameters.parameters15,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.vaultName,
        Parameters.resourceGroupName,
        Parameters.subscriptionId,
        Parameters.fabricName,
        Parameters.containerName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const unregisterOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupFabrics/{fabricName}/protectionContainers/{containerName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.vaultName,
        Parameters.resourceGroupName,
        Parameters.subscriptionId,
        Parameters.fabricName,
        Parameters.containerName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const inquireOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupFabrics/{fabricName}/protectionContainers/{containerName}/inquire",
    httpMethod: "POST",
    responses: {
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.filter],
    urlParameters: [
        Parameters.$host,
        Parameters.vaultName,
        Parameters.resourceGroupName,
        Parameters.subscriptionId,
        Parameters.fabricName,
        Parameters.containerName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const refreshOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupFabrics/{fabricName}/refreshContainers",
    httpMethod: "POST",
    responses: {
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.filter],
    urlParameters: [
        Parameters.$host,
        Parameters.vaultName,
        Parameters.resourceGroupName,
        Parameters.subscriptionId,
        Parameters.fabricName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=protectionContainers.js.map