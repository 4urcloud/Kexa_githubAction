/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { AzureMachineLearningWorkspaces } from "@azure/arm-machinelearning";
import { DefaultAzureCredential } from "@azure/identity";
/**
 * This sample demonstrates how to Creates or updates compute. This call will overwrite a compute if it exists. This is a nonrecoverable operation. If your intent is to create a new compute, do a GET first to verify that it does not exist yet.
 *
 * @summary Creates or updates compute. This call will overwrite a compute if it exists. This is a nonrecoverable operation. If your intent is to create a new compute, do a GET first to verify that it does not exist yet.
 * x-ms-original-file: specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2022-10-01/examples/Compute/createOrUpdate/KubernetesCompute.json
 */
function attachAKubernetesCompute() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345";
        const resourceGroupName = "testrg123";
        const workspaceName = "workspaces123";
        const computeName = "compute123";
        const parameters = {
            location: "eastus",
            properties: {
                description: "some compute",
                computeType: "Kubernetes",
                properties: {
                    defaultInstanceType: "defaultInstanceType",
                    instanceTypes: {
                        defaultInstanceType: {
                            nodeSelector: {},
                            resources: {
                                limits: { cpu: "1", memory: "4Gi", "nvidiaCom/gpu": '' },
                                requests: { cpu: "1", memory: "4Gi", "nvidiaCom/gpu": '' }
                            }
                        }
                    },
                    namespace: "default"
                },
                resourceId: "/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourcegroups/testrg123/providers/Microsoft.ContainerService/managedClusters/compute123-56826-c9b00420020b2"
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new AzureMachineLearningWorkspaces(credential, subscriptionId);
        const result = yield client.computeOperations.beginCreateOrUpdateAndWait(resourceGroupName, workspaceName, computeName, parameters);
        console.log(result);
    });
}
attachAKubernetesCompute().catch(console.error);
/**
 * This sample demonstrates how to Creates or updates compute. This call will overwrite a compute if it exists. This is a nonrecoverable operation. If your intent is to create a new compute, do a GET first to verify that it does not exist yet.
 *
 * @summary Creates or updates compute. This call will overwrite a compute if it exists. This is a nonrecoverable operation. If your intent is to create a new compute, do a GET first to verify that it does not exist yet.
 * x-ms-original-file: specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2022-10-01/examples/Compute/createOrUpdate/BasicAmlCompute.json
 */
function createAAmlCompute() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345";
        const resourceGroupName = "testrg123";
        const workspaceName = "workspaces123";
        const computeName = "compute123";
        const parameters = {
            location: "eastus",
            properties: {
                computeType: "AmlCompute",
                properties: {
                    enableNodePublicIp: true,
                    isolatedNetwork: false,
                    osType: "Windows",
                    remoteLoginPortPublicAccess: "NotSpecified",
                    scaleSettings: {
                        maxNodeCount: 1,
                        minNodeCount: 0,
                        nodeIdleTimeBeforeScaleDown: "PT5M"
                    },
                    virtualMachineImage: {
                        id: "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/myImageGallery/images/myImageDefinition/versions/0.0.1"
                    },
                    vmPriority: "Dedicated",
                    vmSize: "STANDARD_NC6"
                }
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new AzureMachineLearningWorkspaces(credential, subscriptionId);
        const result = yield client.computeOperations.beginCreateOrUpdateAndWait(resourceGroupName, workspaceName, computeName, parameters);
        console.log(result);
    });
}
createAAmlCompute().catch(console.error);
/**
 * This sample demonstrates how to Creates or updates compute. This call will overwrite a compute if it exists. This is a nonrecoverable operation. If your intent is to create a new compute, do a GET first to verify that it does not exist yet.
 *
 * @summary Creates or updates compute. This call will overwrite a compute if it exists. This is a nonrecoverable operation. If your intent is to create a new compute, do a GET first to verify that it does not exist yet.
 * x-ms-original-file: specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2022-10-01/examples/Compute/createOrUpdate/BasicDataFactoryCompute.json
 */
function createADataFactoryCompute() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345";
        const resourceGroupName = "testrg123";
        const workspaceName = "workspaces123";
        const computeName = "compute123";
        const parameters = {
            location: "eastus",
            properties: { computeType: "DataFactory" }
        };
        const credential = new DefaultAzureCredential();
        const client = new AzureMachineLearningWorkspaces(credential, subscriptionId);
        const result = yield client.computeOperations.beginCreateOrUpdateAndWait(resourceGroupName, workspaceName, computeName, parameters);
        console.log(result);
    });
}
createADataFactoryCompute().catch(console.error);
/**
 * This sample demonstrates how to Creates or updates compute. This call will overwrite a compute if it exists. This is a nonrecoverable operation. If your intent is to create a new compute, do a GET first to verify that it does not exist yet.
 *
 * @summary Creates or updates compute. This call will overwrite a compute if it exists. This is a nonrecoverable operation. If your intent is to create a new compute, do a GET first to verify that it does not exist yet.
 * x-ms-original-file: specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2022-10-01/examples/Compute/createOrUpdate/BasicAKSCompute.json
 */
function createAnAksCompute() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345";
        const resourceGroupName = "testrg123";
        const workspaceName = "workspaces123";
        const computeName = "compute123";
        const parameters = {
            location: "eastus",
            properties: { computeType: "AKS" }
        };
        const credential = new DefaultAzureCredential();
        const client = new AzureMachineLearningWorkspaces(credential, subscriptionId);
        const result = yield client.computeOperations.beginCreateOrUpdateAndWait(resourceGroupName, workspaceName, computeName, parameters);
        console.log(result);
    });
}
createAnAksCompute().catch(console.error);
/**
 * This sample demonstrates how to Creates or updates compute. This call will overwrite a compute if it exists. This is a nonrecoverable operation. If your intent is to create a new compute, do a GET first to verify that it does not exist yet.
 *
 * @summary Creates or updates compute. This call will overwrite a compute if it exists. This is a nonrecoverable operation. If your intent is to create a new compute, do a GET first to verify that it does not exist yet.
 * x-ms-original-file: specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2022-10-01/examples/Compute/createOrUpdate/ComputeInstance.json
 */
function createAnComputeInstanceCompute() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345";
        const resourceGroupName = "testrg123";
        const workspaceName = "workspaces123";
        const computeName = "compute123";
        const parameters = {
            location: "eastus",
            properties: {
                computeType: "ComputeInstance",
                properties: {
                    applicationSharingPolicy: "Personal",
                    computeInstanceAuthorizationType: "personal",
                    personalComputeInstanceSettings: {
                        assignedUser: {
                            objectId: "00000000-0000-0000-0000-000000000000",
                            tenantId: "00000000-0000-0000-0000-000000000000"
                        }
                    },
                    sshSettings: { sshPublicAccess: "Disabled" },
                    subnet: { id: "test-subnet-resource-id" },
                    vmSize: "STANDARD_NC6"
                }
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new AzureMachineLearningWorkspaces(credential, subscriptionId);
        const result = yield client.computeOperations.beginCreateOrUpdateAndWait(resourceGroupName, workspaceName, computeName, parameters);
        console.log(result);
    });
}
createAnComputeInstanceCompute().catch(console.error);
/**
 * This sample demonstrates how to Creates or updates compute. This call will overwrite a compute if it exists. This is a nonrecoverable operation. If your intent is to create a new compute, do a GET first to verify that it does not exist yet.
 *
 * @summary Creates or updates compute. This call will overwrite a compute if it exists. This is a nonrecoverable operation. If your intent is to create a new compute, do a GET first to verify that it does not exist yet.
 * x-ms-original-file: specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2022-10-01/examples/Compute/createOrUpdate/ComputeInstanceWithSchedules.json
 */
function createAnComputeInstanceComputeWithSchedules() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345";
        const resourceGroupName = "testrg123";
        const workspaceName = "workspaces123";
        const computeName = "compute123";
        const parameters = {
            location: "eastus",
            properties: {
                computeType: "ComputeInstance",
                properties: {
                    applicationSharingPolicy: "Personal",
                    computeInstanceAuthorizationType: "personal",
                    personalComputeInstanceSettings: {
                        assignedUser: {
                            objectId: "00000000-0000-0000-0000-000000000000",
                            tenantId: "00000000-0000-0000-0000-000000000000"
                        }
                    },
                    schedules: {
                        computeStartStop: [
                            {
                                action: "Stop",
                                cron: {
                                    triggerType: "Cron",
                                    expression: "0 18 * * *",
                                    startTime: "2021-04-23T01:30:00",
                                    timeZone: "Pacific Time"
                                },
                                status: "Enabled",
                                triggerType: "Cron"
                            }
                        ]
                    },
                    sshSettings: { sshPublicAccess: "Disabled" },
                    vmSize: "STANDARD_NC6"
                }
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new AzureMachineLearningWorkspaces(credential, subscriptionId);
        const result = yield client.computeOperations.beginCreateOrUpdateAndWait(resourceGroupName, workspaceName, computeName, parameters);
        console.log(result);
    });
}
createAnComputeInstanceComputeWithSchedules().catch(console.error);
/**
 * This sample demonstrates how to Creates or updates compute. This call will overwrite a compute if it exists. This is a nonrecoverable operation. If your intent is to create a new compute, do a GET first to verify that it does not exist yet.
 *
 * @summary Creates or updates compute. This call will overwrite a compute if it exists. This is a nonrecoverable operation. If your intent is to create a new compute, do a GET first to verify that it does not exist yet.
 * x-ms-original-file: specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2022-10-01/examples/Compute/createOrUpdate/ComputeInstanceMinimal.json
 */
function createAnComputeInstanceComputeWithMinimalInputs() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345";
        const resourceGroupName = "testrg123";
        const workspaceName = "workspaces123";
        const computeName = "compute123";
        const parameters = {
            location: "eastus",
            properties: {
                computeType: "ComputeInstance",
                properties: { vmSize: "STANDARD_NC6" }
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new AzureMachineLearningWorkspaces(credential, subscriptionId);
        const result = yield client.computeOperations.beginCreateOrUpdateAndWait(resourceGroupName, workspaceName, computeName, parameters);
        console.log(result);
    });
}
createAnComputeInstanceComputeWithMinimalInputs().catch(console.error);
/**
 * This sample demonstrates how to Creates or updates compute. This call will overwrite a compute if it exists. This is a nonrecoverable operation. If your intent is to create a new compute, do a GET first to verify that it does not exist yet.
 *
 * @summary Creates or updates compute. This call will overwrite a compute if it exists. This is a nonrecoverable operation. If your intent is to create a new compute, do a GET first to verify that it does not exist yet.
 * x-ms-original-file: specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2022-10-01/examples/Compute/createOrUpdate/AmlCompute.json
 */
function updateAAmlCompute() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345";
        const resourceGroupName = "testrg123";
        const workspaceName = "workspaces123";
        const computeName = "compute123";
        const parameters = {
            location: "eastus",
            properties: {
                description: "some compute",
                computeType: "AmlCompute",
                properties: {
                    scaleSettings: {
                        maxNodeCount: 4,
                        minNodeCount: 4,
                        nodeIdleTimeBeforeScaleDown: "PT5M"
                    }
                }
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new AzureMachineLearningWorkspaces(credential, subscriptionId);
        const result = yield client.computeOperations.beginCreateOrUpdateAndWait(resourceGroupName, workspaceName, computeName, parameters);
        console.log(result);
    });
}
updateAAmlCompute().catch(console.error);
/**
 * This sample demonstrates how to Creates or updates compute. This call will overwrite a compute if it exists. This is a nonrecoverable operation. If your intent is to create a new compute, do a GET first to verify that it does not exist yet.
 *
 * @summary Creates or updates compute. This call will overwrite a compute if it exists. This is a nonrecoverable operation. If your intent is to create a new compute, do a GET first to verify that it does not exist yet.
 * x-ms-original-file: specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2022-10-01/examples/Compute/createOrUpdate/AKSCompute.json
 */
function updateAnAksCompute() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345";
        const resourceGroupName = "testrg123";
        const workspaceName = "workspaces123";
        const computeName = "compute123";
        const parameters = {
            location: "eastus",
            properties: {
                description: "some compute",
                computeType: "AKS",
                properties: { agentCount: 4 },
                resourceId: "/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourcegroups/testrg123/providers/Microsoft.ContainerService/managedClusters/compute123-56826-c9b00420020b2"
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new AzureMachineLearningWorkspaces(credential, subscriptionId);
        const result = yield client.computeOperations.beginCreateOrUpdateAndWait(resourceGroupName, workspaceName, computeName, parameters);
        console.log(result);
    });
}
updateAnAksCompute().catch(console.error);
//# sourceMappingURL=computeCreateOrUpdateSample.js.map