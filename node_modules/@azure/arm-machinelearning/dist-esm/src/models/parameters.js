/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { Workspace as WorkspaceMapper, WorkspaceUpdateParameters as WorkspaceUpdateParametersMapper, DiagnoseWorkspaceParameters as DiagnoseWorkspaceParametersMapper, QuotaUpdateParameters as QuotaUpdateParametersMapper, ComputeResource as ComputeResourceMapper, ClusterUpdateParameters as ClusterUpdateParametersMapper, PrivateEndpointConnection as PrivateEndpointConnectionMapper, WorkspaceConnectionPropertiesV2BasicResource as WorkspaceConnectionPropertiesV2BasicResourceMapper, PartialMinimalTrackedResourceWithIdentity as PartialMinimalTrackedResourceWithIdentityMapper, BatchEndpoint as BatchEndpointMapper, PartialBatchDeploymentPartialMinimalTrackedResourceWithProperties as PartialBatchDeploymentPartialMinimalTrackedResourceWithPropertiesMapper, BatchDeployment as BatchDeploymentMapper, CodeContainer as CodeContainerMapper, CodeVersion as CodeVersionMapper, ComponentContainer as ComponentContainerMapper, ComponentVersion as ComponentVersionMapper, DataContainer as DataContainerMapper, DataVersionBase as DataVersionBaseMapper, Datastore as DatastoreMapper, EnvironmentContainer as EnvironmentContainerMapper, EnvironmentVersion as EnvironmentVersionMapper, JobBase as JobBaseMapper, ModelContainer as ModelContainerMapper, ModelVersion as ModelVersionMapper, OnlineEndpoint as OnlineEndpointMapper, RegenerateEndpointKeysRequest as RegenerateEndpointKeysRequestMapper, PartialMinimalTrackedResourceWithSku as PartialMinimalTrackedResourceWithSkuMapper, OnlineDeployment as OnlineDeploymentMapper, DeploymentLogsRequest as DeploymentLogsRequestMapper, Schedule as ScheduleMapper } from "../models/mappers";
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2022-10-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const workspaceName = {
    parameterPath: "workspaceName",
    mapper: {
        serializedName: "workspaceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export const parameters = {
    parameterPath: "parameters",
    mapper: WorkspaceMapper
};
export const parameters1 = {
    parameterPath: "parameters",
    mapper: WorkspaceUpdateParametersMapper
};
export const skip = {
    parameterPath: ["options", "skip"],
    mapper: {
        serializedName: "$skip",
        type: {
            name: "String"
        }
    }
};
export const parameters2 = {
    parameterPath: ["options", "parameters"],
    mapper: DiagnoseWorkspaceParametersMapper
};
export const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const location = {
    parameterPath: "location",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[-\\w\\._]+$")
        },
        serializedName: "location",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters3 = {
    parameterPath: "parameters",
    mapper: QuotaUpdateParametersMapper
};
export const computeName = {
    parameterPath: "computeName",
    mapper: {
        serializedName: "computeName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters4 = {
    parameterPath: "parameters",
    mapper: ComputeResourceMapper
};
export const parameters5 = {
    parameterPath: "parameters",
    mapper: ClusterUpdateParametersMapper
};
export const underlyingResourceAction = {
    parameterPath: "underlyingResourceAction",
    mapper: {
        serializedName: "underlyingResourceAction",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const privateEndpointConnectionName = {
    parameterPath: "privateEndpointConnectionName",
    mapper: {
        serializedName: "privateEndpointConnectionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const properties = {
    parameterPath: "properties",
    mapper: PrivateEndpointConnectionMapper
};
export const parameters6 = {
    parameterPath: "parameters",
    mapper: WorkspaceConnectionPropertiesV2BasicResourceMapper
};
export const connectionName = {
    parameterPath: "connectionName",
    mapper: {
        serializedName: "connectionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const target = {
    parameterPath: ["options", "target"],
    mapper: {
        serializedName: "target",
        type: {
            name: "String"
        }
    }
};
export const category = {
    parameterPath: ["options", "category"],
    mapper: {
        serializedName: "category",
        type: {
            name: "String"
        }
    }
};
export const count = {
    parameterPath: ["options", "count"],
    mapper: {
        serializedName: "count",
        type: {
            name: "Number"
        }
    }
};
export const endpointName = {
    parameterPath: "endpointName",
    mapper: {
        serializedName: "endpointName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const body = {
    parameterPath: "body",
    mapper: PartialMinimalTrackedResourceWithIdentityMapper
};
export const endpointName1 = {
    parameterPath: "endpointName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9\\-_]{0,254}$")
        },
        serializedName: "endpointName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const body1 = {
    parameterPath: "body",
    mapper: BatchEndpointMapper
};
export const orderBy = {
    parameterPath: ["options", "orderBy"],
    mapper: {
        serializedName: "$orderBy",
        type: {
            name: "String"
        }
    }
};
export const top = {
    parameterPath: ["options", "top"],
    mapper: {
        serializedName: "$top",
        type: {
            name: "Number"
        }
    }
};
export const deploymentName = {
    parameterPath: "deploymentName",
    mapper: {
        serializedName: "deploymentName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const body2 = {
    parameterPath: "body",
    mapper: PartialBatchDeploymentPartialMinimalTrackedResourceWithPropertiesMapper
};
export const deploymentName1 = {
    parameterPath: "deploymentName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9\\-_]{0,254}$")
        },
        serializedName: "deploymentName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const body3 = {
    parameterPath: "body",
    mapper: BatchDeploymentMapper
};
export const name = {
    parameterPath: "name",
    mapper: {
        serializedName: "name",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const body4 = {
    parameterPath: "body",
    mapper: CodeContainerMapper
};
export const name1 = {
    parameterPath: "name",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9\\-_]{0,254}$")
        },
        serializedName: "name",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const version = {
    parameterPath: "version",
    mapper: {
        serializedName: "version",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const body5 = {
    parameterPath: "body",
    mapper: CodeVersionMapper
};
export const listViewType = {
    parameterPath: ["options", "listViewType"],
    mapper: {
        serializedName: "listViewType",
        type: {
            name: "String"
        }
    }
};
export const body6 = {
    parameterPath: "body",
    mapper: ComponentContainerMapper
};
export const body7 = {
    parameterPath: "body",
    mapper: ComponentVersionMapper
};
export const body8 = {
    parameterPath: "body",
    mapper: DataContainerMapper
};
export const tags = {
    parameterPath: ["options", "tags"],
    mapper: {
        serializedName: "$tags",
        type: {
            name: "String"
        }
    }
};
export const body9 = {
    parameterPath: "body",
    mapper: DataVersionBaseMapper
};
export const count1 = {
    parameterPath: ["options", "count"],
    mapper: {
        defaultValue: 30,
        serializedName: "count",
        type: {
            name: "Number"
        }
    }
};
export const isDefault = {
    parameterPath: ["options", "isDefault"],
    mapper: {
        serializedName: "isDefault",
        type: {
            name: "Boolean"
        }
    }
};
export const names = {
    parameterPath: ["options", "names"],
    mapper: {
        serializedName: "names",
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "String"
                }
            }
        }
    },
    collectionFormat: "CSV"
};
export const searchText = {
    parameterPath: ["options", "searchText"],
    mapper: {
        serializedName: "searchText",
        type: {
            name: "String"
        }
    }
};
export const orderBy1 = {
    parameterPath: ["options", "orderBy"],
    mapper: {
        serializedName: "orderBy",
        type: {
            name: "String"
        }
    }
};
export const orderByAsc = {
    parameterPath: ["options", "orderByAsc"],
    mapper: {
        defaultValue: false,
        serializedName: "orderByAsc",
        type: {
            name: "Boolean"
        }
    }
};
export const body10 = {
    parameterPath: "body",
    mapper: DatastoreMapper
};
export const skipValidation = {
    parameterPath: ["options", "skipValidation"],
    mapper: {
        defaultValue: false,
        serializedName: "skipValidation",
        type: {
            name: "Boolean"
        }
    }
};
export const body11 = {
    parameterPath: "body",
    mapper: EnvironmentContainerMapper
};
export const body12 = {
    parameterPath: "body",
    mapper: EnvironmentVersionMapper
};
export const jobType = {
    parameterPath: ["options", "jobType"],
    mapper: {
        serializedName: "jobType",
        type: {
            name: "String"
        }
    }
};
export const tag = {
    parameterPath: ["options", "tag"],
    mapper: {
        serializedName: "tag",
        type: {
            name: "String"
        }
    }
};
export const id = {
    parameterPath: "id",
    mapper: {
        serializedName: "id",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const body13 = {
    parameterPath: "body",
    mapper: JobBaseMapper
};
export const id1 = {
    parameterPath: "id",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9\\-_]{0,254}$")
        },
        serializedName: "id",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const body14 = {
    parameterPath: "body",
    mapper: ModelContainerMapper
};
export const version1 = {
    parameterPath: ["options", "version"],
    mapper: {
        serializedName: "version",
        type: {
            name: "String"
        }
    }
};
export const description = {
    parameterPath: ["options", "description"],
    mapper: {
        serializedName: "description",
        type: {
            name: "String"
        }
    }
};
export const offset = {
    parameterPath: ["options", "offset"],
    mapper: {
        serializedName: "offset",
        type: {
            name: "Number"
        }
    }
};
export const tags1 = {
    parameterPath: ["options", "tags"],
    mapper: {
        serializedName: "tags",
        type: {
            name: "String"
        }
    }
};
export const properties1 = {
    parameterPath: ["options", "properties"],
    mapper: {
        serializedName: "properties",
        type: {
            name: "String"
        }
    }
};
export const feed = {
    parameterPath: ["options", "feed"],
    mapper: {
        serializedName: "feed",
        type: {
            name: "String"
        }
    }
};
export const body15 = {
    parameterPath: "body",
    mapper: ModelVersionMapper
};
export const name2 = {
    parameterPath: ["options", "name"],
    mapper: {
        serializedName: "name",
        type: {
            name: "String"
        }
    }
};
export const computeType = {
    parameterPath: ["options", "computeType"],
    mapper: {
        serializedName: "computeType",
        type: {
            name: "String"
        }
    }
};
export const orderBy2 = {
    parameterPath: ["options", "orderBy"],
    mapper: {
        serializedName: "orderBy",
        type: {
            name: "String"
        }
    }
};
export const body16 = {
    parameterPath: "body",
    mapper: OnlineEndpointMapper
};
export const body17 = {
    parameterPath: "body",
    mapper: RegenerateEndpointKeysRequestMapper
};
export const body18 = {
    parameterPath: "body",
    mapper: PartialMinimalTrackedResourceWithSkuMapper
};
export const body19 = {
    parameterPath: "body",
    mapper: OnlineDeploymentMapper
};
export const body20 = {
    parameterPath: "body",
    mapper: DeploymentLogsRequestMapper
};
export const listViewType1 = {
    parameterPath: ["options", "listViewType"],
    mapper: {
        serializedName: "listViewType",
        type: {
            name: "String"
        }
    }
};
export const body21 = {
    parameterPath: "body",
    mapper: ScheduleMapper
};
//# sourceMappingURL=parameters.js.map