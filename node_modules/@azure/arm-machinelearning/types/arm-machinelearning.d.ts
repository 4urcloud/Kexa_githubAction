import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { PollerLike } from '@azure/core-lro';
import { PollOperationState } from '@azure/core-lro';

/** Account key datastore credentials configuration. */
export declare interface AccountKeyDatastoreCredentials extends DatastoreCredentials {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    credentialsType: "AccountKey";
    /** [Required] Storage account secrets. */
    secrets: AccountKeyDatastoreSecrets;
}

/** Datastore account key secrets. */
export declare interface AccountKeyDatastoreSecrets extends DatastoreSecrets {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    secretsType: "AccountKey";
    /** Storage account key. */
    key?: string;
}

/** A Machine Learning compute based on AKS. */
export declare interface Aks extends Compute, AKSSchema {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    computeType: "AKS";
}

/** Secrets related to a Machine Learning compute based on AKS. */
export declare interface AksComputeSecrets extends ComputeSecrets, AksComputeSecretsProperties {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    computeType: "AKS";
}

/** Properties of AksComputeSecrets */
export declare interface AksComputeSecretsProperties {
    /** Content of kubeconfig file that can be used to connect to the Kubernetes cluster. */
    userKubeConfig?: string;
    /** Content of kubeconfig file that can be used to connect to the Kubernetes cluster. */
    adminKubeConfig?: string;
    /** Image registry pull secret. */
    imagePullSecretName?: string;
}

/** Advance configuration for AKS networking */
export declare interface AksNetworkingConfiguration {
    /** Virtual network subnet resource ID the compute nodes belong to */
    subnetId?: string;
    /** A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges. */
    serviceCidr?: string;
    /** An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in serviceCidr. */
    dnsServiceIP?: string;
    /** A CIDR notation IP range assigned to the Docker bridge network. It must not overlap with any Subnet IP ranges or the Kubernetes service address range. */
    dockerBridgeCidr?: string;
}

export declare interface AKSSchema {
    /** AKS properties */
    properties?: AKSSchemaProperties;
}

/** AKS properties */
export declare interface AKSSchemaProperties {
    /** Cluster full qualified domain name */
    clusterFqdn?: string;
    /**
     * System services
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemServices?: SystemService[];
    /** Number of agents */
    agentCount?: number;
    /** Agent virtual machine size */
    agentVmSize?: string;
    /** Intended usage of the cluster */
    clusterPurpose?: ClusterPurpose;
    /** SSL configuration */
    sslConfiguration?: SslConfiguration;
    /** AKS networking configuration for vnet */
    aksNetworkingConfiguration?: AksNetworkingConfiguration;
    /** Load Balancer Type */
    loadBalancerType?: LoadBalancerType;
    /** Load Balancer Subnet */
    loadBalancerSubnet?: string;
}

/**
 * Defines values for AllocationState. \
 * {@link KnownAllocationState} can be used interchangeably with AllocationState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Steady** \
 * **Resizing**
 */
export declare type AllocationState = string;

/** An Azure Machine Learning compute. */
export declare interface AmlCompute extends Compute, AmlComputeSchema {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    computeType: "AmlCompute";
}

/** Compute node information related to a AmlCompute. */
export declare interface AmlComputeNodeInformation {
    /**
     * ID of the compute node.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nodeId?: string;
    /**
     * Private IP address of the compute node.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly privateIpAddress?: string;
    /**
     * Public IP address of the compute node.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly publicIpAddress?: string;
    /**
     * SSH port number of the node.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly port?: number;
    /**
     * State of the compute node. Values are idle, running, preparing, unusable, leaving and preempted.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nodeState?: NodeState;
    /**
     * ID of the Experiment running on the node, if any else null.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly runId?: string;
}

/** Result of AmlCompute Nodes */
export declare interface AmlComputeNodesInformation {
    /**
     * The collection of returned AmlCompute nodes details.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nodes?: AmlComputeNodeInformation[];
    /**
     * The continuation token.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** AML Compute properties */
export declare interface AmlComputeProperties {
    /** Compute OS Type */
    osType?: OsType;
    /** Virtual Machine Size */
    vmSize?: string;
    /** Virtual Machine priority */
    vmPriority?: VmPriority;
    /** Virtual Machine image for AML Compute - windows only */
    virtualMachineImage?: VirtualMachineImage;
    /** Network is isolated or not */
    isolatedNetwork?: boolean;
    /** Scale settings for AML Compute */
    scaleSettings?: ScaleSettings;
    /** Credentials for an administrator user account that will be created on each compute node. */
    userAccountCredentials?: UserAccountCredentials;
    /** Virtual network subnet resource ID the compute nodes belong to. */
    subnet?: ResourceId;
    /** State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh port is closed on all nodes of the cluster. Enabled - Indicates that the public ssh port is open on all nodes of the cluster. NotSpecified - Indicates that the public ssh port is closed on all nodes of the cluster if VNet is defined, else is open all public nodes. It can be default only during cluster creation time, after creation it will be either enabled or disabled. */
    remoteLoginPortPublicAccess?: RemoteLoginPortPublicAccess;
    /**
     * Allocation state of the compute. Possible values are: steady - Indicates that the compute is not resizing. There are no changes to the number of compute nodes in the compute in progress. A compute enters this state when it is created and when no operations are being performed on the compute to change the number of compute nodes. resizing - Indicates that the compute is resizing; that is, compute nodes are being added to or removed from the compute.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly allocationState?: AllocationState;
    /**
     * The time at which the compute entered its current allocation state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly allocationStateTransitionTime?: Date;
    /**
     * Collection of errors encountered by various compute nodes during node setup.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly errors?: ErrorResponse[];
    /**
     * The number of compute nodes currently assigned to the compute.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly currentNodeCount?: number;
    /**
     * The target number of compute nodes for the compute. If the allocationState is resizing, this property denotes the target node count for the ongoing resize operation. If the allocationState is steady, this property denotes the target node count for the previous resize operation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly targetNodeCount?: number;
    /**
     * Counts of various node states on the compute.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nodeStateCounts?: NodeStateCounts;
    /** Enable or disable node public IP address provisioning. Possible values are: Possible values are: true - Indicates that the compute nodes will have public IPs provisioned. false - Indicates that the compute nodes will have a private endpoint and no public IPs. */
    enableNodePublicIp?: boolean;
    /** A property bag containing additional properties. */
    propertyBag?: Record<string, unknown>;
}

/** Properties(top level) of AmlCompute */
export declare interface AmlComputeSchema {
    /** Properties of AmlCompute */
    properties?: AmlComputeProperties;
}

/** Azure Machine Learning workspace REST API operation */
export declare interface AmlOperation {
    /** Operation name: {provider}/{resource}/{operation} */
    name?: string;
    /** Display name of operation */
    display?: AmlOperationDisplay;
    /** Indicates whether the operation applies to data-plane */
    isDataAction?: boolean;
}

/** Display name of operation */
export declare interface AmlOperationDisplay {
    /** The resource provider name: Microsoft.MachineLearningExperimentation */
    provider?: string;
    /** The resource on which the operation is performed. */
    resource?: string;
    /** The operation that users can perform. */
    operation?: string;
    /** The description for the operation. */
    description?: string;
}

/** An array of operations supported by the resource provider. */
export declare interface AmlOperationListResult {
    /** List of AML workspace operations supported by the AML workspace resource provider. */
    value?: AmlOperation[];
}

/** AML Token identity configuration. */
export declare interface AmlToken extends IdentityConfiguration {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    identityType: "AMLToken";
}

/** Features enabled for a workspace */
export declare interface AmlUserFeature {
    /** Specifies the feature ID */
    id?: string;
    /** Specifies the feature name */
    displayName?: string;
    /** Describes the feature for user experience */
    description?: string;
}

/**
 * Defines values for ApplicationSharingPolicy. \
 * {@link KnownApplicationSharingPolicy} can be used interchangeably with ApplicationSharingPolicy,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Personal** \
 * **Shared**
 */
export declare type ApplicationSharingPolicy = string;

export declare interface AssetBase extends ResourceBase {
    /** If the name version are system generated (anonymous registration). */
    isAnonymous?: boolean;
    /** Is the asset archived? */
    isArchived?: boolean;
}

export declare interface AssetContainer extends ResourceBase {
    /** Is the asset archived? */
    isArchived?: boolean;
    /**
     * The latest version inside this container.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly latestVersion?: string;
    /**
     * The next auto incremental version
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextVersion?: string;
}

/** Asset input type. */
export declare interface AssetJobInput {
    /** Input Asset Delivery Mode. */
    mode?: InputDeliveryMode;
    /** [Required] Input Asset URI. */
    uri: string;
}

/** Asset output type. */
export declare interface AssetJobOutput {
    /** Output Asset Delivery Mode. */
    mode?: OutputDeliveryMode;
    /** Output Asset URI. */
    uri?: string;
}

/** Base definition for asset references. */
export declare interface AssetReferenceBase {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    referenceType: "DataPath" | "Id" | "OutputPath";
}

export declare type AssetReferenceBaseUnion = AssetReferenceBase | DataPathAssetReference | IdAssetReference | OutputPathAssetReference;

/** A user that can be assigned to a compute instance. */
export declare interface AssignedUser {
    /** User’s AAD Object Id. */
    objectId: string;
    /** User’s AAD Tenant Id. */
    tenantId: string;
}

/** Forecast horizon determined automatically by system. */
export declare interface AutoForecastHorizon extends ForecastHorizon {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    mode: "Auto";
}

/**
 * AutoMLJob class.
 * Use this class for executing AutoML tasks like Classification/Regression etc.
 * See TaskType enum for all the tasks supported.
 */
export declare interface AutoMLJob extends JobBaseProperties {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    jobType: "AutoML";
    /**
     * The ARM resource ID of the Environment specification for the job.
     * This is optional value to provide, if not provided, AutoML will default this to Production AutoML curated environment version when running the job.
     */
    environmentId?: string;
    /** Environment variables included in the job. */
    environmentVariables?: {
        [propertyName: string]: string | null;
    };
    /** Mapping of output data bindings used in the job. */
    outputs?: {
        [propertyName: string]: JobOutputUnion | null;
    };
    /** Compute Resource configuration for the job. */
    resources?: JobResourceConfiguration;
    /** [Required] This represents scenario which can be one of Tables/NLP/Image */
    taskDetails: AutoMLVerticalUnion;
}

/**
 * AutoML vertical class.
 * Base class for AutoML verticals - TableVertical/ImageVertical/NLPVertical
 */
export declare interface AutoMLVertical {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    taskType: "Classification" | "Forecasting" | "ImageClassification" | "ImageClassificationMultilabel" | "ImageInstanceSegmentation" | "ImageObjectDetection" | "Regression" | "TextClassification" | "TextClassificationMultilabel" | "TextNER";
    /** Log verbosity for the job. */
    logVerbosity?: LogVerbosity;
    /**
     * Target column name: This is prediction values column.
     * Also known as label column name in context of classification tasks.
     */
    targetColumnName?: string;
    /** [Required] Training data input. */
    trainingData: MLTableJobInput;
}

export declare type AutoMLVerticalUnion = AutoMLVertical | Classification | Forecasting | ImageClassification | ImageClassificationMultilabel | ImageInstanceSegmentation | ImageObjectDetection | Regression | TextClassification | TextClassificationMultilabel | TextNer;

/** N-Cross validations determined automatically. */
export declare interface AutoNCrossValidations extends NCrossValidations {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    mode: "Auto";
}

/** Auto pause properties */
export declare interface AutoPauseProperties {
    delayInMinutes?: number;
    enabled?: boolean;
}

/**
 * Defines values for AutoRebuildSetting. \
 * {@link KnownAutoRebuildSetting} can be used interchangeably with AutoRebuildSetting,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Disabled** \
 * **OnBaseImageUpdate**
 */
export declare type AutoRebuildSetting = string;

/**
 * Defines values for Autosave. \
 * {@link KnownAutosave} can be used interchangeably with Autosave,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Local** \
 * **Remote**
 */
export declare type Autosave = string;

/** Auto scale properties */
export declare interface AutoScaleProperties {
    minNodeCount?: number;
    enabled?: boolean;
    maxNodeCount?: number;
}

export declare interface AutoSeasonality extends Seasonality {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    mode: "Auto";
}

export declare interface AutoTargetLags extends TargetLags {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    mode: "Auto";
}

/** Target lags rolling window determined automatically. */
export declare interface AutoTargetRollingWindowSize extends TargetRollingWindowSize {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    mode: "Auto";
}

/** Azure Blob datastore configuration. */
export declare interface AzureBlobDatastore extends DatastoreProperties {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    datastoreType: "AzureBlob";
    /** Storage account name. */
    accountName?: string;
    /** Storage account container name. */
    containerName?: string;
    /** Azure cloud endpoint for the storage account. */
    endpoint?: string;
    /** Protocol used to communicate with the storage account. */
    protocol?: string;
    /** Indicates which identity to use to authenticate service data access to customer's storage. */
    serviceDataAccessAuthIdentity?: ServiceDataAccessAuthIdentity;
}

/** Azure Data Lake Gen1 datastore configuration. */
export declare interface AzureDataLakeGen1Datastore extends DatastoreProperties {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    datastoreType: "AzureDataLakeGen1";
    /** Indicates which identity to use to authenticate service data access to customer's storage. */
    serviceDataAccessAuthIdentity?: ServiceDataAccessAuthIdentity;
    /** [Required] Azure Data Lake store name. */
    storeName: string;
}

/** Azure Data Lake Gen2 datastore configuration. */
export declare interface AzureDataLakeGen2Datastore extends DatastoreProperties {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    datastoreType: "AzureDataLakeGen2";
    /** [Required] Storage account name. */
    accountName: string;
    /** Azure cloud endpoint for the storage account. */
    endpoint?: string;
    /** [Required] The name of the Data Lake Gen2 filesystem. */
    filesystem: string;
    /** Protocol used to communicate with the storage account. */
    protocol?: string;
    /** Indicates which identity to use to authenticate service data access to customer's storage. */
    serviceDataAccessAuthIdentity?: ServiceDataAccessAuthIdentity;
}

/** Azure File datastore configuration. */
export declare interface AzureFileDatastore extends DatastoreProperties {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    datastoreType: "AzureFile";
    /** [Required] Storage account name. */
    accountName: string;
    /** Azure cloud endpoint for the storage account. */
    endpoint?: string;
    /** [Required] The name of the Azure file share that the datastore points to. */
    fileShareName: string;
    /** Protocol used to communicate with the storage account. */
    protocol?: string;
    /** Indicates which identity to use to authenticate service data access to customer's storage. */
    serviceDataAccessAuthIdentity?: ServiceDataAccessAuthIdentity;
}

export declare class AzureMachineLearningWorkspaces extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the AzureMachineLearningWorkspaces class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: AzureMachineLearningWorkspacesOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    operations: Operations;
    workspaces: Workspaces;
    usages: Usages;
    virtualMachineSizes: VirtualMachineSizes;
    quotas: Quotas;
    computeOperations: ComputeOperations;
    privateEndpointConnections: PrivateEndpointConnections;
    privateLinkResources: PrivateLinkResources;
    workspaceConnections: WorkspaceConnections;
    batchEndpoints: BatchEndpoints;
    batchDeployments: BatchDeployments;
    codeContainers: CodeContainers;
    codeVersions: CodeVersions;
    componentContainers: ComponentContainers;
    componentVersions: ComponentVersions;
    dataContainers: DataContainers;
    dataVersions: DataVersions;
    datastores: Datastores;
    environmentContainers: EnvironmentContainers;
    environmentVersions: EnvironmentVersions;
    jobs: Jobs;
    modelContainers: ModelContainers;
    modelVersions: ModelVersions;
    onlineEndpoints: OnlineEndpoints;
    onlineDeployments: OnlineDeployments;
    schedules: Schedules;
    workspaceFeatures: WorkspaceFeatures;
}

/** Optional parameters. */
export declare interface AzureMachineLearningWorkspacesOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** Defines an early termination policy based on slack criteria, and a frequency and delay interval for evaluation */
export declare interface BanditPolicy extends EarlyTerminationPolicy {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    policyType: "Bandit";
    /** Absolute distance allowed from the best performing run. */
    slackAmount?: number;
    /** Ratio of the allowed distance from the best performing run. */
    slackFactor?: number;
}

export declare interface BatchDeployment extends TrackedResource {
    /** Managed service identity (system assigned and/or user assigned identities) */
    identity?: ManagedServiceIdentity;
    /** Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type. */
    kind?: string;
    /** [Required] Additional attributes of the entity. */
    properties: BatchDeploymentProperties;
    /** Sku details required for ARM contract for Autoscaling. */
    sku?: Sku;
}

/** Batch inference settings per deployment. */
export declare interface BatchDeploymentProperties extends EndpointDeploymentPropertiesBase {
    /** Compute target for batch inference operation. */
    compute?: string;
    /**
     * Error threshold, if the error count for the entire input goes above this value,
     * the batch inference will be aborted. Range is [-1, int.MaxValue].
     * For FileDataset, this value is the count of file failures.
     * For TabularDataset, this value is the count of record failures.
     * If set to -1 (the lower bound), all failures during batch inference will be ignored.
     */
    errorThreshold?: number;
    /** Logging level for batch inference operation. */
    loggingLevel?: BatchLoggingLevel;
    /** Indicates maximum number of parallelism per instance. */
    maxConcurrencyPerInstance?: number;
    /**
     * Size of the mini-batch passed to each batch invocation.
     * For FileDataset, this is the number of files per mini-batch.
     * For TabularDataset, this is the size of the records in bytes, per mini-batch.
     */
    miniBatchSize?: number;
    /** Reference to the model asset for the endpoint deployment. */
    model?: AssetReferenceBaseUnion;
    /** Indicates how the output will be organized. */
    outputAction?: BatchOutputAction;
    /** Customized output file name for append_row output action. */
    outputFileName?: string;
    /**
     * Provisioning state for the endpoint deployment.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: DeploymentProvisioningState;
    /**
     * Indicates compute configuration for the job.
     * If not provided, will default to the defaults defined in ResourceConfiguration.
     */
    resources?: DeploymentResourceConfiguration;
    /**
     * Retry Settings for the batch inference operation.
     * If not provided, will default to the defaults defined in BatchRetrySettings.
     */
    retrySettings?: BatchRetrySettings;
}

/** Interface representing a BatchDeployments. */
export declare interface BatchDeployments {
    /**
     * Lists Batch inference deployments in the workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param endpointName Endpoint name
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, endpointName: string, options?: BatchDeploymentsListOptionalParams): PagedAsyncIterableIterator<BatchDeployment>;
    /**
     * Delete Batch Inference deployment (asynchronous).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param endpointName Endpoint name
     * @param deploymentName Inference deployment identifier.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, workspaceName: string, endpointName: string, deploymentName: string, options?: BatchDeploymentsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Delete Batch Inference deployment (asynchronous).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param endpointName Endpoint name
     * @param deploymentName Inference deployment identifier.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, workspaceName: string, endpointName: string, deploymentName: string, options?: BatchDeploymentsDeleteOptionalParams): Promise<void>;
    /**
     * Gets a batch inference deployment by id.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param endpointName Endpoint name
     * @param deploymentName The identifier for the Batch deployments.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, endpointName: string, deploymentName: string, options?: BatchDeploymentsGetOptionalParams): Promise<BatchDeploymentsGetResponse>;
    /**
     * Update a batch inference deployment (asynchronous).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param endpointName Inference endpoint name
     * @param deploymentName The identifier for the Batch inference deployment.
     * @param body Batch inference deployment definition object.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, workspaceName: string, endpointName: string, deploymentName: string, body: PartialBatchDeploymentPartialMinimalTrackedResourceWithProperties, options?: BatchDeploymentsUpdateOptionalParams): Promise<PollerLike<PollOperationState<BatchDeploymentsUpdateResponse>, BatchDeploymentsUpdateResponse>>;
    /**
     * Update a batch inference deployment (asynchronous).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param endpointName Inference endpoint name
     * @param deploymentName The identifier for the Batch inference deployment.
     * @param body Batch inference deployment definition object.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, workspaceName: string, endpointName: string, deploymentName: string, body: PartialBatchDeploymentPartialMinimalTrackedResourceWithProperties, options?: BatchDeploymentsUpdateOptionalParams): Promise<BatchDeploymentsUpdateResponse>;
    /**
     * Creates/updates a batch inference deployment (asynchronous).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param endpointName Inference endpoint name
     * @param deploymentName The identifier for the Batch inference deployment.
     * @param body Batch inference deployment definition object.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, workspaceName: string, endpointName: string, deploymentName: string, body: BatchDeployment, options?: BatchDeploymentsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<BatchDeploymentsCreateOrUpdateResponse>, BatchDeploymentsCreateOrUpdateResponse>>;
    /**
     * Creates/updates a batch inference deployment (asynchronous).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param endpointName Inference endpoint name
     * @param deploymentName The identifier for the Batch inference deployment.
     * @param body Batch inference deployment definition object.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, workspaceName: string, endpointName: string, deploymentName: string, body: BatchDeployment, options?: BatchDeploymentsCreateOrUpdateOptionalParams): Promise<BatchDeploymentsCreateOrUpdateResponse>;
}

/** Defines headers for BatchDeployments_createOrUpdate operation. */
export declare interface BatchDeploymentsCreateOrUpdateHeaders {
    /** Timeout for the client to use when polling the asynchronous operation. */
    xMsAsyncOperationTimeout?: string;
    /** URI to poll for asynchronous operation status. */
    azureAsyncOperation?: string;
}

/** Optional parameters. */
export declare interface BatchDeploymentsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type BatchDeploymentsCreateOrUpdateResponse = BatchDeployment;

/** Defines headers for BatchDeployments_delete operation. */
export declare interface BatchDeploymentsDeleteHeaders {
    /** Timeout for the client to use when polling the asynchronous operation. */
    xMsAsyncOperationTimeout?: string;
    /** URI to poll for asynchronous operation result. */
    location?: string;
    /** Duration the client should wait between requests, in seconds. */
    retryAfter?: number;
}

/** Optional parameters. */
export declare interface BatchDeploymentsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface BatchDeploymentsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type BatchDeploymentsGetResponse = BatchDeployment;

/** Optional parameters. */
export declare interface BatchDeploymentsListNextOptionalParams extends coreClient.OperationOptions {
    /** Continuation token for pagination. */
    skip?: string;
    /** Ordering of list. */
    orderBy?: string;
    /** Top of list. */
    top?: number;
}

/** Contains response data for the listNext operation. */
export declare type BatchDeploymentsListNextResponse = BatchDeploymentTrackedResourceArmPaginatedResult;

/** Optional parameters. */
export declare interface BatchDeploymentsListOptionalParams extends coreClient.OperationOptions {
    /** Continuation token for pagination. */
    skip?: string;
    /** Ordering of list. */
    orderBy?: string;
    /** Top of list. */
    top?: number;
}

/** Contains response data for the list operation. */
export declare type BatchDeploymentsListResponse = BatchDeploymentTrackedResourceArmPaginatedResult;

/** Defines headers for BatchDeployments_update operation. */
export declare interface BatchDeploymentsUpdateHeaders {
    /** Timeout for the client to use when polling the asynchronous operation. */
    xMsAsyncOperationTimeout?: string;
    /** URI to poll for asynchronous operation result. */
    location?: string;
    /** Duration the client should wait between requests, in seconds. */
    retryAfter?: number;
}

/** Optional parameters. */
export declare interface BatchDeploymentsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type BatchDeploymentsUpdateResponse = BatchDeployment;

/** A paginated list of BatchDeployment entities. */
export declare interface BatchDeploymentTrackedResourceArmPaginatedResult {
    /** The link to the next page of BatchDeployment objects. If null, there are no additional pages. */
    nextLink?: string;
    /** An array of objects of type BatchDeployment. */
    value?: BatchDeployment[];
}

export declare interface BatchEndpoint extends TrackedResource {
    /** Managed service identity (system assigned and/or user assigned identities) */
    identity?: ManagedServiceIdentity;
    /** Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type. */
    kind?: string;
    /** [Required] Additional attributes of the entity. */
    properties: BatchEndpointProperties;
    /** Sku details required for ARM contract for Autoscaling. */
    sku?: Sku;
}

/** Batch endpoint default values */
export declare interface BatchEndpointDefaults {
    /**
     * Name of the deployment that will be default for the endpoint.
     * This deployment will end up getting 100% traffic when the endpoint scoring URL is invoked.
     */
    deploymentName?: string;
}

/** Batch endpoint configuration. */
export declare interface BatchEndpointProperties extends EndpointPropertiesBase {
    /** Default values for Batch Endpoint */
    defaults?: BatchEndpointDefaults;
    /**
     * Provisioning state for the endpoint.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: EndpointProvisioningState;
}

/** Interface representing a BatchEndpoints. */
export declare interface BatchEndpoints {
    /**
     * Lists Batch inference endpoint in the workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, options?: BatchEndpointsListOptionalParams): PagedAsyncIterableIterator<BatchEndpoint>;
    /**
     * Delete Batch Inference Endpoint (asynchronous).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param endpointName Inference Endpoint name.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, workspaceName: string, endpointName: string, options?: BatchEndpointsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Delete Batch Inference Endpoint (asynchronous).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param endpointName Inference Endpoint name.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, workspaceName: string, endpointName: string, options?: BatchEndpointsDeleteOptionalParams): Promise<void>;
    /**
     * Gets a batch inference endpoint by name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param endpointName Name for the Batch Endpoint.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, endpointName: string, options?: BatchEndpointsGetOptionalParams): Promise<BatchEndpointsGetResponse>;
    /**
     * Update a batch inference endpoint (asynchronous).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param endpointName Name for the Batch inference endpoint.
     * @param body Mutable batch inference endpoint definition object.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, workspaceName: string, endpointName: string, body: PartialMinimalTrackedResourceWithIdentity, options?: BatchEndpointsUpdateOptionalParams): Promise<PollerLike<PollOperationState<BatchEndpointsUpdateResponse>, BatchEndpointsUpdateResponse>>;
    /**
     * Update a batch inference endpoint (asynchronous).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param endpointName Name for the Batch inference endpoint.
     * @param body Mutable batch inference endpoint definition object.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, workspaceName: string, endpointName: string, body: PartialMinimalTrackedResourceWithIdentity, options?: BatchEndpointsUpdateOptionalParams): Promise<BatchEndpointsUpdateResponse>;
    /**
     * Creates a batch inference endpoint (asynchronous).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param endpointName Name for the Batch inference endpoint.
     * @param body Batch inference endpoint definition object.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, workspaceName: string, endpointName: string, body: BatchEndpoint, options?: BatchEndpointsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<BatchEndpointsCreateOrUpdateResponse>, BatchEndpointsCreateOrUpdateResponse>>;
    /**
     * Creates a batch inference endpoint (asynchronous).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param endpointName Name for the Batch inference endpoint.
     * @param body Batch inference endpoint definition object.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, workspaceName: string, endpointName: string, body: BatchEndpoint, options?: BatchEndpointsCreateOrUpdateOptionalParams): Promise<BatchEndpointsCreateOrUpdateResponse>;
    /**
     * Lists batch Inference Endpoint keys.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param endpointName Inference Endpoint name.
     * @param options The options parameters.
     */
    listKeys(resourceGroupName: string, workspaceName: string, endpointName: string, options?: BatchEndpointsListKeysOptionalParams): Promise<BatchEndpointsListKeysResponse>;
}

/** Defines headers for BatchEndpoints_createOrUpdate operation. */
export declare interface BatchEndpointsCreateOrUpdateHeaders {
    /** Timeout for the client to use when polling the asynchronous operation. */
    xMsAsyncOperationTimeout?: string;
    /** URI to poll for asynchronous operation status. */
    azureAsyncOperation?: string;
}

/** Optional parameters. */
export declare interface BatchEndpointsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type BatchEndpointsCreateOrUpdateResponse = BatchEndpoint;

/** Defines headers for BatchEndpoints_delete operation. */
export declare interface BatchEndpointsDeleteHeaders {
    /** Timeout for the client to use when polling the asynchronous operation. */
    xMsAsyncOperationTimeout?: string;
    /** URI to poll for asynchronous operation result. */
    location?: string;
    /** Duration the client should wait between requests, in seconds. */
    retryAfter?: number;
}

/** Optional parameters. */
export declare interface BatchEndpointsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface BatchEndpointsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type BatchEndpointsGetResponse = BatchEndpoint;

/** Optional parameters. */
export declare interface BatchEndpointsListKeysOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listKeys operation. */
export declare type BatchEndpointsListKeysResponse = EndpointAuthKeys;

/** Optional parameters. */
export declare interface BatchEndpointsListNextOptionalParams extends coreClient.OperationOptions {
    /** Continuation token for pagination. */
    skip?: string;
    /** Number of endpoints to be retrieved in a page of results. */
    count?: number;
}

/** Contains response data for the listNext operation. */
export declare type BatchEndpointsListNextResponse = BatchEndpointTrackedResourceArmPaginatedResult;

/** Optional parameters. */
export declare interface BatchEndpointsListOptionalParams extends coreClient.OperationOptions {
    /** Continuation token for pagination. */
    skip?: string;
    /** Number of endpoints to be retrieved in a page of results. */
    count?: number;
}

/** Contains response data for the list operation. */
export declare type BatchEndpointsListResponse = BatchEndpointTrackedResourceArmPaginatedResult;

/** Defines headers for BatchEndpoints_update operation. */
export declare interface BatchEndpointsUpdateHeaders {
    /** Timeout for the client to use when polling the asynchronous operation. */
    xMsAsyncOperationTimeout?: string;
    /** URI to poll for asynchronous operation result. */
    location?: string;
    /** Duration the client should wait between requests, in seconds. */
    retryAfter?: number;
}

/** Optional parameters. */
export declare interface BatchEndpointsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type BatchEndpointsUpdateResponse = BatchEndpoint;

/** A paginated list of BatchEndpoint entities. */
export declare interface BatchEndpointTrackedResourceArmPaginatedResult {
    /** The link to the next page of BatchEndpoint objects. If null, there are no additional pages. */
    nextLink?: string;
    /** An array of objects of type BatchEndpoint. */
    value?: BatchEndpoint[];
}

/**
 * Defines values for BatchLoggingLevel. \
 * {@link KnownBatchLoggingLevel} can be used interchangeably with BatchLoggingLevel,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Info** \
 * **Warning** \
 * **Debug**
 */
export declare type BatchLoggingLevel = string;

/**
 * Defines values for BatchOutputAction. \
 * {@link KnownBatchOutputAction} can be used interchangeably with BatchOutputAction,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SummaryOnly** \
 * **AppendRow**
 */
export declare type BatchOutputAction = string;

/** Retry settings for a batch inference operation. */
export declare interface BatchRetrySettings {
    /** Maximum retry count for a mini-batch */
    maxRetries?: number;
    /** Invocation timeout for a mini-batch, in ISO 8601 format. */
    timeout?: string;
}

/** Defines a Sampling Algorithm that generates values based on previous values */
export declare interface BayesianSamplingAlgorithm extends SamplingAlgorithm {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    samplingAlgorithmType: "Bayesian";
}

/**
 * Defines values for BillingCurrency. \
 * {@link KnownBillingCurrency} can be used interchangeably with BillingCurrency,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **USD**
 */
export declare type BillingCurrency = string;

/**
 * Defines values for BlockedTransformers. \
 * {@link KnownBlockedTransformers} can be used interchangeably with BlockedTransformers,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **TextTargetEncoder**: Target encoding for text data. \
 * **OneHotEncoder**: Ohe hot encoding creates a binary feature transformation. \
 * **CatTargetEncoder**: Target encoding for categorical data. \
 * **TfIdf**: Tf-Idf stands for, term-frequency times inverse document-frequency. This is a common term weighting scheme for identifying information from documents. \
 * **WoETargetEncoder**: Weight of Evidence encoding is a technique used to encode categorical variables. It uses the natural log of the P(1)\/P(0) to create weights. \
 * **LabelEncoder**: Label encoder converts labels\/categorical variables in a numerical form. \
 * **WordEmbedding**: Word embedding helps represents words or phrases as a vector, or a series of numbers. \
 * **NaiveBayes**: Naive Bayes is a classified that is used for classification of discrete features that are categorically distributed. \
 * **CountVectorizer**: Count Vectorizer converts a collection of text documents to a matrix of token counts. \
 * **HashOneHotEncoder**: Hashing One Hot Encoder can turn categorical variables into a limited number of new features. This is often used for high-cardinality categorical features.
 */
export declare type BlockedTransformers = string;

/** Configuration settings for Docker build context */
export declare interface BuildContext {
    /**
     * [Required] URI of the Docker build context used to build the image. Supports blob URIs on environment creation and may return blob or Git URIs.
     * <seealso href="https://docs.docker.com/engine/reference/commandline/build/#extended-description" />
     */
    contextUri: string;
    /**
     * Path to the Dockerfile in the build context.
     * <seealso href="https://docs.docker.com/engine/reference/builder/" />
     */
    dockerfilePath?: string;
}

/**
 * Defines values for Caching. \
 * {@link KnownCaching} can be used interchangeably with Caching,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **ReadOnly** \
 * **ReadWrite**
 */
export declare type Caching = string;

/** Certificate datastore credentials configuration. */
export declare interface CertificateDatastoreCredentials extends DatastoreCredentials {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    credentialsType: "Certificate";
    /** Authority URL used for authentication. */
    authorityUrl?: string;
    /** [Required] Service principal client ID. */
    clientId: string;
    /** Resource the service principal has access to. */
    resourceUrl?: string;
    /** [Required] Service principal secrets. */
    secrets: CertificateDatastoreSecrets;
    /** [Required] ID of the tenant to which the service principal belongs. */
    tenantId: string;
    /** [Required] Thumbprint of the certificate used for authentication. */
    thumbprint: string;
}

/** Datastore certificate secrets. */
export declare interface CertificateDatastoreSecrets extends DatastoreSecrets {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    secretsType: "Certificate";
    /** Service principal certificate. */
    certificate?: string;
}

/** Classification task in AutoML Table vertical. */
export declare interface Classification extends TableVertical, AutoMLVertical {
    /** Positive label for binary metrics calculation. */
    positiveLabel?: string;
    /** Primary metric for the task. */
    primaryMetric?: ClassificationPrimaryMetrics;
    /** Inputs for training phase for an AutoML Job. */
    trainingSettings?: ClassificationTrainingSettings;
}

/**
 * Defines values for ClassificationModels. \
 * {@link KnownClassificationModels} can be used interchangeably with ClassificationModels,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **LogisticRegression**: Logistic regression is a fundamental classification technique.
 * It belongs to the group of linear classifiers and is somewhat similar to polynomial and linear regression.
 * Logistic regression is fast and relatively uncomplicated, and it's convenient for you to interpret the results.
 * Although it's essentially a method for binary classification, it can also be applied to multiclass problems. \
 * **SGD**: SGD: Stochastic gradient descent is an optimization algorithm often used in machine learning applications
 * to find the model parameters that correspond to the best fit between predicted and actual outputs. \
 * **MultinomialNaiveBayes**: The multinomial Naive Bayes classifier is suitable for classification with discrete features (e.g., word counts for text classification).
 * The multinomial distribution normally requires integer feature counts. However, in practice, fractional counts such as tf-idf may also work. \
 * **BernoulliNaiveBayes**: Naive Bayes classifier for multivariate Bernoulli models. \
 * **SVM**: A support vector machine (SVM) is a supervised machine learning model that uses classification algorithms for two-group classification problems.
 * After giving an SVM model sets of labeled training data for each category, they're able to categorize new text. \
 * **LinearSVM**: A support vector machine (SVM) is a supervised machine learning model that uses classification algorithms for two-group classification problems.
 * After giving an SVM model sets of labeled training data for each category, they're able to categorize new text.
 * Linear SVM performs best when input data is linear, i.e., data can be easily classified by drawing the straight line between classified values on a plotted graph. \
 * **KNN**: K-nearest neighbors (KNN) algorithm uses 'feature similarity' to predict the values of new datapoints
 * which further means that the new data point will be assigned a value based on how closely it matches the points in the training set. \
 * **DecisionTree**: Decision Trees are a non-parametric supervised learning method used for both classification and regression tasks.
 * The goal is to create a model that predicts the value of a target variable by learning simple decision rules inferred from the data features. \
 * **RandomForest**: Random forest is a supervised learning algorithm.
 * The "forest" it builds, is an ensemble of decision trees, usually trained with the “bagging” method.
 * The general idea of the bagging method is that a combination of learning models increases the overall result. \
 * **ExtremeRandomTrees**: Extreme Trees is an ensemble machine learning algorithm that combines the predictions from many decision trees. It is related to the widely used random forest algorithm. \
 * **LightGBM**: LightGBM is a gradient boosting framework that uses tree based learning algorithms. \
 * **GradientBoosting**: The technique of transiting week learners into a strong learner is called Boosting. The gradient boosting algorithm process works on this theory of execution. \
 * **XGBoostClassifier**: XGBoost: Extreme Gradient Boosting Algorithm. This algorithm is used for structured data where target column values can be divided into distinct class values.
 */
export declare type ClassificationModels = string;

/**
 * Defines values for ClassificationMultilabelPrimaryMetrics. \
 * {@link KnownClassificationMultilabelPrimaryMetrics} can be used interchangeably with ClassificationMultilabelPrimaryMetrics,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AUCWeighted**: AUC is the Area under the curve.
 * This metric represents arithmetic mean of the score for each class,
 * weighted by the number of true instances in each class. \
 * **Accuracy**: Accuracy is the ratio of predictions that exactly match the true class labels. \
 * **NormMacroRecall**: Normalized macro recall is recall macro-averaged and normalized, so that random
 * performance has a score of 0, and perfect performance has a score of 1. \
 * **AveragePrecisionScoreWeighted**: The arithmetic mean of the average precision score for each class, weighted by
 * the number of true instances in each class. \
 * **PrecisionScoreWeighted**: The arithmetic mean of precision for each class, weighted by number of true instances in each class. \
 * **IOU**: Intersection Over Union. Intersection of predictions divided by union of predictions.
 */
export declare type ClassificationMultilabelPrimaryMetrics = string;

/**
 * Defines values for ClassificationPrimaryMetrics. \
 * {@link KnownClassificationPrimaryMetrics} can be used interchangeably with ClassificationPrimaryMetrics,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AUCWeighted**: AUC is the Area under the curve.
 * This metric represents arithmetic mean of the score for each class,
 * weighted by the number of true instances in each class. \
 * **Accuracy**: Accuracy is the ratio of predictions that exactly match the true class labels. \
 * **NormMacroRecall**: Normalized macro recall is recall macro-averaged and normalized, so that random
 * performance has a score of 0, and perfect performance has a score of 1. \
 * **AveragePrecisionScoreWeighted**: The arithmetic mean of the average precision score for each class, weighted by
 * the number of true instances in each class. \
 * **PrecisionScoreWeighted**: The arithmetic mean of precision for each class, weighted by number of true instances in each class.
 */
export declare type ClassificationPrimaryMetrics = string;

/** Classification Training related configuration. */
export declare interface ClassificationTrainingSettings extends TrainingSettings {
    /** Allowed models for classification task. */
    allowedTrainingAlgorithms?: ClassificationModels[];
    /** Blocked models for classification task. */
    blockedTrainingAlgorithms?: ClassificationModels[];
}

/**
 * Defines values for ClusterPurpose. \
 * {@link KnownClusterPurpose} can be used interchangeably with ClusterPurpose,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **FastProd** \
 * **DenseProd** \
 * **DevTest**
 */
export declare type ClusterPurpose = string;

/** AmlCompute update parameters. */
export declare interface ClusterUpdateParameters {
    /** Properties of ClusterUpdate */
    properties?: ScaleSettingsInformation;
}

/** Configuration for a scoring code asset. */
export declare interface CodeConfiguration {
    /** ARM resource ID of the code asset. */
    codeId?: string;
    /** [Required] The script to execute on startup. eg. "score.py" */
    scoringScript: string;
}

/** Azure Resource Manager resource envelope. */
export declare interface CodeContainer extends Resource {
    /** [Required] Additional attributes of the entity. */
    properties: CodeContainerProperties;
}

/** Container for code asset versions. */
export declare interface CodeContainerProperties extends AssetContainer {
}

/** A paginated list of CodeContainer entities. */
export declare interface CodeContainerResourceArmPaginatedResult {
    /** The link to the next page of CodeContainer objects. If null, there are no additional pages. */
    nextLink?: string;
    /** An array of objects of type CodeContainer. */
    value?: CodeContainer[];
}

/** Interface representing a CodeContainers. */
export declare interface CodeContainers {
    /**
     * List containers.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, options?: CodeContainersListOptionalParams): PagedAsyncIterableIterator<CodeContainer>;
    /**
     * Delete container.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param name Container name. This is case-sensitive.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, workspaceName: string, name: string, options?: CodeContainersDeleteOptionalParams): Promise<void>;
    /**
     * Get container.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param name Container name. This is case-sensitive.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, name: string, options?: CodeContainersGetOptionalParams): Promise<CodeContainersGetResponse>;
    /**
     * Create or update container.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param name Container name. This is case-sensitive.
     * @param body Container entity to create or update.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, workspaceName: string, name: string, body: CodeContainer, options?: CodeContainersCreateOrUpdateOptionalParams): Promise<CodeContainersCreateOrUpdateResponse>;
}

/** Optional parameters. */
export declare interface CodeContainersCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type CodeContainersCreateOrUpdateResponse = CodeContainer;

/** Optional parameters. */
export declare interface CodeContainersDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface CodeContainersGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type CodeContainersGetResponse = CodeContainer;

/** Optional parameters. */
export declare interface CodeContainersListNextOptionalParams extends coreClient.OperationOptions {
    /** Continuation token for pagination. */
    skip?: string;
}

/** Contains response data for the listNext operation. */
export declare type CodeContainersListNextResponse = CodeContainerResourceArmPaginatedResult;

/** Optional parameters. */
export declare interface CodeContainersListOptionalParams extends coreClient.OperationOptions {
    /** Continuation token for pagination. */
    skip?: string;
}

/** Contains response data for the list operation. */
export declare type CodeContainersListResponse = CodeContainerResourceArmPaginatedResult;

/** Azure Resource Manager resource envelope. */
export declare interface CodeVersion extends Resource {
    /** [Required] Additional attributes of the entity. */
    properties: CodeVersionProperties;
}

/** Code asset version details. */
export declare interface CodeVersionProperties extends AssetBase {
    /** Uri where code is located */
    codeUri?: string;
}

/** A paginated list of CodeVersion entities. */
export declare interface CodeVersionResourceArmPaginatedResult {
    /** The link to the next page of CodeVersion objects. If null, there are no additional pages. */
    nextLink?: string;
    /** An array of objects of type CodeVersion. */
    value?: CodeVersion[];
}

/** Interface representing a CodeVersions. */
export declare interface CodeVersions {
    /**
     * List versions.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param name Container name. This is case-sensitive.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, name: string, options?: CodeVersionsListOptionalParams): PagedAsyncIterableIterator<CodeVersion>;
    /**
     * Delete version.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param name Container name. This is case-sensitive.
     * @param version Version identifier. This is case-sensitive.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, workspaceName: string, name: string, version: string, options?: CodeVersionsDeleteOptionalParams): Promise<void>;
    /**
     * Get version.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param name Container name. This is case-sensitive.
     * @param version Version identifier. This is case-sensitive.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, name: string, version: string, options?: CodeVersionsGetOptionalParams): Promise<CodeVersionsGetResponse>;
    /**
     * Create or update version.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param name Container name. This is case-sensitive.
     * @param version Version identifier. This is case-sensitive.
     * @param body Version entity to create or update.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, workspaceName: string, name: string, version: string, body: CodeVersion, options?: CodeVersionsCreateOrUpdateOptionalParams): Promise<CodeVersionsCreateOrUpdateResponse>;
}

/** Optional parameters. */
export declare interface CodeVersionsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type CodeVersionsCreateOrUpdateResponse = CodeVersion;

/** Optional parameters. */
export declare interface CodeVersionsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface CodeVersionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type CodeVersionsGetResponse = CodeVersion;

/** Optional parameters. */
export declare interface CodeVersionsListNextOptionalParams extends coreClient.OperationOptions {
    /** Continuation token for pagination. */
    skip?: string;
    /** Ordering of list. */
    orderBy?: string;
    /** Maximum number of records to return. */
    top?: number;
}

/** Contains response data for the listNext operation. */
export declare type CodeVersionsListNextResponse = CodeVersionResourceArmPaginatedResult;

/** Optional parameters. */
export declare interface CodeVersionsListOptionalParams extends coreClient.OperationOptions {
    /** Continuation token for pagination. */
    skip?: string;
    /** Ordering of list. */
    orderBy?: string;
    /** Maximum number of records to return. */
    top?: number;
}

/** Contains response data for the list operation. */
export declare type CodeVersionsListResponse = CodeVersionResourceArmPaginatedResult;

/** Column transformer parameters. */
export declare interface ColumnTransformer {
    /** Fields to apply transformer logic on. */
    fields?: string[];
    /**
     * Different properties to be passed to transformer.
     * Input expected is dictionary of key,value pairs in JSON format.
     */
    parameters?: Record<string, unknown>;
}

/** Command job definition. */
export declare interface CommandJob extends JobBaseProperties {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    jobType: "Command";
    /** ARM resource ID of the code asset. */
    codeId?: string;
    /** [Required] The command to execute on startup of the job. eg. "python train.py" */
    command: string;
    /** Distribution configuration of the job. If set, this should be one of Mpi, Tensorflow, PyTorch, or null. */
    distribution?: DistributionConfigurationUnion;
    /** [Required] The ARM resource ID of the Environment specification for the job. */
    environmentId: string;
    /** Environment variables included in the job. */
    environmentVariables?: {
        [propertyName: string]: string | null;
    };
    /** Mapping of input data bindings used in the job. */
    inputs?: {
        [propertyName: string]: JobInputUnion | null;
    };
    /** Command Job limit. */
    limits?: CommandJobLimits;
    /** Mapping of output data bindings used in the job. */
    outputs?: {
        [propertyName: string]: JobOutputUnion | null;
    };
    /**
     * Input parameters.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly parameters?: Record<string, unknown>;
    /** Compute Resource configuration for the job. */
    resources?: JobResourceConfiguration;
}

/** Command Job limit class. */
export declare interface CommandJobLimits extends JobLimits {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    jobLimitsType: "Command";
}

/** Azure Resource Manager resource envelope. */
export declare interface ComponentContainer extends Resource {
    /** [Required] Additional attributes of the entity. */
    properties: ComponentContainerProperties;
}

/**
 * Component container definition.
 * <see href="https://docs.microsoft.com/en-us/azure/machine-learning/reference-yaml-component-command" />
 */
export declare interface ComponentContainerProperties extends AssetContainer {
}

/** A paginated list of ComponentContainer entities. */
export declare interface ComponentContainerResourceArmPaginatedResult {
    /** The link to the next page of ComponentContainer objects. If null, there are no additional pages. */
    nextLink?: string;
    /** An array of objects of type ComponentContainer. */
    value?: ComponentContainer[];
}

/** Interface representing a ComponentContainers. */
export declare interface ComponentContainers {
    /**
     * List component containers.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, options?: ComponentContainersListOptionalParams): PagedAsyncIterableIterator<ComponentContainer>;
    /**
     * Delete container.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param name Container name.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, workspaceName: string, name: string, options?: ComponentContainersDeleteOptionalParams): Promise<void>;
    /**
     * Get container.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param name Container name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, name: string, options?: ComponentContainersGetOptionalParams): Promise<ComponentContainersGetResponse>;
    /**
     * Create or update container.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param name Container name.
     * @param body Container entity to create or update.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, workspaceName: string, name: string, body: ComponentContainer, options?: ComponentContainersCreateOrUpdateOptionalParams): Promise<ComponentContainersCreateOrUpdateResponse>;
}

/** Optional parameters. */
export declare interface ComponentContainersCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type ComponentContainersCreateOrUpdateResponse = ComponentContainer;

/** Optional parameters. */
export declare interface ComponentContainersDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface ComponentContainersGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ComponentContainersGetResponse = ComponentContainer;

/** Optional parameters. */
export declare interface ComponentContainersListNextOptionalParams extends coreClient.OperationOptions {
    /** Continuation token for pagination. */
    skip?: string;
    /** View type for including/excluding (for example) archived entities. */
    listViewType?: ListViewType;
}

/** Contains response data for the listNext operation. */
export declare type ComponentContainersListNextResponse = ComponentContainerResourceArmPaginatedResult;

/** Optional parameters. */
export declare interface ComponentContainersListOptionalParams extends coreClient.OperationOptions {
    /** Continuation token for pagination. */
    skip?: string;
    /** View type for including/excluding (for example) archived entities. */
    listViewType?: ListViewType;
}

/** Contains response data for the list operation. */
export declare type ComponentContainersListResponse = ComponentContainerResourceArmPaginatedResult;

/** Azure Resource Manager resource envelope. */
export declare interface ComponentVersion extends Resource {
    /** [Required] Additional attributes of the entity. */
    properties: ComponentVersionProperties;
}

/** Definition of a component version: defines resources that span component types. */
export declare interface ComponentVersionProperties extends AssetBase {
    /**
     * Defines Component definition details.
     * <see href="https://docs.microsoft.com/en-us/azure/machine-learning/reference-yaml-component-command" />
     */
    componentSpec?: Record<string, unknown>;
}

/** A paginated list of ComponentVersion entities. */
export declare interface ComponentVersionResourceArmPaginatedResult {
    /** The link to the next page of ComponentVersion objects. If null, there are no additional pages. */
    nextLink?: string;
    /** An array of objects of type ComponentVersion. */
    value?: ComponentVersion[];
}

/** Interface representing a ComponentVersions. */
export declare interface ComponentVersions {
    /**
     * List component versions.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param name Component name.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, name: string, options?: ComponentVersionsListOptionalParams): PagedAsyncIterableIterator<ComponentVersion>;
    /**
     * Delete version.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param name Container name.
     * @param version Version identifier.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, workspaceName: string, name: string, version: string, options?: ComponentVersionsDeleteOptionalParams): Promise<void>;
    /**
     * Get version.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param name Container name.
     * @param version Version identifier.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, name: string, version: string, options?: ComponentVersionsGetOptionalParams): Promise<ComponentVersionsGetResponse>;
    /**
     * Create or update version.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param name Container name.
     * @param version Version identifier.
     * @param body Version entity to create or update.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, workspaceName: string, name: string, version: string, body: ComponentVersion, options?: ComponentVersionsCreateOrUpdateOptionalParams): Promise<ComponentVersionsCreateOrUpdateResponse>;
}

/** Optional parameters. */
export declare interface ComponentVersionsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type ComponentVersionsCreateOrUpdateResponse = ComponentVersion;

/** Optional parameters. */
export declare interface ComponentVersionsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface ComponentVersionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ComponentVersionsGetResponse = ComponentVersion;

/** Optional parameters. */
export declare interface ComponentVersionsListNextOptionalParams extends coreClient.OperationOptions {
    /** Continuation token for pagination. */
    skip?: string;
    /** Ordering of list. */
    orderBy?: string;
    /** Maximum number of records to return. */
    top?: number;
    /** View type for including/excluding (for example) archived entities. */
    listViewType?: ListViewType;
}

/** Contains response data for the listNext operation. */
export declare type ComponentVersionsListNextResponse = ComponentVersionResourceArmPaginatedResult;

/** Optional parameters. */
export declare interface ComponentVersionsListOptionalParams extends coreClient.OperationOptions {
    /** Continuation token for pagination. */
    skip?: string;
    /** Ordering of list. */
    orderBy?: string;
    /** Maximum number of records to return. */
    top?: number;
    /** View type for including/excluding (for example) archived entities. */
    listViewType?: ListViewType;
}

/** Contains response data for the list operation. */
export declare type ComponentVersionsListResponse = ComponentVersionResourceArmPaginatedResult;

/** Machine Learning compute object. */
export declare interface Compute {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    computeType: "AKS" | "Kubernetes" | "AmlCompute" | "ComputeInstance" | "VirtualMachine" | "HDInsight" | "DataFactory" | "Databricks" | "DataLakeAnalytics" | "SynapseSpark";
    /** Location for the underlying compute */
    computeLocation?: string;
    /**
     * The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /** The description of the Machine Learning compute. */
    description?: string;
    /**
     * The time at which the compute was created.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdOn?: Date;
    /**
     * The time at which the compute was last modified.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly modifiedOn?: Date;
    /** ARM resource id of the underlying compute */
    resourceId?: string;
    /**
     * Errors during provisioning
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningErrors?: ErrorResponse[];
    /**
     * Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isAttachedCompute?: boolean;
    /** Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication. */
    disableLocalAuth?: boolean;
}

/** Defines headers for Compute_createOrUpdate operation. */
export declare interface ComputeCreateOrUpdateHeaders {
    /** URI to poll for asynchronous operation status. */
    azureAsyncOperation?: string;
}

/** Optional parameters. */
export declare interface ComputeCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type ComputeCreateOrUpdateResponse = ComputeResource;

/** Defines headers for Compute_delete operation. */
export declare interface ComputeDeleteHeaders {
    /** URI to poll for asynchronous operation status. */
    azureAsyncOperation?: string;
    /** URI to poll for asynchronous operation result. */
    location?: string;
}

/** Optional parameters. */
export declare interface ComputeDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface ComputeGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ComputeGetResponse = ComputeResource;

/** An Azure Machine Learning compute instance. */
export declare interface ComputeInstance extends Compute, ComputeInstanceSchema {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    computeType: "ComputeInstance";
}

/** Defines an Aml Instance application and its connectivity endpoint URI. */
export declare interface ComputeInstanceApplication {
    /** Name of the ComputeInstance application. */
    displayName?: string;
    /** Application' endpoint URI. */
    endpointUri?: string;
}

/**
 * Defines values for ComputeInstanceAuthorizationType. \
 * {@link KnownComputeInstanceAuthorizationType} can be used interchangeably with ComputeInstanceAuthorizationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **personal**
 */
export declare type ComputeInstanceAuthorizationType = string;

/** Defines all connectivity endpoints and properties for an ComputeInstance. */
export declare interface ComputeInstanceConnectivityEndpoints {
    /**
     * Public IP Address of this ComputeInstance.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly publicIpAddress?: string;
    /**
     * Private IP Address of this ComputeInstance (local to the VNET in which the compute instance is deployed).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly privateIpAddress?: string;
}

/** Defines an Aml Instance container. */
export declare interface ComputeInstanceContainer {
    /** Name of the ComputeInstance container. */
    name?: string;
    /** Auto save settings. */
    autosave?: Autosave;
    /** Information of GPU. */
    gpu?: string;
    /** network of this container. */
    network?: Network;
    /** Environment information of this container. */
    environment?: ComputeInstanceEnvironmentInfo;
    /**
     * services of this containers.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly services?: Record<string, unknown>[];
}

/** Describes information on user who created this ComputeInstance. */
export declare interface ComputeInstanceCreatedBy {
    /**
     * Name of the user.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly userName?: string;
    /**
     * Uniquely identifies user' Azure Active Directory organization.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly userOrgId?: string;
    /**
     * Uniquely identifies the user within his/her organization.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly userId?: string;
}

/** Defines an Aml Instance DataDisk. */
export declare interface ComputeInstanceDataDisk {
    /** Caching type of Data Disk. */
    caching?: Caching;
    /** The initial disk size in gigabytes. */
    diskSizeGB?: number;
    /** The lun is used to uniquely identify each data disk. If attaching multiple disks, each should have a distinct lun. */
    lun?: number;
    /** type of this storage account. */
    storageAccountType?: StorageAccountType;
}

/** Defines an Aml Instance DataMount. */
export declare interface ComputeInstanceDataMount {
    /** Source of the ComputeInstance data mount. */
    source?: string;
    /** Data source type. */
    sourceType?: SourceType;
    /** name of the ComputeInstance data mount. */
    mountName?: string;
    /** Mount Action. */
    mountAction?: MountAction;
    /** who this data mount created by. */
    createdBy?: string;
    /** Path of this data mount. */
    mountPath?: string;
    /** Mount state. */
    mountState?: MountState;
    /** The time when the disk mounted. */
    mountedOn?: Date;
    /** Error of this data mount. */
    error?: string;
}

/** Environment information */
export declare interface ComputeInstanceEnvironmentInfo {
    /** name of environment. */
    name?: string;
    /** version of environment. */
    version?: string;
}

/** The last operation on ComputeInstance. */
export declare interface ComputeInstanceLastOperation {
    /** Name of the last operation. */
    operationName?: OperationName;
    /** Time of the last operation. */
    operationTime?: Date;
    /** Operation status. */
    operationStatus?: OperationStatus;
    /** Trigger of operation. */
    operationTrigger?: OperationTrigger;
}

/** Compute Instance properties */
export declare interface ComputeInstanceProperties {
    /** Virtual Machine Size */
    vmSize?: string;
    /** Virtual network subnet resource ID the compute nodes belong to. */
    subnet?: ResourceId;
    /** Policy for sharing applications on this compute instance among users of parent workspace. If Personal, only the creator can access applications on this compute instance. When Shared, any workspace user can access applications on this instance depending on his/her assigned role. */
    applicationSharingPolicy?: ApplicationSharingPolicy;
    /** Specifies policy and settings for SSH access. */
    sshSettings?: ComputeInstanceSshSettings;
    /**
     * Describes all connectivity endpoints available for this ComputeInstance.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly connectivityEndpoints?: ComputeInstanceConnectivityEndpoints;
    /**
     * Describes available applications and their endpoints on this ComputeInstance.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly applications?: ComputeInstanceApplication[];
    /**
     * Describes information on user who created this ComputeInstance.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdBy?: ComputeInstanceCreatedBy;
    /**
     * Collection of errors encountered on this ComputeInstance.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly errors?: ErrorResponse[];
    /**
     * The current state of this ComputeInstance.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly state?: ComputeInstanceState;
    /** The Compute Instance Authorization type. Available values are personal (default). */
    computeInstanceAuthorizationType?: ComputeInstanceAuthorizationType;
    /** Settings for a personal compute instance. */
    personalComputeInstanceSettings?: PersonalComputeInstanceSettings;
    /** Details of customized scripts to execute for setting up the cluster. */
    setupScripts?: SetupScripts;
    /**
     * The last operation on ComputeInstance.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastOperation?: ComputeInstanceLastOperation;
    /**
     * The list of schedules to be applied on the computes.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly schedules?: ComputeSchedules;
    /** Enable or disable node public IP address provisioning. Possible values are: Possible values are: true - Indicates that the compute nodes will have public IPs provisioned. false - Indicates that the compute nodes will have a private endpoint and no public IPs. */
    enableNodePublicIp?: boolean;
    /**
     * Describes informations of containers on this ComputeInstance.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly containers?: ComputeInstanceContainer[];
    /**
     * Describes informations of dataDisks on this ComputeInstance.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dataDisks?: ComputeInstanceDataDisk[];
    /**
     * Describes informations of dataMounts on this ComputeInstance.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dataMounts?: ComputeInstanceDataMount[];
    /**
     * ComputeInstance version.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly versions?: ComputeInstanceVersion;
}

/** Properties(top level) of ComputeInstance */
export declare interface ComputeInstanceSchema {
    /** Properties of ComputeInstance */
    properties?: ComputeInstanceProperties;
}

/** Specifies policy and settings for SSH access. */
export declare interface ComputeInstanceSshSettings {
    /** State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh port is closed on this instance. Enabled - Indicates that the public ssh port is open and accessible according to the VNet/subnet policy if applicable. */
    sshPublicAccess?: SshPublicAccess;
    /**
     * Describes the admin user name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly adminUserName?: string;
    /**
     * Describes the port for connecting through SSH.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly sshPort?: number;
    /** Specifies the SSH rsa public key file as a string. Use "ssh-keygen -t rsa -b 2048" to generate your SSH key pairs. */
    adminPublicKey?: string;
}

/**
 * Defines values for ComputeInstanceState. \
 * {@link KnownComputeInstanceState} can be used interchangeably with ComputeInstanceState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **CreateFailed** \
 * **Deleting** \
 * **Running** \
 * **Restarting** \
 * **JobRunning** \
 * **SettingUp** \
 * **SetupFailed** \
 * **Starting** \
 * **Stopped** \
 * **Stopping** \
 * **UserSettingUp** \
 * **UserSetupFailed** \
 * **Unknown** \
 * **Unusable**
 */
export declare type ComputeInstanceState = string;

/** Version of computeInstance. */
export declare interface ComputeInstanceVersion {
    /** Runtime of compute instance. */
    runtime?: string;
}

/** Optional parameters. */
export declare interface ComputeListKeysOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listKeys operation. */
export declare type ComputeListKeysResponse = ComputeSecretsUnion;

/** Optional parameters. */
export declare interface ComputeListNextOptionalParams extends coreClient.OperationOptions {
    /** Continuation token for pagination. */
    skip?: string;
}

/** Contains response data for the listNext operation. */
export declare type ComputeListNextResponse = PaginatedComputeResourcesList;

/** Optional parameters. */
export declare interface ComputeListNodesNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNodesNext operation. */
export declare type ComputeListNodesNextResponse = AmlComputeNodesInformation;

/** Optional parameters. */
export declare interface ComputeListNodesOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNodes operation. */
export declare type ComputeListNodesResponse = AmlComputeNodesInformation;

/** Optional parameters. */
export declare interface ComputeListOptionalParams extends coreClient.OperationOptions {
    /** Continuation token for pagination. */
    skip?: string;
}

/** Contains response data for the list operation. */
export declare type ComputeListResponse = PaginatedComputeResourcesList;

/** Interface representing a ComputeOperations. */
export declare interface ComputeOperations {
    /**
     * Gets computes in specified workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, options?: ComputeListOptionalParams): PagedAsyncIterableIterator<ComputeResource>;
    /**
     * Get the details (e.g IP address, port etc) of all the compute nodes in the compute.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param computeName Name of the Azure Machine Learning compute.
     * @param options The options parameters.
     */
    listNodes(resourceGroupName: string, workspaceName: string, computeName: string, options?: ComputeListNodesOptionalParams): PagedAsyncIterableIterator<AmlComputeNodeInformation>;
    /**
     * Gets compute definition by its name. Any secrets (storage keys, service credentials, etc) are not
     * returned - use 'keys' nested resource to get them.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param computeName Name of the Azure Machine Learning compute.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, computeName: string, options?: ComputeGetOptionalParams): Promise<ComputeGetResponse>;
    /**
     * Creates or updates compute. This call will overwrite a compute if it exists. This is a
     * nonrecoverable operation. If your intent is to create a new compute, do a GET first to verify that
     * it does not exist yet.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param computeName Name of the Azure Machine Learning compute.
     * @param parameters Payload with Machine Learning compute definition.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, workspaceName: string, computeName: string, parameters: ComputeResource, options?: ComputeCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<ComputeCreateOrUpdateResponse>, ComputeCreateOrUpdateResponse>>;
    /**
     * Creates or updates compute. This call will overwrite a compute if it exists. This is a
     * nonrecoverable operation. If your intent is to create a new compute, do a GET first to verify that
     * it does not exist yet.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param computeName Name of the Azure Machine Learning compute.
     * @param parameters Payload with Machine Learning compute definition.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, workspaceName: string, computeName: string, parameters: ComputeResource, options?: ComputeCreateOrUpdateOptionalParams): Promise<ComputeCreateOrUpdateResponse>;
    /**
     * Updates properties of a compute. This call will overwrite a compute if it exists. This is a
     * nonrecoverable operation.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param computeName Name of the Azure Machine Learning compute.
     * @param parameters Additional parameters for cluster update.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, workspaceName: string, computeName: string, parameters: ClusterUpdateParameters, options?: ComputeUpdateOptionalParams): Promise<PollerLike<PollOperationState<ComputeUpdateResponse>, ComputeUpdateResponse>>;
    /**
     * Updates properties of a compute. This call will overwrite a compute if it exists. This is a
     * nonrecoverable operation.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param computeName Name of the Azure Machine Learning compute.
     * @param parameters Additional parameters for cluster update.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, workspaceName: string, computeName: string, parameters: ClusterUpdateParameters, options?: ComputeUpdateOptionalParams): Promise<ComputeUpdateResponse>;
    /**
     * Deletes specified Machine Learning compute.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param computeName Name of the Azure Machine Learning compute.
     * @param underlyingResourceAction Delete the underlying compute if 'Delete', or detach the underlying
     *                                 compute from workspace if 'Detach'.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, workspaceName: string, computeName: string, underlyingResourceAction: UnderlyingResourceAction, options?: ComputeDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes specified Machine Learning compute.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param computeName Name of the Azure Machine Learning compute.
     * @param underlyingResourceAction Delete the underlying compute if 'Delete', or detach the underlying
     *                                 compute from workspace if 'Detach'.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, workspaceName: string, computeName: string, underlyingResourceAction: UnderlyingResourceAction, options?: ComputeDeleteOptionalParams): Promise<void>;
    /**
     * Gets secrets related to Machine Learning compute (storage keys, service credentials, etc).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param computeName Name of the Azure Machine Learning compute.
     * @param options The options parameters.
     */
    listKeys(resourceGroupName: string, workspaceName: string, computeName: string, options?: ComputeListKeysOptionalParams): Promise<ComputeListKeysResponse>;
    /**
     * Posts a start action to a compute instance
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param computeName Name of the Azure Machine Learning compute.
     * @param options The options parameters.
     */
    beginStart(resourceGroupName: string, workspaceName: string, computeName: string, options?: ComputeStartOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Posts a start action to a compute instance
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param computeName Name of the Azure Machine Learning compute.
     * @param options The options parameters.
     */
    beginStartAndWait(resourceGroupName: string, workspaceName: string, computeName: string, options?: ComputeStartOptionalParams): Promise<void>;
    /**
     * Posts a stop action to a compute instance
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param computeName Name of the Azure Machine Learning compute.
     * @param options The options parameters.
     */
    beginStop(resourceGroupName: string, workspaceName: string, computeName: string, options?: ComputeStopOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Posts a stop action to a compute instance
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param computeName Name of the Azure Machine Learning compute.
     * @param options The options parameters.
     */
    beginStopAndWait(resourceGroupName: string, workspaceName: string, computeName: string, options?: ComputeStopOptionalParams): Promise<void>;
    /**
     * Posts a restart action to a compute instance
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param computeName Name of the Azure Machine Learning compute.
     * @param options The options parameters.
     */
    beginRestart(resourceGroupName: string, workspaceName: string, computeName: string, options?: ComputeRestartOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Posts a restart action to a compute instance
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param computeName Name of the Azure Machine Learning compute.
     * @param options The options parameters.
     */
    beginRestartAndWait(resourceGroupName: string, workspaceName: string, computeName: string, options?: ComputeRestartOptionalParams): Promise<void>;
}

/**
 * Defines values for ComputePowerAction. \
 * {@link KnownComputePowerAction} can be used interchangeably with ComputePowerAction,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Start** \
 * **Stop**
 */
export declare type ComputePowerAction = string;

/** Machine Learning compute object wrapped into ARM resource envelope. */
export declare interface ComputeResource extends Resource, ComputeResourceSchema {
    /** The identity of the resource. */
    identity?: ManagedServiceIdentity;
    /** Specifies the location of the resource. */
    location?: string;
    /** Contains resource tags defined as key/value pairs. */
    tags?: {
        [propertyName: string]: string;
    };
    /** The sku of the workspace. */
    sku?: Sku;
}

export declare interface ComputeResourceSchema {
    /** Compute properties */
    properties?: ComputeUnion;
}

/** Optional parameters. */
export declare interface ComputeRestartOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** The list of schedules to be applied on the computes */
export declare interface ComputeSchedules {
    /** The list of compute start stop schedules to be applied. */
    computeStartStop?: ComputeStartStopSchedule[];
}

/** Secrets related to a Machine Learning compute. Might differ for every type of compute. */
export declare interface ComputeSecrets {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    computeType: "AKS" | "VirtualMachine" | "Databricks";
}

export declare type ComputeSecretsUnion = ComputeSecrets | AksComputeSecrets | VirtualMachineSecrets | DatabricksComputeSecrets;

/** Optional parameters. */
export declare interface ComputeStartOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Compute start stop schedule properties */
export declare interface ComputeStartStopSchedule {
    /**
     * A system assigned id for the schedule.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The current deployment state of schedule.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningStatus?: ProvisioningStatus;
    /** Is the schedule enabled or disabled? */
    status?: ScheduleStatus;
    /** [Required] The compute power action. */
    action?: ComputePowerAction;
    /** [Required] The schedule trigger type. */
    triggerType?: TriggerType;
    /** Required if triggerType is Recurrence. */
    recurrence?: RecurrenceTrigger;
    /** Required if triggerType is Cron. */
    cron?: CronTrigger;
    /** [Deprecated] Not used any more. */
    schedule?: ScheduleBase;
}

/** Optional parameters. */
export declare interface ComputeStopOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/**
 * Defines values for ComputeType. \
 * {@link KnownComputeType} can be used interchangeably with ComputeType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AKS** \
 * **Kubernetes** \
 * **AmlCompute** \
 * **ComputeInstance** \
 * **DataFactory** \
 * **VirtualMachine** \
 * **HDInsight** \
 * **Databricks** \
 * **DataLakeAnalytics** \
 * **SynapseSpark**
 */
export declare type ComputeType = string;

export declare type ComputeUnion = Compute | Aks | Kubernetes | AmlCompute | ComputeInstance | VirtualMachine | HDInsight | DataFactory | Databricks | DataLakeAnalytics | SynapseSpark;

/** Optional parameters. */
export declare interface ComputeUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type ComputeUpdateResponse = ComputeResource;

/**
 * Defines values for ConnectionAuthType. \
 * {@link KnownConnectionAuthType} can be used interchangeably with ConnectionAuthType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **PAT** \
 * **ManagedIdentity** \
 * **UsernamePassword** \
 * **None** \
 * **SAS**
 */
export declare type ConnectionAuthType = string;

/**
 * Defines values for ConnectionCategory. \
 * {@link KnownConnectionCategory} can be used interchangeably with ConnectionCategory,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **PythonFeed** \
 * **ContainerRegistry** \
 * **Git**
 */
export declare type ConnectionCategory = string;

/** Resource requirements for each container instance within an online deployment. */
export declare interface ContainerResourceRequirements {
    /** Container resource limit info: */
    containerResourceLimits?: ContainerResourceSettings;
    /** Container resource request info: */
    containerResourceRequests?: ContainerResourceSettings;
}

export declare interface ContainerResourceSettings {
    /**
     * Number of vCPUs request/limit for container. More info:
     * https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
     */
    cpu?: string;
    /**
     * Number of Nvidia GPU cards request/limit for container. More info:
     * https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
     */
    gpu?: string;
    /**
     * Memory size request/limit for container. More info:
     * https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
     */
    memory?: string;
}

/**
 * Defines values for ContainerType. \
 * {@link KnownContainerType} can be used interchangeably with ContainerType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **StorageInitializer** \
 * **InferenceServer**
 */
export declare type ContainerType = string;

export declare interface CosmosDbSettings {
    /** The throughput of the collections in cosmosdb database */
    collectionsThroughput?: number;
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export declare type CreatedByType = string;

/**
 * Defines values for CredentialsType. \
 * {@link KnownCredentialsType} can be used interchangeably with CredentialsType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AccountKey** \
 * **Certificate** \
 * **None** \
 * **Sas** \
 * **ServicePrincipal**
 */
export declare type CredentialsType = string;

export declare interface CronTrigger extends TriggerBase {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    triggerType: "Cron";
    /**
     * [Required] Specifies cron expression of schedule.
     * The expression should follow NCronTab format.
     */
    expression: string;
}

/** The desired maximum forecast horizon in units of time-series frequency. */
export declare interface CustomForecastHorizon extends ForecastHorizon {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    mode: "Custom";
    /** [Required] Forecast horizon value. */
    value: number;
}

export declare interface CustomModelJobInput extends AssetJobInput, JobInput {
}

export declare interface CustomModelJobOutput extends AssetJobOutput, JobOutput {
}

/** N-Cross validations are specified by user. */
export declare interface CustomNCrossValidations extends NCrossValidations {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    mode: "Custom";
    /** [Required] N-Cross validations value. */
    value: number;
}

export declare interface CustomSeasonality extends Seasonality {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    mode: "Custom";
    /** [Required] Seasonality value. */
    value: number;
}

export declare interface CustomTargetLags extends TargetLags {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    mode: "Custom";
    /** [Required] Set target lags values. */
    values: number[];
}

export declare interface CustomTargetRollingWindowSize extends TargetRollingWindowSize {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    mode: "Custom";
    /** [Required] TargetRollingWindowSize value. */
    value: number;
}

/** A DataFactory compute. */
export declare interface Databricks extends Compute, DatabricksSchema {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    computeType: "Databricks";
}

/** Secrets related to a Machine Learning compute based on Databricks. */
export declare interface DatabricksComputeSecrets extends ComputeSecrets, DatabricksComputeSecretsProperties {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    computeType: "Databricks";
}

/** Properties of Databricks Compute Secrets */
export declare interface DatabricksComputeSecretsProperties {
    /** access token for databricks account. */
    databricksAccessToken?: string;
}

/** Properties of Databricks */
export declare interface DatabricksProperties {
    /** Databricks access token */
    databricksAccessToken?: string;
    /** Workspace Url */
    workspaceUrl?: string;
}

export declare interface DatabricksSchema {
    /** Properties of Databricks */
    properties?: DatabricksProperties;
}

/** Azure Resource Manager resource envelope. */
export declare interface DataContainer extends Resource {
    /** [Required] Additional attributes of the entity. */
    properties: DataContainerProperties;
}

/** Container for data asset versions. */
export declare interface DataContainerProperties extends AssetContainer {
    /** [Required] Specifies the type of data. */
    dataType: DataType;
}

/** A paginated list of DataContainer entities. */
export declare interface DataContainerResourceArmPaginatedResult {
    /** The link to the next page of DataContainer objects. If null, there are no additional pages. */
    nextLink?: string;
    /** An array of objects of type DataContainer. */
    value?: DataContainer[];
}

/** Interface representing a DataContainers. */
export declare interface DataContainers {
    /**
     * List data containers.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, options?: DataContainersListOptionalParams): PagedAsyncIterableIterator<DataContainer>;
    /**
     * Delete container.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param name Container name.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, workspaceName: string, name: string, options?: DataContainersDeleteOptionalParams): Promise<void>;
    /**
     * Get container.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param name Container name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, name: string, options?: DataContainersGetOptionalParams): Promise<DataContainersGetResponse>;
    /**
     * Create or update container.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param name Container name.
     * @param body Container entity to create or update.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, workspaceName: string, name: string, body: DataContainer, options?: DataContainersCreateOrUpdateOptionalParams): Promise<DataContainersCreateOrUpdateResponse>;
}

/** Optional parameters. */
export declare interface DataContainersCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type DataContainersCreateOrUpdateResponse = DataContainer;

/** Optional parameters. */
export declare interface DataContainersDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface DataContainersGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type DataContainersGetResponse = DataContainer;

/** Optional parameters. */
export declare interface DataContainersListNextOptionalParams extends coreClient.OperationOptions {
    /** Continuation token for pagination. */
    skip?: string;
    /** View type for including/excluding (for example) archived entities. */
    listViewType?: ListViewType;
}

/** Contains response data for the listNext operation. */
export declare type DataContainersListNextResponse = DataContainerResourceArmPaginatedResult;

/** Optional parameters. */
export declare interface DataContainersListOptionalParams extends coreClient.OperationOptions {
    /** Continuation token for pagination. */
    skip?: string;
    /** View type for including/excluding (for example) archived entities. */
    listViewType?: ListViewType;
}

/** Contains response data for the list operation. */
export declare type DataContainersListResponse = DataContainerResourceArmPaginatedResult;

/** A DataFactory compute. */
export declare interface DataFactory extends Compute {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    computeType: "DataFactory";
}

/** A DataLakeAnalytics compute. */
export declare interface DataLakeAnalytics extends Compute, DataLakeAnalyticsSchema {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    computeType: "DataLakeAnalytics";
}

export declare interface DataLakeAnalyticsSchema {
    properties?: DataLakeAnalyticsSchemaProperties;
}

export declare interface DataLakeAnalyticsSchemaProperties {
    /** DataLake Store Account Name */
    dataLakeStoreAccountName?: string;
}

/** Reference to an asset via its path in a datastore. */
export declare interface DataPathAssetReference extends AssetReferenceBase {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    referenceType: "DataPath";
    /** ARM resource ID of the datastore where the asset is located. */
    datastoreId?: string;
    /** The path of the file/directory in the datastore. */
    path?: string;
}

/** Azure Resource Manager resource envelope. */
export declare interface Datastore extends Resource {
    /** [Required] Additional attributes of the entity. */
    properties: DatastorePropertiesUnion;
}

/** Base definition for datastore credentials. */
export declare interface DatastoreCredentials {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    credentialsType: "AccountKey" | "Certificate" | "None" | "Sas" | "ServicePrincipal";
}

export declare type DatastoreCredentialsUnion = DatastoreCredentials | AccountKeyDatastoreCredentials | CertificateDatastoreCredentials | NoneDatastoreCredentials | SasDatastoreCredentials | ServicePrincipalDatastoreCredentials;

/** Base definition for datastore contents configuration. */
export declare interface DatastoreProperties extends ResourceBase {
    /** [Required] Account credentials. */
    credentials: DatastoreCredentialsUnion;
    /** [Required] Storage type backing the datastore. */
    datastoreType: DatastoreType;
    /**
     * Readonly property to indicate if datastore is the workspace default datastore
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isDefault?: boolean;
}

export declare type DatastorePropertiesUnion = DatastoreProperties | AzureBlobDatastore | AzureDataLakeGen1Datastore | AzureDataLakeGen2Datastore | AzureFileDatastore;

/** A paginated list of Datastore entities. */
export declare interface DatastoreResourceArmPaginatedResult {
    /** The link to the next page of Datastore objects. If null, there are no additional pages. */
    nextLink?: string;
    /** An array of objects of type Datastore. */
    value?: Datastore[];
}

/** Interface representing a Datastores. */
export declare interface Datastores {
    /**
     * List datastores.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, options?: DatastoresListOptionalParams): PagedAsyncIterableIterator<Datastore>;
    /**
     * Delete datastore.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param name Datastore name.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, workspaceName: string, name: string, options?: DatastoresDeleteOptionalParams): Promise<void>;
    /**
     * Get datastore.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param name Datastore name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, name: string, options?: DatastoresGetOptionalParams): Promise<DatastoresGetResponse>;
    /**
     * Create or update datastore.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param name Datastore name.
     * @param body Datastore entity to create or update.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, workspaceName: string, name: string, body: Datastore, options?: DatastoresCreateOrUpdateOptionalParams): Promise<DatastoresCreateOrUpdateResponse>;
    /**
     * Get datastore secrets.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param name Datastore name.
     * @param options The options parameters.
     */
    listSecrets(resourceGroupName: string, workspaceName: string, name: string, options?: DatastoresListSecretsOptionalParams): Promise<DatastoresListSecretsResponse>;
}

/** Optional parameters. */
export declare interface DatastoresCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Flag to skip validation. */
    skipValidation?: boolean;
}

/** Contains response data for the createOrUpdate operation. */
export declare type DatastoresCreateOrUpdateResponse = Datastore;

/** Optional parameters. */
export declare interface DatastoresDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Base definition for datastore secrets. */
export declare interface DatastoreSecrets {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    secretsType: "AccountKey" | "Certificate" | "Sas" | "ServicePrincipal";
}

export declare type DatastoreSecretsUnion = DatastoreSecrets | AccountKeyDatastoreSecrets | CertificateDatastoreSecrets | SasDatastoreSecrets | ServicePrincipalDatastoreSecrets;

/** Optional parameters. */
export declare interface DatastoresGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type DatastoresGetResponse = Datastore;

/** Optional parameters. */
export declare interface DatastoresListNextOptionalParams extends coreClient.OperationOptions {
    /** Continuation token for pagination. */
    skip?: string;
    /** Maximum number of results to return. */
    count?: number;
    /** Filter down to the workspace default datastore. */
    isDefault?: boolean;
    /** Names of datastores to return. */
    names?: string[];
    /** Text to search for in the datastore names. */
    searchText?: string;
    /** Order by property (createdtime | modifiedtime | name). */
    orderBy?: string;
    /** Order by property in ascending order. */
    orderByAsc?: boolean;
}

/** Contains response data for the listNext operation. */
export declare type DatastoresListNextResponse = DatastoreResourceArmPaginatedResult;

/** Optional parameters. */
export declare interface DatastoresListOptionalParams extends coreClient.OperationOptions {
    /** Continuation token for pagination. */
    skip?: string;
    /** Maximum number of results to return. */
    count?: number;
    /** Filter down to the workspace default datastore. */
    isDefault?: boolean;
    /** Names of datastores to return. */
    names?: string[];
    /** Text to search for in the datastore names. */
    searchText?: string;
    /** Order by property (createdtime | modifiedtime | name). */
    orderBy?: string;
    /** Order by property in ascending order. */
    orderByAsc?: boolean;
}

/** Contains response data for the list operation. */
export declare type DatastoresListResponse = DatastoreResourceArmPaginatedResult;

/** Optional parameters. */
export declare interface DatastoresListSecretsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listSecrets operation. */
export declare type DatastoresListSecretsResponse = DatastoreSecretsUnion;

/**
 * Defines values for DatastoreType. \
 * {@link KnownDatastoreType} can be used interchangeably with DatastoreType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AzureBlob** \
 * **AzureDataLakeGen1** \
 * **AzureDataLakeGen2** \
 * **AzureFile**
 */
export declare type DatastoreType = string;

/**
 * Defines values for DataType. \
 * {@link KnownDataType} can be used interchangeably with DataType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **uri_file** \
 * **uri_folder** \
 * **mltable**
 */
export declare type DataType = string;

/** Azure Resource Manager resource envelope. */
export declare interface DataVersionBase extends Resource {
    /** [Required] Additional attributes of the entity. */
    properties: DataVersionBasePropertiesUnion;
}

/** Data version base definition */
export declare interface DataVersionBaseProperties extends AssetBase {
    /** [Required] Specifies the type of data. */
    dataType: DataType;
    /** [Required] Uri of the data. Usage/meaning depends on Microsoft.MachineLearning.ManagementFrontEnd.Contracts.V20221001.Assets.DataVersionBase.DataType */
    dataUri: string;
}

export declare type DataVersionBasePropertiesUnion = DataVersionBaseProperties | MLTableData | UriFileDataVersion | UriFolderDataVersion;

/** A paginated list of DataVersionBase entities. */
export declare interface DataVersionBaseResourceArmPaginatedResult {
    /** The link to the next page of DataVersionBase objects. If null, there are no additional pages. */
    nextLink?: string;
    /** An array of objects of type DataVersionBase. */
    value?: DataVersionBase[];
}

/** Interface representing a DataVersions. */
export declare interface DataVersions {
    /**
     * List data versions in the data container
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param name Data container's name
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, name: string, options?: DataVersionsListOptionalParams): PagedAsyncIterableIterator<DataVersionBase>;
    /**
     * Delete version.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param name Container name.
     * @param version Version identifier.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, workspaceName: string, name: string, version: string, options?: DataVersionsDeleteOptionalParams): Promise<void>;
    /**
     * Get version.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param name Container name.
     * @param version Version identifier.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, name: string, version: string, options?: DataVersionsGetOptionalParams): Promise<DataVersionsGetResponse>;
    /**
     * Create or update version.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param name Container name.
     * @param version Version identifier.
     * @param body Version entity to create or update.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, workspaceName: string, name: string, version: string, body: DataVersionBase, options?: DataVersionsCreateOrUpdateOptionalParams): Promise<DataVersionsCreateOrUpdateResponse>;
}

/** Optional parameters. */
export declare interface DataVersionsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type DataVersionsCreateOrUpdateResponse = DataVersionBase;

/** Optional parameters. */
export declare interface DataVersionsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface DataVersionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type DataVersionsGetResponse = DataVersionBase;

/** Optional parameters. */
export declare interface DataVersionsListNextOptionalParams extends coreClient.OperationOptions {
    /** Continuation token for pagination. */
    skip?: string;
    /** Please choose OrderBy value from ['createdtime', 'modifiedtime'] */
    orderBy?: string;
    /**
     * Top count of results, top count cannot be greater than the page size.
     *                               If topCount > page size, results with be default page size count will be returned
     */
    top?: number;
    /** [ListViewType.ActiveOnly, ListViewType.ArchivedOnly, ListViewType.All]View type for including/excluding (for example) archived entities. */
    listViewType?: ListViewType;
    /** Comma-separated list of tag names (and optionally values). Example: tag1,tag2=value2 */
    tags?: string;
}

/** Contains response data for the listNext operation. */
export declare type DataVersionsListNextResponse = DataVersionBaseResourceArmPaginatedResult;

/** Optional parameters. */
export declare interface DataVersionsListOptionalParams extends coreClient.OperationOptions {
    /** Continuation token for pagination. */
    skip?: string;
    /** Please choose OrderBy value from ['createdtime', 'modifiedtime'] */
    orderBy?: string;
    /**
     * Top count of results, top count cannot be greater than the page size.
     *                               If topCount > page size, results with be default page size count will be returned
     */
    top?: number;
    /** [ListViewType.ActiveOnly, ListViewType.ArchivedOnly, ListViewType.All]View type for including/excluding (for example) archived entities. */
    listViewType?: ListViewType;
    /** Comma-separated list of tag names (and optionally values). Example: tag1,tag2=value2 */
    tags?: string;
}

/** Contains response data for the list operation. */
export declare type DataVersionsListResponse = DataVersionBaseResourceArmPaginatedResult;

export declare interface DefaultScaleSettings extends OnlineScaleSettings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    scaleType: "Default";
}

export declare interface DeploymentLogs {
    /** The retrieved online deployment logs. */
    content?: string;
}

export declare interface DeploymentLogsRequest {
    /** The type of container to retrieve logs from. */
    containerType?: ContainerType;
    /** The maximum number of lines to tail. */
    tail?: number;
}

/**
 * Defines values for DeploymentProvisioningState. \
 * {@link KnownDeploymentProvisioningState} can be used interchangeably with DeploymentProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Deleting** \
 * **Scaling** \
 * **Updating** \
 * **Succeeded** \
 * **Failed** \
 * **Canceled**
 */
export declare type DeploymentProvisioningState = string;

export declare interface DeploymentResourceConfiguration extends ResourceConfiguration {
}

export declare interface DiagnoseRequestProperties {
    /** Setting for diagnosing user defined routing */
    udr?: {
        [propertyName: string]: Record<string, unknown>;
    };
    /** Setting for diagnosing network security group */
    nsg?: {
        [propertyName: string]: Record<string, unknown>;
    };
    /** Setting for diagnosing resource lock */
    resourceLock?: {
        [propertyName: string]: Record<string, unknown>;
    };
    /** Setting for diagnosing dns resolution */
    dnsResolution?: {
        [propertyName: string]: Record<string, unknown>;
    };
    /** Setting for diagnosing dependent storage account */
    storageAccount?: {
        [propertyName: string]: Record<string, unknown>;
    };
    /** Setting for diagnosing dependent key vault */
    keyVault?: {
        [propertyName: string]: Record<string, unknown>;
    };
    /** Setting for diagnosing dependent container registry */
    containerRegistry?: {
        [propertyName: string]: Record<string, unknown>;
    };
    /** Setting for diagnosing dependent application insights */
    applicationInsights?: {
        [propertyName: string]: Record<string, unknown>;
    };
    /** Setting for diagnosing unclassified category of problems */
    others?: {
        [propertyName: string]: Record<string, unknown>;
    };
}

export declare interface DiagnoseResponseResult {
    value?: DiagnoseResponseResultValue;
}

export declare interface DiagnoseResponseResultValue {
    userDefinedRouteResults?: DiagnoseResult[];
    networkSecurityRuleResults?: DiagnoseResult[];
    resourceLockResults?: DiagnoseResult[];
    dnsResolutionResults?: DiagnoseResult[];
    storageAccountResults?: DiagnoseResult[];
    keyVaultResults?: DiagnoseResult[];
    containerRegistryResults?: DiagnoseResult[];
    applicationInsightsResults?: DiagnoseResult[];
    otherResults?: DiagnoseResult[];
}

/** Result of Diagnose */
export declare interface DiagnoseResult {
    /**
     * Code for workspace setup error
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * Level of workspace setup error
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly level?: DiagnoseResultLevel;
    /**
     * Message of workspace setup error
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
}

/**
 * Defines values for DiagnoseResultLevel. \
 * {@link KnownDiagnoseResultLevel} can be used interchangeably with DiagnoseResultLevel,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Warning** \
 * **Error** \
 * **Information**
 */
export declare type DiagnoseResultLevel = string;

/** Parameters to diagnose a workspace */
export declare interface DiagnoseWorkspaceParameters {
    /** Value of Parameters */
    value?: DiagnoseRequestProperties;
}

/** Base definition for job distribution configuration. */
export declare interface DistributionConfiguration {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    distributionType: "Mpi" | "PyTorch" | "TensorFlow";
}

export declare type DistributionConfigurationUnion = DistributionConfiguration | Mpi | PyTorch | TensorFlow;

/**
 * Defines values for DistributionType. \
 * {@link KnownDistributionType} can be used interchangeably with DistributionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **PyTorch** \
 * **TensorFlow** \
 * **Mpi**
 */
export declare type DistributionType = string;

/** Early termination policies enable canceling poor-performing runs before they complete */
export declare interface EarlyTerminationPolicy {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    policyType: "Bandit" | "MedianStopping" | "TruncationSelection";
    /** Number of intervals by which to delay the first evaluation. */
    delayEvaluation?: number;
    /** Interval (number of runs) between policy evaluations. */
    evaluationInterval?: number;
}

/**
 * Defines values for EarlyTerminationPolicyType. \
 * {@link KnownEarlyTerminationPolicyType} can be used interchangeably with EarlyTerminationPolicyType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Bandit** \
 * **MedianStopping** \
 * **TruncationSelection**
 */
export declare type EarlyTerminationPolicyType = string;

export declare type EarlyTerminationPolicyUnion = EarlyTerminationPolicy | BanditPolicy | MedianStoppingPolicy | TruncationSelectionPolicy;

/**
 * Defines values for EgressPublicNetworkAccessType. \
 * {@link KnownEgressPublicNetworkAccessType} can be used interchangeably with EgressPublicNetworkAccessType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export declare type EgressPublicNetworkAccessType = string;

export declare interface EncryptionKeyVaultProperties {
    /** The ArmId of the keyVault where the customer owned encryption key is present. */
    keyVaultArmId: string;
    /** Key vault uri to access the encryption key. */
    keyIdentifier: string;
    /** For future use - The client id of the identity which will be used to access key vault. */
    identityClientId?: string;
}

export declare interface EncryptionProperty {
    /** Indicates whether or not the encryption is enabled for the workspace. */
    status: EncryptionStatus;
    /** The identity that will be used to access the key vault for encryption at rest. */
    identity?: IdentityForCmk;
    /** Customer Key vault properties. */
    keyVaultProperties: EncryptionKeyVaultProperties;
}

/**
 * Defines values for EncryptionStatus. \
 * {@link KnownEncryptionStatus} can be used interchangeably with EncryptionStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export declare type EncryptionStatus = string;

/** Keys for endpoint authentication. */
export declare interface EndpointAuthKeys {
    /** The primary key. */
    primaryKey?: string;
    /** The secondary key. */
    secondaryKey?: string;
}

/**
 * Defines values for EndpointAuthMode. \
 * {@link KnownEndpointAuthMode} can be used interchangeably with EndpointAuthMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AMLToken** \
 * **Key** \
 * **AADToken**
 */
export declare type EndpointAuthMode = string;

/** Service Token */
export declare interface EndpointAuthToken {
    /** Access token for endpoint authentication. */
    accessToken?: string;
    /** Access token expiry time (UTC). */
    expiryTimeUtc?: number;
    /** Refresh access token after time (UTC). */
    refreshAfterTimeUtc?: number;
    /** Access token type. */
    tokenType?: string;
}

/**
 * Defines values for EndpointComputeType. \
 * {@link KnownEndpointComputeType} can be used interchangeably with EndpointComputeType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Managed** \
 * **Kubernetes** \
 * **AzureMLCompute**
 */
export declare type EndpointComputeType = string;

/** Base definition for endpoint deployment. */
export declare interface EndpointDeploymentPropertiesBase {
    /** Code configuration for the endpoint deployment. */
    codeConfiguration?: CodeConfiguration;
    /** Description of the endpoint deployment. */
    description?: string;
    /** ARM resource ID or AssetId of the environment specification for the endpoint deployment. */
    environmentId?: string;
    /** Environment variables configuration for the deployment. */
    environmentVariables?: {
        [propertyName: string]: string | null;
    };
    /** Property dictionary. Properties can be added, but not removed or altered. */
    properties?: {
        [propertyName: string]: string | null;
    };
}

/** Inference Endpoint base definition */
export declare interface EndpointPropertiesBase {
    /** [Required] Use 'Key' for key based authentication and 'AMLToken' for Azure Machine Learning token-based authentication. 'Key' doesn't expire but 'AMLToken' does. */
    authMode: EndpointAuthMode;
    /** Description of the inference endpoint. */
    description?: string;
    /**
     * EndpointAuthKeys to set initially on an Endpoint.
     * This property will always be returned as null. AuthKey values must be retrieved using the ListKeys API.
     */
    keys?: EndpointAuthKeys;
    /** Property dictionary. Properties can be added, but not removed or altered. */
    properties?: {
        [propertyName: string]: string | null;
    };
    /**
     * Endpoint URI.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly scoringUri?: string;
    /**
     * Endpoint Swagger URI.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly swaggerUri?: string;
}

/**
 * Defines values for EndpointProvisioningState. \
 * {@link KnownEndpointProvisioningState} can be used interchangeably with EndpointProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Deleting** \
 * **Succeeded** \
 * **Failed** \
 * **Updating** \
 * **Canceled**
 */
export declare type EndpointProvisioningState = string;

export declare interface EndpointScheduleAction extends ScheduleActionBase {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    actionType: "InvokeBatchEndpoint";
    /**
     * [Required] Defines Schedule action definition details.
     * <see href="TBD" />
     */
    endpointInvocationDefinition: Record<string, unknown>;
}

/** Azure Resource Manager resource envelope. */
export declare interface EnvironmentContainer extends Resource {
    /** [Required] Additional attributes of the entity. */
    properties: EnvironmentContainerProperties;
}

/** Container for environment specification versions. */
export declare interface EnvironmentContainerProperties extends AssetContainer {
}

/** A paginated list of EnvironmentContainer entities. */
export declare interface EnvironmentContainerResourceArmPaginatedResult {
    /** The link to the next page of EnvironmentContainer objects. If null, there are no additional pages. */
    nextLink?: string;
    /** An array of objects of type EnvironmentContainer. */
    value?: EnvironmentContainer[];
}

/** Interface representing a EnvironmentContainers. */
export declare interface EnvironmentContainers {
    /**
     * List environment containers.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, options?: EnvironmentContainersListOptionalParams): PagedAsyncIterableIterator<EnvironmentContainer>;
    /**
     * Delete container.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param name Container name. This is case-sensitive.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, workspaceName: string, name: string, options?: EnvironmentContainersDeleteOptionalParams): Promise<void>;
    /**
     * Get container.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param name Container name. This is case-sensitive.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, name: string, options?: EnvironmentContainersGetOptionalParams): Promise<EnvironmentContainersGetResponse>;
    /**
     * Create or update container.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param name Container name. This is case-sensitive.
     * @param body Container entity to create or update.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, workspaceName: string, name: string, body: EnvironmentContainer, options?: EnvironmentContainersCreateOrUpdateOptionalParams): Promise<EnvironmentContainersCreateOrUpdateResponse>;
}

/** Optional parameters. */
export declare interface EnvironmentContainersCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type EnvironmentContainersCreateOrUpdateResponse = EnvironmentContainer;

/** Optional parameters. */
export declare interface EnvironmentContainersDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface EnvironmentContainersGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type EnvironmentContainersGetResponse = EnvironmentContainer;

/** Optional parameters. */
export declare interface EnvironmentContainersListNextOptionalParams extends coreClient.OperationOptions {
    /** Continuation token for pagination. */
    skip?: string;
    /** View type for including/excluding (for example) archived entities. */
    listViewType?: ListViewType;
}

/** Contains response data for the listNext operation. */
export declare type EnvironmentContainersListNextResponse = EnvironmentContainerResourceArmPaginatedResult;

/** Optional parameters. */
export declare interface EnvironmentContainersListOptionalParams extends coreClient.OperationOptions {
    /** Continuation token for pagination. */
    skip?: string;
    /** View type for including/excluding (for example) archived entities. */
    listViewType?: ListViewType;
}

/** Contains response data for the list operation. */
export declare type EnvironmentContainersListResponse = EnvironmentContainerResourceArmPaginatedResult;

/**
 * Defines values for EnvironmentType. \
 * {@link KnownEnvironmentType} can be used interchangeably with EnvironmentType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Curated** \
 * **UserCreated**
 */
export declare type EnvironmentType = string;

/** Azure Resource Manager resource envelope. */
export declare interface EnvironmentVersion extends Resource {
    /** [Required] Additional attributes of the entity. */
    properties: EnvironmentVersionProperties;
}

/** Environment version details. */
export declare interface EnvironmentVersionProperties extends AssetBase {
    /** Defines if image needs to be rebuilt based on base image changes. */
    autoRebuild?: AutoRebuildSetting;
    /** Configuration settings for Docker build context. */
    build?: BuildContext;
    /**
     * Standard configuration file used by Conda that lets you install any kind of package, including Python, R, and C/C++ packages.
     * <see href="https://repo2docker.readthedocs.io/en/latest/config_files.html#environment-yml-install-a-conda-environment" />
     */
    condaFile?: string;
    /**
     * Environment type is either user managed or curated by the Azure ML service
     * <see href="https://docs.microsoft.com/en-us/azure/machine-learning/resource-curated-environments" />
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly environmentType?: EnvironmentType;
    /**
     * Name of the image that will be used for the environment.
     * <seealso href="https://docs.microsoft.com/en-us/azure/machine-learning/how-to-deploy-custom-docker-image#use-a-custom-base-image" />
     */
    image?: string;
    /** Defines configuration specific to inference. */
    inferenceConfig?: InferenceContainerProperties;
    /** The OS type of the environment. */
    osType?: OperatingSystemType;
}

/** A paginated list of EnvironmentVersion entities. */
export declare interface EnvironmentVersionResourceArmPaginatedResult {
    /** The link to the next page of EnvironmentVersion objects. If null, there are no additional pages. */
    nextLink?: string;
    /** An array of objects of type EnvironmentVersion. */
    value?: EnvironmentVersion[];
}

/** Interface representing a EnvironmentVersions. */
export declare interface EnvironmentVersions {
    /**
     * List versions.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param name Container name. This is case-sensitive.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, name: string, options?: EnvironmentVersionsListOptionalParams): PagedAsyncIterableIterator<EnvironmentVersion>;
    /**
     * Delete version.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param name Container name. This is case-sensitive.
     * @param version Version identifier. This is case-sensitive.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, workspaceName: string, name: string, version: string, options?: EnvironmentVersionsDeleteOptionalParams): Promise<void>;
    /**
     * Get version.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param name Container name. This is case-sensitive.
     * @param version Version identifier. This is case-sensitive.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, name: string, version: string, options?: EnvironmentVersionsGetOptionalParams): Promise<EnvironmentVersionsGetResponse>;
    /**
     * Creates or updates an EnvironmentVersion.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param name Name of EnvironmentVersion. This is case-sensitive.
     * @param version Version of EnvironmentVersion.
     * @param body Definition of EnvironmentVersion.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, workspaceName: string, name: string, version: string, body: EnvironmentVersion, options?: EnvironmentVersionsCreateOrUpdateOptionalParams): Promise<EnvironmentVersionsCreateOrUpdateResponse>;
}

/** Optional parameters. */
export declare interface EnvironmentVersionsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type EnvironmentVersionsCreateOrUpdateResponse = EnvironmentVersion;

/** Optional parameters. */
export declare interface EnvironmentVersionsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface EnvironmentVersionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type EnvironmentVersionsGetResponse = EnvironmentVersion;

/** Optional parameters. */
export declare interface EnvironmentVersionsListNextOptionalParams extends coreClient.OperationOptions {
    /** Continuation token for pagination. */
    skip?: string;
    /** Ordering of list. */
    orderBy?: string;
    /** Maximum number of records to return. */
    top?: number;
    /** View type for including/excluding (for example) archived entities. */
    listViewType?: ListViewType;
}

/** Contains response data for the listNext operation. */
export declare type EnvironmentVersionsListNextResponse = EnvironmentVersionResourceArmPaginatedResult;

/** Optional parameters. */
export declare interface EnvironmentVersionsListOptionalParams extends coreClient.OperationOptions {
    /** Continuation token for pagination. */
    skip?: string;
    /** Ordering of list. */
    orderBy?: string;
    /** Maximum number of records to return. */
    top?: number;
    /** View type for including/excluding (for example) archived entities. */
    listViewType?: ListViewType;
}

/** Contains response data for the list operation. */
export declare type EnvironmentVersionsListResponse = EnvironmentVersionResourceArmPaginatedResult;

/** The resource management error additional info. */
export declare interface ErrorAdditionalInfo {
    /**
     * The additional info type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The additional info.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly info?: Record<string, unknown>;
}

/** The error detail. */
export declare interface ErrorDetail {
    /**
     * The error code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * The error message.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
    /**
     * The error target.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly target?: string;
    /**
     * The error details.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly details?: ErrorDetail[];
    /**
     * The error additional info.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export declare interface ErrorResponse {
    /** The error object. */
    error?: ErrorDetail;
}

/** The estimated price info for using a VM of a particular OS type, tier, etc. */
export declare interface EstimatedVMPrice {
    /** The price charged for using the VM. */
    retailPrice: number;
    /** Operating system type used by the VM. */
    osType: VMPriceOSType;
    /** The type of the VM. */
    vmTier: VMTier;
}

/** The estimated price info for using a VM. */
export declare interface EstimatedVMPrices {
    /** Three lettered code specifying the currency of the VM price. Example: USD */
    billingCurrency: BillingCurrency;
    /** The unit of time measurement for the specified VM price. Example: OneHour */
    unitOfMeasure: UnitOfMeasure;
    /** The list of estimated prices for using a VM of a particular OS type, tier, etc. */
    values: EstimatedVMPrice[];
}

export declare interface ExternalFqdnResponse {
    value?: FqdnEndpoints[];
}

/**
 * Defines values for FeatureLags. \
 * {@link KnownFeatureLags} can be used interchangeably with FeatureLags,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None**: No feature lags generated. \
 * **Auto**: System auto-generates feature lags.
 */
export declare type FeatureLags = string;

/**
 * Defines values for FeaturizationMode. \
 * {@link KnownFeaturizationMode} can be used interchangeably with FeaturizationMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Auto**: Auto mode, system performs featurization without any custom featurization inputs. \
 * **Custom**: Custom featurization. \
 * **Off**: Featurization off. 'Forecasting' task cannot use this value.
 */
export declare type FeaturizationMode = string;

/** Featurization Configuration. */
export declare interface FeaturizationSettings {
    /** Dataset language, useful for the text data. */
    datasetLanguage?: string;
}

export declare interface FlavorData {
    /** Model flavor-specific data. */
    data?: {
        [propertyName: string]: string | null;
    };
}

/** The desired maximum forecast horizon in units of time-series frequency. */
export declare interface ForecastHorizon {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    mode: "Auto" | "Custom";
}

/**
 * Defines values for ForecastHorizonMode. \
 * {@link KnownForecastHorizonMode} can be used interchangeably with ForecastHorizonMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Auto**: Forecast horizon to be determined automatically. \
 * **Custom**: Use the custom forecast horizon.
 */
export declare type ForecastHorizonMode = string;

export declare type ForecastHorizonUnion = ForecastHorizon | AutoForecastHorizon | CustomForecastHorizon;

/** Forecasting task in AutoML Table vertical. */
export declare interface Forecasting extends TableVertical, AutoMLVertical {
    /** Forecasting task specific inputs. */
    forecastingSettings?: ForecastingSettings;
    /** Primary metric for forecasting task. */
    primaryMetric?: ForecastingPrimaryMetrics;
    /** Inputs for training phase for an AutoML Job. */
    trainingSettings?: ForecastingTrainingSettings;
}

/**
 * Defines values for ForecastingModels. \
 * {@link KnownForecastingModels} can be used interchangeably with ForecastingModels,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AutoArima**: Auto-Autoregressive Integrated Moving Average (ARIMA) model uses time-series data and statistical analysis to interpret the data and make future predictions.
 * This model aims to explain data by using time series data on its past values and uses linear regression to make predictions. \
 * **Prophet**: Prophet is a procedure for forecasting time series data based on an additive model where non-linear trends are fit with yearly, weekly, and daily seasonality, plus holiday effects.
 * It works best with time series that have strong seasonal effects and several seasons of historical data. Prophet is robust to missing data and shifts in the trend, and typically handles outliers well. \
 * **Naive**: The Naive forecasting model makes predictions by carrying forward the latest target value for each time-series in the training data. \
 * **SeasonalNaive**: The Seasonal Naive forecasting model makes predictions by carrying forward the latest season of target values for each time-series in the training data. \
 * **Average**: The Average forecasting model makes predictions by carrying forward the average of the target values for each time-series in the training data. \
 * **SeasonalAverage**: The Seasonal Average forecasting model makes predictions by carrying forward the average value of the latest season of data for each time-series in the training data. \
 * **ExponentialSmoothing**: Exponential smoothing is a time series forecasting method for univariate data that can be extended to support data with a systematic trend or seasonal component. \
 * **Arimax**: An Autoregressive Integrated Moving Average with Explanatory Variable (ARIMAX) model can be viewed as a multiple regression model with one or more autoregressive (AR) terms and\/or one or more moving average (MA) terms.
 * This method is suitable for forecasting when data is stationary\/non stationary, and multivariate with any type of data pattern, i.e., level\/trend \/seasonality\/cyclicity. \
 * **TCNForecaster**: TCNForecaster: Temporal Convolutional Networks Forecaster. \/\/TODO: Ask forecasting team for brief intro. \
 * **ElasticNet**: Elastic net is a popular type of regularized linear regression that combines two popular penalties, specifically the L1 and L2 penalty functions. \
 * **GradientBoosting**: The technique of transiting week learners into a strong learner is called Boosting. The gradient boosting algorithm process works on this theory of execution. \
 * **DecisionTree**: Decision Trees are a non-parametric supervised learning method used for both classification and regression tasks.
 * The goal is to create a model that predicts the value of a target variable by learning simple decision rules inferred from the data features. \
 * **KNN**: K-nearest neighbors (KNN) algorithm uses 'feature similarity' to predict the values of new datapoints
 * which further means that the new data point will be assigned a value based on how closely it matches the points in the training set. \
 * **LassoLars**: Lasso model fit with Least Angle Regression a.k.a. Lars. It is a Linear Model trained with an L1 prior as regularizer. \
 * **SGD**: SGD: Stochastic gradient descent is an optimization algorithm often used in machine learning applications
 * to find the model parameters that correspond to the best fit between predicted and actual outputs.
 * It's an inexact but powerful technique. \
 * **RandomForest**: Random forest is a supervised learning algorithm.
 * The "forest" it builds, is an ensemble of decision trees, usually trained with the “bagging” method.
 * The general idea of the bagging method is that a combination of learning models increases the overall result. \
 * **ExtremeRandomTrees**: Extreme Trees is an ensemble machine learning algorithm that combines the predictions from many decision trees. It is related to the widely used random forest algorithm. \
 * **LightGBM**: LightGBM is a gradient boosting framework that uses tree based learning algorithms. \
 * **XGBoostRegressor**: XGBoostRegressor: Extreme Gradient Boosting Regressor is a supervised machine learning model using ensemble of base learners.
 */
export declare type ForecastingModels = string;

/**
 * Defines values for ForecastingPrimaryMetrics. \
 * {@link KnownForecastingPrimaryMetrics} can be used interchangeably with ForecastingPrimaryMetrics,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SpearmanCorrelation**: The Spearman's rank coefficient of correlation is a non-parametric measure of rank correlation. \
 * **NormalizedRootMeanSquaredError**: The Normalized Root Mean Squared Error (NRMSE) the RMSE facilitates the comparison between models with different scales. \
 * **R2Score**: The R2 score is one of the performance evaluation measures for forecasting-based machine learning models. \
 * **NormalizedMeanAbsoluteError**: The Normalized Mean Absolute Error (NMAE) is a validation metric to compare the Mean Absolute Error (MAE) of (time) series with different scales.
 */
export declare type ForecastingPrimaryMetrics = string;

/** Forecasting specific parameters. */
export declare interface ForecastingSettings {
    /**
     * Country or region for holidays for forecasting tasks.
     * These should be ISO 3166 two-letter country/region codes, for example 'US' or 'GB'.
     */
    countryOrRegionForHolidays?: string;
    /**
     * Number of periods between the origin time of one CV fold and the next fold. For
     * example, if `CVStepSize` = 3 for daily data, the origin time for each fold will be
     * three days apart.
     */
    cvStepSize?: number;
    /** Flag for generating lags for the numeric features with 'auto' or null. */
    featureLags?: FeatureLags;
    /** The desired maximum forecast horizon in units of time-series frequency. */
    forecastHorizon?: ForecastHorizonUnion;
    /** When forecasting, this parameter represents the period with which the forecast is desired, for example daily, weekly, yearly, etc. The forecast frequency is dataset frequency by default. */
    frequency?: string;
    /**
     * Set time series seasonality as an integer multiple of the series frequency.
     * If seasonality is set to 'auto', it will be inferred.
     */
    seasonality?: SeasonalityUnion;
    /** The parameter defining how if AutoML should handle short time series. */
    shortSeriesHandlingConfig?: ShortSeriesHandlingConfiguration;
    /**
     * The function to be used to aggregate the time series target column to conform to a user specified frequency.
     * If the TargetAggregateFunction is set i.e. not 'None', but the freq parameter is not set, the error is raised. The possible target aggregation functions are: "sum", "max", "min" and "mean".
     */
    targetAggregateFunction?: TargetAggregationFunction;
    /** The number of past periods to lag from the target column. */
    targetLags?: TargetLagsUnion;
    /** The number of past periods used to create a rolling window average of the target column. */
    targetRollingWindowSize?: TargetRollingWindowSizeUnion;
    /** The name of the time column. This parameter is required when forecasting to specify the datetime column in the input data used for building the time series and inferring its frequency. */
    timeColumnName?: string;
    /**
     * The names of columns used to group a timeseries. It can be used to create multiple series.
     * If grain is not defined, the data set is assumed to be one time-series. This parameter is used with task type forecasting.
     */
    timeSeriesIdColumnNames?: string[];
    /** Configure STL Decomposition of the time-series target column. */
    useStl?: UseStl;
}

/** Forecasting Training related configuration. */
export declare interface ForecastingTrainingSettings extends TrainingSettings {
    /** Allowed models for forecasting task. */
    allowedTrainingAlgorithms?: ForecastingModels[];
    /** Blocked models for forecasting task. */
    blockedTrainingAlgorithms?: ForecastingModels[];
}

export declare interface FqdnEndpoint {
    domainName?: string;
    endpointDetails?: FqdnEndpointDetail[];
}

export declare interface FqdnEndpointDetail {
    port?: number;
}

export declare interface FqdnEndpoints {
    properties?: FqdnEndpointsProperties;
}

export declare interface FqdnEndpointsProperties {
    category?: string;
    endpoints?: FqdnEndpoint[];
}

/**
 * Given a result page from a pageable operation, returns a
 * continuation token that can be used to begin paging from
 * that point later.
 * @param page A result object from calling .byPage() on a paged operation.
 * @returns The continuation token that can be passed into byPage().
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/**
 * Defines values for Goal. \
 * {@link KnownGoal} can be used interchangeably with Goal,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Minimize** \
 * **Maximize**
 */
export declare type Goal = string;

/** Defines a Sampling Algorithm that exhaustively generates every value combination in the space */
export declare interface GridSamplingAlgorithm extends SamplingAlgorithm {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    samplingAlgorithmType: "Grid";
}

/** A HDInsight compute. */
export declare interface HDInsight extends Compute, HDInsightSchema {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    computeType: "HDInsight";
}

/** HDInsight compute properties */
export declare interface HDInsightProperties {
    /** Port open for ssh connections on the master node of the cluster. */
    sshPort?: number;
    /** Public IP address of the master node of the cluster. */
    address?: string;
    /** Admin credentials for master node of the cluster */
    administratorAccount?: VirtualMachineSshCredentials;
}

export declare interface HDInsightSchema {
    /** HDInsight compute properties */
    properties?: HDInsightProperties;
}

/** Reference to an asset via its ARM resource ID. */
export declare interface IdAssetReference extends AssetReferenceBase {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    referenceType: "Id";
    /** [Required] ARM resource ID of the asset. */
    assetId: string;
}

/** Base definition for identity configuration. */
export declare interface IdentityConfiguration {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    identityType: "AMLToken" | "Managed" | "UserIdentity";
}

/**
 * Defines values for IdentityConfigurationType. \
 * {@link KnownIdentityConfigurationType} can be used interchangeably with IdentityConfigurationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Managed** \
 * **AMLToken** \
 * **UserIdentity**
 */
export declare type IdentityConfigurationType = string;

export declare type IdentityConfigurationUnion = IdentityConfiguration | AmlToken | ManagedIdentity | UserIdentity;

/** Identity that will be used to access key vault for encryption at rest */
export declare interface IdentityForCmk {
    /** The ArmId of the user assigned identity that will be used to access the customer managed key vault */
    userAssignedIdentity?: string;
}

/**
 * Image Classification. Multi-class image classification is used when an image is classified with only a single label
 * from a set of classes - e.g. each image is classified as either an image of a 'cat' or a 'dog' or a 'duck'.
 */
export declare interface ImageClassification extends ImageClassificationBase, AutoMLVertical {
    /** Primary metric to optimize for this task. */
    primaryMetric?: ClassificationPrimaryMetrics;
}

export declare interface ImageClassificationBase extends ImageVertical {
    /** Settings used for training the model. */
    modelSettings?: ImageModelSettingsClassification;
    /** Search space for sampling different combinations of models and their hyperparameters. */
    searchSpace?: ImageModelDistributionSettingsClassification[];
}

/**
 * Image Classification Multilabel. Multi-label image classification is used when an image could have one or more labels
 * from a set of labels - e.g. an image could be labeled with both 'cat' and 'dog'.
 */
export declare interface ImageClassificationMultilabel extends ImageClassificationBase, AutoMLVertical {
    /** Primary metric to optimize for this task. */
    primaryMetric?: ClassificationMultilabelPrimaryMetrics;
}

/**
 * Image Instance Segmentation. Instance segmentation is used to identify objects in an image at the pixel level,
 * drawing a polygon around each object in the image.
 */
export declare interface ImageInstanceSegmentation extends ImageObjectDetectionBase, AutoMLVertical {
    /** Primary metric to optimize for this task. */
    primaryMetric?: InstanceSegmentationPrimaryMetrics;
}

/** Limit settings for the AutoML job. */
export declare interface ImageLimitSettings {
    /** Maximum number of concurrent AutoML iterations. */
    maxConcurrentTrials?: number;
    /** Maximum number of AutoML iterations. */
    maxTrials?: number;
    /** AutoML job timeout. */
    timeout?: string;
}

/**
 * Distribution expressions to sweep over values of model settings.
 * <example>
 * Some examples are:
 * <code>
 * ModelName = "choice('seresnext', 'resnest50')";
 * LearningRate = "uniform(0.001, 0.01)";
 * LayersToFreeze = "choice(0, 2)";
 * </code></example>
 * All distributions can be specified as distribution_name(min, max) or choice(val1, val2, ..., valn)
 * where distribution name can be: uniform, quniform, loguniform, etc
 * For more details on how to compose distribution expressions please check the documentation:
 * https://docs.microsoft.com/en-us/azure/machine-learning/how-to-tune-hyperparameters
 * For more information on the available settings please visit the official documentation:
 * https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
 */
export declare interface ImageModelDistributionSettings {
    /** Enable AMSGrad when optimizer is 'adam' or 'adamw'. */
    amsGradient?: string;
    /** Settings for using Augmentations. */
    augmentations?: string;
    /** Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1]. */
    beta1?: string;
    /** Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1]. */
    beta2?: string;
    /** Whether to use distributer training. */
    distributed?: string;
    /** Enable early stopping logic during training. */
    earlyStopping?: string;
    /**
     * Minimum number of epochs or validation evaluations to wait before primary metric improvement
     * is tracked for early stopping. Must be a positive integer.
     */
    earlyStoppingDelay?: string;
    /**
     * Minimum number of epochs or validation evaluations with no primary metric improvement before
     * the run is stopped. Must be a positive integer.
     */
    earlyStoppingPatience?: string;
    /** Enable normalization when exporting ONNX model. */
    enableOnnxNormalization?: string;
    /** Frequency to evaluate validation dataset to get metric scores. Must be a positive integer. */
    evaluationFrequency?: string;
    /**
     * Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
     * updating the model weights while accumulating the gradients of those steps, and then using
     * the accumulated gradients to compute the weight updates. Must be a positive integer.
     */
    gradientAccumulationStep?: string;
    /**
     * Number of layers to freeze for the model. Must be a positive integer.
     * For instance, passing 2 as value for 'seresnext' means
     * freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
     * see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
     */
    layersToFreeze?: string;
    /** Initial learning rate. Must be a float in the range [0, 1]. */
    learningRate?: string;
    /** Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'. */
    learningRateScheduler?: string;
    /**
     * Name of the model to use for training.
     * For more information on the available models please visit the official documentation:
     * https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
     */
    modelName?: string;
    /** Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1]. */
    momentum?: string;
    /** Enable nesterov when optimizer is 'sgd'. */
    nesterov?: string;
    /** Number of training epochs. Must be a positive integer. */
    numberOfEpochs?: string;
    /** Number of data loader workers. Must be a non-negative integer. */
    numberOfWorkers?: string;
    /** Type of optimizer. Must be either 'sgd', 'adam', or 'adamw'. */
    optimizer?: string;
    /** Random seed to be used when using deterministic training. */
    randomSeed?: string;
    /** Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1]. */
    stepLRGamma?: string;
    /** Value of step size when learning rate scheduler is 'step'. Must be a positive integer. */
    stepLRStepSize?: string;
    /** Training batch size. Must be a positive integer. */
    trainingBatchSize?: string;
    /** Validation batch size. Must be a positive integer. */
    validationBatchSize?: string;
    /** Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1]. */
    warmupCosineLRCycles?: string;
    /** Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer. */
    warmupCosineLRWarmupEpochs?: string;
    /** Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1]. */
    weightDecay?: string;
}

/**
 * Distribution expressions to sweep over values of model settings.
 * <example>
 * Some examples are:
 * <code>
 * ModelName = "choice('seresnext', 'resnest50')";
 * LearningRate = "uniform(0.001, 0.01)";
 * LayersToFreeze = "choice(0, 2)";
 * </code></example>
 * For more details on how to compose distribution expressions please check the documentation:
 * https://docs.microsoft.com/en-us/azure/machine-learning/how-to-tune-hyperparameters
 * For more information on the available settings please visit the official documentation:
 * https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
 */
export declare interface ImageModelDistributionSettingsClassification extends ImageModelDistributionSettings {
    /** Image crop size that is input to the neural network for the training dataset. Must be a positive integer. */
    trainingCropSize?: string;
    /** Image crop size that is input to the neural network for the validation dataset. Must be a positive integer. */
    validationCropSize?: string;
    /** Image size to which to resize before cropping for validation dataset. Must be a positive integer. */
    validationResizeSize?: string;
    /**
     * Weighted loss. The accepted values are 0 for no weighted loss.
     * 1 for weighted loss with sqrt.(class_weights). 2 for weighted loss with class_weights. Must be 0 or 1 or 2.
     */
    weightedLoss?: string;
}

/**
 * Distribution expressions to sweep over values of model settings.
 * <example>
 * Some examples are:
 * <code>
 * ModelName = "choice('seresnext', 'resnest50')";
 * LearningRate = "uniform(0.001, 0.01)";
 * LayersToFreeze = "choice(0, 2)";
 * </code></example>
 * For more details on how to compose distribution expressions please check the documentation:
 * https://docs.microsoft.com/en-us/azure/machine-learning/how-to-tune-hyperparameters
 * For more information on the available settings please visit the official documentation:
 * https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
 */
export declare interface ImageModelDistributionSettingsObjectDetection extends ImageModelDistributionSettings {
    /**
     * Maximum number of detections per image, for all classes. Must be a positive integer.
     * Note: This settings is not supported for the 'yolov5' algorithm.
     */
    boxDetectionsPerImage?: string;
    /**
     * During inference, only return proposals with a classification score greater than
     * BoxScoreThreshold. Must be a float in the range[0, 1].
     */
    boxScoreThreshold?: string;
    /**
     * Image size for train and validation. Must be a positive integer.
     * Note: The training run may get into CUDA OOM if the size is too big.
     * Note: This settings is only supported for the 'yolov5' algorithm.
     */
    imageSize?: string;
    /**
     * Maximum size of the image to be rescaled before feeding it to the backbone.
     * Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
     * Note: This settings is not supported for the 'yolov5' algorithm.
     */
    maxSize?: string;
    /**
     * Minimum size of the image to be rescaled before feeding it to the backbone.
     * Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
     * Note: This settings is not supported for the 'yolov5' algorithm.
     */
    minSize?: string;
    /**
     * Model size. Must be 'small', 'medium', 'large', or 'xlarge'.
     * Note: training run may get into CUDA OOM if the model size is too big.
     * Note: This settings is only supported for the 'yolov5' algorithm.
     */
    modelSize?: string;
    /**
     * Enable multi-scale image by varying image size by +/- 50%.
     * Note: training run may get into CUDA OOM if no sufficient GPU memory.
     * Note: This settings is only supported for the 'yolov5' algorithm.
     */
    multiScale?: string;
    /** IOU threshold used during inference in NMS post processing. Must be float in the range [0, 1]. */
    nmsIouThreshold?: string;
    /**
     * The grid size to use for tiling each image. Note: TileGridSize must not be
     * None to enable small object detection logic. A string containing two integers in mxn format.
     * Note: This settings is not supported for the 'yolov5' algorithm.
     */
    tileGridSize?: string;
    /**
     * Overlap ratio between adjacent tiles in each dimension. Must be float in the range [0, 1).
     * Note: This settings is not supported for the 'yolov5' algorithm.
     */
    tileOverlapRatio?: string;
    /**
     * The IOU threshold to use to perform NMS while merging predictions from tiles and image.
     * Used in validation/ inference. Must be float in the range [0, 1].
     * Note: This settings is not supported for the 'yolov5' algorithm.
     * NMS: Non-maximum suppression
     */
    tilePredictionsNmsThreshold?: string;
    /** IOU threshold to use when computing validation metric. Must be float in the range [0, 1]. */
    validationIouThreshold?: string;
    /** Metric computation method to use for validation metrics. Must be 'none', 'coco', 'voc', or 'coco_voc'. */
    validationMetricType?: string;
}

/**
 * Settings used for training the model.
 * For more information on the available settings please visit the official documentation:
 * https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
 */
export declare interface ImageModelSettings {
    /** Settings for advanced scenarios. */
    advancedSettings?: string;
    /** Enable AMSGrad when optimizer is 'adam' or 'adamw'. */
    amsGradient?: boolean;
    /** Settings for using Augmentations. */
    augmentations?: string;
    /** Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1]. */
    beta1?: number;
    /** Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1]. */
    beta2?: number;
    /** Frequency to store model checkpoints. Must be a positive integer. */
    checkpointFrequency?: number;
    /** The pretrained checkpoint model for incremental training. */
    checkpointModel?: MLFlowModelJobInput;
    /** The id of a previous run that has a pretrained checkpoint for incremental training. */
    checkpointRunId?: string;
    /** Whether to use distributed training. */
    distributed?: boolean;
    /** Enable early stopping logic during training. */
    earlyStopping?: boolean;
    /**
     * Minimum number of epochs or validation evaluations to wait before primary metric improvement
     * is tracked for early stopping. Must be a positive integer.
     */
    earlyStoppingDelay?: number;
    /**
     * Minimum number of epochs or validation evaluations with no primary metric improvement before
     * the run is stopped. Must be a positive integer.
     */
    earlyStoppingPatience?: number;
    /** Enable normalization when exporting ONNX model. */
    enableOnnxNormalization?: boolean;
    /** Frequency to evaluate validation dataset to get metric scores. Must be a positive integer. */
    evaluationFrequency?: number;
    /**
     * Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
     * updating the model weights while accumulating the gradients of those steps, and then using
     * the accumulated gradients to compute the weight updates. Must be a positive integer.
     */
    gradientAccumulationStep?: number;
    /**
     * Number of layers to freeze for the model. Must be a positive integer.
     * For instance, passing 2 as value for 'seresnext' means
     * freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
     * see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
     */
    layersToFreeze?: number;
    /** Initial learning rate. Must be a float in the range [0, 1]. */
    learningRate?: number;
    /** Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'. */
    learningRateScheduler?: LearningRateScheduler;
    /**
     * Name of the model to use for training.
     * For more information on the available models please visit the official documentation:
     * https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
     */
    modelName?: string;
    /** Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1]. */
    momentum?: number;
    /** Enable nesterov when optimizer is 'sgd'. */
    nesterov?: boolean;
    /** Number of training epochs. Must be a positive integer. */
    numberOfEpochs?: number;
    /** Number of data loader workers. Must be a non-negative integer. */
    numberOfWorkers?: number;
    /** Type of optimizer. */
    optimizer?: StochasticOptimizer;
    /** Random seed to be used when using deterministic training. */
    randomSeed?: number;
    /** Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1]. */
    stepLRGamma?: number;
    /** Value of step size when learning rate scheduler is 'step'. Must be a positive integer. */
    stepLRStepSize?: number;
    /** Training batch size. Must be a positive integer. */
    trainingBatchSize?: number;
    /** Validation batch size. Must be a positive integer. */
    validationBatchSize?: number;
    /** Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1]. */
    warmupCosineLRCycles?: number;
    /** Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer. */
    warmupCosineLRWarmupEpochs?: number;
    /** Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1]. */
    weightDecay?: number;
}

/**
 * Settings used for training the model.
 * For more information on the available settings please visit the official documentation:
 * https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
 */
export declare interface ImageModelSettingsClassification extends ImageModelSettings {
    /** Image crop size that is input to the neural network for the training dataset. Must be a positive integer. */
    trainingCropSize?: number;
    /** Image crop size that is input to the neural network for the validation dataset. Must be a positive integer. */
    validationCropSize?: number;
    /** Image size to which to resize before cropping for validation dataset. Must be a positive integer. */
    validationResizeSize?: number;
    /**
     * Weighted loss. The accepted values are 0 for no weighted loss.
     * 1 for weighted loss with sqrt.(class_weights). 2 for weighted loss with class_weights. Must be 0 or 1 or 2.
     */
    weightedLoss?: number;
}

/**
 * Settings used for training the model.
 * For more information on the available settings please visit the official documentation:
 * https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
 */
export declare interface ImageModelSettingsObjectDetection extends ImageModelSettings {
    /**
     * Maximum number of detections per image, for all classes. Must be a positive integer.
     * Note: This settings is not supported for the 'yolov5' algorithm.
     */
    boxDetectionsPerImage?: number;
    /**
     * During inference, only return proposals with a classification score greater than
     * BoxScoreThreshold. Must be a float in the range[0, 1].
     */
    boxScoreThreshold?: number;
    /**
     * Image size for train and validation. Must be a positive integer.
     * Note: The training run may get into CUDA OOM if the size is too big.
     * Note: This settings is only supported for the 'yolov5' algorithm.
     */
    imageSize?: number;
    /**
     * Maximum size of the image to be rescaled before feeding it to the backbone.
     * Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
     * Note: This settings is not supported for the 'yolov5' algorithm.
     */
    maxSize?: number;
    /**
     * Minimum size of the image to be rescaled before feeding it to the backbone.
     * Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
     * Note: This settings is not supported for the 'yolov5' algorithm.
     */
    minSize?: number;
    /**
     * Model size. Must be 'small', 'medium', 'large', or 'xlarge'.
     * Note: training run may get into CUDA OOM if the model size is too big.
     * Note: This settings is only supported for the 'yolov5' algorithm.
     */
    modelSize?: ModelSize;
    /**
     * Enable multi-scale image by varying image size by +/- 50%.
     * Note: training run may get into CUDA OOM if no sufficient GPU memory.
     * Note: This settings is only supported for the 'yolov5' algorithm.
     */
    multiScale?: boolean;
    /** IOU threshold used during inference in NMS post processing. Must be a float in the range [0, 1]. */
    nmsIouThreshold?: number;
    /**
     * The grid size to use for tiling each image. Note: TileGridSize must not be
     * None to enable small object detection logic. A string containing two integers in mxn format.
     * Note: This settings is not supported for the 'yolov5' algorithm.
     */
    tileGridSize?: string;
    /**
     * Overlap ratio between adjacent tiles in each dimension. Must be float in the range [0, 1).
     * Note: This settings is not supported for the 'yolov5' algorithm.
     */
    tileOverlapRatio?: number;
    /**
     * The IOU threshold to use to perform NMS while merging predictions from tiles and image.
     * Used in validation/ inference. Must be float in the range [0, 1].
     * Note: This settings is not supported for the 'yolov5' algorithm.
     */
    tilePredictionsNmsThreshold?: number;
    /** IOU threshold to use when computing validation metric. Must be float in the range [0, 1]. */
    validationIouThreshold?: number;
    /** Metric computation method to use for validation metrics. */
    validationMetricType?: ValidationMetricType;
}

/**
 * Image Object Detection. Object detection is used to identify objects in an image and locate each object with a
 * bounding box e.g. locate all dogs and cats in an image and draw a bounding box around each.
 */
export declare interface ImageObjectDetection extends ImageObjectDetectionBase, AutoMLVertical {
    /** Primary metric to optimize for this task. */
    primaryMetric?: ObjectDetectionPrimaryMetrics;
}

export declare interface ImageObjectDetectionBase extends ImageVertical {
    /** Settings used for training the model. */
    modelSettings?: ImageModelSettingsObjectDetection;
    /** Search space for sampling different combinations of models and their hyperparameters. */
    searchSpace?: ImageModelDistributionSettingsObjectDetection[];
}

/** Model sweeping and hyperparameter sweeping related settings. */
export declare interface ImageSweepSettings {
    /** Type of early termination policy. */
    earlyTermination?: EarlyTerminationPolicyUnion;
    /** [Required] Type of the hyperparameter sampling algorithms. */
    samplingAlgorithm: SamplingAlgorithmType;
}

/**
 * Abstract class for AutoML tasks that train image (computer vision) models -
 * such as Image Classification / Image Classification Multilabel / Image Object Detection / Image Instance Segmentation.
 */
export declare interface ImageVertical {
    /** [Required] Limit settings for the AutoML job. */
    limitSettings: ImageLimitSettings;
    /** Model sweeping and hyperparameter sweeping related settings. */
    sweepSettings?: ImageSweepSettings;
    /** Validation data inputs. */
    validationData?: MLTableJobInput;
    /**
     * The fraction of training dataset that needs to be set aside for validation purpose.
     * Values between (0.0 , 1.0)
     * Applied when validation dataset is not provided.
     */
    validationDataSize?: number;
}

export declare interface InferenceContainerProperties {
    /** The route to check the liveness of the inference server container. */
    livenessRoute?: Route;
    /** The route to check the readiness of the inference server container. */
    readinessRoute?: Route;
    /** The port to send the scoring requests to, within the inference server container. */
    scoringRoute?: Route;
}

/**
 * Defines values for InputDeliveryMode. \
 * {@link KnownInputDeliveryMode} can be used interchangeably with InputDeliveryMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ReadOnlyMount** \
 * **ReadWriteMount** \
 * **Download** \
 * **Direct** \
 * **EvalMount** \
 * **EvalDownload**
 */
export declare type InputDeliveryMode = string;

/**
 * Defines values for InstanceSegmentationPrimaryMetrics. \
 * {@link KnownInstanceSegmentationPrimaryMetrics} can be used interchangeably with InstanceSegmentationPrimaryMetrics,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **MeanAveragePrecision**: Mean Average Precision (MAP) is the average of AP (Average Precision).
 * AP is calculated for each class and averaged to get the MAP.
 */
export declare type InstanceSegmentationPrimaryMetrics = string;

/** Instance type schema. */
export declare interface InstanceTypeSchema {
    /** Node Selector */
    nodeSelector?: {
        [propertyName: string]: string | null;
    };
    /** Resource requests/limits for this instance type */
    resources?: InstanceTypeSchemaResources;
}

/** Resource requests/limits for this instance type */
export declare interface InstanceTypeSchemaResources {
    /** Resource requests for this instance type */
    requests?: {
        [propertyName: string]: string;
    };
    /** Resource limits for this instance type */
    limits?: {
        [propertyName: string]: string;
    };
}

/** Azure Resource Manager resource envelope. */
export declare interface JobBase extends Resource {
    /** [Required] Additional attributes of the entity. */
    properties: JobBasePropertiesUnion;
}

/** Base definition for a job. */
export declare interface JobBaseProperties extends ResourceBase {
    /** ARM resource ID of the component resource. */
    componentId?: string;
    /** ARM resource ID of the compute resource. */
    computeId?: string;
    /** Display name of job. */
    displayName?: string;
    /** The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment. */
    experimentName?: string;
    /**
     * Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
     * Defaults to AmlToken if null.
     */
    identity?: IdentityConfigurationUnion;
    /** Is the asset archived? */
    isArchived?: boolean;
    /** [Required] Specifies the type of job. */
    jobType: JobType;
    /**
     * List of JobEndpoints.
     * For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
     */
    services?: {
        [propertyName: string]: JobService | null;
    };
    /**
     * Status of the job.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: JobStatus;
}

export declare type JobBasePropertiesUnion = JobBaseProperties | AutoMLJob | CommandJob | PipelineJob | SweepJob;

/** A paginated list of JobBase entities. */
export declare interface JobBaseResourceArmPaginatedResult {
    /** The link to the next page of JobBase objects. If null, there are no additional pages. */
    nextLink?: string;
    /** An array of objects of type JobBase. */
    value?: JobBase[];
}

/** Command job definition. */
export declare interface JobInput {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    jobInputType: "mltable" | "custom_model" | "mlflow_model" | "literal" | "triton_model" | "uri_file" | "uri_folder";
    /** Description for the input. */
    description?: string;
}

/**
 * Defines values for JobInputType. \
 * {@link KnownJobInputType} can be used interchangeably with JobInputType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **literal** \
 * **uri_file** \
 * **uri_folder** \
 * **mltable** \
 * **custom_model** \
 * **mlflow_model** \
 * **triton_model**
 */
export declare type JobInputType = string;

export declare type JobInputUnion = JobInput | MLTableJobInput | CustomModelJobInput | MLFlowModelJobInput | LiteralJobInput | TritonModelJobInput | UriFileJobInput | UriFolderJobInput;

export declare interface JobLimits {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    jobLimitsType: "Command" | "Sweep";
    /** The max run duration in ISO 8601 format, after which the job will be cancelled. Only supports duration with precision as low as Seconds. */
    timeout?: string;
}

/**
 * Defines values for JobLimitsType. \
 * {@link KnownJobLimitsType} can be used interchangeably with JobLimitsType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Command** \
 * **Sweep**
 */
export declare type JobLimitsType = string;

export declare type JobLimitsUnion = JobLimits | CommandJobLimits | SweepJobLimits;

/** Job output definition container information on where to find job output/logs. */
export declare interface JobOutput {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    jobOutputType: "custom_model" | "mlflow_model" | "mltable" | "triton_model" | "uri_file" | "uri_folder";
    /** Description for the output. */
    description?: string;
}

/**
 * Defines values for JobOutputType. \
 * {@link KnownJobOutputType} can be used interchangeably with JobOutputType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **uri_file** \
 * **uri_folder** \
 * **mltable** \
 * **custom_model** \
 * **mlflow_model** \
 * **triton_model**
 */
export declare type JobOutputType = string;

export declare type JobOutputUnion = JobOutput | CustomModelJobOutput | MLFlowModelJobOutput | MLTableJobOutput | TritonModelJobOutput | UriFileJobOutput | UriFolderJobOutput;

export declare interface JobResourceConfiguration extends ResourceConfiguration {
    /** Extra arguments to pass to the Docker run command. This would override any parameters that have already been set by the system, or in this section. This parameter is only supported for Azure ML compute types. */
    dockerArgs?: string;
    /** Size of the docker container's shared memory block. This should be in the format of (number)(unit) where number as to be greater than 0 and the unit can be one of b(bytes), k(kilobytes), m(megabytes), or g(gigabytes). */
    shmSize?: string;
}

/** Interface representing a Jobs. */
export declare interface Jobs {
    /**
     * Lists Jobs in the workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, options?: JobsListOptionalParams): PagedAsyncIterableIterator<JobBase>;
    /**
     * Deletes a Job (asynchronous).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param id The name and identifier for the Job. This is case-sensitive.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, workspaceName: string, id: string, options?: JobsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes a Job (asynchronous).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param id The name and identifier for the Job. This is case-sensitive.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, workspaceName: string, id: string, options?: JobsDeleteOptionalParams): Promise<void>;
    /**
     * Gets a Job by name/id.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param id The name and identifier for the Job. This is case-sensitive.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, id: string, options?: JobsGetOptionalParams): Promise<JobsGetResponse>;
    /**
     * Creates and executes a Job.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param id The name and identifier for the Job. This is case-sensitive.
     * @param body Job definition object.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, workspaceName: string, id: string, body: JobBase, options?: JobsCreateOrUpdateOptionalParams): Promise<JobsCreateOrUpdateResponse>;
    /**
     * Cancels a Job (asynchronous).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param id The name and identifier for the Job. This is case-sensitive.
     * @param options The options parameters.
     */
    beginCancel(resourceGroupName: string, workspaceName: string, id: string, options?: JobsCancelOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Cancels a Job (asynchronous).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param id The name and identifier for the Job. This is case-sensitive.
     * @param options The options parameters.
     */
    beginCancelAndWait(resourceGroupName: string, workspaceName: string, id: string, options?: JobsCancelOptionalParams): Promise<void>;
}

/** Defines headers for Jobs_cancel operation. */
export declare interface JobsCancelHeaders {
    /** URI to poll for asynchronous operation result. */
    location?: string;
    /** Duration the client should wait between requests, in seconds. */
    retryAfter?: number;
}

/** Optional parameters. */
export declare interface JobsCancelOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

export declare interface JobScheduleAction extends ScheduleActionBase {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    actionType: "CreateJob";
    /** [Required] Defines Schedule action definition details. */
    jobDefinition: JobBasePropertiesUnion;
}

/** Optional parameters. */
export declare interface JobsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type JobsCreateOrUpdateResponse = JobBase;

/** Defines headers for Jobs_delete operation. */
export declare interface JobsDeleteHeaders {
    /** Timeout for the client to use when polling the asynchronous operation. */
    xMsAsyncOperationTimeout?: string;
    /** URI to poll for asynchronous operation result. */
    location?: string;
    /** Duration the client should wait between requests, in seconds. */
    retryAfter?: number;
}

/** Optional parameters. */
export declare interface JobsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Job endpoint definition */
export declare interface JobService {
    /** Url for endpoint. */
    endpoint?: string;
    /**
     * Any error in the service.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly errorMessage?: string;
    /** Endpoint type. */
    jobServiceType?: string;
    /** Port for endpoint. */
    port?: number;
    /** Additional properties to set on the endpoint. */
    properties?: {
        [propertyName: string]: string | null;
    };
    /**
     * Status of endpoint.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: string;
}

/** Optional parameters. */
export declare interface JobsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type JobsGetResponse = JobBase;

/** Optional parameters. */
export declare interface JobsListNextOptionalParams extends coreClient.OperationOptions {
    /** Continuation token for pagination. */
    skip?: string;
    /** View type for including/excluding (for example) archived entities. */
    listViewType?: ListViewType;
    /** Type of job to be returned. */
    jobType?: string;
    /** Jobs returned will have this tag key. */
    tag?: string;
}

/** Contains response data for the listNext operation. */
export declare type JobsListNextResponse = JobBaseResourceArmPaginatedResult;

/** Optional parameters. */
export declare interface JobsListOptionalParams extends coreClient.OperationOptions {
    /** Continuation token for pagination. */
    skip?: string;
    /** View type for including/excluding (for example) archived entities. */
    listViewType?: ListViewType;
    /** Type of job to be returned. */
    jobType?: string;
    /** Jobs returned will have this tag key. */
    tag?: string;
}

/** Contains response data for the list operation. */
export declare type JobsListResponse = JobBaseResourceArmPaginatedResult;

/**
 * Defines values for JobStatus. \
 * {@link KnownJobStatus} can be used interchangeably with JobStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotStarted**: Run hasn't started yet. \
 * **Starting**: Run has started. The user has a run ID. \
 * **Provisioning**: (Not used currently) It will be used if ES is creating the compute target. \
 * **Preparing**: The run environment is being prepared. \
 * **Queued**: The job is queued in the compute target. For example, in BatchAI the job is in queued state, while waiting for all required nodes to be ready. \
 * **Running**: The job started to run in the compute target. \
 * **Finalizing**: Job is completed in the target. It is in output collection state now. \
 * **CancelRequested**: Cancellation has been requested for the job. \
 * **Completed**: Job completed successfully. This reflects that both the job itself and output collection states completed successfully \
 * **Failed**: Job failed. \
 * **Canceled**: Following cancellation request, the job is now successfully canceled. \
 * **NotResponding**: When heartbeat is enabled, if the run isn't updating any information to RunHistory then the run goes to NotResponding state.
 * NotResponding is the only state that is exempt from strict transition orders. A run can go from NotResponding to any of the previous states. \
 * **Paused**: The job is paused by users. Some adjustment to labeling jobs can be made only in paused state. \
 * **Unknown**: Default job status if not mapped to all other statuses
 */
export declare type JobStatus = string;

/**
 * Defines values for JobType. \
 * {@link KnownJobType} can be used interchangeably with JobType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AutoML** \
 * **Command** \
 * **Sweep** \
 * **Pipeline**
 */
export declare type JobType = string;

/**
 * Defines values for KeyType. \
 * {@link KnownKeyType} can be used interchangeably with KeyType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Primary** \
 * **Secondary**
 */
declare type KeyType_2 = string;
export { KeyType_2 as KeyType }

/** Known values of {@link AllocationState} that the service accepts. */
export declare enum KnownAllocationState {
    /** Steady */
    Steady = "Steady",
    /** Resizing */
    Resizing = "Resizing"
}

/** Known values of {@link ApplicationSharingPolicy} that the service accepts. */
export declare enum KnownApplicationSharingPolicy {
    /** Personal */
    Personal = "Personal",
    /** Shared */
    Shared = "Shared"
}

/** Known values of {@link AutoRebuildSetting} that the service accepts. */
export declare enum KnownAutoRebuildSetting {
    /** Disabled */
    Disabled = "Disabled",
    /** OnBaseImageUpdate */
    OnBaseImageUpdate = "OnBaseImageUpdate"
}

/** Known values of {@link Autosave} that the service accepts. */
export declare enum KnownAutosave {
    /** None */
    None = "None",
    /** Local */
    Local = "Local",
    /** Remote */
    Remote = "Remote"
}

/** Known values of {@link BatchLoggingLevel} that the service accepts. */
export declare enum KnownBatchLoggingLevel {
    /** Info */
    Info = "Info",
    /** Warning */
    Warning = "Warning",
    /** Debug */
    Debug = "Debug"
}

/** Known values of {@link BatchOutputAction} that the service accepts. */
export declare enum KnownBatchOutputAction {
    /** SummaryOnly */
    SummaryOnly = "SummaryOnly",
    /** AppendRow */
    AppendRow = "AppendRow"
}

/** Known values of {@link BillingCurrency} that the service accepts. */
export declare enum KnownBillingCurrency {
    /** USD */
    USD = "USD"
}

/** Known values of {@link BlockedTransformers} that the service accepts. */
export declare enum KnownBlockedTransformers {
    /** Target encoding for text data. */
    TextTargetEncoder = "TextTargetEncoder",
    /** Ohe hot encoding creates a binary feature transformation. */
    OneHotEncoder = "OneHotEncoder",
    /** Target encoding for categorical data. */
    CatTargetEncoder = "CatTargetEncoder",
    /** Tf-Idf stands for, term-frequency times inverse document-frequency. This is a common term weighting scheme for identifying information from documents. */
    TfIdf = "TfIdf",
    /** Weight of Evidence encoding is a technique used to encode categorical variables. It uses the natural log of the P(1)/P(0) to create weights. */
    WoETargetEncoder = "WoETargetEncoder",
    /** Label encoder converts labels/categorical variables in a numerical form. */
    LabelEncoder = "LabelEncoder",
    /** Word embedding helps represents words or phrases as a vector, or a series of numbers. */
    WordEmbedding = "WordEmbedding",
    /** Naive Bayes is a classified that is used for classification of discrete features that are categorically distributed. */
    NaiveBayes = "NaiveBayes",
    /** Count Vectorizer converts a collection of text documents to a matrix of token counts. */
    CountVectorizer = "CountVectorizer",
    /** Hashing One Hot Encoder can turn categorical variables into a limited number of new features. This is often used for high-cardinality categorical features. */
    HashOneHotEncoder = "HashOneHotEncoder"
}

/** Known values of {@link Caching} that the service accepts. */
export declare enum KnownCaching {
    /** None */
    None = "None",
    /** ReadOnly */
    ReadOnly = "ReadOnly",
    /** ReadWrite */
    ReadWrite = "ReadWrite"
}

/** Known values of {@link ClassificationModels} that the service accepts. */
export declare enum KnownClassificationModels {
    /**
     * Logistic regression is a fundamental classification technique.
     * It belongs to the group of linear classifiers and is somewhat similar to polynomial and linear regression.
     * Logistic regression is fast and relatively uncomplicated, and it's convenient for you to interpret the results.
     * Although it's essentially a method for binary classification, it can also be applied to multiclass problems.
     */
    LogisticRegression = "LogisticRegression",
    /**
     * SGD: Stochastic gradient descent is an optimization algorithm often used in machine learning applications
     * to find the model parameters that correspond to the best fit between predicted and actual outputs.
     */
    SGD = "SGD",
    /**
     * The multinomial Naive Bayes classifier is suitable for classification with discrete features (e.g., word counts for text classification).
     * The multinomial distribution normally requires integer feature counts. However, in practice, fractional counts such as tf-idf may also work.
     */
    MultinomialNaiveBayes = "MultinomialNaiveBayes",
    /** Naive Bayes classifier for multivariate Bernoulli models. */
    BernoulliNaiveBayes = "BernoulliNaiveBayes",
    /**
     * A support vector machine (SVM) is a supervised machine learning model that uses classification algorithms for two-group classification problems.
     * After giving an SVM model sets of labeled training data for each category, they're able to categorize new text.
     */
    SVM = "SVM",
    /**
     * A support vector machine (SVM) is a supervised machine learning model that uses classification algorithms for two-group classification problems.
     * After giving an SVM model sets of labeled training data for each category, they're able to categorize new text.
     * Linear SVM performs best when input data is linear, i.e., data can be easily classified by drawing the straight line between classified values on a plotted graph.
     */
    LinearSVM = "LinearSVM",
    /**
     * K-nearest neighbors (KNN) algorithm uses 'feature similarity' to predict the values of new datapoints
     * which further means that the new data point will be assigned a value based on how closely it matches the points in the training set.
     */
    KNN = "KNN",
    /**
     * Decision Trees are a non-parametric supervised learning method used for both classification and regression tasks.
     * The goal is to create a model that predicts the value of a target variable by learning simple decision rules inferred from the data features.
     */
    DecisionTree = "DecisionTree",
    /**
     * Random forest is a supervised learning algorithm.
     * The "forest" it builds, is an ensemble of decision trees, usually trained with the “bagging” method.
     * The general idea of the bagging method is that a combination of learning models increases the overall result.
     */
    RandomForest = "RandomForest",
    /** Extreme Trees is an ensemble machine learning algorithm that combines the predictions from many decision trees. It is related to the widely used random forest algorithm. */
    ExtremeRandomTrees = "ExtremeRandomTrees",
    /** LightGBM is a gradient boosting framework that uses tree based learning algorithms. */
    LightGBM = "LightGBM",
    /** The technique of transiting week learners into a strong learner is called Boosting. The gradient boosting algorithm process works on this theory of execution. */
    GradientBoosting = "GradientBoosting",
    /** XGBoost: Extreme Gradient Boosting Algorithm. This algorithm is used for structured data where target column values can be divided into distinct class values. */
    XGBoostClassifier = "XGBoostClassifier"
}

/** Known values of {@link ClassificationMultilabelPrimaryMetrics} that the service accepts. */
export declare enum KnownClassificationMultilabelPrimaryMetrics {
    /**
     * AUC is the Area under the curve.
     * This metric represents arithmetic mean of the score for each class,
     * weighted by the number of true instances in each class.
     */
    AUCWeighted = "AUCWeighted",
    /** Accuracy is the ratio of predictions that exactly match the true class labels. */
    Accuracy = "Accuracy",
    /**
     * Normalized macro recall is recall macro-averaged and normalized, so that random
     * performance has a score of 0, and perfect performance has a score of 1.
     */
    NormMacroRecall = "NormMacroRecall",
    /**
     * The arithmetic mean of the average precision score for each class, weighted by
     * the number of true instances in each class.
     */
    AveragePrecisionScoreWeighted = "AveragePrecisionScoreWeighted",
    /** The arithmetic mean of precision for each class, weighted by number of true instances in each class. */
    PrecisionScoreWeighted = "PrecisionScoreWeighted",
    /** Intersection Over Union. Intersection of predictions divided by union of predictions. */
    IOU = "IOU"
}

/** Known values of {@link ClassificationPrimaryMetrics} that the service accepts. */
export declare enum KnownClassificationPrimaryMetrics {
    /**
     * AUC is the Area under the curve.
     * This metric represents arithmetic mean of the score for each class,
     * weighted by the number of true instances in each class.
     */
    AUCWeighted = "AUCWeighted",
    /** Accuracy is the ratio of predictions that exactly match the true class labels. */
    Accuracy = "Accuracy",
    /**
     * Normalized macro recall is recall macro-averaged and normalized, so that random
     * performance has a score of 0, and perfect performance has a score of 1.
     */
    NormMacroRecall = "NormMacroRecall",
    /**
     * The arithmetic mean of the average precision score for each class, weighted by
     * the number of true instances in each class.
     */
    AveragePrecisionScoreWeighted = "AveragePrecisionScoreWeighted",
    /** The arithmetic mean of precision for each class, weighted by number of true instances in each class. */
    PrecisionScoreWeighted = "PrecisionScoreWeighted"
}

/** Known values of {@link ClusterPurpose} that the service accepts. */
export declare enum KnownClusterPurpose {
    /** FastProd */
    FastProd = "FastProd",
    /** DenseProd */
    DenseProd = "DenseProd",
    /** DevTest */
    DevTest = "DevTest"
}

/** Known values of {@link ComputeInstanceAuthorizationType} that the service accepts. */
export declare enum KnownComputeInstanceAuthorizationType {
    /** Personal */
    Personal = "personal"
}

/** Known values of {@link ComputeInstanceState} that the service accepts. */
export declare enum KnownComputeInstanceState {
    /** Creating */
    Creating = "Creating",
    /** CreateFailed */
    CreateFailed = "CreateFailed",
    /** Deleting */
    Deleting = "Deleting",
    /** Running */
    Running = "Running",
    /** Restarting */
    Restarting = "Restarting",
    /** JobRunning */
    JobRunning = "JobRunning",
    /** SettingUp */
    SettingUp = "SettingUp",
    /** SetupFailed */
    SetupFailed = "SetupFailed",
    /** Starting */
    Starting = "Starting",
    /** Stopped */
    Stopped = "Stopped",
    /** Stopping */
    Stopping = "Stopping",
    /** UserSettingUp */
    UserSettingUp = "UserSettingUp",
    /** UserSetupFailed */
    UserSetupFailed = "UserSetupFailed",
    /** Unknown */
    Unknown = "Unknown",
    /** Unusable */
    Unusable = "Unusable"
}

/** Known values of {@link ComputePowerAction} that the service accepts. */
export declare enum KnownComputePowerAction {
    /** Start */
    Start = "Start",
    /** Stop */
    Stop = "Stop"
}

/** Known values of {@link ComputeType} that the service accepts. */
export declare enum KnownComputeType {
    /** AKS */
    AKS = "AKS",
    /** Kubernetes */
    Kubernetes = "Kubernetes",
    /** AmlCompute */
    AmlCompute = "AmlCompute",
    /** ComputeInstance */
    ComputeInstance = "ComputeInstance",
    /** DataFactory */
    DataFactory = "DataFactory",
    /** VirtualMachine */
    VirtualMachine = "VirtualMachine",
    /** HDInsight */
    HDInsight = "HDInsight",
    /** Databricks */
    Databricks = "Databricks",
    /** DataLakeAnalytics */
    DataLakeAnalytics = "DataLakeAnalytics",
    /** SynapseSpark */
    SynapseSpark = "SynapseSpark"
}

/** Known values of {@link ConnectionAuthType} that the service accepts. */
export declare enum KnownConnectionAuthType {
    /** PAT */
    PAT = "PAT",
    /** ManagedIdentity */
    ManagedIdentity = "ManagedIdentity",
    /** UsernamePassword */
    UsernamePassword = "UsernamePassword",
    /** None */
    None = "None",
    /** SAS */
    SAS = "SAS"
}

/** Known values of {@link ConnectionCategory} that the service accepts. */
export declare enum KnownConnectionCategory {
    /** PythonFeed */
    PythonFeed = "PythonFeed",
    /** ContainerRegistry */
    ContainerRegistry = "ContainerRegistry",
    /** Git */
    Git = "Git"
}

/** Known values of {@link ContainerType} that the service accepts. */
export declare enum KnownContainerType {
    /** StorageInitializer */
    StorageInitializer = "StorageInitializer",
    /** InferenceServer */
    InferenceServer = "InferenceServer"
}

/** Known values of {@link CreatedByType} that the service accepts. */
export declare enum KnownCreatedByType {
    /** User */
    User = "User",
    /** Application */
    Application = "Application",
    /** ManagedIdentity */
    ManagedIdentity = "ManagedIdentity",
    /** Key */
    Key = "Key"
}

/** Known values of {@link CredentialsType} that the service accepts. */
export declare enum KnownCredentialsType {
    /** AccountKey */
    AccountKey = "AccountKey",
    /** Certificate */
    Certificate = "Certificate",
    /** None */
    None = "None",
    /** Sas */
    Sas = "Sas",
    /** ServicePrincipal */
    ServicePrincipal = "ServicePrincipal"
}

/** Known values of {@link DatastoreType} that the service accepts. */
export declare enum KnownDatastoreType {
    /** AzureBlob */
    AzureBlob = "AzureBlob",
    /** AzureDataLakeGen1 */
    AzureDataLakeGen1 = "AzureDataLakeGen1",
    /** AzureDataLakeGen2 */
    AzureDataLakeGen2 = "AzureDataLakeGen2",
    /** AzureFile */
    AzureFile = "AzureFile"
}

/** Known values of {@link DataType} that the service accepts. */
export declare enum KnownDataType {
    /** UriFile */
    UriFile = "uri_file",
    /** UriFolder */
    UriFolder = "uri_folder",
    /** Mltable */
    Mltable = "mltable"
}

/** Known values of {@link DeploymentProvisioningState} that the service accepts. */
export declare enum KnownDeploymentProvisioningState {
    /** Creating */
    Creating = "Creating",
    /** Deleting */
    Deleting = "Deleting",
    /** Scaling */
    Scaling = "Scaling",
    /** Updating */
    Updating = "Updating",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Canceled */
    Canceled = "Canceled"
}

/** Known values of {@link DiagnoseResultLevel} that the service accepts. */
export declare enum KnownDiagnoseResultLevel {
    /** Warning */
    Warning = "Warning",
    /** Error */
    Error = "Error",
    /** Information */
    Information = "Information"
}

/** Known values of {@link DistributionType} that the service accepts. */
export declare enum KnownDistributionType {
    /** PyTorch */
    PyTorch = "PyTorch",
    /** TensorFlow */
    TensorFlow = "TensorFlow",
    /** Mpi */
    Mpi = "Mpi"
}

/** Known values of {@link EarlyTerminationPolicyType} that the service accepts. */
export declare enum KnownEarlyTerminationPolicyType {
    /** Bandit */
    Bandit = "Bandit",
    /** MedianStopping */
    MedianStopping = "MedianStopping",
    /** TruncationSelection */
    TruncationSelection = "TruncationSelection"
}

/** Known values of {@link EgressPublicNetworkAccessType} that the service accepts. */
export declare enum KnownEgressPublicNetworkAccessType {
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled"
}

/** Known values of {@link EncryptionStatus} that the service accepts. */
export declare enum KnownEncryptionStatus {
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled"
}

/** Known values of {@link EndpointAuthMode} that the service accepts. */
export declare enum KnownEndpointAuthMode {
    /** AMLToken */
    AMLToken = "AMLToken",
    /** Key */
    Key = "Key",
    /** AADToken */
    AADToken = "AADToken"
}

/** Known values of {@link EndpointComputeType} that the service accepts. */
export declare enum KnownEndpointComputeType {
    /** Managed */
    Managed = "Managed",
    /** Kubernetes */
    Kubernetes = "Kubernetes",
    /** AzureMLCompute */
    AzureMLCompute = "AzureMLCompute"
}

/** Known values of {@link EndpointProvisioningState} that the service accepts. */
export declare enum KnownEndpointProvisioningState {
    /** Creating */
    Creating = "Creating",
    /** Deleting */
    Deleting = "Deleting",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Updating */
    Updating = "Updating",
    /** Canceled */
    Canceled = "Canceled"
}

/** Known values of {@link EnvironmentType} that the service accepts. */
export declare enum KnownEnvironmentType {
    /** Curated */
    Curated = "Curated",
    /** UserCreated */
    UserCreated = "UserCreated"
}

/** Known values of {@link FeatureLags} that the service accepts. */
export declare enum KnownFeatureLags {
    /** No feature lags generated. */
    None = "None",
    /** System auto-generates feature lags. */
    Auto = "Auto"
}

/** Known values of {@link FeaturizationMode} that the service accepts. */
export declare enum KnownFeaturizationMode {
    /** Auto mode, system performs featurization without any custom featurization inputs. */
    Auto = "Auto",
    /** Custom featurization. */
    Custom = "Custom",
    /** Featurization off. 'Forecasting' task cannot use this value. */
    Off = "Off"
}

/** Known values of {@link ForecastHorizonMode} that the service accepts. */
export declare enum KnownForecastHorizonMode {
    /** Forecast horizon to be determined automatically. */
    Auto = "Auto",
    /** Use the custom forecast horizon. */
    Custom = "Custom"
}

/** Known values of {@link ForecastingModels} that the service accepts. */
export declare enum KnownForecastingModels {
    /**
     * Auto-Autoregressive Integrated Moving Average (ARIMA) model uses time-series data and statistical analysis to interpret the data and make future predictions.
     * This model aims to explain data by using time series data on its past values and uses linear regression to make predictions.
     */
    AutoArima = "AutoArima",
    /**
     * Prophet is a procedure for forecasting time series data based on an additive model where non-linear trends are fit with yearly, weekly, and daily seasonality, plus holiday effects.
     * It works best with time series that have strong seasonal effects and several seasons of historical data. Prophet is robust to missing data and shifts in the trend, and typically handles outliers well.
     */
    Prophet = "Prophet",
    /** The Naive forecasting model makes predictions by carrying forward the latest target value for each time-series in the training data. */
    Naive = "Naive",
    /** The Seasonal Naive forecasting model makes predictions by carrying forward the latest season of target values for each time-series in the training data. */
    SeasonalNaive = "SeasonalNaive",
    /** The Average forecasting model makes predictions by carrying forward the average of the target values for each time-series in the training data. */
    Average = "Average",
    /** The Seasonal Average forecasting model makes predictions by carrying forward the average value of the latest season of data for each time-series in the training data. */
    SeasonalAverage = "SeasonalAverage",
    /** Exponential smoothing is a time series forecasting method for univariate data that can be extended to support data with a systematic trend or seasonal component. */
    ExponentialSmoothing = "ExponentialSmoothing",
    /**
     * An Autoregressive Integrated Moving Average with Explanatory Variable (ARIMAX) model can be viewed as a multiple regression model with one or more autoregressive (AR) terms and/or one or more moving average (MA) terms.
     * This method is suitable for forecasting when data is stationary/non stationary, and multivariate with any type of data pattern, i.e., level/trend /seasonality/cyclicity.
     */
    Arimax = "Arimax",
    /** TCNForecaster: Temporal Convolutional Networks Forecaster. //TODO: Ask forecasting team for brief intro. */
    TCNForecaster = "TCNForecaster",
    /** Elastic net is a popular type of regularized linear regression that combines two popular penalties, specifically the L1 and L2 penalty functions. */
    ElasticNet = "ElasticNet",
    /** The technique of transiting week learners into a strong learner is called Boosting. The gradient boosting algorithm process works on this theory of execution. */
    GradientBoosting = "GradientBoosting",
    /**
     * Decision Trees are a non-parametric supervised learning method used for both classification and regression tasks.
     * The goal is to create a model that predicts the value of a target variable by learning simple decision rules inferred from the data features.
     */
    DecisionTree = "DecisionTree",
    /**
     * K-nearest neighbors (KNN) algorithm uses 'feature similarity' to predict the values of new datapoints
     * which further means that the new data point will be assigned a value based on how closely it matches the points in the training set.
     */
    KNN = "KNN",
    /** Lasso model fit with Least Angle Regression a.k.a. Lars. It is a Linear Model trained with an L1 prior as regularizer. */
    LassoLars = "LassoLars",
    /**
     * SGD: Stochastic gradient descent is an optimization algorithm often used in machine learning applications
     * to find the model parameters that correspond to the best fit between predicted and actual outputs.
     * It's an inexact but powerful technique.
     */
    SGD = "SGD",
    /**
     * Random forest is a supervised learning algorithm.
     * The "forest" it builds, is an ensemble of decision trees, usually trained with the “bagging” method.
     * The general idea of the bagging method is that a combination of learning models increases the overall result.
     */
    RandomForest = "RandomForest",
    /** Extreme Trees is an ensemble machine learning algorithm that combines the predictions from many decision trees. It is related to the widely used random forest algorithm. */
    ExtremeRandomTrees = "ExtremeRandomTrees",
    /** LightGBM is a gradient boosting framework that uses tree based learning algorithms. */
    LightGBM = "LightGBM",
    /** XGBoostRegressor: Extreme Gradient Boosting Regressor is a supervised machine learning model using ensemble of base learners. */
    XGBoostRegressor = "XGBoostRegressor"
}

/** Known values of {@link ForecastingPrimaryMetrics} that the service accepts. */
export declare enum KnownForecastingPrimaryMetrics {
    /** The Spearman's rank coefficient of correlation is a non-parametric measure of rank correlation. */
    SpearmanCorrelation = "SpearmanCorrelation",
    /** The Normalized Root Mean Squared Error (NRMSE) the RMSE facilitates the comparison between models with different scales. */
    NormalizedRootMeanSquaredError = "NormalizedRootMeanSquaredError",
    /** The R2 score is one of the performance evaluation measures for forecasting-based machine learning models. */
    R2Score = "R2Score",
    /** The Normalized Mean Absolute Error (NMAE) is a validation metric to compare the Mean Absolute Error (MAE) of (time) series with different scales. */
    NormalizedMeanAbsoluteError = "NormalizedMeanAbsoluteError"
}

/** Known values of {@link Goal} that the service accepts. */
export declare enum KnownGoal {
    /** Minimize */
    Minimize = "Minimize",
    /** Maximize */
    Maximize = "Maximize"
}

/** Known values of {@link IdentityConfigurationType} that the service accepts. */
export declare enum KnownIdentityConfigurationType {
    /** Managed */
    Managed = "Managed",
    /** AMLToken */
    AMLToken = "AMLToken",
    /** UserIdentity */
    UserIdentity = "UserIdentity"
}

/** Known values of {@link InputDeliveryMode} that the service accepts. */
export declare enum KnownInputDeliveryMode {
    /** ReadOnlyMount */
    ReadOnlyMount = "ReadOnlyMount",
    /** ReadWriteMount */
    ReadWriteMount = "ReadWriteMount",
    /** Download */
    Download = "Download",
    /** Direct */
    Direct = "Direct",
    /** EvalMount */
    EvalMount = "EvalMount",
    /** EvalDownload */
    EvalDownload = "EvalDownload"
}

/** Known values of {@link InstanceSegmentationPrimaryMetrics} that the service accepts. */
export declare enum KnownInstanceSegmentationPrimaryMetrics {
    /**
     * Mean Average Precision (MAP) is the average of AP (Average Precision).
     * AP is calculated for each class and averaged to get the MAP.
     */
    MeanAveragePrecision = "MeanAveragePrecision"
}

/** Known values of {@link JobInputType} that the service accepts. */
export declare enum KnownJobInputType {
    /** Literal */
    Literal = "literal",
    /** UriFile */
    UriFile = "uri_file",
    /** UriFolder */
    UriFolder = "uri_folder",
    /** Mltable */
    Mltable = "mltable",
    /** CustomModel */
    CustomModel = "custom_model",
    /** MlflowModel */
    MlflowModel = "mlflow_model",
    /** TritonModel */
    TritonModel = "triton_model"
}

/** Known values of {@link JobLimitsType} that the service accepts. */
export declare enum KnownJobLimitsType {
    /** Command */
    Command = "Command",
    /** Sweep */
    Sweep = "Sweep"
}

/** Known values of {@link JobOutputType} that the service accepts. */
export declare enum KnownJobOutputType {
    /** UriFile */
    UriFile = "uri_file",
    /** UriFolder */
    UriFolder = "uri_folder",
    /** Mltable */
    Mltable = "mltable",
    /** CustomModel */
    CustomModel = "custom_model",
    /** MlflowModel */
    MlflowModel = "mlflow_model",
    /** TritonModel */
    TritonModel = "triton_model"
}

/** Known values of {@link JobStatus} that the service accepts. */
export declare enum KnownJobStatus {
    /** Run hasn't started yet. */
    NotStarted = "NotStarted",
    /** Run has started. The user has a run ID. */
    Starting = "Starting",
    /** (Not used currently) It will be used if ES is creating the compute target. */
    Provisioning = "Provisioning",
    /** The run environment is being prepared. */
    Preparing = "Preparing",
    /** The job is queued in the compute target. For example, in BatchAI the job is in queued state, while waiting for all required nodes to be ready. */
    Queued = "Queued",
    /** The job started to run in the compute target. */
    Running = "Running",
    /** Job is completed in the target. It is in output collection state now. */
    Finalizing = "Finalizing",
    /** Cancellation has been requested for the job. */
    CancelRequested = "CancelRequested",
    /** Job completed successfully. This reflects that both the job itself and output collection states completed successfully */
    Completed = "Completed",
    /** Job failed. */
    Failed = "Failed",
    /** Following cancellation request, the job is now successfully canceled. */
    Canceled = "Canceled",
    /**
     * When heartbeat is enabled, if the run isn't updating any information to RunHistory then the run goes to NotResponding state.
     * NotResponding is the only state that is exempt from strict transition orders. A run can go from NotResponding to any of the previous states.
     */
    NotResponding = "NotResponding",
    /** The job is paused by users. Some adjustment to labeling jobs can be made only in paused state. */
    Paused = "Paused",
    /** Default job status if not mapped to all other statuses */
    Unknown = "Unknown"
}

/** Known values of {@link JobType} that the service accepts. */
export declare enum KnownJobType {
    /** AutoML */
    AutoML = "AutoML",
    /** Command */
    Command = "Command",
    /** Sweep */
    Sweep = "Sweep",
    /** Pipeline */
    Pipeline = "Pipeline"
}

/** Known values of {@link KeyType} that the service accepts. */
export declare enum KnownKeyType {
    /** Primary */
    Primary = "Primary",
    /** Secondary */
    Secondary = "Secondary"
}

/** Known values of {@link LearningRateScheduler} that the service accepts. */
export declare enum KnownLearningRateScheduler {
    /** No learning rate scheduler selected. */
    None = "None",
    /** Cosine Annealing With Warmup. */
    WarmupCosine = "WarmupCosine",
    /** Step learning rate scheduler. */
    Step = "Step"
}

/** Known values of {@link ListViewType} that the service accepts. */
export declare enum KnownListViewType {
    /** ActiveOnly */
    ActiveOnly = "ActiveOnly",
    /** ArchivedOnly */
    ArchivedOnly = "ArchivedOnly",
    /** All */
    All = "All"
}

/** Known values of {@link LoadBalancerType} that the service accepts. */
export declare enum KnownLoadBalancerType {
    /** PublicIp */
    PublicIp = "PublicIp",
    /** InternalLoadBalancer */
    InternalLoadBalancer = "InternalLoadBalancer"
}

/** Known values of {@link LogVerbosity} that the service accepts. */
export declare enum KnownLogVerbosity {
    /** No logs emitted. */
    NotSet = "NotSet",
    /** Debug and above log statements logged. */
    Debug = "Debug",
    /** Info and above log statements logged. */
    Info = "Info",
    /** Warning and above log statements logged. */
    Warning = "Warning",
    /** Error and above log statements logged. */
    Error = "Error",
    /** Only critical statements logged. */
    Critical = "Critical"
}

/** Known values of {@link ManagedServiceIdentityType} that the service accepts. */
export declare enum KnownManagedServiceIdentityType {
    /** None */
    None = "None",
    /** SystemAssigned */
    SystemAssigned = "SystemAssigned",
    /** UserAssigned */
    UserAssigned = "UserAssigned",
    /** SystemAssignedUserAssigned */
    SystemAssignedUserAssigned = "SystemAssigned,UserAssigned"
}

/** Known values of {@link ModelSize} that the service accepts. */
export declare enum KnownModelSize {
    /** No value selected. */
    None = "None",
    /** Small size. */
    Small = "Small",
    /** Medium size. */
    Medium = "Medium",
    /** Large size. */
    Large = "Large",
    /** Extra large size. */
    ExtraLarge = "ExtraLarge"
}

/** Known values of {@link MountAction} that the service accepts. */
export declare enum KnownMountAction {
    /** Mount */
    Mount = "Mount",
    /** Unmount */
    Unmount = "Unmount"
}

/** Known values of {@link MountState} that the service accepts. */
export declare enum KnownMountState {
    /** MountRequested */
    MountRequested = "MountRequested",
    /** Mounted */
    Mounted = "Mounted",
    /** MountFailed */
    MountFailed = "MountFailed",
    /** UnmountRequested */
    UnmountRequested = "UnmountRequested",
    /** UnmountFailed */
    UnmountFailed = "UnmountFailed",
    /** Unmounted */
    Unmounted = "Unmounted"
}

/** Known values of {@link NCrossValidationsMode} that the service accepts. */
export declare enum KnownNCrossValidationsMode {
    /** Determine N-Cross validations value automatically. Supported only for 'Forecasting' AutoML task. */
    Auto = "Auto",
    /** Use custom N-Cross validations value. */
    Custom = "Custom"
}

/** Known values of {@link Network} that the service accepts. */
export declare enum KnownNetwork {
    /** Bridge */
    Bridge = "Bridge",
    /** Host */
    Host = "Host"
}

/** Known values of {@link NodeState} that the service accepts. */
export declare enum KnownNodeState {
    /** Idle */
    Idle = "idle",
    /** Running */
    Running = "running",
    /** Preparing */
    Preparing = "preparing",
    /** Unusable */
    Unusable = "unusable",
    /** Leaving */
    Leaving = "leaving",
    /** Preempted */
    Preempted = "preempted"
}

/** Known values of {@link ObjectDetectionPrimaryMetrics} that the service accepts. */
export declare enum KnownObjectDetectionPrimaryMetrics {
    /**
     * Mean Average Precision (MAP) is the average of AP (Average Precision).
     * AP is calculated for each class and averaged to get the MAP.
     */
    MeanAveragePrecision = "MeanAveragePrecision"
}

/** Known values of {@link OperatingSystemType} that the service accepts. */
export declare enum KnownOperatingSystemType {
    /** Linux */
    Linux = "Linux",
    /** Windows */
    Windows = "Windows"
}

/** Known values of {@link OperationName} that the service accepts. */
export declare enum KnownOperationName {
    /** Create */
    Create = "Create",
    /** Start */
    Start = "Start",
    /** Stop */
    Stop = "Stop",
    /** Restart */
    Restart = "Restart",
    /** Reimage */
    Reimage = "Reimage",
    /** Delete */
    Delete = "Delete"
}

/** Known values of {@link OperationStatus} that the service accepts. */
export declare enum KnownOperationStatus {
    /** InProgress */
    InProgress = "InProgress",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** CreateFailed */
    CreateFailed = "CreateFailed",
    /** StartFailed */
    StartFailed = "StartFailed",
    /** StopFailed */
    StopFailed = "StopFailed",
    /** RestartFailed */
    RestartFailed = "RestartFailed",
    /** ReimageFailed */
    ReimageFailed = "ReimageFailed",
    /** DeleteFailed */
    DeleteFailed = "DeleteFailed"
}

/** Known values of {@link OperationTrigger} that the service accepts. */
export declare enum KnownOperationTrigger {
    /** User */
    User = "User",
    /** Schedule */
    Schedule = "Schedule",
    /** IdleShutdown */
    IdleShutdown = "IdleShutdown"
}

/** Known values of {@link OrderString} that the service accepts. */
export declare enum KnownOrderString {
    /** CreatedAtDesc */
    CreatedAtDesc = "CreatedAtDesc",
    /** CreatedAtAsc */
    CreatedAtAsc = "CreatedAtAsc",
    /** UpdatedAtDesc */
    UpdatedAtDesc = "UpdatedAtDesc",
    /** UpdatedAtAsc */
    UpdatedAtAsc = "UpdatedAtAsc"
}

/** Known values of {@link OsType} that the service accepts. */
export declare enum KnownOsType {
    /** Linux */
    Linux = "Linux",
    /** Windows */
    Windows = "Windows"
}

/** Known values of {@link OutputDeliveryMode} that the service accepts. */
export declare enum KnownOutputDeliveryMode {
    /** ReadWriteMount */
    ReadWriteMount = "ReadWriteMount",
    /** Upload */
    Upload = "Upload"
}

/** Known values of {@link PrivateEndpointConnectionProvisioningState} that the service accepts. */
export declare enum KnownPrivateEndpointConnectionProvisioningState {
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Creating */
    Creating = "Creating",
    /** Deleting */
    Deleting = "Deleting",
    /** Failed */
    Failed = "Failed"
}

/** Known values of {@link PrivateEndpointServiceConnectionStatus} that the service accepts. */
export declare enum KnownPrivateEndpointServiceConnectionStatus {
    /** Pending */
    Pending = "Pending",
    /** Approved */
    Approved = "Approved",
    /** Rejected */
    Rejected = "Rejected",
    /** Disconnected */
    Disconnected = "Disconnected",
    /** Timeout */
    Timeout = "Timeout"
}

/** Known values of {@link ProvisioningState} that the service accepts. */
export declare enum KnownProvisioningState {
    /** Unknown */
    Unknown = "Unknown",
    /** Updating */
    Updating = "Updating",
    /** Creating */
    Creating = "Creating",
    /** Deleting */
    Deleting = "Deleting",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Canceled */
    Canceled = "Canceled"
}

/** Known values of {@link ProvisioningStatus} that the service accepts. */
export declare enum KnownProvisioningStatus {
    /** Completed */
    Completed = "Completed",
    /** Provisioning */
    Provisioning = "Provisioning",
    /** Failed */
    Failed = "Failed"
}

/** Known values of {@link PublicNetworkAccess} that the service accepts. */
export declare enum KnownPublicNetworkAccess {
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled"
}

/** Known values of {@link PublicNetworkAccessType} that the service accepts. */
export declare enum KnownPublicNetworkAccessType {
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled"
}

/** Known values of {@link QuotaUnit} that the service accepts. */
export declare enum KnownQuotaUnit {
    /** Count */
    Count = "Count"
}

/** Known values of {@link RandomSamplingAlgorithmRule} that the service accepts. */
export declare enum KnownRandomSamplingAlgorithmRule {
    /** Random */
    Random = "Random",
    /** Sobol */
    Sobol = "Sobol"
}

/** Known values of {@link RecurrenceFrequency} that the service accepts. */
export declare enum KnownRecurrenceFrequency {
    /** Minute frequency */
    Minute = "Minute",
    /** Hour frequency */
    Hour = "Hour",
    /** Day frequency */
    Day = "Day",
    /** Week frequency */
    Week = "Week",
    /** Month frequency */
    Month = "Month"
}

/** Known values of {@link ReferenceType} that the service accepts. */
export declare enum KnownReferenceType {
    /** Id */
    Id = "Id",
    /** DataPath */
    DataPath = "DataPath",
    /** OutputPath */
    OutputPath = "OutputPath"
}

/** Known values of {@link RegressionModels} that the service accepts. */
export declare enum KnownRegressionModels {
    /** Elastic net is a popular type of regularized linear regression that combines two popular penalties, specifically the L1 and L2 penalty functions. */
    ElasticNet = "ElasticNet",
    /** The technique of transiting week learners into a strong learner is called Boosting. The gradient boosting algorithm process works on this theory of execution. */
    GradientBoosting = "GradientBoosting",
    /**
     * Decision Trees are a non-parametric supervised learning method used for both classification and regression tasks.
     * The goal is to create a model that predicts the value of a target variable by learning simple decision rules inferred from the data features.
     */
    DecisionTree = "DecisionTree",
    /**
     * K-nearest neighbors (KNN) algorithm uses 'feature similarity' to predict the values of new datapoints
     * which further means that the new data point will be assigned a value based on how closely it matches the points in the training set.
     */
    KNN = "KNN",
    /** Lasso model fit with Least Angle Regression a.k.a. Lars. It is a Linear Model trained with an L1 prior as regularizer. */
    LassoLars = "LassoLars",
    /**
     * SGD: Stochastic gradient descent is an optimization algorithm often used in machine learning applications
     * to find the model parameters that correspond to the best fit between predicted and actual outputs.
     * It's an inexact but powerful technique.
     */
    SGD = "SGD",
    /**
     * Random forest is a supervised learning algorithm.
     * The "forest" it builds, is an ensemble of decision trees, usually trained with the “bagging” method.
     * The general idea of the bagging method is that a combination of learning models increases the overall result.
     */
    RandomForest = "RandomForest",
    /** Extreme Trees is an ensemble machine learning algorithm that combines the predictions from many decision trees. It is related to the widely used random forest algorithm. */
    ExtremeRandomTrees = "ExtremeRandomTrees",
    /** LightGBM is a gradient boosting framework that uses tree based learning algorithms. */
    LightGBM = "LightGBM",
    /** XGBoostRegressor: Extreme Gradient Boosting Regressor is a supervised machine learning model using ensemble of base learners. */
    XGBoostRegressor = "XGBoostRegressor"
}

/** Known values of {@link RegressionPrimaryMetrics} that the service accepts. */
export declare enum KnownRegressionPrimaryMetrics {
    /** The Spearman's rank coefficient of correlation is a nonparametric measure of rank correlation. */
    SpearmanCorrelation = "SpearmanCorrelation",
    /** The Normalized Root Mean Squared Error (NRMSE) the RMSE facilitates the comparison between models with different scales. */
    NormalizedRootMeanSquaredError = "NormalizedRootMeanSquaredError",
    /** The R2 score is one of the performance evaluation measures for forecasting-based machine learning models. */
    R2Score = "R2Score",
    /** The Normalized Mean Absolute Error (NMAE) is a validation metric to compare the Mean Absolute Error (MAE) of (time) series with different scales. */
    NormalizedMeanAbsoluteError = "NormalizedMeanAbsoluteError"
}

/** Known values of {@link RemoteLoginPortPublicAccess} that the service accepts. */
export declare enum KnownRemoteLoginPortPublicAccess {
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled",
    /** NotSpecified */
    NotSpecified = "NotSpecified"
}

/** Known values of {@link SamplingAlgorithmType} that the service accepts. */
export declare enum KnownSamplingAlgorithmType {
    /** Grid */
    Grid = "Grid",
    /** Random */
    Random = "Random",
    /** Bayesian */
    Bayesian = "Bayesian"
}

/** Known values of {@link ScaleType} that the service accepts. */
export declare enum KnownScaleType {
    /** Default */
    Default = "Default",
    /** TargetUtilization */
    TargetUtilization = "TargetUtilization"
}

/** Known values of {@link ScheduleActionType} that the service accepts. */
export declare enum KnownScheduleActionType {
    /** CreateJob */
    CreateJob = "CreateJob",
    /** InvokeBatchEndpoint */
    InvokeBatchEndpoint = "InvokeBatchEndpoint"
}

/** Known values of {@link ScheduleListViewType} that the service accepts. */
export declare enum KnownScheduleListViewType {
    /** EnabledOnly */
    EnabledOnly = "EnabledOnly",
    /** DisabledOnly */
    DisabledOnly = "DisabledOnly",
    /** All */
    All = "All"
}

/** Known values of {@link ScheduleProvisioningState} that the service accepts. */
export declare enum KnownScheduleProvisioningState {
    /** Completed */
    Completed = "Completed",
    /** Provisioning */
    Provisioning = "Provisioning",
    /** Failed */
    Failed = "Failed"
}

/** Known values of {@link ScheduleProvisioningStatus} that the service accepts. */
export declare enum KnownScheduleProvisioningStatus {
    /** Creating */
    Creating = "Creating",
    /** Updating */
    Updating = "Updating",
    /** Deleting */
    Deleting = "Deleting",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Canceled */
    Canceled = "Canceled"
}

/** Known values of {@link ScheduleStatus} that the service accepts. */
export declare enum KnownScheduleStatus {
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled"
}

/** Known values of {@link SeasonalityMode} that the service accepts. */
export declare enum KnownSeasonalityMode {
    /** Seasonality to be determined automatically. */
    Auto = "Auto",
    /** Use the custom seasonality value. */
    Custom = "Custom"
}

/** Known values of {@link SecretsType} that the service accepts. */
export declare enum KnownSecretsType {
    /** AccountKey */
    AccountKey = "AccountKey",
    /** Certificate */
    Certificate = "Certificate",
    /** Sas */
    Sas = "Sas",
    /** ServicePrincipal */
    ServicePrincipal = "ServicePrincipal"
}

/** Known values of {@link ServiceDataAccessAuthIdentity} that the service accepts. */
export declare enum KnownServiceDataAccessAuthIdentity {
    /** Do not use any identity for service data access. */
    None = "None",
    /** Use the system assigned managed identity of the Workspace to authenticate service data access. */
    WorkspaceSystemAssignedIdentity = "WorkspaceSystemAssignedIdentity",
    /** Use the user assigned managed identity of the Workspace to authenticate service data access. */
    WorkspaceUserAssignedIdentity = "WorkspaceUserAssignedIdentity"
}

/** Known values of {@link ShortSeriesHandlingConfiguration} that the service accepts. */
export declare enum KnownShortSeriesHandlingConfiguration {
    /** Represents no/null value. */
    None = "None",
    /** Short series will be padded if there are no long series, otherwise short series will be dropped. */
    Auto = "Auto",
    /** All the short series will be padded. */
    Pad = "Pad",
    /** All the short series will be dropped. */
    Drop = "Drop"
}

/** Known values of {@link SkuScaleType} that the service accepts. */
export declare enum KnownSkuScaleType {
    /** Automatically scales node count. */
    Automatic = "Automatic",
    /** Node count scaled upon user request. */
    Manual = "Manual",
    /** Fixed set of nodes. */
    None = "None"
}

/** Known values of {@link SourceType} that the service accepts. */
export declare enum KnownSourceType {
    /** Dataset */
    Dataset = "Dataset",
    /** Datastore */
    Datastore = "Datastore",
    /** URI */
    URI = "URI"
}

/** Known values of {@link SshPublicAccess} that the service accepts. */
export declare enum KnownSshPublicAccess {
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled"
}

/** Known values of {@link SslConfigStatus} that the service accepts. */
export declare enum KnownSslConfigStatus {
    /** Disabled */
    Disabled = "Disabled",
    /** Enabled */
    Enabled = "Enabled",
    /** Auto */
    Auto = "Auto"
}

/** Known values of {@link StackMetaLearnerType} that the service accepts. */
export declare enum KnownStackMetaLearnerType {
    /** None */
    None = "None",
    /** Default meta-learners are LogisticRegression for classification tasks. */
    LogisticRegression = "LogisticRegression",
    /** Default meta-learners are LogisticRegression for classification task when CV is on. */
    LogisticRegressionCV = "LogisticRegressionCV",
    /** LightGBMClassifier */
    LightGBMClassifier = "LightGBMClassifier",
    /** Default meta-learners are LogisticRegression for regression task. */
    ElasticNet = "ElasticNet",
    /** Default meta-learners are LogisticRegression for regression task when CV is on. */
    ElasticNetCV = "ElasticNetCV",
    /** LightGBMRegressor */
    LightGBMRegressor = "LightGBMRegressor",
    /** LinearRegression */
    LinearRegression = "LinearRegression"
}

/** Known values of {@link Status} that the service accepts. */
export declare enum KnownStatus {
    /** Undefined */
    Undefined = "Undefined",
    /** Success */
    Success = "Success",
    /** Failure */
    Failure = "Failure",
    /** InvalidQuotaBelowClusterMinimum */
    InvalidQuotaBelowClusterMinimum = "InvalidQuotaBelowClusterMinimum",
    /** InvalidQuotaExceedsSubscriptionLimit */
    InvalidQuotaExceedsSubscriptionLimit = "InvalidQuotaExceedsSubscriptionLimit",
    /** InvalidVMFamilyName */
    InvalidVMFamilyName = "InvalidVMFamilyName",
    /** OperationNotSupportedForSku */
    OperationNotSupportedForSku = "OperationNotSupportedForSku",
    /** OperationNotEnabledForRegion */
    OperationNotEnabledForRegion = "OperationNotEnabledForRegion"
}

/** Known values of {@link StochasticOptimizer} that the service accepts. */
export declare enum KnownStochasticOptimizer {
    /** No optimizer selected. */
    None = "None",
    /** Stochastic Gradient Descent optimizer. */
    Sgd = "Sgd",
    /** Adam is algorithm the optimizes stochastic objective functions based on adaptive estimates of moments */
    Adam = "Adam",
    /** AdamW is a variant of the optimizer Adam that has an improved implementation of weight decay. */
    Adamw = "Adamw"
}

/** Known values of {@link StorageAccountType} that the service accepts. */
export declare enum KnownStorageAccountType {
    /** StandardLRS */
    StandardLRS = "Standard_LRS",
    /** PremiumLRS */
    PremiumLRS = "Premium_LRS"
}

/** Known values of {@link TargetAggregationFunction} that the service accepts. */
export declare enum KnownTargetAggregationFunction {
    /** Represent no value set. */
    None = "None",
    /** Sum */
    Sum = "Sum",
    /** Max */
    Max = "Max",
    /** Min */
    Min = "Min",
    /** Mean */
    Mean = "Mean"
}

/** Known values of {@link TargetLagsMode} that the service accepts. */
export declare enum KnownTargetLagsMode {
    /** Target lags to be determined automatically. */
    Auto = "Auto",
    /** Use the custom target lags. */
    Custom = "Custom"
}

/** Known values of {@link TargetRollingWindowSizeMode} that the service accepts. */
export declare enum KnownTargetRollingWindowSizeMode {
    /** Determine rolling windows size automatically. */
    Auto = "Auto",
    /** Use the specified rolling window size. */
    Custom = "Custom"
}

/** Known values of {@link TaskType} that the service accepts. */
export declare enum KnownTaskType {
    /**
     * Classification in machine learning and statistics is a supervised learning approach in which
     * the computer program learns from the data given to it and make new observations or classifications.
     */
    Classification = "Classification",
    /** Regression means to predict the value using the input data. Regression models are used to predict a continuous value. */
    Regression = "Regression",
    /**
     * Forecasting is a special kind of regression task that deals with time-series data and creates forecasting model
     * that can be used to predict the near future values based on the inputs.
     */
    Forecasting = "Forecasting",
    /**
     * Image Classification. Multi-class image classification is used when an image is classified with only a single label
     * from a set of classes - e.g. each image is classified as either an image of a 'cat' or a 'dog' or a 'duck'.
     */
    ImageClassification = "ImageClassification",
    /**
     * Image Classification Multilabel. Multi-label image classification is used when an image could have one or more labels
     * from a set of labels - e.g. an image could be labeled with both 'cat' and 'dog'.
     */
    ImageClassificationMultilabel = "ImageClassificationMultilabel",
    /**
     * Image Object Detection. Object detection is used to identify objects in an image and locate each object with a
     * bounding box e.g. locate all dogs and cats in an image and draw a bounding box around each.
     */
    ImageObjectDetection = "ImageObjectDetection",
    /**
     * Image Instance Segmentation. Instance segmentation is used to identify objects in an image at the pixel level,
     * drawing a polygon around each object in the image.
     */
    ImageInstanceSegmentation = "ImageInstanceSegmentation",
    /**
     * Text classification (also known as text tagging or text categorization) is the process of sorting texts into categories.
     * Categories are mutually exclusive.
     */
    TextClassification = "TextClassification",
    /** Multilabel classification task assigns each sample to a group (zero or more) of target labels. */
    TextClassificationMultilabel = "TextClassificationMultilabel",
    /**
     * Text Named Entity Recognition a.k.a. TextNER.
     * Named Entity Recognition (NER) is the ability to take free-form text and identify the occurrences of entities such as people, locations, organizations, and more.
     */
    TextNER = "TextNER"
}

/** Known values of {@link TriggerType} that the service accepts. */
export declare enum KnownTriggerType {
    /** Recurrence */
    Recurrence = "Recurrence",
    /** Cron */
    Cron = "Cron"
}

/** Known values of {@link UnderlyingResourceAction} that the service accepts. */
export declare enum KnownUnderlyingResourceAction {
    /** Delete */
    Delete = "Delete",
    /** Detach */
    Detach = "Detach"
}

/** Known values of {@link UnitOfMeasure} that the service accepts. */
export declare enum KnownUnitOfMeasure {
    /** OneHour */
    OneHour = "OneHour"
}

/** Known values of {@link UsageUnit} that the service accepts. */
export declare enum KnownUsageUnit {
    /** Count */
    Count = "Count"
}

/** Known values of {@link UseStl} that the service accepts. */
export declare enum KnownUseStl {
    /** No stl decomposition. */
    None = "None",
    /** Season */
    Season = "Season",
    /** SeasonTrend */
    SeasonTrend = "SeasonTrend"
}

/** Known values of {@link ValidationMetricType} that the service accepts. */
export declare enum KnownValidationMetricType {
    /** No metric. */
    None = "None",
    /** Coco metric. */
    Coco = "Coco",
    /** Voc metric. */
    Voc = "Voc",
    /** CocoVoc metric. */
    CocoVoc = "CocoVoc"
}

/** Known values of {@link ValueFormat} that the service accepts. */
export declare enum KnownValueFormat {
    /** Json */
    Json = "JSON"
}

/** Known values of {@link VMPriceOSType} that the service accepts. */
export declare enum KnownVMPriceOSType {
    /** Linux */
    Linux = "Linux",
    /** Windows */
    Windows = "Windows"
}

/** Known values of {@link VmPriority} that the service accepts. */
export declare enum KnownVmPriority {
    /** Dedicated */
    Dedicated = "Dedicated",
    /** LowPriority */
    LowPriority = "LowPriority"
}

/** Known values of {@link VMTier} that the service accepts. */
export declare enum KnownVMTier {
    /** Standard */
    Standard = "Standard",
    /** LowPriority */
    LowPriority = "LowPriority",
    /** Spot */
    Spot = "Spot"
}

/** Known values of {@link WeekDay} that the service accepts. */
export declare enum KnownWeekDay {
    /** Monday weekday */
    Monday = "Monday",
    /** Tuesday weekday */
    Tuesday = "Tuesday",
    /** Wednesday weekday */
    Wednesday = "Wednesday",
    /** Thursday weekday */
    Thursday = "Thursday",
    /** Friday weekday */
    Friday = "Friday",
    /** Saturday weekday */
    Saturday = "Saturday",
    /** Sunday weekday */
    Sunday = "Sunday"
}

/** A Machine Learning compute based on Kubernetes Compute. */
export declare interface Kubernetes extends Compute, KubernetesSchema {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    computeType: "Kubernetes";
}

/** Properties specific to a KubernetesOnlineDeployment. */
export declare interface KubernetesOnlineDeployment extends OnlineDeploymentProperties {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    endpointComputeType: "Kubernetes";
    /** The resource requirements for the container (cpu and memory). */
    containerResourceRequirements?: ContainerResourceRequirements;
}

/** Kubernetes properties */
export declare interface KubernetesProperties {
    /** Relay connection string. */
    relayConnectionString?: string;
    /** ServiceBus connection string. */
    serviceBusConnectionString?: string;
    /** Extension principal-id. */
    extensionPrincipalId?: string;
    /** Extension instance release train. */
    extensionInstanceReleaseTrain?: string;
    /** VC name. */
    vcName?: string;
    /** Compute namespace */
    namespace?: string;
    /** Default instance type */
    defaultInstanceType?: string;
    /** Instance Type Schema */
    instanceTypes?: {
        [propertyName: string]: InstanceTypeSchema;
    };
}

/** Kubernetes Compute Schema */
export declare interface KubernetesSchema {
    /** Properties of Kubernetes */
    properties?: KubernetesProperties;
}

/**
 * Defines values for LearningRateScheduler. \
 * {@link KnownLearningRateScheduler} can be used interchangeably with LearningRateScheduler,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None**: No learning rate scheduler selected. \
 * **WarmupCosine**: Cosine Annealing With Warmup. \
 * **Step**: Step learning rate scheduler.
 */
export declare type LearningRateScheduler = string;

/** The List Aml user feature operation response. */
export declare interface ListAmlUserFeatureResult {
    /**
     * The list of AML user facing features.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: AmlUserFeature[];
    /**
     * The URI to fetch the next page of AML user features information. Call ListNext() with this to fetch the next page of AML user features information.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

export declare interface ListNotebookKeysResult {
    /** NOTE: This property will not be serialized. It can only be populated by the server. */
    readonly primaryAccessKey?: string;
    /** NOTE: This property will not be serialized. It can only be populated by the server. */
    readonly secondaryAccessKey?: string;
}

export declare interface ListStorageAccountKeysResult {
    /** NOTE: This property will not be serialized. It can only be populated by the server. */
    readonly userStorageKey?: string;
}

/** The List Usages operation response. */
export declare interface ListUsagesResult {
    /**
     * The list of AML resource usages.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: Usage[];
    /**
     * The URI to fetch the next page of AML resource usage information. Call ListNext() with this to fetch the next page of AML resource usage information.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/**
 * Defines values for ListViewType. \
 * {@link KnownListViewType} can be used interchangeably with ListViewType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ActiveOnly** \
 * **ArchivedOnly** \
 * **All**
 */
export declare type ListViewType = string;

export declare interface ListWorkspaceKeysResult {
    /** NOTE: This property will not be serialized. It can only be populated by the server. */
    readonly userStorageKey?: string;
    /** NOTE: This property will not be serialized. It can only be populated by the server. */
    readonly userStorageResourceId?: string;
    /** NOTE: This property will not be serialized. It can only be populated by the server. */
    readonly appInsightsInstrumentationKey?: string;
    /** NOTE: This property will not be serialized. It can only be populated by the server. */
    readonly containerRegistryCredentials?: RegistryListCredentialsResult;
    /** NOTE: This property will not be serialized. It can only be populated by the server. */
    readonly notebookAccessKeys?: ListNotebookKeysResult;
}

/** The List WorkspaceQuotasByVMFamily operation response. */
export declare interface ListWorkspaceQuotas {
    /**
     * The list of Workspace Quotas by VM Family
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: ResourceQuota[];
    /**
     * The URI to fetch the next page of workspace quota information by VM Family. Call ListNext() with this to fetch the next page of Workspace Quota information.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Literal input type. */
export declare interface LiteralJobInput extends JobInput {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    jobInputType: "literal";
    /** [Required] Literal value for the input. */
    value: string;
}

/**
 * Defines values for LoadBalancerType. \
 * {@link KnownLoadBalancerType} can be used interchangeably with LoadBalancerType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **PublicIp** \
 * **InternalLoadBalancer**
 */
export declare type LoadBalancerType = string;

/**
 * Defines values for LogVerbosity. \
 * {@link KnownLogVerbosity} can be used interchangeably with LogVerbosity,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSet**: No logs emitted. \
 * **Debug**: Debug and above log statements logged. \
 * **Info**: Info and above log statements logged. \
 * **Warning**: Warning and above log statements logged. \
 * **Error**: Error and above log statements logged. \
 * **Critical**: Only critical statements logged.
 */
export declare type LogVerbosity = string;

/** Managed identity configuration. */
export declare interface ManagedIdentity extends IdentityConfiguration {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    identityType: "Managed";
    /** Specifies a user-assigned identity by client ID. For system-assigned, do not set this field. */
    clientId?: string;
    /** Specifies a user-assigned identity by object ID. For system-assigned, do not set this field. */
    objectId?: string;
    /** Specifies a user-assigned identity by ARM resource ID. For system-assigned, do not set this field. */
    resourceId?: string;
}

export declare interface ManagedIdentityAuthTypeWorkspaceConnectionProperties extends WorkspaceConnectionPropertiesV2 {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    authType: "ManagedIdentity";
    credentials?: WorkspaceConnectionManagedIdentity;
}

/** Properties specific to a ManagedOnlineDeployment. */
export declare interface ManagedOnlineDeployment extends OnlineDeploymentProperties {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    endpointComputeType: "Managed";
}

/** Managed service identity (system assigned and/or user assigned identities) */
export declare interface ManagedServiceIdentity {
    /**
     * The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
    /**
     * The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
    /** Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed). */
    type: ManagedServiceIdentityType;
    /** The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests. */
    userAssignedIdentities?: {
        [propertyName: string]: UserAssignedIdentity;
    };
}

/**
 * Defines values for ManagedServiceIdentityType. \
 * {@link KnownManagedServiceIdentityType} can be used interchangeably with ManagedServiceIdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **SystemAssigned** \
 * **UserAssigned** \
 * **SystemAssigned,UserAssigned**
 */
export declare type ManagedServiceIdentityType = string;

/** Defines an early termination policy based on running averages of the primary metric of all runs */
export declare interface MedianStoppingPolicy extends EarlyTerminationPolicy {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    policyType: "MedianStopping";
}

export declare interface MLFlowModelJobInput extends AssetJobInput, JobInput {
}

export declare interface MLFlowModelJobOutput extends AssetJobOutput, JobOutput {
}

/** MLTable data definition */
export declare interface MLTableData extends DataVersionBaseProperties {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    dataType: "mltable";
    /** Uris referenced in the MLTable definition (required for lineage) */
    referencedUris?: string[];
}

export declare interface MLTableJobInput extends AssetJobInput, JobInput {
}

export declare interface MLTableJobOutput extends AssetJobOutput, JobOutput {
}

/** Azure Resource Manager resource envelope. */
export declare interface ModelContainer extends Resource {
    /** [Required] Additional attributes of the entity. */
    properties: ModelContainerProperties;
}

export declare interface ModelContainerProperties extends AssetContainer {
}

/** A paginated list of ModelContainer entities. */
export declare interface ModelContainerResourceArmPaginatedResult {
    /** The link to the next page of ModelContainer objects. If null, there are no additional pages. */
    nextLink?: string;
    /** An array of objects of type ModelContainer. */
    value?: ModelContainer[];
}

/** Interface representing a ModelContainers. */
export declare interface ModelContainers {
    /**
     * List model containers.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, options?: ModelContainersListOptionalParams): PagedAsyncIterableIterator<ModelContainer>;
    /**
     * Delete container.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param name Container name. This is case-sensitive.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, workspaceName: string, name: string, options?: ModelContainersDeleteOptionalParams): Promise<void>;
    /**
     * Get container.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param name Container name. This is case-sensitive.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, name: string, options?: ModelContainersGetOptionalParams): Promise<ModelContainersGetResponse>;
    /**
     * Create or update container.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param name Container name. This is case-sensitive.
     * @param body Container entity to create or update.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, workspaceName: string, name: string, body: ModelContainer, options?: ModelContainersCreateOrUpdateOptionalParams): Promise<ModelContainersCreateOrUpdateResponse>;
}

/** Optional parameters. */
export declare interface ModelContainersCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type ModelContainersCreateOrUpdateResponse = ModelContainer;

/** Optional parameters. */
export declare interface ModelContainersDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface ModelContainersGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ModelContainersGetResponse = ModelContainer;

/** Optional parameters. */
export declare interface ModelContainersListNextOptionalParams extends coreClient.OperationOptions {
    /** Continuation token for pagination. */
    skip?: string;
    /** Maximum number of results to return. */
    count?: number;
    /** View type for including/excluding (for example) archived entities. */
    listViewType?: ListViewType;
}

/** Contains response data for the listNext operation. */
export declare type ModelContainersListNextResponse = ModelContainerResourceArmPaginatedResult;

/** Optional parameters. */
export declare interface ModelContainersListOptionalParams extends coreClient.OperationOptions {
    /** Continuation token for pagination. */
    skip?: string;
    /** Maximum number of results to return. */
    count?: number;
    /** View type for including/excluding (for example) archived entities. */
    listViewType?: ListViewType;
}

/** Contains response data for the list operation. */
export declare type ModelContainersListResponse = ModelContainerResourceArmPaginatedResult;

/**
 * Defines values for ModelSize. \
 * {@link KnownModelSize} can be used interchangeably with ModelSize,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None**: No value selected. \
 * **Small**: Small size. \
 * **Medium**: Medium size. \
 * **Large**: Large size. \
 * **ExtraLarge**: Extra large size.
 */
export declare type ModelSize = string;

/** Azure Resource Manager resource envelope. */
export declare interface ModelVersion extends Resource {
    /** [Required] Additional attributes of the entity. */
    properties: ModelVersionProperties;
}

/** Model asset version details. */
export declare interface ModelVersionProperties extends AssetBase {
    /** Mapping of model flavors to their properties. */
    flavors?: {
        [propertyName: string]: FlavorData | null;
    };
    /** Name of the training job which produced this model */
    jobName?: string;
    /** The storage format for this entity. Used for NCD. */
    modelType?: string;
    /** The URI path to the model contents. */
    modelUri?: string;
}

/** A paginated list of ModelVersion entities. */
export declare interface ModelVersionResourceArmPaginatedResult {
    /** The link to the next page of ModelVersion objects. If null, there are no additional pages. */
    nextLink?: string;
    /** An array of objects of type ModelVersion. */
    value?: ModelVersion[];
}

/** Interface representing a ModelVersions. */
export declare interface ModelVersions {
    /**
     * List model versions.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param name Model name. This is case-sensitive.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, name: string, options?: ModelVersionsListOptionalParams): PagedAsyncIterableIterator<ModelVersion>;
    /**
     * Delete version.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param name Container name. This is case-sensitive.
     * @param version Version identifier. This is case-sensitive.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, workspaceName: string, name: string, version: string, options?: ModelVersionsDeleteOptionalParams): Promise<void>;
    /**
     * Get version.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param name Container name. This is case-sensitive.
     * @param version Version identifier. This is case-sensitive.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, name: string, version: string, options?: ModelVersionsGetOptionalParams): Promise<ModelVersionsGetResponse>;
    /**
     * Create or update version.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param name Container name. This is case-sensitive.
     * @param version Version identifier. This is case-sensitive.
     * @param body Version entity to create or update.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, workspaceName: string, name: string, version: string, body: ModelVersion, options?: ModelVersionsCreateOrUpdateOptionalParams): Promise<ModelVersionsCreateOrUpdateResponse>;
}

/** Optional parameters. */
export declare interface ModelVersionsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type ModelVersionsCreateOrUpdateResponse = ModelVersion;

/** Optional parameters. */
export declare interface ModelVersionsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface ModelVersionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ModelVersionsGetResponse = ModelVersion;

/** Optional parameters. */
export declare interface ModelVersionsListNextOptionalParams extends coreClient.OperationOptions {
    /** Continuation token for pagination. */
    skip?: string;
    /** Ordering of list. */
    orderBy?: string;
    /** Maximum number of records to return. */
    top?: number;
    /** View type for including/excluding (for example) archived entities. */
    listViewType?: ListViewType;
    /** Model version. */
    version?: string;
    /** Model description. */
    description?: string;
    /** Number of initial results to skip. */
    offset?: number;
    /** Comma-separated list of tag names (and optionally values). Example: tag1,tag2=value2 */
    tags?: string;
    /** Comma-separated list of property names (and optionally values). Example: prop1,prop2=value2 */
    properties?: string;
    /** Name of the feed. */
    feed?: string;
}

/** Contains response data for the listNext operation. */
export declare type ModelVersionsListNextResponse = ModelVersionResourceArmPaginatedResult;

/** Optional parameters. */
export declare interface ModelVersionsListOptionalParams extends coreClient.OperationOptions {
    /** Continuation token for pagination. */
    skip?: string;
    /** Ordering of list. */
    orderBy?: string;
    /** Maximum number of records to return. */
    top?: number;
    /** View type for including/excluding (for example) archived entities. */
    listViewType?: ListViewType;
    /** Model version. */
    version?: string;
    /** Model description. */
    description?: string;
    /** Number of initial results to skip. */
    offset?: number;
    /** Comma-separated list of tag names (and optionally values). Example: tag1,tag2=value2 */
    tags?: string;
    /** Comma-separated list of property names (and optionally values). Example: prop1,prop2=value2 */
    properties?: string;
    /** Name of the feed. */
    feed?: string;
}

/** Contains response data for the list operation. */
export declare type ModelVersionsListResponse = ModelVersionResourceArmPaginatedResult;

/**
 * Defines values for MountAction. \
 * {@link KnownMountAction} can be used interchangeably with MountAction,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Mount** \
 * **Unmount**
 */
export declare type MountAction = string;

/**
 * Defines values for MountState. \
 * {@link KnownMountState} can be used interchangeably with MountState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **MountRequested** \
 * **Mounted** \
 * **MountFailed** \
 * **UnmountRequested** \
 * **UnmountFailed** \
 * **Unmounted**
 */
export declare type MountState = string;

/** MPI distribution configuration. */
export declare interface Mpi extends DistributionConfiguration {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    distributionType: "Mpi";
    /** Number of processes per MPI node. */
    processCountPerInstance?: number;
}

/** N-Cross validations value. */
export declare interface NCrossValidations {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    mode: "Auto" | "Custom";
}

/**
 * Defines values for NCrossValidationsMode. \
 * {@link KnownNCrossValidationsMode} can be used interchangeably with NCrossValidationsMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Auto**: Determine N-Cross validations value automatically. Supported only for 'Forecasting' AutoML task. \
 * **Custom**: Use custom N-Cross validations value.
 */
export declare type NCrossValidationsMode = string;

export declare type NCrossValidationsUnion = NCrossValidations | AutoNCrossValidations | CustomNCrossValidations;

/**
 * Defines values for Network. \
 * {@link KnownNetwork} can be used interchangeably with Network,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Bridge** \
 * **Host**
 */
export declare type Network = string;

/**
 * Abstract class for NLP related AutoML tasks.
 * NLP - Natural Language Processing.
 */
export declare interface NlpVertical {
    /** Featurization inputs needed for AutoML job. */
    featurizationSettings?: NlpVerticalFeaturizationSettings;
    /** Execution constraints for AutoMLJob. */
    limitSettings?: NlpVerticalLimitSettings;
    /** Validation data inputs. */
    validationData?: MLTableJobInput;
}

export declare interface NlpVerticalFeaturizationSettings extends FeaturizationSettings {
}

/** Job execution constraints. */
export declare interface NlpVerticalLimitSettings {
    /** Maximum Concurrent AutoML iterations. */
    maxConcurrentTrials?: number;
    /** Number of AutoML iterations. */
    maxTrials?: number;
    /** AutoML job timeout. */
    timeout?: string;
}

/**
 * Defines values for NodeState. \
 * {@link KnownNodeState} can be used interchangeably with NodeState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **idle** \
 * **running** \
 * **preparing** \
 * **unusable** \
 * **leaving** \
 * **preempted**
 */
export declare type NodeState = string;

/** Counts of various compute node states on the amlCompute. */
export declare interface NodeStateCounts {
    /**
     * Number of compute nodes in idle state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly idleNodeCount?: number;
    /**
     * Number of compute nodes which are running jobs.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly runningNodeCount?: number;
    /**
     * Number of compute nodes which are being prepared.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly preparingNodeCount?: number;
    /**
     * Number of compute nodes which are in unusable state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly unusableNodeCount?: number;
    /**
     * Number of compute nodes which are leaving the amlCompute.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly leavingNodeCount?: number;
    /**
     * Number of compute nodes which are in preempted state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly preemptedNodeCount?: number;
}

export declare interface NoneAuthTypeWorkspaceConnectionProperties extends WorkspaceConnectionPropertiesV2 {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    authType: "None";
}

/** Empty/none datastore credentials. */
export declare interface NoneDatastoreCredentials extends DatastoreCredentials {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    credentialsType: "None";
}

export declare interface NotebookAccessTokenResult {
    /** NOTE: This property will not be serialized. It can only be populated by the server. */
    readonly notebookResourceId?: string;
    /** NOTE: This property will not be serialized. It can only be populated by the server. */
    readonly hostName?: string;
    /** NOTE: This property will not be serialized. It can only be populated by the server. */
    readonly publicDns?: string;
    /** NOTE: This property will not be serialized. It can only be populated by the server. */
    readonly accessToken?: string;
    /** NOTE: This property will not be serialized. It can only be populated by the server. */
    readonly tokenType?: string;
    /** NOTE: This property will not be serialized. It can only be populated by the server. */
    readonly expiresIn?: number;
    /** NOTE: This property will not be serialized. It can only be populated by the server. */
    readonly refreshToken?: string;
    /** NOTE: This property will not be serialized. It can only be populated by the server. */
    readonly scope?: string;
}

export declare interface NotebookPreparationError {
    errorMessage?: string;
    statusCode?: number;
}

export declare interface NotebookResourceInfo {
    fqdn?: string;
    /** the data plane resourceId that used to initialize notebook component */
    resourceId?: string;
    /** The error that occurs when preparing notebook. */
    notebookPreparationError?: NotebookPreparationError;
}

/**
 * Defines values for ObjectDetectionPrimaryMetrics. \
 * {@link KnownObjectDetectionPrimaryMetrics} can be used interchangeably with ObjectDetectionPrimaryMetrics,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **MeanAveragePrecision**: Mean Average Precision (MAP) is the average of AP (Average Precision).
 * AP is calculated for each class and averaged to get the MAP.
 */
export declare type ObjectDetectionPrimaryMetrics = string;

/** Optimization objective. */
export declare interface Objective {
    /** [Required] Defines supported metric goals for hyperparameter tuning */
    goal: Goal;
    /** [Required] Name of the metric to optimize. */
    primaryMetric: string;
}

export declare interface OnlineDeployment extends TrackedResource {
    /** Managed service identity (system assigned and/or user assigned identities) */
    identity?: ManagedServiceIdentity;
    /** Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type. */
    kind?: string;
    /** [Required] Additional attributes of the entity. */
    properties: OnlineDeploymentPropertiesUnion;
    /** Sku details required for ARM contract for Autoscaling. */
    sku?: Sku;
}

export declare interface OnlineDeploymentProperties extends EndpointDeploymentPropertiesBase {
    /** If true, enables Application Insights logging. */
    appInsightsEnabled?: boolean;
    /** If Enabled, allow egress public network access. If Disabled, this will create secure egress. Default: Enabled. */
    egressPublicNetworkAccess?: EgressPublicNetworkAccessType;
    /** [Required] The compute type of the endpoint. */
    endpointComputeType: EndpointComputeType;
    /** Compute instance type. */
    instanceType?: string;
    /** Liveness probe monitors the health of the container regularly. */
    livenessProbe?: ProbeSettings;
    /** The URI path to the model. */
    model?: string;
    /** The path to mount the model in custom container. */
    modelMountPath?: string;
    /**
     * Provisioning state for the endpoint deployment.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: DeploymentProvisioningState;
    /** Readiness probe validates if the container is ready to serve traffic. The properties and defaults are the same as liveness probe. */
    readinessProbe?: ProbeSettings;
    /** Request settings for the deployment. */
    requestSettings?: OnlineRequestSettings;
    /**
     * Scale settings for the deployment.
     * If it is null or not provided,
     * it defaults to TargetUtilizationScaleSettings for KubernetesOnlineDeployment
     * and to DefaultScaleSettings for ManagedOnlineDeployment.
     */
    scaleSettings?: OnlineScaleSettingsUnion;
}

export declare type OnlineDeploymentPropertiesUnion = OnlineDeploymentProperties | KubernetesOnlineDeployment | ManagedOnlineDeployment;

/** Interface representing a OnlineDeployments. */
export declare interface OnlineDeployments {
    /**
     * List Inference Endpoint Deployments.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param endpointName Inference endpoint name.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, endpointName: string, options?: OnlineDeploymentsListOptionalParams): PagedAsyncIterableIterator<OnlineDeployment>;
    /**
     * List Inference Endpoint Deployment Skus.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param endpointName Inference endpoint name.
     * @param deploymentName Inference Endpoint Deployment name.
     * @param options The options parameters.
     */
    listSkus(resourceGroupName: string, workspaceName: string, endpointName: string, deploymentName: string, options?: OnlineDeploymentsListSkusOptionalParams): PagedAsyncIterableIterator<SkuResource>;
    /**
     * Delete Inference Endpoint Deployment (asynchronous).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param endpointName Inference endpoint name.
     * @param deploymentName Inference Endpoint Deployment name.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, workspaceName: string, endpointName: string, deploymentName: string, options?: OnlineDeploymentsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Delete Inference Endpoint Deployment (asynchronous).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param endpointName Inference endpoint name.
     * @param deploymentName Inference Endpoint Deployment name.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, workspaceName: string, endpointName: string, deploymentName: string, options?: OnlineDeploymentsDeleteOptionalParams): Promise<void>;
    /**
     * Get Inference Deployment Deployment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param endpointName Inference endpoint name.
     * @param deploymentName Inference Endpoint Deployment name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, endpointName: string, deploymentName: string, options?: OnlineDeploymentsGetOptionalParams): Promise<OnlineDeploymentsGetResponse>;
    /**
     * Update Online Deployment (asynchronous).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param endpointName Online Endpoint name.
     * @param deploymentName Inference Endpoint Deployment name.
     * @param body Online Endpoint entity to apply during operation.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, workspaceName: string, endpointName: string, deploymentName: string, body: PartialMinimalTrackedResourceWithSku, options?: OnlineDeploymentsUpdateOptionalParams): Promise<PollerLike<PollOperationState<OnlineDeploymentsUpdateResponse>, OnlineDeploymentsUpdateResponse>>;
    /**
     * Update Online Deployment (asynchronous).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param endpointName Online Endpoint name.
     * @param deploymentName Inference Endpoint Deployment name.
     * @param body Online Endpoint entity to apply during operation.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, workspaceName: string, endpointName: string, deploymentName: string, body: PartialMinimalTrackedResourceWithSku, options?: OnlineDeploymentsUpdateOptionalParams): Promise<OnlineDeploymentsUpdateResponse>;
    /**
     * Create or update Inference Endpoint Deployment (asynchronous).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param endpointName Inference endpoint name.
     * @param deploymentName Inference Endpoint Deployment name.
     * @param body Inference Endpoint entity to apply during operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, workspaceName: string, endpointName: string, deploymentName: string, body: OnlineDeployment, options?: OnlineDeploymentsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<OnlineDeploymentsCreateOrUpdateResponse>, OnlineDeploymentsCreateOrUpdateResponse>>;
    /**
     * Create or update Inference Endpoint Deployment (asynchronous).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param endpointName Inference endpoint name.
     * @param deploymentName Inference Endpoint Deployment name.
     * @param body Inference Endpoint entity to apply during operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, workspaceName: string, endpointName: string, deploymentName: string, body: OnlineDeployment, options?: OnlineDeploymentsCreateOrUpdateOptionalParams): Promise<OnlineDeploymentsCreateOrUpdateResponse>;
    /**
     * Polls an Endpoint operation.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param endpointName Inference endpoint name.
     * @param deploymentName The name and identifier for the endpoint.
     * @param body The request containing parameters for retrieving logs.
     * @param options The options parameters.
     */
    getLogs(resourceGroupName: string, workspaceName: string, endpointName: string, deploymentName: string, body: DeploymentLogsRequest, options?: OnlineDeploymentsGetLogsOptionalParams): Promise<OnlineDeploymentsGetLogsResponse>;
}

/** Defines headers for OnlineDeployments_createOrUpdate operation. */
export declare interface OnlineDeploymentsCreateOrUpdateHeaders {
    /** Timeout for the client to use when polling the asynchronous operation. */
    xMsAsyncOperationTimeout?: string;
    /** URI to poll for asynchronous operation status. */
    azureAsyncOperation?: string;
}

/** Optional parameters. */
export declare interface OnlineDeploymentsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type OnlineDeploymentsCreateOrUpdateResponse = OnlineDeployment;

/** Defines headers for OnlineDeployments_delete operation. */
export declare interface OnlineDeploymentsDeleteHeaders {
    /** Timeout for the client to use when polling the asynchronous operation. */
    xMsAsyncOperationTimeout?: string;
    /** URI to poll for asynchronous operation result. */
    location?: string;
    /** Duration the client should wait between requests, in seconds. */
    retryAfter?: number;
}

/** Optional parameters. */
export declare interface OnlineDeploymentsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface OnlineDeploymentsGetLogsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getLogs operation. */
export declare type OnlineDeploymentsGetLogsResponse = DeploymentLogs;

/** Optional parameters. */
export declare interface OnlineDeploymentsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type OnlineDeploymentsGetResponse = OnlineDeployment;

/** Optional parameters. */
export declare interface OnlineDeploymentsListNextOptionalParams extends coreClient.OperationOptions {
    /** Continuation token for pagination. */
    skip?: string;
    /** Ordering of list. */
    orderBy?: string;
    /** Top of list. */
    top?: number;
}

/** Contains response data for the listNext operation. */
export declare type OnlineDeploymentsListNextResponse = OnlineDeploymentTrackedResourceArmPaginatedResult;

/** Optional parameters. */
export declare interface OnlineDeploymentsListOptionalParams extends coreClient.OperationOptions {
    /** Continuation token for pagination. */
    skip?: string;
    /** Ordering of list. */
    orderBy?: string;
    /** Top of list. */
    top?: number;
}

/** Contains response data for the list operation. */
export declare type OnlineDeploymentsListResponse = OnlineDeploymentTrackedResourceArmPaginatedResult;

/** Optional parameters. */
export declare interface OnlineDeploymentsListSkusNextOptionalParams extends coreClient.OperationOptions {
    /** Continuation token for pagination. */
    skip?: string;
    /** Number of Skus to be retrieved in a page of results. */
    count?: number;
}

/** Contains response data for the listSkusNext operation. */
export declare type OnlineDeploymentsListSkusNextResponse = SkuResourceArmPaginatedResult;

/** Optional parameters. */
export declare interface OnlineDeploymentsListSkusOptionalParams extends coreClient.OperationOptions {
    /** Continuation token for pagination. */
    skip?: string;
    /** Number of Skus to be retrieved in a page of results. */
    count?: number;
}

/** Contains response data for the listSkus operation. */
export declare type OnlineDeploymentsListSkusResponse = SkuResourceArmPaginatedResult;

/** Defines headers for OnlineDeployments_update operation. */
export declare interface OnlineDeploymentsUpdateHeaders {
    /** Timeout for the client to use when polling the asynchronous operation. */
    xMsAsyncOperationTimeout?: string;
    /** URI to poll for asynchronous operation result. */
    location?: string;
    /** Duration the client should wait between requests, in seconds. */
    retryAfter?: number;
}

/** Optional parameters. */
export declare interface OnlineDeploymentsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type OnlineDeploymentsUpdateResponse = OnlineDeployment;

/** A paginated list of OnlineDeployment entities. */
export declare interface OnlineDeploymentTrackedResourceArmPaginatedResult {
    /** The link to the next page of OnlineDeployment objects. If null, there are no additional pages. */
    nextLink?: string;
    /** An array of objects of type OnlineDeployment. */
    value?: OnlineDeployment[];
}

export declare interface OnlineEndpoint extends TrackedResource {
    /** Managed service identity (system assigned and/or user assigned identities) */
    identity?: ManagedServiceIdentity;
    /** Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type. */
    kind?: string;
    /** [Required] Additional attributes of the entity. */
    properties: OnlineEndpointProperties;
    /** Sku details required for ARM contract for Autoscaling. */
    sku?: Sku;
}

/** Online endpoint configuration */
export declare interface OnlineEndpointProperties extends EndpointPropertiesBase {
    /**
     * ARM resource ID of the compute if it exists.
     * optional
     */
    compute?: string;
    /**
     * Provisioning state for the endpoint.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: EndpointProvisioningState;
    /** Set to "Enabled" for endpoints that should allow public access when Private Link is enabled. */
    publicNetworkAccess?: PublicNetworkAccessType;
    /** Percentage of traffic from endpoint to divert to each deployment. Traffic values need to sum to 100. */
    traffic?: {
        [propertyName: string]: number;
    };
}

/** Interface representing a OnlineEndpoints. */
export declare interface OnlineEndpoints {
    /**
     * List Online Endpoints.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, options?: OnlineEndpointsListOptionalParams): PagedAsyncIterableIterator<OnlineEndpoint>;
    /**
     * Delete Online Endpoint (asynchronous).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param endpointName Online Endpoint name.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, workspaceName: string, endpointName: string, options?: OnlineEndpointsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Delete Online Endpoint (asynchronous).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param endpointName Online Endpoint name.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, workspaceName: string, endpointName: string, options?: OnlineEndpointsDeleteOptionalParams): Promise<void>;
    /**
     * Get Online Endpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param endpointName Online Endpoint name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, endpointName: string, options?: OnlineEndpointsGetOptionalParams): Promise<OnlineEndpointsGetResponse>;
    /**
     * Update Online Endpoint (asynchronous).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param endpointName Online Endpoint name.
     * @param body Online Endpoint entity to apply during operation.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, workspaceName: string, endpointName: string, body: PartialMinimalTrackedResourceWithIdentity, options?: OnlineEndpointsUpdateOptionalParams): Promise<PollerLike<PollOperationState<OnlineEndpointsUpdateResponse>, OnlineEndpointsUpdateResponse>>;
    /**
     * Update Online Endpoint (asynchronous).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param endpointName Online Endpoint name.
     * @param body Online Endpoint entity to apply during operation.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, workspaceName: string, endpointName: string, body: PartialMinimalTrackedResourceWithIdentity, options?: OnlineEndpointsUpdateOptionalParams): Promise<OnlineEndpointsUpdateResponse>;
    /**
     * Create or update Online Endpoint (asynchronous).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param endpointName Online Endpoint name.
     * @param body Online Endpoint entity to apply during operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, workspaceName: string, endpointName: string, body: OnlineEndpoint, options?: OnlineEndpointsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<OnlineEndpointsCreateOrUpdateResponse>, OnlineEndpointsCreateOrUpdateResponse>>;
    /**
     * Create or update Online Endpoint (asynchronous).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param endpointName Online Endpoint name.
     * @param body Online Endpoint entity to apply during operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, workspaceName: string, endpointName: string, body: OnlineEndpoint, options?: OnlineEndpointsCreateOrUpdateOptionalParams): Promise<OnlineEndpointsCreateOrUpdateResponse>;
    /**
     * List EndpointAuthKeys for an Endpoint using Key-based authentication.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param endpointName Online Endpoint name.
     * @param options The options parameters.
     */
    listKeys(resourceGroupName: string, workspaceName: string, endpointName: string, options?: OnlineEndpointsListKeysOptionalParams): Promise<OnlineEndpointsListKeysResponse>;
    /**
     * Regenerate EndpointAuthKeys for an Endpoint using Key-based authentication (asynchronous).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param endpointName Online Endpoint name.
     * @param body RegenerateKeys request .
     * @param options The options parameters.
     */
    beginRegenerateKeys(resourceGroupName: string, workspaceName: string, endpointName: string, body: RegenerateEndpointKeysRequest, options?: OnlineEndpointsRegenerateKeysOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Regenerate EndpointAuthKeys for an Endpoint using Key-based authentication (asynchronous).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param endpointName Online Endpoint name.
     * @param body RegenerateKeys request .
     * @param options The options parameters.
     */
    beginRegenerateKeysAndWait(resourceGroupName: string, workspaceName: string, endpointName: string, body: RegenerateEndpointKeysRequest, options?: OnlineEndpointsRegenerateKeysOptionalParams): Promise<void>;
    /**
     * Retrieve a valid AAD token for an Endpoint using AMLToken-based authentication.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param endpointName Online Endpoint name.
     * @param options The options parameters.
     */
    getToken(resourceGroupName: string, workspaceName: string, endpointName: string, options?: OnlineEndpointsGetTokenOptionalParams): Promise<OnlineEndpointsGetTokenResponse>;
}

/** Defines headers for OnlineEndpoints_createOrUpdate operation. */
export declare interface OnlineEndpointsCreateOrUpdateHeaders {
    /** Timeout for the client to use when polling the asynchronous operation. */
    xMsAsyncOperationTimeout?: string;
    /** URI to poll for asynchronous operation status. */
    azureAsyncOperation?: string;
}

/** Optional parameters. */
export declare interface OnlineEndpointsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type OnlineEndpointsCreateOrUpdateResponse = OnlineEndpoint;

/** Defines headers for OnlineEndpoints_delete operation. */
export declare interface OnlineEndpointsDeleteHeaders {
    /** Timeout for the client to use when polling the asynchronous operation. */
    xMsAsyncOperationTimeout?: string;
    /** URI to poll for asynchronous operation result. */
    location?: string;
    /** Duration the client should wait between requests, in seconds. */
    retryAfter?: number;
}

/** Optional parameters. */
export declare interface OnlineEndpointsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface OnlineEndpointsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type OnlineEndpointsGetResponse = OnlineEndpoint;

/** Optional parameters. */
export declare interface OnlineEndpointsGetTokenOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getToken operation. */
export declare type OnlineEndpointsGetTokenResponse = EndpointAuthToken;

/** Optional parameters. */
export declare interface OnlineEndpointsListKeysOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listKeys operation. */
export declare type OnlineEndpointsListKeysResponse = EndpointAuthKeys;

/** Optional parameters. */
export declare interface OnlineEndpointsListNextOptionalParams extends coreClient.OperationOptions {
    /** Continuation token for pagination. */
    skip?: string;
    /** Number of endpoints to be retrieved in a page of results. */
    count?: number;
    /** A set of tags with which to filter the returned models. It is a comma separated string of tags key or tags key=value. Example: tagKey1,tagKey2,tagKey3=value3 . */
    tags?: string;
    /** A set of properties with which to filter the returned models. It is a comma separated string of properties key and/or properties key=value Example: propKey1,propKey2,propKey3=value3 . */
    properties?: string;
    /** Name of the endpoint. */
    name?: string;
    /** EndpointComputeType to be filtered by. */
    computeType?: EndpointComputeType;
    /** The option to order the response. */
    orderBy?: OrderString;
}

/** Contains response data for the listNext operation. */
export declare type OnlineEndpointsListNextResponse = OnlineEndpointTrackedResourceArmPaginatedResult;

/** Optional parameters. */
export declare interface OnlineEndpointsListOptionalParams extends coreClient.OperationOptions {
    /** Continuation token for pagination. */
    skip?: string;
    /** Number of endpoints to be retrieved in a page of results. */
    count?: number;
    /** A set of tags with which to filter the returned models. It is a comma separated string of tags key or tags key=value. Example: tagKey1,tagKey2,tagKey3=value3 . */
    tags?: string;
    /** A set of properties with which to filter the returned models. It is a comma separated string of properties key and/or properties key=value Example: propKey1,propKey2,propKey3=value3 . */
    properties?: string;
    /** Name of the endpoint. */
    name?: string;
    /** EndpointComputeType to be filtered by. */
    computeType?: EndpointComputeType;
    /** The option to order the response. */
    orderBy?: OrderString;
}

/** Contains response data for the list operation. */
export declare type OnlineEndpointsListResponse = OnlineEndpointTrackedResourceArmPaginatedResult;

/** Defines headers for OnlineEndpoints_regenerateKeys operation. */
export declare interface OnlineEndpointsRegenerateKeysHeaders {
    /** URI to poll for asynchronous operation result. */
    location?: string;
    /** Duration the client should wait between requests, in seconds. */
    retryAfter?: number;
}

/** Optional parameters. */
export declare interface OnlineEndpointsRegenerateKeysOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Defines headers for OnlineEndpoints_update operation. */
export declare interface OnlineEndpointsUpdateHeaders {
    /** Timeout for the client to use when polling the asynchronous operation. */
    xMsAsyncOperationTimeout?: string;
    /** URI to poll for asynchronous operation result. */
    location?: string;
    /** Duration the client should wait between requests, in seconds. */
    retryAfter?: number;
}

/** Optional parameters. */
export declare interface OnlineEndpointsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type OnlineEndpointsUpdateResponse = OnlineEndpoint;

/** A paginated list of OnlineEndpoint entities. */
export declare interface OnlineEndpointTrackedResourceArmPaginatedResult {
    /** The link to the next page of OnlineEndpoint objects. If null, there are no additional pages. */
    nextLink?: string;
    /** An array of objects of type OnlineEndpoint. */
    value?: OnlineEndpoint[];
}

/** Online deployment scoring requests configuration. */
export declare interface OnlineRequestSettings {
    /** The number of maximum concurrent requests per node allowed per deployment. Defaults to 1. */
    maxConcurrentRequestsPerInstance?: number;
    /**
     * The maximum amount of time a request will stay in the queue in ISO 8601 format.
     * Defaults to 500ms.
     */
    maxQueueWait?: string;
    /**
     * The scoring timeout in ISO 8601 format.
     * Defaults to 5000ms.
     */
    requestTimeout?: string;
}

/** Online deployment scaling configuration. */
export declare interface OnlineScaleSettings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    scaleType: "Default" | "TargetUtilization";
}

export declare type OnlineScaleSettingsUnion = OnlineScaleSettings | DefaultScaleSettings | TargetUtilizationScaleSettings;

/**
 * Defines values for OperatingSystemType. \
 * {@link KnownOperatingSystemType} can be used interchangeably with OperatingSystemType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Linux** \
 * **Windows**
 */
export declare type OperatingSystemType = string;

/**
 * Defines values for OperationName. \
 * {@link KnownOperationName} can be used interchangeably with OperationName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Create** \
 * **Start** \
 * **Stop** \
 * **Restart** \
 * **Reimage** \
 * **Delete**
 */
export declare type OperationName = string;

/** Interface representing a Operations. */
export declare interface Operations {
    /**
     * Lists all of the available Azure Machine Learning Workspaces REST API operations.
     * @param options The options parameters.
     */
    list(options?: OperationsListOptionalParams): PagedAsyncIterableIterator<AmlOperation>;
}

/** Optional parameters. */
export declare interface OperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OperationsListResponse = AmlOperationListResult;

/**
 * Defines values for OperationStatus. \
 * {@link KnownOperationStatus} can be used interchangeably with OperationStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **InProgress** \
 * **Succeeded** \
 * **CreateFailed** \
 * **StartFailed** \
 * **StopFailed** \
 * **RestartFailed** \
 * **ReimageFailed** \
 * **DeleteFailed**
 */
export declare type OperationStatus = string;

/**
 * Defines values for OperationTrigger. \
 * {@link KnownOperationTrigger} can be used interchangeably with OperationTrigger,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Schedule** \
 * **IdleShutdown**
 */
export declare type OperationTrigger = string;

/**
 * Defines values for OrderString. \
 * {@link KnownOrderString} can be used interchangeably with OrderString,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **CreatedAtDesc** \
 * **CreatedAtAsc** \
 * **UpdatedAtDesc** \
 * **UpdatedAtAsc**
 */
export declare type OrderString = string;

/**
 * Defines values for OsType. \
 * {@link KnownOsType} can be used interchangeably with OsType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Linux** \
 * **Windows**
 */
export declare type OsType = string;

/**
 * Defines values for OutputDeliveryMode. \
 * {@link KnownOutputDeliveryMode} can be used interchangeably with OutputDeliveryMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ReadWriteMount** \
 * **Upload**
 */
export declare type OutputDeliveryMode = string;

/** Reference to an asset via its path in a job output. */
export declare interface OutputPathAssetReference extends AssetReferenceBase {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    referenceType: "OutputPath";
    /** ARM resource ID of the job. */
    jobId?: string;
    /** The path of the file/directory in the job output. */
    path?: string;
}

/** Paginated list of Machine Learning compute objects wrapped in ARM resource envelope. */
export declare interface PaginatedComputeResourcesList {
    /** An array of Machine Learning compute objects wrapped in ARM resource envelope. */
    value?: ComputeResource[];
    /** A continuation link (absolute URI) to the next page of results in the list. */
    nextLink?: string;
}

/** Mutable batch inference settings per deployment. */
export declare interface PartialBatchDeployment {
    /** Description of the endpoint deployment. */
    description?: string;
}

/** Strictly used in update requests. */
export declare interface PartialBatchDeploymentPartialMinimalTrackedResourceWithProperties {
    /** Additional attributes of the entity. */
    properties?: PartialBatchDeployment;
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string | null;
    };
}

/** Managed service identity (system assigned and/or user assigned identities) */
export declare interface PartialManagedServiceIdentity {
    /** Managed service identity (system assigned and/or user assigned identities) */
    type?: ManagedServiceIdentityType;
    /** The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests. */
    userAssignedIdentities?: {
        [propertyName: string]: Record<string, unknown>;
    };
}

/** Strictly used in update requests. */
export declare interface PartialMinimalTrackedResource {
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string | null;
    };
}

/** Strictly used in update requests. */
export declare interface PartialMinimalTrackedResourceWithIdentity extends PartialMinimalTrackedResource {
    /** Managed service identity (system assigned and/or user assigned identities) */
    identity?: PartialManagedServiceIdentity;
}

/** Strictly used in update requests. */
export declare interface PartialMinimalTrackedResourceWithSku extends PartialMinimalTrackedResource {
    /** Sku details required for ARM contract for Autoscaling. */
    sku?: PartialSku;
}

/** Common SKU definition. */
export declare interface PartialSku {
    /** If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted. */
    capacity?: number;
    /** If the service has different generations of hardware, for the same SKU, then that can be captured here. */
    family?: string;
    /** The name of the SKU. Ex - P3. It is typically a letter+number code. */
    name?: string;
    /** The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. */
    size?: string;
    /** This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT. */
    tier?: SkuTier;
}

export declare interface Password {
    /** NOTE: This property will not be serialized. It can only be populated by the server. */
    readonly name?: string;
    /** NOTE: This property will not be serialized. It can only be populated by the server. */
    readonly value?: string;
}

export declare interface PATAuthTypeWorkspaceConnectionProperties extends WorkspaceConnectionPropertiesV2 {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    authType: "PAT";
    credentials?: WorkspaceConnectionPersonalAccessToken;
}

/** Settings for a personal compute instance. */
export declare interface PersonalComputeInstanceSettings {
    /** A user explicitly assigned to a personal compute instance. */
    assignedUser?: AssignedUser;
}

/** Pipeline Job definition: defines generic to MFE attributes. */
export declare interface PipelineJob extends JobBaseProperties {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    jobType: "Pipeline";
    /** Inputs for the pipeline job. */
    inputs?: {
        [propertyName: string]: JobInputUnion | null;
    };
    /** Jobs construct the Pipeline Job. */
    jobs?: {
        [propertyName: string]: Record<string, unknown>;
    };
    /** Outputs for the pipeline job */
    outputs?: {
        [propertyName: string]: JobOutputUnion | null;
    };
    /** Pipeline settings, for things like ContinueRunOnStepFailure etc. */
    settings?: Record<string, unknown>;
    /** ARM resource ID of source job. */
    sourceJobId?: string;
}

/** The Private Endpoint resource. */
export declare interface PrivateEndpoint {
    /**
     * The ARM identifier for Private Endpoint
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The ARM identifier for Subnet resource that private endpoint links to
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly subnetArmId?: string;
}

/** The Private Endpoint Connection resource. */
export declare interface PrivateEndpointConnection extends Resource {
    /** The identity of the resource. */
    identity?: ManagedServiceIdentity;
    /** Specifies the location of the resource. */
    location?: string;
    /** Contains resource tags defined as key/value pairs. */
    tags?: {
        [propertyName: string]: string;
    };
    /** The sku of the workspace. */
    sku?: Sku;
    /** The resource of private end point. */
    privateEndpoint?: PrivateEndpoint;
    /** A collection of information about the state of the connection between service consumer and provider. */
    privateLinkServiceConnectionState?: PrivateLinkServiceConnectionState;
    /**
     * The provisioning state of the private endpoint connection resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: PrivateEndpointConnectionProvisioningState;
}

/** List of private endpoint connection associated with the specified workspace */
export declare interface PrivateEndpointConnectionListResult {
    /** Array of private endpoint connections */
    value?: PrivateEndpointConnection[];
}

/**
 * Defines values for PrivateEndpointConnectionProvisioningState. \
 * {@link KnownPrivateEndpointConnectionProvisioningState} can be used interchangeably with PrivateEndpointConnectionProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Creating** \
 * **Deleting** \
 * **Failed**
 */
export declare type PrivateEndpointConnectionProvisioningState = string;

/** Interface representing a PrivateEndpointConnections. */
export declare interface PrivateEndpointConnections {
    /**
     * List all the private endpoint connections associated with the workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, options?: PrivateEndpointConnectionsListOptionalParams): PagedAsyncIterableIterator<PrivateEndpointConnection>;
    /**
     * Gets the specified private endpoint connection associated with the workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the
     *                                      workspace
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, privateEndpointConnectionName: string, options?: PrivateEndpointConnectionsGetOptionalParams): Promise<PrivateEndpointConnectionsGetResponse>;
    /**
     * Update the state of specified private endpoint connection associated with the workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the
     *                                      workspace
     * @param properties The private endpoint connection properties.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, workspaceName: string, privateEndpointConnectionName: string, properties: PrivateEndpointConnection, options?: PrivateEndpointConnectionsCreateOrUpdateOptionalParams): Promise<PrivateEndpointConnectionsCreateOrUpdateResponse>;
    /**
     * Deletes the specified private endpoint connection associated with the workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the
     *                                      workspace
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, workspaceName: string, privateEndpointConnectionName: string, options?: PrivateEndpointConnectionsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type PrivateEndpointConnectionsCreateOrUpdateResponse = PrivateEndpointConnection;

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type PrivateEndpointConnectionsGetResponse = PrivateEndpointConnection;

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type PrivateEndpointConnectionsListResponse = PrivateEndpointConnectionListResult;

/**
 * Defines values for PrivateEndpointServiceConnectionStatus. \
 * {@link KnownPrivateEndpointServiceConnectionStatus} can be used interchangeably with PrivateEndpointServiceConnectionStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Pending** \
 * **Approved** \
 * **Rejected** \
 * **Disconnected** \
 * **Timeout**
 */
export declare type PrivateEndpointServiceConnectionStatus = string;

/** A private link resource */
export declare interface PrivateLinkResource extends Resource {
    /** The identity of the resource. */
    identity?: ManagedServiceIdentity;
    /** Specifies the location of the resource. */
    location?: string;
    /** Contains resource tags defined as key/value pairs. */
    tags?: {
        [propertyName: string]: string;
    };
    /** The sku of the workspace. */
    sku?: Sku;
    /**
     * The private link resource group id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly groupId?: string;
    /**
     * The private link resource required member names.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly requiredMembers?: string[];
    /** The private link resource Private link DNS zone name. */
    requiredZoneNames?: string[];
}

/** A list of private link resources */
export declare interface PrivateLinkResourceListResult {
    /** Array of private link resources */
    value?: PrivateLinkResource[];
}

/** Interface representing a PrivateLinkResources. */
export declare interface PrivateLinkResources {
    /**
     * Gets the private link resources that need to be created for a workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, options?: PrivateLinkResourcesListOptionalParams): Promise<PrivateLinkResourcesListResponse>;
}

/** Optional parameters. */
export declare interface PrivateLinkResourcesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type PrivateLinkResourcesListResponse = PrivateLinkResourceListResult;

/** A collection of information about the state of the connection between service consumer and provider. */
export declare interface PrivateLinkServiceConnectionState {
    /** Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service. */
    status?: PrivateEndpointServiceConnectionStatus;
    /** The reason for approval/rejection of the connection. */
    description?: string;
    /** A message indicating if changes on the service provider require any updates on the consumer. */
    actionsRequired?: string;
}

/** Deployment container liveness/readiness probe configuration. */
export declare interface ProbeSettings {
    /** The number of failures to allow before returning an unhealthy status. */
    failureThreshold?: number;
    /** The delay before the first probe in ISO 8601 format. */
    initialDelay?: string;
    /** The length of time between probes in ISO 8601 format. */
    period?: string;
    /** The number of successful probes before returning a healthy status. */
    successThreshold?: number;
    /** The probe timeout in ISO 8601 format. */
    timeout?: string;
}

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **Updating** \
 * **Creating** \
 * **Deleting** \
 * **Succeeded** \
 * **Failed** \
 * **Canceled**
 */
export declare type ProvisioningState = string;

/**
 * Defines values for ProvisioningStatus. \
 * {@link KnownProvisioningStatus} can be used interchangeably with ProvisioningStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Completed** \
 * **Provisioning** \
 * **Failed**
 */
export declare type ProvisioningStatus = string;

/**
 * Defines values for PublicNetworkAccess. \
 * {@link KnownPublicNetworkAccess} can be used interchangeably with PublicNetworkAccess,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export declare type PublicNetworkAccess = string;

/**
 * Defines values for PublicNetworkAccessType. \
 * {@link KnownPublicNetworkAccessType} can be used interchangeably with PublicNetworkAccessType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export declare type PublicNetworkAccessType = string;

/** PyTorch distribution configuration. */
export declare interface PyTorch extends DistributionConfiguration {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    distributionType: "PyTorch";
    /** Number of processes per node. */
    processCountPerInstance?: number;
}

/** The properties for Quota update or retrieval. */
export declare interface QuotaBaseProperties {
    /** Specifies the resource ID. */
    id?: string;
    /** Specifies the resource type. */
    type?: string;
    /** The maximum permitted quota of the resource. */
    limit?: number;
    /** An enum describing the unit of quota measurement. */
    unit?: QuotaUnit;
}

/** Interface representing a Quotas. */
export declare interface Quotas {
    /**
     * Gets the currently assigned Workspace Quotas based on VMFamily.
     * @param location The location for which resource usage is queried.
     * @param options The options parameters.
     */
    list(location: string, options?: QuotasListOptionalParams): PagedAsyncIterableIterator<ResourceQuota>;
    /**
     * Update quota for each VM family in workspace.
     * @param location The location for update quota is queried.
     * @param parameters Quota update parameters.
     * @param options The options parameters.
     */
    update(location: string, parameters: QuotaUpdateParameters, options?: QuotasUpdateOptionalParams): Promise<QuotasUpdateResponse>;
}

/** Optional parameters. */
export declare interface QuotasListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type QuotasListNextResponse = ListWorkspaceQuotas;

/** Optional parameters. */
export declare interface QuotasListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type QuotasListResponse = ListWorkspaceQuotas;

/** Optional parameters. */
export declare interface QuotasUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type QuotasUpdateResponse = UpdateWorkspaceQuotasResult;

/**
 * Defines values for QuotaUnit. \
 * {@link KnownQuotaUnit} can be used interchangeably with QuotaUnit,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Count**
 */
export declare type QuotaUnit = string;

/** Quota update parameters. */
export declare interface QuotaUpdateParameters {
    /** The list for update quota. */
    value?: QuotaBaseProperties[];
    /** Region of workspace quota to be updated. */
    location?: string;
}

/** Defines a Sampling Algorithm that generates values randomly */
export declare interface RandomSamplingAlgorithm extends SamplingAlgorithm {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    samplingAlgorithmType: "Random";
    /** The specific type of random algorithm */
    rule?: RandomSamplingAlgorithmRule;
    /** An optional integer to use as the seed for random number generation */
    seed?: number;
}

/**
 * Defines values for RandomSamplingAlgorithmRule. \
 * {@link KnownRandomSamplingAlgorithmRule} can be used interchangeably with RandomSamplingAlgorithmRule,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Random** \
 * **Sobol**
 */
export declare type RandomSamplingAlgorithmRule = string;

/**
 * Defines values for RecurrenceFrequency. \
 * {@link KnownRecurrenceFrequency} can be used interchangeably with RecurrenceFrequency,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Minute**: Minute frequency \
 * **Hour**: Hour frequency \
 * **Day**: Day frequency \
 * **Week**: Week frequency \
 * **Month**: Month frequency
 */
export declare type RecurrenceFrequency = string;

export declare interface RecurrenceSchedule {
    /** [Required] List of hours for the schedule. */
    hours: number[];
    /** [Required] List of minutes for the schedule. */
    minutes: number[];
    /** List of month days for the schedule */
    monthDays?: number[];
    /** List of days for the schedule. */
    weekDays?: WeekDay[];
}

export declare interface RecurrenceTrigger extends TriggerBase {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    triggerType: "Recurrence";
    /** [Required] The frequency to trigger schedule. */
    frequency: RecurrenceFrequency;
    /** [Required] Specifies schedule interval in conjunction with frequency */
    interval: number;
    /** The recurrence schedule. */
    schedule?: RecurrenceSchedule;
}

/**
 * Defines values for ReferenceType. \
 * {@link KnownReferenceType} can be used interchangeably with ReferenceType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Id** \
 * **DataPath** \
 * **OutputPath**
 */
export declare type ReferenceType = string;

export declare interface RegenerateEndpointKeysRequest {
    /** [Required] Specification for which type of key to generate. Primary or Secondary. */
    keyType: KeyType_2;
    /** The value the key is set to. */
    keyValue?: string;
}

export declare interface RegistryListCredentialsResult {
    /** NOTE: This property will not be serialized. It can only be populated by the server. */
    readonly location?: string;
    /** NOTE: This property will not be serialized. It can only be populated by the server. */
    readonly username?: string;
    passwords?: Password[];
}

/** Regression task in AutoML Table vertical. */
export declare interface Regression extends TableVertical, AutoMLVertical {
    /** Primary metric for regression task. */
    primaryMetric?: RegressionPrimaryMetrics;
    /** Inputs for training phase for an AutoML Job. */
    trainingSettings?: RegressionTrainingSettings;
}

/**
 * Defines values for RegressionModels. \
 * {@link KnownRegressionModels} can be used interchangeably with RegressionModels,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ElasticNet**: Elastic net is a popular type of regularized linear regression that combines two popular penalties, specifically the L1 and L2 penalty functions. \
 * **GradientBoosting**: The technique of transiting week learners into a strong learner is called Boosting. The gradient boosting algorithm process works on this theory of execution. \
 * **DecisionTree**: Decision Trees are a non-parametric supervised learning method used for both classification and regression tasks.
 * The goal is to create a model that predicts the value of a target variable by learning simple decision rules inferred from the data features. \
 * **KNN**: K-nearest neighbors (KNN) algorithm uses 'feature similarity' to predict the values of new datapoints
 * which further means that the new data point will be assigned a value based on how closely it matches the points in the training set. \
 * **LassoLars**: Lasso model fit with Least Angle Regression a.k.a. Lars. It is a Linear Model trained with an L1 prior as regularizer. \
 * **SGD**: SGD: Stochastic gradient descent is an optimization algorithm often used in machine learning applications
 * to find the model parameters that correspond to the best fit between predicted and actual outputs.
 * It's an inexact but powerful technique. \
 * **RandomForest**: Random forest is a supervised learning algorithm.
 * The "forest" it builds, is an ensemble of decision trees, usually trained with the “bagging” method.
 * The general idea of the bagging method is that a combination of learning models increases the overall result. \
 * **ExtremeRandomTrees**: Extreme Trees is an ensemble machine learning algorithm that combines the predictions from many decision trees. It is related to the widely used random forest algorithm. \
 * **LightGBM**: LightGBM is a gradient boosting framework that uses tree based learning algorithms. \
 * **XGBoostRegressor**: XGBoostRegressor: Extreme Gradient Boosting Regressor is a supervised machine learning model using ensemble of base learners.
 */
export declare type RegressionModels = string;

/**
 * Defines values for RegressionPrimaryMetrics. \
 * {@link KnownRegressionPrimaryMetrics} can be used interchangeably with RegressionPrimaryMetrics,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SpearmanCorrelation**: The Spearman's rank coefficient of correlation is a nonparametric measure of rank correlation. \
 * **NormalizedRootMeanSquaredError**: The Normalized Root Mean Squared Error (NRMSE) the RMSE facilitates the comparison between models with different scales. \
 * **R2Score**: The R2 score is one of the performance evaluation measures for forecasting-based machine learning models. \
 * **NormalizedMeanAbsoluteError**: The Normalized Mean Absolute Error (NMAE) is a validation metric to compare the Mean Absolute Error (MAE) of (time) series with different scales.
 */
export declare type RegressionPrimaryMetrics = string;

/** Regression Training related configuration. */
export declare interface RegressionTrainingSettings extends TrainingSettings {
    /** Allowed models for regression task. */
    allowedTrainingAlgorithms?: RegressionModels[];
    /** Blocked models for regression task. */
    blockedTrainingAlgorithms?: RegressionModels[];
}

/**
 * Defines values for RemoteLoginPortPublicAccess. \
 * {@link KnownRemoteLoginPortPublicAccess} can be used interchangeably with RemoteLoginPortPublicAccess,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled** \
 * **NotSpecified**
 */
export declare type RemoteLoginPortPublicAccess = string;

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export declare interface Resource {
    /**
     * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
}

export declare interface ResourceBase {
    /** The asset description text. */
    description?: string;
    /** The asset property dictionary. */
    properties?: {
        [propertyName: string]: string | null;
    };
    /** Tag dictionary. Tags can be added, removed, and updated. */
    tags?: {
        [propertyName: string]: string | null;
    };
}

export declare interface ResourceConfiguration {
    /** Optional number of instances or nodes used by the compute target. */
    instanceCount?: number;
    /** Optional type of VM used as supported by the compute target. */
    instanceType?: string;
    /** Additional properties bag. */
    properties?: {
        [propertyName: string]: Record<string, unknown>;
    };
}

/** Represents a resource ID. For example, for a subnet, it is the resource URL for the subnet. */
export declare interface ResourceId {
    /** The ID of the resource */
    id: string;
}

/** The Resource Name. */
export declare interface ResourceName {
    /**
     * The name of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: string;
    /**
     * The localized name of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly localizedValue?: string;
}

/** The quota assigned to a resource. */
export declare interface ResourceQuota {
    /**
     * Specifies the resource ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Region of the AML workspace in the id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly amlWorkspaceLocation?: string;
    /**
     * Specifies the resource type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * Name of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: ResourceName;
    /**
     * The maximum permitted quota of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly limit?: number;
    /**
     * An enum describing the unit of quota measurement.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly unit?: QuotaUnit;
}

export declare interface Route {
    /** [Required] The path for the route. */
    path: string;
    /** [Required] The port for the route. */
    port: number;
}

/**
 * The Sampling Algorithm used to generate hyperparameter values, along with properties to
 * configure the algorithm
 */
export declare interface SamplingAlgorithm {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    samplingAlgorithmType: "Bayesian" | "Grid" | "Random";
}

/**
 * Defines values for SamplingAlgorithmType. \
 * {@link KnownSamplingAlgorithmType} can be used interchangeably with SamplingAlgorithmType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Grid** \
 * **Random** \
 * **Bayesian**
 */
export declare type SamplingAlgorithmType = string;

export declare type SamplingAlgorithmUnion = SamplingAlgorithm | BayesianSamplingAlgorithm | GridSamplingAlgorithm | RandomSamplingAlgorithm;

export declare interface SASAuthTypeWorkspaceConnectionProperties extends WorkspaceConnectionPropertiesV2 {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    authType: "SAS";
    credentials?: WorkspaceConnectionSharedAccessSignature;
}

/** SAS datastore credentials configuration. */
export declare interface SasDatastoreCredentials extends DatastoreCredentials {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    credentialsType: "Sas";
    /** [Required] Storage container secrets. */
    secrets: SasDatastoreSecrets;
}

/** Datastore SAS secrets. */
export declare interface SasDatastoreSecrets extends DatastoreSecrets {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    secretsType: "Sas";
    /** Storage container SAS token. */
    sasToken?: string;
}

/** scale settings for AML Compute */
export declare interface ScaleSettings {
    /** Max number of nodes to use */
    maxNodeCount: number;
    /** Min number of nodes to use */
    minNodeCount?: number;
    /** Node Idle Time before scaling down amlCompute. This string needs to be in the RFC Format. */
    nodeIdleTimeBeforeScaleDown?: string;
}

/** Desired scale settings for the amlCompute. */
export declare interface ScaleSettingsInformation {
    /** scale settings for AML Compute */
    scaleSettings?: ScaleSettings;
}

/**
 * Defines values for ScaleType. \
 * {@link KnownScaleType} can be used interchangeably with ScaleType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Default** \
 * **TargetUtilization**
 */
export declare type ScaleType = string;

/** Azure Resource Manager resource envelope. */
export declare interface Schedule extends Resource {
    /** [Required] Additional attributes of the entity. */
    properties: ScheduleProperties;
}

export declare interface ScheduleActionBase {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    actionType: "InvokeBatchEndpoint" | "CreateJob";
}

export declare type ScheduleActionBaseUnion = ScheduleActionBase | EndpointScheduleAction | JobScheduleAction;

/**
 * Defines values for ScheduleActionType. \
 * {@link KnownScheduleActionType} can be used interchangeably with ScheduleActionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **CreateJob** \
 * **InvokeBatchEndpoint**
 */
export declare type ScheduleActionType = string;

export declare interface ScheduleBase {
    /** A system assigned id for the schedule. */
    id?: string;
    /** The current deployment state of schedule. */
    provisioningStatus?: ScheduleProvisioningState;
    /** Is the schedule enabled or disabled? */
    status?: ScheduleStatus;
}

/**
 * Defines values for ScheduleListViewType. \
 * {@link KnownScheduleListViewType} can be used interchangeably with ScheduleListViewType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **EnabledOnly** \
 * **DisabledOnly** \
 * **All**
 */
export declare type ScheduleListViewType = string;

/** Base definition of a schedule */
export declare interface ScheduleProperties extends ResourceBase {
    /** [Required] Specifies the action of the schedule */
    action: ScheduleActionBaseUnion;
    /** Display name of schedule. */
    displayName?: string;
    /** Is the schedule enabled? */
    isEnabled?: boolean;
    /**
     * Provisioning state for the schedule.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ScheduleProvisioningStatus;
    /** [Required] Specifies the trigger details */
    trigger: TriggerBaseUnion;
}

/**
 * Defines values for ScheduleProvisioningState. \
 * {@link KnownScheduleProvisioningState} can be used interchangeably with ScheduleProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Completed** \
 * **Provisioning** \
 * **Failed**
 */
export declare type ScheduleProvisioningState = string;

/**
 * Defines values for ScheduleProvisioningStatus. \
 * {@link KnownScheduleProvisioningStatus} can be used interchangeably with ScheduleProvisioningStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Deleting** \
 * **Succeeded** \
 * **Failed** \
 * **Canceled**
 */
export declare type ScheduleProvisioningStatus = string;

/** A paginated list of Schedule entities. */
export declare interface ScheduleResourceArmPaginatedResult {
    /** The link to the next page of Schedule objects. If null, there are no additional pages. */
    nextLink?: string;
    /** An array of objects of type Schedule. */
    value?: Schedule[];
}

/** Interface representing a Schedules. */
export declare interface Schedules {
    /**
     * List schedules in specified workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, options?: SchedulesListOptionalParams): PagedAsyncIterableIterator<Schedule>;
    /**
     * Delete schedule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param name Schedule name.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, workspaceName: string, name: string, options?: SchedulesDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Delete schedule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param name Schedule name.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, workspaceName: string, name: string, options?: SchedulesDeleteOptionalParams): Promise<void>;
    /**
     * Get schedule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param name Schedule name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, name: string, options?: SchedulesGetOptionalParams): Promise<SchedulesGetResponse>;
    /**
     * Create or update schedule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param name Schedule name.
     * @param body Schedule definition.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, workspaceName: string, name: string, body: Schedule, options?: SchedulesCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<SchedulesCreateOrUpdateResponse>, SchedulesCreateOrUpdateResponse>>;
    /**
     * Create or update schedule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param name Schedule name.
     * @param body Schedule definition.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, workspaceName: string, name: string, body: Schedule, options?: SchedulesCreateOrUpdateOptionalParams): Promise<SchedulesCreateOrUpdateResponse>;
}

/** Defines headers for Schedules_createOrUpdate operation. */
export declare interface SchedulesCreateOrUpdateHeaders {
    /** Timeout for the client to use when polling the asynchronous operation. */
    xMsAsyncOperationTimeout?: string;
    /** URI to poll for asynchronous operation status. */
    azureAsyncOperation?: string;
}

/** Optional parameters. */
export declare interface SchedulesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type SchedulesCreateOrUpdateResponse = Schedule;

/** Defines headers for Schedules_delete operation. */
export declare interface SchedulesDeleteHeaders {
    /** Timeout for the client to use when polling the asynchronous operation. */
    xMsAsyncOperationTimeout?: string;
    /** URI to poll for asynchronous operation result. */
    location?: string;
    /** Duration the client should wait between requests, in seconds. */
    retryAfter?: number;
}

/** Optional parameters. */
export declare interface SchedulesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface SchedulesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type SchedulesGetResponse = Schedule;

/** Optional parameters. */
export declare interface SchedulesListNextOptionalParams extends coreClient.OperationOptions {
    /** Continuation token for pagination. */
    skip?: string;
    /** Status filter for schedule. */
    listViewType?: ScheduleListViewType;
}

/** Contains response data for the listNext operation. */
export declare type SchedulesListNextResponse = ScheduleResourceArmPaginatedResult;

/** Optional parameters. */
export declare interface SchedulesListOptionalParams extends coreClient.OperationOptions {
    /** Continuation token for pagination. */
    skip?: string;
    /** Status filter for schedule. */
    listViewType?: ScheduleListViewType;
}

/** Contains response data for the list operation. */
export declare type SchedulesListResponse = ScheduleResourceArmPaginatedResult;

/**
 * Defines values for ScheduleStatus. \
 * {@link KnownScheduleStatus} can be used interchangeably with ScheduleStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export declare type ScheduleStatus = string;

/** Script reference */
export declare interface ScriptReference {
    /** The storage source of the script: workspace. */
    scriptSource?: string;
    /** The location of scripts in the mounted volume. */
    scriptData?: string;
    /** Optional command line arguments passed to the script to run. */
    scriptArguments?: string;
    /** Optional time period passed to timeout command. */
    timeout?: string;
}

/** Customized setup scripts */
export declare interface ScriptsToExecute {
    /** Script that's run every time the machine starts. */
    startupScript?: ScriptReference;
    /** Script that's run only once during provision of the compute. */
    creationScript?: ScriptReference;
}

/** Forecasting seasonality. */
export declare interface Seasonality {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    mode: "Auto" | "Custom";
}

/**
 * Defines values for SeasonalityMode. \
 * {@link KnownSeasonalityMode} can be used interchangeably with SeasonalityMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Auto**: Seasonality to be determined automatically. \
 * **Custom**: Use the custom seasonality value.
 */
export declare type SeasonalityMode = string;

export declare type SeasonalityUnion = Seasonality | AutoSeasonality | CustomSeasonality;

/**
 * Defines values for SecretsType. \
 * {@link KnownSecretsType} can be used interchangeably with SecretsType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AccountKey** \
 * **Certificate** \
 * **Sas** \
 * **ServicePrincipal**
 */
export declare type SecretsType = string;

/**
 * Defines values for ServiceDataAccessAuthIdentity. \
 * {@link KnownServiceDataAccessAuthIdentity} can be used interchangeably with ServiceDataAccessAuthIdentity,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None**: Do not use any identity for service data access. \
 * **WorkspaceSystemAssignedIdentity**: Use the system assigned managed identity of the Workspace to authenticate service data access. \
 * **WorkspaceUserAssignedIdentity**: Use the user assigned managed identity of the Workspace to authenticate service data access.
 */
export declare type ServiceDataAccessAuthIdentity = string;

export declare interface ServiceManagedResourcesSettings {
    /** The settings for the service managed cosmosdb account. */
    cosmosDb?: CosmosDbSettings;
}

/** Service Principal datastore credentials configuration. */
export declare interface ServicePrincipalDatastoreCredentials extends DatastoreCredentials {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    credentialsType: "ServicePrincipal";
    /** Authority URL used for authentication. */
    authorityUrl?: string;
    /** [Required] Service principal client ID. */
    clientId: string;
    /** Resource the service principal has access to. */
    resourceUrl?: string;
    /** [Required] Service principal secrets. */
    secrets: ServicePrincipalDatastoreSecrets;
    /** [Required] ID of the tenant to which the service principal belongs. */
    tenantId: string;
}

/** Datastore Service Principal secrets. */
export declare interface ServicePrincipalDatastoreSecrets extends DatastoreSecrets {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    secretsType: "ServicePrincipal";
    /** Service principal secret. */
    clientSecret?: string;
}

/** Details of customized scripts to execute for setting up the cluster. */
export declare interface SetupScripts {
    /** Customized setup scripts */
    scripts?: ScriptsToExecute;
}

export declare interface SharedPrivateLinkResource {
    /** Unique name of the private link. */
    name?: string;
    /** The resource id that private link links to. */
    privateLinkResourceId?: string;
    /** The private link resource group id. */
    groupId?: string;
    /** Request message. */
    requestMessage?: string;
    /** Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service. */
    status?: PrivateEndpointServiceConnectionStatus;
}

/**
 * Defines values for ShortSeriesHandlingConfiguration. \
 * {@link KnownShortSeriesHandlingConfiguration} can be used interchangeably with ShortSeriesHandlingConfiguration,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None**: Represents no\/null value. \
 * **Auto**: Short series will be padded if there are no long series, otherwise short series will be dropped. \
 * **Pad**: All the short series will be padded. \
 * **Drop**: All the short series will be dropped.
 */
export declare type ShortSeriesHandlingConfiguration = string;

/** The resource model definition representing SKU */
export declare interface Sku {
    /** The name of the SKU. Ex - P3. It is typically a letter+number code */
    name: string;
    /** This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT. */
    tier?: SkuTier;
    /** The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. */
    size?: string;
    /** If the service has different generations of hardware, for the same SKU, then that can be captured here. */
    family?: string;
    /** If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted. */
    capacity?: number;
}

/** SKU capacity information */
export declare interface SkuCapacity {
    /** Gets or sets the default capacity. */
    default?: number;
    /** Gets or sets the maximum. */
    maximum?: number;
    /** Gets or sets the minimum. */
    minimum?: number;
    /** Gets or sets the type of the scale. */
    scaleType?: SkuScaleType;
}

/** Fulfills ARM Contract requirement to list all available SKUS for a resource. */
export declare interface SkuResource {
    /** Gets or sets the Sku Capacity. */
    capacity?: SkuCapacity;
    /**
     * The resource type name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resourceType?: string;
    /** Gets or sets the Sku. */
    sku?: SkuSetting;
}

/** A paginated list of SkuResource entities. */
export declare interface SkuResourceArmPaginatedResult {
    /** The link to the next page of SkuResource objects. If null, there are no additional pages. */
    nextLink?: string;
    /** An array of objects of type SkuResource. */
    value?: SkuResource[];
}

/**
 * Defines values for SkuScaleType. \
 * {@link KnownSkuScaleType} can be used interchangeably with SkuScaleType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Automatic**: Automatically scales node count. \
 * **Manual**: Node count scaled upon user request. \
 * **None**: Fixed set of nodes.
 */
export declare type SkuScaleType = string;

/** SkuSetting fulfills the need for stripped down SKU info in ARM contract. */
export declare interface SkuSetting {
    /** [Required] The name of the SKU. Ex - P3. It is typically a letter+number code. */
    name: string;
    /** This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT. */
    tier?: SkuTier;
}

/** Defines values for SkuTier. */
export declare type SkuTier = "Free" | "Basic" | "Standard" | "Premium";

/**
 * Defines values for SourceType. \
 * {@link KnownSourceType} can be used interchangeably with SourceType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Dataset** \
 * **Datastore** \
 * **URI**
 */
export declare type SourceType = string;

/**
 * Defines values for SshPublicAccess. \
 * {@link KnownSshPublicAccess} can be used interchangeably with SshPublicAccess,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export declare type SshPublicAccess = string;

/**
 * Defines values for SslConfigStatus. \
 * {@link KnownSslConfigStatus} can be used interchangeably with SslConfigStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Disabled** \
 * **Enabled** \
 * **Auto**
 */
export declare type SslConfigStatus = string;

/** The ssl configuration for scoring */
export declare interface SslConfiguration {
    /** Enable or disable ssl for scoring */
    status?: SslConfigStatus;
    /** Cert data */
    cert?: string;
    /** Key data */
    key?: string;
    /** CNAME of the cert */
    cname?: string;
    /** Leaf domain label of public endpoint */
    leafDomainLabel?: string;
    /** Indicates whether to overwrite existing domain label. */
    overwriteExistingDomain?: boolean;
}

/** Advances setting to customize StackEnsemble run. */
export declare interface StackEnsembleSettings {
    /** Optional parameters to pass to the initializer of the meta-learner. */
    stackMetaLearnerKWargs?: Record<string, unknown>;
    /** Specifies the proportion of the training set (when choosing train and validation type of training) to be reserved for training the meta-learner. Default value is 0.2. */
    stackMetaLearnerTrainPercentage?: number;
    /** The meta-learner is a model trained on the output of the individual heterogeneous models. */
    stackMetaLearnerType?: StackMetaLearnerType;
}

/**
 * Defines values for StackMetaLearnerType. \
 * {@link KnownStackMetaLearnerType} can be used interchangeably with StackMetaLearnerType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **LogisticRegression**: Default meta-learners are LogisticRegression for classification tasks. \
 * **LogisticRegressionCV**: Default meta-learners are LogisticRegression for classification task when CV is on. \
 * **LightGBMClassifier** \
 * **ElasticNet**: Default meta-learners are LogisticRegression for regression task. \
 * **ElasticNetCV**: Default meta-learners are LogisticRegression for regression task when CV is on. \
 * **LightGBMRegressor** \
 * **LinearRegression**
 */
export declare type StackMetaLearnerType = string;

/**
 * Defines values for Status. \
 * {@link KnownStatus} can be used interchangeably with Status,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Undefined** \
 * **Success** \
 * **Failure** \
 * **InvalidQuotaBelowClusterMinimum** \
 * **InvalidQuotaExceedsSubscriptionLimit** \
 * **InvalidVMFamilyName** \
 * **OperationNotSupportedForSku** \
 * **OperationNotEnabledForRegion**
 */
export declare type Status = string;

/**
 * Defines values for StochasticOptimizer. \
 * {@link KnownStochasticOptimizer} can be used interchangeably with StochasticOptimizer,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None**: No optimizer selected. \
 * **Sgd**: Stochastic Gradient Descent optimizer. \
 * **Adam**: Adam is algorithm the optimizes stochastic objective functions based on adaptive estimates of moments \
 * **Adamw**: AdamW is a variant of the optimizer Adam that has an improved implementation of weight decay.
 */
export declare type StochasticOptimizer = string;

/**
 * Defines values for StorageAccountType. \
 * {@link KnownStorageAccountType} can be used interchangeably with StorageAccountType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Standard_LRS** \
 * **Premium_LRS**
 */
export declare type StorageAccountType = string;

/** Sweep job definition. */
export declare interface SweepJob extends JobBaseProperties {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    jobType: "Sweep";
    /** Early termination policies enable canceling poor-performing runs before they complete */
    earlyTermination?: EarlyTerminationPolicyUnion;
    /** Mapping of input data bindings used in the job. */
    inputs?: {
        [propertyName: string]: JobInputUnion | null;
    };
    /** Sweep Job limit. */
    limits?: SweepJobLimits;
    /** [Required] Optimization objective. */
    objective: Objective;
    /** Mapping of output data bindings used in the job. */
    outputs?: {
        [propertyName: string]: JobOutputUnion | null;
    };
    /** [Required] The hyperparameter sampling algorithm */
    samplingAlgorithm: SamplingAlgorithmUnion;
    /** [Required] A dictionary containing each parameter and its distribution. The dictionary key is the name of the parameter */
    searchSpace: Record<string, unknown>;
    /** [Required] Trial component definition. */
    trial: TrialComponent;
}

/** Sweep Job limit class. */
export declare interface SweepJobLimits extends JobLimits {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    jobLimitsType: "Sweep";
    /** Sweep Job max concurrent trials. */
    maxConcurrentTrials?: number;
    /** Sweep Job max total trials. */
    maxTotalTrials?: number;
    /** Sweep Job Trial timeout value. */
    trialTimeout?: string;
}

/** A SynapseSpark compute. */
export declare interface SynapseSpark extends Compute {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    computeType: "SynapseSpark";
    properties?: SynapseSparkProperties;
}

export declare interface SynapseSparkProperties {
    /** Auto scale properties. */
    autoScaleProperties?: AutoScaleProperties;
    /** Auto pause properties. */
    autoPauseProperties?: AutoPauseProperties;
    /** Spark version. */
    sparkVersion?: string;
    /** The number of compute nodes currently assigned to the compute. */
    nodeCount?: number;
    /** Node size. */
    nodeSize?: string;
    /** Node size family. */
    nodeSizeFamily?: string;
    /** Azure subscription identifier. */
    subscriptionId?: string;
    /** Name of the resource group in which workspace is located. */
    resourceGroup?: string;
    /** Name of Azure Machine Learning workspace. */
    workspaceName?: string;
    /** Pool name. */
    poolName?: string;
}

/** Metadata pertaining to creation and last modification of the resource. */
export declare interface SystemData {
    /** The identity that created the resource. */
    createdBy?: string;
    /** The type of identity that created the resource. */
    createdByType?: CreatedByType;
    /** The timestamp of resource creation (UTC). */
    createdAt?: Date;
    /** The identity that last modified the resource. */
    lastModifiedBy?: string;
    /** The type of identity that last modified the resource. */
    lastModifiedByType?: CreatedByType;
    /** The timestamp of resource last modification (UTC) */
    lastModifiedAt?: Date;
}

/** A system service running on a compute. */
export declare interface SystemService {
    /**
     * The type of this system service.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemServiceType?: string;
    /**
     * Public IP address
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly publicIpAddress?: string;
    /**
     * The version for this type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly version?: string;
}

/** Abstract class for AutoML tasks that use table dataset as input - such as Classification/Regression/Forecasting. */
export declare interface TableVertical {
    /** Columns to use for CVSplit data. */
    cvSplitColumnNames?: string[];
    /** Featurization inputs needed for AutoML job. */
    featurizationSettings?: TableVerticalFeaturizationSettings;
    /** Execution constraints for AutoMLJob. */
    limitSettings?: TableVerticalLimitSettings;
    /**
     * Number of cross validation folds to be applied on training dataset
     * when validation dataset is not provided.
     */
    nCrossValidations?: NCrossValidationsUnion;
    /** Test data input. */
    testData?: MLTableJobInput;
    /**
     * The fraction of test dataset that needs to be set aside for validation purpose.
     * Values between (0.0 , 1.0)
     * Applied when validation dataset is not provided.
     */
    testDataSize?: number;
    /** Validation data inputs. */
    validationData?: MLTableJobInput;
    /**
     * The fraction of training dataset that needs to be set aside for validation purpose.
     * Values between (0.0 , 1.0)
     * Applied when validation dataset is not provided.
     */
    validationDataSize?: number;
    /** The name of the sample weight column. Automated ML supports a weighted column as an input, causing rows in the data to be weighted up or down. */
    weightColumnName?: string;
}

/** Featurization Configuration. */
export declare interface TableVerticalFeaturizationSettings extends FeaturizationSettings {
    /** These transformers shall not be used in featurization. */
    blockedTransformers?: BlockedTransformers[];
    /** Dictionary of column name and its type (int, float, string, datetime etc). */
    columnNameAndTypes?: {
        [propertyName: string]: string | null;
    };
    /** Determines whether to use Dnn based featurizers for data featurization. */
    enableDnnFeaturization?: boolean;
    /**
     * Featurization mode - User can keep the default 'Auto' mode and AutoML will take care of necessary transformation of the data in featurization phase.
     * If 'Off' is selected then no featurization is done.
     * If 'Custom' is selected then user can specify additional inputs to customize how featurization is done.
     */
    mode?: FeaturizationMode;
    /** User can specify additional transformers to be used along with the columns to which it would be applied and parameters for the transformer constructor. */
    transformerParams?: {
        [propertyName: string]: ColumnTransformer[] | null;
    };
}

/** Job execution constraints. */
export declare interface TableVerticalLimitSettings {
    /** Enable early termination, determines whether or not if AutoMLJob will terminate early if there is no score improvement in last 20 iterations. */
    enableEarlyTermination?: boolean;
    /** Exit score for the AutoML job. */
    exitScore?: number;
    /** Maximum Concurrent iterations. */
    maxConcurrentTrials?: number;
    /** Max cores per iteration. */
    maxCoresPerTrial?: number;
    /** Number of iterations. */
    maxTrials?: number;
    /** AutoML job timeout. */
    timeout?: string;
    /** Iteration timeout. */
    trialTimeout?: string;
}

/**
 * Defines values for TargetAggregationFunction. \
 * {@link KnownTargetAggregationFunction} can be used interchangeably with TargetAggregationFunction,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None**: Represent no value set. \
 * **Sum** \
 * **Max** \
 * **Min** \
 * **Mean**
 */
export declare type TargetAggregationFunction = string;

/** The number of past periods to lag from the target column. */
export declare interface TargetLags {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    mode: "Auto" | "Custom";
}

/**
 * Defines values for TargetLagsMode. \
 * {@link KnownTargetLagsMode} can be used interchangeably with TargetLagsMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Auto**: Target lags to be determined automatically. \
 * **Custom**: Use the custom target lags.
 */
export declare type TargetLagsMode = string;

export declare type TargetLagsUnion = TargetLags | AutoTargetLags | CustomTargetLags;

/** Forecasting target rolling window size. */
export declare interface TargetRollingWindowSize {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    mode: "Auto" | "Custom";
}

/**
 * Defines values for TargetRollingWindowSizeMode. \
 * {@link KnownTargetRollingWindowSizeMode} can be used interchangeably with TargetRollingWindowSizeMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Auto**: Determine rolling windows size automatically. \
 * **Custom**: Use the specified rolling window size.
 */
export declare type TargetRollingWindowSizeMode = string;

export declare type TargetRollingWindowSizeUnion = TargetRollingWindowSize | AutoTargetRollingWindowSize | CustomTargetRollingWindowSize;

export declare interface TargetUtilizationScaleSettings extends OnlineScaleSettings {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    scaleType: "TargetUtilization";
    /** The maximum number of instances that the deployment can scale to. The quota will be reserved for max_instances. */
    maxInstances?: number;
    /** The minimum number of instances to always be present. */
    minInstances?: number;
    /** The polling interval in ISO 8691 format. Only supports duration with precision as low as Seconds. */
    pollingInterval?: string;
    /** Target CPU usage for the autoscaler. */
    targetUtilizationPercentage?: number;
}

/**
 * Defines values for TaskType. \
 * {@link KnownTaskType} can be used interchangeably with TaskType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Classification**: Classification in machine learning and statistics is a supervised learning approach in which
 * the computer program learns from the data given to it and make new observations or classifications. \
 * **Regression**: Regression means to predict the value using the input data. Regression models are used to predict a continuous value. \
 * **Forecasting**: Forecasting is a special kind of regression task that deals with time-series data and creates forecasting model
 * that can be used to predict the near future values based on the inputs. \
 * **ImageClassification**: Image Classification. Multi-class image classification is used when an image is classified with only a single label
 * from a set of classes - e.g. each image is classified as either an image of a 'cat' or a 'dog' or a 'duck'. \
 * **ImageClassificationMultilabel**: Image Classification Multilabel. Multi-label image classification is used when an image could have one or more labels
 * from a set of labels - e.g. an image could be labeled with both 'cat' and 'dog'. \
 * **ImageObjectDetection**: Image Object Detection. Object detection is used to identify objects in an image and locate each object with a
 * bounding box e.g. locate all dogs and cats in an image and draw a bounding box around each. \
 * **ImageInstanceSegmentation**: Image Instance Segmentation. Instance segmentation is used to identify objects in an image at the pixel level,
 * drawing a polygon around each object in the image. \
 * **TextClassification**: Text classification (also known as text tagging or text categorization) is the process of sorting texts into categories.
 * Categories are mutually exclusive. \
 * **TextClassificationMultilabel**: Multilabel classification task assigns each sample to a group (zero or more) of target labels. \
 * **TextNER**: Text Named Entity Recognition a.k.a. TextNER.
 * Named Entity Recognition (NER) is the ability to take free-form text and identify the occurrences of entities such as people, locations, organizations, and more.
 */
export declare type TaskType = string;

/** TensorFlow distribution configuration. */
export declare interface TensorFlow extends DistributionConfiguration {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    distributionType: "TensorFlow";
    /** Number of parameter server tasks. */
    parameterServerCount?: number;
    /** Number of workers. If not specified, will default to the instance count. */
    workerCount?: number;
}

/**
 * Text Classification task in AutoML NLP vertical.
 * NLP - Natural Language Processing.
 */
export declare interface TextClassification extends NlpVertical, AutoMLVertical {
    /** Primary metric for Text-Classification task. */
    primaryMetric?: ClassificationPrimaryMetrics;
}

/**
 * Text Classification Multilabel task in AutoML NLP vertical.
 * NLP - Natural Language Processing.
 */
export declare interface TextClassificationMultilabel extends NlpVertical, AutoMLVertical {
    /**
     * Primary metric for Text-Classification-Multilabel task.
     * Currently only Accuracy is supported as primary metric, hence user need not set it explicitly.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly primaryMetric?: ClassificationMultilabelPrimaryMetrics;
}

/**
 * Text-NER task in AutoML NLP vertical.
 * NER - Named Entity Recognition.
 * NLP - Natural Language Processing.
 */
export declare interface TextNer extends NlpVertical, AutoMLVertical {
    /**
     * Primary metric for Text-NER task.
     * Only 'Accuracy' is supported for Text-NER, so user need not set this explicitly.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly primaryMetric?: ClassificationPrimaryMetrics;
}

/** The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location' */
export declare interface TrackedResource extends Resource {
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** The geo-location where the resource lives */
    location: string;
}

/** Training related configuration. */
export declare interface TrainingSettings {
    /** Enable recommendation of DNN models. */
    enableDnnTraining?: boolean;
    /** Flag to turn on explainability on best model. */
    enableModelExplainability?: boolean;
    /** Flag for enabling onnx compatible models. */
    enableOnnxCompatibleModels?: boolean;
    /** Enable stack ensemble run. */
    enableStackEnsemble?: boolean;
    /** Enable voting ensemble run. */
    enableVoteEnsemble?: boolean;
    /**
     * During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
     * Configure this parameter with a higher value than 300 secs, if more time is needed.
     */
    ensembleModelDownloadTimeout?: string;
    /** Stack ensemble settings for stack ensemble run. */
    stackEnsembleSettings?: StackEnsembleSettings;
}

/** Trial component definition. */
export declare interface TrialComponent {
    /** ARM resource ID of the code asset. */
    codeId?: string;
    /** [Required] The command to execute on startup of the job. eg. "python train.py" */
    command: string;
    /** Distribution configuration of the job. If set, this should be one of Mpi, Tensorflow, PyTorch, or null. */
    distribution?: DistributionConfigurationUnion;
    /** [Required] The ARM resource ID of the Environment specification for the job. */
    environmentId: string;
    /** Environment variables included in the job. */
    environmentVariables?: {
        [propertyName: string]: string | null;
    };
    /** Compute Resource configuration for the job. */
    resources?: JobResourceConfiguration;
}

export declare interface TriggerBase {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    triggerType: "Recurrence" | "Cron";
    /**
     * Specifies end time of schedule in ISO 8601, but without a UTC offset. Refer https://en.wikipedia.org/wiki/ISO_8601.
     * Recommented format would be "2022-06-01T00:00:01"
     * If not present, the schedule will run indefinitely
     */
    endTime?: string;
    /** Specifies start time of schedule in ISO 8601 format, but without a UTC offset. */
    startTime?: string;
    /**
     * Specifies time zone in which the schedule runs.
     * TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
     */
    timeZone?: string;
}

export declare type TriggerBaseUnion = TriggerBase | RecurrenceTrigger | CronTrigger;

/**
 * Defines values for TriggerType. \
 * {@link KnownTriggerType} can be used interchangeably with TriggerType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Recurrence** \
 * **Cron**
 */
export declare type TriggerType = string;

export declare interface TritonModelJobInput extends AssetJobInput, JobInput {
}

export declare interface TritonModelJobOutput extends AssetJobOutput, JobOutput {
}

/** Defines an early termination policy that cancels a given percentage of runs at each evaluation interval. */
export declare interface TruncationSelectionPolicy extends EarlyTerminationPolicy {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    policyType: "TruncationSelection";
    /** The percentage of runs to cancel at each evaluation interval. */
    truncationPercentage?: number;
}

/**
 * Defines values for UnderlyingResourceAction. \
 * {@link KnownUnderlyingResourceAction} can be used interchangeably with UnderlyingResourceAction,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Delete** \
 * **Detach**
 */
export declare type UnderlyingResourceAction = string;

/**
 * Defines values for UnitOfMeasure. \
 * {@link KnownUnitOfMeasure} can be used interchangeably with UnitOfMeasure,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **OneHour**
 */
export declare type UnitOfMeasure = string;

/** The properties for update Quota response. */
export declare interface UpdateWorkspaceQuotas {
    /**
     * Specifies the resource ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Specifies the resource type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** The maximum permitted quota of the resource. */
    limit?: number;
    /**
     * An enum describing the unit of quota measurement.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly unit?: QuotaUnit;
    /** Status of update workspace quota. */
    status?: Status;
}

/** The result of update workspace quota. */
export declare interface UpdateWorkspaceQuotasResult {
    /**
     * The list of workspace quota update result.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: UpdateWorkspaceQuotas[];
    /**
     * The URI to fetch the next page of workspace quota update result. Call ListNext() with this to fetch the next page of Workspace Quota update result.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** uri-file data version entity */
export declare interface UriFileDataVersion extends DataVersionBaseProperties {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    dataType: "uri_file";
}

export declare interface UriFileJobInput extends AssetJobInput, JobInput {
}

export declare interface UriFileJobOutput extends AssetJobOutput, JobOutput {
}

/** uri-folder data version entity */
export declare interface UriFolderDataVersion extends DataVersionBaseProperties {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    dataType: "uri_folder";
}

export declare interface UriFolderJobInput extends AssetJobInput, JobInput {
}

export declare interface UriFolderJobOutput extends AssetJobOutput, JobOutput {
}

/** Describes AML Resource Usage. */
export declare interface Usage {
    /**
     * Specifies the resource ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Region of the AML workspace in the id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly amlWorkspaceLocation?: string;
    /**
     * Specifies the resource type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * An enum describing the unit of usage measurement.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly unit?: UsageUnit;
    /**
     * The current usage of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly currentValue?: number;
    /**
     * The maximum permitted usage of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly limit?: number;
    /**
     * The name of the type of usage.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: UsageName;
}

/** The Usage Names. */
export declare interface UsageName {
    /**
     * The name of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: string;
    /**
     * The localized name of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly localizedValue?: string;
}

/** Interface representing a Usages. */
export declare interface Usages {
    /**
     * Gets the current usage information as well as limits for AML resources for given subscription and
     * location.
     * @param location The location for which resource usage is queried.
     * @param options The options parameters.
     */
    list(location: string, options?: UsagesListOptionalParams): PagedAsyncIterableIterator<Usage>;
}

/** Optional parameters. */
export declare interface UsagesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type UsagesListNextResponse = ListUsagesResult;

/** Optional parameters. */
export declare interface UsagesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type UsagesListResponse = ListUsagesResult;

/**
 * Defines values for UsageUnit. \
 * {@link KnownUsageUnit} can be used interchangeably with UsageUnit,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Count**
 */
export declare type UsageUnit = string;

/** Settings for user account that gets created on each on the nodes of a compute. */
export declare interface UserAccountCredentials {
    /** Name of the administrator user account which can be used to SSH to nodes. */
    adminUserName: string;
    /** SSH public key of the administrator user account. */
    adminUserSshPublicKey?: string;
    /** Password of the administrator user account. */
    adminUserPassword?: string;
}

/** User assigned identity properties */
export declare interface UserAssignedIdentity {
    /**
     * The principal ID of the assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
    /**
     * The client ID of the assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly clientId?: string;
}

/** User identity configuration. */
export declare interface UserIdentity extends IdentityConfiguration {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    identityType: "UserIdentity";
}

export declare interface UsernamePasswordAuthTypeWorkspaceConnectionProperties extends WorkspaceConnectionPropertiesV2 {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    authType: "UsernamePassword";
    credentials?: WorkspaceConnectionUsernamePassword;
}

/**
 * Defines values for UseStl. \
 * {@link KnownUseStl} can be used interchangeably with UseStl,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None**: No stl decomposition. \
 * **Season** \
 * **SeasonTrend**
 */
export declare type UseStl = string;

/**
 * Defines values for ValidationMetricType. \
 * {@link KnownValidationMetricType} can be used interchangeably with ValidationMetricType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None**: No metric. \
 * **Coco**: Coco metric. \
 * **Voc**: Voc metric. \
 * **CocoVoc**: CocoVoc metric.
 */
export declare type ValidationMetricType = string;

/**
 * Defines values for ValueFormat. \
 * {@link KnownValueFormat} can be used interchangeably with ValueFormat,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **JSON**
 */
export declare type ValueFormat = string;

/** A Machine Learning compute based on Azure Virtual Machines. */
export declare interface VirtualMachine extends Compute, VirtualMachineSchema {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    computeType: "VirtualMachine";
}

/** Virtual Machine image for Windows AML Compute */
export declare interface VirtualMachineImage {
    /** Virtual Machine image path */
    id: string;
}

export declare interface VirtualMachineSchema {
    properties?: VirtualMachineSchemaProperties;
}

export declare interface VirtualMachineSchemaProperties {
    /** Virtual Machine size */
    virtualMachineSize?: string;
    /** Port open for ssh connections. */
    sshPort?: number;
    /** Notebook server port open for ssh connections. */
    notebookServerPort?: number;
    /** Public IP address of the virtual machine. */
    address?: string;
    /** Admin credentials for virtual machine */
    administratorAccount?: VirtualMachineSshCredentials;
    /** Indicates whether this compute will be used for running notebooks. */
    isNotebookInstanceCompute?: boolean;
}

/** Secrets related to a Machine Learning compute based on AKS. */
export declare interface VirtualMachineSecrets extends ComputeSecrets, VirtualMachineSecretsSchema {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    computeType: "VirtualMachine";
}

export declare interface VirtualMachineSecretsSchema {
    /** Admin credentials for virtual machine. */
    administratorAccount?: VirtualMachineSshCredentials;
}

/** Describes the properties of a VM size. */
export declare interface VirtualMachineSize {
    /**
     * The name of the virtual machine size.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The family name of the virtual machine size.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly family?: string;
    /**
     * The number of vCPUs supported by the virtual machine size.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly vCPUs?: number;
    /**
     * The number of gPUs supported by the virtual machine size.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly gpus?: number;
    /**
     * The OS VHD disk size, in MB, allowed by the virtual machine size.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly osVhdSizeMB?: number;
    /**
     * The resource volume size, in MB, allowed by the virtual machine size.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly maxResourceVolumeMB?: number;
    /**
     * The amount of memory, in GB, supported by the virtual machine size.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly memoryGB?: number;
    /**
     * Specifies if the virtual machine size supports low priority VMs.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lowPriorityCapable?: boolean;
    /**
     * Specifies if the virtual machine size supports premium IO.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly premiumIO?: boolean;
    /** The estimated price information for using a VM. */
    estimatedVMPrices?: EstimatedVMPrices;
    /** Specifies the compute types supported by the virtual machine size. */
    supportedComputeTypes?: string[];
}

/** The List Virtual Machine size operation response. */
export declare interface VirtualMachineSizeListResult {
    /** The list of virtual machine sizes supported by AmlCompute. */
    value?: VirtualMachineSize[];
}

/** Interface representing a VirtualMachineSizes. */
export declare interface VirtualMachineSizes {
    /**
     * Returns supported VM Sizes in a location
     * @param location The location upon which virtual-machine-sizes is queried.
     * @param options The options parameters.
     */
    list(location: string, options?: VirtualMachineSizesListOptionalParams): Promise<VirtualMachineSizesListResponse>;
}

/** Optional parameters. */
export declare interface VirtualMachineSizesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type VirtualMachineSizesListResponse = VirtualMachineSizeListResult;

/** Admin credentials for virtual machine */
export declare interface VirtualMachineSshCredentials {
    /** Username of admin account */
    username?: string;
    /** Password of admin account */
    password?: string;
    /** Public key data */
    publicKeyData?: string;
    /** Private key data */
    privateKeyData?: string;
}

/**
 * Defines values for VMPriceOSType. \
 * {@link KnownVMPriceOSType} can be used interchangeably with VMPriceOSType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Linux** \
 * **Windows**
 */
export declare type VMPriceOSType = string;

/**
 * Defines values for VmPriority. \
 * {@link KnownVmPriority} can be used interchangeably with VmPriority,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Dedicated** \
 * **LowPriority**
 */
export declare type VmPriority = string;

/**
 * Defines values for VMTier. \
 * {@link KnownVMTier} can be used interchangeably with VMTier,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Standard** \
 * **LowPriority** \
 * **Spot**
 */
export declare type VMTier = string;

/**
 * Defines values for WeekDay. \
 * {@link KnownWeekDay} can be used interchangeably with WeekDay,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Monday**: Monday weekday \
 * **Tuesday**: Tuesday weekday \
 * **Wednesday**: Wednesday weekday \
 * **Thursday**: Thursday weekday \
 * **Friday**: Friday weekday \
 * **Saturday**: Saturday weekday \
 * **Sunday**: Sunday weekday
 */
export declare type WeekDay = string;

/** An object that represents a machine learning workspace. */
export declare interface Workspace extends Resource {
    /** The identity of the resource. */
    identity?: ManagedServiceIdentity;
    /** Specifies the location of the resource. */
    location?: string;
    /** Contains resource tags defined as key/value pairs. */
    tags?: {
        [propertyName: string]: string;
    };
    /** The sku of the workspace. */
    sku?: Sku;
    /**
     * The immutable id associated with this workspace.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly workspaceId?: string;
    /** The description of this workspace. */
    description?: string;
    /** The friendly name for this workspace. This name in mutable */
    friendlyName?: string;
    /** ARM id of the key vault associated with this workspace. This cannot be changed once the workspace has been created */
    keyVault?: string;
    /** ARM id of the application insights associated with this workspace. */
    applicationInsights?: string;
    /** ARM id of the container registry associated with this workspace. */
    containerRegistry?: string;
    /** ARM id of the storage account associated with this workspace. This cannot be changed once the workspace has been created */
    storageAccount?: string;
    /** Url for the discovery service to identify regional endpoints for machine learning experimentation services */
    discoveryUrl?: string;
    /**
     * The current deployment state of workspace resource. The provisioningState is to indicate states for resource provisioning.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /** The encryption settings of Azure ML workspace. */
    encryption?: EncryptionProperty;
    /** The flag to signal HBI data in the workspace and reduce diagnostic data collected by the service */
    hbiWorkspace?: boolean;
    /**
     * The name of the managed resource group created by workspace RP in customer subscription if the workspace is CMK workspace
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly serviceProvisionedResourceGroup?: string;
    /**
     * Count of private connections in the workspace
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly privateLinkCount?: number;
    /** The compute name for image build */
    imageBuildCompute?: string;
    /** The flag to indicate whether to allow public access when behind VNet. */
    allowPublicAccessWhenBehindVnet?: boolean;
    /** Whether requests from Public Network are allowed. */
    publicNetworkAccess?: PublicNetworkAccess;
    /**
     * The list of private endpoint connections in the workspace.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly privateEndpointConnections?: PrivateEndpointConnection[];
    /** The list of shared private link resources in this workspace. */
    sharedPrivateLinkResources?: SharedPrivateLinkResource[];
    /**
     * The notebook info of Azure ML workspace.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly notebookInfo?: NotebookResourceInfo;
    /** The service managed resource settings. */
    serviceManagedResourcesSettings?: ServiceManagedResourcesSettings;
    /** The user assigned identity resource id that represents the workspace identity. */
    primaryUserAssignedIdentity?: string;
    /**
     * The tenant id associated with this workspace.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
    /**
     * If the storage associated with the workspace has hierarchical namespace(HNS) enabled.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly storageHnsEnabled?: boolean;
    /**
     * The URI associated with this workspace that machine learning flow must point at to set up tracking.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly mlFlowTrackingUri?: string;
    /** Enabling v1_legacy_mode may prevent you from using features provided by the v2 API. */
    v1LegacyMode?: boolean;
}

export declare interface WorkspaceConnectionManagedIdentity {
    resourceId?: string;
    clientId?: string;
}

export declare interface WorkspaceConnectionPersonalAccessToken {
    pat?: string;
}

export declare interface WorkspaceConnectionPropertiesV2 {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    authType: "PAT" | "SAS" | "UsernamePassword" | "None" | "ManagedIdentity";
    /** Category of the connection */
    category?: ConnectionCategory;
    target?: string;
    /** Value details of the workspace connection. */
    value?: string;
    /** format for the workspace connection value */
    valueFormat?: ValueFormat;
}

export declare interface WorkspaceConnectionPropertiesV2BasicResource extends Resource {
    properties: WorkspaceConnectionPropertiesV2Union;
}

export declare interface WorkspaceConnectionPropertiesV2BasicResourceArmPaginatedResult {
    value?: WorkspaceConnectionPropertiesV2BasicResource[];
    /** NOTE: This property will not be serialized. It can only be populated by the server. */
    readonly nextLink?: string;
}

export declare type WorkspaceConnectionPropertiesV2Union = WorkspaceConnectionPropertiesV2 | PATAuthTypeWorkspaceConnectionProperties | SASAuthTypeWorkspaceConnectionProperties | UsernamePasswordAuthTypeWorkspaceConnectionProperties | NoneAuthTypeWorkspaceConnectionProperties | ManagedIdentityAuthTypeWorkspaceConnectionProperties;

/** Interface representing a WorkspaceConnections. */
export declare interface WorkspaceConnections {
    /**
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, options?: WorkspaceConnectionsListOptionalParams): PagedAsyncIterableIterator<WorkspaceConnectionPropertiesV2BasicResource>;
    /**
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param connectionName Friendly name of the workspace connection
     * @param parameters The object for creating or updating a new workspace connection
     * @param options The options parameters.
     */
    create(resourceGroupName: string, workspaceName: string, connectionName: string, parameters: WorkspaceConnectionPropertiesV2BasicResource, options?: WorkspaceConnectionsCreateOptionalParams): Promise<WorkspaceConnectionsCreateResponse>;
    /**
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param connectionName Friendly name of the workspace connection
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, connectionName: string, options?: WorkspaceConnectionsGetOptionalParams): Promise<WorkspaceConnectionsGetResponse>;
    /**
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param connectionName Friendly name of the workspace connection
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, workspaceName: string, connectionName: string, options?: WorkspaceConnectionsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface WorkspaceConnectionsCreateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the create operation. */
export declare type WorkspaceConnectionsCreateResponse = WorkspaceConnectionPropertiesV2BasicResource;

/** Optional parameters. */
export declare interface WorkspaceConnectionsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface WorkspaceConnectionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type WorkspaceConnectionsGetResponse = WorkspaceConnectionPropertiesV2BasicResource;

export declare interface WorkspaceConnectionSharedAccessSignature {
    sas?: string;
}

/** Optional parameters. */
export declare interface WorkspaceConnectionsListNextOptionalParams extends coreClient.OperationOptions {
    /** Target of the workspace connection. */
    target?: string;
    /** Category of the workspace connection. */
    category?: string;
}

/** Contains response data for the listNext operation. */
export declare type WorkspaceConnectionsListNextResponse = WorkspaceConnectionPropertiesV2BasicResourceArmPaginatedResult;

/** Optional parameters. */
export declare interface WorkspaceConnectionsListOptionalParams extends coreClient.OperationOptions {
    /** Target of the workspace connection. */
    target?: string;
    /** Category of the workspace connection. */
    category?: string;
}

/** Contains response data for the list operation. */
export declare type WorkspaceConnectionsListResponse = WorkspaceConnectionPropertiesV2BasicResourceArmPaginatedResult;

export declare interface WorkspaceConnectionUsernamePassword {
    username?: string;
    password?: string;
}

/** Interface representing a WorkspaceFeatures. */
export declare interface WorkspaceFeatures {
    /**
     * Lists all enabled features for a workspace
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, options?: WorkspaceFeaturesListOptionalParams): PagedAsyncIterableIterator<AmlUserFeature>;
}

/** Optional parameters. */
export declare interface WorkspaceFeaturesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type WorkspaceFeaturesListNextResponse = ListAmlUserFeatureResult;

/** Optional parameters. */
export declare interface WorkspaceFeaturesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type WorkspaceFeaturesListResponse = ListAmlUserFeatureResult;

/** The result of a request to list machine learning workspaces. */
export declare interface WorkspaceListResult {
    /** The list of machine learning workspaces. Since this list may be incomplete, the nextLink field should be used to request the next list of machine learning workspaces. */
    value?: Workspace[];
    /** The URI that can be used to request the next list of machine learning workspaces. */
    nextLink?: string;
}

/** Interface representing a Workspaces. */
export declare interface Workspaces {
    /**
     * Lists all the available machine learning workspaces under the specified resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: WorkspacesListByResourceGroupOptionalParams): PagedAsyncIterableIterator<Workspace>;
    /**
     * Lists all the available machine learning workspaces under the specified subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: WorkspacesListBySubscriptionOptionalParams): PagedAsyncIterableIterator<Workspace>;
    /**
     * Gets the properties of the specified machine learning workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, options?: WorkspacesGetOptionalParams): Promise<WorkspacesGetResponse>;
    /**
     * Creates or updates a workspace with the specified parameters.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param parameters The parameters for creating or updating a machine learning workspace.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, workspaceName: string, parameters: Workspace, options?: WorkspacesCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<WorkspacesCreateOrUpdateResponse>, WorkspacesCreateOrUpdateResponse>>;
    /**
     * Creates or updates a workspace with the specified parameters.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param parameters The parameters for creating or updating a machine learning workspace.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, workspaceName: string, parameters: Workspace, options?: WorkspacesCreateOrUpdateOptionalParams): Promise<WorkspacesCreateOrUpdateResponse>;
    /**
     * Deletes a machine learning workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, workspaceName: string, options?: WorkspacesDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes a machine learning workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, workspaceName: string, options?: WorkspacesDeleteOptionalParams): Promise<void>;
    /**
     * Updates a machine learning workspace with the specified parameters.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param parameters The parameters for updating a machine learning workspace.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, workspaceName: string, parameters: WorkspaceUpdateParameters, options?: WorkspacesUpdateOptionalParams): Promise<PollerLike<PollOperationState<WorkspacesUpdateResponse>, WorkspacesUpdateResponse>>;
    /**
     * Updates a machine learning workspace with the specified parameters.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param parameters The parameters for updating a machine learning workspace.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, workspaceName: string, parameters: WorkspaceUpdateParameters, options?: WorkspacesUpdateOptionalParams): Promise<WorkspacesUpdateResponse>;
    /**
     * Diagnose workspace setup issue.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param options The options parameters.
     */
    beginDiagnose(resourceGroupName: string, workspaceName: string, options?: WorkspacesDiagnoseOptionalParams): Promise<PollerLike<PollOperationState<WorkspacesDiagnoseResponse>, WorkspacesDiagnoseResponse>>;
    /**
     * Diagnose workspace setup issue.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param options The options parameters.
     */
    beginDiagnoseAndWait(resourceGroupName: string, workspaceName: string, options?: WorkspacesDiagnoseOptionalParams): Promise<WorkspacesDiagnoseResponse>;
    /**
     * Lists all the keys associated with this workspace. This includes keys for the storage account, app
     * insights and password for container registry
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param options The options parameters.
     */
    listKeys(resourceGroupName: string, workspaceName: string, options?: WorkspacesListKeysOptionalParams): Promise<WorkspacesListKeysResponse>;
    /**
     * Resync all the keys associated with this workspace. This includes keys for the storage account, app
     * insights and password for container registry
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param options The options parameters.
     */
    beginResyncKeys(resourceGroupName: string, workspaceName: string, options?: WorkspacesResyncKeysOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Resync all the keys associated with this workspace. This includes keys for the storage account, app
     * insights and password for container registry
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param options The options parameters.
     */
    beginResyncKeysAndWait(resourceGroupName: string, workspaceName: string, options?: WorkspacesResyncKeysOptionalParams): Promise<void>;
    /**
     * return notebook access token and refresh token
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param options The options parameters.
     */
    listNotebookAccessToken(resourceGroupName: string, workspaceName: string, options?: WorkspacesListNotebookAccessTokenOptionalParams): Promise<WorkspacesListNotebookAccessTokenResponse>;
    /**
     * Prepare a notebook.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param options The options parameters.
     */
    beginPrepareNotebook(resourceGroupName: string, workspaceName: string, options?: WorkspacesPrepareNotebookOptionalParams): Promise<PollerLike<PollOperationState<WorkspacesPrepareNotebookResponse>, WorkspacesPrepareNotebookResponse>>;
    /**
     * Prepare a notebook.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param options The options parameters.
     */
    beginPrepareNotebookAndWait(resourceGroupName: string, workspaceName: string, options?: WorkspacesPrepareNotebookOptionalParams): Promise<WorkspacesPrepareNotebookResponse>;
    /**
     * List storage account keys of a workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param options The options parameters.
     */
    listStorageAccountKeys(resourceGroupName: string, workspaceName: string, options?: WorkspacesListStorageAccountKeysOptionalParams): Promise<WorkspacesListStorageAccountKeysResponse>;
    /**
     * List keys of a notebook.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param options The options parameters.
     */
    listNotebookKeys(resourceGroupName: string, workspaceName: string, options?: WorkspacesListNotebookKeysOptionalParams): Promise<WorkspacesListNotebookKeysResponse>;
    /**
     * Called by Client (Portal, CLI, etc) to get a list of all external outbound dependencies (FQDNs)
     * programmatically.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param options The options parameters.
     */
    listOutboundNetworkDependenciesEndpoints(resourceGroupName: string, workspaceName: string, options?: WorkspacesListOutboundNetworkDependenciesEndpointsOptionalParams): Promise<WorkspacesListOutboundNetworkDependenciesEndpointsResponse>;
}

/** Optional parameters. */
export declare interface WorkspacesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type WorkspacesCreateOrUpdateResponse = Workspace;

/** Optional parameters. */
export declare interface WorkspacesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Defines headers for Workspaces_diagnose operation. */
export declare interface WorkspacesDiagnoseHeaders {
    /** URI to poll for asynchronous operation result. */
    location?: string;
    /** Duration the client should wait between requests, in seconds. */
    retryAfter?: number;
}

/** Optional parameters. */
export declare interface WorkspacesDiagnoseOptionalParams extends coreClient.OperationOptions {
    /** The parameter of diagnosing workspace health */
    parameters?: DiagnoseWorkspaceParameters;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the diagnose operation. */
export declare type WorkspacesDiagnoseResponse = DiagnoseResponseResult;

/** Optional parameters. */
export declare interface WorkspacesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type WorkspacesGetResponse = Workspace;

/** Optional parameters. */
export declare interface WorkspacesListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
    /** Continuation token for pagination. */
    skip?: string;
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type WorkspacesListByResourceGroupNextResponse = WorkspaceListResult;

/** Optional parameters. */
export declare interface WorkspacesListByResourceGroupOptionalParams extends coreClient.OperationOptions {
    /** Continuation token for pagination. */
    skip?: string;
}

/** Contains response data for the listByResourceGroup operation. */
export declare type WorkspacesListByResourceGroupResponse = WorkspaceListResult;

/** Optional parameters. */
export declare interface WorkspacesListBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
    /** Continuation token for pagination. */
    skip?: string;
}

/** Contains response data for the listBySubscriptionNext operation. */
export declare type WorkspacesListBySubscriptionNextResponse = WorkspaceListResult;

/** Optional parameters. */
export declare interface WorkspacesListBySubscriptionOptionalParams extends coreClient.OperationOptions {
    /** Continuation token for pagination. */
    skip?: string;
}

/** Contains response data for the listBySubscription operation. */
export declare type WorkspacesListBySubscriptionResponse = WorkspaceListResult;

/** Optional parameters. */
export declare interface WorkspacesListKeysOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listKeys operation. */
export declare type WorkspacesListKeysResponse = ListWorkspaceKeysResult;

/** Optional parameters. */
export declare interface WorkspacesListNotebookAccessTokenOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNotebookAccessToken operation. */
export declare type WorkspacesListNotebookAccessTokenResponse = NotebookAccessTokenResult;

/** Optional parameters. */
export declare interface WorkspacesListNotebookKeysOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNotebookKeys operation. */
export declare type WorkspacesListNotebookKeysResponse = ListNotebookKeysResult;

/** Optional parameters. */
export declare interface WorkspacesListOutboundNetworkDependenciesEndpointsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listOutboundNetworkDependenciesEndpoints operation. */
export declare type WorkspacesListOutboundNetworkDependenciesEndpointsResponse = ExternalFqdnResponse;

/** Optional parameters. */
export declare interface WorkspacesListStorageAccountKeysOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listStorageAccountKeys operation. */
export declare type WorkspacesListStorageAccountKeysResponse = ListStorageAccountKeysResult;

/** Optional parameters. */
export declare interface WorkspacesPrepareNotebookOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the prepareNotebook operation. */
export declare type WorkspacesPrepareNotebookResponse = NotebookResourceInfo;

/** Optional parameters. */
export declare interface WorkspacesResyncKeysOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface WorkspacesUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type WorkspacesUpdateResponse = Workspace;

/** The parameters for updating a machine learning workspace. */
export declare interface WorkspaceUpdateParameters {
    /** The resource tags for the machine learning workspace. */
    tags?: {
        [propertyName: string]: string;
    };
    /** The sku of the workspace. */
    sku?: Sku;
    /** The identity of the resource. */
    identity?: ManagedServiceIdentity;
    /** The description of this workspace. */
    description?: string;
    /** The friendly name for this workspace. */
    friendlyName?: string;
    /** The compute name for image build */
    imageBuildCompute?: string;
    /** The service managed resource settings. */
    serviceManagedResourcesSettings?: ServiceManagedResourcesSettings;
    /** The user assigned identity resource id that represents the workspace identity. */
    primaryUserAssignedIdentity?: string;
    /** Whether requests from Public Network are allowed. */
    publicNetworkAccess?: PublicNetworkAccess;
    /** ARM id of the application insights associated with this workspace. */
    applicationInsights?: string;
    /** ARM id of the container registry associated with this workspace. */
    containerRegistry?: string;
}

export { }
