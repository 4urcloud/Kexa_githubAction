/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from "tslib";
import { setContinuationToken } from "../pagingHelper";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/// <reference lib="esnext.asynciterable" />
/** Class containing QueryKeys operations. */
export class QueryKeysImpl {
    /**
     * Initialize a new instance of the class QueryKeys class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Returns the list of query API keys for the given Azure Cognitive Search service.
     * @param resourceGroupName The name of the resource group within the current subscription. You can
     *                          obtain this value from the Azure Resource Manager API or the portal.
     * @param searchServiceName The name of the Azure Cognitive Search service associated with the
     *                          specified resource group.
     * @param options The options parameters.
     */
    listBySearchService(resourceGroupName, searchServiceName, options) {
        const iter = this.listBySearchServicePagingAll(resourceGroupName, searchServiceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listBySearchServicePagingPage(resourceGroupName, searchServiceName, options, settings);
            }
        };
    }
    listBySearchServicePagingPage(resourceGroupName, searchServiceName, options, settings) {
        return __asyncGenerator(this, arguments, function* listBySearchServicePagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listBySearchService(resourceGroupName, searchServiceName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listBySearchServiceNext(resourceGroupName, searchServiceName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listBySearchServicePagingAll(resourceGroupName, searchServiceName, options) {
        return __asyncGenerator(this, arguments, function* listBySearchServicePagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.listBySearchServicePagingPage(resourceGroupName, searchServiceName, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Generates a new query key for the specified search service. You can create up to 50 query keys per
     * service.
     * @param resourceGroupName The name of the resource group within the current subscription. You can
     *                          obtain this value from the Azure Resource Manager API or the portal.
     * @param searchServiceName The name of the Azure Cognitive Search service associated with the
     *                          specified resource group.
     * @param name The name of the new query API key.
     * @param options The options parameters.
     */
    create(resourceGroupName, searchServiceName, name, options) {
        return this.client.sendOperationRequest({ resourceGroupName, searchServiceName, name, options }, createOperationSpec);
    }
    /**
     * Returns the list of query API keys for the given Azure Cognitive Search service.
     * @param resourceGroupName The name of the resource group within the current subscription. You can
     *                          obtain this value from the Azure Resource Manager API or the portal.
     * @param searchServiceName The name of the Azure Cognitive Search service associated with the
     *                          specified resource group.
     * @param options The options parameters.
     */
    _listBySearchService(resourceGroupName, searchServiceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, searchServiceName, options }, listBySearchServiceOperationSpec);
    }
    /**
     * Deletes the specified query key. Unlike admin keys, query keys are not regenerated. The process for
     * regenerating a query key is to delete and then recreate it.
     * @param resourceGroupName The name of the resource group within the current subscription. You can
     *                          obtain this value from the Azure Resource Manager API or the portal.
     * @param searchServiceName The name of the Azure Cognitive Search service associated with the
     *                          specified resource group.
     * @param key The query key to be deleted. Query keys are identified by value, not by name.
     * @param options The options parameters.
     */
    delete(resourceGroupName, searchServiceName, key, options) {
        return this.client.sendOperationRequest({ resourceGroupName, searchServiceName, key, options }, deleteOperationSpec);
    }
    /**
     * ListBySearchServiceNext
     * @param resourceGroupName The name of the resource group within the current subscription. You can
     *                          obtain this value from the Azure Resource Manager API or the portal.
     * @param searchServiceName The name of the Azure Cognitive Search service associated with the
     *                          specified resource group.
     * @param nextLink The nextLink from the previous successful call to the ListBySearchService method.
     * @param options The options parameters.
     */
    _listBySearchServiceNext(resourceGroupName, searchServiceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, searchServiceName, nextLink, options }, listBySearchServiceNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const createOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Search/searchServices/{searchServiceName}/createQueryKey/{name}",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.QueryKey
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.searchServiceName,
        Parameters.subscriptionId,
        Parameters.name
    ],
    headerParameters: [Parameters.accept, Parameters.clientRequestId],
    serializer
};
const listBySearchServiceOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Search/searchServices/{searchServiceName}/listQueryKeys",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.ListQueryKeysResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.searchServiceName,
        Parameters.subscriptionId
    ],
    headerParameters: [Parameters.accept, Parameters.clientRequestId],
    serializer
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Search/searchServices/{searchServiceName}/deleteQueryKey/{key}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.searchServiceName,
        Parameters.subscriptionId,
        Parameters.key
    ],
    headerParameters: [Parameters.accept, Parameters.clientRequestId],
    serializer
};
const listBySearchServiceNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ListQueryKeysResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.searchServiceName,
        Parameters.subscriptionId,
        Parameters.nextLink
    ],
    headerParameters: [Parameters.accept, Parameters.clientRequestId],
    serializer
};
//# sourceMappingURL=queryKeys.js.map