/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { SearchService as SearchServiceMapper, SearchServiceUpdate as SearchServiceUpdateMapper, CheckNameAvailabilityInput as CheckNameAvailabilityInputMapper, PrivateEndpointConnection as PrivateEndpointConnectionMapper, SharedPrivateLinkResource as SharedPrivateLinkResourceMapper } from "../models/mappers";
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2023-11-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const searchServiceName = {
    parameterPath: "searchServiceName",
    mapper: {
        serializedName: "searchServiceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const clientRequestId = {
    parameterPath: [
        "options",
        "searchManagementRequestOptions",
        "clientRequestId"
    ],
    mapper: {
        serializedName: "x-ms-client-request-id",
        type: {
            name: "Uuid"
        }
    }
};
export const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const keyKind = {
    parameterPath: "keyKind",
    mapper: {
        serializedName: "keyKind",
        required: true,
        type: {
            name: "Enum",
            allowedValues: ["primary", "secondary"]
        }
    }
};
export const name = {
    parameterPath: "name",
    mapper: {
        serializedName: "name",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const key = {
    parameterPath: "key",
    mapper: {
        serializedName: "key",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export const service = {
    parameterPath: "service",
    mapper: SearchServiceMapper
};
export const service1 = {
    parameterPath: "service",
    mapper: SearchServiceUpdateMapper
};
export const name1 = {
    parameterPath: "name",
    mapper: CheckNameAvailabilityInputMapper
};
export const typeParam = {
    parameterPath: "typeParam",
    mapper: CheckNameAvailabilityInputMapper
};
export const privateEndpointConnection = {
    parameterPath: "privateEndpointConnection",
    mapper: PrivateEndpointConnectionMapper
};
export const privateEndpointConnectionName = {
    parameterPath: "privateEndpointConnectionName",
    mapper: {
        serializedName: "privateEndpointConnectionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const sharedPrivateLinkResource = {
    parameterPath: "sharedPrivateLinkResource",
    mapper: SharedPrivateLinkResourceMapper
};
export const sharedPrivateLinkResourceName = {
    parameterPath: "sharedPrivateLinkResourceName",
    mapper: {
        serializedName: "sharedPrivateLinkResourceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const location = {
    parameterPath: "location",
    mapper: {
        serializedName: "location",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const skuName = {
    parameterPath: "skuName",
    mapper: {
        serializedName: "skuName",
        required: true,
        type: {
            name: "String"
        }
    }
};
//# sourceMappingURL=parameters.js.map