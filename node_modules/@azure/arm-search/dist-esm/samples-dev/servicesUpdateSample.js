/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { SearchManagementClient } from "@azure/arm-search";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to Updates an existing search service in the given resource group.
 *
 * @summary Updates an existing search service in the given resource group.
 * x-ms-original-file: specification/search/resource-manager/Microsoft.Search/stable/2023-11-01/examples/SearchUpdateService.json
 */
function searchUpdateService() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["SEARCH_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["SEARCH_RESOURCE_GROUP"] || "rg1";
        const searchServiceName = "mysearchservice";
        const service = {
            replicaCount: 2,
            tags: { appName: "My e-commerce app", newTag: "Adding a new tag" }
        };
        const credential = new DefaultAzureCredential();
        const client = new SearchManagementClient(credential, subscriptionId);
        const result = yield client.services.update(resourceGroupName, searchServiceName, service);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Updates an existing search service in the given resource group.
 *
 * @summary Updates an existing search service in the given resource group.
 * x-ms-original-file: specification/search/resource-manager/Microsoft.Search/stable/2023-11-01/examples/SearchUpdateServiceAuthOptions.json
 */
function searchUpdateServiceAuthOptions() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["SEARCH_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["SEARCH_RESOURCE_GROUP"] || "rg1";
        const searchServiceName = "mysearchservice";
        const service = {
            authOptions: {
                aadOrApiKey: { aadAuthFailureMode: "http401WithBearerChallenge" }
            },
            replicaCount: 2,
            tags: { appName: "My e-commerce app", newTag: "Adding a new tag" }
        };
        const credential = new DefaultAzureCredential();
        const client = new SearchManagementClient(credential, subscriptionId);
        const result = yield client.services.update(resourceGroupName, searchServiceName, service);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Updates an existing search service in the given resource group.
 *
 * @summary Updates an existing search service in the given resource group.
 * x-ms-original-file: specification/search/resource-manager/Microsoft.Search/stable/2023-11-01/examples/SearchUpdateServiceDisableLocalAuth.json
 */
function searchUpdateServiceDisableLocalAuth() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["SEARCH_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["SEARCH_RESOURCE_GROUP"] || "rg1";
        const searchServiceName = "mysearchservice";
        const service = {
            disableLocalAuth: true,
            replicaCount: 2,
            tags: { appName: "My e-commerce app", newTag: "Adding a new tag" }
        };
        const credential = new DefaultAzureCredential();
        const client = new SearchManagementClient(credential, subscriptionId);
        const result = yield client.services.update(resourceGroupName, searchServiceName, service);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Updates an existing search service in the given resource group.
 *
 * @summary Updates an existing search service in the given resource group.
 * x-ms-original-file: specification/search/resource-manager/Microsoft.Search/stable/2023-11-01/examples/SearchUpdateServiceToAllowAccessFromPrivateEndpoints.json
 */
function searchUpdateServiceToAllowAccessFromPrivateEndpoints() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["SEARCH_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["SEARCH_RESOURCE_GROUP"] || "rg1";
        const searchServiceName = "mysearchservice";
        const service = {
            partitionCount: 1,
            publicNetworkAccess: "disabled",
            replicaCount: 1
        };
        const credential = new DefaultAzureCredential();
        const client = new SearchManagementClient(credential, subscriptionId);
        const result = yield client.services.update(resourceGroupName, searchServiceName, service);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Updates an existing search service in the given resource group.
 *
 * @summary Updates an existing search service in the given resource group.
 * x-ms-original-file: specification/search/resource-manager/Microsoft.Search/stable/2023-11-01/examples/SearchUpdateServiceToAllowAccessFromPublicCustomIPs.json
 */
function searchUpdateServiceToAllowAccessFromPublicCustomIPs() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["SEARCH_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["SEARCH_RESOURCE_GROUP"] || "rg1";
        const searchServiceName = "mysearchservice";
        const service = {
            networkRuleSet: {
                ipRules: [{ value: "123.4.5.6" }, { value: "123.4.6.0/18" }]
            },
            partitionCount: 1,
            publicNetworkAccess: "enabled",
            replicaCount: 3
        };
        const credential = new DefaultAzureCredential();
        const client = new SearchManagementClient(credential, subscriptionId);
        const result = yield client.services.update(resourceGroupName, searchServiceName, service);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Updates an existing search service in the given resource group.
 *
 * @summary Updates an existing search service in the given resource group.
 * x-ms-original-file: specification/search/resource-manager/Microsoft.Search/stable/2023-11-01/examples/SearchUpdateServiceToRemoveIdentity.json
 */
function searchUpdateServiceToRemoveIdentity() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["SEARCH_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["SEARCH_RESOURCE_GROUP"] || "rg1";
        const searchServiceName = "mysearchservice";
        const service = {
            identity: { type: "None" },
            sku: { name: "standard" }
        };
        const credential = new DefaultAzureCredential();
        const client = new SearchManagementClient(credential, subscriptionId);
        const result = yield client.services.update(resourceGroupName, searchServiceName, service);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Updates an existing search service in the given resource group.
 *
 * @summary Updates an existing search service in the given resource group.
 * x-ms-original-file: specification/search/resource-manager/Microsoft.Search/stable/2023-11-01/examples/SearchUpdateServiceWithCmkEnforcement.json
 */
function searchUpdateServiceWithCmkEnforcement() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["SEARCH_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["SEARCH_RESOURCE_GROUP"] || "rg1";
        const searchServiceName = "mysearchservice";
        const service = {
            encryptionWithCmk: { enforcement: "Enabled" },
            replicaCount: 2,
            tags: { appName: "My e-commerce app", newTag: "Adding a new tag" }
        };
        const credential = new DefaultAzureCredential();
        const client = new SearchManagementClient(credential, subscriptionId);
        const result = yield client.services.update(resourceGroupName, searchServiceName, service);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Updates an existing search service in the given resource group.
 *
 * @summary Updates an existing search service in the given resource group.
 * x-ms-original-file: specification/search/resource-manager/Microsoft.Search/stable/2023-11-01/examples/SearchUpdateServiceWithSemanticSearch.json
 */
function searchUpdateServiceWithSemanticSearch() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["SEARCH_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["SEARCH_RESOURCE_GROUP"] || "rg1";
        const searchServiceName = "mysearchservice";
        const service = {
            replicaCount: 2,
            semanticSearch: "standard",
            tags: { appName: "My e-commerce app", newTag: "Adding a new tag" }
        };
        const credential = new DefaultAzureCredential();
        const client = new SearchManagementClient(credential, subscriptionId);
        const result = yield client.services.update(resourceGroupName, searchServiceName, service);
        console.log(result);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        searchUpdateService();
        searchUpdateServiceAuthOptions();
        searchUpdateServiceDisableLocalAuth();
        searchUpdateServiceToAllowAccessFromPrivateEndpoints();
        searchUpdateServiceToAllowAccessFromPublicCustomIPs();
        searchUpdateServiceToRemoveIdentity();
        searchUpdateServiceWithCmkEnforcement();
        searchUpdateServiceWithSemanticSearch();
    });
}
main().catch(console.error);
//# sourceMappingURL=servicesUpdateSample.js.map