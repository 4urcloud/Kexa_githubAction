/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { SearchManagementClient } from "@azure/arm-search";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to Creates or updates a search service in the given resource group. If the search service already exists, all properties will be updated with the given values.
 *
 * @summary Creates or updates a search service in the given resource group. If the search service already exists, all properties will be updated with the given values.
 * x-ms-original-file: specification/search/resource-manager/Microsoft.Search/stable/2023-11-01/examples/SearchCreateOrUpdateService.json
 */
function searchCreateOrUpdateService() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["SEARCH_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["SEARCH_RESOURCE_GROUP"] || "rg1";
        const searchServiceName = "mysearchservice";
        const service = {
            hostingMode: "default",
            location: "westus",
            partitionCount: 1,
            replicaCount: 3,
            sku: { name: "standard" },
            tags: { appName: "My e-commerce app" }
        };
        const credential = new DefaultAzureCredential();
        const client = new SearchManagementClient(credential, subscriptionId);
        const result = yield client.services.beginCreateOrUpdateAndWait(resourceGroupName, searchServiceName, service);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates a search service in the given resource group. If the search service already exists, all properties will be updated with the given values.
 *
 * @summary Creates or updates a search service in the given resource group. If the search service already exists, all properties will be updated with the given values.
 * x-ms-original-file: specification/search/resource-manager/Microsoft.Search/stable/2023-11-01/examples/SearchCreateOrUpdateServiceAuthOptions.json
 */
function searchCreateOrUpdateServiceAuthOptions() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["SEARCH_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["SEARCH_RESOURCE_GROUP"] || "rg1";
        const searchServiceName = "mysearchservice";
        const service = {
            authOptions: {
                aadOrApiKey: { aadAuthFailureMode: "http401WithBearerChallenge" }
            },
            hostingMode: "default",
            location: "westus",
            partitionCount: 1,
            replicaCount: 3,
            sku: { name: "standard" },
            tags: { appName: "My e-commerce app" }
        };
        const credential = new DefaultAzureCredential();
        const client = new SearchManagementClient(credential, subscriptionId);
        const result = yield client.services.beginCreateOrUpdateAndWait(resourceGroupName, searchServiceName, service);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates a search service in the given resource group. If the search service already exists, all properties will be updated with the given values.
 *
 * @summary Creates or updates a search service in the given resource group. If the search service already exists, all properties will be updated with the given values.
 * x-ms-original-file: specification/search/resource-manager/Microsoft.Search/stable/2023-11-01/examples/SearchCreateOrUpdateServiceDisableLocalAuth.json
 */
function searchCreateOrUpdateServiceDisableLocalAuth() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["SEARCH_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["SEARCH_RESOURCE_GROUP"] || "rg1";
        const searchServiceName = "mysearchservice";
        const service = {
            disableLocalAuth: true,
            hostingMode: "default",
            location: "westus",
            partitionCount: 1,
            replicaCount: 3,
            sku: { name: "standard" },
            tags: { appName: "My e-commerce app" }
        };
        const credential = new DefaultAzureCredential();
        const client = new SearchManagementClient(credential, subscriptionId);
        const result = yield client.services.beginCreateOrUpdateAndWait(resourceGroupName, searchServiceName, service);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates a search service in the given resource group. If the search service already exists, all properties will be updated with the given values.
 *
 * @summary Creates or updates a search service in the given resource group. If the search service already exists, all properties will be updated with the given values.
 * x-ms-original-file: specification/search/resource-manager/Microsoft.Search/stable/2023-11-01/examples/SearchCreateOrUpdateServiceToAllowAccessFromPrivateEndpoints.json
 */
function searchCreateOrUpdateServiceToAllowAccessFromPrivateEndpoints() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["SEARCH_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["SEARCH_RESOURCE_GROUP"] || "rg1";
        const searchServiceName = "mysearchservice";
        const service = {
            hostingMode: "default",
            location: "westus",
            partitionCount: 1,
            publicNetworkAccess: "disabled",
            replicaCount: 3,
            sku: { name: "standard" },
            tags: { appName: "My e-commerce app" }
        };
        const credential = new DefaultAzureCredential();
        const client = new SearchManagementClient(credential, subscriptionId);
        const result = yield client.services.beginCreateOrUpdateAndWait(resourceGroupName, searchServiceName, service);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates a search service in the given resource group. If the search service already exists, all properties will be updated with the given values.
 *
 * @summary Creates or updates a search service in the given resource group. If the search service already exists, all properties will be updated with the given values.
 * x-ms-original-file: specification/search/resource-manager/Microsoft.Search/stable/2023-11-01/examples/SearchCreateOrUpdateServiceToAllowAccessFromPublicCustomIPs.json
 */
function searchCreateOrUpdateServiceToAllowAccessFromPublicCustomIPs() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["SEARCH_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["SEARCH_RESOURCE_GROUP"] || "rg1";
        const searchServiceName = "mysearchservice";
        const service = {
            hostingMode: "default",
            location: "westus",
            networkRuleSet: {
                ipRules: [{ value: "123.4.5.6" }, { value: "123.4.6.0/18" }]
            },
            partitionCount: 1,
            replicaCount: 1,
            sku: { name: "standard" },
            tags: { appName: "My e-commerce app" }
        };
        const credential = new DefaultAzureCredential();
        const client = new SearchManagementClient(credential, subscriptionId);
        const result = yield client.services.beginCreateOrUpdateAndWait(resourceGroupName, searchServiceName, service);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates a search service in the given resource group. If the search service already exists, all properties will be updated with the given values.
 *
 * @summary Creates or updates a search service in the given resource group. If the search service already exists, all properties will be updated with the given values.
 * x-ms-original-file: specification/search/resource-manager/Microsoft.Search/stable/2023-11-01/examples/SearchCreateOrUpdateServiceWithCmkEnforcement.json
 */
function searchCreateOrUpdateServiceWithCmkEnforcement() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["SEARCH_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["SEARCH_RESOURCE_GROUP"] || "rg1";
        const searchServiceName = "mysearchservice";
        const service = {
            encryptionWithCmk: { enforcement: "Enabled" },
            hostingMode: "default",
            location: "westus",
            partitionCount: 1,
            replicaCount: 3,
            sku: { name: "standard" },
            tags: { appName: "My e-commerce app" }
        };
        const credential = new DefaultAzureCredential();
        const client = new SearchManagementClient(credential, subscriptionId);
        const result = yield client.services.beginCreateOrUpdateAndWait(resourceGroupName, searchServiceName, service);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates a search service in the given resource group. If the search service already exists, all properties will be updated with the given values.
 *
 * @summary Creates or updates a search service in the given resource group. If the search service already exists, all properties will be updated with the given values.
 * x-ms-original-file: specification/search/resource-manager/Microsoft.Search/stable/2023-11-01/examples/SearchCreateOrUpdateServiceWithIdentity.json
 */
function searchCreateOrUpdateServiceWithIdentity() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["SEARCH_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["SEARCH_RESOURCE_GROUP"] || "rg1";
        const searchServiceName = "mysearchservice";
        const service = {
            hostingMode: "default",
            identity: { type: "SystemAssigned" },
            location: "westus",
            partitionCount: 1,
            replicaCount: 3,
            sku: { name: "standard" },
            tags: { appName: "My e-commerce app" }
        };
        const credential = new DefaultAzureCredential();
        const client = new SearchManagementClient(credential, subscriptionId);
        const result = yield client.services.beginCreateOrUpdateAndWait(resourceGroupName, searchServiceName, service);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates a search service in the given resource group. If the search service already exists, all properties will be updated with the given values.
 *
 * @summary Creates or updates a search service in the given resource group. If the search service already exists, all properties will be updated with the given values.
 * x-ms-original-file: specification/search/resource-manager/Microsoft.Search/stable/2023-11-01/examples/SearchCreateOrUpdateWithSemanticSearch.json
 */
function searchCreateOrUpdateWithSemanticSearch() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["SEARCH_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["SEARCH_RESOURCE_GROUP"] || "rg1";
        const searchServiceName = "mysearchservice";
        const service = {
            hostingMode: "default",
            location: "westus",
            partitionCount: 1,
            replicaCount: 3,
            semanticSearch: "free",
            sku: { name: "standard" },
            tags: { appName: "My e-commerce app" }
        };
        const credential = new DefaultAzureCredential();
        const client = new SearchManagementClient(credential, subscriptionId);
        const result = yield client.services.beginCreateOrUpdateAndWait(resourceGroupName, searchServiceName, service);
        console.log(result);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        searchCreateOrUpdateService();
        searchCreateOrUpdateServiceAuthOptions();
        searchCreateOrUpdateServiceDisableLocalAuth();
        searchCreateOrUpdateServiceToAllowAccessFromPrivateEndpoints();
        searchCreateOrUpdateServiceToAllowAccessFromPublicCustomIPs();
        searchCreateOrUpdateServiceWithCmkEnforcement();
        searchCreateOrUpdateServiceWithIdentity();
        searchCreateOrUpdateWithSemanticSearch();
    });
}
main().catch(console.error);
//# sourceMappingURL=servicesCreateOrUpdateSample.js.map