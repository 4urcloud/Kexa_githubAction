/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncValues, __awaiter } from "tslib";
import { env, Recorder, isPlaybackMode, } from "@azure-tools/test-recorder";
import { createTestCredential } from "@azure-tools/test-credential";
import { assert } from "chai";
import { SearchManagementClient } from "../src/searchManagementClient";
const replaceableVariables = {
    AZURE_CLIENT_ID: "azure_client_id",
    AZURE_CLIENT_SECRET: "azure_client_secret",
    AZURE_TENANT_ID: "88888888-8888-8888-8888-888888888888",
    SUBSCRIPTION_ID: "azure_subscription_id"
};
const recorderOptions = {
    envSetupForPlayback: replaceableVariables,
    sanitizerOptions: {
        bodySanitizers: [{
                regex: true,
                value: `fakeKey`,
                target: `[a-z0-9_A-z]{40,100}`
            }],
        uriSanitizers: [{
                regex: true,
                value: `fakeKey`,
                target: `[a-z0-9_A-z]{40,100}`
            }]
    }
};
export const testPollingOptions = {
    updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};
describe("Search test", () => {
    let recorder;
    let subscriptionId;
    let client;
    let location;
    let resourceGroup;
    let searchServiceName;
    let keyname;
    let keyvalue;
    beforeEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            recorder = new Recorder(this.currentTest);
            yield recorder.start(recorderOptions);
            subscriptionId = env.SUBSCRIPTION_ID || '';
            // This is an example of how the environment variables are used
            const credential = createTestCredential();
            client = new SearchManagementClient(credential, subscriptionId, recorder.configureClientOptions({ endpoint: "https://eastus2euap.management.azure.com/", credentialScopes: "https://management.azure.com/.default" }));
            location = "eastus2euap";
            resourceGroup = "myjstest";
            searchServiceName = "myjssearchservicexxx";
            keyname = "testjskey";
        });
    });
    afterEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            yield recorder.stop();
        });
    });
    it("services create test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.services.beginCreateOrUpdateAndWait(resourceGroup, searchServiceName, {
                location: location,
                replicaCount: 1,
                partitionCount: 1,
                hostingMode: "default",
                sku: {
                    name: "standard"
                }
            }, testPollingOptions);
            assert.equal(res.name, searchServiceName);
        });
    }).timeout(3600000);
    it("services get test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.services.get(resourceGroup, searchServiceName);
            assert.equal(res.name, searchServiceName);
        });
    });
    it("services list test", function () {
        var _a, e_1, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const resArray = new Array();
            try {
                for (var _d = true, _e = __asyncValues(client.services.listByResourceGroup(resourceGroup)), _f; _f = yield _e.next(), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    let item = _c;
                    resArray.push(item);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
                }
                finally { if (e_1) throw e_1.error; }
            }
            assert.equal(resArray.length, 1);
        });
    });
    it("queryKeys create test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.queryKeys.create(resourceGroup, searchServiceName, keyname);
            keyvalue = res.key || "";
            assert.equal(res.name, keyname);
        });
    });
    it("queryKeys list test", function () {
        var _a, e_2, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const resArray = new Array();
            try {
                for (var _d = true, _e = __asyncValues(client.queryKeys.listBySearchService(resourceGroup, searchServiceName)), _f; _f = yield _e.next(), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    let item = _c;
                    resArray.push(item);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
                }
                finally { if (e_2) throw e_2.error; }
            }
            assert.equal(resArray.length, 2);
        });
    });
    it("queryKeys delete test", function () {
        var _a, e_3, _b, _c, _d, e_4, _e, _f;
        return __awaiter(this, void 0, void 0, function* () {
            let resArray = new Array();
            try {
                for (var _g = true, _h = __asyncValues(client.queryKeys.listBySearchService(resourceGroup, searchServiceName)), _j; _j = yield _h.next(), _a = _j.done, !_a; _g = true) {
                    _c = _j.value;
                    _g = false;
                    let item = _c;
                    resArray.push(item);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (!_g && !_a && (_b = _h.return)) yield _b.call(_h);
                }
                finally { if (e_3) throw e_3.error; }
            }
            const len = resArray.length;
            // At least one query key
            assert.isTrue(len > 0);
            // Delete the query key by key not by keyname
            yield client.queryKeys.delete(resourceGroup, searchServiceName, keyvalue);
            resArray = new Array();
            try {
                for (var _k = true, _l = __asyncValues(client.queryKeys.listBySearchService(resourceGroup, searchServiceName)), _m; _m = yield _l.next(), _d = _m.done, !_d; _k = true) {
                    _f = _m.value;
                    _k = false;
                    let item = _f;
                    resArray.push(item);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (!_k && !_d && (_e = _l.return)) yield _e.call(_l);
                }
                finally { if (e_4) throw e_4.error; }
            }
            // The key number is reduced to len - 1
            assert.equal(resArray.length, len - 1);
        });
    });
    it("services delete test", function () {
        var _a, e_5, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            yield client.services.delete(resourceGroup, searchServiceName);
            const resArray = new Array();
            try {
                for (var _d = true, _e = __asyncValues(client.services.listByResourceGroup(resourceGroup)), _f; _f = yield _e.next(), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    let item = _c;
                    resArray.push(item);
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
                }
                finally { if (e_5) throw e_5.error; }
            }
            assert.equal(resArray.length, 0);
        });
    });
});
//# sourceMappingURL=search_examples.js.map