'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var coreClient = require('@azure/core-client');
var coreRestPipeline = require('@azure/core-rest-pipeline');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var coreClient__namespace = /*#__PURE__*/_interopNamespace(coreClient);
var coreRestPipeline__namespace = /*#__PURE__*/_interopNamespace(coreRestPipeline);

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const SerialConsoleOperations = {
    type: {
        name: "Composite",
        className: "SerialConsoleOperations",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SerialConsoleOperationsValueItem"
                        }
                    }
                }
            }
        }
    }
};
const SerialConsoleOperationsValueItem = {
    type: {
        name: "Composite",
        className: "SerialConsoleOperationsValueItem",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            isDataAction: {
                serializedName: "isDataAction",
                type: {
                    name: "String"
                }
            },
            display: {
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "SerialConsoleOperationsValueItemDisplay"
                }
            }
        }
    }
};
const SerialConsoleOperationsValueItemDisplay = {
    type: {
        name: "Composite",
        className: "SerialConsoleOperationsValueItemDisplay",
        modelProperties: {
            provider: {
                serializedName: "provider",
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "resource",
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SerialConsoleStatus = {
    type: {
        name: "Composite",
        className: "SerialConsoleStatus",
        modelProperties: {
            disabled: {
                serializedName: "disabled",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const GetSerialConsoleSubscriptionNotFound = {
    type: {
        name: "Composite",
        className: "GetSerialConsoleSubscriptionNotFound",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DisableSerialConsoleResult = {
    type: {
        name: "Composite",
        className: "DisableSerialConsoleResult",
        modelProperties: {
            disabled: {
                serializedName: "disabled",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const EnableSerialConsoleResult = {
    type: {
        name: "Composite",
        className: "EnableSerialConsoleResult",
        modelProperties: {
            disabled: {
                serializedName: "disabled",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const SerialPortListResult = {
    type: {
        name: "Composite",
        className: "SerialPortListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SerialPort"
                        }
                    }
                }
            }
        }
    }
};
const Resource = {
    type: {
        name: "Composite",
        className: "Resource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CloudError = {
    type: {
        name: "Composite",
        className: "CloudError",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "CloudErrorBody"
                }
            }
        }
    }
};
const CloudErrorBody = {
    type: {
        name: "Composite",
        className: "CloudErrorBody",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CloudErrorBody"
                        }
                    }
                }
            }
        }
    }
};
const SerialPortConnectResult = {
    type: {
        name: "Composite",
        className: "SerialPortConnectResult",
        modelProperties: {
            connectionString: {
                serializedName: "connectionString",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ProxyResource = {
    type: {
        name: "Composite",
        className: "ProxyResource",
        modelProperties: Object.assign({}, Resource.type.modelProperties)
    }
};
const SerialPort = {
    type: {
        name: "Composite",
        className: "SerialPort",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { state: {
                serializedName: "properties.state",
                type: {
                    name: "Enum",
                    allowedValues: ["enabled", "disabled"]
                }
            } })
    }
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    SerialConsoleOperations: SerialConsoleOperations,
    SerialConsoleOperationsValueItem: SerialConsoleOperationsValueItem,
    SerialConsoleOperationsValueItemDisplay: SerialConsoleOperationsValueItemDisplay,
    SerialConsoleStatus: SerialConsoleStatus,
    GetSerialConsoleSubscriptionNotFound: GetSerialConsoleSubscriptionNotFound,
    DisableSerialConsoleResult: DisableSerialConsoleResult,
    EnableSerialConsoleResult: EnableSerialConsoleResult,
    SerialPortListResult: SerialPortListResult,
    Resource: Resource,
    CloudError: CloudError,
    CloudErrorBody: CloudErrorBody,
    SerialPortConnectResult: SerialPortConnectResult,
    ProxyResource: ProxyResource,
    SerialPort: SerialPort
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2018-05-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const defaultParam = {
    parameterPath: "defaultParam",
    mapper: {
        serializedName: "default",
        required: true,
        type: {
            name: "String"
        }
    }
};
const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const resourceProviderNamespace = {
    parameterPath: "resourceProviderNamespace",
    mapper: {
        serializedName: "resourceProviderNamespace",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parentResourceType = {
    parameterPath: "parentResourceType",
    mapper: {
        serializedName: "parentResourceType",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const parentResource = {
    parameterPath: "parentResource",
    mapper: {
        serializedName: "parentResource",
        required: true,
        type: {
            name: "String"
        }
    }
};
const serialPort = {
    parameterPath: "serialPort",
    mapper: {
        serializedName: "serialPort",
        required: true,
        type: {
            name: "String"
        }
    }
};
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const parameters = {
    parameterPath: "parameters",
    mapper: SerialPort
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing SerialPorts operations. */
class SerialPortsImpl {
    /**
     * Initialize a new instance of the class SerialPorts class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all of the configured serial ports for a parent resource
     * @param resourceGroupName The name of the resource group.
     * @param resourceProviderNamespace The namespace of the resource provider.
     * @param parentResourceType The resource type of the parent resource.  For example: 'virtualMachines'
     *                           or 'virtualMachineScaleSets'
     * @param parentResource The resource name, or subordinate path, for the parent of the serial port. For
     *                       example: the name of the virtual machine.
     * @param options The options parameters.
     */
    list(resourceGroupName, resourceProviderNamespace, parentResourceType, parentResource, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            resourceProviderNamespace,
            parentResourceType,
            parentResource,
            options
        }, listOperationSpec);
    }
    /**
     * Gets the configured settings for a serial port
     * @param resourceGroupName The name of the resource group.
     * @param resourceProviderNamespace The namespace of the resource provider.
     * @param parentResourceType The resource type of the parent resource.  For example: 'virtualMachines'
     *                           or 'virtualMachineScaleSets'
     * @param parentResource The resource name, or subordinate path, for the parent of the serial port. For
     *                       example: the name of the virtual machine.
     * @param serialPort The name of the serial port to connect to.
     * @param options The options parameters.
     */
    get(resourceGroupName, resourceProviderNamespace, parentResourceType, parentResource, serialPort, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            resourceProviderNamespace,
            parentResourceType,
            parentResource,
            serialPort,
            options
        }, getOperationSpec);
    }
    /**
     * Creates or updates a serial port
     * @param resourceGroupName The name of the resource group.
     * @param resourceProviderNamespace The namespace of the resource provider.
     * @param parentResourceType The resource type of the parent resource.  For example: 'virtualMachines'
     *                           or 'virtualMachineScaleSets'
     * @param parentResource The resource name, or subordinate path, for the parent of the serial port. For
     *                       example: the name of the virtual machine.
     * @param serialPort The name of the serial port to create.
     * @param parameters Parameters supplied to create the serial port.
     * @param options The options parameters.
     */
    create(resourceGroupName, resourceProviderNamespace, parentResourceType, parentResource, serialPort, parameters, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            resourceProviderNamespace,
            parentResourceType,
            parentResource,
            serialPort,
            parameters,
            options
        }, createOperationSpec);
    }
    /**
     * Deletes a serial port
     * @param resourceGroupName The name of the resource group.
     * @param resourceProviderNamespace The namespace of the resource provider.
     * @param parentResourceType The resource type of the parent resource.  For example: 'virtualMachines'
     *                           or 'virtualMachineScaleSets'
     * @param parentResource The resource name, or subordinate path, for the parent of the serial port. For
     *                       example: the name of the virtual machine.
     * @param serialPort The name of the serial port to delete.
     * @param options The options parameters.
     */
    delete(resourceGroupName, resourceProviderNamespace, parentResourceType, parentResource, serialPort, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            resourceProviderNamespace,
            parentResourceType,
            parentResource,
            serialPort,
            options
        }, deleteOperationSpec);
    }
    /**
     * Handles requests to list all SerialPort resources in a subscription.
     * @param options The options parameters.
     */
    listBySubscriptions(options) {
        return this.client.sendOperationRequest({ options }, listBySubscriptionsOperationSpec);
    }
    /**
     * Connect to serial port of the target resource
     * @param resourceGroupName The name of the resource group.
     * @param resourceProviderNamespace The namespace of the resource provider.
     * @param parentResourceType The resource type of the parent resource.  For example: 'virtualMachines'
     *                           or 'virtualMachineScaleSets'
     * @param parentResource The resource name, or subordinate path, for the parent of the serial port. For
     *                       example: the name of the virtual machine.
     * @param serialPort The name of the serial port to connect to.
     * @param options The options parameters.
     */
    connect(resourceGroupName, resourceProviderNamespace, parentResourceType, parentResource, serialPort, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            resourceProviderNamespace,
            parentResourceType,
            parentResource,
            serialPort,
            options
        }, connectOperationSpec);
    }
}
// Operation Specifications
const serializer$1 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourceType}/{parentResource}/providers/Microsoft.SerialConsole/serialPorts",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SerialPortListResult
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        resourceProviderNamespace,
        parentResourceType,
        parentResource
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourceType}/{parentResource}/providers/Microsoft.SerialConsole/serialPorts/{serialPort}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SerialPort
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        resourceProviderNamespace,
        parentResourceType,
        parentResource,
        serialPort
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const createOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourceType}/{parentResource}/providers/Microsoft.SerialConsole/serialPorts/{serialPort}",
    httpMethod: "PUT",
    responses: {
        201: {
            bodyMapper: SerialPort
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: parameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        resourceProviderNamespace,
        parentResourceType,
        parentResource,
        serialPort
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$1
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourceType}/{parentResource}/providers/Microsoft.SerialConsole/serialPorts/{serialPort}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        resourceProviderNamespace,
        parentResourceType,
        parentResource,
        serialPort
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listBySubscriptionsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.SerialConsole/serialPorts",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SerialPortListResult
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$1
};
const connectOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourceType}/{parentResource}/providers/Microsoft.SerialConsole/serialPorts/{serialPort}/connect",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: SerialPortConnectResult
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        resourceProviderNamespace,
        parentResourceType,
        parentResource,
        serialPort
    ],
    headerParameters: [accept],
    serializer: serializer$1
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class MicrosoftSerialConsoleClient extends coreClient__namespace.ServiceClient {
    /**
     * Initializes a new instance of the MicrosoftSerialConsoleClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId Subscription ID which uniquely identifies the Microsoft Azure subscription.
     *                       The subscription ID forms part of the URI for every service call requiring it.
     * @param options The parameter options
     */
    constructor(credentials, subscriptionId, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        if (subscriptionId === undefined) {
            throw new Error("'subscriptionId' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-serialconsole/2.1.0`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName
            });
            this.pipeline.addPolicy(coreRestPipeline__namespace.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient__namespace.authorizeRequestOnClaimChallenge
                }
            }));
        }
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.apiVersion = options.apiVersion || "2018-05-01";
        this.serialPorts = new SerialPortsImpl(this);
        this.addCustomApiVersionPolicy(options.apiVersion);
    }
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    addCustomApiVersionPolicy(apiVersion) {
        if (!apiVersion) {
            return;
        }
        const apiVersionPolicy = {
            name: "CustomApiVersionPolicy",
            sendRequest(request, next) {
                return tslib.__awaiter(this, void 0, void 0, function* () {
                    const param = request.url.split("?");
                    if (param.length > 1) {
                        const newParams = param[1].split("&").map((item) => {
                            if (item.indexOf("api-version") > -1) {
                                return "api-version=" + apiVersion;
                            }
                            else {
                                return item;
                            }
                        });
                        request.url = param[0] + "?" + newParams.join("&");
                    }
                    return next(request);
                });
            }
        };
        this.pipeline.addPolicy(apiVersionPolicy);
    }
    /**
     * Gets a list of Serial Console API operations.
     * @param options The options parameters.
     */
    listOperations(options) {
        return this.sendOperationRequest({ options }, listOperationsOperationSpec);
    }
    /**
     * Gets whether or not Serial Console is disabled for a given subscription
     * @param defaultParam Default parameter. Leave the value as "default".
     * @param options The options parameters.
     */
    getConsoleStatus(defaultParam, options) {
        return this.sendOperationRequest({ defaultParam, options }, getConsoleStatusOperationSpec);
    }
    /**
     * Disables the Serial Console service for all VMs and VM scale sets in the provided subscription
     * @param defaultParam Default parameter. Leave the value as "default".
     * @param options The options parameters.
     */
    disableConsole(defaultParam, options) {
        return this.sendOperationRequest({ defaultParam, options }, disableConsoleOperationSpec);
    }
    /**
     * Enables the Serial Console service for all VMs and VM scale sets in the provided subscription
     * @param defaultParam Default parameter. Leave the value as "default".
     * @param options The options parameters.
     */
    enableConsole(defaultParam, options) {
        return this.sendOperationRequest({ defaultParam, options }, enableConsoleOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationsOperationSpec = {
    path: "/providers/Microsoft.SerialConsole/operations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SerialConsoleOperations
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer
};
const getConsoleStatusOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.SerialConsole/consoleServices/{default}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SerialConsoleStatus
        },
        404: {
            bodyMapper: GetSerialConsoleSubscriptionNotFound
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        defaultParam
    ],
    headerParameters: [accept],
    serializer
};
const disableConsoleOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.SerialConsole/consoleServices/{default}/disableConsole",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: DisableSerialConsoleResult
        },
        404: {
            bodyMapper: GetSerialConsoleSubscriptionNotFound
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        defaultParam
    ],
    headerParameters: [accept],
    serializer
};
const enableConsoleOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.SerialConsole/consoleServices/{default}/enableConsole",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: EnableSerialConsoleResult
        },
        404: {
            bodyMapper: GetSerialConsoleSubscriptionNotFound
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        defaultParam
    ],
    headerParameters: [accept],
    serializer
};

exports.MicrosoftSerialConsoleClient = MicrosoftSerialConsoleClient;
//# sourceMappingURL=index.js.map
