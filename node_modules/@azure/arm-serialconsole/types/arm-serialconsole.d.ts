import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';

/** An error response from the service. */
export declare interface CloudError {
    /** Cloud error body. */
    error?: CloudErrorBody;
}

/** An error response from the Batch service. */
export declare interface CloudErrorBody {
    /** An identifier for the error. Codes are invariant and are intended to be consumed programmatically. */
    code?: string;
    /** A message describing the error, intended to be suitable for display in a user interface. */
    message?: string;
    /** The target of the particular error. For example, the name of the property in error. */
    target?: string;
    /** A list of additional details about the error. */
    details?: CloudErrorBody[];
}

/** Optional parameters. */
export declare interface DisableConsoleOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the disableConsole operation. */
export declare type DisableConsoleResponse = DisableSerialConsoleResult;

/** Returns whether or not Serial Console is disabled. */
export declare interface DisableSerialConsoleResult {
    /** Whether or not Serial Console is disabled. */
    disabled?: boolean;
}

/** Optional parameters. */
export declare interface EnableConsoleOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the enableConsole operation. */
export declare type EnableConsoleResponse = EnableSerialConsoleResult;

/** Returns whether or not Serial Console is disabled (enabled). */
export declare interface EnableSerialConsoleResult {
    /** Whether or not Serial Console is disabled (enabled). */
    disabled?: boolean;
}

/** Optional parameters. */
export declare interface GetConsoleStatusOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getConsoleStatus operation. */
export declare type GetConsoleStatusResponse = SerialConsoleStatus;

/** Error saying that the provided subscription could not be found */
export declare interface GetSerialConsoleSubscriptionNotFound {
    /** Error code */
    code?: string;
    /** Subscription not found message */
    message?: string;
}

/** Optional parameters. */
export declare interface ListOperationsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listOperations operation. */
export declare type ListOperationsResponse = SerialConsoleOperations;

export declare class MicrosoftSerialConsoleClient extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the MicrosoftSerialConsoleClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId Subscription ID which uniquely identifies the Microsoft Azure subscription.
     *                       The subscription ID forms part of the URI for every service call requiring it.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: MicrosoftSerialConsoleClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    /**
     * Gets a list of Serial Console API operations.
     * @param options The options parameters.
     */
    listOperations(options?: ListOperationsOptionalParams): Promise<ListOperationsResponse>;
    /**
     * Gets whether or not Serial Console is disabled for a given subscription
     * @param defaultParam Default parameter. Leave the value as "default".
     * @param options The options parameters.
     */
    getConsoleStatus(defaultParam: string, options?: GetConsoleStatusOptionalParams): Promise<GetConsoleStatusResponse>;
    /**
     * Disables the Serial Console service for all VMs and VM scale sets in the provided subscription
     * @param defaultParam Default parameter. Leave the value as "default".
     * @param options The options parameters.
     */
    disableConsole(defaultParam: string, options?: DisableConsoleOptionalParams): Promise<DisableConsoleResponse>;
    /**
     * Enables the Serial Console service for all VMs and VM scale sets in the provided subscription
     * @param defaultParam Default parameter. Leave the value as "default".
     * @param options The options parameters.
     */
    enableConsole(defaultParam: string, options?: EnableConsoleOptionalParams): Promise<EnableConsoleResponse>;
    serialPorts: SerialPorts;
}

/** Optional parameters. */
export declare interface MicrosoftSerialConsoleClientOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** The resource model definition for a ARM proxy resource. It will have everything other than required location and tags */
export declare interface ProxyResource extends Resource {
}

/** The Resource model definition. */
export declare interface Resource {
    /**
     * Resource Id
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Resource name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Resource type
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
}

/** Serial Console operations */
export declare interface SerialConsoleOperations {
    /** A list of Serial Console operations */
    value?: SerialConsoleOperationsValueItem[];
}

export declare interface SerialConsoleOperationsValueItem {
    name?: string;
    isDataAction?: string;
    display?: SerialConsoleOperationsValueItemDisplay;
}

export declare interface SerialConsoleOperationsValueItemDisplay {
    provider?: string;
    resource?: string;
    operation?: string;
    description?: string;
}

/** Returns whether or not Serial Console is disabled. */
export declare interface SerialConsoleStatus {
    /** Whether or not Serial Console is disabled. */
    disabled?: boolean;
}

/** Represents the serial port of the parent resource. */
export declare interface SerialPort extends ProxyResource {
    /** Specifies whether the port is enabled for a serial console connection. */
    state?: SerialPortState;
}

/** Returns a connection string to the serial port of the resource. */
export declare interface SerialPortConnectResult {
    /** Connection string to the serial port of the resource. */
    connectionString?: string;
}

/** The list serial ports operation response. */
export declare interface SerialPortListResult {
    /** The list of serial ports. */
    value?: SerialPort[];
}

/** Interface representing a SerialPorts. */
export declare interface SerialPorts {
    /**
     * Lists all of the configured serial ports for a parent resource
     * @param resourceGroupName The name of the resource group.
     * @param resourceProviderNamespace The namespace of the resource provider.
     * @param parentResourceType The resource type of the parent resource.  For example: 'virtualMachines'
     *                           or 'virtualMachineScaleSets'
     * @param parentResource The resource name, or subordinate path, for the parent of the serial port. For
     *                       example: the name of the virtual machine.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, resourceProviderNamespace: string, parentResourceType: string, parentResource: string, options?: SerialPortsListOptionalParams): Promise<SerialPortsListResponse>;
    /**
     * Gets the configured settings for a serial port
     * @param resourceGroupName The name of the resource group.
     * @param resourceProviderNamespace The namespace of the resource provider.
     * @param parentResourceType The resource type of the parent resource.  For example: 'virtualMachines'
     *                           or 'virtualMachineScaleSets'
     * @param parentResource The resource name, or subordinate path, for the parent of the serial port. For
     *                       example: the name of the virtual machine.
     * @param serialPort The name of the serial port to connect to.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, resourceProviderNamespace: string, parentResourceType: string, parentResource: string, serialPort: string, options?: SerialPortsGetOptionalParams): Promise<SerialPortsGetResponse>;
    /**
     * Creates or updates a serial port
     * @param resourceGroupName The name of the resource group.
     * @param resourceProviderNamespace The namespace of the resource provider.
     * @param parentResourceType The resource type of the parent resource.  For example: 'virtualMachines'
     *                           or 'virtualMachineScaleSets'
     * @param parentResource The resource name, or subordinate path, for the parent of the serial port. For
     *                       example: the name of the virtual machine.
     * @param serialPort The name of the serial port to create.
     * @param parameters Parameters supplied to create the serial port.
     * @param options The options parameters.
     */
    create(resourceGroupName: string, resourceProviderNamespace: string, parentResourceType: string, parentResource: string, serialPort: string, parameters: SerialPort, options?: SerialPortsCreateOptionalParams): Promise<SerialPortsCreateResponse>;
    /**
     * Deletes a serial port
     * @param resourceGroupName The name of the resource group.
     * @param resourceProviderNamespace The namespace of the resource provider.
     * @param parentResourceType The resource type of the parent resource.  For example: 'virtualMachines'
     *                           or 'virtualMachineScaleSets'
     * @param parentResource The resource name, or subordinate path, for the parent of the serial port. For
     *                       example: the name of the virtual machine.
     * @param serialPort The name of the serial port to delete.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, resourceProviderNamespace: string, parentResourceType: string, parentResource: string, serialPort: string, options?: SerialPortsDeleteOptionalParams): Promise<void>;
    /**
     * Handles requests to list all SerialPort resources in a subscription.
     * @param options The options parameters.
     */
    listBySubscriptions(options?: SerialPortsListBySubscriptionsOptionalParams): Promise<SerialPortsListBySubscriptionsResponse>;
    /**
     * Connect to serial port of the target resource
     * @param resourceGroupName The name of the resource group.
     * @param resourceProviderNamespace The namespace of the resource provider.
     * @param parentResourceType The resource type of the parent resource.  For example: 'virtualMachines'
     *                           or 'virtualMachineScaleSets'
     * @param parentResource The resource name, or subordinate path, for the parent of the serial port. For
     *                       example: the name of the virtual machine.
     * @param serialPort The name of the serial port to connect to.
     * @param options The options parameters.
     */
    connect(resourceGroupName: string, resourceProviderNamespace: string, parentResourceType: string, parentResource: string, serialPort: string, options?: SerialPortsConnectOptionalParams): Promise<SerialPortsConnectResponse>;
}

/** Optional parameters. */
export declare interface SerialPortsConnectOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the connect operation. */
export declare type SerialPortsConnectResponse = SerialPortConnectResult;

/** Optional parameters. */
export declare interface SerialPortsCreateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the create operation. */
export declare type SerialPortsCreateResponse = SerialPort;

/** Optional parameters. */
export declare interface SerialPortsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface SerialPortsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type SerialPortsGetResponse = SerialPort;

/** Optional parameters. */
export declare interface SerialPortsListBySubscriptionsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptions operation. */
export declare type SerialPortsListBySubscriptionsResponse = SerialPortListResult;

/** Optional parameters. */
export declare interface SerialPortsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type SerialPortsListResponse = SerialPortListResult;

/** Defines values for SerialPortState. */
export declare type SerialPortState = "enabled" | "disabled";

export { }
