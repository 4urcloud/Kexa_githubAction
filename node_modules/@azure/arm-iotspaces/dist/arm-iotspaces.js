/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@azure/ms-rest-azure-js'), require('@azure/ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', '@azure/ms-rest-azure-js', '@azure/ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmIotspaces = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var index = /*#__PURE__*/Object.freeze({

    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var StorageContainerProperties = {
        serializedName: "StorageContainerProperties",
        type: {
            name: "Composite",
            className: "StorageContainerProperties",
            modelProperties: {
                connectionString: {
                    serializedName: "connectionString",
                    type: {
                        name: "String"
                    }
                },
                subscriptionId: {
                    serializedName: "subscriptionId",
                    type: {
                        name: "String"
                    }
                },
                resourceGroup: {
                    serializedName: "resourceGroup",
                    type: {
                        name: "String"
                    }
                },
                containerName: {
                    serializedName: "containerName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IoTSpacesProperties = {
        serializedName: "IoTSpacesProperties",
        type: {
            name: "Composite",
            className: "IoTSpacesProperties",
            modelProperties: {
                provisioningState: {
                    readOnly: true,
                    serializedName: "provisioningState",
                    type: {
                        name: "String"
                    }
                },
                managementApiUrl: {
                    readOnly: true,
                    serializedName: "managementApiUrl",
                    type: {
                        name: "String"
                    }
                },
                webPortalUrl: {
                    readOnly: true,
                    serializedName: "webPortalUrl",
                    type: {
                        name: "String"
                    }
                },
                storageContainer: {
                    serializedName: "storageContainer",
                    type: {
                        name: "Composite",
                        className: "StorageContainerProperties"
                    }
                }
            }
        }
    };
    var IoTSpacesSkuInfo = {
        serializedName: "IoTSpacesSkuInfo",
        type: {
            name: "Composite",
            className: "IoTSpacesSkuInfo",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    constraints: {
                        Pattern: /^(?![0-9]+$)(?!-)[a-zA-Z0-9-]{2,49}[a-zA-Z0-9]$/
                    },
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var IoTSpacesDescription = {
        serializedName: "IoTSpacesDescription",
        type: {
            name: "Composite",
            className: "IoTSpacesDescription",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "IoTSpacesProperties"
                    }
                }, sku: {
                    required: true,
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "IoTSpacesSkuInfo"
                    }
                } })
        }
    };
    var IoTSpacesPatchDescription = {
        serializedName: "IoTSpacesPatchDescription",
        type: {
            name: "Composite",
            className: "IoTSpacesPatchDescription",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "IoTSpacesProperties"
                    }
                }
            }
        }
    };
    var ErrorDetails = {
        serializedName: "ErrorDetails",
        type: {
            name: "Composite",
            className: "ErrorDetails",
            modelProperties: {
                code: {
                    readOnly: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                target: {
                    readOnly: true,
                    serializedName: "target",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationDisplay = {
        serializedName: "OperationDisplay",
        type: {
            name: "Composite",
            className: "OperationDisplay",
            modelProperties: {
                provider: {
                    readOnly: true,
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    readOnly: true,
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    readOnly: true,
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    readOnly: true,
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Operation = {
        serializedName: "Operation",
        type: {
            name: "Composite",
            className: "Operation",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationDisplay"
                    }
                }
            }
        }
    };
    var OperationInputs = {
        serializedName: "OperationInputs",
        type: {
            name: "Composite",
            className: "OperationInputs",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IoTSpacesNameAvailabilityInfo = {
        serializedName: "IoTSpacesNameAvailabilityInfo",
        type: {
            name: "Composite",
            className: "IoTSpacesNameAvailabilityInfo",
            modelProperties: {
                nameAvailable: {
                    readOnly: true,
                    serializedName: "nameAvailable",
                    type: {
                        name: "Boolean"
                    }
                },
                reason: {
                    readOnly: true,
                    serializedName: "reason",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Invalid",
                            "AlreadyExists"
                        ]
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IoTSpacesDescriptionListResult = {
        serializedName: "IoTSpacesDescriptionListResult",
        type: {
            name: "Composite",
            className: "IoTSpacesDescriptionListResult",
            modelProperties: {
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "IoTSpacesDescription"
                            }
                        }
                    }
                }
            }
        }
    };
    var OperationListResult = {
        serializedName: "OperationListResult",
        type: {
            name: "Composite",
            className: "OperationListResult",
            modelProperties: {
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Operation"
                            }
                        }
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        StorageContainerProperties: StorageContainerProperties,
        IoTSpacesProperties: IoTSpacesProperties,
        IoTSpacesSkuInfo: IoTSpacesSkuInfo,
        Resource: Resource,
        IoTSpacesDescription: IoTSpacesDescription,
        IoTSpacesPatchDescription: IoTSpacesPatchDescription,
        ErrorDetails: ErrorDetails,
        OperationDisplay: OperationDisplay,
        Operation: Operation,
        OperationInputs: OperationInputs,
        IoTSpacesNameAvailabilityInfo: IoTSpacesNameAvailabilityInfo,
        IoTSpacesDescriptionListResult: IoTSpacesDescriptionListResult,
        OperationListResult: OperationListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        IoTSpacesDescription: IoTSpacesDescription,
        Resource: Resource,
        BaseResource: BaseResource,
        IoTSpacesProperties: IoTSpacesProperties,
        StorageContainerProperties: StorageContainerProperties,
        IoTSpacesSkuInfo: IoTSpacesSkuInfo,
        ErrorDetails: ErrorDetails,
        IoTSpacesPatchDescription: IoTSpacesPatchDescription,
        IoTSpacesDescriptionListResult: IoTSpacesDescriptionListResult,
        OperationInputs: OperationInputs,
        IoTSpacesNameAvailabilityInfo: IoTSpacesNameAvailabilityInfo
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "api-version",
            defaultValue: '2017-10-01-preview',
            constraints: {
                MinLength: 10
            },
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            constraints: {
                MaxLength: 64,
                MinLength: 1
            },
            type: {
                name: "String"
            }
        }
    };
    var resourceName = {
        parameterPath: "resourceName",
        mapper: {
            required: true,
            serializedName: "resourceName",
            constraints: {
                MaxLength: 64,
                MinLength: 1
            },
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "Uuid"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a IoTSpaces. */
    var IoTSpaces = /** @class */ (function () {
        /**
         * Create a IoTSpaces.
         * @param {IoTSpacesClientContext} client Reference to the service client.
         */
        function IoTSpaces(client) {
            this.client = client;
        }
        IoTSpaces.prototype.get = function (resourceGroupName$$1, resourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                options: options
            }, getOperationSpec, callback);
        };
        /**
         * Create or update the metadata of an IoTSpaces instance. The usual pattern to modify a property
         * is to retrieve the IoTSpaces instance metadata and security metadata, and then combine them with
         * the modified values in a new body to update the IoTSpaces instance.
         * @param resourceGroupName The name of the resource group that contains the IoTSpaces instance.
         * @param resourceName The name of the IoTSpaces instance.
         * @param iotSpaceDescription The IoTSpaces instance metadata and security metadata.
         * @param [options] The optional parameters
         * @returns Promise<Models.IoTSpacesCreateOrUpdateResponse>
         */
        IoTSpaces.prototype.createOrUpdate = function (resourceGroupName$$1, resourceName$$1, iotSpaceDescription, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, resourceName$$1, iotSpaceDescription, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Update the metadata of a IoTSpaces instance.
         * @param resourceGroupName The name of the resource group that contains the IoTSpaces instance.
         * @param resourceName The name of the IoTSpaces instance.
         * @param iotSpacePatchDescription The IoTSpaces instance metadata and security metadata.
         * @param [options] The optional parameters
         * @returns Promise<Models.IoTSpacesUpdateResponse>
         */
        IoTSpaces.prototype.update = function (resourceGroupName$$1, resourceName$$1, iotSpacePatchDescription, options) {
            return this.beginUpdate(resourceGroupName$$1, resourceName$$1, iotSpacePatchDescription, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Delete an IoTSpaces instance.
         * @param resourceGroupName The name of the resource group that contains the IoTSpaces instance.
         * @param resourceName The name of the IoTSpaces instance.
         * @param [options] The optional parameters
         * @returns Promise<Models.IoTSpacesDeleteMethodResponse>
         */
        IoTSpaces.prototype.deleteMethod = function (resourceGroupName$$1, resourceName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, resourceName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        IoTSpaces.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        IoTSpaces.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        IoTSpaces.prototype.checkNameAvailability = function (operationInputs, options, callback) {
            return this.client.sendOperationRequest({
                operationInputs: operationInputs,
                options: options
            }, checkNameAvailabilityOperationSpec, callback);
        };
        /**
         * Create or update the metadata of an IoTSpaces instance. The usual pattern to modify a property
         * is to retrieve the IoTSpaces instance metadata and security metadata, and then combine them with
         * the modified values in a new body to update the IoTSpaces instance.
         * @param resourceGroupName The name of the resource group that contains the IoTSpaces instance.
         * @param resourceName The name of the IoTSpaces instance.
         * @param iotSpaceDescription The IoTSpaces instance metadata and security metadata.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        IoTSpaces.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, resourceName$$1, iotSpaceDescription, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                iotSpaceDescription: iotSpaceDescription,
                options: options
            }, beginCreateOrUpdateOperationSpec, options);
        };
        /**
         * Update the metadata of a IoTSpaces instance.
         * @param resourceGroupName The name of the resource group that contains the IoTSpaces instance.
         * @param resourceName The name of the IoTSpaces instance.
         * @param iotSpacePatchDescription The IoTSpaces instance metadata and security metadata.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        IoTSpaces.prototype.beginUpdate = function (resourceGroupName$$1, resourceName$$1, iotSpacePatchDescription, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                iotSpacePatchDescription: iotSpacePatchDescription,
                options: options
            }, beginUpdateOperationSpec, options);
        };
        /**
         * Delete an IoTSpaces instance.
         * @param resourceGroupName The name of the resource group that contains the IoTSpaces instance.
         * @param resourceName The name of the IoTSpaces instance.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        IoTSpaces.prototype.beginDeleteMethod = function (resourceGroupName$$1, resourceName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                options: options
            }, beginDeleteMethodOperationSpec, options);
        };
        IoTSpaces.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec, callback);
        };
        IoTSpaces.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec, callback);
        };
        return IoTSpaces;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTSpaces/Graph/{resourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IoTSpacesDescription
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer
    };
    var listOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.IoTSpaces/Graph",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IoTSpacesDescriptionListResult
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTSpaces/Graph",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IoTSpacesDescriptionListResult
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer
    };
    var checkNameAvailabilityOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.IoTSpaces/checkNameAvailability",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "operationInputs",
            mapper: __assign(__assign({}, OperationInputs), { required: true })
        },
        responses: {
            200: {
                bodyMapper: IoTSpacesNameAvailabilityInfo
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer
    };
    var beginCreateOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTSpaces/Graph/{resourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "iotSpaceDescription",
            mapper: __assign(__assign({}, IoTSpacesDescription), { required: true })
        },
        responses: {
            200: {
                bodyMapper: IoTSpacesDescription
            },
            202: {},
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer
    };
    var beginUpdateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTSpaces/Graph/{resourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "iotSpacePatchDescription",
            mapper: __assign(__assign({}, IoTSpacesPatchDescription), { required: true })
        },
        responses: {
            200: {
                bodyMapper: IoTSpacesDescription
            },
            202: {},
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer
    };
    var beginDeleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTSpaces/Graph/{resourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IoTSpacesDescription
            },
            202: {},
            204: {},
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IoTSpacesDescriptionListResult
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer
    };
    var listByResourceGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IoTSpacesDescriptionListResult
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        OperationListResult: OperationListResult,
        Operation: Operation,
        OperationDisplay: OperationDisplay,
        ErrorDetails: ErrorDetails
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {IoTSpacesClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$1, callback);
        };
        Operations.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$1, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "providers/Microsoft.IoTSpaces/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer$1
    };
    var listNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-iotspaces";
    var packageVersion = "1.2.1";
    var IoTSpacesClientContext = /** @class */ (function (_super) {
        __extends(IoTSpacesClientContext, _super);
        /**
         * Initializes a new instance of the IoTSpacesClient class.
         * @param credentials Credentials needed for the client to connect to Azure. Credentials
         * implementing the TokenCredential interface from the @azure/identity package are recommended. For
         * more information about these credentials, see
         * {@link https://www.npmjs.com/package/@azure/identity}. Credentials implementing the
         * ServiceClientCredentials interface from the older packages @azure/ms-rest-nodeauth and
         * @azure/ms-rest-browserauth are also supported.
         * @param subscriptionId The subscription identifier.
         * @param [options] The parameter options
         */
        function IoTSpacesClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            if (!options.userAgent) {
                var defaultUserAgent = msRestAzure.getDefaultUserAgentValue();
                options.userAgent = packageName + "/" + packageVersion + " " + defaultUserAgent;
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2017-10-01-preview';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return IoTSpacesClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var IoTSpacesClient = /** @class */ (function (_super) {
        __extends(IoTSpacesClient, _super);
        /**
         * Initializes a new instance of the IoTSpacesClient class.
         * @param credentials Credentials needed for the client to connect to Azure. Credentials
         * implementing the TokenCredential interface from the @azure/identity package are recommended. For
         * more information about these credentials, see
         * {@link https://www.npmjs.com/package/@azure/identity}. Credentials implementing the
         * ServiceClientCredentials interface from the older packages @azure/ms-rest-nodeauth and
         * @azure/ms-rest-browserauth are also supported.
         * @param subscriptionId The subscription identifier.
         * @param [options] The parameter options
         */
        function IoTSpacesClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.ioTSpaces = new IoTSpaces(_this);
            _this.operations = new Operations(_this);
            return _this;
        }
        return IoTSpacesClient;
    }(IoTSpacesClientContext));

    exports.IoTSpacesClient = IoTSpacesClient;
    exports.IoTSpacesClientContext = IoTSpacesClientContext;
    exports.IoTSpacesModels = index;
    exports.IoTSpacesMappers = mappers;
    exports.IoTSpaces = IoTSpaces;
    exports.Operations = Operations;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-iotspaces.js.map
