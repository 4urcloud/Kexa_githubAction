/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/ioTSpacesMappers";
import * as Parameters from "../models/parameters";
/** Class representing a IoTSpaces. */
var IoTSpaces = /** @class */ (function () {
    /**
     * Create a IoTSpaces.
     * @param {IoTSpacesClientContext} client Reference to the service client.
     */
    function IoTSpaces(client) {
        this.client = client;
    }
    IoTSpaces.prototype.get = function (resourceGroupName, resourceName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            resourceName: resourceName,
            options: options
        }, getOperationSpec, callback);
    };
    /**
     * Create or update the metadata of an IoTSpaces instance. The usual pattern to modify a property
     * is to retrieve the IoTSpaces instance metadata and security metadata, and then combine them with
     * the modified values in a new body to update the IoTSpaces instance.
     * @param resourceGroupName The name of the resource group that contains the IoTSpaces instance.
     * @param resourceName The name of the IoTSpaces instance.
     * @param iotSpaceDescription The IoTSpaces instance metadata and security metadata.
     * @param [options] The optional parameters
     * @returns Promise<Models.IoTSpacesCreateOrUpdateResponse>
     */
    IoTSpaces.prototype.createOrUpdate = function (resourceGroupName, resourceName, iotSpaceDescription, options) {
        return this.beginCreateOrUpdate(resourceGroupName, resourceName, iotSpaceDescription, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Update the metadata of a IoTSpaces instance.
     * @param resourceGroupName The name of the resource group that contains the IoTSpaces instance.
     * @param resourceName The name of the IoTSpaces instance.
     * @param iotSpacePatchDescription The IoTSpaces instance metadata and security metadata.
     * @param [options] The optional parameters
     * @returns Promise<Models.IoTSpacesUpdateResponse>
     */
    IoTSpaces.prototype.update = function (resourceGroupName, resourceName, iotSpacePatchDescription, options) {
        return this.beginUpdate(resourceGroupName, resourceName, iotSpacePatchDescription, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Delete an IoTSpaces instance.
     * @param resourceGroupName The name of the resource group that contains the IoTSpaces instance.
     * @param resourceName The name of the IoTSpaces instance.
     * @param [options] The optional parameters
     * @returns Promise<Models.IoTSpacesDeleteMethodResponse>
     */
    IoTSpaces.prototype.deleteMethod = function (resourceGroupName, resourceName, options) {
        return this.beginDeleteMethod(resourceGroupName, resourceName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    IoTSpaces.prototype.list = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, listOperationSpec, callback);
    };
    IoTSpaces.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            options: options
        }, listByResourceGroupOperationSpec, callback);
    };
    IoTSpaces.prototype.checkNameAvailability = function (operationInputs, options, callback) {
        return this.client.sendOperationRequest({
            operationInputs: operationInputs,
            options: options
        }, checkNameAvailabilityOperationSpec, callback);
    };
    /**
     * Create or update the metadata of an IoTSpaces instance. The usual pattern to modify a property
     * is to retrieve the IoTSpaces instance metadata and security metadata, and then combine them with
     * the modified values in a new body to update the IoTSpaces instance.
     * @param resourceGroupName The name of the resource group that contains the IoTSpaces instance.
     * @param resourceName The name of the IoTSpaces instance.
     * @param iotSpaceDescription The IoTSpaces instance metadata and security metadata.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    IoTSpaces.prototype.beginCreateOrUpdate = function (resourceGroupName, resourceName, iotSpaceDescription, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            resourceName: resourceName,
            iotSpaceDescription: iotSpaceDescription,
            options: options
        }, beginCreateOrUpdateOperationSpec, options);
    };
    /**
     * Update the metadata of a IoTSpaces instance.
     * @param resourceGroupName The name of the resource group that contains the IoTSpaces instance.
     * @param resourceName The name of the IoTSpaces instance.
     * @param iotSpacePatchDescription The IoTSpaces instance metadata and security metadata.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    IoTSpaces.prototype.beginUpdate = function (resourceGroupName, resourceName, iotSpacePatchDescription, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            resourceName: resourceName,
            iotSpacePatchDescription: iotSpacePatchDescription,
            options: options
        }, beginUpdateOperationSpec, options);
    };
    /**
     * Delete an IoTSpaces instance.
     * @param resourceGroupName The name of the resource group that contains the IoTSpaces instance.
     * @param resourceName The name of the IoTSpaces instance.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    IoTSpaces.prototype.beginDeleteMethod = function (resourceGroupName, resourceName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            resourceName: resourceName,
            options: options
        }, beginDeleteMethodOperationSpec, options);
    };
    IoTSpaces.prototype.listNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listNextOperationSpec, callback);
    };
    IoTSpaces.prototype.listByResourceGroupNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listByResourceGroupNextOperationSpec, callback);
    };
    return IoTSpaces;
}());
export { IoTSpaces };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTSpaces/Graph/{resourceName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.IoTSpacesDescription
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    serializer: serializer
};
var listOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.IoTSpaces/Graph",
    urlParameters: [
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.IoTSpacesDescriptionListResult
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    serializer: serializer
};
var listByResourceGroupOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTSpaces/Graph",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.IoTSpacesDescriptionListResult
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    serializer: serializer
};
var checkNameAvailabilityOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.IoTSpaces/checkNameAvailability",
    urlParameters: [
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "operationInputs",
        mapper: __assign(__assign({}, Mappers.OperationInputs), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.IoTSpacesNameAvailabilityInfo
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    serializer: serializer
};
var beginCreateOrUpdateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTSpaces/Graph/{resourceName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "iotSpaceDescription",
        mapper: __assign(__assign({}, Mappers.IoTSpacesDescription), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.IoTSpacesDescription
        },
        202: {},
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    serializer: serializer
};
var beginUpdateOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTSpaces/Graph/{resourceName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "iotSpacePatchDescription",
        mapper: __assign(__assign({}, Mappers.IoTSpacesPatchDescription), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.IoTSpacesDescription
        },
        202: {},
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    serializer: serializer
};
var beginDeleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTSpaces/Graph/{resourceName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.IoTSpacesDescription
        },
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    serializer: serializer
};
var listNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.IoTSpacesDescriptionListResult
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    serializer: serializer
};
var listByResourceGroupNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.IoTSpacesDescriptionListResult
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    serializer: serializer
};
//# sourceMappingURL=ioTSpaces.js.map