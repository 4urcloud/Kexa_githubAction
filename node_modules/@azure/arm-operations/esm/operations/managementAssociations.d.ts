import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import { OperationsManagementClientContext } from "../operationsManagementClientContext";
/** Class representing a ManagementAssociations. */
export declare class ManagementAssociations {
    private readonly client;
    /**
     * Create a ManagementAssociations.
     * @param {OperationsManagementClientContext} client Reference to the service client.
     */
    constructor(client: OperationsManagementClientContext);
    /**
     * Retrieves the ManagementAssociations list.
     * @summary Retrieves the ManagementAssociations list for the subscription
     * @param [options] The optional parameters
     * @returns Promise<Models.ManagementAssociationsListBySubscriptionResponse>
     */
    listBySubscription(options?: msRest.RequestOptionsBase): Promise<Models.ManagementAssociationsListBySubscriptionResponse>;
    /**
     * @param callback The callback
     */
    listBySubscription(callback: msRest.ServiceCallback<Models.ManagementAssociationPropertiesList>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    listBySubscription(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ManagementAssociationPropertiesList>): void;
    /**
     * Creates or updates the ManagementAssociation.
     * @summary Create/Update ManagementAssociation.
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param managementAssociationName User ManagementAssociation Name.
     * @param parameters The parameters required to create ManagementAssociation extension.
     * @param [options] The optional parameters
     * @returns Promise<Models.ManagementAssociationsCreateOrUpdateResponse>
     */
    createOrUpdate(resourceGroupName: string, managementAssociationName: string, parameters: Models.ManagementAssociation, options?: msRest.RequestOptionsBase): Promise<Models.ManagementAssociationsCreateOrUpdateResponse>;
    /**
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param managementAssociationName User ManagementAssociation Name.
     * @param parameters The parameters required to create ManagementAssociation extension.
     * @param callback The callback
     */
    createOrUpdate(resourceGroupName: string, managementAssociationName: string, parameters: Models.ManagementAssociation, callback: msRest.ServiceCallback<Models.ManagementAssociation>): void;
    /**
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param managementAssociationName User ManagementAssociation Name.
     * @param parameters The parameters required to create ManagementAssociation extension.
     * @param options The optional parameters
     * @param callback The callback
     */
    createOrUpdate(resourceGroupName: string, managementAssociationName: string, parameters: Models.ManagementAssociation, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ManagementAssociation>): void;
    /**
     * Deletes the ManagementAssociation in the subscription.
     * @summary Deletes the ManagementAssociation
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param managementAssociationName User ManagementAssociation Name.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteMethod(resourceGroupName: string, managementAssociationName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param managementAssociationName User ManagementAssociation Name.
     * @param callback The callback
     */
    deleteMethod(resourceGroupName: string, managementAssociationName: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param managementAssociationName User ManagementAssociation Name.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteMethod(resourceGroupName: string, managementAssociationName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Retrieves the user ManagementAssociation.
     * @summary Retrieve ManagementAssociation.
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param managementAssociationName User ManagementAssociation Name.
     * @param [options] The optional parameters
     * @returns Promise<Models.ManagementAssociationsGetResponse>
     */
    get(resourceGroupName: string, managementAssociationName: string, options?: msRest.RequestOptionsBase): Promise<Models.ManagementAssociationsGetResponse>;
    /**
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param managementAssociationName User ManagementAssociation Name.
     * @param callback The callback
     */
    get(resourceGroupName: string, managementAssociationName: string, callback: msRest.ServiceCallback<Models.ManagementAssociation>): void;
    /**
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param managementAssociationName User ManagementAssociation Name.
     * @param options The optional parameters
     * @param callback The callback
     */
    get(resourceGroupName: string, managementAssociationName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ManagementAssociation>): void;
}
//# sourceMappingURL=managementAssociations.d.ts.map