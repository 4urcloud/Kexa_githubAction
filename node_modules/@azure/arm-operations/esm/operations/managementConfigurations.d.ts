import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import { OperationsManagementClientContext } from "../operationsManagementClientContext";
/** Class representing a ManagementConfigurations. */
export declare class ManagementConfigurations {
    private readonly client;
    /**
     * Create a ManagementConfigurations.
     * @param {OperationsManagementClientContext} client Reference to the service client.
     */
    constructor(client: OperationsManagementClientContext);
    /**
     * Retrieves the ManagementConfigurations list.
     * @summary Retrieves the ManagementConfigurations list for the subscription
     * @param [options] The optional parameters
     * @returns Promise<Models.ManagementConfigurationsListBySubscriptionResponse>
     */
    listBySubscription(options?: msRest.RequestOptionsBase): Promise<Models.ManagementConfigurationsListBySubscriptionResponse>;
    /**
     * @param callback The callback
     */
    listBySubscription(callback: msRest.ServiceCallback<Models.ManagementConfigurationPropertiesList>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    listBySubscription(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ManagementConfigurationPropertiesList>): void;
    /**
     * Creates or updates the ManagementConfiguration.
     * @summary Create/Update ManagementConfiguration.
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param managementConfigurationName User Management Configuration Name.
     * @param parameters The parameters required to create OMS Solution.
     * @param [options] The optional parameters
     * @returns Promise<Models.ManagementConfigurationsCreateOrUpdateResponse>
     */
    createOrUpdate(resourceGroupName: string, managementConfigurationName: string, parameters: Models.ManagementConfiguration, options?: msRest.RequestOptionsBase): Promise<Models.ManagementConfigurationsCreateOrUpdateResponse>;
    /**
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param managementConfigurationName User Management Configuration Name.
     * @param parameters The parameters required to create OMS Solution.
     * @param callback The callback
     */
    createOrUpdate(resourceGroupName: string, managementConfigurationName: string, parameters: Models.ManagementConfiguration, callback: msRest.ServiceCallback<Models.ManagementConfiguration>): void;
    /**
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param managementConfigurationName User Management Configuration Name.
     * @param parameters The parameters required to create OMS Solution.
     * @param options The optional parameters
     * @param callback The callback
     */
    createOrUpdate(resourceGroupName: string, managementConfigurationName: string, parameters: Models.ManagementConfiguration, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ManagementConfiguration>): void;
    /**
     * Deletes the ManagementConfiguration in the subscription.
     * @summary Deletes the ManagementConfiguration
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param managementConfigurationName User Management Configuration Name.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteMethod(resourceGroupName: string, managementConfigurationName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param managementConfigurationName User Management Configuration Name.
     * @param callback The callback
     */
    deleteMethod(resourceGroupName: string, managementConfigurationName: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param managementConfigurationName User Management Configuration Name.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteMethod(resourceGroupName: string, managementConfigurationName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Retrieves the user ManagementConfiguration.
     * @summary Retrieve ManagementConfiguration.
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param managementConfigurationName User Management Configuration Name.
     * @param [options] The optional parameters
     * @returns Promise<Models.ManagementConfigurationsGetResponse>
     */
    get(resourceGroupName: string, managementConfigurationName: string, options?: msRest.RequestOptionsBase): Promise<Models.ManagementConfigurationsGetResponse>;
    /**
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param managementConfigurationName User Management Configuration Name.
     * @param callback The callback
     */
    get(resourceGroupName: string, managementConfigurationName: string, callback: msRest.ServiceCallback<Models.ManagementConfiguration>): void;
    /**
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param managementConfigurationName User Management Configuration Name.
     * @param options The optional parameters
     * @param callback The callback
     */
    get(resourceGroupName: string, managementConfigurationName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ManagementConfiguration>): void;
}
//# sourceMappingURL=managementConfigurations.d.ts.map