import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import { OperationsManagementClientContext } from "../operationsManagementClientContext";
/** Class representing a Solutions. */
export declare class Solutions {
    private readonly client;
    /**
     * Create a Solutions.
     * @param {OperationsManagementClientContext} client Reference to the service client.
     */
    constructor(client: OperationsManagementClientContext);
    /**
     * Creates or updates the Solution.
     * @summary Create/Update Solution.
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param solutionName User Solution Name.
     * @param parameters The parameters required to create OMS Solution.
     * @param [options] The optional parameters
     * @returns Promise<Models.SolutionsCreateOrUpdateResponse>
     */
    createOrUpdate(resourceGroupName: string, solutionName: string, parameters: Models.Solution, options?: msRest.RequestOptionsBase): Promise<Models.SolutionsCreateOrUpdateResponse>;
    /**
     * Patch a Solution. Only updating tags supported.
     * @summary Patch a Solution.
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param solutionName User Solution Name.
     * @param parameters The parameters required to patch a Solution.
     * @param [options] The optional parameters
     * @returns Promise<Models.SolutionsUpdateResponse>
     */
    update(resourceGroupName: string, solutionName: string, parameters: Models.SolutionPatch, options?: msRest.RequestOptionsBase): Promise<Models.SolutionsUpdateResponse>;
    /**
     * Deletes the solution in the subscription.
     * @summary Deletes the solution
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param solutionName User Solution Name.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteMethod(resourceGroupName: string, solutionName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * Retrieves the user solution.
     * @summary Retrieve solution.
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param solutionName User Solution Name.
     * @param [options] The optional parameters
     * @returns Promise<Models.SolutionsGetResponse>
     */
    get(resourceGroupName: string, solutionName: string, options?: msRest.RequestOptionsBase): Promise<Models.SolutionsGetResponse>;
    /**
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param solutionName User Solution Name.
     * @param callback The callback
     */
    get(resourceGroupName: string, solutionName: string, callback: msRest.ServiceCallback<Models.Solution>): void;
    /**
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param solutionName User Solution Name.
     * @param options The optional parameters
     * @param callback The callback
     */
    get(resourceGroupName: string, solutionName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Solution>): void;
    /**
     * Retrieves the solution list. It will retrieve both first party and third party solutions
     * @summary Retrieves the solution list for the subscription
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param [options] The optional parameters
     * @returns Promise<Models.SolutionsListByResourceGroupResponse>
     */
    listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.SolutionsListByResourceGroupResponse>;
    /**
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param callback The callback
     */
    listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.SolutionPropertiesList>): void;
    /**
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param options The optional parameters
     * @param callback The callback
     */
    listByResourceGroup(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SolutionPropertiesList>): void;
    /**
     * Retrieves the solution list. It will retrieve both first party and third party solutions
     * @summary Retrieves the solution list for the subscription
     * @param [options] The optional parameters
     * @returns Promise<Models.SolutionsListBySubscriptionResponse>
     */
    listBySubscription(options?: msRest.RequestOptionsBase): Promise<Models.SolutionsListBySubscriptionResponse>;
    /**
     * @param callback The callback
     */
    listBySubscription(callback: msRest.ServiceCallback<Models.SolutionPropertiesList>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    listBySubscription(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SolutionPropertiesList>): void;
    /**
     * Creates or updates the Solution.
     * @summary Create/Update Solution.
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param solutionName User Solution Name.
     * @param parameters The parameters required to create OMS Solution.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginCreateOrUpdate(resourceGroupName: string, solutionName: string, parameters: Models.Solution, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Patch a Solution. Only updating tags supported.
     * @summary Patch a Solution.
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param solutionName User Solution Name.
     * @param parameters The parameters required to patch a Solution.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginUpdate(resourceGroupName: string, solutionName: string, parameters: Models.SolutionPatch, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Deletes the solution in the subscription.
     * @summary Deletes the solution
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param solutionName User Solution Name.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginDeleteMethod(resourceGroupName: string, solutionName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
}
//# sourceMappingURL=solutions.d.ts.map