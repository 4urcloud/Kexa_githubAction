/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/solutionsMappers";
import * as Parameters from "../models/parameters";
/** Class representing a Solutions. */
var Solutions = /** @class */ (function () {
    /**
     * Create a Solutions.
     * @param {OperationsManagementClientContext} client Reference to the service client.
     */
    function Solutions(client) {
        this.client = client;
    }
    /**
     * Creates or updates the Solution.
     * @summary Create/Update Solution.
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param solutionName User Solution Name.
     * @param parameters The parameters required to create OMS Solution.
     * @param [options] The optional parameters
     * @returns Promise<Models.SolutionsCreateOrUpdateResponse>
     */
    Solutions.prototype.createOrUpdate = function (resourceGroupName, solutionName, parameters, options) {
        return this.beginCreateOrUpdate(resourceGroupName, solutionName, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Patch a Solution. Only updating tags supported.
     * @summary Patch a Solution.
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param solutionName User Solution Name.
     * @param parameters The parameters required to patch a Solution.
     * @param [options] The optional parameters
     * @returns Promise<Models.SolutionsUpdateResponse>
     */
    Solutions.prototype.update = function (resourceGroupName, solutionName, parameters, options) {
        return this.beginUpdate(resourceGroupName, solutionName, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Deletes the solution in the subscription.
     * @summary Deletes the solution
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param solutionName User Solution Name.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    Solutions.prototype.deleteMethod = function (resourceGroupName, solutionName, options) {
        return this.beginDeleteMethod(resourceGroupName, solutionName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    Solutions.prototype.get = function (resourceGroupName, solutionName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            solutionName: solutionName,
            options: options
        }, getOperationSpec, callback);
    };
    Solutions.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            options: options
        }, listByResourceGroupOperationSpec, callback);
    };
    Solutions.prototype.listBySubscription = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, listBySubscriptionOperationSpec, callback);
    };
    /**
     * Creates or updates the Solution.
     * @summary Create/Update Solution.
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param solutionName User Solution Name.
     * @param parameters The parameters required to create OMS Solution.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Solutions.prototype.beginCreateOrUpdate = function (resourceGroupName, solutionName, parameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            solutionName: solutionName,
            parameters: parameters,
            options: options
        }, beginCreateOrUpdateOperationSpec, options);
    };
    /**
     * Patch a Solution. Only updating tags supported.
     * @summary Patch a Solution.
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param solutionName User Solution Name.
     * @param parameters The parameters required to patch a Solution.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Solutions.prototype.beginUpdate = function (resourceGroupName, solutionName, parameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            solutionName: solutionName,
            parameters: parameters,
            options: options
        }, beginUpdateOperationSpec, options);
    };
    /**
     * Deletes the solution in the subscription.
     * @summary Deletes the solution
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param solutionName User Solution Name.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Solutions.prototype.beginDeleteMethod = function (resourceGroupName, solutionName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            solutionName: solutionName,
            options: options
        }, beginDeleteMethodOperationSpec, options);
    };
    return Solutions;
}());
export { Solutions };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationsManagement/solutions/{solutionName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.solutionName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.Solution
        },
        default: {
            bodyMapper: Mappers.CodeMessageError
        }
    },
    serializer: serializer
};
var listByResourceGroupOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationsManagement/solutions",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SolutionPropertiesList
        },
        default: {
            bodyMapper: Mappers.CodeMessageError
        }
    },
    serializer: serializer
};
var listBySubscriptionOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.OperationsManagement/solutions",
    urlParameters: [
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SolutionPropertiesList
        },
        default: {
            bodyMapper: Mappers.CodeMessageError
        }
    },
    serializer: serializer
};
var beginCreateOrUpdateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationsManagement/solutions/{solutionName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.solutionName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.Solution), { required: true })
    },
    responses: {
        201: {
            bodyMapper: Mappers.Solution
        },
        default: {
            bodyMapper: Mappers.CodeMessageError
        }
    },
    serializer: serializer
};
var beginUpdateOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationsManagement/solutions/{solutionName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.solutionName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.SolutionPatch), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.Solution
        },
        default: {
            bodyMapper: Mappers.CodeMessageError
        }
    },
    serializer: serializer
};
var beginDeleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationsManagement/solutions/{solutionName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.solutionName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.CodeMessageError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=solutions.js.map