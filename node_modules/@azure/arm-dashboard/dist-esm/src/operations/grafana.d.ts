import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Grafana } from "../operationsInterfaces";
import { DashboardManagementClient } from "../dashboardManagementClient";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import { ManagedGrafana, GrafanaListOptionalParams, GrafanaListByResourceGroupOptionalParams, GrafanaGetOptionalParams, GrafanaGetResponse, GrafanaCreateOptionalParams, GrafanaCreateResponse, ManagedGrafanaUpdateParameters, GrafanaUpdateOptionalParams, GrafanaUpdateResponse, GrafanaDeleteOptionalParams, GrafanaCheckEnterpriseDetailsOptionalParams, GrafanaCheckEnterpriseDetailsResponse, GrafanaFetchAvailablePluginsOptionalParams, GrafanaFetchAvailablePluginsResponse } from "../models";
/** Class containing Grafana operations. */
export declare class GrafanaImpl implements Grafana {
    private readonly client;
    /**
     * Initialize a new instance of the class Grafana class.
     * @param client Reference to the service client
     */
    constructor(client: DashboardManagementClient);
    /**
     * List all resources of workspaces for Grafana under the specified subscription.
     * @param options The options parameters.
     */
    list(options?: GrafanaListOptionalParams): PagedAsyncIterableIterator<ManagedGrafana>;
    private listPagingPage;
    private listPagingAll;
    /**
     * List all resources of workspaces for Grafana under the specified resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: GrafanaListByResourceGroupOptionalParams): PagedAsyncIterableIterator<ManagedGrafana>;
    private listByResourceGroupPagingPage;
    private listByResourceGroupPagingAll;
    /**
     * List all resources of workspaces for Grafana under the specified subscription.
     * @param options The options parameters.
     */
    private _list;
    /**
     * List all resources of workspaces for Grafana under the specified resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    private _listByResourceGroup;
    /**
     * Get the properties of a specific workspace for Grafana resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The workspace name of Azure Managed Grafana.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, options?: GrafanaGetOptionalParams): Promise<GrafanaGetResponse>;
    /**
     * Create or update a workspace for Grafana resource. This API is idempotent, so user can either create
     * a new grafana or update an existing grafana.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The workspace name of Azure Managed Grafana.
     * @param requestBodyParameters The grafana resource type.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName: string, workspaceName: string, requestBodyParameters: ManagedGrafana, options?: GrafanaCreateOptionalParams): Promise<SimplePollerLike<OperationState<GrafanaCreateResponse>, GrafanaCreateResponse>>;
    /**
     * Create or update a workspace for Grafana resource. This API is idempotent, so user can either create
     * a new grafana or update an existing grafana.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The workspace name of Azure Managed Grafana.
     * @param requestBodyParameters The grafana resource type.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName: string, workspaceName: string, requestBodyParameters: ManagedGrafana, options?: GrafanaCreateOptionalParams): Promise<GrafanaCreateResponse>;
    /**
     * Update a workspace for Grafana resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The workspace name of Azure Managed Grafana.
     * @param requestBodyParameters The parameters for a PATCH request to a grafana resource.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, workspaceName: string, requestBodyParameters: ManagedGrafanaUpdateParameters, options?: GrafanaUpdateOptionalParams): Promise<GrafanaUpdateResponse>;
    /**
     * Delete a workspace for Grafana resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The workspace name of Azure Managed Grafana.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, workspaceName: string, options?: GrafanaDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Delete a workspace for Grafana resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The workspace name of Azure Managed Grafana.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, workspaceName: string, options?: GrafanaDeleteOptionalParams): Promise<void>;
    /**
     * Retrieve enterprise add-on details information
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The workspace name of Azure Managed Grafana.
     * @param options The options parameters.
     */
    checkEnterpriseDetails(resourceGroupName: string, workspaceName: string, options?: GrafanaCheckEnterpriseDetailsOptionalParams): Promise<GrafanaCheckEnterpriseDetailsResponse>;
    /**
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The workspace name of Azure Managed Grafana.
     * @param options The options parameters.
     */
    fetchAvailablePlugins(resourceGroupName: string, workspaceName: string, options?: GrafanaFetchAvailablePluginsOptionalParams): Promise<GrafanaFetchAvailablePluginsResponse>;
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    private _listByResourceGroupNext;
}
//# sourceMappingURL=grafana.d.ts.map