import { Configurations } from "../operationsInterfaces";
import { HDInsightManagementClient } from "../hDInsightManagementClient";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import { ConfigurationsListOptionalParams, ConfigurationsListResponse, ConfigurationsUpdateOptionalParams, ConfigurationsGetOptionalParams, ConfigurationsGetResponse } from "../models";
/** Class containing Configurations operations. */
export declare class ConfigurationsImpl implements Configurations {
    private readonly client;
    /**
     * Initialize a new instance of the class Configurations class.
     * @param client Reference to the service client
     */
    constructor(client: HDInsightManagementClient);
    /**
     * Gets all configuration information for an HDI cluster.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, clusterName: string, options?: ConfigurationsListOptionalParams): Promise<ConfigurationsListResponse>;
    /**
     * Configures the HTTP settings on the specified cluster. This API is deprecated, please use
     * UpdateGatewaySettings in cluster endpoint instead.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster.
     * @param configurationName The name of the cluster configuration.
     * @param parameters The cluster configurations.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, clusterName: string, configurationName: string, parameters: {
        [propertyName: string]: string;
    }, options?: ConfigurationsUpdateOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Configures the HTTP settings on the specified cluster. This API is deprecated, please use
     * UpdateGatewaySettings in cluster endpoint instead.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster.
     * @param configurationName The name of the cluster configuration.
     * @param parameters The cluster configurations.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, clusterName: string, configurationName: string, parameters: {
        [propertyName: string]: string;
    }, options?: ConfigurationsUpdateOptionalParams): Promise<void>;
    /**
     * The configuration object for the specified cluster. This API is not recommended and might be removed
     * in the future. Please consider using List configurations API instead.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster.
     * @param configurationName The name of the cluster configuration.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, clusterName: string, configurationName: string, options?: ConfigurationsGetOptionalParams): Promise<ConfigurationsGetResponse>;
}
//# sourceMappingURL=configurations.d.ts.map