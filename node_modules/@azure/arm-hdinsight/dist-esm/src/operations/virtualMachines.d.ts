import { VirtualMachines } from "../operationsInterfaces";
import { HDInsightManagementClient } from "../hDInsightManagementClient";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import { VirtualMachinesListHostsOptionalParams, VirtualMachinesListHostsResponse, VirtualMachinesRestartHostsOptionalParams, VirtualMachinesGetAsyncOperationStatusOptionalParams, VirtualMachinesGetAsyncOperationStatusResponse } from "../models";
/** Class containing VirtualMachines operations. */
export declare class VirtualMachinesImpl implements VirtualMachines {
    private readonly client;
    /**
     * Initialize a new instance of the class VirtualMachines class.
     * @param client Reference to the service client
     */
    constructor(client: HDInsightManagementClient);
    /**
     * Lists the HDInsight clusters hosts
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster.
     * @param options The options parameters.
     */
    listHosts(resourceGroupName: string, clusterName: string, options?: VirtualMachinesListHostsOptionalParams): Promise<VirtualMachinesListHostsResponse>;
    /**
     * Restarts the specified HDInsight cluster hosts.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster.
     * @param hosts The list of hosts to restart
     * @param options The options parameters.
     */
    beginRestartHosts(resourceGroupName: string, clusterName: string, hosts: string[], options?: VirtualMachinesRestartHostsOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Restarts the specified HDInsight cluster hosts.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster.
     * @param hosts The list of hosts to restart
     * @param options The options parameters.
     */
    beginRestartHostsAndWait(resourceGroupName: string, clusterName: string, hosts: string[], options?: VirtualMachinesRestartHostsOptionalParams): Promise<void>;
    /**
     * Gets the async operation status.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster.
     * @param operationId The long running operation id.
     * @param options The options parameters.
     */
    getAsyncOperationStatus(resourceGroupName: string, clusterName: string, operationId: string, options?: VirtualMachinesGetAsyncOperationStatusOptionalParams): Promise<VirtualMachinesGetAsyncOperationStatusResponse>;
}
//# sourceMappingURL=virtualMachines.d.ts.map