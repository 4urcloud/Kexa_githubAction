import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { ScriptActions } from "../operationsInterfaces";
import { HDInsightManagementClient } from "../hDInsightManagementClient";
import { RuntimeScriptActionDetail, ScriptActionsListByClusterOptionalParams, ScriptActionsDeleteOptionalParams, ScriptActionsGetExecutionDetailOptionalParams, ScriptActionsGetExecutionDetailResponse, ScriptActionsGetExecutionAsyncOperationStatusOptionalParams, ScriptActionsGetExecutionAsyncOperationStatusResponse } from "../models";
/** Class containing ScriptActions operations. */
export declare class ScriptActionsImpl implements ScriptActions {
    private readonly client;
    /**
     * Initialize a new instance of the class ScriptActions class.
     * @param client Reference to the service client
     */
    constructor(client: HDInsightManagementClient);
    /**
     * Lists all the persisted script actions for the specified cluster.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster.
     * @param options The options parameters.
     */
    listByCluster(resourceGroupName: string, clusterName: string, options?: ScriptActionsListByClusterOptionalParams): PagedAsyncIterableIterator<RuntimeScriptActionDetail>;
    private listByClusterPagingPage;
    private listByClusterPagingAll;
    /**
     * Deletes a specified persisted script action of the cluster.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster.
     * @param scriptName The name of the script.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, clusterName: string, scriptName: string, options?: ScriptActionsDeleteOptionalParams): Promise<void>;
    /**
     * Lists all the persisted script actions for the specified cluster.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster.
     * @param options The options parameters.
     */
    private _listByCluster;
    /**
     * Gets the script execution detail for the given script execution ID.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster.
     * @param scriptExecutionId The script execution Id
     * @param options The options parameters.
     */
    getExecutionDetail(resourceGroupName: string, clusterName: string, scriptExecutionId: string, options?: ScriptActionsGetExecutionDetailOptionalParams): Promise<ScriptActionsGetExecutionDetailResponse>;
    /**
     * Gets the async operation status of execution operation.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster.
     * @param operationId The long running operation id.
     * @param options The options parameters.
     */
    getExecutionAsyncOperationStatus(resourceGroupName: string, clusterName: string, operationId: string, options?: ScriptActionsGetExecutionAsyncOperationStatusOptionalParams): Promise<ScriptActionsGetExecutionAsyncOperationStatusResponse>;
    /**
     * ListByClusterNext
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster.
     * @param nextLink The nextLink from the previous successful call to the ListByCluster method.
     * @param options The options parameters.
     */
    private _listByClusterNext;
}
//# sourceMappingURL=scriptActions.d.ts.map