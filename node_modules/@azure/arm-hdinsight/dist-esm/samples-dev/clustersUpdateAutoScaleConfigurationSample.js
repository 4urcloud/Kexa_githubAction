/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { HDInsightManagementClient } from "@azure/arm-hdinsight";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to Updates the Autoscale Configuration for HDInsight cluster.
 *
 * @summary Updates the Autoscale Configuration for HDInsight cluster.
 * x-ms-original-file: specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/DisableClusterAutoScale.json
 */
function disableAutoscaleForTheHdInsightCluster() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["HDINSIGHT_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["HDINSIGHT_RESOURCE_GROUP"] || "rg1";
        const clusterName = "cluster1";
        const roleName = "workernode";
        const parameters = {};
        const credential = new DefaultAzureCredential();
        const client = new HDInsightManagementClient(credential, subscriptionId);
        const result = yield client.clusters.beginUpdateAutoScaleConfigurationAndWait(resourceGroupName, clusterName, roleName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Updates the Autoscale Configuration for HDInsight cluster.
 *
 * @summary Updates the Autoscale Configuration for HDInsight cluster.
 * x-ms-original-file: specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/EnableOrUpdateAutoScaleWithLoadBasedConfiguration.json
 */
function enableOrUpdateAutoscaleWithTheLoadBasedConfigurationForHdInsightCluster() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["HDINSIGHT_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["HDINSIGHT_RESOURCE_GROUP"] || "rg1";
        const clusterName = "cluster1";
        const roleName = "workernode";
        const parameters = {
            autoscale: { capacity: { maxInstanceCount: 5, minInstanceCount: 3 } }
        };
        const credential = new DefaultAzureCredential();
        const client = new HDInsightManagementClient(credential, subscriptionId);
        const result = yield client.clusters.beginUpdateAutoScaleConfigurationAndWait(resourceGroupName, clusterName, roleName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Updates the Autoscale Configuration for HDInsight cluster.
 *
 * @summary Updates the Autoscale Configuration for HDInsight cluster.
 * x-ms-original-file: specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/EnableOrUpdateAutoScaleWithScheduleBasedConfiguration.json
 */
function enableOrUpdateAutoscaleWithTheScheduleBasedConfigurationForHdInsightCluster() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["HDINSIGHT_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["HDINSIGHT_RESOURCE_GROUP"] || "rg1";
        const clusterName = "cluster1";
        const roleName = "workernode";
        const parameters = {
            autoscale: {
                recurrence: {
                    schedule: [
                        {
                            days: ["Thursday"],
                            timeAndCapacity: {
                                maxInstanceCount: 4,
                                minInstanceCount: 4,
                                time: "16:00"
                            }
                        }
                    ],
                    timeZone: "China Standard Time"
                }
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new HDInsightManagementClient(credential, subscriptionId);
        const result = yield client.clusters.beginUpdateAutoScaleConfigurationAndWait(resourceGroupName, clusterName, roleName, parameters);
        console.log(result);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        disableAutoscaleForTheHdInsightCluster();
        enableOrUpdateAutoscaleWithTheLoadBasedConfigurationForHdInsightCluster();
        enableOrUpdateAutoscaleWithTheScheduleBasedConfigurationForHdInsightCluster();
    });
}
main().catch(console.error);
//# sourceMappingURL=clustersUpdateAutoScaleConfigurationSample.js.map