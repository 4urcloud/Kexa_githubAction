/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { HDInsightManagementClient } from "@azure/arm-hdinsight";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to Creates a new HDInsight cluster with the specified parameters.
 *
 * @summary Creates a new HDInsight cluster with the specified parameters.
 * x-ms-original-file: specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateHDInsightClusterWithAutoscaleConfig.json
 */
function createHdInsightClusterWithAutoscaleConfiguration() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["HDINSIGHT_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["HDINSIGHT_RESOURCE_GROUP"] || "rg1";
        const clusterName = "cluster1";
        const parameters = {
            properties: {
                clusterDefinition: {
                    componentVersion: { hadoop: "2.7" },
                    configurations: {
                        gateway: {
                            "restAuthCredential.isEnabled": true,
                            "restAuthCredential.password": "**********",
                            "restAuthCredential.username": "admin"
                        }
                    },
                    kind: "hadoop"
                },
                clusterVersion: "3.6",
                computeProfile: {
                    roles: [
                        {
                            name: "workernode",
                            autoscaleConfiguration: {
                                capacity: {},
                                recurrence: {
                                    schedule: [
                                        {
                                            days: [
                                                "Monday",
                                                "Tuesday",
                                                "Wednesday",
                                                "Thursday",
                                                "Friday"
                                            ],
                                            timeAndCapacity: {
                                                maxInstanceCount: 3,
                                                minInstanceCount: 3,
                                                time: "09:00"
                                            }
                                        },
                                        {
                                            days: [
                                                "Monday",
                                                "Tuesday",
                                                "Wednesday",
                                                "Thursday",
                                                "Friday"
                                            ],
                                            timeAndCapacity: {
                                                maxInstanceCount: 6,
                                                minInstanceCount: 6,
                                                time: "18:00"
                                            }
                                        },
                                        {
                                            days: ["Saturday", "Sunday"],
                                            timeAndCapacity: {
                                                maxInstanceCount: 2,
                                                minInstanceCount: 2,
                                                time: "09:00"
                                            }
                                        },
                                        {
                                            days: ["Saturday", "Sunday"],
                                            timeAndCapacity: {
                                                maxInstanceCount: 4,
                                                minInstanceCount: 4,
                                                time: "18:00"
                                            }
                                        }
                                    ],
                                    timeZone: "China Standard Time"
                                }
                            },
                            dataDisksGroups: [],
                            hardwareProfile: { vmSize: "Standard_D4_V2" },
                            osProfile: {
                                linuxOperatingSystemProfile: {
                                    password: "**********",
                                    username: "sshuser"
                                }
                            },
                            scriptActions: [],
                            targetInstanceCount: 4,
                            virtualNetworkProfile: {}
                        }
                    ]
                },
                osType: "Linux",
                storageProfile: {
                    storageaccounts: [
                        {
                            name: "mystorage.blob.core.windows.net",
                            container: "hdinsight-autoscale-tes-2019-06-18t05-49-16-591z",
                            isDefault: true,
                            key: "storagekey"
                        }
                    ]
                },
                tier: "Standard"
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new HDInsightManagementClient(credential, subscriptionId);
        const result = yield client.clusters.beginCreateAndWait(resourceGroupName, clusterName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates a new HDInsight cluster with the specified parameters.
 *
 * @summary Creates a new HDInsight cluster with the specified parameters.
 * x-ms-original-file: specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateLinuxHadoopAdlsGen2.json
 */
function createHadoopClusterWithAzureDataLakeStorageGen2() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["HDINSIGHT_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["HDINSIGHT_RESOURCE_GROUP"] || "rg1";
        const clusterName = "cluster1";
        const parameters = {
            properties: {
                clusterDefinition: {
                    configurations: {
                        gateway: {
                            "restAuthCredential.isEnabled": "true",
                            "restAuthCredential.password": "**********",
                            "restAuthCredential.username": "admin"
                        }
                    },
                    kind: "Hadoop"
                },
                clusterVersion: "3.6",
                computeProfile: {
                    roles: [
                        {
                            name: "headnode",
                            hardwareProfile: { vmSize: "Standard_D3_V2" },
                            minInstanceCount: 1,
                            osProfile: {
                                linuxOperatingSystemProfile: {
                                    password: "**********",
                                    username: "sshuser"
                                }
                            },
                            targetInstanceCount: 2
                        },
                        {
                            name: "workernode",
                            hardwareProfile: { vmSize: "Standard_D3_V2" },
                            minInstanceCount: 1,
                            osProfile: {
                                linuxOperatingSystemProfile: {
                                    password: "**********",
                                    username: "sshuser"
                                }
                            },
                            targetInstanceCount: 4
                        },
                        {
                            name: "zookeepernode",
                            hardwareProfile: { vmSize: "Small" },
                            minInstanceCount: 1,
                            osProfile: {
                                linuxOperatingSystemProfile: {
                                    password: "**********",
                                    username: "sshuser"
                                }
                            },
                            targetInstanceCount: 3
                        }
                    ]
                },
                osType: "Linux",
                storageProfile: {
                    storageaccounts: [
                        {
                            name: "mystorage.dfs.core.windows.net",
                            fileSystem: "default",
                            isDefault: true,
                            key: "storagekey"
                        }
                    ]
                },
                tier: "Standard"
            },
            tags: { key1: "val1" }
        };
        const credential = new DefaultAzureCredential();
        const client = new HDInsightManagementClient(credential, subscriptionId);
        const result = yield client.clusters.beginCreateAndWait(resourceGroupName, clusterName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates a new HDInsight cluster with the specified parameters.
 *
 * @summary Creates a new HDInsight cluster with the specified parameters.
 * x-ms-original-file: specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateLinuxHadoopSshPassword.json
 */
function createHadoopOnLinuxClusterWithSshPassword() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["HDINSIGHT_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["HDINSIGHT_RESOURCE_GROUP"] || "rg1";
        const clusterName = "cluster1";
        const parameters = {
            properties: {
                clusterDefinition: {
                    configurations: {
                        gateway: {
                            "restAuthCredential.isEnabled": "true",
                            "restAuthCredential.password": "**********",
                            "restAuthCredential.username": "admin"
                        }
                    },
                    kind: "Hadoop"
                },
                clusterVersion: "3.5",
                computeProfile: {
                    roles: [
                        {
                            name: "headnode",
                            hardwareProfile: { vmSize: "Standard_D3_V2" },
                            minInstanceCount: 1,
                            osProfile: {
                                linuxOperatingSystemProfile: {
                                    password: "**********",
                                    username: "sshuser"
                                }
                            },
                            targetInstanceCount: 2
                        },
                        {
                            name: "workernode",
                            hardwareProfile: { vmSize: "Standard_D3_V2" },
                            minInstanceCount: 1,
                            osProfile: {
                                linuxOperatingSystemProfile: {
                                    password: "**********",
                                    username: "sshuser"
                                }
                            },
                            targetInstanceCount: 4
                        },
                        {
                            name: "zookeepernode",
                            hardwareProfile: { vmSize: "Small" },
                            minInstanceCount: 1,
                            osProfile: {
                                linuxOperatingSystemProfile: {
                                    password: "**********",
                                    username: "sshuser"
                                }
                            },
                            targetInstanceCount: 3
                        }
                    ]
                },
                osType: "Linux",
                storageProfile: {
                    storageaccounts: [
                        {
                            name: "mystorage.blob.core.windows.net",
                            container: "containername",
                            isDefault: true,
                            key: "storagekey"
                        }
                    ]
                },
                tier: "Standard"
            },
            tags: { key1: "val1" }
        };
        const credential = new DefaultAzureCredential();
        const client = new HDInsightManagementClient(credential, subscriptionId);
        const result = yield client.clusters.beginCreateAndWait(resourceGroupName, clusterName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates a new HDInsight cluster with the specified parameters.
 *
 * @summary Creates a new HDInsight cluster with the specified parameters.
 * x-ms-original-file: specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateLinuxHadoopSshPublicKey.json
 */
function createHadoopOnLinuxClusterWithSshPublicKey() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["HDINSIGHT_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["HDINSIGHT_RESOURCE_GROUP"] || "rg1";
        const clusterName = "cluster1";
        const parameters = {
            properties: {
                clusterDefinition: {
                    configurations: {
                        gateway: {
                            "restAuthCredential.isEnabled": true,
                            "restAuthCredential.password": "**********",
                            "restAuthCredential.username": "admin"
                        }
                    },
                    kind: "Hadoop"
                },
                clusterVersion: "3.5",
                computeProfile: {
                    roles: [
                        {
                            name: "headnode",
                            hardwareProfile: { vmSize: "Standard_D3_V2" },
                            minInstanceCount: 1,
                            osProfile: {
                                linuxOperatingSystemProfile: {
                                    sshProfile: { publicKeys: [{ certificateData: "**********" }] },
                                    username: "sshuser"
                                }
                            },
                            targetInstanceCount: 2
                        },
                        {
                            name: "workernode",
                            hardwareProfile: { vmSize: "Standard_D3_V2" },
                            minInstanceCount: 1,
                            osProfile: {
                                linuxOperatingSystemProfile: {
                                    password: "**********",
                                    username: "sshuser"
                                }
                            },
                            targetInstanceCount: 4
                        },
                        {
                            name: "zookeepernode",
                            hardwareProfile: { vmSize: "Small" },
                            minInstanceCount: 1,
                            osProfile: {
                                linuxOperatingSystemProfile: {
                                    password: "**********",
                                    username: "sshuser"
                                }
                            },
                            targetInstanceCount: 3
                        }
                    ]
                },
                osType: "Linux",
                storageProfile: {
                    storageaccounts: [
                        {
                            name: "mystorage.blob.core.windows.net",
                            container: "containername",
                            isDefault: true,
                            key: "storagekey"
                        }
                    ]
                },
                tier: "Standard"
            },
            tags: { key1: "val1" }
        };
        const credential = new DefaultAzureCredential();
        const client = new HDInsightManagementClient(credential, subscriptionId);
        const result = yield client.clusters.beginCreateAndWait(resourceGroupName, clusterName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates a new HDInsight cluster with the specified parameters.
 *
 * @summary Creates a new HDInsight cluster with the specified parameters.
 * x-ms-original-file: specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateKafkaClusterWithKafkaRestProxy.json
 */
function createKafkaClusterWithKafkaRestProxy() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["HDINSIGHT_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["HDINSIGHT_RESOURCE_GROUP"] || "rg1";
        const clusterName = "cluster1";
        const parameters = {
            properties: {
                clusterDefinition: {
                    componentVersion: { kafka: "2.1" },
                    configurations: {
                        gateway: {
                            "restAuthCredential.isEnabled": true,
                            "restAuthCredential.password": "**********",
                            "restAuthCredential.username": "admin"
                        }
                    },
                    kind: "kafka"
                },
                clusterVersion: "4.0",
                computeProfile: {
                    roles: [
                        {
                            name: "headnode",
                            hardwareProfile: { vmSize: "Large" },
                            osProfile: {
                                linuxOperatingSystemProfile: {
                                    password: "**********",
                                    username: "sshuser"
                                }
                            },
                            targetInstanceCount: 2
                        },
                        {
                            name: "workernode",
                            dataDisksGroups: [{ disksPerNode: 8 }],
                            hardwareProfile: { vmSize: "Large" },
                            osProfile: {
                                linuxOperatingSystemProfile: {
                                    password: "**********",
                                    username: "sshuser"
                                }
                            },
                            targetInstanceCount: 3
                        },
                        {
                            name: "zookeepernode",
                            hardwareProfile: { vmSize: "Small" },
                            osProfile: {
                                linuxOperatingSystemProfile: {
                                    password: "**********",
                                    username: "sshuser"
                                }
                            },
                            targetInstanceCount: 3
                        },
                        {
                            name: "kafkamanagementnode",
                            hardwareProfile: { vmSize: "Standard_D4_v2" },
                            osProfile: {
                                linuxOperatingSystemProfile: {
                                    password: "**********",
                                    username: "kafkauser"
                                }
                            },
                            targetInstanceCount: 2
                        }
                    ]
                },
                kafkaRestProperties: {
                    clientGroupInfo: {
                        groupId: "00000000-0000-0000-0000-111111111111",
                        groupName: "Kafka security group name"
                    }
                },
                osType: "Linux",
                storageProfile: {
                    storageaccounts: [
                        {
                            name: "mystorage.blob.core.windows.net",
                            container: "containername",
                            isDefault: true,
                            key: "storagekey"
                        }
                    ]
                },
                tier: "Standard"
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new HDInsightManagementClient(credential, subscriptionId);
        const result = yield client.clusters.beginCreateAndWait(resourceGroupName, clusterName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates a new HDInsight cluster with the specified parameters.
 *
 * @summary Creates a new HDInsight cluster with the specified parameters.
 * x-ms-original-file: specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateLinuxHadoopSecureHadoop.json
 */
function createSecureHadoopCluster() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["HDINSIGHT_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["HDINSIGHT_RESOURCE_GROUP"] || "rg1";
        const clusterName = "cluster1";
        const parameters = {
            properties: {
                clusterDefinition: {
                    configurations: {
                        gateway: {
                            "restAuthCredential.isEnabled": true,
                            "restAuthCredential.password": "**********",
                            "restAuthCredential.username": "admin"
                        }
                    },
                    kind: "Hadoop"
                },
                clusterVersion: "3.5",
                computeProfile: {
                    roles: [
                        {
                            name: "headnode",
                            hardwareProfile: { vmSize: "Standard_D3_V2" },
                            minInstanceCount: 1,
                            osProfile: {
                                linuxOperatingSystemProfile: {
                                    password: "**********",
                                    sshProfile: { publicKeys: [{ certificateData: "**********" }] },
                                    username: "sshuser"
                                }
                            },
                            scriptActions: [],
                            targetInstanceCount: 2,
                            virtualNetworkProfile: {
                                id: "/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname",
                                subnet: "/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/vnetsubnet"
                            }
                        },
                        {
                            name: "workernode",
                            hardwareProfile: { vmSize: "Standard_D3_V2" },
                            minInstanceCount: 1,
                            osProfile: {
                                linuxOperatingSystemProfile: {
                                    password: "**********",
                                    sshProfile: { publicKeys: [{ certificateData: "**********" }] },
                                    username: "sshuser"
                                }
                            },
                            scriptActions: [],
                            targetInstanceCount: 4,
                            virtualNetworkProfile: {
                                id: "/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname",
                                subnet: "/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/vnetsubnet"
                            }
                        },
                        {
                            name: "zookeepernode",
                            hardwareProfile: { vmSize: "Small" },
                            minInstanceCount: 1,
                            osProfile: {
                                linuxOperatingSystemProfile: {
                                    password: "**********",
                                    sshProfile: { publicKeys: [{ certificateData: "**********" }] },
                                    username: "sshuser"
                                }
                            },
                            scriptActions: [],
                            targetInstanceCount: 3,
                            virtualNetworkProfile: {
                                id: "/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname",
                                subnet: "/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/vnetsubnet"
                            }
                        }
                    ]
                },
                osType: "Linux",
                securityProfile: {
                    clusterUsersGroupDNs: ["hdiusers"],
                    directoryType: "ActiveDirectory",
                    domain: "DomainName",
                    domainUserPassword: "**********",
                    domainUsername: "DomainUsername",
                    ldapsUrls: ["ldaps://10.10.0.4:636"],
                    organizationalUnitDN: "OU=Hadoop,DC=hdinsight,DC=test"
                },
                storageProfile: {
                    storageaccounts: [
                        {
                            name: "mystorage.blob.core.windows.net",
                            container: "containername",
                            isDefault: true,
                            key: "storage account key"
                        }
                    ]
                },
                tier: "Premium"
            },
            tags: { key1: "val1" }
        };
        const credential = new DefaultAzureCredential();
        const client = new HDInsightManagementClient(credential, subscriptionId);
        const result = yield client.clusters.beginCreateAndWait(resourceGroupName, clusterName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates a new HDInsight cluster with the specified parameters.
 *
 * @summary Creates a new HDInsight cluster with the specified parameters.
 * x-ms-original-file: specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateLinuxSparkSshPassword.json
 */
function createSparkOnLinuxClusterWithSshPassword() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["HDINSIGHT_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["HDINSIGHT_RESOURCE_GROUP"] || "rg1";
        const clusterName = "cluster1";
        const parameters = {
            properties: {
                clusterDefinition: {
                    componentVersion: { spark: "2.0" },
                    configurations: {
                        gateway: {
                            "restAuthCredential.isEnabled": true,
                            "restAuthCredential.password": "**********",
                            "restAuthCredential.username": "admin"
                        }
                    },
                    kind: "Spark"
                },
                clusterVersion: "3.5",
                computeProfile: {
                    roles: [
                        {
                            name: "headnode",
                            hardwareProfile: { vmSize: "Standard_D12_V2" },
                            minInstanceCount: 1,
                            osProfile: {
                                linuxOperatingSystemProfile: {
                                    password: "**********",
                                    username: "sshuser"
                                }
                            },
                            targetInstanceCount: 2
                        },
                        {
                            name: "workernode",
                            hardwareProfile: { vmSize: "Standard_D4_V2" },
                            minInstanceCount: 1,
                            osProfile: {
                                linuxOperatingSystemProfile: {
                                    password: "**********",
                                    username: "sshuser"
                                }
                            },
                            targetInstanceCount: 4
                        }
                    ]
                },
                osType: "Linux",
                storageProfile: {
                    storageaccounts: [
                        {
                            name: "mystorage.blob.core.windows.net",
                            container: "containername",
                            isDefault: true,
                            key: "storageapikey*"
                        }
                    ]
                },
                tier: "Standard"
            },
            tags: { key1: "val1" }
        };
        const credential = new DefaultAzureCredential();
        const client = new HDInsightManagementClient(credential, subscriptionId);
        const result = yield client.clusters.beginCreateAndWait(resourceGroupName, clusterName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates a new HDInsight cluster with the specified parameters.
 *
 * @summary Creates a new HDInsight cluster with the specified parameters.
 * x-ms-original-file: specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateHDInsightClusterWithTLS12.json
 */
function createClusterWithTls12() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["HDINSIGHT_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["HDINSIGHT_RESOURCE_GROUP"] || "rg1";
        const clusterName = "cluster1";
        const parameters = {
            properties: {
                clusterDefinition: {
                    configurations: {
                        gateway: {
                            "restAuthCredential.isEnabled": true,
                            "restAuthCredential.password": "**********",
                            "restAuthCredential.username": "admin"
                        }
                    },
                    kind: "Hadoop"
                },
                clusterVersion: "3.6",
                computeProfile: {
                    roles: [
                        {
                            name: "headnode",
                            hardwareProfile: { vmSize: "Large" },
                            osProfile: {
                                linuxOperatingSystemProfile: {
                                    password: "**********",
                                    username: "sshuser"
                                }
                            },
                            targetInstanceCount: 2
                        },
                        {
                            name: "workernode",
                            hardwareProfile: { vmSize: "Large" },
                            osProfile: {
                                linuxOperatingSystemProfile: {
                                    password: "**********",
                                    username: "sshuser"
                                }
                            },
                            targetInstanceCount: 3
                        },
                        {
                            name: "zookeepernode",
                            hardwareProfile: { vmSize: "Small" },
                            osProfile: {
                                linuxOperatingSystemProfile: {
                                    password: "**********",
                                    username: "sshuser"
                                }
                            },
                            targetInstanceCount: 3
                        }
                    ]
                },
                minSupportedTlsVersion: "1.2",
                osType: "Linux",
                storageProfile: {
                    storageaccounts: [
                        {
                            name: "mystorage.blob.core.windows.net",
                            container: "default8525",
                            isDefault: true,
                            key: "storagekey"
                        }
                    ]
                },
                tier: "Standard"
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new HDInsightManagementClient(credential, subscriptionId);
        const result = yield client.clusters.beginCreateAndWait(resourceGroupName, clusterName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates a new HDInsight cluster with the specified parameters.
 *
 * @summary Creates a new HDInsight cluster with the specified parameters.
 * x-ms-original-file: specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateHDInsightClusterWithAvailabilityZones.json
 */
function createClusterWithAvailabilityZones() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["HDINSIGHT_SUBSCRIPTION_ID"] || "subId";
        const resourceGroupName = process.env["HDINSIGHT_RESOURCE_GROUP"] || "rg1";
        const clusterName = "cluster1";
        const parameters = {
            properties: {
                clusterDefinition: {
                    configurations: {
                        "ambari-conf": {
                            "database-name": "{ambari database name}",
                            "database-server": "{sql server name}.database.windows.net",
                            "database-user-name": "**********",
                            "database-user-password": "**********"
                        },
                        gateway: {
                            "restAuthCredential.isEnabled": true,
                            "restAuthCredential.password": "**********",
                            "restAuthCredential.username": "admin"
                        },
                        "hive-env": {
                            hive_database: "Existing MSSQL Server database with SQL authentication",
                            hive_database_name: "{hive metastore name}",
                            hive_database_type: "mssql",
                            hive_existing_mssql_server_database: "{hive metastore name}",
                            hive_existing_mssql_server_host: "{sql server name}.database.windows.net",
                            hive_hostname: "{sql server name}.database.windows.net"
                        },
                        "hive-site": {
                            "javax.jdo.option.ConnectionDriverName": "com.microsoft.sqlserver.jdbc.SQLServerDriver",
                            "javax.jdo.option.ConnectionPassword": "**********!",
                            "javax.jdo.option.ConnectionURL": "jdbc:sqlserver://{sql server name}.database.windows.net;database={hive metastore name};encrypt=true;trustServerCertificate=true;create=false;loginTimeout=300;sendStringParametersAsUnicode=true;prepareSQL=0",
                            "javax.jdo.option.ConnectionUserName": "**********"
                        },
                        "oozie-env": {
                            oozie_database: "Existing MSSQL Server database with SQL authentication",
                            oozie_database_name: "{oozie metastore name}",
                            oozie_database_type: "mssql",
                            oozie_existing_mssql_server_database: "{oozie metastore name}",
                            oozie_existing_mssql_server_host: "{sql server name}.database.windows.net",
                            oozie_hostname: "{sql server name}.database.windows.net"
                        },
                        "oozie-site": {
                            "oozie.db.schema.name": "oozie",
                            "oozie.service.JPAService.jdbc.driver": "com.microsoft.sqlserver.jdbc.SQLServerDriver",
                            "oozie.service.JPAService.jdbc.password": "**********",
                            "oozie.service.JPAService.jdbc.url": "jdbc:sqlserver://{sql server name}.database.windows.net;database={oozie metastore name};encrypt=true;trustServerCertificate=true;create=false;loginTimeout=300;sendStringParametersAsUnicode=true;prepareSQL=0",
                            "oozie.service.JPAService.jdbc.username": "**********"
                        }
                    },
                    kind: "hadoop"
                },
                clusterVersion: "3.6",
                computeProfile: {
                    roles: [
                        {
                            name: "headnode",
                            hardwareProfile: { vmSize: "standard_d3" },
                            osProfile: {
                                linuxOperatingSystemProfile: {
                                    password: "**********",
                                    sshProfile: { publicKeys: [{ certificateData: "**********" }] },
                                    username: "sshuser"
                                }
                            },
                            targetInstanceCount: 2,
                            virtualNetworkProfile: {
                                id: "/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname",
                                subnet: "/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/vnetsubnet"
                            }
                        },
                        {
                            name: "workernode",
                            hardwareProfile: { vmSize: "standard_d3" },
                            osProfile: {
                                linuxOperatingSystemProfile: {
                                    password: "**********",
                                    sshProfile: { publicKeys: [{ certificateData: "**********" }] },
                                    username: "sshuser"
                                }
                            },
                            targetInstanceCount: 2,
                            virtualNetworkProfile: {
                                id: "/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname",
                                subnet: "/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/vnetsubnet"
                            }
                        }
                    ]
                },
                osType: "Linux",
                storageProfile: {
                    storageaccounts: [
                        {
                            name: "mystorage",
                            container: "containername",
                            isDefault: true,
                            key: "storage account key"
                        }
                    ]
                }
            },
            zones: ["1"]
        };
        const credential = new DefaultAzureCredential();
        const client = new HDInsightManagementClient(credential, subscriptionId);
        const result = yield client.clusters.beginCreateAndWait(resourceGroupName, clusterName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates a new HDInsight cluster with the specified parameters.
 *
 * @summary Creates a new HDInsight cluster with the specified parameters.
 * x-ms-original-file: specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateHDInsightClusterWithComputeIsolationProperties.json
 */
function createClusterWithComputeIsolationProperties() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["HDINSIGHT_SUBSCRIPTION_ID"] || "subId";
        const resourceGroupName = process.env["HDINSIGHT_RESOURCE_GROUP"] || "rg1";
        const clusterName = "cluster1";
        const parameters = {
            properties: {
                clusterDefinition: {
                    configurations: {
                        gateway: {
                            "restAuthCredential.isEnabled": true,
                            "restAuthCredential.password": "**********",
                            "restAuthCredential.username": "admin"
                        }
                    },
                    kind: "hadoop"
                },
                clusterVersion: "3.6",
                computeIsolationProperties: {
                    enableComputeIsolation: true,
                    hostSku: undefined
                },
                computeProfile: {
                    roles: [
                        {
                            name: "headnode",
                            hardwareProfile: { vmSize: "standard_d3" },
                            osProfile: {
                                linuxOperatingSystemProfile: {
                                    password: "**********",
                                    sshProfile: { publicKeys: [{ certificateData: "**********" }] },
                                    username: "sshuser"
                                }
                            },
                            targetInstanceCount: 2
                        },
                        {
                            name: "workernode",
                            hardwareProfile: { vmSize: "standard_d3" },
                            osProfile: {
                                linuxOperatingSystemProfile: {
                                    password: "**********",
                                    sshProfile: { publicKeys: [{ certificateData: "**********" }] },
                                    username: "sshuser"
                                }
                            },
                            targetInstanceCount: 2
                        }
                    ]
                },
                osType: "Linux",
                storageProfile: {
                    storageaccounts: [
                        {
                            name: "mystorage",
                            container: "containername",
                            isDefault: true,
                            key: "storage account key"
                        }
                    ]
                }
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new HDInsightManagementClient(credential, subscriptionId);
        const result = yield client.clusters.beginCreateAndWait(resourceGroupName, clusterName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates a new HDInsight cluster with the specified parameters.
 *
 * @summary Creates a new HDInsight cluster with the specified parameters.
 * x-ms-original-file: specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateHDInsightClusterWithEncryptionAtHost.json
 */
function createClusterWithEncryptionAtHost() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["HDINSIGHT_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["HDINSIGHT_RESOURCE_GROUP"] || "rg1";
        const clusterName = "cluster1";
        const parameters = {
            properties: {
                clusterDefinition: {
                    configurations: {
                        gateway: {
                            "restAuthCredential.isEnabled": true,
                            "restAuthCredential.password": "**********",
                            "restAuthCredential.username": "admin"
                        }
                    },
                    kind: "Hadoop"
                },
                clusterVersion: "3.6",
                computeProfile: {
                    roles: [
                        {
                            name: "headnode",
                            hardwareProfile: { vmSize: "Standard_DS14_v2" },
                            osProfile: {
                                linuxOperatingSystemProfile: {
                                    password: "**********",
                                    username: "sshuser"
                                }
                            },
                            targetInstanceCount: 2
                        },
                        {
                            name: "workernode",
                            hardwareProfile: { vmSize: "Standard_DS14_v2" },
                            osProfile: {
                                linuxOperatingSystemProfile: {
                                    password: "**********",
                                    username: "sshuser"
                                }
                            },
                            targetInstanceCount: 3
                        },
                        {
                            name: "zookeepernode",
                            hardwareProfile: { vmSize: "Standard_DS14_v2" },
                            osProfile: {
                                linuxOperatingSystemProfile: {
                                    password: "**********",
                                    username: "sshuser"
                                }
                            },
                            targetInstanceCount: 3
                        }
                    ]
                },
                diskEncryptionProperties: { encryptionAtHost: true },
                osType: "Linux",
                storageProfile: {
                    storageaccounts: [
                        {
                            name: "mystorage.blob.core.windows.net",
                            container: "default8525",
                            isDefault: true,
                            key: "storagekey"
                        }
                    ]
                },
                tier: "Standard"
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new HDInsightManagementClient(credential, subscriptionId);
        const result = yield client.clusters.beginCreateAndWait(resourceGroupName, clusterName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates a new HDInsight cluster with the specified parameters.
 *
 * @summary Creates a new HDInsight cluster with the specified parameters.
 * x-ms-original-file: specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateHDInsightClusterWithEncryptionInTransit.json
 */
function createClusterWithEncryptionInTransit() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["HDINSIGHT_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["HDINSIGHT_RESOURCE_GROUP"] || "rg1";
        const clusterName = "cluster1";
        const parameters = {
            properties: {
                clusterDefinition: {
                    configurations: {
                        gateway: {
                            "restAuthCredential.isEnabled": true,
                            "restAuthCredential.password": "**********",
                            "restAuthCredential.username": "admin"
                        }
                    },
                    kind: "Hadoop"
                },
                clusterVersion: "3.6",
                computeProfile: {
                    roles: [
                        {
                            name: "headnode",
                            hardwareProfile: { vmSize: "Large" },
                            osProfile: {
                                linuxOperatingSystemProfile: {
                                    password: "**********",
                                    username: "sshuser"
                                }
                            },
                            targetInstanceCount: 2
                        },
                        {
                            name: "workernode",
                            hardwareProfile: { vmSize: "Large" },
                            osProfile: {
                                linuxOperatingSystemProfile: {
                                    password: "**********",
                                    username: "sshuser"
                                }
                            },
                            targetInstanceCount: 3
                        },
                        {
                            name: "zookeepernode",
                            hardwareProfile: { vmSize: "Small" },
                            osProfile: {
                                linuxOperatingSystemProfile: {
                                    password: "**********",
                                    username: "sshuser"
                                }
                            },
                            targetInstanceCount: 3
                        }
                    ]
                },
                encryptionInTransitProperties: { isEncryptionInTransitEnabled: true },
                osType: "Linux",
                storageProfile: {
                    storageaccounts: [
                        {
                            name: "mystorage.blob.core.windows.net",
                            container: "default8525",
                            isDefault: true,
                            key: "storagekey"
                        }
                    ]
                },
                tier: "Standard"
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new HDInsightManagementClient(credential, subscriptionId);
        const result = yield client.clusters.beginCreateAndWait(resourceGroupName, clusterName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates a new HDInsight cluster with the specified parameters.
 *
 * @summary Creates a new HDInsight cluster with the specified parameters.
 * x-ms-original-file: specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateHDInsightClusterWithCustomNetworkProperties.json
 */
function createClusterWithNetworkProperties() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["HDINSIGHT_SUBSCRIPTION_ID"] || "subId";
        const resourceGroupName = process.env["HDINSIGHT_RESOURCE_GROUP"] || "rg1";
        const clusterName = "cluster1";
        const parameters = {
            properties: {
                clusterDefinition: {
                    configurations: {
                        gateway: {
                            "restAuthCredential.isEnabled": true,
                            "restAuthCredential.password": "**********",
                            "restAuthCredential.username": "admin"
                        }
                    },
                    kind: "hadoop"
                },
                clusterVersion: "3.6",
                computeProfile: {
                    roles: [
                        {
                            name: "headnode",
                            hardwareProfile: { vmSize: "standard_d3" },
                            osProfile: {
                                linuxOperatingSystemProfile: {
                                    password: "**********",
                                    sshProfile: { publicKeys: [{ certificateData: "**********" }] },
                                    username: "sshuser"
                                }
                            },
                            targetInstanceCount: 2,
                            virtualNetworkProfile: {
                                id: "/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname",
                                subnet: "/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/vnetsubnet"
                            }
                        },
                        {
                            name: "workernode",
                            hardwareProfile: { vmSize: "standard_d3" },
                            osProfile: {
                                linuxOperatingSystemProfile: {
                                    password: "**********",
                                    sshProfile: { publicKeys: [{ certificateData: "**********" }] },
                                    username: "sshuser"
                                }
                            },
                            targetInstanceCount: 2,
                            virtualNetworkProfile: {
                                id: "/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname",
                                subnet: "/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/vnetsubnet"
                            }
                        }
                    ]
                },
                networkProperties: {
                    privateLink: "Enabled",
                    resourceProviderConnection: "Outbound"
                },
                osType: "Linux",
                storageProfile: {
                    storageaccounts: [
                        {
                            name: "mystorage",
                            container: "containername",
                            isDefault: true,
                            key: "storage account key"
                        }
                    ]
                }
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new HDInsightManagementClient(credential, subscriptionId);
        const result = yield client.clusters.beginCreateAndWait(resourceGroupName, clusterName, parameters);
        console.log(result);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        createHdInsightClusterWithAutoscaleConfiguration();
        createHadoopClusterWithAzureDataLakeStorageGen2();
        createHadoopOnLinuxClusterWithSshPassword();
        createHadoopOnLinuxClusterWithSshPublicKey();
        createKafkaClusterWithKafkaRestProxy();
        createSecureHadoopCluster();
        createSparkOnLinuxClusterWithSshPassword();
        createClusterWithTls12();
        createClusterWithAvailabilityZones();
        createClusterWithComputeIsolationProperties();
        createClusterWithEncryptionAtHost();
        createClusterWithEncryptionInTransit();
        createClusterWithNetworkProperties();
    });
}
main().catch(console.error);
//# sourceMappingURL=clustersCreateSample.js.map