'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var coreClient = require('@azure/core-client');
var coreRestPipeline = require('@azure/core-rest-pipeline');
var coreLro = require('@azure/core-lro');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var coreClient__namespace = /*#__PURE__*/_interopNamespace(coreClient);
var coreRestPipeline__namespace = /*#__PURE__*/_interopNamespace(coreRestPipeline);

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const pageMap = new WeakMap();
/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
function getContinuationToken(page) {
    var _a;
    if (typeof page !== "object" || page === null) {
        return undefined;
    }
    return (_a = pageMap.get(page)) === null || _a === void 0 ? void 0 : _a.continuationToken;
}
function setContinuationToken(page, continuationToken) {
    var _a;
    if (typeof page !== "object" || page === null || !continuationToken) {
        return;
    }
    const pageInfo = (_a = pageMap.get(page)) !== null && _a !== void 0 ? _a : {};
    pageInfo.continuationToken = continuationToken;
    pageMap.set(page, pageInfo);
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link SkuTier} that the service accepts. */
exports.KnownSkuTier = void 0;
(function (KnownSkuTier) {
    /** Free */
    KnownSkuTier["Free"] = "Free";
    /** Basic */
    KnownSkuTier["Basic"] = "Basic";
    /** Standard */
    KnownSkuTier["Standard"] = "Standard";
    /** Premium */
    KnownSkuTier["Premium"] = "Premium";
    /** Enterprise */
    KnownSkuTier["Enterprise"] = "Enterprise";
})(exports.KnownSkuTier || (exports.KnownSkuTier = {}));
/** Known values of {@link CreatedByType} that the service accepts. */
exports.KnownCreatedByType = void 0;
(function (KnownCreatedByType) {
    /** User */
    KnownCreatedByType["User"] = "User";
    /** Application */
    KnownCreatedByType["Application"] = "Application";
    /** ManagedIdentity */
    KnownCreatedByType["ManagedIdentity"] = "ManagedIdentity";
    /** Key */
    KnownCreatedByType["Key"] = "Key";
})(exports.KnownCreatedByType || (exports.KnownCreatedByType = {}));
/** Known values of {@link ProvisioningState} that the service accepts. */
exports.KnownProvisioningState = void 0;
(function (KnownProvisioningState) {
    /** Accepted */
    KnownProvisioningState["Accepted"] = "Accepted";
    /** Creating */
    KnownProvisioningState["Creating"] = "Creating";
    /** Deleting */
    KnownProvisioningState["Deleting"] = "Deleting";
    /** Moving */
    KnownProvisioningState["Moving"] = "Moving";
    /** Failed */
    KnownProvisioningState["Failed"] = "Failed";
    /** Succeeded */
    KnownProvisioningState["Succeeded"] = "Succeeded";
    /** ResolvingDNS */
    KnownProvisioningState["ResolvingDNS"] = "ResolvingDNS";
})(exports.KnownProvisioningState || (exports.KnownProvisioningState = {}));
/** Known values of {@link NetworkRuleAction} that the service accepts. */
exports.KnownNetworkRuleAction = void 0;
(function (KnownNetworkRuleAction) {
    /** Allow */
    KnownNetworkRuleAction["Allow"] = "Allow";
    /** Deny */
    KnownNetworkRuleAction["Deny"] = "Deny";
})(exports.KnownNetworkRuleAction || (exports.KnownNetworkRuleAction = {}));
/** Known values of {@link KeySource} that the service accepts. */
exports.KnownKeySource = void 0;
(function (KnownKeySource) {
    /** MicrosoftCognitiveServices */
    KnownKeySource["MicrosoftCognitiveServices"] = "Microsoft.CognitiveServices";
    /** MicrosoftKeyVault */
    KnownKeySource["MicrosoftKeyVault"] = "Microsoft.KeyVault";
})(exports.KnownKeySource || (exports.KnownKeySource = {}));
/** Known values of {@link PrivateEndpointServiceConnectionStatus} that the service accepts. */
exports.KnownPrivateEndpointServiceConnectionStatus = void 0;
(function (KnownPrivateEndpointServiceConnectionStatus) {
    /** Pending */
    KnownPrivateEndpointServiceConnectionStatus["Pending"] = "Pending";
    /** Approved */
    KnownPrivateEndpointServiceConnectionStatus["Approved"] = "Approved";
    /** Rejected */
    KnownPrivateEndpointServiceConnectionStatus["Rejected"] = "Rejected";
})(exports.KnownPrivateEndpointServiceConnectionStatus || (exports.KnownPrivateEndpointServiceConnectionStatus = {}));
/** Known values of {@link PrivateEndpointConnectionProvisioningState} that the service accepts. */
exports.KnownPrivateEndpointConnectionProvisioningState = void 0;
(function (KnownPrivateEndpointConnectionProvisioningState) {
    /** Succeeded */
    KnownPrivateEndpointConnectionProvisioningState["Succeeded"] = "Succeeded";
    /** Creating */
    KnownPrivateEndpointConnectionProvisioningState["Creating"] = "Creating";
    /** Deleting */
    KnownPrivateEndpointConnectionProvisioningState["Deleting"] = "Deleting";
    /** Failed */
    KnownPrivateEndpointConnectionProvisioningState["Failed"] = "Failed";
})(exports.KnownPrivateEndpointConnectionProvisioningState || (exports.KnownPrivateEndpointConnectionProvisioningState = {}));
/** Known values of {@link PublicNetworkAccess} that the service accepts. */
exports.KnownPublicNetworkAccess = void 0;
(function (KnownPublicNetworkAccess) {
    /** Enabled */
    KnownPublicNetworkAccess["Enabled"] = "Enabled";
    /** Disabled */
    KnownPublicNetworkAccess["Disabled"] = "Disabled";
})(exports.KnownPublicNetworkAccess || (exports.KnownPublicNetworkAccess = {}));
/** Known values of {@link RoutingMethods} that the service accepts. */
exports.KnownRoutingMethods = void 0;
(function (KnownRoutingMethods) {
    /** Priority */
    KnownRoutingMethods["Priority"] = "Priority";
    /** Weighted */
    KnownRoutingMethods["Weighted"] = "Weighted";
    /** Performance */
    KnownRoutingMethods["Performance"] = "Performance";
})(exports.KnownRoutingMethods || (exports.KnownRoutingMethods = {}));
/** Known values of {@link AbusePenaltyAction} that the service accepts. */
exports.KnownAbusePenaltyAction = void 0;
(function (KnownAbusePenaltyAction) {
    /** Throttle */
    KnownAbusePenaltyAction["Throttle"] = "Throttle";
    /** Block */
    KnownAbusePenaltyAction["Block"] = "Block";
})(exports.KnownAbusePenaltyAction || (exports.KnownAbusePenaltyAction = {}));
/** Known values of {@link ResourceSkuRestrictionsReasonCode} that the service accepts. */
exports.KnownResourceSkuRestrictionsReasonCode = void 0;
(function (KnownResourceSkuRestrictionsReasonCode) {
    /** QuotaId */
    KnownResourceSkuRestrictionsReasonCode["QuotaId"] = "QuotaId";
    /** NotAvailableForSubscription */
    KnownResourceSkuRestrictionsReasonCode["NotAvailableForSubscription"] = "NotAvailableForSubscription";
})(exports.KnownResourceSkuRestrictionsReasonCode || (exports.KnownResourceSkuRestrictionsReasonCode = {}));
/** Known values of {@link UnitType} that the service accepts. */
exports.KnownUnitType = void 0;
(function (KnownUnitType) {
    /** Count */
    KnownUnitType["Count"] = "Count";
    /** Bytes */
    KnownUnitType["Bytes"] = "Bytes";
    /** Seconds */
    KnownUnitType["Seconds"] = "Seconds";
    /** Percent */
    KnownUnitType["Percent"] = "Percent";
    /** CountPerSecond */
    KnownUnitType["CountPerSecond"] = "CountPerSecond";
    /** BytesPerSecond */
    KnownUnitType["BytesPerSecond"] = "BytesPerSecond";
    /** Milliseconds */
    KnownUnitType["Milliseconds"] = "Milliseconds";
})(exports.KnownUnitType || (exports.KnownUnitType = {}));
/** Known values of {@link QuotaUsageStatus} that the service accepts. */
exports.KnownQuotaUsageStatus = void 0;
(function (KnownQuotaUsageStatus) {
    /** Included */
    KnownQuotaUsageStatus["Included"] = "Included";
    /** Blocked */
    KnownQuotaUsageStatus["Blocked"] = "Blocked";
    /** InOverage */
    KnownQuotaUsageStatus["InOverage"] = "InOverage";
    /** Unknown */
    KnownQuotaUsageStatus["Unknown"] = "Unknown";
})(exports.KnownQuotaUsageStatus || (exports.KnownQuotaUsageStatus = {}));
/** Known values of {@link ModelLifecycleStatus} that the service accepts. */
exports.KnownModelLifecycleStatus = void 0;
(function (KnownModelLifecycleStatus) {
    /** GenerallyAvailable */
    KnownModelLifecycleStatus["GenerallyAvailable"] = "GenerallyAvailable";
    /** Preview */
    KnownModelLifecycleStatus["Preview"] = "Preview";
})(exports.KnownModelLifecycleStatus || (exports.KnownModelLifecycleStatus = {}));
/** Known values of {@link Origin} that the service accepts. */
exports.KnownOrigin = void 0;
(function (KnownOrigin) {
    /** User */
    KnownOrigin["User"] = "user";
    /** System */
    KnownOrigin["System"] = "system";
    /** UserSystem */
    KnownOrigin["UserSystem"] = "user,system";
})(exports.KnownOrigin || (exports.KnownOrigin = {}));
/** Known values of {@link ActionType} that the service accepts. */
exports.KnownActionType = void 0;
(function (KnownActionType) {
    /** Internal */
    KnownActionType["Internal"] = "Internal";
})(exports.KnownActionType || (exports.KnownActionType = {}));
/** Known values of {@link HostingModel} that the service accepts. */
exports.KnownHostingModel = void 0;
(function (KnownHostingModel) {
    /** Web */
    KnownHostingModel["Web"] = "Web";
    /** ConnectedContainer */
    KnownHostingModel["ConnectedContainer"] = "ConnectedContainer";
    /** DisconnectedContainer */
    KnownHostingModel["DisconnectedContainer"] = "DisconnectedContainer";
    /** ProvisionedWeb */
    KnownHostingModel["ProvisionedWeb"] = "ProvisionedWeb";
})(exports.KnownHostingModel || (exports.KnownHostingModel = {}));
/** Known values of {@link DeploymentProvisioningState} that the service accepts. */
exports.KnownDeploymentProvisioningState = void 0;
(function (KnownDeploymentProvisioningState) {
    /** Accepted */
    KnownDeploymentProvisioningState["Accepted"] = "Accepted";
    /** Creating */
    KnownDeploymentProvisioningState["Creating"] = "Creating";
    /** Deleting */
    KnownDeploymentProvisioningState["Deleting"] = "Deleting";
    /** Moving */
    KnownDeploymentProvisioningState["Moving"] = "Moving";
    /** Failed */
    KnownDeploymentProvisioningState["Failed"] = "Failed";
    /** Succeeded */
    KnownDeploymentProvisioningState["Succeeded"] = "Succeeded";
    /** Disabled */
    KnownDeploymentProvisioningState["Disabled"] = "Disabled";
    /** Canceled */
    KnownDeploymentProvisioningState["Canceled"] = "Canceled";
})(exports.KnownDeploymentProvisioningState || (exports.KnownDeploymentProvisioningState = {}));
/** Known values of {@link DeploymentScaleType} that the service accepts. */
exports.KnownDeploymentScaleType = void 0;
(function (KnownDeploymentScaleType) {
    /** Standard */
    KnownDeploymentScaleType["Standard"] = "Standard";
    /** Manual */
    KnownDeploymentScaleType["Manual"] = "Manual";
})(exports.KnownDeploymentScaleType || (exports.KnownDeploymentScaleType = {}));
/** Known values of {@link DeploymentModelVersionUpgradeOption} that the service accepts. */
exports.KnownDeploymentModelVersionUpgradeOption = void 0;
(function (KnownDeploymentModelVersionUpgradeOption) {
    /** OnceNewDefaultVersionAvailable */
    KnownDeploymentModelVersionUpgradeOption["OnceNewDefaultVersionAvailable"] = "OnceNewDefaultVersionAvailable";
    /** OnceCurrentVersionExpired */
    KnownDeploymentModelVersionUpgradeOption["OnceCurrentVersionExpired"] = "OnceCurrentVersionExpired";
    /** NoAutoUpgrade */
    KnownDeploymentModelVersionUpgradeOption["NoAutoUpgrade"] = "NoAutoUpgrade";
})(exports.KnownDeploymentModelVersionUpgradeOption || (exports.KnownDeploymentModelVersionUpgradeOption = {}));
/** Known values of {@link CommitmentPlanProvisioningState} that the service accepts. */
exports.KnownCommitmentPlanProvisioningState = void 0;
(function (KnownCommitmentPlanProvisioningState) {
    /** Accepted */
    KnownCommitmentPlanProvisioningState["Accepted"] = "Accepted";
    /** Creating */
    KnownCommitmentPlanProvisioningState["Creating"] = "Creating";
    /** Deleting */
    KnownCommitmentPlanProvisioningState["Deleting"] = "Deleting";
    /** Moving */
    KnownCommitmentPlanProvisioningState["Moving"] = "Moving";
    /** Failed */
    KnownCommitmentPlanProvisioningState["Failed"] = "Failed";
    /** Succeeded */
    KnownCommitmentPlanProvisioningState["Succeeded"] = "Succeeded";
    /** Canceled */
    KnownCommitmentPlanProvisioningState["Canceled"] = "Canceled";
})(exports.KnownCommitmentPlanProvisioningState || (exports.KnownCommitmentPlanProvisioningState = {}));

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const Sku = {
    type: {
        name: "Composite",
        className: "Sku",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            tier: {
                serializedName: "tier",
                type: {
                    name: "String"
                }
            },
            size: {
                serializedName: "size",
                type: {
                    name: "String"
                }
            },
            family: {
                serializedName: "family",
                type: {
                    name: "String"
                }
            },
            capacity: {
                serializedName: "capacity",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const Identity = {
    type: {
        name: "Composite",
        className: "Identity",
        modelProperties: {
            type: {
                serializedName: "type",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "None",
                        "SystemAssigned",
                        "UserAssigned",
                        "SystemAssigned, UserAssigned"
                    ]
                }
            },
            tenantId: {
                serializedName: "tenantId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            principalId: {
                serializedName: "principalId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            userAssignedIdentities: {
                serializedName: "userAssignedIdentities",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Composite", className: "UserAssignedIdentity" }
                    }
                }
            }
        }
    }
};
const UserAssignedIdentity = {
    type: {
        name: "Composite",
        className: "UserAssignedIdentity",
        modelProperties: {
            principalId: {
                serializedName: "principalId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            clientId: {
                serializedName: "clientId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SystemData = {
    type: {
        name: "Composite",
        className: "SystemData",
        modelProperties: {
            createdBy: {
                serializedName: "createdBy",
                type: {
                    name: "String"
                }
            },
            createdByType: {
                serializedName: "createdByType",
                type: {
                    name: "String"
                }
            },
            createdAt: {
                serializedName: "createdAt",
                type: {
                    name: "DateTime"
                }
            },
            lastModifiedBy: {
                serializedName: "lastModifiedBy",
                type: {
                    name: "String"
                }
            },
            lastModifiedByType: {
                serializedName: "lastModifiedByType",
                type: {
                    name: "String"
                }
            },
            lastModifiedAt: {
                serializedName: "lastModifiedAt",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const AccountProperties = {
    type: {
        name: "Composite",
        className: "AccountProperties",
        modelProperties: {
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            endpoint: {
                serializedName: "endpoint",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            internalId: {
                serializedName: "internalId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            capabilities: {
                serializedName: "capabilities",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SkuCapability"
                        }
                    }
                }
            },
            isMigrated: {
                serializedName: "isMigrated",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            migrationToken: {
                serializedName: "migrationToken",
                type: {
                    name: "String"
                }
            },
            skuChangeInfo: {
                serializedName: "skuChangeInfo",
                type: {
                    name: "Composite",
                    className: "SkuChangeInfo"
                }
            },
            customSubDomainName: {
                serializedName: "customSubDomainName",
                type: {
                    name: "String"
                }
            },
            networkAcls: {
                serializedName: "networkAcls",
                type: {
                    name: "Composite",
                    className: "NetworkRuleSet"
                }
            },
            encryption: {
                serializedName: "encryption",
                type: {
                    name: "Composite",
                    className: "Encryption"
                }
            },
            userOwnedStorage: {
                serializedName: "userOwnedStorage",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "UserOwnedStorage"
                        }
                    }
                }
            },
            privateEndpointConnections: {
                serializedName: "privateEndpointConnections",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrivateEndpointConnection"
                        }
                    }
                }
            },
            publicNetworkAccess: {
                serializedName: "publicNetworkAccess",
                type: {
                    name: "String"
                }
            },
            apiProperties: {
                serializedName: "apiProperties",
                type: {
                    name: "Composite",
                    className: "ApiProperties"
                }
            },
            dateCreated: {
                serializedName: "dateCreated",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            callRateLimit: {
                serializedName: "callRateLimit",
                type: {
                    name: "Composite",
                    className: "CallRateLimit"
                }
            },
            dynamicThrottlingEnabled: {
                serializedName: "dynamicThrottlingEnabled",
                type: {
                    name: "Boolean"
                }
            },
            quotaLimit: {
                serializedName: "quotaLimit",
                type: {
                    name: "Composite",
                    className: "QuotaLimit"
                }
            },
            restrictOutboundNetworkAccess: {
                serializedName: "restrictOutboundNetworkAccess",
                type: {
                    name: "Boolean"
                }
            },
            allowedFqdnList: {
                serializedName: "allowedFqdnList",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            disableLocalAuth: {
                serializedName: "disableLocalAuth",
                type: {
                    name: "Boolean"
                }
            },
            endpoints: {
                serializedName: "endpoints",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            restore: {
                serializedName: "restore",
                type: {
                    name: "Boolean"
                }
            },
            deletionDate: {
                serializedName: "deletionDate",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            scheduledPurgeDate: {
                serializedName: "scheduledPurgeDate",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            locations: {
                serializedName: "locations",
                type: {
                    name: "Composite",
                    className: "MultiRegionSettings"
                }
            },
            commitmentPlanAssociations: {
                serializedName: "commitmentPlanAssociations",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CommitmentPlanAssociation"
                        }
                    }
                }
            },
            abusePenalty: {
                serializedName: "abusePenalty",
                type: {
                    name: "Composite",
                    className: "AbusePenalty"
                }
            }
        }
    }
};
const SkuCapability = {
    type: {
        name: "Composite",
        className: "SkuCapability",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SkuChangeInfo = {
    type: {
        name: "Composite",
        className: "SkuChangeInfo",
        modelProperties: {
            countOfDowngrades: {
                serializedName: "countOfDowngrades",
                type: {
                    name: "Number"
                }
            },
            countOfUpgradesAfterDowngrades: {
                serializedName: "countOfUpgradesAfterDowngrades",
                type: {
                    name: "Number"
                }
            },
            lastChangeDate: {
                serializedName: "lastChangeDate",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const NetworkRuleSet = {
    type: {
        name: "Composite",
        className: "NetworkRuleSet",
        modelProperties: {
            defaultAction: {
                serializedName: "defaultAction",
                type: {
                    name: "String"
                }
            },
            ipRules: {
                serializedName: "ipRules",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "IpRule"
                        }
                    }
                }
            },
            virtualNetworkRules: {
                serializedName: "virtualNetworkRules",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "VirtualNetworkRule"
                        }
                    }
                }
            }
        }
    }
};
const IpRule = {
    type: {
        name: "Composite",
        className: "IpRule",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const VirtualNetworkRule = {
    type: {
        name: "Composite",
        className: "VirtualNetworkRule",
        modelProperties: {
            id: {
                serializedName: "id",
                required: true,
                type: {
                    name: "String"
                }
            },
            state: {
                serializedName: "state",
                type: {
                    name: "String"
                }
            },
            ignoreMissingVnetServiceEndpoint: {
                serializedName: "ignoreMissingVnetServiceEndpoint",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const Encryption = {
    type: {
        name: "Composite",
        className: "Encryption",
        modelProperties: {
            keyVaultProperties: {
                serializedName: "keyVaultProperties",
                type: {
                    name: "Composite",
                    className: "KeyVaultProperties"
                }
            },
            keySource: {
                defaultValue: "Microsoft.KeyVault",
                serializedName: "keySource",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const KeyVaultProperties = {
    type: {
        name: "Composite",
        className: "KeyVaultProperties",
        modelProperties: {
            keyName: {
                serializedName: "keyName",
                type: {
                    name: "String"
                }
            },
            keyVersion: {
                serializedName: "keyVersion",
                type: {
                    name: "String"
                }
            },
            keyVaultUri: {
                serializedName: "keyVaultUri",
                type: {
                    name: "String"
                }
            },
            identityClientId: {
                serializedName: "identityClientId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const UserOwnedStorage = {
    type: {
        name: "Composite",
        className: "UserOwnedStorage",
        modelProperties: {
            resourceId: {
                serializedName: "resourceId",
                type: {
                    name: "String"
                }
            },
            identityClientId: {
                serializedName: "identityClientId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateEndpointConnectionProperties = {
    type: {
        name: "Composite",
        className: "PrivateEndpointConnectionProperties",
        modelProperties: {
            privateEndpoint: {
                serializedName: "privateEndpoint",
                type: {
                    name: "Composite",
                    className: "PrivateEndpoint"
                }
            },
            privateLinkServiceConnectionState: {
                serializedName: "privateLinkServiceConnectionState",
                type: {
                    name: "Composite",
                    className: "PrivateLinkServiceConnectionState"
                }
            },
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            groupIds: {
                serializedName: "groupIds",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const PrivateEndpoint = {
    type: {
        name: "Composite",
        className: "PrivateEndpoint",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateLinkServiceConnectionState = {
    type: {
        name: "Composite",
        className: "PrivateLinkServiceConnectionState",
        modelProperties: {
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            actionsRequired: {
                serializedName: "actionsRequired",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Resource = {
    type: {
        name: "Composite",
        className: "Resource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ApiProperties = {
    type: {
        name: "Composite",
        className: "ApiProperties",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            qnaRuntimeEndpoint: {
                serializedName: "qnaRuntimeEndpoint",
                type: {
                    name: "String"
                }
            },
            qnaAzureSearchEndpointKey: {
                serializedName: "qnaAzureSearchEndpointKey",
                type: {
                    name: "String"
                }
            },
            qnaAzureSearchEndpointId: {
                serializedName: "qnaAzureSearchEndpointId",
                type: {
                    name: "String"
                }
            },
            statisticsEnabled: {
                serializedName: "statisticsEnabled",
                type: {
                    name: "Boolean"
                }
            },
            eventHubConnectionString: {
                constraints: {
                    Pattern: new RegExp("^( *)Endpoint=sb:\\/\\/(.*);( *)SharedAccessKeyName=(.*);( *)SharedAccessKey=(.*)$"),
                    MaxLength: 1000
                },
                serializedName: "eventHubConnectionString",
                type: {
                    name: "String"
                }
            },
            storageAccountConnectionString: {
                constraints: {
                    Pattern: new RegExp("^(( *)DefaultEndpointsProtocol=(http|https)( *);( *))?AccountName=(.*)AccountKey=(.*)EndpointSuffix=(.*)$"),
                    MaxLength: 1000
                },
                serializedName: "storageAccountConnectionString",
                type: {
                    name: "String"
                }
            },
            aadClientId: {
                constraints: {
                    MaxLength: 500
                },
                serializedName: "aadClientId",
                type: {
                    name: "String"
                }
            },
            aadTenantId: {
                constraints: {
                    MaxLength: 500
                },
                serializedName: "aadTenantId",
                type: {
                    name: "String"
                }
            },
            superUser: {
                constraints: {
                    MaxLength: 500
                },
                serializedName: "superUser",
                type: {
                    name: "String"
                }
            },
            websiteName: {
                constraints: {
                    MaxLength: 500
                },
                serializedName: "websiteName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CallRateLimit = {
    type: {
        name: "Composite",
        className: "CallRateLimit",
        modelProperties: {
            count: {
                serializedName: "count",
                type: {
                    name: "Number"
                }
            },
            renewalPeriod: {
                serializedName: "renewalPeriod",
                type: {
                    name: "Number"
                }
            },
            rules: {
                serializedName: "rules",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ThrottlingRule"
                        }
                    }
                }
            }
        }
    }
};
const ThrottlingRule = {
    type: {
        name: "Composite",
        className: "ThrottlingRule",
        modelProperties: {
            key: {
                serializedName: "key",
                type: {
                    name: "String"
                }
            },
            renewalPeriod: {
                serializedName: "renewalPeriod",
                type: {
                    name: "Number"
                }
            },
            count: {
                serializedName: "count",
                type: {
                    name: "Number"
                }
            },
            minCount: {
                serializedName: "minCount",
                type: {
                    name: "Number"
                }
            },
            dynamicThrottlingEnabled: {
                serializedName: "dynamicThrottlingEnabled",
                type: {
                    name: "Boolean"
                }
            },
            matchPatterns: {
                serializedName: "matchPatterns",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RequestMatchPattern"
                        }
                    }
                }
            }
        }
    }
};
const RequestMatchPattern = {
    type: {
        name: "Composite",
        className: "RequestMatchPattern",
        modelProperties: {
            path: {
                serializedName: "path",
                type: {
                    name: "String"
                }
            },
            method: {
                serializedName: "method",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const QuotaLimit = {
    type: {
        name: "Composite",
        className: "QuotaLimit",
        modelProperties: {
            count: {
                serializedName: "count",
                type: {
                    name: "Number"
                }
            },
            renewalPeriod: {
                serializedName: "renewalPeriod",
                type: {
                    name: "Number"
                }
            },
            rules: {
                serializedName: "rules",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ThrottlingRule"
                        }
                    }
                }
            }
        }
    }
};
const MultiRegionSettings = {
    type: {
        name: "Composite",
        className: "MultiRegionSettings",
        modelProperties: {
            routingMethod: {
                serializedName: "routingMethod",
                type: {
                    name: "String"
                }
            },
            regions: {
                serializedName: "regions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RegionSetting"
                        }
                    }
                }
            }
        }
    }
};
const RegionSetting = {
    type: {
        name: "Composite",
        className: "RegionSetting",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Number"
                }
            },
            customsubdomain: {
                serializedName: "customsubdomain",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CommitmentPlanAssociation = {
    type: {
        name: "Composite",
        className: "CommitmentPlanAssociation",
        modelProperties: {
            commitmentPlanId: {
                serializedName: "commitmentPlanId",
                type: {
                    name: "String"
                }
            },
            commitmentPlanLocation: {
                serializedName: "commitmentPlanLocation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AbusePenalty = {
    type: {
        name: "Composite",
        className: "AbusePenalty",
        modelProperties: {
            action: {
                serializedName: "action",
                type: {
                    name: "String"
                }
            },
            rateLimitPercentage: {
                serializedName: "rateLimitPercentage",
                type: {
                    name: "Number"
                }
            },
            expiration: {
                serializedName: "expiration",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const ErrorResponse = {
    type: {
        name: "Composite",
        className: "ErrorResponse",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorDetail"
                }
            }
        }
    }
};
const ErrorDetail = {
    type: {
        name: "Composite",
        className: "ErrorDetail",
        modelProperties: {
            code: {
                serializedName: "code",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorDetail"
                        }
                    }
                }
            },
            additionalInfo: {
                serializedName: "additionalInfo",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorAdditionalInfo"
                        }
                    }
                }
            }
        }
    }
};
const ErrorAdditionalInfo = {
    type: {
        name: "Composite",
        className: "ErrorAdditionalInfo",
        modelProperties: {
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            info: {
                serializedName: "info",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
const AccountListResult = {
    type: {
        name: "Composite",
        className: "AccountListResult",
        modelProperties: {
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Account"
                        }
                    }
                }
            }
        }
    }
};
const ApiKeys = {
    type: {
        name: "Composite",
        className: "ApiKeys",
        modelProperties: {
            key1: {
                serializedName: "key1",
                type: {
                    name: "String"
                }
            },
            key2: {
                serializedName: "key2",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RegenerateKeyParameters = {
    type: {
        name: "Composite",
        className: "RegenerateKeyParameters",
        modelProperties: {
            keyName: {
                serializedName: "keyName",
                required: true,
                type: {
                    name: "Enum",
                    allowedValues: ["Key1", "Key2"]
                }
            }
        }
    }
};
const ResourceSkuListResult = {
    type: {
        name: "Composite",
        className: "ResourceSkuListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResourceSku"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ResourceSku = {
    type: {
        name: "Composite",
        className: "ResourceSku",
        modelProperties: {
            resourceType: {
                serializedName: "resourceType",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            tier: {
                serializedName: "tier",
                type: {
                    name: "String"
                }
            },
            kind: {
                serializedName: "kind",
                type: {
                    name: "String"
                }
            },
            locations: {
                serializedName: "locations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            restrictions: {
                serializedName: "restrictions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResourceSkuRestrictions"
                        }
                    }
                }
            }
        }
    }
};
const ResourceSkuRestrictions = {
    type: {
        name: "Composite",
        className: "ResourceSkuRestrictions",
        modelProperties: {
            type: {
                serializedName: "type",
                type: {
                    name: "Enum",
                    allowedValues: ["Location", "Zone"]
                }
            },
            values: {
                serializedName: "values",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            restrictionInfo: {
                serializedName: "restrictionInfo",
                type: {
                    name: "Composite",
                    className: "ResourceSkuRestrictionInfo"
                }
            },
            reasonCode: {
                serializedName: "reasonCode",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ResourceSkuRestrictionInfo = {
    type: {
        name: "Composite",
        className: "ResourceSkuRestrictionInfo",
        modelProperties: {
            locations: {
                serializedName: "locations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            zones: {
                serializedName: "zones",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const AccountSkuListResult = {
    type: {
        name: "Composite",
        className: "AccountSkuListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AccountSku"
                        }
                    }
                }
            }
        }
    }
};
const AccountSku = {
    type: {
        name: "Composite",
        className: "AccountSku",
        modelProperties: {
            resourceType: {
                serializedName: "resourceType",
                type: {
                    name: "String"
                }
            },
            sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "Sku"
                }
            }
        }
    }
};
const UsageListResult = {
    type: {
        name: "Composite",
        className: "UsageListResult",
        modelProperties: {
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Usage"
                        }
                    }
                }
            }
        }
    }
};
const Usage = {
    type: {
        name: "Composite",
        className: "Usage",
        modelProperties: {
            unit: {
                serializedName: "unit",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "Composite",
                    className: "MetricName"
                }
            },
            quotaPeriod: {
                serializedName: "quotaPeriod",
                type: {
                    name: "String"
                }
            },
            limit: {
                serializedName: "limit",
                type: {
                    name: "Number"
                }
            },
            currentValue: {
                serializedName: "currentValue",
                type: {
                    name: "Number"
                }
            },
            nextResetTime: {
                serializedName: "nextResetTime",
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MetricName = {
    type: {
        name: "Composite",
        className: "MetricName",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "String"
                }
            },
            localizedValue: {
                serializedName: "localizedValue",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AccountModelListResult = {
    type: {
        name: "Composite",
        className: "AccountModelListResult",
        modelProperties: {
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AccountModel"
                        }
                    }
                }
            }
        }
    }
};
const DeploymentModel = {
    type: {
        name: "Composite",
        className: "DeploymentModel",
        modelProperties: {
            format: {
                serializedName: "format",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "version",
                type: {
                    name: "String"
                }
            },
            source: {
                serializedName: "source",
                type: {
                    name: "String"
                }
            },
            callRateLimit: {
                serializedName: "callRateLimit",
                type: {
                    name: "Composite",
                    className: "CallRateLimit"
                }
            }
        }
    }
};
const ModelSku = {
    type: {
        name: "Composite",
        className: "ModelSku",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            usageName: {
                serializedName: "usageName",
                type: {
                    name: "String"
                }
            },
            deprecationDate: {
                serializedName: "deprecationDate",
                type: {
                    name: "DateTime"
                }
            },
            capacity: {
                serializedName: "capacity",
                type: {
                    name: "Composite",
                    className: "CapacityConfig"
                }
            },
            rateLimits: {
                serializedName: "rateLimits",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CallRateLimit"
                        }
                    }
                }
            }
        }
    }
};
const CapacityConfig = {
    type: {
        name: "Composite",
        className: "CapacityConfig",
        modelProperties: {
            minimum: {
                serializedName: "minimum",
                type: {
                    name: "Number"
                }
            },
            maximum: {
                serializedName: "maximum",
                type: {
                    name: "Number"
                }
            },
            step: {
                serializedName: "step",
                type: {
                    name: "Number"
                }
            },
            default: {
                serializedName: "default",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const ModelDeprecationInfo = {
    type: {
        name: "Composite",
        className: "ModelDeprecationInfo",
        modelProperties: {
            fineTune: {
                serializedName: "fineTune",
                type: {
                    name: "String"
                }
            },
            inference: {
                serializedName: "inference",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationListResult = {
    type: {
        name: "Composite",
        className: "OperationListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Operation"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Operation = {
    type: {
        name: "Composite",
        className: "Operation",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            isDataAction: {
                serializedName: "isDataAction",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            display: {
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "OperationDisplay"
                }
            },
            origin: {
                serializedName: "origin",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            actionType: {
                serializedName: "actionType",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationDisplay = {
    type: {
        name: "Composite",
        className: "OperationDisplay",
        modelProperties: {
            provider: {
                serializedName: "provider",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "resource",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CheckSkuAvailabilityParameter = {
    type: {
        name: "Composite",
        className: "CheckSkuAvailabilityParameter",
        modelProperties: {
            skus: {
                serializedName: "skus",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            kind: {
                serializedName: "kind",
                required: true,
                type: {
                    name: "String"
                }
            },
            typeParam: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SkuAvailabilityListResult = {
    type: {
        name: "Composite",
        className: "SkuAvailabilityListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SkuAvailability"
                        }
                    }
                }
            }
        }
    }
};
const SkuAvailability = {
    type: {
        name: "Composite",
        className: "SkuAvailability",
        modelProperties: {
            kind: {
                serializedName: "kind",
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            skuName: {
                serializedName: "skuName",
                type: {
                    name: "String"
                }
            },
            skuAvailable: {
                serializedName: "skuAvailable",
                type: {
                    name: "Boolean"
                }
            },
            reason: {
                serializedName: "reason",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CommitmentTierListResult = {
    type: {
        name: "Composite",
        className: "CommitmentTierListResult",
        modelProperties: {
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CommitmentTier"
                        }
                    }
                }
            }
        }
    }
};
const CommitmentTier = {
    type: {
        name: "Composite",
        className: "CommitmentTier",
        modelProperties: {
            kind: {
                serializedName: "kind",
                type: {
                    name: "String"
                }
            },
            skuName: {
                serializedName: "skuName",
                type: {
                    name: "String"
                }
            },
            hostingModel: {
                serializedName: "hostingModel",
                type: {
                    name: "String"
                }
            },
            planType: {
                serializedName: "planType",
                type: {
                    name: "String"
                }
            },
            tier: {
                serializedName: "tier",
                type: {
                    name: "String"
                }
            },
            maxCount: {
                serializedName: "maxCount",
                type: {
                    name: "Number"
                }
            },
            quota: {
                serializedName: "quota",
                type: {
                    name: "Composite",
                    className: "CommitmentQuota"
                }
            },
            cost: {
                serializedName: "cost",
                type: {
                    name: "Composite",
                    className: "CommitmentCost"
                }
            }
        }
    }
};
const CommitmentQuota = {
    type: {
        name: "Composite",
        className: "CommitmentQuota",
        modelProperties: {
            quantity: {
                serializedName: "quantity",
                type: {
                    name: "Number"
                }
            },
            unit: {
                serializedName: "unit",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CommitmentCost = {
    type: {
        name: "Composite",
        className: "CommitmentCost",
        modelProperties: {
            commitmentMeterId: {
                serializedName: "commitmentMeterId",
                type: {
                    name: "String"
                }
            },
            overageMeterId: {
                serializedName: "overageMeterId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ModelListResult = {
    type: {
        name: "Composite",
        className: "ModelListResult",
        modelProperties: {
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Model"
                        }
                    }
                }
            }
        }
    }
};
const Model = {
    type: {
        name: "Composite",
        className: "Model",
        modelProperties: {
            model: {
                serializedName: "model",
                type: {
                    name: "Composite",
                    className: "AccountModel"
                }
            },
            kind: {
                serializedName: "kind",
                type: {
                    name: "String"
                }
            },
            skuName: {
                serializedName: "skuName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CheckDomainAvailabilityParameter = {
    type: {
        name: "Composite",
        className: "CheckDomainAvailabilityParameter",
        modelProperties: {
            subdomainName: {
                serializedName: "subdomainName",
                required: true,
                type: {
                    name: "String"
                }
            },
            typeParam: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            kind: {
                serializedName: "kind",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DomainAvailability = {
    type: {
        name: "Composite",
        className: "DomainAvailability",
        modelProperties: {
            isSubdomainAvailable: {
                serializedName: "isSubdomainAvailable",
                type: {
                    name: "Boolean"
                }
            },
            reason: {
                serializedName: "reason",
                type: {
                    name: "String"
                }
            },
            subdomainName: {
                serializedName: "subdomainName",
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            kind: {
                serializedName: "kind",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateEndpointConnectionListResult = {
    type: {
        name: "Composite",
        className: "PrivateEndpointConnectionListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrivateEndpointConnection"
                        }
                    }
                }
            }
        }
    }
};
const PrivateLinkResourceListResult = {
    type: {
        name: "Composite",
        className: "PrivateLinkResourceListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrivateLinkResource"
                        }
                    }
                }
            }
        }
    }
};
const PrivateLinkResourceProperties = {
    type: {
        name: "Composite",
        className: "PrivateLinkResourceProperties",
        modelProperties: {
            groupId: {
                serializedName: "groupId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            requiredMembers: {
                serializedName: "requiredMembers",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            requiredZoneNames: {
                serializedName: "requiredZoneNames",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            displayName: {
                serializedName: "displayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DeploymentListResult = {
    type: {
        name: "Composite",
        className: "DeploymentListResult",
        modelProperties: {
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Deployment"
                        }
                    }
                }
            }
        }
    }
};
const DeploymentProperties = {
    type: {
        name: "Composite",
        className: "DeploymentProperties",
        modelProperties: {
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            model: {
                serializedName: "model",
                type: {
                    name: "Composite",
                    className: "DeploymentModel"
                }
            },
            scaleSettings: {
                serializedName: "scaleSettings",
                type: {
                    name: "Composite",
                    className: "DeploymentScaleSettings"
                }
            },
            capabilities: {
                serializedName: "capabilities",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            raiPolicyName: {
                serializedName: "raiPolicyName",
                type: {
                    name: "String"
                }
            },
            callRateLimit: {
                serializedName: "callRateLimit",
                type: {
                    name: "Composite",
                    className: "CallRateLimit"
                }
            },
            rateLimits: {
                serializedName: "rateLimits",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ThrottlingRule"
                        }
                    }
                }
            },
            versionUpgradeOption: {
                serializedName: "versionUpgradeOption",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DeploymentScaleSettings = {
    type: {
        name: "Composite",
        className: "DeploymentScaleSettings",
        modelProperties: {
            scaleType: {
                serializedName: "scaleType",
                type: {
                    name: "String"
                }
            },
            capacity: {
                serializedName: "capacity",
                type: {
                    name: "Number"
                }
            },
            activeCapacity: {
                serializedName: "activeCapacity",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const CommitmentPlanListResult = {
    type: {
        name: "Composite",
        className: "CommitmentPlanListResult",
        modelProperties: {
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CommitmentPlan"
                        }
                    }
                }
            }
        }
    }
};
const CommitmentPlanProperties = {
    type: {
        name: "Composite",
        className: "CommitmentPlanProperties",
        modelProperties: {
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            commitmentPlanGuid: {
                serializedName: "commitmentPlanGuid",
                type: {
                    name: "String"
                }
            },
            hostingModel: {
                serializedName: "hostingModel",
                type: {
                    name: "String"
                }
            },
            planType: {
                serializedName: "planType",
                type: {
                    name: "String"
                }
            },
            current: {
                serializedName: "current",
                type: {
                    name: "Composite",
                    className: "CommitmentPeriod"
                }
            },
            autoRenew: {
                serializedName: "autoRenew",
                type: {
                    name: "Boolean"
                }
            },
            next: {
                serializedName: "next",
                type: {
                    name: "Composite",
                    className: "CommitmentPeriod"
                }
            },
            last: {
                serializedName: "last",
                type: {
                    name: "Composite",
                    className: "CommitmentPeriod"
                }
            },
            provisioningIssues: {
                serializedName: "provisioningIssues",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const CommitmentPeriod = {
    type: {
        name: "Composite",
        className: "CommitmentPeriod",
        modelProperties: {
            tier: {
                serializedName: "tier",
                type: {
                    name: "String"
                }
            },
            count: {
                serializedName: "count",
                type: {
                    name: "Number"
                }
            },
            quota: {
                serializedName: "quota",
                type: {
                    name: "Composite",
                    className: "CommitmentQuota"
                }
            },
            startDate: {
                serializedName: "startDate",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            endDate: {
                serializedName: "endDate",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PatchResourceTags = {
    type: {
        name: "Composite",
        className: "PatchResourceTags",
        modelProperties: {
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }
        }
    }
};
const CommitmentPlanAccountAssociationListResult = {
    type: {
        name: "Composite",
        className: "CommitmentPlanAccountAssociationListResult",
        modelProperties: {
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CommitmentPlanAccountAssociation"
                        }
                    }
                }
            }
        }
    }
};
const AzureEntityResource = {
    type: {
        name: "Composite",
        className: "AzureEntityResource",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { etag: {
                serializedName: "etag",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const PrivateLinkResource = {
    type: {
        name: "Composite",
        className: "PrivateLinkResource",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "PrivateLinkResourceProperties"
                }
            } })
    }
};
const ProxyResource = {
    type: {
        name: "Composite",
        className: "ProxyResource",
        modelProperties: Object.assign({}, Resource.type.modelProperties)
    }
};
const AccountModel = {
    type: {
        name: "Composite",
        className: "AccountModel",
        modelProperties: Object.assign(Object.assign({}, DeploymentModel.type.modelProperties), { baseModel: {
                serializedName: "baseModel",
                type: {
                    name: "Composite",
                    className: "DeploymentModel"
                }
            }, isDefaultVersion: {
                serializedName: "isDefaultVersion",
                type: {
                    name: "Boolean"
                }
            }, skus: {
                serializedName: "skus",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ModelSku"
                        }
                    }
                }
            }, maxCapacity: {
                serializedName: "maxCapacity",
                type: {
                    name: "Number"
                }
            }, capabilities: {
                serializedName: "capabilities",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }, finetuneCapabilities: {
                serializedName: "finetuneCapabilities",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }, deprecation: {
                serializedName: "deprecation",
                type: {
                    name: "Composite",
                    className: "ModelDeprecationInfo"
                }
            }, lifecycleStatus: {
                serializedName: "lifecycleStatus",
                type: {
                    name: "String"
                }
            }, systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            } })
    }
};
const PatchResourceTagsAndSku = {
    type: {
        name: "Composite",
        className: "PatchResourceTagsAndSku",
        modelProperties: Object.assign(Object.assign({}, PatchResourceTags.type.modelProperties), { sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "Sku"
                }
            } })
    }
};
const PrivateEndpointConnection = {
    type: {
        name: "Composite",
        className: "PrivateEndpointConnection",
        modelProperties: Object.assign(Object.assign({}, AzureEntityResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "PrivateEndpointConnectionProperties"
                }
            }, systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            } })
    }
};
const Account = {
    type: {
        name: "Composite",
        className: "Account",
        modelProperties: Object.assign(Object.assign({}, AzureEntityResource.type.modelProperties), { kind: {
                serializedName: "kind",
                type: {
                    name: "String"
                }
            }, sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "Sku"
                }
            }, identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "Identity"
                }
            }, systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }, location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }, properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "AccountProperties"
                }
            } })
    }
};
const Deployment = {
    type: {
        name: "Composite",
        className: "Deployment",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "Sku"
                }
            }, systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, etag: {
                serializedName: "etag",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "DeploymentProperties"
                }
            } })
    }
};
const CommitmentPlan = {
    type: {
        name: "Composite",
        className: "CommitmentPlan",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, etag: {
                serializedName: "etag",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, kind: {
                serializedName: "kind",
                type: {
                    name: "String"
                }
            }, sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "Sku"
                }
            }, tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }, location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }, properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "CommitmentPlanProperties"
                }
            } })
    }
};
const CommitmentPlanAccountAssociation = {
    type: {
        name: "Composite",
        className: "CommitmentPlanAccountAssociation",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, etag: {
                serializedName: "etag",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, accountId: {
                serializedName: "properties.accountId",
                type: {
                    name: "String"
                }
            } })
    }
};
const CommitmentPlansUpdatePlanHeaders = {
    type: {
        name: "Composite",
        className: "CommitmentPlansUpdatePlanHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CommitmentPlansDeletePlanHeaders = {
    type: {
        name: "Composite",
        className: "CommitmentPlansDeletePlanHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CommitmentPlansDeleteAssociationHeaders = {
    type: {
        name: "Composite",
        className: "CommitmentPlansDeleteAssociationHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }
        }
    }
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    Sku: Sku,
    Identity: Identity,
    UserAssignedIdentity: UserAssignedIdentity,
    SystemData: SystemData,
    AccountProperties: AccountProperties,
    SkuCapability: SkuCapability,
    SkuChangeInfo: SkuChangeInfo,
    NetworkRuleSet: NetworkRuleSet,
    IpRule: IpRule,
    VirtualNetworkRule: VirtualNetworkRule,
    Encryption: Encryption,
    KeyVaultProperties: KeyVaultProperties,
    UserOwnedStorage: UserOwnedStorage,
    PrivateEndpointConnectionProperties: PrivateEndpointConnectionProperties,
    PrivateEndpoint: PrivateEndpoint,
    PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
    Resource: Resource,
    ApiProperties: ApiProperties,
    CallRateLimit: CallRateLimit,
    ThrottlingRule: ThrottlingRule,
    RequestMatchPattern: RequestMatchPattern,
    QuotaLimit: QuotaLimit,
    MultiRegionSettings: MultiRegionSettings,
    RegionSetting: RegionSetting,
    CommitmentPlanAssociation: CommitmentPlanAssociation,
    AbusePenalty: AbusePenalty,
    ErrorResponse: ErrorResponse,
    ErrorDetail: ErrorDetail,
    ErrorAdditionalInfo: ErrorAdditionalInfo,
    AccountListResult: AccountListResult,
    ApiKeys: ApiKeys,
    RegenerateKeyParameters: RegenerateKeyParameters,
    ResourceSkuListResult: ResourceSkuListResult,
    ResourceSku: ResourceSku,
    ResourceSkuRestrictions: ResourceSkuRestrictions,
    ResourceSkuRestrictionInfo: ResourceSkuRestrictionInfo,
    AccountSkuListResult: AccountSkuListResult,
    AccountSku: AccountSku,
    UsageListResult: UsageListResult,
    Usage: Usage,
    MetricName: MetricName,
    AccountModelListResult: AccountModelListResult,
    DeploymentModel: DeploymentModel,
    ModelSku: ModelSku,
    CapacityConfig: CapacityConfig,
    ModelDeprecationInfo: ModelDeprecationInfo,
    OperationListResult: OperationListResult,
    Operation: Operation,
    OperationDisplay: OperationDisplay,
    CheckSkuAvailabilityParameter: CheckSkuAvailabilityParameter,
    SkuAvailabilityListResult: SkuAvailabilityListResult,
    SkuAvailability: SkuAvailability,
    CommitmentTierListResult: CommitmentTierListResult,
    CommitmentTier: CommitmentTier,
    CommitmentQuota: CommitmentQuota,
    CommitmentCost: CommitmentCost,
    ModelListResult: ModelListResult,
    Model: Model,
    CheckDomainAvailabilityParameter: CheckDomainAvailabilityParameter,
    DomainAvailability: DomainAvailability,
    PrivateEndpointConnectionListResult: PrivateEndpointConnectionListResult,
    PrivateLinkResourceListResult: PrivateLinkResourceListResult,
    PrivateLinkResourceProperties: PrivateLinkResourceProperties,
    DeploymentListResult: DeploymentListResult,
    DeploymentProperties: DeploymentProperties,
    DeploymentScaleSettings: DeploymentScaleSettings,
    CommitmentPlanListResult: CommitmentPlanListResult,
    CommitmentPlanProperties: CommitmentPlanProperties,
    CommitmentPeriod: CommitmentPeriod,
    PatchResourceTags: PatchResourceTags,
    CommitmentPlanAccountAssociationListResult: CommitmentPlanAccountAssociationListResult,
    AzureEntityResource: AzureEntityResource,
    PrivateLinkResource: PrivateLinkResource,
    ProxyResource: ProxyResource,
    AccountModel: AccountModel,
    PatchResourceTagsAndSku: PatchResourceTagsAndSku,
    PrivateEndpointConnection: PrivateEndpointConnection,
    Account: Account,
    Deployment: Deployment,
    CommitmentPlan: CommitmentPlan,
    CommitmentPlanAccountAssociation: CommitmentPlanAccountAssociation,
    CommitmentPlansUpdatePlanHeaders: CommitmentPlansUpdatePlanHeaders,
    CommitmentPlansDeletePlanHeaders: CommitmentPlansDeletePlanHeaders,
    CommitmentPlansDeleteAssociationHeaders: CommitmentPlansDeleteAssociationHeaders
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const account = {
    parameterPath: "account",
    mapper: Account
};
const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const accountName = {
    parameterPath: "accountName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9_.-]*$"),
            MaxLength: 64,
            MinLength: 2
        },
        serializedName: "accountName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2023-05-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const filter = {
    parameterPath: ["options", "filter"],
    mapper: {
        serializedName: "$filter",
        type: {
            name: "String"
        }
    }
};
const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const location = {
    parameterPath: "location",
    mapper: {
        serializedName: "location",
        required: true,
        type: {
            name: "String"
        }
    }
};
const privateEndpointConnectionName = {
    parameterPath: "privateEndpointConnectionName",
    mapper: {
        serializedName: "privateEndpointConnectionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const properties = {
    parameterPath: "properties",
    mapper: PrivateEndpointConnection
};
const deploymentName = {
    parameterPath: "deploymentName",
    mapper: {
        serializedName: "deploymentName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const deployment = {
    parameterPath: "deployment",
    mapper: Deployment
};
const commitmentPlanName = {
    parameterPath: "commitmentPlanName",
    mapper: {
        serializedName: "commitmentPlanName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const commitmentPlan = {
    parameterPath: "commitmentPlan",
    mapper: CommitmentPlan
};
const commitmentPlanName1 = {
    parameterPath: "commitmentPlanName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9_.-]*$")
        },
        serializedName: "commitmentPlanName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const commitmentPlan1 = {
    parameterPath: "commitmentPlan",
    mapper: PatchResourceTagsAndSku
};
const commitmentPlanAssociationName = {
    parameterPath: "commitmentPlanAssociationName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9_.-]*$")
        },
        serializedName: "commitmentPlanAssociationName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const association = {
    parameterPath: "association",
    mapper: CommitmentPlanAccountAssociation
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
function createLroSpec(inputs) {
    const { args, spec, sendOperationFn } = inputs;
    return {
        requestMethod: spec.httpMethod,
        requestPath: spec.path,
        sendInitialRequest: () => sendOperationFn(args, spec),
        sendPollRequest: (path, options) => {
            const restSpec = tslib.__rest(spec, ["requestBody"]);
            return sendOperationFn(args, Object.assign(Object.assign({}, restSpec), { httpMethod: "GET", path, abortSignal: options === null || options === void 0 ? void 0 : options.abortSignal }));
        }
    };
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Accounts operations. */
class AccountsImpl {
    /**
     * Initialize a new instance of the class Accounts class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Returns all the resources of a particular type belonging to a resource group
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName, options) {
        const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByResourceGroupPagingPage(resourceGroupName, options, settings);
            }
        };
    }
    listByResourceGroupPagingPage(resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByResourceGroup(resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByResourceGroupNext(resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByResourceGroupPagingAll(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByResourceGroupPagingPage(resourceGroupName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Returns all the resources of a particular type belonging to a subscription.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_2, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * List available Models for the requested Cognitive Services account
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param options The options parameters.
     */
    listModels(resourceGroupName, accountName, options) {
        const iter = this.listModelsPagingAll(resourceGroupName, accountName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listModelsPagingPage(resourceGroupName, accountName, options, settings);
            }
        };
    }
    listModelsPagingPage(resourceGroupName, accountName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listModelsPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listModels(resourceGroupName, accountName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listModelsNext(resourceGroupName, accountName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listModelsPagingAll(resourceGroupName, accountName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listModelsPagingAll_1() {
            var _a, e_3, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listModelsPagingPage(resourceGroupName, accountName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * Create Cognitive Services Account. Accounts is a resource group wide resource type. It holds the
     * keys for developer to access intelligent APIs. It's also the resource type for billing.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param account The parameters to provide for the created account.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName, accountName, account, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, accountName, account, options },
                spec: createOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create Cognitive Services Account. Accounts is a resource group wide resource type. It holds the
     * keys for developer to access intelligent APIs. It's also the resource type for billing.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param account The parameters to provide for the created account.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName, accountName, account, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreate(resourceGroupName, accountName, account, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Updates a Cognitive Services account
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param account The parameters to provide for the created account.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, accountName, account, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, accountName, account, options },
                spec: updateOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Updates a Cognitive Services account
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param account The parameters to provide for the created account.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, accountName, account, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, accountName, account, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Deletes a Cognitive Services account from the resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, accountName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, accountName, options },
                spec: deleteOperationSpec$3
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes a Cognitive Services account from the resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, accountName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, accountName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Returns a Cognitive Services account specified by the parameters.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param options The options parameters.
     */
    get(resourceGroupName, accountName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, options }, getOperationSpec$4);
    }
    /**
     * Returns all the resources of a particular type belonging to a resource group
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    _listByResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listByResourceGroupOperationSpec);
    }
    /**
     * Returns all the resources of a particular type belonging to a subscription.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$a);
    }
    /**
     * Lists the account keys for the specified Cognitive Services account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param options The options parameters.
     */
    listKeys(resourceGroupName, accountName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, options }, listKeysOperationSpec);
    }
    /**
     * Regenerates the specified account key for the specified Cognitive Services account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param keyName key name to generate (Key1|Key2)
     * @param options The options parameters.
     */
    regenerateKey(resourceGroupName, accountName, keyName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, keyName, options }, regenerateKeyOperationSpec);
    }
    /**
     * List available SKUs for the requested Cognitive Services account
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param options The options parameters.
     */
    listSkus(resourceGroupName, accountName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, options }, listSkusOperationSpec);
    }
    /**
     * Get usages for the requested Cognitive Services account
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param options The options parameters.
     */
    listUsages(resourceGroupName, accountName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, options }, listUsagesOperationSpec);
    }
    /**
     * List available Models for the requested Cognitive Services account
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param options The options parameters.
     */
    _listModels(resourceGroupName, accountName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, options }, listModelsOperationSpec);
    }
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    _listByResourceGroupNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, listByResourceGroupNextOperationSpec);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec$8);
    }
    /**
     * ListModelsNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param nextLink The nextLink from the previous successful call to the ListModels method.
     * @param options The options parameters.
     */
    _listModelsNext(resourceGroupName, accountName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, nextLink, options }, listModelsNextOperationSpec);
    }
}
// Operation Specifications
const serializer$b = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const createOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Account
        },
        201: {
            bodyMapper: Account
        },
        202: {
            bodyMapper: Account
        },
        204: {
            bodyMapper: Account
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: account,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        accountName,
        subscriptionId
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$b
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Account
        },
        201: {
            bodyMapper: Account
        },
        202: {
            bodyMapper: Account
        },
        204: {
            bodyMapper: Account
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: account,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        accountName,
        subscriptionId
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$b
};
const deleteOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        accountName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$b
};
const getOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Account
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        accountName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$b
};
const listByResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AccountListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$b
};
const listOperationSpec$a = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.CognitiveServices/accounts",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AccountListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$b
};
const listKeysOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}/listKeys",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ApiKeys
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        accountName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$b
};
const regenerateKeyOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}/regenerateKey",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ApiKeys
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: {
        parameterPath: { keyName: ["keyName"] },
        mapper: Object.assign(Object.assign({}, RegenerateKeyParameters), { required: true })
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        accountName,
        subscriptionId
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$b
};
const listSkusOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}/skus",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AccountSkuListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        accountName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$b
};
const listUsagesOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}/usages",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: UsageListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion, filter],
    urlParameters: [
        $host,
        resourceGroupName,
        accountName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$b
};
const listModelsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}/models",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AccountModelListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        accountName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$b
};
const listByResourceGroupNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AccountListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$b
};
const listNextOperationSpec$8 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AccountListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$b
};
const listModelsNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AccountModelListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        resourceGroupName,
        accountName,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$b
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing DeletedAccounts operations. */
class DeletedAccountsImpl {
    /**
     * Initialize a new instance of the class DeletedAccounts class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Returns all the resources of a particular type belonging to a subscription.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Returns a Cognitive Services account specified by the parameters.
     * @param location Resource location.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param options The options parameters.
     */
    get(location, resourceGroupName, accountName, options) {
        return this.client.sendOperationRequest({ location, resourceGroupName, accountName, options }, getOperationSpec$3);
    }
    /**
     * Deletes a Cognitive Services account from the resource group.
     * @param location Resource location.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param options The options parameters.
     */
    beginPurge(location, resourceGroupName, accountName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { location, resourceGroupName, accountName, options },
                spec: purgeOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes a Cognitive Services account from the resource group.
     * @param location Resource location.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param options The options parameters.
     */
    beginPurgeAndWait(location, resourceGroupName, accountName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginPurge(location, resourceGroupName, accountName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Returns all the resources of a particular type belonging to a subscription.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$9);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec$7);
    }
}
// Operation Specifications
const serializer$a = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.CognitiveServices/locations/{location}/resourceGroups/{resourceGroupName}/deletedAccounts/{accountName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Account
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        accountName,
        subscriptionId,
        location
    ],
    headerParameters: [accept],
    serializer: serializer$a
};
const purgeOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.CognitiveServices/locations/{location}/resourceGroups/{resourceGroupName}/deletedAccounts/{accountName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        accountName,
        subscriptionId,
        location
    ],
    headerParameters: [accept],
    serializer: serializer$a
};
const listOperationSpec$9 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.CognitiveServices/deletedAccounts",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AccountListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$a
};
const listNextOperationSpec$7 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AccountListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$a
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ResourceSkus operations. */
class ResourceSkusImpl {
    /**
     * Initialize a new instance of the class ResourceSkus class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets the list of Microsoft.CognitiveServices SKUs available for your Subscription.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets the list of Microsoft.CognitiveServices SKUs available for your Subscription.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$8);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec$6);
    }
}
// Operation Specifications
const serializer$9 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$8 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.CognitiveServices/skus",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ResourceSkuListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$9
};
const listNextOperationSpec$6 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ResourceSkuListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$9
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Usages operations. */
class UsagesImpl {
    /**
     * Initialize a new instance of the class Usages class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get usages for the requested subscription
     * @param location Resource location.
     * @param options The options parameters.
     */
    list(location, options) {
        const iter = this.listPagingAll(location, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(location, options, settings);
            }
        };
    }
    listPagingPage(location, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(location, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(location, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(location, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(location, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get usages for the requested subscription
     * @param location Resource location.
     * @param options The options parameters.
     */
    _list(location, options) {
        return this.client.sendOperationRequest({ location, options }, listOperationSpec$7);
    }
    /**
     * ListNext
     * @param location Resource location.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(location, nextLink, options) {
        return this.client.sendOperationRequest({ location, nextLink, options }, listNextOperationSpec$5);
    }
}
// Operation Specifications
const serializer$8 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$7 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.CognitiveServices/locations/{location}/usages",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: UsageListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion, filter],
    urlParameters: [
        $host,
        subscriptionId,
        location
    ],
    headerParameters: [accept],
    serializer: serializer$8
};
const listNextOperationSpec$5 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: UsageListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        nextLink,
        location
    ],
    headerParameters: [accept],
    serializer: serializer$8
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Operations operations. */
class OperationsImpl {
    /**
     * Initialize a new instance of the class Operations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all the available Cognitive Services account operations.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists all the available Cognitive Services account operations.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$6);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec$4);
    }
}
// Operation Specifications
const serializer$7 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$6 = {
    path: "/providers/Microsoft.CognitiveServices/operations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer: serializer$7
};
const listNextOperationSpec$4 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [$host, nextLink],
    headerParameters: [accept],
    serializer: serializer$7
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing CommitmentTiers operations. */
class CommitmentTiersImpl {
    /**
     * Initialize a new instance of the class CommitmentTiers class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List Commitment Tiers.
     * @param location Resource location.
     * @param options The options parameters.
     */
    list(location, options) {
        const iter = this.listPagingAll(location, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(location, options, settings);
            }
        };
    }
    listPagingPage(location, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(location, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(location, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(location, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(location, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List Commitment Tiers.
     * @param location Resource location.
     * @param options The options parameters.
     */
    _list(location, options) {
        return this.client.sendOperationRequest({ location, options }, listOperationSpec$5);
    }
    /**
     * ListNext
     * @param location Resource location.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(location, nextLink, options) {
        return this.client.sendOperationRequest({ location, nextLink, options }, listNextOperationSpec$3);
    }
}
// Operation Specifications
const serializer$6 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.CognitiveServices/locations/{location}/commitmentTiers",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CommitmentTierListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        location
    ],
    headerParameters: [accept],
    serializer: serializer$6
};
const listNextOperationSpec$3 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CommitmentTierListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        nextLink,
        location
    ],
    headerParameters: [accept],
    serializer: serializer$6
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Models operations. */
class ModelsImpl {
    /**
     * Initialize a new instance of the class Models class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List Models.
     * @param location Resource location.
     * @param options The options parameters.
     */
    list(location, options) {
        const iter = this.listPagingAll(location, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(location, options, settings);
            }
        };
    }
    listPagingPage(location, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(location, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(location, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(location, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(location, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List Models.
     * @param location Resource location.
     * @param options The options parameters.
     */
    _list(location, options) {
        return this.client.sendOperationRequest({ location, options }, listOperationSpec$4);
    }
    /**
     * ListNext
     * @param location Resource location.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(location, nextLink, options) {
        return this.client.sendOperationRequest({ location, nextLink, options }, listNextOperationSpec$2);
    }
}
// Operation Specifications
const serializer$5 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.CognitiveServices/locations/{location}/models",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ModelListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        location
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const listNextOperationSpec$2 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ModelListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        nextLink,
        location
    ],
    headerParameters: [accept],
    serializer: serializer$5
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing PrivateEndpointConnections operations. */
class PrivateEndpointConnectionsImpl {
    /**
     * Initialize a new instance of the class PrivateEndpointConnections class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets the private endpoint connections associated with the Cognitive Services account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param options The options parameters.
     */
    list(resourceGroupName, accountName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, options }, listOperationSpec$3);
    }
    /**
     * Gets the specified private endpoint connection associated with the Cognitive Services account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the
     *                                      Cognitive Services Account
     * @param options The options parameters.
     */
    get(resourceGroupName, accountName, privateEndpointConnectionName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            accountName,
            privateEndpointConnectionName,
            options
        }, getOperationSpec$2);
    }
    /**
     * Update the state of specified private endpoint connection associated with the Cognitive Services
     * account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the
     *                                      Cognitive Services Account
     * @param properties The private endpoint connection properties.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, accountName, privateEndpointConnectionName, properties, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    accountName,
                    privateEndpointConnectionName,
                    properties,
                    options
                },
                spec: createOrUpdateOperationSpec$2
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Update the state of specified private endpoint connection associated with the Cognitive Services
     * account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the
     *                                      Cognitive Services Account
     * @param properties The private endpoint connection properties.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, accountName, privateEndpointConnectionName, properties, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, accountName, privateEndpointConnectionName, properties, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Deletes the specified private endpoint connection associated with the Cognitive Services account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the
     *                                      Cognitive Services Account
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, accountName, privateEndpointConnectionName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    accountName,
                    privateEndpointConnectionName,
                    options
                },
                spec: deleteOperationSpec$2
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes the specified private endpoint connection associated with the Cognitive Services account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the
     *                                      Cognitive Services Account
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, accountName, privateEndpointConnectionName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, accountName, privateEndpointConnectionName, options);
            return poller.pollUntilDone();
        });
    }
}
// Operation Specifications
const serializer$4 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}/privateEndpointConnections",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PrivateEndpointConnectionListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        accountName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const getOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}/privateEndpointConnections/{privateEndpointConnectionName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PrivateEndpointConnection
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        accountName,
        subscriptionId,
        privateEndpointConnectionName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const createOrUpdateOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}/privateEndpointConnections/{privateEndpointConnectionName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: PrivateEndpointConnection
        },
        201: {
            bodyMapper: PrivateEndpointConnection
        },
        202: {
            bodyMapper: PrivateEndpointConnection
        },
        204: {
            bodyMapper: PrivateEndpointConnection
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: properties,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        accountName,
        subscriptionId,
        privateEndpointConnectionName
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$4
};
const deleteOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}/privateEndpointConnections/{privateEndpointConnectionName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        accountName,
        subscriptionId,
        privateEndpointConnectionName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing PrivateLinkResources operations. */
class PrivateLinkResourcesImpl {
    /**
     * Initialize a new instance of the class PrivateLinkResources class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets the private link resources that need to be created for a Cognitive Services account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param options The options parameters.
     */
    list(resourceGroupName, accountName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, options }, listOperationSpec$2);
    }
}
// Operation Specifications
const serializer$3 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}/privateLinkResources",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PrivateLinkResourceListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        accountName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$3
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Deployments operations. */
class DeploymentsImpl {
    /**
     * Initialize a new instance of the class Deployments class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets the deployments associated with the Cognitive Services account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param options The options parameters.
     */
    list(resourceGroupName, accountName, options) {
        const iter = this.listPagingAll(resourceGroupName, accountName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, accountName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, accountName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, accountName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, accountName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, accountName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(resourceGroupName, accountName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets the deployments associated with the Cognitive Services account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param options The options parameters.
     */
    _list(resourceGroupName, accountName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, options }, listOperationSpec$1);
    }
    /**
     * Gets the specified deployments associated with the Cognitive Services account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param deploymentName The name of the deployment associated with the Cognitive Services Account
     * @param options The options parameters.
     */
    get(resourceGroupName, accountName, deploymentName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, deploymentName, options }, getOperationSpec$1);
    }
    /**
     * Update the state of specified deployments associated with the Cognitive Services account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param deploymentName The name of the deployment associated with the Cognitive Services Account
     * @param deployment The deployment properties.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, accountName, deploymentName, deployment, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    accountName,
                    deploymentName,
                    deployment,
                    options
                },
                spec: createOrUpdateOperationSpec$1
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Update the state of specified deployments associated with the Cognitive Services account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param deploymentName The name of the deployment associated with the Cognitive Services Account
     * @param deployment The deployment properties.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, accountName, deploymentName, deployment, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, accountName, deploymentName, deployment, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Deletes the specified deployment associated with the Cognitive Services account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param deploymentName The name of the deployment associated with the Cognitive Services Account
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, accountName, deploymentName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, accountName, deploymentName, options },
                spec: deleteOperationSpec$1
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes the specified deployment associated with the Cognitive Services account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param deploymentName The name of the deployment associated with the Cognitive Services Account
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, accountName, deploymentName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, accountName, deploymentName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, accountName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, nextLink, options }, listNextOperationSpec$1);
    }
}
// Operation Specifications
const serializer$2 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}/deployments",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DeploymentListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        accountName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const getOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}/deployments/{deploymentName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Deployment
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        accountName,
        subscriptionId,
        deploymentName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const createOrUpdateOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}/deployments/{deploymentName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Deployment
        },
        201: {
            bodyMapper: Deployment
        },
        202: {
            bodyMapper: Deployment
        },
        204: {
            bodyMapper: Deployment
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: deployment,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        accountName,
        subscriptionId,
        deploymentName
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$2
};
const deleteOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}/deployments/{deploymentName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        accountName,
        subscriptionId,
        deploymentName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DeploymentListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        resourceGroupName,
        accountName,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$2
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing CommitmentPlans operations. */
class CommitmentPlansImpl {
    /**
     * Initialize a new instance of the class CommitmentPlans class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets the commitmentPlans associated with the Cognitive Services account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param options The options parameters.
     */
    list(resourceGroupName, accountName, options) {
        const iter = this.listPagingAll(resourceGroupName, accountName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, accountName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, accountName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, accountName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, accountName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, accountName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(resourceGroupName, accountName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Returns all the resources of a particular type belonging to a resource group
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listPlansByResourceGroup(resourceGroupName, options) {
        const iter = this.listPlansByResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPlansByResourceGroupPagingPage(resourceGroupName, options, settings);
            }
        };
    }
    listPlansByResourceGroupPagingPage(resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPlansByResourceGroupPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listPlansByResourceGroup(resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listPlansByResourceGroupNext(resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPlansByResourceGroupPagingAll(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPlansByResourceGroupPagingAll_1() {
            var _a, e_2, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPlansByResourceGroupPagingPage(resourceGroupName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Returns all the resources of a particular type belonging to a subscription.
     * @param options The options parameters.
     */
    listPlansBySubscription(options) {
        const iter = this.listPlansBySubscriptionPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPlansBySubscriptionPagingPage(options, settings);
            }
        };
    }
    listPlansBySubscriptionPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPlansBySubscriptionPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listPlansBySubscription(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listPlansBySubscriptionNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPlansBySubscriptionPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPlansBySubscriptionPagingAll_1() {
            var _a, e_3, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPlansBySubscriptionPagingPage(options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * Gets the associations of the Cognitive Services commitment plan.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param commitmentPlanName The name of the commitmentPlan associated with the Cognitive Services
     *                           Account
     * @param options The options parameters.
     */
    listAssociations(resourceGroupName, commitmentPlanName, options) {
        const iter = this.listAssociationsPagingAll(resourceGroupName, commitmentPlanName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listAssociationsPagingPage(resourceGroupName, commitmentPlanName, options, settings);
            }
        };
    }
    listAssociationsPagingPage(resourceGroupName, commitmentPlanName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listAssociationsPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listAssociations(resourceGroupName, commitmentPlanName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listAssociationsNext(resourceGroupName, commitmentPlanName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listAssociationsPagingAll(resourceGroupName, commitmentPlanName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listAssociationsPagingAll_1() {
            var _a, e_4, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listAssociationsPagingPage(resourceGroupName, commitmentPlanName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_4) throw e_4.error; }
            }
        });
    }
    /**
     * Gets the commitmentPlans associated with the Cognitive Services account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param options The options parameters.
     */
    _list(resourceGroupName, accountName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, options }, listOperationSpec);
    }
    /**
     * Gets the specified commitmentPlans associated with the Cognitive Services account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param commitmentPlanName The name of the commitmentPlan associated with the Cognitive Services
     *                           Account
     * @param options The options parameters.
     */
    get(resourceGroupName, accountName, commitmentPlanName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, commitmentPlanName, options }, getOperationSpec);
    }
    /**
     * Update the state of specified commitmentPlans associated with the Cognitive Services account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param commitmentPlanName The name of the commitmentPlan associated with the Cognitive Services
     *                           Account
     * @param commitmentPlan The commitmentPlan properties.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, accountName, commitmentPlanName, commitmentPlan, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            accountName,
            commitmentPlanName,
            commitmentPlan,
            options
        }, createOrUpdateOperationSpec);
    }
    /**
     * Deletes the specified commitmentPlan associated with the Cognitive Services account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param commitmentPlanName The name of the commitmentPlan associated with the Cognitive Services
     *                           Account
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, accountName, commitmentPlanName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, accountName, commitmentPlanName, options },
                spec: deleteOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes the specified commitmentPlan associated with the Cognitive Services account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param commitmentPlanName The name of the commitmentPlan associated with the Cognitive Services
     *                           Account
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, accountName, commitmentPlanName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, accountName, commitmentPlanName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Create Cognitive Services commitment plan.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param commitmentPlanName The name of the commitmentPlan associated with the Cognitive Services
     *                           Account
     * @param commitmentPlan The parameters to provide for the created commitment plan.
     * @param options The options parameters.
     */
    beginCreateOrUpdatePlan(resourceGroupName, commitmentPlanName, commitmentPlan, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, commitmentPlanName, commitmentPlan, options },
                spec: createOrUpdatePlanOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create Cognitive Services commitment plan.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param commitmentPlanName The name of the commitmentPlan associated with the Cognitive Services
     *                           Account
     * @param commitmentPlan The parameters to provide for the created commitment plan.
     * @param options The options parameters.
     */
    beginCreateOrUpdatePlanAndWait(resourceGroupName, commitmentPlanName, commitmentPlan, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdatePlan(resourceGroupName, commitmentPlanName, commitmentPlan, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Create Cognitive Services commitment plan.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param commitmentPlanName The name of the commitmentPlan associated with the Cognitive Services
     *                           Account
     * @param commitmentPlan The parameters to provide for the created commitment plan.
     * @param options The options parameters.
     */
    beginUpdatePlan(resourceGroupName, commitmentPlanName, commitmentPlan, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, commitmentPlanName, commitmentPlan, options },
                spec: updatePlanOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create Cognitive Services commitment plan.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param commitmentPlanName The name of the commitmentPlan associated with the Cognitive Services
     *                           Account
     * @param commitmentPlan The parameters to provide for the created commitment plan.
     * @param options The options parameters.
     */
    beginUpdatePlanAndWait(resourceGroupName, commitmentPlanName, commitmentPlan, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdatePlan(resourceGroupName, commitmentPlanName, commitmentPlan, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Deletes a Cognitive Services commitment plan from the resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param commitmentPlanName The name of the commitmentPlan associated with the Cognitive Services
     *                           Account
     * @param options The options parameters.
     */
    beginDeletePlan(resourceGroupName, commitmentPlanName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, commitmentPlanName, options },
                spec: deletePlanOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes a Cognitive Services commitment plan from the resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param commitmentPlanName The name of the commitmentPlan associated with the Cognitive Services
     *                           Account
     * @param options The options parameters.
     */
    beginDeletePlanAndWait(resourceGroupName, commitmentPlanName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDeletePlan(resourceGroupName, commitmentPlanName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Returns a Cognitive Services commitment plan specified by the parameters.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param commitmentPlanName The name of the commitmentPlan associated with the Cognitive Services
     *                           Account
     * @param options The options parameters.
     */
    getPlan(resourceGroupName, commitmentPlanName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, commitmentPlanName, options }, getPlanOperationSpec);
    }
    /**
     * Returns all the resources of a particular type belonging to a resource group
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    _listPlansByResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listPlansByResourceGroupOperationSpec);
    }
    /**
     * Returns all the resources of a particular type belonging to a subscription.
     * @param options The options parameters.
     */
    _listPlansBySubscription(options) {
        return this.client.sendOperationRequest({ options }, listPlansBySubscriptionOperationSpec);
    }
    /**
     * Gets the associations of the Cognitive Services commitment plan.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param commitmentPlanName The name of the commitmentPlan associated with the Cognitive Services
     *                           Account
     * @param options The options parameters.
     */
    _listAssociations(resourceGroupName, commitmentPlanName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, commitmentPlanName, options }, listAssociationsOperationSpec);
    }
    /**
     * Gets the association of the Cognitive Services commitment plan.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param commitmentPlanName The name of the commitmentPlan associated with the Cognitive Services
     *                           Account
     * @param commitmentPlanAssociationName The name of the commitment plan association with the Cognitive
     *                                      Services Account
     * @param options The options parameters.
     */
    getAssociation(resourceGroupName, commitmentPlanName, commitmentPlanAssociationName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            commitmentPlanName,
            commitmentPlanAssociationName,
            options
        }, getAssociationOperationSpec);
    }
    /**
     * Create or update the association of the Cognitive Services commitment plan.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param commitmentPlanName The name of the commitmentPlan associated with the Cognitive Services
     *                           Account
     * @param commitmentPlanAssociationName The name of the commitment plan association with the Cognitive
     *                                      Services Account
     * @param association The commitmentPlan properties.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAssociation(resourceGroupName, commitmentPlanName, commitmentPlanAssociationName, association, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    commitmentPlanName,
                    commitmentPlanAssociationName,
                    association,
                    options
                },
                spec: createOrUpdateAssociationOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create or update the association of the Cognitive Services commitment plan.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param commitmentPlanName The name of the commitmentPlan associated with the Cognitive Services
     *                           Account
     * @param commitmentPlanAssociationName The name of the commitment plan association with the Cognitive
     *                                      Services Account
     * @param association The commitmentPlan properties.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAssociationAndWait(resourceGroupName, commitmentPlanName, commitmentPlanAssociationName, association, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdateAssociation(resourceGroupName, commitmentPlanName, commitmentPlanAssociationName, association, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Deletes the association of the Cognitive Services commitment plan.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param commitmentPlanName The name of the commitmentPlan associated with the Cognitive Services
     *                           Account
     * @param commitmentPlanAssociationName The name of the commitment plan association with the Cognitive
     *                                      Services Account
     * @param options The options parameters.
     */
    beginDeleteAssociation(resourceGroupName, commitmentPlanName, commitmentPlanAssociationName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    commitmentPlanName,
                    commitmentPlanAssociationName,
                    options
                },
                spec: deleteAssociationOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes the association of the Cognitive Services commitment plan.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param commitmentPlanName The name of the commitmentPlan associated with the Cognitive Services
     *                           Account
     * @param commitmentPlanAssociationName The name of the commitment plan association with the Cognitive
     *                                      Services Account
     * @param options The options parameters.
     */
    beginDeleteAssociationAndWait(resourceGroupName, commitmentPlanName, commitmentPlanAssociationName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDeleteAssociation(resourceGroupName, commitmentPlanName, commitmentPlanAssociationName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, accountName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, nextLink, options }, listNextOperationSpec);
    }
    /**
     * ListPlansByResourceGroupNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nextLink The nextLink from the previous successful call to the ListPlansByResourceGroup
     *                 method.
     * @param options The options parameters.
     */
    _listPlansByResourceGroupNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, listPlansByResourceGroupNextOperationSpec);
    }
    /**
     * ListPlansBySubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the ListPlansBySubscription
     *                 method.
     * @param options The options parameters.
     */
    _listPlansBySubscriptionNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listPlansBySubscriptionNextOperationSpec);
    }
    /**
     * ListAssociationsNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param commitmentPlanName The name of the commitmentPlan associated with the Cognitive Services
     *                           Account
     * @param nextLink The nextLink from the previous successful call to the ListAssociations method.
     * @param options The options parameters.
     */
    _listAssociationsNext(resourceGroupName, commitmentPlanName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, commitmentPlanName, nextLink, options }, listAssociationsNextOperationSpec);
    }
}
// Operation Specifications
const serializer$1 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}/commitmentPlans",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CommitmentPlanListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        accountName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}/commitmentPlans/{commitmentPlanName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CommitmentPlan
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        accountName,
        subscriptionId,
        commitmentPlanName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}/commitmentPlans/{commitmentPlanName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: CommitmentPlan
        },
        201: {
            bodyMapper: CommitmentPlan
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: commitmentPlan,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        accountName,
        subscriptionId,
        commitmentPlanName
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$1
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}/commitmentPlans/{commitmentPlanName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        accountName,
        subscriptionId,
        commitmentPlanName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const createOrUpdatePlanOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/commitmentPlans/{commitmentPlanName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: CommitmentPlan
        },
        201: {
            bodyMapper: CommitmentPlan
        },
        202: {
            bodyMapper: CommitmentPlan
        },
        204: {
            bodyMapper: CommitmentPlan
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: commitmentPlan,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        commitmentPlanName1
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$1
};
const updatePlanOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/commitmentPlans/{commitmentPlanName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: CommitmentPlan
        },
        201: {
            bodyMapper: CommitmentPlan
        },
        202: {
            bodyMapper: CommitmentPlan
        },
        204: {
            bodyMapper: CommitmentPlan
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: commitmentPlan1,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        commitmentPlanName1
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$1
};
const deletePlanOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/commitmentPlans/{commitmentPlanName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        commitmentPlanName1
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const getPlanOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/commitmentPlans/{commitmentPlanName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CommitmentPlan
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        commitmentPlanName1
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listPlansByResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/commitmentPlans",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CommitmentPlanListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listPlansBySubscriptionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.CognitiveServices/commitmentPlans",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CommitmentPlanListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$1
};
const listAssociationsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/commitmentPlans/{commitmentPlanName}/accountAssociations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CommitmentPlanAccountAssociationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        commitmentPlanName1
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const getAssociationOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/commitmentPlans/{commitmentPlanName}/accountAssociations/{commitmentPlanAssociationName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CommitmentPlanAccountAssociation
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        commitmentPlanName1,
        commitmentPlanAssociationName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const createOrUpdateAssociationOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/commitmentPlans/{commitmentPlanName}/accountAssociations/{commitmentPlanAssociationName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: CommitmentPlanAccountAssociation
        },
        201: {
            bodyMapper: CommitmentPlanAccountAssociation
        },
        202: {
            bodyMapper: CommitmentPlanAccountAssociation
        },
        204: {
            bodyMapper: CommitmentPlanAccountAssociation
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: association,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        commitmentPlanName1,
        commitmentPlanAssociationName
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$1
};
const deleteAssociationOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/commitmentPlans/{commitmentPlanName}/accountAssociations/{commitmentPlanAssociationName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        commitmentPlanName1,
        commitmentPlanAssociationName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CommitmentPlanListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        resourceGroupName,
        accountName,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listPlansByResourceGroupNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CommitmentPlanListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listPlansBySubscriptionNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CommitmentPlanListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listAssociationsNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CommitmentPlanAccountAssociationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        nextLink,
        commitmentPlanName1
    ],
    headerParameters: [accept],
    serializer: serializer$1
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class CognitiveServicesManagementClient extends coreClient__namespace.ServiceClient {
    /**
     * Initializes a new instance of the CognitiveServicesManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials, subscriptionId, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        if (subscriptionId === undefined) {
            throw new Error("'subscriptionId' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-cognitiveservices/7.5.0`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName
            });
            this.pipeline.addPolicy(coreRestPipeline__namespace.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient__namespace.authorizeRequestOnClaimChallenge
                }
            }));
        }
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.apiVersion = options.apiVersion || "2023-05-01";
        this.accounts = new AccountsImpl(this);
        this.deletedAccounts = new DeletedAccountsImpl(this);
        this.resourceSkus = new ResourceSkusImpl(this);
        this.usages = new UsagesImpl(this);
        this.operations = new OperationsImpl(this);
        this.commitmentTiers = new CommitmentTiersImpl(this);
        this.models = new ModelsImpl(this);
        this.privateEndpointConnections = new PrivateEndpointConnectionsImpl(this);
        this.privateLinkResources = new PrivateLinkResourcesImpl(this);
        this.deployments = new DeploymentsImpl(this);
        this.commitmentPlans = new CommitmentPlansImpl(this);
        this.addCustomApiVersionPolicy(options.apiVersion);
    }
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    addCustomApiVersionPolicy(apiVersion) {
        if (!apiVersion) {
            return;
        }
        const apiVersionPolicy = {
            name: "CustomApiVersionPolicy",
            sendRequest(request, next) {
                return tslib.__awaiter(this, void 0, void 0, function* () {
                    const param = request.url.split("?");
                    if (param.length > 1) {
                        const newParams = param[1].split("&").map((item) => {
                            if (item.indexOf("api-version") > -1) {
                                return "api-version=" + apiVersion;
                            }
                            else {
                                return item;
                            }
                        });
                        request.url = param[0] + "?" + newParams.join("&");
                    }
                    return next(request);
                });
            }
        };
        this.pipeline.addPolicy(apiVersionPolicy);
    }
    /**
     * Check available SKUs.
     * @param location Resource location.
     * @param skus The SKU of the resource.
     * @param kind The Kind of the resource.
     * @param typeParam The Type of the resource.
     * @param options The options parameters.
     */
    checkSkuAvailability(location, skus, kind, typeParam, options) {
        return this.sendOperationRequest({ location, skus, kind, typeParam, options }, checkSkuAvailabilityOperationSpec);
    }
    /**
     * Check whether a domain is available.
     * @param subdomainName The subdomain name to use.
     * @param typeParam The Type of the resource.
     * @param options The options parameters.
     */
    checkDomainAvailability(subdomainName, typeParam, options) {
        return this.sendOperationRequest({ subdomainName, typeParam, options }, checkDomainAvailabilityOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const checkSkuAvailabilityOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.CognitiveServices/locations/{location}/checkSkuAvailability",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: SkuAvailabilityListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: {
        parameterPath: { skus: ["skus"], kind: ["kind"], typeParam: ["typeParam"] },
        mapper: Object.assign(Object.assign({}, CheckSkuAvailabilityParameter), { required: true })
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        location
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer
};
const checkDomainAvailabilityOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.CognitiveServices/checkDomainAvailability",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: DomainAvailability
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: {
        parameterPath: {
            subdomainName: ["subdomainName"],
            typeParam: ["typeParam"],
            kind: ["options", "kind"]
        },
        mapper: Object.assign(Object.assign({}, CheckDomainAvailabilityParameter), { required: true })
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer
};

exports.CognitiveServicesManagementClient = CognitiveServicesManagementClient;
exports.getContinuationToken = getContinuationToken;
//# sourceMappingURL=index.js.map
