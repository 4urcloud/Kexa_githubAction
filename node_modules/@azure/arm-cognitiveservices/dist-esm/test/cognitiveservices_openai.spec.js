/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */
import { __asyncValues, __awaiter } from "tslib";
import { env, Recorder, isPlaybackMode, } from "@azure-tools/test-recorder";
import { createTestCredential } from "@azure-tools/test-credential";
import { assert } from "chai";
import { CognitiveServicesManagementClient } from "../src/cognitiveServicesManagementClient";
const replaceableVariables = {
    AZURE_CLIENT_ID: "azure_client_id",
    AZURE_CLIENT_SECRET: "azure_client_secret",
    AZURE_TENANT_ID: "88888888-8888-8888-8888-888888888888",
    SUBSCRIPTION_ID: "azure_subscription_id"
};
const recorderOptions = {
    envSetupForPlayback: replaceableVariables
};
export const testPollingOptions = {
    updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};
describe("CognitiveServices OpenAI test", () => {
    let recorder;
    let subscriptionId;
    let client;
    let location;
    let resourceGroup;
    let accountName;
    let deploymentName;
    beforeEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            recorder = new Recorder(this.currentTest);
            yield recorder.start(recorderOptions);
            subscriptionId = env.SUBSCRIPTION_ID || '';
            // This is an example of how the environment variables are used
            const credential = createTestCredential();
            client = new CognitiveServicesManagementClient(credential, subscriptionId, recorder.configureClientOptions({}));
            location = "West Europe";
            resourceGroup = "openai-shared";
            accountName = "sdk-test-openai-js";
            deploymentName = "text-davince-model";
        });
    });
    afterEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            yield recorder.stop();
        });
    });
    it("should create an OpenAI account for testing", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.accounts.beginCreateAndWait(resourceGroup, accountName, {
                location: location,
                kind: "OpenAI",
                sku: {
                    name: "S0"
                },
                identity: {
                    type: "SystemAssigned"
                }
            });
            assert.equal(res.name, accountName);
        });
    });
    it("should deploy a davinci model in that account", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const deployment = {
                properties: {
                    model: { name: "text-davinci-003", version: "1", format: "OpenAI", },
                }
            };
            const result = yield client.deployments.beginCreateOrUpdateAndWait(resourceGroup, accountName, deploymentName, deployment);
            assert.equal(result.name, deploymentName);
        });
    });
    it("should get an account detail", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.accounts.get(resourceGroup, accountName);
            assert.equal(res.name, accountName);
        });
    });
    it("should list all accounts", function () {
        var _a, e_1, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const resArray = new Array();
            try {
                for (var _d = true, _e = __asyncValues(client.accounts.listByResourceGroup(resourceGroup)), _f; _f = yield _e.next(), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        let item = _c;
                        resArray.push(item);
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
                }
                finally { if (e_1) throw e_1.error; }
            }
            assert.isTrue(resArray.length >= 1);
        });
    });
    it("should list deployments and delete a deployment", function () {
        var _a, e_2, _b, _c, _d, e_3, _e, _f;
        return __awaiter(this, void 0, void 0, function* () {
            const deploymentNames = new Set();
            try {
                for (var _g = true, _h = __asyncValues(client.deployments.list(resourceGroup, accountName)), _j; _j = yield _h.next(), _a = _j.done, !_a;) {
                    _c = _j.value;
                    _g = false;
                    try {
                        let item = _c;
                        deploymentNames.add(item.name);
                    }
                    finally {
                        _g = true;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_g && !_a && (_b = _h.return)) yield _b.call(_h);
                }
                finally { if (e_2) throw e_2.error; }
            }
            assert.isTrue(deploymentNames.has(deploymentName));
            deploymentNames.clear();
            yield client.deployments.beginDeleteAndWait(resourceGroup, accountName, deploymentName);
            try {
                for (var _k = true, _l = __asyncValues(client.deployments.list(resourceGroup, accountName)), _m; _m = yield _l.next(), _d = _m.done, !_d;) {
                    _f = _m.value;
                    _k = false;
                    try {
                        let item = _f;
                        deploymentNames.add(item.name);
                    }
                    finally {
                        _k = true;
                    }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (!_k && !_d && (_e = _l.return)) yield _e.call(_l);
                }
                finally { if (e_3) throw e_3.error; }
            }
            assert.isFalse(deploymentNames.has(deploymentName));
        });
    });
    it("should delete an account", function () {
        var _a, e_4, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            yield client.accounts.beginDeleteAndWait(resourceGroup, accountName);
            const accountNames = new Set();
            try {
                for (var _d = true, _e = __asyncValues(client.accounts.listByResourceGroup(resourceGroup)), _f; _f = yield _e.next(), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        let item = _c;
                        accountNames.add(item.name);
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
                }
                finally { if (e_4) throw e_4.error; }
            }
            assert.isFalse(accountNames.has(accountName));
        });
    });
});
//# sourceMappingURL=cognitiveservices_openai.spec.js.map