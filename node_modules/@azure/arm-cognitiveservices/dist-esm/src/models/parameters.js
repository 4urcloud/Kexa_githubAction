/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { Account as AccountMapper, RegenerateKeyParameters as RegenerateKeyParametersMapper, CheckSkuAvailabilityParameter as CheckSkuAvailabilityParameterMapper, CheckDomainAvailabilityParameter as CheckDomainAvailabilityParameterMapper, PrivateEndpointConnection as PrivateEndpointConnectionMapper, Deployment as DeploymentMapper, CommitmentPlan as CommitmentPlanMapper, PatchResourceTagsAndSku as PatchResourceTagsAndSkuMapper, CommitmentPlanAccountAssociation as CommitmentPlanAccountAssociationMapper } from "../models/mappers";
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export const account = {
    parameterPath: "account",
    mapper: AccountMapper
};
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const accountName = {
    parameterPath: "accountName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9_.-]*$"),
            MaxLength: 64,
            MinLength: 2
        },
        serializedName: "accountName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2023-05-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const keyName = {
    parameterPath: "keyName",
    mapper: RegenerateKeyParametersMapper
};
export const filter = {
    parameterPath: ["options", "filter"],
    mapper: {
        serializedName: "$filter",
        type: {
            name: "String"
        }
    }
};
export const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const location = {
    parameterPath: "location",
    mapper: {
        serializedName: "location",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const skus = {
    parameterPath: "skus",
    mapper: CheckSkuAvailabilityParameterMapper
};
export const kind = {
    parameterPath: "kind",
    mapper: CheckSkuAvailabilityParameterMapper
};
export const typeParam = {
    parameterPath: "typeParam",
    mapper: CheckSkuAvailabilityParameterMapper
};
export const subdomainName = {
    parameterPath: "subdomainName",
    mapper: CheckDomainAvailabilityParameterMapper
};
export const typeParam1 = {
    parameterPath: "typeParam",
    mapper: CheckDomainAvailabilityParameterMapper
};
export const kind1 = {
    parameterPath: ["options", "kind"],
    mapper: CheckDomainAvailabilityParameterMapper
};
export const privateEndpointConnectionName = {
    parameterPath: "privateEndpointConnectionName",
    mapper: {
        serializedName: "privateEndpointConnectionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const properties = {
    parameterPath: "properties",
    mapper: PrivateEndpointConnectionMapper
};
export const deploymentName = {
    parameterPath: "deploymentName",
    mapper: {
        serializedName: "deploymentName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const deployment = {
    parameterPath: "deployment",
    mapper: DeploymentMapper
};
export const commitmentPlanName = {
    parameterPath: "commitmentPlanName",
    mapper: {
        serializedName: "commitmentPlanName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const commitmentPlan = {
    parameterPath: "commitmentPlan",
    mapper: CommitmentPlanMapper
};
export const commitmentPlanName1 = {
    parameterPath: "commitmentPlanName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9_.-]*$")
        },
        serializedName: "commitmentPlanName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const commitmentPlan1 = {
    parameterPath: "commitmentPlan",
    mapper: PatchResourceTagsAndSkuMapper
};
export const commitmentPlanAssociationName = {
    parameterPath: "commitmentPlanAssociationName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9_.-]*$")
        },
        serializedName: "commitmentPlanAssociationName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const association = {
    parameterPath: "association",
    mapper: CommitmentPlanAccountAssociationMapper
};
//# sourceMappingURL=parameters.js.map