import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { PollerLike } from '@azure/core-lro';
import { PollOperationState } from '@azure/core-lro';

/**
 * Defines values for AccessLevel. \
 * {@link KnownAccessLevel} can be used interchangeably with AccessLevel,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **ReadOnly** \
 * **ReadWrite** \
 * **FullAccess**
 */
export declare type AccessLevel = string;

/**
 * Defines values for AccountType. \
 * {@link KnownAccountType} can be used interchangeably with AccountType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **GeneralPurposeStorage** \
 * **BlobStorage**
 */
export declare type AccountType = string;

/** Role Addon */
export declare interface Addon extends ARMBaseModel {
    /** Addon type. */
    kind: AddonType;
    /**
     * Addon type
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
}

/** Collection of all the Role addon on the Azure Stack Edge device. */
export declare interface AddonList {
    /**
     * The Value.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: AddonUnion[];
    /**
     * Link to the next set of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a Addons. */
export declare interface Addons {
    /**
     * Lists all the addons configured in the role.
     * @param deviceName The device name.
     * @param roleName The role name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    listByRole(deviceName: string, roleName: string, resourceGroupName: string, options?: AddonsListByRoleOptionalParams): PagedAsyncIterableIterator<AddonUnion>;
    /**
     * Gets a specific addon by name.
     * @param deviceName The device name.
     * @param roleName The role name.
     * @param addonName The addon name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    get(deviceName: string, roleName: string, addonName: string, resourceGroupName: string, options?: AddonsGetOptionalParams): Promise<AddonsGetResponse>;
    /**
     * Create or update a addon.
     * @param deviceName The device name.
     * @param roleName The role name.
     * @param addonName The addon name.
     * @param resourceGroupName The resource group name.
     * @param addon The addon properties.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(deviceName: string, roleName: string, addonName: string, resourceGroupName: string, addon: AddonUnion, options?: AddonsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<AddonsCreateOrUpdateResponse>, AddonsCreateOrUpdateResponse>>;
    /**
     * Create or update a addon.
     * @param deviceName The device name.
     * @param roleName The role name.
     * @param addonName The addon name.
     * @param resourceGroupName The resource group name.
     * @param addon The addon properties.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(deviceName: string, roleName: string, addonName: string, resourceGroupName: string, addon: AddonUnion, options?: AddonsCreateOrUpdateOptionalParams): Promise<AddonsCreateOrUpdateResponse>;
    /**
     * Deletes the addon on the device.
     * @param deviceName The device name.
     * @param roleName The role name.
     * @param addonName The addon name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    beginDelete(deviceName: string, roleName: string, addonName: string, resourceGroupName: string, options?: AddonsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes the addon on the device.
     * @param deviceName The device name.
     * @param roleName The role name.
     * @param addonName The addon name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    beginDeleteAndWait(deviceName: string, roleName: string, addonName: string, resourceGroupName: string, options?: AddonsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface AddonsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type AddonsCreateOrUpdateResponse = AddonUnion;

/** Optional parameters. */
export declare interface AddonsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface AddonsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type AddonsGetResponse = AddonUnion;

/** Optional parameters. */
export declare interface AddonsListByRoleNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByRoleNext operation. */
export declare type AddonsListByRoleNextResponse = AddonList;

/** Optional parameters. */
export declare interface AddonsListByRoleOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByRole operation. */
export declare type AddonsListByRoleResponse = AddonList;

/**
 * Defines values for AddonState. \
 * {@link KnownAddonState} can be used interchangeably with AddonState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Invalid** \
 * **Creating** \
 * **Created** \
 * **Updating** \
 * **Reconfiguring** \
 * **Failed** \
 * **Deleting**
 */
export declare type AddonState = string;

/**
 * Defines values for AddonType. \
 * {@link KnownAddonType} can be used interchangeably with AddonType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **IotEdge** \
 * **ArcForKubernetes**
 */
export declare type AddonType = string;

export declare type AddonUnion = Addon | ArcAddon | IoTAddon;

/** The shipping address of the customer. */
export declare interface Address {
    /** The address line1. */
    addressLine1?: string;
    /** The address line2. */
    addressLine2?: string;
    /** The address line3. */
    addressLine3?: string;
    /** The postal code. */
    postalCode?: string;
    /** The city name. */
    city?: string;
    /** The state name. */
    state?: string;
    /** The country name. */
    country: string;
}

/** Alert on the data box edge/gateway device. */
export declare interface Alert extends ARMBaseModel {
    /**
     * Alert generated in the resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /**
     * Alert title.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly title?: string;
    /**
     * Alert type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly alertType?: string;
    /**
     * UTC time when the alert appeared.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly appearedAtDateTime?: Date;
    /**
     * Alert recommendation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly recommendation?: string;
    /**
     * Severity of the alert.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly severity?: AlertSeverity;
    /**
     * Error details of the alert.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly errorDetails?: AlertErrorDetails;
    /**
     * Alert details.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly detailedInformation?: {
        [propertyName: string]: string;
    };
}

/** Error details for the alert. */
export declare interface AlertErrorDetails {
    /**
     * Error code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly errorCode?: string;
    /**
     * Error Message.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly errorMessage?: string;
    /**
     * Number of occurrences.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly occurrences?: number;
}

/** Collection of alerts. */
export declare interface AlertList {
    /**
     * The value.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: Alert[];
    /**
     * Link to the next set of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a Alerts. */
export declare interface Alerts {
    /**
     * Gets all the alerts for a Data Box Edge/Data Box Gateway device.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    listByDataBoxEdgeDevice(deviceName: string, resourceGroupName: string, options?: AlertsListByDataBoxEdgeDeviceOptionalParams): PagedAsyncIterableIterator<Alert>;
    /**
     * Gets an alert by name.
     * @param deviceName The device name.
     * @param name The alert name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    get(deviceName: string, name: string, resourceGroupName: string, options?: AlertsGetOptionalParams): Promise<AlertsGetResponse>;
}

/**
 * Defines values for AlertSeverity. \
 * {@link KnownAlertSeverity} can be used interchangeably with AlertSeverity,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Informational** \
 * **Warning** \
 * **Critical**
 */
export declare type AlertSeverity = string;

/** Optional parameters. */
export declare interface AlertsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type AlertsGetResponse = Alert;

/** Optional parameters. */
export declare interface AlertsListByDataBoxEdgeDeviceNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByDataBoxEdgeDeviceNext operation. */
export declare type AlertsListByDataBoxEdgeDeviceNextResponse = AlertList;

/** Optional parameters. */
export declare interface AlertsListByDataBoxEdgeDeviceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByDataBoxEdgeDevice operation. */
export declare type AlertsListByDataBoxEdgeDeviceResponse = AlertList;

/** Arc Addon. */
export declare interface ArcAddon extends Addon {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "ArcForKubernetes";
    /** Arc resource subscription Id */
    subscriptionId: string;
    /** Arc resource group name */
    resourceGroupName: string;
    /** Arc resource Name */
    resourceName: string;
    /** Arc resource location */
    resourceLocation: string;
    /**
     * Arc resource version
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly version?: string;
    /**
     * Host OS supported by the Arc addon.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly hostPlatform?: PlatformType;
    /**
     * Platform where the runtime is hosted.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly hostPlatformType?: HostPlatformType;
    /**
     * Addon Provisioning State
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: AddonState;
}

/** Represents the base class for all object models. */
export declare interface ARMBaseModel {
    /**
     * The path ID that uniquely identifies the object.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The object name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The hierarchical type of the object.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
}

/** Represent the secrets intended for encryption with asymmetric key pair. */
export declare interface AsymmetricEncryptedSecret {
    /** The value of the secret. */
    value: string;
    /** Thumbprint certificate used to encrypt \"Value\". If the value is unencrypted, it will be null. */
    encryptionCertThumbprint?: string;
    /** The algorithm used to encrypt "Value". */
    encryptionAlgorithm: EncryptionAlgorithm;
}

/** Authentication mechanism for IoT devices. */
export declare interface Authentication {
    /** Symmetric key for authentication. */
    symmetricKey?: SymmetricKey;
}

/**
 * Defines values for AuthenticationType. \
 * {@link KnownAuthenticationType} can be used interchangeably with AuthenticationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Invalid** \
 * **AzureActiveDirectory**
 */
export declare type AuthenticationType = string;

/** Interface representing a AvailableSkus. */
export declare interface AvailableSkus {
    /**
     * List all the available Skus and information related to them.
     * @param options The options parameters.
     */
    list(options?: AvailableSkusListOptionalParams): PagedAsyncIterableIterator<DataBoxEdgeSku>;
}

/** Optional parameters. */
export declare interface AvailableSkusListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type AvailableSkusListNextResponse = DataBoxEdgeSkuList;

/** Optional parameters. */
export declare interface AvailableSkusListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type AvailableSkusListResponse = DataBoxEdgeSkuList;

/**
 * Defines values for AzureContainerDataFormat. \
 * {@link KnownAzureContainerDataFormat} can be used interchangeably with AzureContainerDataFormat,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **BlockBlob** \
 * **PageBlob** \
 * **AzureFile**
 */
export declare type AzureContainerDataFormat = string;

/** Azure container mapping of the endpoint. */
export declare interface AzureContainerInfo {
    /** ID of the storage account credential used to access storage. */
    storageAccountCredentialId: string;
    /** Container name (Based on the data format specified, this represents the name of Azure Files/Page blob/Block blob). */
    containerName: string;
    /** Storage format used for the file represented by the share. */
    dataFormat: AzureContainerDataFormat;
}

/** The bandwidth schedule details. */
export declare interface BandwidthSchedule extends ARMBaseModel {
    /**
     * Bandwidth object related to ASE resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** The start time of the schedule in UTC. */
    start: string;
    /** The stop time of the schedule in UTC. */
    stop: string;
    /** The bandwidth rate in Mbps. */
    rateInMbps: number;
    /** The days of the week when this schedule is applicable. */
    days: DayOfWeek[];
}

/** Interface representing a BandwidthSchedules. */
export declare interface BandwidthSchedules {
    /**
     * Gets all the bandwidth schedules for a Data Box Edge/Data Box Gateway device.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    listByDataBoxEdgeDevice(deviceName: string, resourceGroupName: string, options?: BandwidthSchedulesListByDataBoxEdgeDeviceOptionalParams): PagedAsyncIterableIterator<BandwidthSchedule>;
    /**
     * Gets the properties of the specified bandwidth schedule.
     * @param deviceName The device name.
     * @param name The bandwidth schedule name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    get(deviceName: string, name: string, resourceGroupName: string, options?: BandwidthSchedulesGetOptionalParams): Promise<BandwidthSchedulesGetResponse>;
    /**
     * Creates or updates a bandwidth schedule.
     * @param deviceName The device name.
     * @param name The bandwidth schedule name which needs to be added/updated.
     * @param resourceGroupName The resource group name.
     * @param parameters The bandwidth schedule to be added or updated.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(deviceName: string, name: string, resourceGroupName: string, parameters: BandwidthSchedule, options?: BandwidthSchedulesCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<BandwidthSchedulesCreateOrUpdateResponse>, BandwidthSchedulesCreateOrUpdateResponse>>;
    /**
     * Creates or updates a bandwidth schedule.
     * @param deviceName The device name.
     * @param name The bandwidth schedule name which needs to be added/updated.
     * @param resourceGroupName The resource group name.
     * @param parameters The bandwidth schedule to be added or updated.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(deviceName: string, name: string, resourceGroupName: string, parameters: BandwidthSchedule, options?: BandwidthSchedulesCreateOrUpdateOptionalParams): Promise<BandwidthSchedulesCreateOrUpdateResponse>;
    /**
     * Deletes the specified bandwidth schedule.
     * @param deviceName The device name.
     * @param name The bandwidth schedule name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    beginDelete(deviceName: string, name: string, resourceGroupName: string, options?: BandwidthSchedulesDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes the specified bandwidth schedule.
     * @param deviceName The device name.
     * @param name The bandwidth schedule name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    beginDeleteAndWait(deviceName: string, name: string, resourceGroupName: string, options?: BandwidthSchedulesDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface BandwidthSchedulesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type BandwidthSchedulesCreateOrUpdateResponse = BandwidthSchedule;

/** Optional parameters. */
export declare interface BandwidthSchedulesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface BandwidthSchedulesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type BandwidthSchedulesGetResponse = BandwidthSchedule;

/** The collection of bandwidth schedules. */
export declare interface BandwidthSchedulesList {
    /**
     * The list of bandwidth schedules.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: BandwidthSchedule[];
    /**
     * Link to the next set of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Optional parameters. */
export declare interface BandwidthSchedulesListByDataBoxEdgeDeviceNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByDataBoxEdgeDeviceNext operation. */
export declare type BandwidthSchedulesListByDataBoxEdgeDeviceNextResponse = BandwidthSchedulesList;

/** Optional parameters. */
export declare interface BandwidthSchedulesListByDataBoxEdgeDeviceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByDataBoxEdgeDevice operation. */
export declare type BandwidthSchedulesListByDataBoxEdgeDeviceResponse = BandwidthSchedulesList;

/** The mapping between a particular client IP and the type of access client has on the NFS share. */
export declare interface ClientAccessRight {
    /** IP of the client. */
    client: string;
    /** Type of access to be allowed for the client. */
    accessPermission: ClientPermissionType;
}

/**
 * Defines values for ClientPermissionType. \
 * {@link KnownClientPermissionType} can be used interchangeably with ClientPermissionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NoAccess** \
 * **ReadOnly** \
 * **ReadWrite**
 */
export declare type ClientPermissionType = string;

/** CloudEdgeManagementRole role. */
export declare interface CloudEdgeManagementRole extends Role {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "CloudEdgeManagement";
    /**
     * Local Edge Management Status
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly localManagementStatus?: RoleStatus;
    /**
     * Edge Profile of the resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly edgeProfile?: EdgeProfile;
    /** Role status. */
    roleStatus?: RoleStatus;
}

/** An error response from the service. */
export declare interface CloudError {
    /** The error details. */
    error?: CloudErrorBody;
}

/** An error response from the service. */
export declare interface CloudErrorBody {
    /** An identifier for the error. Codes are invariant and are intended to be consumed programmatically. */
    code?: string;
    /** A message describing the error, intended to be suitable for display in a user interface. */
    message?: string;
    /** A list of additional details about the error. */
    details?: CloudErrorBody[];
}

/** Cni configuration */
export declare interface CniConfig {
    /**
     * Cni type
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * Cni version
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly version?: string;
    /**
     * Pod Subnet
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly podSubnet?: string;
    /**
     * Service subnet
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly serviceSubnet?: string;
}

/** Compute infrastructure Resource */
export declare interface ComputeResource {
    /** Processor count */
    processorCount: number;
    /** Memory in GB */
    memoryInGB: number;
}

/** Contains all the contact details of the customer. */
export declare interface ContactDetails {
    /** The contact person name. */
    contactPerson: string;
    /** The name of the company. */
    companyName: string;
    /** The phone number. */
    phone: string;
    /** The email list. */
    emailList: string[];
}

/** Represents a container on the  Data Box Edge/Gateway device. */
export declare interface Container extends ARMBaseModel {
    /**
     * Container in DataBoxEdge Resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /**
     * Current status of the container.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly containerStatus?: ContainerStatus;
    /** DataFormat for Container */
    dataFormat: AzureContainerDataFormat;
    /**
     * Details of the refresh job on this container.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly refreshDetails?: RefreshDetails;
    /**
     * The UTC time when container got created.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdDateTime?: Date;
}

/** Collection of all the containers on the Data Box Edge/Gateway device. */
export declare interface ContainerList {
    /**
     * The list of containers.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: Container[];
    /**
     * Link to the next set of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a Containers. */
export declare interface Containers {
    /**
     * Lists all the containers of a storage Account in a Data Box Edge/Data Box Gateway device.
     * @param deviceName The device name.
     * @param storageAccountName The storage Account name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    listByStorageAccount(deviceName: string, storageAccountName: string, resourceGroupName: string, options?: ContainersListByStorageAccountOptionalParams): PagedAsyncIterableIterator<Container>;
    /**
     * Gets a container by name.
     * @param deviceName The device name.
     * @param storageAccountName The Storage Account Name
     * @param containerName The container Name
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    get(deviceName: string, storageAccountName: string, containerName: string, resourceGroupName: string, options?: ContainersGetOptionalParams): Promise<ContainersGetResponse>;
    /**
     * Creates a new container or updates an existing container on the device.
     * @param deviceName The device name.
     * @param storageAccountName The Storage Account Name
     * @param containerName The container name.
     * @param resourceGroupName The resource group name.
     * @param container The container properties.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(deviceName: string, storageAccountName: string, containerName: string, resourceGroupName: string, container: Container, options?: ContainersCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<ContainersCreateOrUpdateResponse>, ContainersCreateOrUpdateResponse>>;
    /**
     * Creates a new container or updates an existing container on the device.
     * @param deviceName The device name.
     * @param storageAccountName The Storage Account Name
     * @param containerName The container name.
     * @param resourceGroupName The resource group name.
     * @param container The container properties.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(deviceName: string, storageAccountName: string, containerName: string, resourceGroupName: string, container: Container, options?: ContainersCreateOrUpdateOptionalParams): Promise<ContainersCreateOrUpdateResponse>;
    /**
     * Deletes the container on the Data Box Edge/Data Box Gateway device.
     * @param deviceName The device name.
     * @param storageAccountName The Storage Account Name
     * @param containerName The container name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    beginDelete(deviceName: string, storageAccountName: string, containerName: string, resourceGroupName: string, options?: ContainersDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes the container on the Data Box Edge/Data Box Gateway device.
     * @param deviceName The device name.
     * @param storageAccountName The Storage Account Name
     * @param containerName The container name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    beginDeleteAndWait(deviceName: string, storageAccountName: string, containerName: string, resourceGroupName: string, options?: ContainersDeleteOptionalParams): Promise<void>;
    /**
     * Refreshes the container metadata with the data from the cloud.
     * @param deviceName The device name.
     * @param storageAccountName The Storage Account Name
     * @param containerName The container name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    beginRefresh(deviceName: string, storageAccountName: string, containerName: string, resourceGroupName: string, options?: ContainersRefreshOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Refreshes the container metadata with the data from the cloud.
     * @param deviceName The device name.
     * @param storageAccountName The Storage Account Name
     * @param containerName The container name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    beginRefreshAndWait(deviceName: string, storageAccountName: string, containerName: string, resourceGroupName: string, options?: ContainersRefreshOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface ContainersCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type ContainersCreateOrUpdateResponse = Container;

/** Optional parameters. */
export declare interface ContainersDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface ContainersGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ContainersGetResponse = Container;

/** Optional parameters. */
export declare interface ContainersListByStorageAccountNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByStorageAccountNext operation. */
export declare type ContainersListByStorageAccountNextResponse = ContainerList;

/** Optional parameters. */
export declare interface ContainersListByStorageAccountOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByStorageAccount operation. */
export declare type ContainersListByStorageAccountResponse = ContainerList;

/** Optional parameters. */
export declare interface ContainersRefreshOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/**
 * Defines values for ContainerStatus. \
 * {@link KnownContainerStatus} can be used interchangeably with ContainerStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **OK** \
 * **Offline** \
 * **Unknown** \
 * **Updating** \
 * **NeedsAttention**
 */
export declare type ContainerStatus = string;

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export declare type CreatedByType = string;

/** The Data Box Edge/Gateway device. */
export declare interface DataBoxEdgeDevice extends ARMBaseModel {
    /** The location of the device. This is a supported and registered Azure geographical region (for example, West US, East US, or Southeast Asia). The geographical region of a device cannot be changed once it is created, but if an identical geographical region is specified on update, the request will succeed. */
    location: string;
    /** The list of tags that describe the device. These tags can be used to view and group this device (across resource groups). */
    tags?: {
        [propertyName: string]: string;
    };
    /** The SKU type. */
    sku?: Sku;
    /** The etag for the devices. */
    etag?: string;
    /** Msi identity of the resource */
    identity?: ResourceIdentity;
    /** The kind of the device. */
    kind?: DataBoxEdgeDeviceKind;
    /**
     * DataBoxEdge Resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /**
     * DataBoxEdge Device Properties
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemDataPropertiesSystemData?: SystemData;
    /** The status of the Data Box Edge/Gateway device. */
    dataBoxEdgeDeviceStatus?: DataBoxEdgeDeviceStatus;
    /**
     * The Serial Number of Data Box Edge/Gateway device.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly serialNumber?: string;
    /**
     * The Description of the Data Box Edge/Gateway device.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly description?: string;
    /**
     * The description of the Data Box Edge/Gateway device model.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly modelDescription?: string;
    /**
     * The type of the Data Box Edge/Gateway device.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly deviceType?: DeviceType;
    /**
     * The Data Box Edge/Gateway device name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly friendlyName?: string;
    /**
     * The Data Box Edge/Gateway device culture.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly culture?: string;
    /**
     * The Data Box Edge/Gateway device model.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly deviceModel?: string;
    /**
     * The Data Box Edge/Gateway device software version.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly deviceSoftwareVersion?: string;
    /**
     * The Data Box Edge/Gateway device local capacity in MB.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly deviceLocalCapacity?: number;
    /**
     * The Data Box Edge/Gateway device timezone.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly timeZone?: string;
    /**
     * The device software version number of the device (eg: 1.2.18105.6).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly deviceHcsVersion?: string;
    /**
     * Type of compute roles configured.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly configuredRoleTypes?: RoleTypes[];
    /**
     * The number of nodes in the cluster.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nodeCount?: number;
    /**
     * The details of the move operation on this resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resourceMoveDetails?: ResourceMoveDetails;
    /**
     * The details of Edge Profile for this resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly edgeProfile?: EdgeProfile;
    /** The details of data-residency related properties for this resource */
    dataResidency?: DataResidency;
}

/** The extended Info of the Data Box Edge/Gateway device. */
export declare interface DataBoxEdgeDeviceExtendedInfo extends ARMBaseModel {
    /** The digital signature of encrypted certificate. */
    encryptionKeyThumbprint?: string;
    /** The public part of the encryption certificate. Client uses this to encrypt any secret. */
    encryptionKey?: string;
    /**
     * The Resource ID of the Resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resourceKey?: string;
    /** The Key Vault ARM Id for client secrets */
    clientSecretStoreId?: string;
    /** The url to access the Client Key Vault */
    clientSecretStoreUrl?: string;
    /** The name of Channel Integrity Key stored in the Client Key Vault */
    channelIntegrityKeyName?: string;
    /** The version of Channel Integrity Key stored in the Client Key Vault */
    channelIntegrityKeyVersion?: string;
    /** Key vault sync status */
    keyVaultSyncStatus?: KeyVaultSyncStatus;
    /**
     * Device secrets, will be returned only with ODataFilter $expand=deviceSecrets
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly deviceSecrets?: {
        [propertyName: string]: Secret;
    };
}

/** The Data Box Edge/Gateway device extended info patch. */
export declare interface DataBoxEdgeDeviceExtendedInfoPatch {
    /** The Key Vault ARM Id for client secrets */
    clientSecretStoreId?: string;
    /** The url to access the Client Key Vault */
    clientSecretStoreUrl?: string;
    /** The name for Channel Integrity Key stored in the Client Key Vault */
    channelIntegrityKeyName?: string;
    /** The version of Channel Integrity Key stored in the Client Key Vault */
    channelIntegrityKeyVersion?: string;
    /** For changing or to initiate the resync to key-vault set the status to KeyVaultSyncPending, rest of the status will not be applicable. */
    syncStatus?: KeyVaultSyncStatus;
}

/**
 * Defines values for DataBoxEdgeDeviceKind. \
 * {@link KnownDataBoxEdgeDeviceKind} can be used interchangeably with DataBoxEdgeDeviceKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AzureDataBoxGateway** \
 * **AzureStackEdge** \
 * **AzureStackHub** \
 * **AzureModularDataCentre**
 */
export declare type DataBoxEdgeDeviceKind = string;

/** The collection of Data Box Edge/Gateway devices. */
export declare interface DataBoxEdgeDeviceList {
    /**
     * The list of Data Box Edge/Gateway devices.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: DataBoxEdgeDevice[];
    /**
     * Link to the next set of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** The Data Box Edge/Gateway device patch. */
export declare interface DataBoxEdgeDevicePatch {
    /** The tags attached to the Data Box Edge/Gateway resource. */
    tags?: {
        [propertyName: string]: string;
    };
    /** Msi identity of the resource */
    identity?: ResourceIdentity;
    /** Edge Profile property of the Data Box Edge/Gateway device */
    edgeProfile?: EdgeProfilePatch;
}

/**
 * Defines values for DataBoxEdgeDeviceStatus. \
 * {@link KnownDataBoxEdgeDeviceStatus} can be used interchangeably with DataBoxEdgeDeviceStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ReadyToSetup** \
 * **Online** \
 * **Offline** \
 * **NeedsAttention** \
 * **Disconnected** \
 * **PartiallyDisconnected** \
 * **Maintenance**
 */
export declare type DataBoxEdgeDeviceStatus = string;

export declare class DataBoxEdgeManagementClient extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the DataBoxEdgeManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The subscription ID.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: DataBoxEdgeManagementClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    operations: Operations;
    availableSkus: AvailableSkus;
    devices: Devices;
    alerts: Alerts;
    bandwidthSchedules: BandwidthSchedules;
    diagnosticSettings: DiagnosticSettings;
    jobs: Jobs;
    nodes: Nodes;
    operationsStatus: OperationsStatus;
    orders: Orders;
    roles: Roles;
    addons: Addons;
    monitoringConfig: MonitoringConfig;
    shares: Shares;
    storageAccountCredentials: StorageAccountCredentials;
    storageAccounts: StorageAccounts;
    containers: Containers;
    triggers: Triggers;
    supportPackages: SupportPackages;
    users: Users;
}

/** Optional parameters. */
export declare interface DataBoxEdgeManagementClientOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** Resource Move details */
export declare interface DataBoxEdgeMoveRequest {
    /** Target resource group ARMId */
    targetResourceGroup: string;
    /** List of resources to be moved */
    resources: string[];
}

/** The Sku information. */
export declare interface DataBoxEdgeSku {
    /**
     * The type of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resourceType?: string;
    /**
     * The Sku name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: SkuName;
    /**
     * The Sku kind.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly kind?: string;
    /**
     * The Sku tier.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tier?: SkuTier;
    /**
     * The Sku kind.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly size?: string;
    /**
     * The Sku family.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly family?: string;
    /**
     * Availability of the Sku for the region.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly locations?: string[];
    /**
     * The API versions in which Sku is available.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly apiVersions?: string[];
    /**
     * Availability of the Sku for the location/zone/site.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly locationInfo?: SkuLocationInfo[];
    /**
     * The pricing info of the Sku.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly costs?: SkuCost[];
    /**
     * Sku can be signed up by customer or not.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly signupOption?: SkuSignupOption;
    /**
     * Availability of the Sku as preview/stable.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly version?: SkuVersion;
    /**
     * Links to the next set of results
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly availability?: SkuAvailability;
    /**
     * List of Shipment Types supported by this SKU
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly shipmentTypes?: ShipmentType[];
    /**
     * The capability info of the SKU.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly capabilities?: SkuCapability[];
}

/** List of SKU Information objects. */
export declare interface DataBoxEdgeSkuList {
    /**
     * List of ResourceType Sku
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: DataBoxEdgeSku[];
    /**
     * Links to the next set of results
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/**
 * Defines values for DataPolicy. \
 * {@link KnownDataPolicy} can be used interchangeably with DataPolicy,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Cloud** \
 * **Local**
 */
export declare type DataPolicy = string;

/** Wraps data-residency related information for edge-resource and this should be used with ARM layer. */
export declare interface DataResidency {
    /** DataResidencyType enum */
    type?: DataResidencyType;
}

/**
 * Defines values for DataResidencyType. \
 * {@link KnownDataResidencyType} can be used interchangeably with DataResidencyType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **GeoZoneReplication** \
 * **ZoneReplication**
 */
export declare type DataResidencyType = string;

/**
 * Defines values for DayOfWeek. \
 * {@link KnownDayOfWeek} can be used interchangeably with DayOfWeek,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Sunday** \
 * **Monday** \
 * **Tuesday** \
 * **Wednesday** \
 * **Thursday** \
 * **Friday** \
 * **Saturday**
 */
export declare type DayOfWeek = string;

/** DC Access code in the case of Self Managed Shipping. */
export declare interface DCAccessCode {
    /** DCAccess Code for the Self Managed shipment. */
    authCode?: string;
}

/** Interface representing a Devices. */
export declare interface Devices {
    /**
     * Gets all the Data Box Edge/Data Box Gateway devices in a subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: DevicesListBySubscriptionOptionalParams): PagedAsyncIterableIterator<DataBoxEdgeDevice>;
    /**
     * Gets all the Data Box Edge/Data Box Gateway devices in a resource group.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: DevicesListByResourceGroupOptionalParams): PagedAsyncIterableIterator<DataBoxEdgeDevice>;
    /**
     * Gets the properties of the Data Box Edge/Data Box Gateway device.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    get(deviceName: string, resourceGroupName: string, options?: DevicesGetOptionalParams): Promise<DevicesGetResponse>;
    /**
     * Creates or updates a Data Box Edge/Data Box Gateway resource.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param dataBoxEdgeDevice The resource object.
     * @param options The options parameters.
     */
    createOrUpdate(deviceName: string, resourceGroupName: string, dataBoxEdgeDevice: DataBoxEdgeDevice, options?: DevicesCreateOrUpdateOptionalParams): Promise<DevicesCreateOrUpdateResponse>;
    /**
     * Deletes the Data Box Edge/Data Box Gateway device.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    beginDelete(deviceName: string, resourceGroupName: string, options?: DevicesDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes the Data Box Edge/Data Box Gateway device.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    beginDeleteAndWait(deviceName: string, resourceGroupName: string, options?: DevicesDeleteOptionalParams): Promise<void>;
    /**
     * Modifies a Data Box Edge/Data Box Gateway resource.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param parameters The resource parameters.
     * @param options The options parameters.
     */
    update(deviceName: string, resourceGroupName: string, parameters: DataBoxEdgeDevicePatch, options?: DevicesUpdateOptionalParams): Promise<DevicesUpdateResponse>;
    /**
     * Downloads the updates on a Data Box Edge/Data Box Gateway device.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    beginDownloadUpdates(deviceName: string, resourceGroupName: string, options?: DevicesDownloadUpdatesOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Downloads the updates on a Data Box Edge/Data Box Gateway device.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    beginDownloadUpdatesAndWait(deviceName: string, resourceGroupName: string, options?: DevicesDownloadUpdatesOptionalParams): Promise<void>;
    /**
     * Generates certificate for activation key.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    generateCertificate(deviceName: string, resourceGroupName: string, options?: DevicesGenerateCertificateOptionalParams): Promise<DevicesGenerateCertificateResponse>;
    /**
     * Gets additional information for the specified Azure Stack Edge/Data Box Gateway device.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    getExtendedInformation(deviceName: string, resourceGroupName: string, options?: DevicesGetExtendedInformationOptionalParams): Promise<DevicesGetExtendedInformationResponse>;
    /**
     * Installs the updates on the Data Box Edge/Data Box Gateway device.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    beginInstallUpdates(deviceName: string, resourceGroupName: string, options?: DevicesInstallUpdatesOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Installs the updates on the Data Box Edge/Data Box Gateway device.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    beginInstallUpdatesAndWait(deviceName: string, resourceGroupName: string, options?: DevicesInstallUpdatesOptionalParams): Promise<void>;
    /**
     * Gets the network settings of the specified Data Box Edge/Data Box Gateway device.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    getNetworkSettings(deviceName: string, resourceGroupName: string, options?: DevicesGetNetworkSettingsOptionalParams): Promise<DevicesGetNetworkSettingsResponse>;
    /**
     * Scans for updates on a Data Box Edge/Data Box Gateway device.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    beginScanForUpdates(deviceName: string, resourceGroupName: string, options?: DevicesScanForUpdatesOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Scans for updates on a Data Box Edge/Data Box Gateway device.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    beginScanForUpdatesAndWait(deviceName: string, resourceGroupName: string, options?: DevicesScanForUpdatesOptionalParams): Promise<void>;
    /**
     * Updates the security settings on a Data Box Edge/Data Box Gateway device.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param securitySettings The security settings.
     * @param options The options parameters.
     */
    beginCreateOrUpdateSecuritySettings(deviceName: string, resourceGroupName: string, securitySettings: SecuritySettings, options?: DevicesCreateOrUpdateSecuritySettingsOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Updates the security settings on a Data Box Edge/Data Box Gateway device.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param securitySettings The security settings.
     * @param options The options parameters.
     */
    beginCreateOrUpdateSecuritySettingsAndWait(deviceName: string, resourceGroupName: string, securitySettings: SecuritySettings, options?: DevicesCreateOrUpdateSecuritySettingsOptionalParams): Promise<void>;
    /**
     * Gets additional information for the specified Data Box Edge/Data Box Gateway device.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param parameters The patch object.
     * @param options The options parameters.
     */
    updateExtendedInformation(deviceName: string, resourceGroupName: string, parameters: DataBoxEdgeDeviceExtendedInfoPatch, options?: DevicesUpdateExtendedInformationOptionalParams): Promise<DevicesUpdateExtendedInformationResponse>;
    /**
     * Gets information about the availability of updates based on the last scan of the device. It also
     * gets information about any ongoing download or install jobs on the device.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    getUpdateSummary(deviceName: string, resourceGroupName: string, options?: DevicesGetUpdateSummaryOptionalParams): Promise<DevicesGetUpdateSummaryResponse>;
    /**
     * Uploads registration certificate for the device.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param parameters The upload certificate request.
     * @param options The options parameters.
     */
    uploadCertificate(deviceName: string, resourceGroupName: string, parameters: UploadCertificateRequest, options?: DevicesUploadCertificateOptionalParams): Promise<DevicesUploadCertificateResponse>;
}

/** Optional parameters. */
export declare interface DevicesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type DevicesCreateOrUpdateResponse = DataBoxEdgeDevice;

/** Optional parameters. */
export declare interface DevicesCreateOrUpdateSecuritySettingsOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface DevicesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface DevicesDownloadUpdatesOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface DevicesGenerateCertificateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the generateCertificate operation. */
export declare type DevicesGenerateCertificateResponse = GenerateCertResponse;

/** Optional parameters. */
export declare interface DevicesGetExtendedInformationOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getExtendedInformation operation. */
export declare type DevicesGetExtendedInformationResponse = DataBoxEdgeDeviceExtendedInfo;

/** Optional parameters. */
export declare interface DevicesGetNetworkSettingsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getNetworkSettings operation. */
export declare type DevicesGetNetworkSettingsResponse = NetworkSettings;

/** Optional parameters. */
export declare interface DevicesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type DevicesGetResponse = DataBoxEdgeDevice;

/** Optional parameters. */
export declare interface DevicesGetUpdateSummaryOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getUpdateSummary operation. */
export declare type DevicesGetUpdateSummaryResponse = UpdateSummary;

/** Optional parameters. */
export declare interface DevicesInstallUpdatesOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface DevicesListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
    /** Specify $expand=details to populate additional fields related to the resource or Specify $skipToken=<token> to populate the next page in the list. */
    expand?: string;
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type DevicesListByResourceGroupNextResponse = DataBoxEdgeDeviceList;

/** Optional parameters. */
export declare interface DevicesListByResourceGroupOptionalParams extends coreClient.OperationOptions {
    /** Specify $expand=details to populate additional fields related to the resource or Specify $skipToken=<token> to populate the next page in the list. */
    expand?: string;
}

/** Contains response data for the listByResourceGroup operation. */
export declare type DevicesListByResourceGroupResponse = DataBoxEdgeDeviceList;

/** Optional parameters. */
export declare interface DevicesListBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
    /** Specify $expand=details to populate additional fields related to the resource or Specify $skipToken=<token> to populate the next page in the list. */
    expand?: string;
}

/** Contains response data for the listBySubscriptionNext operation. */
export declare type DevicesListBySubscriptionNextResponse = DataBoxEdgeDeviceList;

/** Optional parameters. */
export declare interface DevicesListBySubscriptionOptionalParams extends coreClient.OperationOptions {
    /** Specify $expand=details to populate additional fields related to the resource or Specify $skipToken=<token> to populate the next page in the list. */
    expand?: string;
}

/** Contains response data for the listBySubscription operation. */
export declare type DevicesListBySubscriptionResponse = DataBoxEdgeDeviceList;

/** Optional parameters. */
export declare interface DevicesScanForUpdatesOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface DevicesUpdateExtendedInformationOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the updateExtendedInformation operation. */
export declare type DevicesUpdateExtendedInformationResponse = DataBoxEdgeDeviceExtendedInfo;

/** Optional parameters. */
export declare interface DevicesUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type DevicesUpdateResponse = DataBoxEdgeDevice;

/** Optional parameters. */
export declare interface DevicesUploadCertificateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the uploadCertificate operation. */
export declare type DevicesUploadCertificateResponse = UploadCertificateResponse;

/**
 * Defines values for DeviceType. \
 * {@link KnownDeviceType} can be used interchangeably with DeviceType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **DataBoxEdgeDevice**
 */
export declare type DeviceType = string;

/** The diagnostic proactive log collection settings of a device. */
export declare interface DiagnosticProactiveLogCollectionSettings extends ARMBaseModel {
    /**
     * DiagnosticProactiveLogCollectionSettings
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** Proactive diagnostic collection consent flag */
    userConsent: ProactiveDiagnosticsConsent;
}

/** The remote support settings of a device. */
export declare interface DiagnosticRemoteSupportSettings extends ARMBaseModel {
    /**
     * DiagnosticRemoteSupportSettings
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** Remote support settings list according to the RemoteApplicationType */
    remoteSupportSettingsList?: RemoteSupportSettings[];
}

/** Interface representing a DiagnosticSettings. */
export declare interface DiagnosticSettings {
    /**
     * Gets the proactive log collection settings of the specified Data Box Edge/Data Box Gateway device.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    getDiagnosticProactiveLogCollectionSettings(deviceName: string, resourceGroupName: string, options?: DiagnosticSettingsGetDiagnosticProactiveLogCollectionSettingsOptionalParams): Promise<DiagnosticSettingsGetDiagnosticProactiveLogCollectionSettingsResponse>;
    /**
     * Updates the proactive log collection settings on a Data Box Edge/Data Box Gateway device.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param proactiveLogCollectionSettings The proactive log collection settings.
     * @param options The options parameters.
     */
    beginUpdateDiagnosticProactiveLogCollectionSettings(deviceName: string, resourceGroupName: string, proactiveLogCollectionSettings: DiagnosticProactiveLogCollectionSettings, options?: DiagnosticSettingsUpdateDiagnosticProactiveLogCollectionSettingsOptionalParams): Promise<PollerLike<PollOperationState<DiagnosticSettingsUpdateDiagnosticProactiveLogCollectionSettingsResponse>, DiagnosticSettingsUpdateDiagnosticProactiveLogCollectionSettingsResponse>>;
    /**
     * Updates the proactive log collection settings on a Data Box Edge/Data Box Gateway device.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param proactiveLogCollectionSettings The proactive log collection settings.
     * @param options The options parameters.
     */
    beginUpdateDiagnosticProactiveLogCollectionSettingsAndWait(deviceName: string, resourceGroupName: string, proactiveLogCollectionSettings: DiagnosticProactiveLogCollectionSettings, options?: DiagnosticSettingsUpdateDiagnosticProactiveLogCollectionSettingsOptionalParams): Promise<DiagnosticSettingsUpdateDiagnosticProactiveLogCollectionSettingsResponse>;
    /**
     * Gets the diagnostic remote support settings of the specified Data Box Edge/Data Box Gateway device.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    getDiagnosticRemoteSupportSettings(deviceName: string, resourceGroupName: string, options?: DiagnosticSettingsGetDiagnosticRemoteSupportSettingsOptionalParams): Promise<DiagnosticSettingsGetDiagnosticRemoteSupportSettingsResponse>;
    /**
     * Updates the diagnostic remote support settings on a Data Box Edge/Data Box Gateway device.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param diagnosticRemoteSupportSettings The diagnostic remote support settings.
     * @param options The options parameters.
     */
    beginUpdateDiagnosticRemoteSupportSettings(deviceName: string, resourceGroupName: string, diagnosticRemoteSupportSettings: DiagnosticRemoteSupportSettings, options?: DiagnosticSettingsUpdateDiagnosticRemoteSupportSettingsOptionalParams): Promise<PollerLike<PollOperationState<DiagnosticSettingsUpdateDiagnosticRemoteSupportSettingsResponse>, DiagnosticSettingsUpdateDiagnosticRemoteSupportSettingsResponse>>;
    /**
     * Updates the diagnostic remote support settings on a Data Box Edge/Data Box Gateway device.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param diagnosticRemoteSupportSettings The diagnostic remote support settings.
     * @param options The options parameters.
     */
    beginUpdateDiagnosticRemoteSupportSettingsAndWait(deviceName: string, resourceGroupName: string, diagnosticRemoteSupportSettings: DiagnosticRemoteSupportSettings, options?: DiagnosticSettingsUpdateDiagnosticRemoteSupportSettingsOptionalParams): Promise<DiagnosticSettingsUpdateDiagnosticRemoteSupportSettingsResponse>;
}

/** Optional parameters. */
export declare interface DiagnosticSettingsGetDiagnosticProactiveLogCollectionSettingsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getDiagnosticProactiveLogCollectionSettings operation. */
export declare type DiagnosticSettingsGetDiagnosticProactiveLogCollectionSettingsResponse = DiagnosticProactiveLogCollectionSettings;

/** Optional parameters. */
export declare interface DiagnosticSettingsGetDiagnosticRemoteSupportSettingsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getDiagnosticRemoteSupportSettings operation. */
export declare type DiagnosticSettingsGetDiagnosticRemoteSupportSettingsResponse = DiagnosticRemoteSupportSettings;

/** Optional parameters. */
export declare interface DiagnosticSettingsUpdateDiagnosticProactiveLogCollectionSettingsOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the updateDiagnosticProactiveLogCollectionSettings operation. */
export declare type DiagnosticSettingsUpdateDiagnosticProactiveLogCollectionSettingsResponse = DiagnosticProactiveLogCollectionSettings;

/** Optional parameters. */
export declare interface DiagnosticSettingsUpdateDiagnosticRemoteSupportSettingsOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the updateDiagnosticRemoteSupportSettings operation. */
export declare type DiagnosticSettingsUpdateDiagnosticRemoteSupportSettingsResponse = DiagnosticRemoteSupportSettings;

/**
 * Defines values for DownloadPhase. \
 * {@link KnownDownloadPhase} can be used interchangeably with DownloadPhase,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **Initializing** \
 * **Downloading** \
 * **Verifying**
 */
export declare type DownloadPhase = string;

/** Details about Edge Profile for the resource */
export declare interface EdgeProfile {
    /** Edge Profile Subscription */
    subscription?: EdgeProfileSubscription;
}

/** The Data Box Edge/Gateway Edge Profile patch. */
export declare interface EdgeProfilePatch {
    /** The Data Box Edge/Gateway Edge Profile Subscription patch */
    subscription?: EdgeProfileSubscriptionPatch;
}

/** Subscription details for the Edge Profile */
export declare interface EdgeProfileSubscription {
    /** Edge Subscription Registration ID */
    registrationId?: string;
    /** ARM ID of the subscription */
    id?: string;
    state?: SubscriptionState;
    registrationDate?: string;
    subscriptionId?: string;
    tenantId?: string;
    locationPlacementId?: string;
    quotaId?: string;
    serializedDetails?: string;
    registeredFeatures?: SubscriptionRegisteredFeatures[];
}

/** The Data Box Edge/Gateway Edge Profile Subscription patch. */
export declare interface EdgeProfileSubscriptionPatch {
    /** The path ID that uniquely identifies the subscription of the edge profile. */
    id?: string;
}

/**
 * Defines values for EncryptionAlgorithm. \
 * {@link KnownEncryptionAlgorithm} can be used interchangeably with EncryptionAlgorithm,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **AES256** \
 * **RSAES_PKCS1_v_1_5**
 */
export declare type EncryptionAlgorithm = string;

/** Etcd configuration */
export declare interface EtcdInfo {
    /**
     * Etcd type
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * Etcd version
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly version?: string;
}

/** Trigger details. */
export declare interface FileEventTrigger extends Trigger {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "FileEvent";
    /** File event source details. */
    sourceInfo: FileSourceInfo;
    /** Role sink info. */
    sinkInfo: RoleSinkInfo;
    /** A custom context tag typically used to correlate the trigger against its usage. For example, if a periodic timer trigger is intended for certain specific IoT modules in the device, the tag can be the name or the image URL of the module. */
    customContextTag?: string;
}

/** File source details. */
export declare interface FileSourceInfo {
    /** File share ID. */
    shareId: string;
}

/** Used in activation key generation flow. */
export declare interface GenerateCertResponse {
    /**
     * Gets or sets base64 encoded certificate raw data,
     * this is the public part needed to be uploaded to cert vault
     */
    publicKey?: string;
    /**
     * Gets or sets base64 encoded private part of the certificate,
     * needed to form the activation key
     */
    privateKey?: string;
    /** Gets or sets expiry time in UTC */
    expiryTimeInUTC?: string;
}

/**
 * Given a result page from a pageable operation, returns a
 * continuation token that can be used to begin paging from
 * that point later.
 * @param page A result object from calling .byPage() on a paged operation.
 * @returns The continuation token that can be passed into byPage().
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/**
 * Defines values for HostPlatformType. \
 * {@link KnownHostPlatformType} can be used interchangeably with HostPlatformType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **KubernetesCluster** \
 * **LinuxVM**
 */
export declare type HostPlatformType = string;

/** Image repository credential. */
export declare interface ImageRepositoryCredential {
    /** Image repository url (e.g.: mcr.microsoft.com). */
    imageRepositoryUrl: string;
    /** Repository user name. */
    userName: string;
    /** Repository user password. */
    password?: AsymmetricEncryptedSecret;
}

/**
 * Defines values for InstallationImpact. \
 * {@link KnownInstallationImpact} can be used interchangeably with InstallationImpact,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **DeviceRebooted** \
 * **KubernetesWorkloadsDown**
 */
export declare type InstallationImpact = string;

/**
 * Defines values for InstallRebootBehavior. \
 * {@link KnownInstallRebootBehavior} can be used interchangeably with InstallRebootBehavior,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NeverReboots** \
 * **RequiresReboot** \
 * **RequestReboot**
 */
export declare type InstallRebootBehavior = string;

/** IoT Addon. */
export declare interface IoTAddon extends Addon {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "IotEdge";
    /** IoT device metadata to which appliance needs to be connected. */
    ioTDeviceDetails: IoTDeviceInfo;
    /** IoT edge device to which the IoT Addon needs to be configured. */
    ioTEdgeDeviceDetails: IoTDeviceInfo;
    /**
     * Version of IoT running on the appliance.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly version?: string;
    /**
     * Host OS supported by the IoT addon.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly hostPlatform?: PlatformType;
    /**
     * Platform where the runtime is hosted.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly hostPlatformType?: HostPlatformType;
    /**
     * Addon Provisioning State
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: AddonState;
}

/** Metadata of IoT device/IoT Edge device to be configured. */
export declare interface IoTDeviceInfo {
    /** ID of the IoT device/edge device. */
    deviceId: string;
    /** Host name for the IoT hub associated to the device. */
    ioTHostHub: string;
    /** Id for the IoT hub associated to the device. */
    ioTHostHubId?: string;
    /** Encrypted IoT device/IoT edge device connection string. */
    authentication?: Authentication;
}

/** IoT edge agent details is optional, this will be used for download system Agent module while bootstrapping IoT Role if specified. */
export declare interface IoTEdgeAgentInfo {
    /** Name of the IoT edge agent image. */
    imageName: string;
    /** Image Tag. */
    tag: string;
    /** Image repository details. */
    imageRepository?: ImageRepositoryCredential;
}

/** Compute role. */
export declare interface IoTRole extends Role {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "IOT";
    /** Host OS supported by the IoT role. */
    hostPlatform?: PlatformType;
    /** IoT device metadata to which data box edge device needs to be connected. */
    ioTDeviceDetails?: IoTDeviceInfo;
    /** IoT edge device to which the IoT role needs to be configured. */
    ioTEdgeDeviceDetails?: IoTDeviceInfo;
    /** Mount points of shares in role(s). */
    shareMappings?: MountPointMap[];
    /** Iot edge agent details to download the agent and bootstrap iot runtime. */
    ioTEdgeAgentInfo?: IoTEdgeAgentInfo;
    /**
     * Platform where the Iot runtime is hosted.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly hostPlatformType?: HostPlatformType;
    /** Resource allocation */
    computeResource?: ComputeResource;
    /** Role status. */
    roleStatus?: RoleStatus;
}

/** Details related to the IPv4 address configuration. */
export declare interface Ipv4Config {
    /**
     * The IPv4 address of the network adapter.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly ipAddress?: string;
    /**
     * The IPv4 subnet of the network adapter.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly subnet?: string;
    /**
     * The IPv4 gateway of the network adapter.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly gateway?: string;
}

/** Details related to the IPv6 address configuration. */
export declare interface Ipv6Config {
    /**
     * The IPv6 address of the network adapter.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly ipAddress?: string;
    /**
     * The IPv6 prefix of the network adapter.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly prefixLength?: number;
    /**
     * The IPv6 gateway of the network adapter.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly gateway?: string;
}

/** A device job. */
export declare interface Job {
    /**
     * The path ID that uniquely identifies the object.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the object.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The hierarchical type of the object.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The current status of the job.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: JobStatus;
    /**
     * The UTC date and time at which the job started.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly startTime?: Date;
    /**
     * The UTC date and time at which the job completed.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly endTime?: Date;
    /**
     * The percentage of the job that is complete.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly percentComplete?: number;
    /**
     * The error details.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly error?: JobErrorDetails;
    /**
     * The type of the job.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly jobType?: JobType;
    /**
     * Current stage of the update operation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly currentStage?: UpdateOperationStage;
    /**
     * The download progress.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly downloadProgress?: UpdateDownloadProgress;
    /**
     * The install progress.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly installProgress?: UpdateInstallProgress;
    /**
     * Total number of errors encountered during the refresh process.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly totalRefreshErrors?: number;
    /**
     * Local share/remote container relative path to the error manifest file of the refresh.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly errorManifestFile?: string;
    /**
     * ARM ID of the entity that was refreshed.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly refreshedEntityId?: string;
    /** If only subfolders need to be refreshed, then the subfolder path inside the share or container. (The path is empty if there are no subfolders.) */
    folder?: string;
}

/** The job error information containing the list of job errors. */
export declare interface JobErrorDetails {
    /**
     * The error details.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly errorDetails?: JobErrorItem[];
    /**
     * The code intended for programmatic access.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * The message that describes the error in detail.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
}

/** The job error items. */
export declare interface JobErrorItem {
    /**
     * The recommended actions.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly recommendations?: string[];
    /**
     * The code intended for programmatic access.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * The message that describes the error in detail.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
}

/** Interface representing a Jobs. */
export declare interface Jobs {
    /**
     * Gets the details of a specified job on a Data Box Edge/Data Box Gateway device.
     * @param deviceName The device name.
     * @param name The job name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    get(deviceName: string, name: string, resourceGroupName: string, options?: JobsGetOptionalParams): Promise<JobsGetResponse>;
}

/** Optional parameters. */
export declare interface JobsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type JobsGetResponse = Job;

/**
 * Defines values for JobStatus. \
 * {@link KnownJobStatus} can be used interchangeably with JobStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Invalid** \
 * **Running** \
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **Paused** \
 * **Scheduled**
 */
export declare type JobStatus = string;

/**
 * Defines values for JobType. \
 * {@link KnownJobType} can be used interchangeably with JobType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Invalid** \
 * **ScanForUpdates** \
 * **DownloadUpdates** \
 * **InstallUpdates** \
 * **RefreshShare** \
 * **RefreshContainer** \
 * **Backup** \
 * **Restore** \
 * **TriggerSupportPackage**
 */
export declare type JobType = string;

/**
 * Defines values for KeyVaultSyncStatus. \
 * {@link KnownKeyVaultSyncStatus} can be used interchangeably with KeyVaultSyncStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **KeyVaultSynced** \
 * **KeyVaultSyncFailed** \
 * **KeyVaultNotConfigured** \
 * **KeyVaultSyncPending** \
 * **KeyVaultSyncing** \
 * **KeyVaultNotSynced**
 */
export declare type KeyVaultSyncStatus = string;

/** Known values of {@link AccessLevel} that the service accepts. */
export declare enum KnownAccessLevel {
    /** None */
    None = "None",
    /** ReadOnly */
    ReadOnly = "ReadOnly",
    /** ReadWrite */
    ReadWrite = "ReadWrite",
    /** FullAccess */
    FullAccess = "FullAccess"
}

/** Known values of {@link AccountType} that the service accepts. */
export declare enum KnownAccountType {
    /** GeneralPurposeStorage */
    GeneralPurposeStorage = "GeneralPurposeStorage",
    /** BlobStorage */
    BlobStorage = "BlobStorage"
}

/** Known values of {@link AddonState} that the service accepts. */
export declare enum KnownAddonState {
    /** Invalid */
    Invalid = "Invalid",
    /** Creating */
    Creating = "Creating",
    /** Created */
    Created = "Created",
    /** Updating */
    Updating = "Updating",
    /** Reconfiguring */
    Reconfiguring = "Reconfiguring",
    /** Failed */
    Failed = "Failed",
    /** Deleting */
    Deleting = "Deleting"
}

/** Known values of {@link AddonType} that the service accepts. */
export declare enum KnownAddonType {
    /** IotEdge */
    IotEdge = "IotEdge",
    /** ArcForKubernetes */
    ArcForKubernetes = "ArcForKubernetes"
}

/** Known values of {@link AlertSeverity} that the service accepts. */
export declare enum KnownAlertSeverity {
    /** Informational */
    Informational = "Informational",
    /** Warning */
    Warning = "Warning",
    /** Critical */
    Critical = "Critical"
}

/** Known values of {@link AuthenticationType} that the service accepts. */
export declare enum KnownAuthenticationType {
    /** Invalid */
    Invalid = "Invalid",
    /** AzureActiveDirectory */
    AzureActiveDirectory = "AzureActiveDirectory"
}

/** Known values of {@link AzureContainerDataFormat} that the service accepts. */
export declare enum KnownAzureContainerDataFormat {
    /** BlockBlob */
    BlockBlob = "BlockBlob",
    /** PageBlob */
    PageBlob = "PageBlob",
    /** AzureFile */
    AzureFile = "AzureFile"
}

/** Known values of {@link ClientPermissionType} that the service accepts. */
export declare enum KnownClientPermissionType {
    /** NoAccess */
    NoAccess = "NoAccess",
    /** ReadOnly */
    ReadOnly = "ReadOnly",
    /** ReadWrite */
    ReadWrite = "ReadWrite"
}

/** Known values of {@link ContainerStatus} that the service accepts. */
export declare enum KnownContainerStatus {
    /** OK */
    OK = "OK",
    /** Offline */
    Offline = "Offline",
    /** Unknown */
    Unknown = "Unknown",
    /** Updating */
    Updating = "Updating",
    /** NeedsAttention */
    NeedsAttention = "NeedsAttention"
}

/** Known values of {@link CreatedByType} that the service accepts. */
export declare enum KnownCreatedByType {
    /** User */
    User = "User",
    /** Application */
    Application = "Application",
    /** ManagedIdentity */
    ManagedIdentity = "ManagedIdentity",
    /** Key */
    Key = "Key"
}

/** Known values of {@link DataBoxEdgeDeviceKind} that the service accepts. */
export declare enum KnownDataBoxEdgeDeviceKind {
    /** AzureDataBoxGateway */
    AzureDataBoxGateway = "AzureDataBoxGateway",
    /** AzureStackEdge */
    AzureStackEdge = "AzureStackEdge",
    /** AzureStackHub */
    AzureStackHub = "AzureStackHub",
    /** AzureModularDataCentre */
    AzureModularDataCentre = "AzureModularDataCentre"
}

/** Known values of {@link DataBoxEdgeDeviceStatus} that the service accepts. */
export declare enum KnownDataBoxEdgeDeviceStatus {
    /** ReadyToSetup */
    ReadyToSetup = "ReadyToSetup",
    /** Online */
    Online = "Online",
    /** Offline */
    Offline = "Offline",
    /** NeedsAttention */
    NeedsAttention = "NeedsAttention",
    /** Disconnected */
    Disconnected = "Disconnected",
    /** PartiallyDisconnected */
    PartiallyDisconnected = "PartiallyDisconnected",
    /** Maintenance */
    Maintenance = "Maintenance"
}

/** Known values of {@link DataPolicy} that the service accepts. */
export declare enum KnownDataPolicy {
    /** Cloud */
    Cloud = "Cloud",
    /** Local */
    Local = "Local"
}

/** Known values of {@link DataResidencyType} that the service accepts. */
export declare enum KnownDataResidencyType {
    /** GeoZoneReplication */
    GeoZoneReplication = "GeoZoneReplication",
    /** ZoneReplication */
    ZoneReplication = "ZoneReplication"
}

/** Known values of {@link DayOfWeek} that the service accepts. */
export declare enum KnownDayOfWeek {
    /** Sunday */
    Sunday = "Sunday",
    /** Monday */
    Monday = "Monday",
    /** Tuesday */
    Tuesday = "Tuesday",
    /** Wednesday */
    Wednesday = "Wednesday",
    /** Thursday */
    Thursday = "Thursday",
    /** Friday */
    Friday = "Friday",
    /** Saturday */
    Saturday = "Saturday"
}

/** Known values of {@link DeviceType} that the service accepts. */
export declare enum KnownDeviceType {
    /** DataBoxEdgeDevice */
    DataBoxEdgeDevice = "DataBoxEdgeDevice"
}

/** Known values of {@link DownloadPhase} that the service accepts. */
export declare enum KnownDownloadPhase {
    /** Unknown */
    Unknown = "Unknown",
    /** Initializing */
    Initializing = "Initializing",
    /** Downloading */
    Downloading = "Downloading",
    /** Verifying */
    Verifying = "Verifying"
}

/** Known values of {@link EncryptionAlgorithm} that the service accepts. */
export declare enum KnownEncryptionAlgorithm {
    /** None */
    None = "None",
    /** AES256 */
    AES256 = "AES256",
    /** RsaesPkcs1V15 */
    RsaesPkcs1V15 = "RSAES_PKCS1_v_1_5"
}

/** Known values of {@link HostPlatformType} that the service accepts. */
export declare enum KnownHostPlatformType {
    /** KubernetesCluster */
    KubernetesCluster = "KubernetesCluster",
    /** LinuxVM */
    LinuxVM = "LinuxVM"
}

/** Known values of {@link InstallationImpact} that the service accepts. */
export declare enum KnownInstallationImpact {
    /** None */
    None = "None",
    /** DeviceRebooted */
    DeviceRebooted = "DeviceRebooted",
    /** KubernetesWorkloadsDown */
    KubernetesWorkloadsDown = "KubernetesWorkloadsDown"
}

/** Known values of {@link InstallRebootBehavior} that the service accepts. */
export declare enum KnownInstallRebootBehavior {
    /** NeverReboots */
    NeverReboots = "NeverReboots",
    /** RequiresReboot */
    RequiresReboot = "RequiresReboot",
    /** RequestReboot */
    RequestReboot = "RequestReboot"
}

/** Known values of {@link JobStatus} that the service accepts. */
export declare enum KnownJobStatus {
    /** Invalid */
    Invalid = "Invalid",
    /** Running */
    Running = "Running",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Canceled */
    Canceled = "Canceled",
    /** Paused */
    Paused = "Paused",
    /** Scheduled */
    Scheduled = "Scheduled"
}

/** Known values of {@link JobType} that the service accepts. */
export declare enum KnownJobType {
    /** Invalid */
    Invalid = "Invalid",
    /** ScanForUpdates */
    ScanForUpdates = "ScanForUpdates",
    /** DownloadUpdates */
    DownloadUpdates = "DownloadUpdates",
    /** InstallUpdates */
    InstallUpdates = "InstallUpdates",
    /** RefreshShare */
    RefreshShare = "RefreshShare",
    /** RefreshContainer */
    RefreshContainer = "RefreshContainer",
    /** Backup */
    Backup = "Backup",
    /** Restore */
    Restore = "Restore",
    /** TriggerSupportPackage */
    TriggerSupportPackage = "TriggerSupportPackage"
}

/** Known values of {@link KeyVaultSyncStatus} that the service accepts. */
export declare enum KnownKeyVaultSyncStatus {
    /** KeyVaultSynced */
    KeyVaultSynced = "KeyVaultSynced",
    /** KeyVaultSyncFailed */
    KeyVaultSyncFailed = "KeyVaultSyncFailed",
    /** KeyVaultNotConfigured */
    KeyVaultNotConfigured = "KeyVaultNotConfigured",
    /** KeyVaultSyncPending */
    KeyVaultSyncPending = "KeyVaultSyncPending",
    /** KeyVaultSyncing */
    KeyVaultSyncing = "KeyVaultSyncing",
    /** KeyVaultNotSynced */
    KeyVaultNotSynced = "KeyVaultNotSynced"
}

/** Known values of {@link KubernetesNodeType} that the service accepts. */
export declare enum KnownKubernetesNodeType {
    /** Invalid */
    Invalid = "Invalid",
    /** Master */
    Master = "Master",
    /** Worker */
    Worker = "Worker"
}

/** Known values of {@link KubernetesState} that the service accepts. */
export declare enum KnownKubernetesState {
    /** Invalid */
    Invalid = "Invalid",
    /** Creating */
    Creating = "Creating",
    /** Created */
    Created = "Created",
    /** Updating */
    Updating = "Updating",
    /** Reconfiguring */
    Reconfiguring = "Reconfiguring",
    /** Failed */
    Failed = "Failed",
    /** Deleting */
    Deleting = "Deleting"
}

/** Known values of {@link MetricAggregationType} that the service accepts. */
export declare enum KnownMetricAggregationType {
    /** NotSpecified */
    NotSpecified = "NotSpecified",
    /** None */
    None = "None",
    /** Average */
    Average = "Average",
    /** Minimum */
    Minimum = "Minimum",
    /** Maximum */
    Maximum = "Maximum",
    /** Total */
    Total = "Total",
    /** Count */
    Count = "Count"
}

/** Known values of {@link MetricCategory} that the service accepts. */
export declare enum KnownMetricCategory {
    /** Capacity */
    Capacity = "Capacity",
    /** Transaction */
    Transaction = "Transaction"
}

/** Known values of {@link MetricUnit} that the service accepts. */
export declare enum KnownMetricUnit {
    /** NotSpecified */
    NotSpecified = "NotSpecified",
    /** Percent */
    Percent = "Percent",
    /** Count */
    Count = "Count",
    /** Seconds */
    Seconds = "Seconds",
    /** Milliseconds */
    Milliseconds = "Milliseconds",
    /** Bytes */
    Bytes = "Bytes",
    /** BytesPerSecond */
    BytesPerSecond = "BytesPerSecond",
    /** CountPerSecond */
    CountPerSecond = "CountPerSecond"
}

/** Known values of {@link MonitoringStatus} that the service accepts. */
export declare enum KnownMonitoringStatus {
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled"
}

/** Known values of {@link MountType} that the service accepts. */
export declare enum KnownMountType {
    /** Volume */
    Volume = "Volume",
    /** HostPath */
    HostPath = "HostPath"
}

/** Known values of {@link MsiIdentityType} that the service accepts. */
export declare enum KnownMsiIdentityType {
    /** None */
    None = "None",
    /** SystemAssigned */
    SystemAssigned = "SystemAssigned",
    /** UserAssigned */
    UserAssigned = "UserAssigned"
}

/** Known values of {@link NetworkAdapterDhcpStatus} that the service accepts. */
export declare enum KnownNetworkAdapterDhcpStatus {
    /** Disabled */
    Disabled = "Disabled",
    /** Enabled */
    Enabled = "Enabled"
}

/** Known values of {@link NetworkAdapterRdmaStatus} that the service accepts. */
export declare enum KnownNetworkAdapterRdmaStatus {
    /** Incapable */
    Incapable = "Incapable",
    /** Capable */
    Capable = "Capable"
}

/** Known values of {@link NetworkAdapterStatus} that the service accepts. */
export declare enum KnownNetworkAdapterStatus {
    /** Inactive */
    Inactive = "Inactive",
    /** Active */
    Active = "Active"
}

/** Known values of {@link NetworkGroup} that the service accepts. */
export declare enum KnownNetworkGroup {
    /** None */
    None = "None",
    /** NonRdma */
    NonRdma = "NonRDMA",
    /** Rdma */
    Rdma = "RDMA"
}

/** Known values of {@link NodeStatus} that the service accepts. */
export declare enum KnownNodeStatus {
    /** Unknown */
    Unknown = "Unknown",
    /** Up */
    Up = "Up",
    /** Down */
    Down = "Down",
    /** Rebooting */
    Rebooting = "Rebooting",
    /** ShuttingDown */
    ShuttingDown = "ShuttingDown"
}

/** Known values of {@link OrderState} that the service accepts. */
export declare enum KnownOrderState {
    /** Untracked */
    Untracked = "Untracked",
    /** AwaitingFulfillment */
    AwaitingFulfillment = "AwaitingFulfillment",
    /** AwaitingPreparation */
    AwaitingPreparation = "AwaitingPreparation",
    /** AwaitingShipment */
    AwaitingShipment = "AwaitingShipment",
    /** Shipped */
    Shipped = "Shipped",
    /** Arriving */
    Arriving = "Arriving",
    /** Delivered */
    Delivered = "Delivered",
    /** ReplacementRequested */
    ReplacementRequested = "ReplacementRequested",
    /** LostDevice */
    LostDevice = "LostDevice",
    /** Declined */
    Declined = "Declined",
    /** ReturnInitiated */
    ReturnInitiated = "ReturnInitiated",
    /** AwaitingReturnShipment */
    AwaitingReturnShipment = "AwaitingReturnShipment",
    /** ShippedBack */
    ShippedBack = "ShippedBack",
    /** CollectedAtMicrosoft */
    CollectedAtMicrosoft = "CollectedAtMicrosoft",
    /** AwaitingPickup */
    AwaitingPickup = "AwaitingPickup",
    /** PickupCompleted */
    PickupCompleted = "PickupCompleted",
    /** AwaitingDrop */
    AwaitingDrop = "AwaitingDrop"
}

/** Known values of {@link PlatformType} that the service accepts. */
export declare enum KnownPlatformType {
    /** Windows */
    Windows = "Windows",
    /** Linux */
    Linux = "Linux"
}

/** Known values of {@link PosixComplianceStatus} that the service accepts. */
export declare enum KnownPosixComplianceStatus {
    /** Invalid */
    Invalid = "Invalid",
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled"
}

/** Known values of {@link ProactiveDiagnosticsConsent} that the service accepts. */
export declare enum KnownProactiveDiagnosticsConsent {
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled"
}

/** Known values of {@link RemoteApplicationType} that the service accepts. */
export declare enum KnownRemoteApplicationType {
    /** Powershell */
    Powershell = "Powershell",
    /** WAC */
    WAC = "WAC",
    /** LocalUI */
    LocalUI = "LocalUI",
    /** AllApplications */
    AllApplications = "AllApplications"
}

/** Known values of {@link ResourceMoveStatus} that the service accepts. */
export declare enum KnownResourceMoveStatus {
    /** None */
    None = "None",
    /** ResourceMoveInProgress */
    ResourceMoveInProgress = "ResourceMoveInProgress",
    /** ResourceMoveFailed */
    ResourceMoveFailed = "ResourceMoveFailed"
}

/** Known values of {@link RoleStatus} that the service accepts. */
export declare enum KnownRoleStatus {
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled"
}

/** Known values of {@link RoleTypes} that the service accepts. */
export declare enum KnownRoleTypes {
    /** IOT */
    IOT = "IOT",
    /** ASA */
    ASA = "ASA",
    /** Functions */
    Functions = "Functions",
    /** Cognitive */
    Cognitive = "Cognitive",
    /** MEC */
    MEC = "MEC",
    /** CloudEdgeManagement */
    CloudEdgeManagement = "CloudEdgeManagement",
    /** Kubernetes */
    Kubernetes = "Kubernetes"
}

/** Known values of {@link ShareAccessProtocol} that the service accepts. */
export declare enum KnownShareAccessProtocol {
    /** SMB */
    SMB = "SMB",
    /** NFS */
    NFS = "NFS"
}

/** Known values of {@link ShareAccessType} that the service accepts. */
export declare enum KnownShareAccessType {
    /** Change */
    Change = "Change",
    /** Read */
    Read = "Read",
    /** Custom */
    Custom = "Custom"
}

/** Known values of {@link ShareStatus} that the service accepts. */
export declare enum KnownShareStatus {
    /** Offline */
    Offline = "Offline",
    /** Unknown */
    Unknown = "Unknown",
    /** OK */
    OK = "OK",
    /** Updating */
    Updating = "Updating",
    /** NeedsAttention */
    NeedsAttention = "NeedsAttention"
}

/** Known values of {@link ShipmentType} that the service accepts. */
export declare enum KnownShipmentType {
    /** NotApplicable */
    NotApplicable = "NotApplicable",
    /** ShippedToCustomer */
    ShippedToCustomer = "ShippedToCustomer",
    /** SelfPickup */
    SelfPickup = "SelfPickup"
}

/** Known values of {@link SkuAvailability} that the service accepts. */
export declare enum KnownSkuAvailability {
    /** Available */
    Available = "Available",
    /** Unavailable */
    Unavailable = "Unavailable"
}

/** Known values of {@link SkuName} that the service accepts. */
export declare enum KnownSkuName {
    /** Gateway */
    Gateway = "Gateway",
    /** Edge */
    Edge = "Edge",
    /** TEA1Node */
    TEA1Node = "TEA_1Node",
    /** TEA1NodeUPS */
    TEA1NodeUPS = "TEA_1Node_UPS",
    /** TEA1NodeHeater */
    TEA1NodeHeater = "TEA_1Node_Heater",
    /** TEA1NodeUPSHeater */
    TEA1NodeUPSHeater = "TEA_1Node_UPS_Heater",
    /** TEA4NodeHeater */
    TEA4NodeHeater = "TEA_4Node_Heater",
    /** TEA4NodeUPSHeater */
    TEA4NodeUPSHeater = "TEA_4Node_UPS_Heater",
    /** TMA */
    TMA = "TMA",
    /** TDC */
    TDC = "TDC",
    /** TCASmall */
    TCASmall = "TCA_Small",
    /** GPU */
    GPU = "GPU",
    /** TCALarge */
    TCALarge = "TCA_Large",
    /** EdgePBase */
    EdgePBase = "EdgeP_Base",
    /** EdgePHigh */
    EdgePHigh = "EdgeP_High",
    /** EdgePRBase */
    EdgePRBase = "EdgePR_Base",
    /** EdgePRBaseUPS */
    EdgePRBaseUPS = "EdgePR_Base_UPS",
    /** EP2641VPUW */
    EP2641VPUW = "EP2_64_1VPU_W",
    /** EP21281T4Mx1W */
    EP21281T4Mx1W = "EP2_128_1T4_Mx1_W",
    /** EP22562T4W */
    EP22562T4W = "EP2_256_2T4_W",
    /** EdgeMRMini */
    EdgeMRMini = "EdgeMR_Mini",
    /** RCASmall */
    RCASmall = "RCA_Small",
    /** RCALarge */
    RCALarge = "RCA_Large",
    /** RDC */
    RDC = "RDC",
    /** Management */
    Management = "Management"
}

/** Known values of {@link SkuSignupOption} that the service accepts. */
export declare enum KnownSkuSignupOption {
    /** None */
    None = "None",
    /** Available */
    Available = "Available"
}

/** Known values of {@link SkuTier} that the service accepts. */
export declare enum KnownSkuTier {
    /** Standard */
    Standard = "Standard"
}

/** Known values of {@link SkuVersion} that the service accepts. */
export declare enum KnownSkuVersion {
    /** Stable */
    Stable = "Stable",
    /** Preview */
    Preview = "Preview"
}

/** Known values of {@link SSLStatus} that the service accepts. */
export declare enum KnownSSLStatus {
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled"
}

/** Known values of {@link StorageAccountStatus} that the service accepts. */
export declare enum KnownStorageAccountStatus {
    /** OK */
    OK = "OK",
    /** Offline */
    Offline = "Offline",
    /** Unknown */
    Unknown = "Unknown",
    /** Updating */
    Updating = "Updating",
    /** NeedsAttention */
    NeedsAttention = "NeedsAttention"
}

/** Known values of {@link SubscriptionState} that the service accepts. */
export declare enum KnownSubscriptionState {
    /** Registered */
    Registered = "Registered",
    /** Warned */
    Warned = "Warned",
    /** Suspended */
    Suspended = "Suspended",
    /** Deleted */
    Deleted = "Deleted",
    /** Unregistered */
    Unregistered = "Unregistered"
}

/** Known values of {@link TimeGrain} that the service accepts. */
export declare enum KnownTimeGrain {
    /** PT1M */
    PT1M = "PT1M",
    /** PT5M */
    PT5M = "PT5M",
    /** PT15M */
    PT15M = "PT15M",
    /** PT30M */
    PT30M = "PT30M",
    /** PT1H */
    PT1H = "PT1H",
    /** PT6H */
    PT6H = "PT6H",
    /** PT12H */
    PT12H = "PT12H",
    /** PT1D */
    PT1D = "PT1D"
}

/** Known values of {@link TriggerEventType} that the service accepts. */
export declare enum KnownTriggerEventType {
    /** FileEvent */
    FileEvent = "FileEvent",
    /** PeriodicTimerEvent */
    PeriodicTimerEvent = "PeriodicTimerEvent"
}

/** Known values of {@link UpdateOperation} that the service accepts. */
export declare enum KnownUpdateOperation {
    /** None */
    None = "None",
    /** Scan */
    Scan = "Scan",
    /** Download */
    Download = "Download",
    /** Install */
    Install = "Install"
}

/** Known values of {@link UpdateOperationStage} that the service accepts. */
export declare enum KnownUpdateOperationStage {
    /** Unknown */
    Unknown = "Unknown",
    /** Initial */
    Initial = "Initial",
    /** ScanStarted */
    ScanStarted = "ScanStarted",
    /** ScanComplete */
    ScanComplete = "ScanComplete",
    /** ScanFailed */
    ScanFailed = "ScanFailed",
    /** DownloadStarted */
    DownloadStarted = "DownloadStarted",
    /** DownloadComplete */
    DownloadComplete = "DownloadComplete",
    /** DownloadFailed */
    DownloadFailed = "DownloadFailed",
    /** InstallStarted */
    InstallStarted = "InstallStarted",
    /** InstallComplete */
    InstallComplete = "InstallComplete",
    /** InstallFailed */
    InstallFailed = "InstallFailed",
    /** RebootInitiated */
    RebootInitiated = "RebootInitiated",
    /** Success */
    Success = "Success",
    /** Failure */
    Failure = "Failure",
    /** RescanStarted */
    RescanStarted = "RescanStarted",
    /** RescanComplete */
    RescanComplete = "RescanComplete",
    /** RescanFailed */
    RescanFailed = "RescanFailed"
}

/** Known values of {@link UpdateStatus} that the service accepts. */
export declare enum KnownUpdateStatus {
    /** DownloadPending */
    DownloadPending = "DownloadPending",
    /** DownloadStarted */
    DownloadStarted = "DownloadStarted",
    /** DownloadCompleted */
    DownloadCompleted = "DownloadCompleted",
    /** InstallStarted */
    InstallStarted = "InstallStarted",
    /** InstallCompleted */
    InstallCompleted = "InstallCompleted"
}

/** Known values of {@link UpdateType} that the service accepts. */
export declare enum KnownUpdateType {
    /** Software */
    Software = "Software",
    /** Kubernetes */
    Kubernetes = "Kubernetes",
    /** Firmware */
    Firmware = "Firmware"
}

/** Known values of {@link UserType} that the service accepts. */
export declare enum KnownUserType {
    /** Share */
    Share = "Share",
    /** LocalManagement */
    LocalManagement = "LocalManagement",
    /** ARM */
    ARM = "ARM"
}

/** Kubernetes cluster configuration */
export declare interface KubernetesClusterInfo {
    /**
     * Etcd configuration
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly etcdInfo?: EtcdInfo;
    /**
     * Kubernetes cluster nodes
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nodes?: NodeInfo[];
    /** Kubernetes cluster version */
    version: string;
}

/** Kubernetes node IP configuration */
export declare interface KubernetesIPConfiguration {
    /**
     * Port of the Kubernetes node.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly port?: string;
    /** IP address of the Kubernetes node. */
    ipAddress?: string;
}

/**
 * Defines values for KubernetesNodeType. \
 * {@link KnownKubernetesNodeType} can be used interchangeably with KubernetesNodeType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Invalid** \
 * **Master** \
 * **Worker**
 */
export declare type KubernetesNodeType = string;

/** Kubernetes role. */
export declare interface KubernetesRole extends Role {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "Kubernetes";
    /** Host OS supported by the Kubernetes role. */
    hostPlatform?: PlatformType;
    /**
     * State of Kubernetes deployment
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: KubernetesState;
    /**
     * Platform where the runtime is hosted.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly hostPlatformType?: HostPlatformType;
    /** Kubernetes cluster configuration */
    kubernetesClusterInfo?: KubernetesClusterInfo;
    /** Kubernetes role resources */
    kubernetesRoleResources?: KubernetesRoleResources;
    /** Role status. */
    roleStatus?: RoleStatus;
}

/** Kubernetes role compute resource */
export declare interface KubernetesRoleCompute {
    /** VM profile */
    vmProfile: string;
    /**
     * Memory in bytes
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly memoryInBytes?: number;
    /**
     * Processor count
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly processorCount?: number;
}

/** Kubernetes role network resource */
export declare interface KubernetesRoleNetwork {
    /**
     * Cni configuration
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly cniConfig?: CniConfig;
    /**
     * Load balancer configuration
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly loadBalancerConfig?: LoadBalancerConfig;
}

/** Kubernetes role resources */
export declare interface KubernetesRoleResources {
    /** Kubernetes role storage resource */
    storage?: KubernetesRoleStorage;
    /** Kubernetes role compute resource */
    compute: KubernetesRoleCompute;
    /**
     * Kubernetes role network resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly network?: KubernetesRoleNetwork;
}

/** Kubernetes role storage resource */
export declare interface KubernetesRoleStorage {
    /**
     * Kubernetes storage class info.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly storageClasses?: KubernetesRoleStorageClassInfo[];
    /** Mount points of shares in role(s). */
    endpoints?: MountPointMap[];
}

/** Kubernetes storage class info. */
export declare interface KubernetesRoleStorageClassInfo {
    /**
     * Storage class name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Storage class type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * If provisioned storage is posix compliant.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly posixCompliant?: PosixComplianceStatus;
}

/**
 * Defines values for KubernetesState. \
 * {@link KnownKubernetesState} can be used interchangeably with KubernetesState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Invalid** \
 * **Creating** \
 * **Created** \
 * **Updating** \
 * **Reconfiguring** \
 * **Failed** \
 * **Deleting**
 */
export declare type KubernetesState = string;

/** Load balancer configuration */
export declare interface LoadBalancerConfig {
    /**
     * Load balancer type
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * Load balancer version
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly version?: string;
}

/** MEC role. */
export declare interface MECRole extends Role {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "MEC";
    /** Activation key of the MEC. */
    connectionString?: AsymmetricEncryptedSecret;
    /** Controller Endpoint. */
    controllerEndpoint?: string;
    /** Unique Id of the Resource. */
    resourceUniqueId?: string;
    /** Role status. */
    roleStatus?: RoleStatus;
}

/**
 * Defines values for MetricAggregationType. \
 * {@link KnownMetricAggregationType} can be used interchangeably with MetricAggregationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **None** \
 * **Average** \
 * **Minimum** \
 * **Maximum** \
 * **Total** \
 * **Count**
 */
export declare type MetricAggregationType = string;

/**
 * Defines values for MetricCategory. \
 * {@link KnownMetricCategory} can be used interchangeably with MetricCategory,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Capacity** \
 * **Transaction**
 */
export declare type MetricCategory = string;

/** Metric configuration. */
export declare interface MetricConfiguration {
    /** The Resource ID on which the metrics should be pushed. */
    resourceId: string;
    /** The MDM account to which the counters should be pushed. */
    mdmAccount?: string;
    /** The MDM namespace to which the counters should be pushed. This is required if MDMAccount is specified */
    metricNameSpace?: string;
    /** Host name for the IoT hub associated to the device. */
    counterSets: MetricCounterSet[];
}

/** The metric counter */
export declare interface MetricCounter {
    /** The counter name. */
    name: string;
    /** The instance from which counter should be collected. */
    instance?: string;
    /** The dimension filter. */
    dimensionFilter?: MetricDimension[];
    /** The additional dimensions to be added to metric. */
    additionalDimensions?: MetricDimension[];
}

/** The metric counter set */
export declare interface MetricCounterSet {
    /** The counters that should be collected in this set. */
    counters: MetricCounter[];
}

/** The metric dimension */
export declare interface MetricDimension {
    /** The dimension type. */
    sourceType: string;
    /** The dimension value. */
    sourceName: string;
}

/** Metric Dimension v1. */
export declare interface MetricDimensionV1 {
    /** Name of the metrics dimension. */
    name?: string;
    /** Display name of the metrics dimension. */
    displayName?: string;
    /** To be exported to shoe box. */
    toBeExportedForShoebox?: boolean;
}

/** Metric specification version 1. */
export declare interface MetricSpecificationV1 {
    /** Name of the metric. */
    name?: string;
    /** Display name of the metric. */
    displayName?: string;
    /** Description of the metric to be displayed. */
    displayDescription?: string;
    /** Metric units. */
    unit?: MetricUnit;
    /** Metric aggregation type. */
    aggregationType?: MetricAggregationType;
    /** Metric dimensions, other than default dimension which is resource. */
    dimensions?: MetricDimensionV1[];
    /** Set true to fill the gaps with zero. */
    fillGapWithZero?: boolean;
    /** Metric category. */
    category?: MetricCategory;
    /** Resource name override. */
    resourceIdDimensionNameOverride?: string;
    /** Support granularity of metrics. */
    supportedTimeGrainTypes?: TimeGrain[];
    /** Support metric aggregation type. */
    supportedAggregationTypes?: MetricAggregationType[];
}

/**
 * Defines values for MetricUnit. \
 * {@link KnownMetricUnit} can be used interchangeably with MetricUnit,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **Percent** \
 * **Count** \
 * **Seconds** \
 * **Milliseconds** \
 * **Bytes** \
 * **BytesPerSecond** \
 * **CountPerSecond**
 */
export declare type MetricUnit = string;

/** Interface representing a MonitoringConfig. */
export declare interface MonitoringConfig {
    /**
     * Lists metric configurations in a role.
     * @param deviceName The device name.
     * @param roleName The role name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    list(deviceName: string, roleName: string, resourceGroupName: string, options?: MonitoringConfigListOptionalParams): PagedAsyncIterableIterator<MonitoringMetricConfiguration>;
    /**
     * Gets a  metric configuration of a role.
     * @param deviceName The device name.
     * @param roleName The role name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    get(deviceName: string, roleName: string, resourceGroupName: string, options?: MonitoringConfigGetOptionalParams): Promise<MonitoringConfigGetResponse>;
    /**
     * Creates a new metric configuration or updates an existing one for a role.
     * @param deviceName The device name.
     * @param roleName The role name.
     * @param resourceGroupName The resource group name.
     * @param monitoringMetricConfiguration The metric configuration.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(deviceName: string, roleName: string, resourceGroupName: string, monitoringMetricConfiguration: MonitoringMetricConfiguration, options?: MonitoringConfigCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<MonitoringConfigCreateOrUpdateResponse>, MonitoringConfigCreateOrUpdateResponse>>;
    /**
     * Creates a new metric configuration or updates an existing one for a role.
     * @param deviceName The device name.
     * @param roleName The role name.
     * @param resourceGroupName The resource group name.
     * @param monitoringMetricConfiguration The metric configuration.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(deviceName: string, roleName: string, resourceGroupName: string, monitoringMetricConfiguration: MonitoringMetricConfiguration, options?: MonitoringConfigCreateOrUpdateOptionalParams): Promise<MonitoringConfigCreateOrUpdateResponse>;
    /**
     * deletes a new metric configuration for a role.
     * @param deviceName The device name.
     * @param roleName The role name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    beginDelete(deviceName: string, roleName: string, resourceGroupName: string, options?: MonitoringConfigDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * deletes a new metric configuration for a role.
     * @param deviceName The device name.
     * @param roleName The role name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    beginDeleteAndWait(deviceName: string, roleName: string, resourceGroupName: string, options?: MonitoringConfigDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface MonitoringConfigCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type MonitoringConfigCreateOrUpdateResponse = MonitoringMetricConfiguration;

/** Optional parameters. */
export declare interface MonitoringConfigDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface MonitoringConfigGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type MonitoringConfigGetResponse = MonitoringMetricConfiguration;

/** Optional parameters. */
export declare interface MonitoringConfigListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type MonitoringConfigListNextResponse = MonitoringMetricConfigurationList;

/** Optional parameters. */
export declare interface MonitoringConfigListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type MonitoringConfigListResponse = MonitoringMetricConfigurationList;

/** The metric setting details for the role */
export declare interface MonitoringMetricConfiguration extends ARMBaseModel {
    /**
     * MonitoringConfiguration on ASE device
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** The metrics configuration details */
    metricConfigurations: MetricConfiguration[];
}

/** Collection of metric configurations. */
export declare interface MonitoringMetricConfigurationList {
    /**
     * The list of metric configurations.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: MonitoringMetricConfiguration[];
    /**
     * Link to the next set of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/**
 * Defines values for MonitoringStatus. \
 * {@link KnownMonitoringStatus} can be used interchangeably with MonitoringStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export declare type MonitoringStatus = string;

/** The share mount point. */
export declare interface MountPointMap {
    /** ID of the share mounted to the role VM. */
    shareId: string;
    /**
     * ID of the role to which share is mounted.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly roleId?: string;
    /**
     * Mount point for the share.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly mountPoint?: string;
    /**
     * Mounting type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly mountType?: MountType;
    /**
     * Role type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly roleType?: RoleTypes;
}

/**
 * Defines values for MountType. \
 * {@link KnownMountType} can be used interchangeably with MountType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Volume** \
 * **HostPath**
 */
export declare type MountType = string;

/**
 * Defines values for MsiIdentityType. \
 * {@link KnownMsiIdentityType} can be used interchangeably with MsiIdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **SystemAssigned** \
 * **UserAssigned**
 */
export declare type MsiIdentityType = string;

/** Represents the networkAdapter on a device. */
export declare interface NetworkAdapter {
    /**
     * Instance ID of network adapter.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly adapterId?: string;
    /**
     * Hardware position of network adapter.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly adapterPosition?: NetworkAdapterPosition;
    /**
     * Logical index of the adapter.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly index?: number;
    /**
     * Node ID of the network adapter.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nodeId?: string;
    /**
     * Network adapter name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly networkAdapterName?: string;
    /**
     * Hardware label for the adapter.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly label?: string;
    /**
     * MAC address.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly macAddress?: string;
    /**
     * Link speed.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly linkSpeed?: number;
    /**
     * Value indicating whether this adapter is valid.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: NetworkAdapterStatus;
    /** Value indicating whether this adapter is RDMA capable. */
    rdmaStatus?: NetworkAdapterRdmaStatus;
    /** Value indicating whether this adapter has DHCP enabled. */
    dhcpStatus?: NetworkAdapterDhcpStatus;
    /**
     * The IPv4 configuration of the network adapter.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly ipv4Configuration?: Ipv4Config;
    /**
     * The IPv6 configuration of the network adapter.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly ipv6Configuration?: Ipv6Config;
    /**
     * The IPv6 local address.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly ipv6LinkLocalAddress?: string;
    /**
     * The list of DNS Servers of the device.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dnsServers?: string[];
}

/**
 * Defines values for NetworkAdapterDhcpStatus. \
 * {@link KnownNetworkAdapterDhcpStatus} can be used interchangeably with NetworkAdapterDhcpStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Disabled** \
 * **Enabled**
 */
export declare type NetworkAdapterDhcpStatus = string;

/** The network adapter position. */
export declare interface NetworkAdapterPosition {
    /**
     * The network group.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly networkGroup?: NetworkGroup;
    /**
     * The port.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly port?: number;
}

/**
 * Defines values for NetworkAdapterRdmaStatus. \
 * {@link KnownNetworkAdapterRdmaStatus} can be used interchangeably with NetworkAdapterRdmaStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Incapable** \
 * **Capable**
 */
export declare type NetworkAdapterRdmaStatus = string;

/**
 * Defines values for NetworkAdapterStatus. \
 * {@link KnownNetworkAdapterStatus} can be used interchangeably with NetworkAdapterStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Inactive** \
 * **Active**
 */
export declare type NetworkAdapterStatus = string;

/**
 * Defines values for NetworkGroup. \
 * {@link KnownNetworkGroup} can be used interchangeably with NetworkGroup,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **NonRDMA** \
 * **RDMA**
 */
export declare type NetworkGroup = string;

/** The network settings of a device. */
export declare interface NetworkSettings extends ARMBaseModel {
    /**
     * NetworkSettings on ASE device
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /**
     * The network adapter list on the device.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly networkAdapters?: NetworkAdapter[];
}

/**
 * Represents a single node in a Data box Edge/Gateway device
 * Gateway devices, standalone Edge devices and a single node cluster Edge device will all have 1 node
 * Multi-node Edge devices will have more than 1 nodes
 */
declare interface Node_2 extends ARMBaseModel {
    /**
     * The current status of the individual node
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nodeStatus?: NodeStatus;
    /**
     * Serial number of the Chassis
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nodeChassisSerialNumber?: string;
    /**
     * Serial number of the individual node
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nodeSerialNumber?: string;
    /**
     * Display Name of the individual node
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nodeDisplayName?: string;
    /**
     * Friendly software version name that is currently installed on the node
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nodeFriendlySoftwareVersion?: string;
    /**
     * HCS version that is currently installed on the node
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nodeHcsVersion?: string;
    /**
     * Guid instance id of the node
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nodeInstanceId?: string;
}
export { Node_2 as Node }

/** Kubernetes node info */
export declare interface NodeInfo {
    /**
     * Node name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Node type - Master/Worker
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: KubernetesNodeType;
    /** IP Configuration of the Kubernetes node. */
    ipConfiguration?: KubernetesIPConfiguration[];
}

/** Collection of Nodes. */
declare interface NodeList_2 {
    /**
     * The list of Nodes.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: Node_2[];
    /**
     * Link to the next set of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}
export { NodeList_2 as NodeList }

/** Interface representing a Nodes. */
export declare interface Nodes {
    /**
     * Gets all the nodes currently configured under this Data Box Edge device
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    listByDataBoxEdgeDevice(deviceName: string, resourceGroupName: string, options?: NodesListByDataBoxEdgeDeviceOptionalParams): PagedAsyncIterableIterator<Node_2>;
}

/** Optional parameters. */
export declare interface NodesListByDataBoxEdgeDeviceNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByDataBoxEdgeDeviceNext operation. */
export declare type NodesListByDataBoxEdgeDeviceNextResponse = NodeList_2;

/** Optional parameters. */
export declare interface NodesListByDataBoxEdgeDeviceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByDataBoxEdgeDevice operation. */
export declare type NodesListByDataBoxEdgeDeviceResponse = NodeList_2;

/**
 * Defines values for NodeStatus. \
 * {@link KnownNodeStatus} can be used interchangeably with NodeStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **Up** \
 * **Down** \
 * **Rebooting** \
 * **ShuttingDown**
 */
export declare type NodeStatus = string;

/** Operations. */
export declare interface Operation {
    /** Name of the operation. */
    name?: string;
    /** Is data action. */
    isDataAction?: boolean;
    /** Properties displayed for the operation. */
    display?: OperationDisplay;
    /** Origin of the operation. */
    origin?: string;
    /** Service specification. */
    serviceSpecification?: ServiceSpecification;
}

/** Operation display properties. */
export declare interface OperationDisplay {
    /** Provider name. */
    provider?: string;
    /** The type of resource in which the operation is performed. */
    resource?: string;
    /** Operation to be performed on the resource. */
    operation?: string;
    /** Description of the operation to be performed. */
    description?: string;
}

/** Interface representing a Operations. */
export declare interface Operations {
    /**
     * List all the supported operations.
     * @param options The options parameters.
     */
    list(options?: OperationsListOptionalParams): PagedAsyncIterableIterator<Operation>;
}

/** The list of operations used for the discovery of available provider operations. */
export declare interface OperationsList {
    /** The value. */
    value: Operation[];
    /** Link to the next set of results. */
    nextLink?: string;
}

/** Optional parameters. */
export declare interface OperationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type OperationsListNextResponse = OperationsList;

/** Optional parameters. */
export declare interface OperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OperationsListResponse = OperationsList;

/** Interface representing a OperationsStatus. */
export declare interface OperationsStatus {
    /**
     * Gets the details of a specified job on a Data Box Edge/Data Box Gateway device.
     * @param deviceName The device name.
     * @param name The job name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    get(deviceName: string, name: string, resourceGroupName: string, options?: OperationsStatusGetOptionalParams): Promise<OperationsStatusGetResponse>;
}

/** Optional parameters. */
export declare interface OperationsStatusGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type OperationsStatusGetResponse = Job;

/** The order details. */
export declare interface Order extends ARMBaseModel {
    /**
     * Order configured on ASE resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** The contact details. */
    contactInformation?: ContactDetails;
    /** The shipping address. */
    shippingAddress?: Address;
    /**
     * Current status of the order.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly currentStatus?: OrderStatus;
    /**
     * List of status changes in the order.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly orderHistory?: OrderStatus[];
    /**
     * Serial number of the device.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly serialNumber?: string;
    /**
     * Tracking information for the package delivered to the customer whether it has an original or a replacement device.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly deliveryTrackingInfo?: TrackingInfo[];
    /**
     * Tracking information for the package returned from the customer whether it has an original or a replacement device.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly returnTrackingInfo?: TrackingInfo[];
    /** ShipmentType of the order */
    shipmentType?: ShipmentType;
}

/** List of order entities. */
export declare interface OrderList {
    /**
     * The list of orders.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: Order[];
    /**
     * Link to the next set of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a Orders. */
export declare interface Orders {
    /**
     * Lists all the orders related to a Data Box Edge/Data Box Gateway device.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    listByDataBoxEdgeDevice(deviceName: string, resourceGroupName: string, options?: OrdersListByDataBoxEdgeDeviceOptionalParams): PagedAsyncIterableIterator<Order>;
    /**
     * Gets a specific order by name.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    get(deviceName: string, resourceGroupName: string, options?: OrdersGetOptionalParams): Promise<OrdersGetResponse>;
    /**
     * Creates or updates an order.
     * @param deviceName The order details of a device.
     * @param resourceGroupName The resource group name.
     * @param order The order to be created or updated.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(deviceName: string, resourceGroupName: string, order: Order, options?: OrdersCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<OrdersCreateOrUpdateResponse>, OrdersCreateOrUpdateResponse>>;
    /**
     * Creates or updates an order.
     * @param deviceName The order details of a device.
     * @param resourceGroupName The resource group name.
     * @param order The order to be created or updated.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(deviceName: string, resourceGroupName: string, order: Order, options?: OrdersCreateOrUpdateOptionalParams): Promise<OrdersCreateOrUpdateResponse>;
    /**
     * Deletes the order related to the device.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    beginDelete(deviceName: string, resourceGroupName: string, options?: OrdersDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes the order related to the device.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    beginDeleteAndWait(deviceName: string, resourceGroupName: string, options?: OrdersDeleteOptionalParams): Promise<void>;
    /**
     * Gets the DCAccess Code
     * @param deviceName The device name
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    listDCAccessCode(deviceName: string, resourceGroupName: string, options?: OrdersListDCAccessCodeOptionalParams): Promise<OrdersListDCAccessCodeResponse>;
}

/** Optional parameters. */
export declare interface OrdersCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type OrdersCreateOrUpdateResponse = Order;

/** Optional parameters. */
export declare interface OrdersDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface OrdersGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type OrdersGetResponse = Order;

/** Optional parameters. */
export declare interface OrdersListByDataBoxEdgeDeviceNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByDataBoxEdgeDeviceNext operation. */
export declare type OrdersListByDataBoxEdgeDeviceNextResponse = OrderList;

/** Optional parameters. */
export declare interface OrdersListByDataBoxEdgeDeviceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByDataBoxEdgeDevice operation. */
export declare type OrdersListByDataBoxEdgeDeviceResponse = OrderList;

/** Optional parameters. */
export declare interface OrdersListDCAccessCodeOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listDCAccessCode operation. */
export declare type OrdersListDCAccessCodeResponse = DCAccessCode;

/**
 * Defines values for OrderState. \
 * {@link KnownOrderState} can be used interchangeably with OrderState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Untracked** \
 * **AwaitingFulfillment** \
 * **AwaitingPreparation** \
 * **AwaitingShipment** \
 * **Shipped** \
 * **Arriving** \
 * **Delivered** \
 * **ReplacementRequested** \
 * **LostDevice** \
 * **Declined** \
 * **ReturnInitiated** \
 * **AwaitingReturnShipment** \
 * **ShippedBack** \
 * **CollectedAtMicrosoft** \
 * **AwaitingPickup** \
 * **PickupCompleted** \
 * **AwaitingDrop**
 */
export declare type OrderState = string;

/** Represents a single status change. */
export declare interface OrderStatus {
    /** Status of the order as per the allowed status types. */
    status: OrderState;
    /**
     * Time of status update.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly updateDateTime?: Date;
    /** Comments related to this status change. */
    comments?: string;
    /**
     * Tracking information related to the state in the ordering flow
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly trackingInformation?: TrackingInfo;
    /**
     * Dictionary to hold generic information which is not stored
     * by the already existing properties
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalOrderDetails?: {
        [propertyName: string]: string;
    };
}

/** Trigger details. */
export declare interface PeriodicTimerEventTrigger extends Trigger {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "PeriodicTimerEvent";
    /** Periodic timer details. */
    sourceInfo: PeriodicTimerSourceInfo;
    /** Role Sink information. */
    sinkInfo: RoleSinkInfo;
    /** A custom context tag typically used to correlate the trigger against its usage. For example, if a periodic timer trigger is intended for certain specific IoT modules in the device, the tag can be the name or the image URL of the module. */
    customContextTag?: string;
}

/** Periodic timer event source. */
export declare interface PeriodicTimerSourceInfo {
    /** The time of the day that results in a valid trigger. Schedule is computed with reference to the time specified upto seconds. If timezone is not specified the time will considered to be in device timezone. The value will always be returned as UTC time. */
    startTime: Date;
    /** Periodic frequency at which timer event needs to be raised. Supports daily, hourly, minutes, and seconds. */
    schedule: string;
    /** Topic where periodic events are published to IoT device. */
    topic?: string;
}

/**
 * Defines values for PlatformType. \
 * {@link KnownPlatformType} can be used interchangeably with PlatformType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Windows** \
 * **Linux**
 */
export declare type PlatformType = string;

/**
 * Defines values for PosixComplianceStatus. \
 * {@link KnownPosixComplianceStatus} can be used interchangeably with PosixComplianceStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Invalid** \
 * **Enabled** \
 * **Disabled**
 */
export declare type PosixComplianceStatus = string;

/**
 * Defines values for ProactiveDiagnosticsConsent. \
 * {@link KnownProactiveDiagnosticsConsent} can be used interchangeably with ProactiveDiagnosticsConsent,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export declare type ProactiveDiagnosticsConsent = string;

/** Fields for tracking refresh job on the share or container. */
export declare interface RefreshDetails {
    /** If a refresh job is currently in progress on this share or container, this field indicates the ARM resource ID of that job. The field is empty if no job is in progress. */
    inProgressRefreshJobId?: string;
    /** Indicates the completed time for the last refresh job on this particular share or container, if any.This could be a failed job or a successful job. */
    lastCompletedRefreshJobTimeInUTC?: Date;
    /** Indicates the relative path of the error xml for the last refresh job on this particular share or container, if any. This could be a failed job or a successful job. */
    errorManifestFile?: string;
    /** Indicates the id of the last refresh job on this particular share or container,if any. This could be a failed job or a successful job. */
    lastJob?: string;
}

/**
 * Defines values for RemoteApplicationType. \
 * {@link KnownRemoteApplicationType} can be used interchangeably with RemoteApplicationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Powershell** \
 * **WAC** \
 * **LocalUI** \
 * **AllApplications**
 */
export declare type RemoteApplicationType = string;

/** RemoteApplicationType for which remote support settings is being modified */
export declare interface RemoteSupportSettings {
    /** Remote application type */
    remoteApplicationType?: RemoteApplicationType;
    /** Access level allowed for this remote application type */
    accessLevel?: AccessLevel;
    /** Expiration time stamp */
    expirationTimeStampInUTC?: Date;
}

/** Msi identity details of the resource */
export declare interface ResourceIdentity {
    /** Identity type */
    type?: MsiIdentityType;
    /**
     * Service Principal Id backing the Msi
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
    /**
     * Home Tenant Id
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
}

/** Fields for tracking resource move */
export declare interface ResourceMoveDetails {
    /** Denotes whether move operation is in progress */
    operationInProgress?: ResourceMoveStatus;
    /** Denotes the timeout of the operation to finish */
    operationInProgressLockTimeoutInUTC?: Date;
}

/**
 * Defines values for ResourceMoveStatus. \
 * {@link KnownResourceMoveStatus} can be used interchangeably with ResourceMoveStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **ResourceMoveInProgress** \
 * **ResourceMoveFailed**
 */
export declare type ResourceMoveStatus = string;

/** Resource type Sku object */
export declare interface ResourceTypeSku {
    /**
     * The resource type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resourceType?: string;
    /**
     * The skus.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly skus?: SkuInformation[];
}

/** Compute role. */
export declare interface Role extends ARMBaseModel {
    /** Role type. */
    kind: RoleTypes;
    /**
     * Role configured on ASE resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
}

/** Collection of all the roles on the Data Box Edge device. */
export declare interface RoleList {
    /**
     * The Value.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: RoleUnion[];
    /**
     * Link to the next set of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a Roles. */
export declare interface Roles {
    /**
     * Lists all the roles configured in a Data Box Edge/Data Box Gateway device.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    listByDataBoxEdgeDevice(deviceName: string, resourceGroupName: string, options?: RolesListByDataBoxEdgeDeviceOptionalParams): PagedAsyncIterableIterator<RoleUnion>;
    /**
     * Gets a specific role by name.
     * @param deviceName The device name.
     * @param name The role name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    get(deviceName: string, name: string, resourceGroupName: string, options?: RolesGetOptionalParams): Promise<RolesGetResponse>;
    /**
     * Create or update a role.
     * @param deviceName The device name.
     * @param name The role name.
     * @param resourceGroupName The resource group name.
     * @param role The role properties.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(deviceName: string, name: string, resourceGroupName: string, role: RoleUnion, options?: RolesCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<RolesCreateOrUpdateResponse>, RolesCreateOrUpdateResponse>>;
    /**
     * Create or update a role.
     * @param deviceName The device name.
     * @param name The role name.
     * @param resourceGroupName The resource group name.
     * @param role The role properties.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(deviceName: string, name: string, resourceGroupName: string, role: RoleUnion, options?: RolesCreateOrUpdateOptionalParams): Promise<RolesCreateOrUpdateResponse>;
    /**
     * Deletes the role on the device.
     * @param deviceName The device name.
     * @param name The role name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    beginDelete(deviceName: string, name: string, resourceGroupName: string, options?: RolesDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes the role on the device.
     * @param deviceName The device name.
     * @param name The role name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    beginDeleteAndWait(deviceName: string, name: string, resourceGroupName: string, options?: RolesDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface RolesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type RolesCreateOrUpdateResponse = RoleUnion;

/** Optional parameters. */
export declare interface RolesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface RolesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type RolesGetResponse = RoleUnion;

/** Compute role against which events will be raised. */
export declare interface RoleSinkInfo {
    /** Compute role ID. */
    roleId: string;
}

/** Optional parameters. */
export declare interface RolesListByDataBoxEdgeDeviceNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByDataBoxEdgeDeviceNext operation. */
export declare type RolesListByDataBoxEdgeDeviceNextResponse = RoleList;

/** Optional parameters. */
export declare interface RolesListByDataBoxEdgeDeviceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByDataBoxEdgeDevice operation. */
export declare type RolesListByDataBoxEdgeDeviceResponse = RoleList;

/**
 * Defines values for RoleStatus. \
 * {@link KnownRoleStatus} can be used interchangeably with RoleStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export declare type RoleStatus = string;

/**
 * Defines values for RoleTypes. \
 * {@link KnownRoleTypes} can be used interchangeably with RoleTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **IOT** \
 * **ASA** \
 * **Functions** \
 * **Cognitive** \
 * **MEC** \
 * **CloudEdgeManagement** \
 * **Kubernetes**
 */
export declare type RoleTypes = string;

export declare type RoleUnion = Role | CloudEdgeManagementRole | IoTRole | KubernetesRole | MECRole;

/** Holds device secret either as a KeyVault reference or as an encrypted value. */
export declare interface Secret {
    /** Encrypted (using device public key) secret value. */
    encryptedSecret?: AsymmetricEncryptedSecret;
    /** Id of the Key-Vault where secret is stored (ex: secrets/AuthClientSecret/82ef4346187a4033a10d629cde07d740). */
    keyVaultId?: string;
}

/** The security settings of a device. */
export declare interface SecuritySettings extends ARMBaseModel {
    /** Device administrator password as an encrypted string (encrypted using RSA PKCS #1) is used to sign into the  local web UI of the device. The Actual password should have at least 8 characters that are a combination of  uppercase, lowercase, numeric, and special characters. */
    deviceAdminPassword: AsymmetricEncryptedSecret;
}

/** Service specification. */
export declare interface ServiceSpecification {
    /** Metric specification as defined by shoebox. */
    metricSpecifications?: MetricSpecificationV1[];
}

/** Represents a share on the  Data Box Edge/Gateway device. */
export declare interface Share extends ARMBaseModel {
    /**
     * Share on ASE device
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** Description for the share. */
    description?: string;
    /** Current status of the share. */
    shareStatus: ShareStatus;
    /** Current monitoring status of the share. */
    monitoringStatus: MonitoringStatus;
    /** Azure container mapping for the share. */
    azureContainerInfo?: AzureContainerInfo;
    /** Access protocol to be used by the share. */
    accessProtocol: ShareAccessProtocol;
    /** Mapping of users and corresponding access rights on the share (required for SMB protocol). */
    userAccessRights?: UserAccessRight[];
    /** List of IP addresses and corresponding access rights on the share(required for NFS protocol). */
    clientAccessRights?: ClientAccessRight[];
    /** Details of the refresh job on this share. */
    refreshDetails?: RefreshDetails;
    /**
     * Share mount point to the role.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly shareMappings?: MountPointMap[];
    /** Data policy of the share. */
    dataPolicy?: DataPolicy;
}

/**
 * Defines values for ShareAccessProtocol. \
 * {@link KnownShareAccessProtocol} can be used interchangeably with ShareAccessProtocol,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SMB** \
 * **NFS**
 */
export declare type ShareAccessProtocol = string;

/** Specifies the mapping between this particular user and the type of access he has on shares on this device. */
export declare interface ShareAccessRight {
    /** The share ID. */
    shareId: string;
    /** Type of access to be allowed on the share for this user. */
    accessType: ShareAccessType;
}

/**
 * Defines values for ShareAccessType. \
 * {@link KnownShareAccessType} can be used interchangeably with ShareAccessType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Change** \
 * **Read** \
 * **Custom**
 */
export declare type ShareAccessType = string;

/** Collection of all the shares on the Data Box Edge/Gateway device. */
export declare interface ShareList {
    /**
     * The list of shares.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: Share[];
    /**
     * Link to the next set of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a Shares. */
export declare interface Shares {
    /**
     * Lists all the shares in a Data Box Edge/Data Box Gateway device.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    listByDataBoxEdgeDevice(deviceName: string, resourceGroupName: string, options?: SharesListByDataBoxEdgeDeviceOptionalParams): PagedAsyncIterableIterator<Share>;
    /**
     * Gets a share by name.
     * @param deviceName The device name.
     * @param name The share name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    get(deviceName: string, name: string, resourceGroupName: string, options?: SharesGetOptionalParams): Promise<SharesGetResponse>;
    /**
     * Creates a new share or updates an existing share on the device.
     * @param deviceName The device name.
     * @param name The share name.
     * @param resourceGroupName The resource group name.
     * @param share The share properties.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(deviceName: string, name: string, resourceGroupName: string, share: Share, options?: SharesCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<SharesCreateOrUpdateResponse>, SharesCreateOrUpdateResponse>>;
    /**
     * Creates a new share or updates an existing share on the device.
     * @param deviceName The device name.
     * @param name The share name.
     * @param resourceGroupName The resource group name.
     * @param share The share properties.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(deviceName: string, name: string, resourceGroupName: string, share: Share, options?: SharesCreateOrUpdateOptionalParams): Promise<SharesCreateOrUpdateResponse>;
    /**
     * Deletes the share on the Data Box Edge/Data Box Gateway device.
     * @param deviceName The device name.
     * @param name The share name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    beginDelete(deviceName: string, name: string, resourceGroupName: string, options?: SharesDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes the share on the Data Box Edge/Data Box Gateway device.
     * @param deviceName The device name.
     * @param name The share name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    beginDeleteAndWait(deviceName: string, name: string, resourceGroupName: string, options?: SharesDeleteOptionalParams): Promise<void>;
    /**
     * Refreshes the share metadata with the data from the cloud.
     * @param deviceName The device name.
     * @param name The share name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    beginRefresh(deviceName: string, name: string, resourceGroupName: string, options?: SharesRefreshOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Refreshes the share metadata with the data from the cloud.
     * @param deviceName The device name.
     * @param name The share name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    beginRefreshAndWait(deviceName: string, name: string, resourceGroupName: string, options?: SharesRefreshOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface SharesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type SharesCreateOrUpdateResponse = Share;

/** Optional parameters. */
export declare interface SharesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface SharesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type SharesGetResponse = Share;

/** Optional parameters. */
export declare interface SharesListByDataBoxEdgeDeviceNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByDataBoxEdgeDeviceNext operation. */
export declare type SharesListByDataBoxEdgeDeviceNextResponse = ShareList;

/** Optional parameters. */
export declare interface SharesListByDataBoxEdgeDeviceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByDataBoxEdgeDevice operation. */
export declare type SharesListByDataBoxEdgeDeviceResponse = ShareList;

/** Optional parameters. */
export declare interface SharesRefreshOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/**
 * Defines values for ShareStatus. \
 * {@link KnownShareStatus} can be used interchangeably with ShareStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Offline** \
 * **Unknown** \
 * **OK** \
 * **Updating** \
 * **NeedsAttention**
 */
export declare type ShareStatus = string;

/**
 * Defines values for ShipmentType. \
 * {@link KnownShipmentType} can be used interchangeably with ShipmentType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotApplicable** \
 * **ShippedToCustomer** \
 * **SelfPickup**
 */
export declare type ShipmentType = string;

/** The SKU type. */
export declare interface Sku {
    /** SKU name. */
    name?: SkuName;
    /** The SKU tier. This is based on the SKU name. */
    tier?: SkuTier;
}

/**
 * Defines values for SkuAvailability. \
 * {@link KnownSkuAvailability} can be used interchangeably with SkuAvailability,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Available** \
 * **Unavailable**
 */
export declare type SkuAvailability = string;

/** The metadata to describe the capability. */
export declare interface SkuCapability {
    /**
     * An invariant to describe the feature.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * An invariant if the feature is measured by quantity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: string;
}

/** The metadata for retrieving price info. */
export declare interface SkuCost {
    /**
     * Used for querying price from commerce.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly meterId?: string;
    /**
     * The cost quantity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly quantity?: number;
    /**
     * The extended unit.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly extendedUnit?: string;
}

/** Sku information */
export declare interface SkuInformation {
    /**
     * The sku name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The sku tier.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tier?: string;
    /**
     * The sku kind.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly kind?: string;
    /**
     * The Sku family.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly family?: string;
    /**
     * The pricing info of the Sku.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly costs?: SkuCost[];
    /**
     * The locations where Sku is available.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly locations?: string[];
    /**
     * The locations where Sku is available with zones and sites info
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly locationInfo?: SkuLocationInfo[];
    /**
     * The required quotaIds for the sku to be available.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly requiredQuotaIds?: string[];
    /**
     * The required features for the sku to be available.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly requiredFeatures?: string[];
}

/** List of SKU Information objects */
export declare interface SkuInformationList {
    /**
     * List of ResourceTypeSku objects
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: ResourceTypeSku[];
    /**
     * Links to the next set of results
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** The location info. */
export declare interface SkuLocationInfo {
    /**
     * The location.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly location?: string;
    /**
     * The zones.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly zones?: string[];
    /**
     * The sites.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly sites?: string[];
}

/**
 * Defines values for SkuName. \
 * {@link KnownSkuName} can be used interchangeably with SkuName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Gateway** \
 * **Edge** \
 * **TEA_1Node** \
 * **TEA_1Node_UPS** \
 * **TEA_1Node_Heater** \
 * **TEA_1Node_UPS_Heater** \
 * **TEA_4Node_Heater** \
 * **TEA_4Node_UPS_Heater** \
 * **TMA** \
 * **TDC** \
 * **TCA_Small** \
 * **GPU** \
 * **TCA_Large** \
 * **EdgeP_Base** \
 * **EdgeP_High** \
 * **EdgePR_Base** \
 * **EdgePR_Base_UPS** \
 * **EP2_64_1VPU_W** \
 * **EP2_128_1T4_Mx1_W** \
 * **EP2_256_2T4_W** \
 * **EdgeMR_Mini** \
 * **RCA_Small** \
 * **RCA_Large** \
 * **RDC** \
 * **Management**
 */
export declare type SkuName = string;

/**
 * Defines values for SkuSignupOption. \
 * {@link KnownSkuSignupOption} can be used interchangeably with SkuSignupOption,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Available**
 */
export declare type SkuSignupOption = string;

/**
 * Defines values for SkuTier. \
 * {@link KnownSkuTier} can be used interchangeably with SkuTier,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Standard**
 */
export declare type SkuTier = string;

/**
 * Defines values for SkuVersion. \
 * {@link KnownSkuVersion} can be used interchangeably with SkuVersion,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Stable** \
 * **Preview**
 */
export declare type SkuVersion = string;

/**
 * Defines values for SSLStatus. \
 * {@link KnownSSLStatus} can be used interchangeably with SSLStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export declare type SSLStatus = string;

/** Represents a Storage Account on the  Data Box Edge/Gateway device. */
export declare interface StorageAccount extends ARMBaseModel {
    /**
     * StorageAccount object on ASE device
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** Description for the storage Account. */
    description?: string;
    /** Current status of the storage account */
    storageAccountStatus?: StorageAccountStatus;
    /** Data policy of the storage Account. */
    dataPolicy: DataPolicy;
    /** Storage Account Credential Id */
    storageAccountCredentialId?: string;
    /**
     * BlobEndpoint of Storage Account
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly blobEndpoint?: string;
    /**
     * The Container Count. Present only for Storage Accounts with DataPolicy set to Cloud.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly containerCount?: number;
}

/** The storage account credential. */
export declare interface StorageAccountCredential extends ARMBaseModel {
    /**
     * StorageAccountCredential object
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** Alias for the storage account. */
    alias: string;
    /** Username for the storage account. */
    userName?: string;
    /** Encrypted storage key. */
    accountKey?: AsymmetricEncryptedSecret;
    /** Connection string for the storage account. Use this string if username and account key are not specified. */
    connectionString?: string;
    /** Signifies whether SSL needs to be enabled or not. */
    sslStatus: SSLStatus;
    /** Blob end point for private clouds. */
    blobDomainName?: string;
    /** Type of storage accessed on the storage account. */
    accountType: AccountType;
    /** Id of the storage account. */
    storageAccountId?: string;
}

/** The collection of storage account credentials. */
export declare interface StorageAccountCredentialList {
    /**
     * The value.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: StorageAccountCredential[];
    /**
     * Link to the next set of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a StorageAccountCredentials. */
export declare interface StorageAccountCredentials {
    /**
     * Gets all the storage account credentials in a Data Box Edge/Data Box Gateway device.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    listByDataBoxEdgeDevice(deviceName: string, resourceGroupName: string, options?: StorageAccountCredentialsListByDataBoxEdgeDeviceOptionalParams): PagedAsyncIterableIterator<StorageAccountCredential>;
    /**
     * Gets the properties of the specified storage account credential.
     * @param deviceName The device name.
     * @param name The storage account credential name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    get(deviceName: string, name: string, resourceGroupName: string, options?: StorageAccountCredentialsGetOptionalParams): Promise<StorageAccountCredentialsGetResponse>;
    /**
     * Creates or updates the storage account credential.
     * @param deviceName The device name.
     * @param name The storage account credential name.
     * @param resourceGroupName The resource group name.
     * @param storageAccountCredential The storage account credential.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(deviceName: string, name: string, resourceGroupName: string, storageAccountCredential: StorageAccountCredential, options?: StorageAccountCredentialsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<StorageAccountCredentialsCreateOrUpdateResponse>, StorageAccountCredentialsCreateOrUpdateResponse>>;
    /**
     * Creates or updates the storage account credential.
     * @param deviceName The device name.
     * @param name The storage account credential name.
     * @param resourceGroupName The resource group name.
     * @param storageAccountCredential The storage account credential.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(deviceName: string, name: string, resourceGroupName: string, storageAccountCredential: StorageAccountCredential, options?: StorageAccountCredentialsCreateOrUpdateOptionalParams): Promise<StorageAccountCredentialsCreateOrUpdateResponse>;
    /**
     * Deletes the storage account credential.
     * @param deviceName The device name.
     * @param name The storage account credential name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    beginDelete(deviceName: string, name: string, resourceGroupName: string, options?: StorageAccountCredentialsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes the storage account credential.
     * @param deviceName The device name.
     * @param name The storage account credential name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    beginDeleteAndWait(deviceName: string, name: string, resourceGroupName: string, options?: StorageAccountCredentialsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface StorageAccountCredentialsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type StorageAccountCredentialsCreateOrUpdateResponse = StorageAccountCredential;

/** Optional parameters. */
export declare interface StorageAccountCredentialsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface StorageAccountCredentialsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type StorageAccountCredentialsGetResponse = StorageAccountCredential;

/** Optional parameters. */
export declare interface StorageAccountCredentialsListByDataBoxEdgeDeviceNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByDataBoxEdgeDeviceNext operation. */
export declare type StorageAccountCredentialsListByDataBoxEdgeDeviceNextResponse = StorageAccountCredentialList;

/** Optional parameters. */
export declare interface StorageAccountCredentialsListByDataBoxEdgeDeviceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByDataBoxEdgeDevice operation. */
export declare type StorageAccountCredentialsListByDataBoxEdgeDeviceResponse = StorageAccountCredentialList;

/** Collection of all the Storage Accounts on the Data Box Edge/Gateway device. */
export declare interface StorageAccountList {
    /**
     * The list of storageAccounts.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: StorageAccount[];
    /**
     * Link to the next set of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a StorageAccounts. */
export declare interface StorageAccounts {
    /**
     * Lists all the StorageAccounts in a Data Box Edge/Data Box Gateway device.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    listByDataBoxEdgeDevice(deviceName: string, resourceGroupName: string, options?: StorageAccountsListByDataBoxEdgeDeviceOptionalParams): PagedAsyncIterableIterator<StorageAccount>;
    /**
     * Gets a StorageAccount by name.
     * @param deviceName The device name.
     * @param storageAccountName The storage account name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    get(deviceName: string, storageAccountName: string, resourceGroupName: string, options?: StorageAccountsGetOptionalParams): Promise<StorageAccountsGetResponse>;
    /**
     * Creates a new StorageAccount or updates an existing StorageAccount on the device.
     * @param deviceName The device name.
     * @param storageAccountName The StorageAccount name.
     * @param resourceGroupName The resource group name.
     * @param storageAccount The StorageAccount properties.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(deviceName: string, storageAccountName: string, resourceGroupName: string, storageAccount: StorageAccount, options?: StorageAccountsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<StorageAccountsCreateOrUpdateResponse>, StorageAccountsCreateOrUpdateResponse>>;
    /**
     * Creates a new StorageAccount or updates an existing StorageAccount on the device.
     * @param deviceName The device name.
     * @param storageAccountName The StorageAccount name.
     * @param resourceGroupName The resource group name.
     * @param storageAccount The StorageAccount properties.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(deviceName: string, storageAccountName: string, resourceGroupName: string, storageAccount: StorageAccount, options?: StorageAccountsCreateOrUpdateOptionalParams): Promise<StorageAccountsCreateOrUpdateResponse>;
    /**
     * Deletes the StorageAccount on the Data Box Edge/Data Box Gateway device.
     * @param deviceName The device name.
     * @param storageAccountName The StorageAccount name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    beginDelete(deviceName: string, storageAccountName: string, resourceGroupName: string, options?: StorageAccountsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes the StorageAccount on the Data Box Edge/Data Box Gateway device.
     * @param deviceName The device name.
     * @param storageAccountName The StorageAccount name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    beginDeleteAndWait(deviceName: string, storageAccountName: string, resourceGroupName: string, options?: StorageAccountsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface StorageAccountsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type StorageAccountsCreateOrUpdateResponse = StorageAccount;

/** Optional parameters. */
export declare interface StorageAccountsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface StorageAccountsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type StorageAccountsGetResponse = StorageAccount;

/** Optional parameters. */
export declare interface StorageAccountsListByDataBoxEdgeDeviceNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByDataBoxEdgeDeviceNext operation. */
export declare type StorageAccountsListByDataBoxEdgeDeviceNextResponse = StorageAccountList;

/** Optional parameters. */
export declare interface StorageAccountsListByDataBoxEdgeDeviceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByDataBoxEdgeDevice operation. */
export declare type StorageAccountsListByDataBoxEdgeDeviceResponse = StorageAccountList;

/**
 * Defines values for StorageAccountStatus. \
 * {@link KnownStorageAccountStatus} can be used interchangeably with StorageAccountStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **OK** \
 * **Offline** \
 * **Unknown** \
 * **Updating** \
 * **NeedsAttention**
 */
export declare type StorageAccountStatus = string;

export declare interface SubscriptionRegisteredFeatures {
    name?: string;
    state?: string;
}

/**
 * Defines values for SubscriptionState. \
 * {@link KnownSubscriptionState} can be used interchangeably with SubscriptionState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Registered** \
 * **Warned** \
 * **Suspended** \
 * **Deleted** \
 * **Unregistered**
 */
export declare type SubscriptionState = string;

/** Interface representing a SupportPackages. */
export declare interface SupportPackages {
    /**
     * Triggers support package on the device
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param triggerSupportPackageRequest The trigger support package request object
     * @param options The options parameters.
     */
    beginTriggerSupportPackage(deviceName: string, resourceGroupName: string, triggerSupportPackageRequest: TriggerSupportPackageRequest, options?: SupportPackagesTriggerSupportPackageOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Triggers support package on the device
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param triggerSupportPackageRequest The trigger support package request object
     * @param options The options parameters.
     */
    beginTriggerSupportPackageAndWait(deviceName: string, resourceGroupName: string, triggerSupportPackageRequest: TriggerSupportPackageRequest, options?: SupportPackagesTriggerSupportPackageOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface SupportPackagesTriggerSupportPackageOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Symmetric key for authentication. */
export declare interface SymmetricKey {
    /** Connection string based on the symmetric key. */
    connectionString?: AsymmetricEncryptedSecret;
}

/** Metadata pertaining to creation and last modification of the resource. */
export declare interface SystemData {
    /** The identity that created the resource. */
    createdBy?: string;
    /** The type of identity that created the resource. */
    createdByType?: CreatedByType;
    /** The timestamp of resource creation (UTC). */
    createdAt?: Date;
    /** The identity that last modified the resource. */
    lastModifiedBy?: string;
    /** The type of identity that last modified the resource. */
    lastModifiedByType?: CreatedByType;
    /** The type of identity that last modified the resource. */
    lastModifiedAt?: Date;
}

/**
 * Defines values for TimeGrain. \
 * {@link KnownTimeGrain} can be used interchangeably with TimeGrain,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **PT1M** \
 * **PT5M** \
 * **PT15M** \
 * **PT30M** \
 * **PT1H** \
 * **PT6H** \
 * **PT12H** \
 * **PT1D**
 */
export declare type TimeGrain = string;

/** Tracking courier information. */
export declare interface TrackingInfo {
    /** Serial number of the device being tracked. */
    serialNumber?: string;
    /** Name of the carrier used in the delivery. */
    carrierName?: string;
    /** Tracking ID of the shipment. */
    trackingId?: string;
    /** Tracking URL of the shipment. */
    trackingUrl?: string;
}

/** Trigger details. */
export declare interface Trigger extends ARMBaseModel {
    /**
     * Trigger in DataBoxEdge Resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** Trigger Kind. */
    kind: TriggerEventType;
}

/**
 * Defines values for TriggerEventType. \
 * {@link KnownTriggerEventType} can be used interchangeably with TriggerEventType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **FileEvent** \
 * **PeriodicTimerEvent**
 */
export declare type TriggerEventType = string;

/** Collection of all trigger on the data box edge device. */
export declare interface TriggerList {
    /**
     * The list of triggers.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: TriggerUnion[];
    /**
     * Link to the next set of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a Triggers. */
export declare interface Triggers {
    /**
     * Lists all the triggers configured in the device.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    listByDataBoxEdgeDevice(deviceName: string, resourceGroupName: string, options?: TriggersListByDataBoxEdgeDeviceOptionalParams): PagedAsyncIterableIterator<TriggerUnion>;
    /**
     * Get a specific trigger by name.
     * @param deviceName The device name.
     * @param name The trigger name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    get(deviceName: string, name: string, resourceGroupName: string, options?: TriggersGetOptionalParams): Promise<TriggersGetResponse>;
    /**
     * Creates or updates a trigger.
     * @param deviceName Creates or updates a trigger
     * @param name The trigger name.
     * @param resourceGroupName The resource group name.
     * @param trigger The trigger.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(deviceName: string, name: string, resourceGroupName: string, trigger: TriggerUnion, options?: TriggersCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<TriggersCreateOrUpdateResponse>, TriggersCreateOrUpdateResponse>>;
    /**
     * Creates or updates a trigger.
     * @param deviceName Creates or updates a trigger
     * @param name The trigger name.
     * @param resourceGroupName The resource group name.
     * @param trigger The trigger.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(deviceName: string, name: string, resourceGroupName: string, trigger: TriggerUnion, options?: TriggersCreateOrUpdateOptionalParams): Promise<TriggersCreateOrUpdateResponse>;
    /**
     * Deletes the trigger on the gateway device.
     * @param deviceName The device name.
     * @param name The trigger name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    beginDelete(deviceName: string, name: string, resourceGroupName: string, options?: TriggersDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes the trigger on the gateway device.
     * @param deviceName The device name.
     * @param name The trigger name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    beginDeleteAndWait(deviceName: string, name: string, resourceGroupName: string, options?: TriggersDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface TriggersCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type TriggersCreateOrUpdateResponse = TriggerUnion;

/** Optional parameters. */
export declare interface TriggersDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface TriggersGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type TriggersGetResponse = TriggerUnion;

/** Optional parameters. */
export declare interface TriggersListByDataBoxEdgeDeviceNextOptionalParams extends coreClient.OperationOptions {
    /** Specify $filter='CustomContextTag eq <tag>' to filter on custom context tag property */
    filter?: string;
}

/** Contains response data for the listByDataBoxEdgeDeviceNext operation. */
export declare type TriggersListByDataBoxEdgeDeviceNextResponse = TriggerList;

/** Optional parameters. */
export declare interface TriggersListByDataBoxEdgeDeviceOptionalParams extends coreClient.OperationOptions {
    /** Specify $filter='CustomContextTag eq <tag>' to filter on custom context tag property */
    filter?: string;
}

/** Contains response data for the listByDataBoxEdgeDevice operation. */
export declare type TriggersListByDataBoxEdgeDeviceResponse = TriggerList;

/** The request object for trigger support package. */
export declare interface TriggerSupportPackageRequest extends ARMBaseModel {
    /** Start of the timespan of the log collection */
    minimumTimeStamp?: Date;
    /** MaximumTimeStamp until where logs need to be collected */
    maximumTimeStamp?: Date;
    /**
     * Type of files, which need to be included in the logs
     * This will contain the type of logs (Default/DefaultWithDumps/None/All/DefaultWithArchived)
     * or a comma separated list of log types that are required
     */
    include?: string;
}

export declare type TriggerUnion = Trigger | FileEventTrigger | PeriodicTimerEventTrigger;

/** Update Specific attributes */
export declare interface UpdateDetails {
    /** Title of the Update */
    updateTitle?: string;
    /** Size of the update(In Bytes) */
    updateSize?: number;
    /** Type of the Update */
    updateType?: UpdateType;
    /** Target Version number */
    targetVersion?: string;
    /** Friendly Version Number */
    friendlyVersionNumber?: string;
    /** Estimated Install Time for the update */
    estimatedInstallTimeInMins?: number;
    /** Indicates if updates are available and at least one of the updates needs a reboot. */
    rebootBehavior?: InstallRebootBehavior;
    /** Impact of Installing an updateType */
    installationImpact?: InstallationImpact;
    /** Status of the update. */
    status?: UpdateStatus;
}

/** Details about the download progress of update. */
export declare interface UpdateDownloadProgress {
    /**
     * The download phase.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly downloadPhase?: DownloadPhase;
    /**
     * Percentage of completion.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly percentComplete?: number;
    /**
     * Total bytes to download.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly totalBytesToDownload?: number;
    /**
     * Total bytes downloaded.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly totalBytesDownloaded?: number;
    /**
     * Number of updates to download.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly numberOfUpdatesToDownload?: number;
    /**
     * Number of updates downloaded.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly numberOfUpdatesDownloaded?: number;
}

/** Progress details during installation of updates. */
export declare interface UpdateInstallProgress {
    /**
     * Percentage completed.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly percentComplete?: number;
    /**
     * Number of updates to install.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly numberOfUpdatesToInstall?: number;
    /**
     * Number of updates installed.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly numberOfUpdatesInstalled?: number;
}

/**
 * Defines values for UpdateOperation. \
 * {@link KnownUpdateOperation} can be used interchangeably with UpdateOperation,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Scan** \
 * **Download** \
 * **Install**
 */
export declare type UpdateOperation = string;

/**
 * Defines values for UpdateOperationStage. \
 * {@link KnownUpdateOperationStage} can be used interchangeably with UpdateOperationStage,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **Initial** \
 * **ScanStarted** \
 * **ScanComplete** \
 * **ScanFailed** \
 * **DownloadStarted** \
 * **DownloadComplete** \
 * **DownloadFailed** \
 * **InstallStarted** \
 * **InstallComplete** \
 * **InstallFailed** \
 * **RebootInitiated** \
 * **Success** \
 * **Failure** \
 * **RescanStarted** \
 * **RescanComplete** \
 * **RescanFailed**
 */
export declare type UpdateOperationStage = string;

/**
 * Defines values for UpdateStatus. \
 * {@link KnownUpdateStatus} can be used interchangeably with UpdateStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **DownloadPending** \
 * **DownloadStarted** \
 * **DownloadCompleted** \
 * **InstallStarted** \
 * **InstallCompleted**
 */
export declare type UpdateStatus = string;

/** Details about ongoing updates and availability of updates on the device. */
export declare interface UpdateSummary extends ARMBaseModel {
    /**
     * UpdateSummary Result
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** The current version of the device in format: 1.2.17312.13.", */
    deviceVersionNumber?: string;
    /** The current version of the device in text format. */
    friendlyDeviceVersionName?: string;
    /** The last time when a scan was done on the device. */
    deviceLastScannedDateTime?: Date;
    /** The time when the last scan job was completed (success/cancelled/failed) on the appliance. */
    lastCompletedScanJobDateTime?: Date;
    /** Time when the last scan job is successfully completed. */
    lastSuccessfulScanJobTime?: Date;
    /**
     * The time when the last Download job was completed (success/cancelled/failed) on the appliance.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastCompletedDownloadJobDateTime?: Date;
    /**
     * JobId of the last ran download job.(Can be success/cancelled/failed)
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastCompletedDownloadJobId?: string;
    /**
     * JobStatus of the last ran download job.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastDownloadJobStatus?: JobStatus;
    /** The time when the Last Install job was completed successfully on the appliance */
    lastSuccessfulInstallJobDateTime?: Date;
    /**
     * The time when the last Install job was completed (success/cancelled/failed) on the appliance.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastCompletedInstallJobDateTime?: Date;
    /**
     * JobId of the last ran install job.(Can be success/cancelled/failed)
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastCompletedInstallJobId?: string;
    /**
     * JobStatus of the last ran install job.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastInstallJobStatus?: JobStatus;
    /**
     * The number of updates available for the current device version as per the last device scan.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly totalNumberOfUpdatesAvailable?: number;
    /**
     * The total number of items pending download.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly totalNumberOfUpdatesPendingDownload?: number;
    /**
     * The total number of items pending install.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly totalNumberOfUpdatesPendingInstall?: number;
    /**
     * Indicates if updates are available and at least one of the updates needs a reboot.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly rebootBehavior?: InstallRebootBehavior;
    /**
     * The current update operation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly ongoingUpdateOperation?: UpdateOperation;
    /**
     * The job ID of the download job in progress.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly inProgressDownloadJobId?: string;
    /**
     * The job ID of the install job in progress.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly inProgressInstallJobId?: string;
    /**
     * The time when the currently running download (if any) started.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly inProgressDownloadJobStartedDateTime?: Date;
    /**
     * The time when the currently running install (if any) started.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly inProgressInstallJobStartedDateTime?: Date;
    /**
     * The list of updates available for install.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly updateTitles?: string[];
    /**
     * The list of updates available for install.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly updates?: UpdateDetails[];
    /**
     * The total size of updates available for download in bytes.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly totalUpdateSizeInBytes?: number;
    /**
     * The total time in Minutes
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly totalTimeInMinutes?: number;
}

/**
 * Defines values for UpdateType. \
 * {@link KnownUpdateType} can be used interchangeably with UpdateType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Software** \
 * **Kubernetes** \
 * **Firmware**
 */
export declare type UpdateType = string;

/** The upload certificate request. */
export declare interface UploadCertificateRequest {
    /** The authentication type. */
    authenticationType?: AuthenticationType;
    /** The base64 encoded certificate raw data. */
    certificate: string;
}

/** The upload registration certificate response. */
export declare interface UploadCertificateResponse {
    /** Specifies authentication type. */
    authType?: AuthenticationType;
    /**
     * The resource ID of the Data Box Edge/Gateway device.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resourceId?: string;
    /**
     * Azure Active Directory tenant authority.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly aadAuthority?: string;
    /**
     * Azure Active Directory tenant ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly aadTenantId?: string;
    /**
     * Azure Active Directory service principal client ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly servicePrincipalClientId?: string;
    /**
     * Azure Active Directory service principal object ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly servicePrincipalObjectId?: string;
    /**
     * The azure management endpoint audience.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly azureManagementEndpointAudience?: string;
    /**
     * Identifier of the target resource that is the recipient of the requested token.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly aadAudience?: string;
}

/** Represents a user who has access to one or more shares on the Data Box Edge/Gateway device. */
export declare interface User extends ARMBaseModel {
    /**
     * User in DataBoxEdge Resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** The password details. */
    encryptedPassword?: AsymmetricEncryptedSecret;
    /**
     * List of shares that the user has rights on. This field should not be specified during user creation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly shareAccessRights?: ShareAccessRight[];
    /** Type of the user. */
    userType: UserType;
}

/** The mapping between a particular user and the access type on the SMB share. */
export declare interface UserAccessRight {
    /** User ID (already existing in the device). */
    userId: string;
    /** Type of access to be allowed for the user. */
    accessType: ShareAccessType;
}

/** Collection of users. */
export declare interface UserList {
    /**
     * The list of users.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: User[];
    /**
     * Link to the next set of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a Users. */
export declare interface Users {
    /**
     * Gets all the users registered on a Data Box Edge/Data Box Gateway device.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    listByDataBoxEdgeDevice(deviceName: string, resourceGroupName: string, options?: UsersListByDataBoxEdgeDeviceOptionalParams): PagedAsyncIterableIterator<User>;
    /**
     * Gets the properties of the specified user.
     * @param deviceName The device name.
     * @param name The user name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    get(deviceName: string, name: string, resourceGroupName: string, options?: UsersGetOptionalParams): Promise<UsersGetResponse>;
    /**
     * Creates a new user or updates an existing user's information on a Data Box Edge/Data Box Gateway
     * device.
     * @param deviceName The device name.
     * @param name The user name.
     * @param resourceGroupName The resource group name.
     * @param user The user details.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(deviceName: string, name: string, resourceGroupName: string, user: User, options?: UsersCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<UsersCreateOrUpdateResponse>, UsersCreateOrUpdateResponse>>;
    /**
     * Creates a new user or updates an existing user's information on a Data Box Edge/Data Box Gateway
     * device.
     * @param deviceName The device name.
     * @param name The user name.
     * @param resourceGroupName The resource group name.
     * @param user The user details.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(deviceName: string, name: string, resourceGroupName: string, user: User, options?: UsersCreateOrUpdateOptionalParams): Promise<UsersCreateOrUpdateResponse>;
    /**
     * Deletes the user on a databox edge/gateway device.
     * @param deviceName The device name.
     * @param name The user name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    beginDelete(deviceName: string, name: string, resourceGroupName: string, options?: UsersDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes the user on a databox edge/gateway device.
     * @param deviceName The device name.
     * @param name The user name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    beginDeleteAndWait(deviceName: string, name: string, resourceGroupName: string, options?: UsersDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface UsersCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type UsersCreateOrUpdateResponse = User;

/** Optional parameters. */
export declare interface UsersDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface UsersGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type UsersGetResponse = User;

/** Optional parameters. */
export declare interface UsersListByDataBoxEdgeDeviceNextOptionalParams extends coreClient.OperationOptions {
    /** Specify $filter='Type eq <type>' to filter on user type property */
    filter?: string;
}

/** Contains response data for the listByDataBoxEdgeDeviceNext operation. */
export declare type UsersListByDataBoxEdgeDeviceNextResponse = UserList;

/** Optional parameters. */
export declare interface UsersListByDataBoxEdgeDeviceOptionalParams extends coreClient.OperationOptions {
    /** Specify $filter='Type eq <type>' to filter on user type property */
    filter?: string;
}

/** Contains response data for the listByDataBoxEdgeDevice operation. */
export declare type UsersListByDataBoxEdgeDeviceResponse = UserList;

/**
 * Defines values for UserType. \
 * {@link KnownUserType} can be used interchangeably with UserType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Share** \
 * **LocalManagement** \
 * **ARM**
 */
export declare type UserType = string;

export { }
