/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { DataBoxEdgeManagementClient } from "@azure/arm-databoxedge";
import { DefaultAzureCredential } from "@azure/identity";
/**
 * This sample demonstrates how to Creates a new share or updates an existing share on the device.
 *
 * @summary Creates a new share or updates an existing share on the device.
 * x-ms-original-file: specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/SharePut.json
 */
function sharePut() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "4385cf00-2d3a-425a-832f-f4285b1c9dce";
        const deviceName = "testedgedevice";
        const name = "smbshare";
        const resourceGroupName = "GroupForEdgeAutomation";
        const share = {
            description: "",
            accessProtocol: "SMB",
            azureContainerInfo: {
                containerName: "testContainerSMB",
                dataFormat: "BlockBlob",
                storageAccountCredentialId: "/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice/storageAccountCredentials/sac1"
            },
            dataPolicy: "Cloud",
            monitoringStatus: "Enabled",
            shareStatus: "Online",
            userAccessRights: [
                {
                    accessType: "Change",
                    userId: "/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice/users/user2"
                }
            ]
        };
        const credential = new DefaultAzureCredential();
        const client = new DataBoxEdgeManagementClient(credential, subscriptionId);
        const result = yield client.shares.beginCreateOrUpdateAndWait(deviceName, name, resourceGroupName, share);
        console.log(result);
    });
}
sharePut().catch(console.error);
//# sourceMappingURL=sharesCreateOrUpdateSample.js.map