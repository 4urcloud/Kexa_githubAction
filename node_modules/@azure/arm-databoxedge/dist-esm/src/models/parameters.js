/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { DataBoxEdgeDevice as DataBoxEdgeDeviceMapper, DataBoxEdgeDevicePatch as DataBoxEdgeDevicePatchMapper, SecuritySettings as SecuritySettingsMapper, DataBoxEdgeDeviceExtendedInfoPatch as DataBoxEdgeDeviceExtendedInfoPatchMapper, UploadCertificateRequest as UploadCertificateRequestMapper, BandwidthSchedule as BandwidthScheduleMapper, DiagnosticProactiveLogCollectionSettings as DiagnosticProactiveLogCollectionSettingsMapper, DiagnosticRemoteSupportSettings as DiagnosticRemoteSupportSettingsMapper, Order as OrderMapper, Role as RoleMapper, Addon as AddonMapper, MonitoringMetricConfiguration as MonitoringMetricConfigurationMapper, Share as ShareMapper, StorageAccountCredential as StorageAccountCredentialMapper, StorageAccount as StorageAccountMapper, Container as ContainerMapper, Trigger as TriggerMapper, TriggerSupportPackageRequest as TriggerSupportPackageRequestMapper, User as UserMapper } from "../models/mappers";
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2021-06-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const expand = {
    parameterPath: ["options", "expand"],
    mapper: {
        serializedName: "$expand",
        type: {
            name: "String"
        }
    }
};
export const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const deviceName = {
    parameterPath: "deviceName",
    mapper: {
        serializedName: "deviceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export const dataBoxEdgeDevice = {
    parameterPath: "dataBoxEdgeDevice",
    mapper: DataBoxEdgeDeviceMapper
};
export const parameters = {
    parameterPath: "parameters",
    mapper: DataBoxEdgeDevicePatchMapper
};
export const securitySettings = {
    parameterPath: "securitySettings",
    mapper: SecuritySettingsMapper
};
export const parameters1 = {
    parameterPath: "parameters",
    mapper: DataBoxEdgeDeviceExtendedInfoPatchMapper
};
export const parameters2 = {
    parameterPath: "parameters",
    mapper: UploadCertificateRequestMapper
};
export const name = {
    parameterPath: "name",
    mapper: {
        serializedName: "name",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters3 = {
    parameterPath: "parameters",
    mapper: BandwidthScheduleMapper
};
export const proactiveLogCollectionSettings = {
    parameterPath: "proactiveLogCollectionSettings",
    mapper: DiagnosticProactiveLogCollectionSettingsMapper
};
export const diagnosticRemoteSupportSettings = {
    parameterPath: "diagnosticRemoteSupportSettings",
    mapper: DiagnosticRemoteSupportSettingsMapper
};
export const order = {
    parameterPath: "order",
    mapper: OrderMapper
};
export const role = {
    parameterPath: "role",
    mapper: RoleMapper
};
export const roleName = {
    parameterPath: "roleName",
    mapper: {
        serializedName: "roleName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const addonName = {
    parameterPath: "addonName",
    mapper: {
        serializedName: "addonName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const addon = {
    parameterPath: "addon",
    mapper: AddonMapper
};
export const monitoringMetricConfiguration = {
    parameterPath: "monitoringMetricConfiguration",
    mapper: MonitoringMetricConfigurationMapper
};
export const share = {
    parameterPath: "share",
    mapper: ShareMapper
};
export const storageAccountCredential = {
    parameterPath: "storageAccountCredential",
    mapper: StorageAccountCredentialMapper
};
export const storageAccountName = {
    parameterPath: "storageAccountName",
    mapper: {
        serializedName: "storageAccountName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const storageAccount = {
    parameterPath: "storageAccount",
    mapper: StorageAccountMapper
};
export const containerName = {
    parameterPath: "containerName",
    mapper: {
        serializedName: "containerName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const container = {
    parameterPath: "container",
    mapper: ContainerMapper
};
export const filter = {
    parameterPath: ["options", "filter"],
    mapper: {
        serializedName: "$filter",
        type: {
            name: "String"
        }
    }
};
export const trigger = {
    parameterPath: "trigger",
    mapper: TriggerMapper
};
export const triggerSupportPackageRequest = {
    parameterPath: "triggerSupportPackageRequest",
    mapper: TriggerSupportPackageRequestMapper
};
export const user = {
    parameterPath: "user",
    mapper: UserMapper
};
//# sourceMappingURL=parameters.js.map