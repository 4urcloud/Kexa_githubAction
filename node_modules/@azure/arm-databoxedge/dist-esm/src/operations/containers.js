/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await, __awaiter } from "tslib";
import { setContinuationToken } from "../pagingHelper";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
/// <reference lib="esnext.asynciterable" />
/** Class containing Containers operations. */
export class ContainersImpl {
    /**
     * Initialize a new instance of the class Containers class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all the containers of a storage Account in a Data Box Edge/Data Box Gateway device.
     * @param deviceName The device name.
     * @param storageAccountName The storage Account name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    listByStorageAccount(deviceName, storageAccountName, resourceGroupName, options) {
        const iter = this.listByStorageAccountPagingAll(deviceName, storageAccountName, resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByStorageAccountPagingPage(deviceName, storageAccountName, resourceGroupName, options, settings);
            }
        };
    }
    listByStorageAccountPagingPage(deviceName, storageAccountName, resourceGroupName, options, settings) {
        return __asyncGenerator(this, arguments, function* listByStorageAccountPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listByStorageAccount(deviceName, storageAccountName, resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listByStorageAccountNext(deviceName, storageAccountName, resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listByStorageAccountPagingAll(deviceName, storageAccountName, resourceGroupName, options) {
        return __asyncGenerator(this, arguments, function* listByStorageAccountPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = __asyncValues(this.listByStorageAccountPagingPage(deviceName, storageAccountName, resourceGroupName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists all the containers of a storage Account in a Data Box Edge/Data Box Gateway device.
     * @param deviceName The device name.
     * @param storageAccountName The storage Account name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    _listByStorageAccount(deviceName, storageAccountName, resourceGroupName, options) {
        return this.client.sendOperationRequest({ deviceName, storageAccountName, resourceGroupName, options }, listByStorageAccountOperationSpec);
    }
    /**
     * Gets a container by name.
     * @param deviceName The device name.
     * @param storageAccountName The Storage Account Name
     * @param containerName The container Name
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    get(deviceName, storageAccountName, containerName, resourceGroupName, options) {
        return this.client.sendOperationRequest({
            deviceName,
            storageAccountName,
            containerName,
            resourceGroupName,
            options
        }, getOperationSpec);
    }
    /**
     * Creates a new container or updates an existing container on the device.
     * @param deviceName The device name.
     * @param storageAccountName The Storage Account Name
     * @param containerName The container name.
     * @param resourceGroupName The resource group name.
     * @param container The container properties.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(deviceName, storageAccountName, containerName, resourceGroupName, container, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                deviceName,
                storageAccountName,
                containerName,
                resourceGroupName,
                container,
                options
            }, createOrUpdateOperationSpec);
            const poller = new LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Creates a new container or updates an existing container on the device.
     * @param deviceName The device name.
     * @param storageAccountName The Storage Account Name
     * @param containerName The container name.
     * @param resourceGroupName The resource group name.
     * @param container The container properties.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(deviceName, storageAccountName, containerName, resourceGroupName, container, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(deviceName, storageAccountName, containerName, resourceGroupName, container, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Deletes the container on the Data Box Edge/Data Box Gateway device.
     * @param deviceName The device name.
     * @param storageAccountName The Storage Account Name
     * @param containerName The container name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    beginDelete(deviceName, storageAccountName, containerName, resourceGroupName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                deviceName,
                storageAccountName,
                containerName,
                resourceGroupName,
                options
            }, deleteOperationSpec);
            const poller = new LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes the container on the Data Box Edge/Data Box Gateway device.
     * @param deviceName The device name.
     * @param storageAccountName The Storage Account Name
     * @param containerName The container name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    beginDeleteAndWait(deviceName, storageAccountName, containerName, resourceGroupName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(deviceName, storageAccountName, containerName, resourceGroupName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Refreshes the container metadata with the data from the cloud.
     * @param deviceName The device name.
     * @param storageAccountName The Storage Account Name
     * @param containerName The container name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    beginRefresh(deviceName, storageAccountName, containerName, resourceGroupName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                deviceName,
                storageAccountName,
                containerName,
                resourceGroupName,
                options
            }, refreshOperationSpec);
            const poller = new LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Refreshes the container metadata with the data from the cloud.
     * @param deviceName The device name.
     * @param storageAccountName The Storage Account Name
     * @param containerName The container name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    beginRefreshAndWait(deviceName, storageAccountName, containerName, resourceGroupName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginRefresh(deviceName, storageAccountName, containerName, resourceGroupName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * ListByStorageAccountNext
     * @param deviceName The device name.
     * @param storageAccountName The storage Account name.
     * @param resourceGroupName The resource group name.
     * @param nextLink The nextLink from the previous successful call to the ListByStorageAccount method.
     * @param options The options parameters.
     */
    _listByStorageAccountNext(deviceName, storageAccountName, resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ deviceName, storageAccountName, resourceGroupName, nextLink, options }, listByStorageAccountNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listByStorageAccountOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/storageAccounts/{storageAccountName}/containers",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ContainerList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.deviceName,
        Parameters.storageAccountName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/storageAccounts/{storageAccountName}/containers/{containerName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.Container
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.deviceName,
        Parameters.storageAccountName,
        Parameters.containerName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/storageAccounts/{storageAccountName}/containers/{containerName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.Container
        },
        201: {
            bodyMapper: Mappers.Container
        },
        202: {
            bodyMapper: Mappers.Container
        },
        204: {
            bodyMapper: Mappers.Container
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    requestBody: Parameters.container,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.deviceName,
        Parameters.storageAccountName,
        Parameters.containerName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/storageAccounts/{storageAccountName}/containers/{containerName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.deviceName,
        Parameters.storageAccountName,
        Parameters.containerName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const refreshOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/storageAccounts/{storageAccountName}/containers/{containerName}/refresh",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.deviceName,
        Parameters.storageAccountName,
        Parameters.containerName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listByStorageAccountNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ContainerList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.nextLink,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.deviceName,
        Parameters.storageAccountName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=containers.js.map