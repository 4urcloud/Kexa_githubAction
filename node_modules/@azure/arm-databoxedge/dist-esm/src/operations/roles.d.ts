import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Roles } from "../operationsInterfaces";
import { DataBoxEdgeManagementClient } from "../dataBoxEdgeManagementClient";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import { RoleUnion, RolesListByDataBoxEdgeDeviceOptionalParams, RolesGetOptionalParams, RolesGetResponse, RolesCreateOrUpdateOptionalParams, RolesCreateOrUpdateResponse, RolesDeleteOptionalParams } from "../models";
/** Class containing Roles operations. */
export declare class RolesImpl implements Roles {
    private readonly client;
    /**
     * Initialize a new instance of the class Roles class.
     * @param client Reference to the service client
     */
    constructor(client: DataBoxEdgeManagementClient);
    /**
     * Lists all the roles configured in a Data Box Edge/Data Box Gateway device.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    listByDataBoxEdgeDevice(deviceName: string, resourceGroupName: string, options?: RolesListByDataBoxEdgeDeviceOptionalParams): PagedAsyncIterableIterator<RoleUnion>;
    private listByDataBoxEdgeDevicePagingPage;
    private listByDataBoxEdgeDevicePagingAll;
    /**
     * Lists all the roles configured in a Data Box Edge/Data Box Gateway device.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    private _listByDataBoxEdgeDevice;
    /**
     * Gets a specific role by name.
     * @param deviceName The device name.
     * @param name The role name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    get(deviceName: string, name: string, resourceGroupName: string, options?: RolesGetOptionalParams): Promise<RolesGetResponse>;
    /**
     * Create or update a role.
     * @param deviceName The device name.
     * @param name The role name.
     * @param resourceGroupName The resource group name.
     * @param role The role properties.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(deviceName: string, name: string, resourceGroupName: string, role: RoleUnion, options?: RolesCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<RolesCreateOrUpdateResponse>, RolesCreateOrUpdateResponse>>;
    /**
     * Create or update a role.
     * @param deviceName The device name.
     * @param name The role name.
     * @param resourceGroupName The resource group name.
     * @param role The role properties.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(deviceName: string, name: string, resourceGroupName: string, role: RoleUnion, options?: RolesCreateOrUpdateOptionalParams): Promise<RolesCreateOrUpdateResponse>;
    /**
     * Deletes the role on the device.
     * @param deviceName The device name.
     * @param name The role name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    beginDelete(deviceName: string, name: string, resourceGroupName: string, options?: RolesDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes the role on the device.
     * @param deviceName The device name.
     * @param name The role name.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    beginDeleteAndWait(deviceName: string, name: string, resourceGroupName: string, options?: RolesDeleteOptionalParams): Promise<void>;
    /**
     * ListByDataBoxEdgeDeviceNext
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param nextLink The nextLink from the previous successful call to the ListByDataBoxEdgeDevice
     *                 method.
     * @param options The options parameters.
     */
    private _listByDataBoxEdgeDeviceNext;
}
//# sourceMappingURL=roles.d.ts.map