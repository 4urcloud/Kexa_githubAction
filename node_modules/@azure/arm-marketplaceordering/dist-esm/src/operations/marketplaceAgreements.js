/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/** Class containing MarketplaceAgreements operations. */
export class MarketplaceAgreementsImpl {
    /**
     * Initialize a new instance of the class MarketplaceAgreements class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get marketplace terms.
     * @param offerType Offer Type, currently only virtualmachine type is supported.
     * @param publisherId Publisher identifier string of image being deployed.
     * @param offerId Offer identifier string of image being deployed.
     * @param planId Plan identifier string of image being deployed.
     * @param options The options parameters.
     */
    get(offerType, publisherId, offerId, planId, options) {
        return this.client.sendOperationRequest({ offerType, publisherId, offerId, planId, options }, getOperationSpec);
    }
    /**
     * Save marketplace terms.
     * @param offerType Offer Type, currently only virtualmachine type is supported.
     * @param publisherId Publisher identifier string of image being deployed.
     * @param offerId Offer identifier string of image being deployed.
     * @param planId Plan identifier string of image being deployed.
     * @param parameters Parameters supplied to the Create Marketplace Terms operation.
     * @param options The options parameters.
     */
    create(offerType, publisherId, offerId, planId, parameters, options) {
        return this.client.sendOperationRequest({ offerType, publisherId, offerId, planId, parameters, options }, createOperationSpec);
    }
    /**
     * Sign marketplace terms.
     * @param publisherId Publisher identifier string of image being deployed.
     * @param offerId Offer identifier string of image being deployed.
     * @param planId Plan identifier string of image being deployed.
     * @param options The options parameters.
     */
    sign(publisherId, offerId, planId, options) {
        return this.client.sendOperationRequest({ publisherId, offerId, planId, options }, signOperationSpec);
    }
    /**
     * Cancel marketplace terms.
     * @param publisherId Publisher identifier string of image being deployed.
     * @param offerId Offer identifier string of image being deployed.
     * @param planId Plan identifier string of image being deployed.
     * @param options The options parameters.
     */
    cancel(publisherId, offerId, planId, options) {
        return this.client.sendOperationRequest({ publisherId, offerId, planId, options }, cancelOperationSpec);
    }
    /**
     * Get marketplace agreement.
     * @param publisherId Publisher identifier string of image being deployed.
     * @param offerId Offer identifier string of image being deployed.
     * @param planId Plan identifier string of image being deployed.
     * @param options The options parameters.
     */
    getAgreement(publisherId, offerId, planId, options) {
        return this.client.sendOperationRequest({ publisherId, offerId, planId, options }, getAgreementOperationSpec);
    }
    /**
     * List marketplace agreements in the subscription.
     * @param options The options parameters.
     */
    list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/offerTypes/{offerType}/publishers/{publisherId}/offers/{offerId}/plans/{planId}/agreements/current",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.AgreementTerms
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.offerType,
        Parameters.publisherId,
        Parameters.offerId,
        Parameters.planId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const createOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/offerTypes/{offerType}/publishers/{publisherId}/offers/{offerId}/plans/{planId}/agreements/current",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.AgreementTerms
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.parameters,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.offerType,
        Parameters.publisherId,
        Parameters.offerId,
        Parameters.planId
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const signOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/agreements/{publisherId}/offers/{offerId}/plans/{planId}/sign",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.AgreementTerms
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.publisherId,
        Parameters.offerId,
        Parameters.planId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const cancelOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/agreements/{publisherId}/offers/{offerId}/plans/{planId}/cancel",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.AgreementTerms
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.publisherId,
        Parameters.offerId,
        Parameters.planId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getAgreementOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/agreements/{publisherId}/offers/{offerId}/plans/{planId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.AgreementTerms
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.publisherId,
        Parameters.offerId,
        Parameters.planId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/agreements",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: {
                type: {
                    name: "Sequence",
                    element: { type: { name: "Composite", className: "AgreementTerms" } }
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.subscriptionId],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=marketplaceAgreements.js.map