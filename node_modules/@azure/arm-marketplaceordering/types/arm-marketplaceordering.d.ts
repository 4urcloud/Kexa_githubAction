import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { PagedAsyncIterableIterator } from '@azure/core-paging';

/** Terms properties for provided Publisher/Offer/Plan tuple */
export declare interface AgreementTerms extends Resource {
    /**
     * The system meta data relating to this resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** Publisher identifier string of image being deployed. */
    publisher?: string;
    /** Offer identifier string of image being deployed. */
    product?: string;
    /** Plan identifier string of image being deployed. */
    plan?: string;
    /** Link to HTML with Microsoft and Publisher terms. */
    licenseTextLink?: string;
    /** Link to the privacy policy of the publisher. */
    privacyPolicyLink?: string;
    /** Link to HTML with Azure Marketplace terms. */
    marketplaceTermsLink?: string;
    /** Date and time in UTC of when the terms were accepted. This is empty if Accepted is false. */
    retrieveDatetime?: string;
    /** Terms signature. */
    signature?: string;
    /** If any version of the terms have been accepted, otherwise false. */
    accepted?: boolean;
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export declare type CreatedByType = string;

/** Error response indicates Microsoft.MarketplaceOrdering service is not able to process the incoming request. The reason is provided in the error message. */
export declare interface ErrorResponse {
    /** The details of the error. */
    error?: ErrorResponseError;
}

/** The details of the error. */
export declare interface ErrorResponseError {
    /**
     * Error code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * Error message indicating why the operation failed.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
}

/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/** Known values of {@link CreatedByType} that the service accepts. */
export declare enum KnownCreatedByType {
    /** User */
    User = "User",
    /** Application */
    Application = "Application",
    /** ManagedIdentity */
    ManagedIdentity = "ManagedIdentity",
    /** Key */
    Key = "Key"
}

/** Known values of {@link OfferType} that the service accepts. */
export declare enum KnownOfferType {
    /** Virtualmachine */
    Virtualmachine = "virtualmachine"
}

/** Interface representing a MarketplaceAgreements. */
export declare interface MarketplaceAgreements {
    /**
     * Get marketplace terms.
     * @param offerType Offer Type, currently only virtualmachine type is supported.
     * @param publisherId Publisher identifier string of image being deployed.
     * @param offerId Offer identifier string of image being deployed.
     * @param planId Plan identifier string of image being deployed.
     * @param options The options parameters.
     */
    get(offerType: OfferType, publisherId: string, offerId: string, planId: string, options?: MarketplaceAgreementsGetOptionalParams): Promise<MarketplaceAgreementsGetResponse>;
    /**
     * Save marketplace terms.
     * @param offerType Offer Type, currently only virtualmachine type is supported.
     * @param publisherId Publisher identifier string of image being deployed.
     * @param offerId Offer identifier string of image being deployed.
     * @param planId Plan identifier string of image being deployed.
     * @param parameters Parameters supplied to the Create Marketplace Terms operation.
     * @param options The options parameters.
     */
    create(offerType: OfferType, publisherId: string, offerId: string, planId: string, parameters: AgreementTerms, options?: MarketplaceAgreementsCreateOptionalParams): Promise<MarketplaceAgreementsCreateResponse>;
    /**
     * Sign marketplace terms.
     * @param publisherId Publisher identifier string of image being deployed.
     * @param offerId Offer identifier string of image being deployed.
     * @param planId Plan identifier string of image being deployed.
     * @param options The options parameters.
     */
    sign(publisherId: string, offerId: string, planId: string, options?: MarketplaceAgreementsSignOptionalParams): Promise<MarketplaceAgreementsSignResponse>;
    /**
     * Cancel marketplace terms.
     * @param publisherId Publisher identifier string of image being deployed.
     * @param offerId Offer identifier string of image being deployed.
     * @param planId Plan identifier string of image being deployed.
     * @param options The options parameters.
     */
    cancel(publisherId: string, offerId: string, planId: string, options?: MarketplaceAgreementsCancelOptionalParams): Promise<MarketplaceAgreementsCancelResponse>;
    /**
     * Get marketplace agreement.
     * @param publisherId Publisher identifier string of image being deployed.
     * @param offerId Offer identifier string of image being deployed.
     * @param planId Plan identifier string of image being deployed.
     * @param options The options parameters.
     */
    getAgreement(publisherId: string, offerId: string, planId: string, options?: MarketplaceAgreementsGetAgreementOptionalParams): Promise<MarketplaceAgreementsGetAgreementResponse>;
    /**
     * List marketplace agreements in the subscription.
     * @param options The options parameters.
     */
    list(options?: MarketplaceAgreementsListOptionalParams): Promise<MarketplaceAgreementsListResponse>;
}

/** Optional parameters. */
export declare interface MarketplaceAgreementsCancelOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the cancel operation. */
export declare type MarketplaceAgreementsCancelResponse = AgreementTerms;

/** Optional parameters. */
export declare interface MarketplaceAgreementsCreateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the create operation. */
export declare type MarketplaceAgreementsCreateResponse = AgreementTerms;

/** Optional parameters. */
export declare interface MarketplaceAgreementsGetAgreementOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getAgreement operation. */
export declare type MarketplaceAgreementsGetAgreementResponse = AgreementTerms;

/** Optional parameters. */
export declare interface MarketplaceAgreementsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type MarketplaceAgreementsGetResponse = AgreementTerms;

/** Optional parameters. */
export declare interface MarketplaceAgreementsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type MarketplaceAgreementsListResponse = AgreementTerms[];

/** Optional parameters. */
export declare interface MarketplaceAgreementsSignOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the sign operation. */
export declare type MarketplaceAgreementsSignResponse = AgreementTerms;

export declare class MarketplaceOrderingAgreements extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the MarketplaceOrderingAgreements class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The subscription ID that identifies an Azure subscription.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: MarketplaceOrderingAgreementsOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    marketplaceAgreements: MarketplaceAgreements;
    operations: Operations;
}

/** Optional parameters. */
export declare interface MarketplaceOrderingAgreementsOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/**
 * Defines values for OfferType. \
 * {@link KnownOfferType} can be used interchangeably with OfferType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **virtualmachine**
 */
export declare type OfferType = string;

/** Microsoft.MarketplaceOrdering REST API operation */
export declare interface Operation {
    /** Operation name: {provider}/{resource}/{operation} */
    name?: string;
    /** The object that represents the operation. */
    display?: OperationDisplay;
}

/** The object that represents the operation. */
export declare interface OperationDisplay {
    /** Service provider: Microsoft.MarketplaceOrdering */
    provider?: string;
    /** Resource on which the operation is performed: Agreement, virtualmachine, etc. */
    resource?: string;
    /** Operation type: Get Agreement, Sign Agreement, Cancel Agreement etc. */
    operation?: string;
    /** Operation description. */
    description?: string;
}

/** Result of the request to list MarketplaceOrdering operations. It contains a list of operations and a URL link to get the next set of results. */
export declare interface OperationListResult {
    /** List of Microsoft.MarketplaceOrdering operations supported by the Microsoft.MarketplaceOrdering resource provider. */
    value?: Operation[];
    /**
     * URL to get the next set of operation list results if there are any.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a Operations. */
export declare interface Operations {
    /**
     * Lists all of the available Microsoft.MarketplaceOrdering REST API operations.
     * @param options The options parameters.
     */
    list(options?: OperationsListOptionalParams): PagedAsyncIterableIterator<Operation>;
}

/** Optional parameters. */
export declare interface OperationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export declare interface OperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OperationsListResponse = OperationListResult;

/** ARM resource. */
export declare interface Resource {
    /**
     * Resource ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Resource name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Resource type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
}

/** Metadata pertaining to creation and last modification of the resource. */
export declare interface SystemData {
    /** The identity that created the resource. */
    createdBy?: string;
    /** The type of identity that created the resource. */
    createdByType?: CreatedByType;
    /** The timestamp of resource creation (UTC). */
    createdAt?: Date;
    /** The identity that last modified the resource. */
    lastModifiedBy?: string;
    /** The type of identity that last modified the resource. */
    lastModifiedByType?: CreatedByType;
    /** The timestamp of resource last modification (UTC) */
    lastModifiedAt?: Date;
}

export { }
