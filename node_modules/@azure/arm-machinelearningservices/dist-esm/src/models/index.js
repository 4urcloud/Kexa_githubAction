/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link ProvisioningState} that the service accepts. */
export var KnownProvisioningState;
(function (KnownProvisioningState) {
    KnownProvisioningState["Unknown"] = "Unknown";
    KnownProvisioningState["Updating"] = "Updating";
    KnownProvisioningState["Creating"] = "Creating";
    KnownProvisioningState["Deleting"] = "Deleting";
    KnownProvisioningState["Succeeded"] = "Succeeded";
    KnownProvisioningState["Failed"] = "Failed";
    KnownProvisioningState["Canceled"] = "Canceled";
})(KnownProvisioningState || (KnownProvisioningState = {}));
/** Known values of {@link EncryptionStatus} that the service accepts. */
export var KnownEncryptionStatus;
(function (KnownEncryptionStatus) {
    KnownEncryptionStatus["Enabled"] = "Enabled";
    KnownEncryptionStatus["Disabled"] = "Disabled";
})(KnownEncryptionStatus || (KnownEncryptionStatus = {}));
/** Known values of {@link PublicNetworkAccess} that the service accepts. */
export var KnownPublicNetworkAccess;
(function (KnownPublicNetworkAccess) {
    KnownPublicNetworkAccess["Enabled"] = "Enabled";
    KnownPublicNetworkAccess["Disabled"] = "Disabled";
})(KnownPublicNetworkAccess || (KnownPublicNetworkAccess = {}));
/** Known values of {@link PrivateEndpointServiceConnectionStatus} that the service accepts. */
export var KnownPrivateEndpointServiceConnectionStatus;
(function (KnownPrivateEndpointServiceConnectionStatus) {
    KnownPrivateEndpointServiceConnectionStatus["Pending"] = "Pending";
    KnownPrivateEndpointServiceConnectionStatus["Approved"] = "Approved";
    KnownPrivateEndpointServiceConnectionStatus["Rejected"] = "Rejected";
    KnownPrivateEndpointServiceConnectionStatus["Disconnected"] = "Disconnected";
    KnownPrivateEndpointServiceConnectionStatus["Timeout"] = "Timeout";
})(KnownPrivateEndpointServiceConnectionStatus || (KnownPrivateEndpointServiceConnectionStatus = {}));
/** Known values of {@link PrivateEndpointConnectionProvisioningState} that the service accepts. */
export var KnownPrivateEndpointConnectionProvisioningState;
(function (KnownPrivateEndpointConnectionProvisioningState) {
    KnownPrivateEndpointConnectionProvisioningState["Succeeded"] = "Succeeded";
    KnownPrivateEndpointConnectionProvisioningState["Creating"] = "Creating";
    KnownPrivateEndpointConnectionProvisioningState["Deleting"] = "Deleting";
    KnownPrivateEndpointConnectionProvisioningState["Failed"] = "Failed";
})(KnownPrivateEndpointConnectionProvisioningState || (KnownPrivateEndpointConnectionProvisioningState = {}));
/** Known values of {@link CreatedByType} that the service accepts. */
export var KnownCreatedByType;
(function (KnownCreatedByType) {
    KnownCreatedByType["User"] = "User";
    KnownCreatedByType["Application"] = "Application";
    KnownCreatedByType["ManagedIdentity"] = "ManagedIdentity";
    KnownCreatedByType["Key"] = "Key";
})(KnownCreatedByType || (KnownCreatedByType = {}));
/** Known values of {@link DiagnoseResultLevel} that the service accepts. */
export var KnownDiagnoseResultLevel;
(function (KnownDiagnoseResultLevel) {
    KnownDiagnoseResultLevel["Warning"] = "Warning";
    KnownDiagnoseResultLevel["Error"] = "Error";
    KnownDiagnoseResultLevel["Information"] = "Information";
})(KnownDiagnoseResultLevel || (KnownDiagnoseResultLevel = {}));
/** Known values of {@link UsageUnit} that the service accepts. */
export var KnownUsageUnit;
(function (KnownUsageUnit) {
    KnownUsageUnit["Count"] = "Count";
})(KnownUsageUnit || (KnownUsageUnit = {}));
/** Known values of {@link BillingCurrency} that the service accepts. */
export var KnownBillingCurrency;
(function (KnownBillingCurrency) {
    KnownBillingCurrency["USD"] = "USD";
})(KnownBillingCurrency || (KnownBillingCurrency = {}));
/** Known values of {@link UnitOfMeasure} that the service accepts. */
export var KnownUnitOfMeasure;
(function (KnownUnitOfMeasure) {
    KnownUnitOfMeasure["OneHour"] = "OneHour";
})(KnownUnitOfMeasure || (KnownUnitOfMeasure = {}));
/** Known values of {@link VMPriceOSType} that the service accepts. */
export var KnownVMPriceOSType;
(function (KnownVMPriceOSType) {
    KnownVMPriceOSType["Linux"] = "Linux";
    KnownVMPriceOSType["Windows"] = "Windows";
})(KnownVMPriceOSType || (KnownVMPriceOSType = {}));
/** Known values of {@link VMTier} that the service accepts. */
export var KnownVMTier;
(function (KnownVMTier) {
    KnownVMTier["Standard"] = "Standard";
    KnownVMTier["LowPriority"] = "LowPriority";
    KnownVMTier["Spot"] = "Spot";
})(KnownVMTier || (KnownVMTier = {}));
/** Known values of {@link QuotaUnit} that the service accepts. */
export var KnownQuotaUnit;
(function (KnownQuotaUnit) {
    KnownQuotaUnit["Count"] = "Count";
})(KnownQuotaUnit || (KnownQuotaUnit = {}));
/** Known values of {@link Status} that the service accepts. */
export var KnownStatus;
(function (KnownStatus) {
    KnownStatus["Undefined"] = "Undefined";
    KnownStatus["Success"] = "Success";
    KnownStatus["Failure"] = "Failure";
    KnownStatus["InvalidQuotaBelowClusterMinimum"] = "InvalidQuotaBelowClusterMinimum";
    KnownStatus["InvalidQuotaExceedsSubscriptionLimit"] = "InvalidQuotaExceedsSubscriptionLimit";
    KnownStatus["InvalidVMFamilyName"] = "InvalidVMFamilyName";
    KnownStatus["OperationNotSupportedForSku"] = "OperationNotSupportedForSku";
    KnownStatus["OperationNotEnabledForRegion"] = "OperationNotEnabledForRegion";
})(KnownStatus || (KnownStatus = {}));
/** Known values of {@link ComputeType} that the service accepts. */
export var KnownComputeType;
(function (KnownComputeType) {
    KnownComputeType["AKS"] = "AKS";
    KnownComputeType["Kubernetes"] = "Kubernetes";
    KnownComputeType["AmlCompute"] = "AmlCompute";
    KnownComputeType["ComputeInstance"] = "ComputeInstance";
    KnownComputeType["DataFactory"] = "DataFactory";
    KnownComputeType["VirtualMachine"] = "VirtualMachine";
    KnownComputeType["HDInsight"] = "HDInsight";
    KnownComputeType["Databricks"] = "Databricks";
    KnownComputeType["DataLakeAnalytics"] = "DataLakeAnalytics";
    KnownComputeType["SynapseSpark"] = "SynapseSpark";
})(KnownComputeType || (KnownComputeType = {}));
/** Known values of {@link UnderlyingResourceAction} that the service accepts. */
export var KnownUnderlyingResourceAction;
(function (KnownUnderlyingResourceAction) {
    KnownUnderlyingResourceAction["Delete"] = "Delete";
    KnownUnderlyingResourceAction["Detach"] = "Detach";
})(KnownUnderlyingResourceAction || (KnownUnderlyingResourceAction = {}));
/** Known values of {@link NodeState} that the service accepts. */
export var KnownNodeState;
(function (KnownNodeState) {
    KnownNodeState["Idle"] = "idle";
    KnownNodeState["Running"] = "running";
    KnownNodeState["Preparing"] = "preparing";
    KnownNodeState["Unusable"] = "unusable";
    KnownNodeState["Leaving"] = "leaving";
    KnownNodeState["Preempted"] = "preempted";
})(KnownNodeState || (KnownNodeState = {}));
/** Known values of {@link ValueFormat} that the service accepts. */
export var KnownValueFormat;
(function (KnownValueFormat) {
    KnownValueFormat["Json"] = "JSON";
})(KnownValueFormat || (KnownValueFormat = {}));
/** Known values of {@link ReasonCode} that the service accepts. */
export var KnownReasonCode;
(function (KnownReasonCode) {
    KnownReasonCode["NotSpecified"] = "NotSpecified";
    KnownReasonCode["NotAvailableForRegion"] = "NotAvailableForRegion";
    KnownReasonCode["NotAvailableForSubscription"] = "NotAvailableForSubscription";
})(KnownReasonCode || (KnownReasonCode = {}));
/** Known values of {@link ClusterPurpose} that the service accepts. */
export var KnownClusterPurpose;
(function (KnownClusterPurpose) {
    KnownClusterPurpose["FastProd"] = "FastProd";
    KnownClusterPurpose["DenseProd"] = "DenseProd";
    KnownClusterPurpose["DevTest"] = "DevTest";
})(KnownClusterPurpose || (KnownClusterPurpose = {}));
/** Known values of {@link SslConfigurationStatus} that the service accepts. */
export var KnownSslConfigurationStatus;
(function (KnownSslConfigurationStatus) {
    KnownSslConfigurationStatus["Disabled"] = "Disabled";
    KnownSslConfigurationStatus["Enabled"] = "Enabled";
    KnownSslConfigurationStatus["Auto"] = "Auto";
})(KnownSslConfigurationStatus || (KnownSslConfigurationStatus = {}));
/** Known values of {@link LoadBalancerType} that the service accepts. */
export var KnownLoadBalancerType;
(function (KnownLoadBalancerType) {
    KnownLoadBalancerType["PublicIp"] = "PublicIp";
    KnownLoadBalancerType["InternalLoadBalancer"] = "InternalLoadBalancer";
})(KnownLoadBalancerType || (KnownLoadBalancerType = {}));
/** Known values of {@link OsType} that the service accepts. */
export var KnownOsType;
(function (KnownOsType) {
    KnownOsType["Linux"] = "Linux";
    KnownOsType["Windows"] = "Windows";
})(KnownOsType || (KnownOsType = {}));
/** Known values of {@link VmPriority} that the service accepts. */
export var KnownVmPriority;
(function (KnownVmPriority) {
    KnownVmPriority["Dedicated"] = "Dedicated";
    KnownVmPriority["LowPriority"] = "LowPriority";
})(KnownVmPriority || (KnownVmPriority = {}));
/** Known values of {@link RemoteLoginPortPublicAccess} that the service accepts. */
export var KnownRemoteLoginPortPublicAccess;
(function (KnownRemoteLoginPortPublicAccess) {
    KnownRemoteLoginPortPublicAccess["Enabled"] = "Enabled";
    KnownRemoteLoginPortPublicAccess["Disabled"] = "Disabled";
    KnownRemoteLoginPortPublicAccess["NotSpecified"] = "NotSpecified";
})(KnownRemoteLoginPortPublicAccess || (KnownRemoteLoginPortPublicAccess = {}));
/** Known values of {@link AllocationState} that the service accepts. */
export var KnownAllocationState;
(function (KnownAllocationState) {
    KnownAllocationState["Steady"] = "Steady";
    KnownAllocationState["Resizing"] = "Resizing";
})(KnownAllocationState || (KnownAllocationState = {}));
/** Known values of {@link ApplicationSharingPolicy} that the service accepts. */
export var KnownApplicationSharingPolicy;
(function (KnownApplicationSharingPolicy) {
    KnownApplicationSharingPolicy["Personal"] = "Personal";
    KnownApplicationSharingPolicy["Shared"] = "Shared";
})(KnownApplicationSharingPolicy || (KnownApplicationSharingPolicy = {}));
/** Known values of {@link SshPublicAccess} that the service accepts. */
export var KnownSshPublicAccess;
(function (KnownSshPublicAccess) {
    KnownSshPublicAccess["Enabled"] = "Enabled";
    KnownSshPublicAccess["Disabled"] = "Disabled";
})(KnownSshPublicAccess || (KnownSshPublicAccess = {}));
/** Known values of {@link ComputeInstanceState} that the service accepts. */
export var KnownComputeInstanceState;
(function (KnownComputeInstanceState) {
    KnownComputeInstanceState["Creating"] = "Creating";
    KnownComputeInstanceState["CreateFailed"] = "CreateFailed";
    KnownComputeInstanceState["Deleting"] = "Deleting";
    KnownComputeInstanceState["Running"] = "Running";
    KnownComputeInstanceState["Restarting"] = "Restarting";
    KnownComputeInstanceState["JobRunning"] = "JobRunning";
    KnownComputeInstanceState["SettingUp"] = "SettingUp";
    KnownComputeInstanceState["SetupFailed"] = "SetupFailed";
    KnownComputeInstanceState["Starting"] = "Starting";
    KnownComputeInstanceState["Stopped"] = "Stopped";
    KnownComputeInstanceState["Stopping"] = "Stopping";
    KnownComputeInstanceState["UserSettingUp"] = "UserSettingUp";
    KnownComputeInstanceState["UserSetupFailed"] = "UserSetupFailed";
    KnownComputeInstanceState["Unknown"] = "Unknown";
    KnownComputeInstanceState["Unusable"] = "Unusable";
})(KnownComputeInstanceState || (KnownComputeInstanceState = {}));
/** Known values of {@link ComputeInstanceAuthorizationType} that the service accepts. */
export var KnownComputeInstanceAuthorizationType;
(function (KnownComputeInstanceAuthorizationType) {
    KnownComputeInstanceAuthorizationType["Personal"] = "personal";
})(KnownComputeInstanceAuthorizationType || (KnownComputeInstanceAuthorizationType = {}));
/** Known values of {@link OperationName} that the service accepts. */
export var KnownOperationName;
(function (KnownOperationName) {
    KnownOperationName["Create"] = "Create";
    KnownOperationName["Start"] = "Start";
    KnownOperationName["Stop"] = "Stop";
    KnownOperationName["Restart"] = "Restart";
    KnownOperationName["Reimage"] = "Reimage";
    KnownOperationName["Delete"] = "Delete";
})(KnownOperationName || (KnownOperationName = {}));
/** Known values of {@link OperationStatus} that the service accepts. */
export var KnownOperationStatus;
(function (KnownOperationStatus) {
    KnownOperationStatus["InProgress"] = "InProgress";
    KnownOperationStatus["Succeeded"] = "Succeeded";
    KnownOperationStatus["CreateFailed"] = "CreateFailed";
    KnownOperationStatus["StartFailed"] = "StartFailed";
    KnownOperationStatus["StopFailed"] = "StopFailed";
    KnownOperationStatus["RestartFailed"] = "RestartFailed";
    KnownOperationStatus["ReimageFailed"] = "ReimageFailed";
    KnownOperationStatus["DeleteFailed"] = "DeleteFailed";
})(KnownOperationStatus || (KnownOperationStatus = {}));
//# sourceMappingURL=index.js.map