/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { Workspace as WorkspaceMapper, WorkspaceUpdateParameters as WorkspaceUpdateParametersMapper, DiagnoseWorkspaceParameters as DiagnoseWorkspaceParametersMapper, QuotaUpdateParameters as QuotaUpdateParametersMapper, ComputeResource as ComputeResourceMapper, ClusterUpdateParameters as ClusterUpdateParametersMapper, PrivateEndpointConnection as PrivateEndpointConnectionMapper, WorkspaceConnection as WorkspaceConnectionMapper } from "../models/mappers";
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2021-07-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const workspaceName = {
    parameterPath: "workspaceName",
    mapper: {
        serializedName: "workspaceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export const parameters = {
    parameterPath: "parameters",
    mapper: WorkspaceMapper
};
export const parameters1 = {
    parameterPath: "parameters",
    mapper: WorkspaceUpdateParametersMapper
};
export const skip = {
    parameterPath: ["options", "skip"],
    mapper: {
        serializedName: "$skip",
        type: {
            name: "String"
        }
    }
};
export const parameters2 = {
    parameterPath: ["options", "parameters"],
    mapper: DiagnoseWorkspaceParametersMapper
};
export const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const location = {
    parameterPath: "location",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[-\\w\\._]+$")
        },
        serializedName: "location",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters3 = {
    parameterPath: "parameters",
    mapper: QuotaUpdateParametersMapper
};
export const computeName = {
    parameterPath: "computeName",
    mapper: {
        serializedName: "computeName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters4 = {
    parameterPath: "parameters",
    mapper: ComputeResourceMapper
};
export const parameters5 = {
    parameterPath: "parameters",
    mapper: ClusterUpdateParametersMapper
};
export const underlyingResourceAction = {
    parameterPath: "underlyingResourceAction",
    mapper: {
        serializedName: "underlyingResourceAction",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const privateEndpointConnectionName = {
    parameterPath: "privateEndpointConnectionName",
    mapper: {
        serializedName: "privateEndpointConnectionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const properties = {
    parameterPath: "properties",
    mapper: PrivateEndpointConnectionMapper
};
export const target = {
    parameterPath: ["options", "target"],
    mapper: {
        serializedName: "target",
        type: {
            name: "String"
        }
    }
};
export const category = {
    parameterPath: ["options", "category"],
    mapper: {
        serializedName: "category",
        type: {
            name: "String"
        }
    }
};
export const parameters6 = {
    parameterPath: "parameters",
    mapper: WorkspaceConnectionMapper
};
export const connectionName = {
    parameterPath: "connectionName",
    mapper: {
        serializedName: "connectionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
//# sourceMappingURL=parameters.js.map