import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { TenantConfigurations } from "../operationsInterfaces";
import { Portal } from "../portal";
import { Configuration, TenantConfigurationsListOptionalParams, ConfigurationName, TenantConfigurationsGetOptionalParams, TenantConfigurationsGetResponse, TenantConfigurationsCreateOptionalParams, TenantConfigurationsCreateResponse, TenantConfigurationsDeleteOptionalParams } from "../models";
/** Class containing TenantConfigurations operations. */
export declare class TenantConfigurationsImpl implements TenantConfigurations {
    private readonly client;
    /**
     * Initialize a new instance of the class TenantConfigurations class.
     * @param client Reference to the service client
     */
    constructor(client: Portal);
    /**
     * Gets list of the tenant configurations.
     * @param options The options parameters.
     */
    list(options?: TenantConfigurationsListOptionalParams): PagedAsyncIterableIterator<Configuration>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Gets list of the tenant configurations.
     * @param options The options parameters.
     */
    private _list;
    /**
     * Gets the tenant configuration.
     * @param configurationName The configuration name. Value must be 'default'
     * @param options The options parameters.
     */
    get(configurationName: ConfigurationName, options?: TenantConfigurationsGetOptionalParams): Promise<TenantConfigurationsGetResponse>;
    /**
     * Create the tenant configuration. If configuration already exists - update it. User has to be a
     * Tenant Admin for this operation.
     * @param configurationName The configuration name. Value must be 'default'
     * @param tenantConfiguration The parameters required to create or update tenant configuration.
     * @param options The options parameters.
     */
    create(configurationName: ConfigurationName, tenantConfiguration: Configuration, options?: TenantConfigurationsCreateOptionalParams): Promise<TenantConfigurationsCreateResponse>;
    /**
     * Delete the tenant configuration. User has to be a Tenant Admin for this operation.
     * @param configurationName The configuration name. Value must be 'default'
     * @param options The options parameters.
     */
    delete(configurationName: ConfigurationName, options?: TenantConfigurationsDeleteOptionalParams): Promise<void>;
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
}
//# sourceMappingURL=tenantConfigurations.d.ts.map