import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { PagedAsyncIterableIterator } from '@azure/core-paging';

/** Tenant configuration. */
export declare interface Configuration extends ProxyResource {
    /** When flag is set to true Markdown tile will require external storage configuration (URI). The inline content configuration will be prohibited. */
    enforcePrivateMarkdownStorage?: boolean;
}

/** List of tenant configurations. */
export declare interface ConfigurationList {
    /** The array of tenant configurations. */
    value?: Configuration[];
    /** The URL to use for getting the next set of results. */
    nextLink?: string;
}

/**
 * Defines values for ConfigurationName. \
 * {@link KnownConfigurationName} can be used interchangeably with ConfigurationName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **default**
 */
export declare type ConfigurationName = string;

/** The shared dashboard resource definition. */
export declare interface Dashboard {
    /**
     * Resource Id
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Resource name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Resource type
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** Resource location */
    location: string;
    /** Resource tags */
    tags?: {
        [propertyName: string]: string;
    };
    /** The dashboard lenses. */
    lenses?: DashboardLens[];
    /** The dashboard metadata. */
    metadata?: {
        [propertyName: string]: Record<string, unknown>;
    };
}

/** A dashboard lens. */
export declare interface DashboardLens {
    /** The lens order. */
    order: number;
    /** The dashboard parts. */
    parts: DashboardParts[];
    /** The dashboard len's metadata. */
    metadata?: {
        [propertyName: string]: Record<string, unknown>;
    };
}

/** List of dashboards. */
export declare interface DashboardListResult {
    /** The array of custom resource provider manifests. */
    value?: Dashboard[];
    /** The URL to use for getting the next set of results. */
    nextLink?: string;
}

/** A dashboard part metadata. */
export declare interface DashboardPartMetadata {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Extension/HubsExtension/PartType/MarkdownPart";
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
}

export declare type DashboardPartMetadataUnion = DashboardPartMetadata | MarkdownPartMetadata;

/** A dashboard part. */
export declare interface DashboardParts {
    /** The dashboard's part position. */
    position: DashboardPartsPosition;
    /** The dashboard part's metadata. */
    metadata?: DashboardPartMetadataUnion;
}

/** The dashboard's part position. */
export declare interface DashboardPartsPosition {
    /** The dashboard's part x coordinate. */
    x: number;
    /** The dashboard's part y coordinate. */
    y: number;
    /** The dashboard's part row span. */
    rowSpan: number;
    /** The dashboard's part column span. */
    colSpan: number;
    /** The dashboard part's metadata. */
    metadata?: {
        [propertyName: string]: Record<string, unknown>;
    };
}

/** Interface representing a Dashboards. */
export declare interface Dashboards {
    /**
     * Gets all the Dashboards within a resource group.
     * @param resourceGroupName The name of the resource group.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: DashboardsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<Dashboard>;
    /**
     * Gets all the dashboards within a subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: DashboardsListBySubscriptionOptionalParams): PagedAsyncIterableIterator<Dashboard>;
    /**
     * Creates or updates a Dashboard.
     * @param resourceGroupName The name of the resource group.
     * @param dashboardName The name of the dashboard.
     * @param dashboard The parameters required to create or update a dashboard.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, dashboardName: string, dashboard: Dashboard, options?: DashboardsCreateOrUpdateOptionalParams): Promise<DashboardsCreateOrUpdateResponse>;
    /**
     * Deletes the Dashboard.
     * @param resourceGroupName The name of the resource group.
     * @param dashboardName The name of the dashboard.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, dashboardName: string, options?: DashboardsDeleteOptionalParams): Promise<void>;
    /**
     * Gets the Dashboard.
     * @param resourceGroupName The name of the resource group.
     * @param dashboardName The name of the dashboard.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, dashboardName: string, options?: DashboardsGetOptionalParams): Promise<DashboardsGetResponse>;
    /**
     * Updates an existing Dashboard.
     * @param resourceGroupName The name of the resource group.
     * @param dashboardName The name of the dashboard.
     * @param dashboard The updatable fields of a Dashboard.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, dashboardName: string, dashboard: PatchableDashboard, options?: DashboardsUpdateOptionalParams): Promise<DashboardsUpdateResponse>;
}

/** Optional parameters. */
export declare interface DashboardsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type DashboardsCreateOrUpdateResponse = Dashboard;

/** Optional parameters. */
export declare interface DashboardsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface DashboardsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type DashboardsGetResponse = Dashboard;

/** Optional parameters. */
export declare interface DashboardsListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type DashboardsListByResourceGroupNextResponse = DashboardListResult;

/** Optional parameters. */
export declare interface DashboardsListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type DashboardsListByResourceGroupResponse = DashboardListResult;

/** Optional parameters. */
export declare interface DashboardsListBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionNext operation. */
export declare type DashboardsListBySubscriptionNextResponse = DashboardListResult;

/** Optional parameters. */
export declare interface DashboardsListBySubscriptionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscription operation. */
export declare type DashboardsListBySubscriptionResponse = DashboardListResult;

/** Optional parameters. */
export declare interface DashboardsUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type DashboardsUpdateResponse = Dashboard;

/** Error definition. */
export declare interface ErrorDefinition {
    /**
     * Service specific error code which serves as the substatus for the HTTP error code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: number;
    /**
     * Description of the error.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
    /**
     * Internal error details.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly details?: ErrorDefinition[];
}

/** Error response. */
export declare interface ErrorResponse {
    /** The error details. */
    error?: ErrorDefinition;
}

/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/** Known values of {@link ConfigurationName} that the service accepts. */
export declare enum KnownConfigurationName {
    /** Default */
    Default = "default"
}

/** Interface representing a ListTenantConfigurationViolations. */
export declare interface ListTenantConfigurationViolations {
    /**
     * Gets list of items that violate tenant's configuration.
     * @param options The options parameters.
     */
    list(options?: ListTenantConfigurationViolationsListOptionalParams): PagedAsyncIterableIterator<Violation>;
}

/** Optional parameters. */
export declare interface ListTenantConfigurationViolationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type ListTenantConfigurationViolationsListNextResponse = ViolationsList;

/** Optional parameters. */
export declare interface ListTenantConfigurationViolationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type ListTenantConfigurationViolationsListResponse = ViolationsList;

/** Markdown part metadata. */
export declare interface MarkdownPartMetadata extends DashboardPartMetadata {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Extension/HubsExtension/PartType/MarkdownPart";
    /** Input to dashboard part. */
    inputs?: Record<string, unknown>[];
    /** Markdown part settings. */
    settings?: MarkdownPartMetadataSettings;
}

/** Markdown part settings. */
export declare interface MarkdownPartMetadataSettings {
    /** The content of markdown part. */
    content?: MarkdownPartMetadataSettingsContent;
}

/** The content of markdown part. */
export declare interface MarkdownPartMetadataSettingsContent {
    /** The setting of the content of markdown part. */
    settings?: MarkdownPartMetadataSettingsContentSettings;
}

/** The setting of the content of markdown part. */
export declare interface MarkdownPartMetadataSettingsContentSettings {
    /** The content of the markdown part. */
    content?: string;
    /** The title of the markdown part. */
    title?: string;
    /** The subtitle of the markdown part. */
    subtitle?: string;
    /** The source of the content of the markdown part. */
    markdownSource?: number;
    /** The uri of markdown content. */
    markdownUri?: string;
}

/** Interface representing a Operations. */
export declare interface Operations {
    /**
     * The Microsoft Portal operations API.
     * @param options The options parameters.
     */
    list(options?: OperationsListOptionalParams): PagedAsyncIterableIterator<ResourceProviderOperation>;
}

/** Optional parameters. */
export declare interface OperationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type OperationsListNextResponse = ResourceProviderOperationList;

/** Optional parameters. */
export declare interface OperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OperationsListResponse = ResourceProviderOperationList;

/** The shared dashboard resource definition. */
export declare interface PatchableDashboard {
    /** Resource tags */
    tags?: {
        [propertyName: string]: string;
    };
    /** The dashboard lenses. */
    lenses?: DashboardLens[];
    /** The dashboard metadata. */
    metadata?: {
        [propertyName: string]: Record<string, unknown>;
    };
}

export declare class Portal extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the Portal class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g.
     *                       00000000-0000-0000-0000-000000000000)
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: PortalOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    operations: Operations;
    dashboards: Dashboards;
    tenantConfigurations: TenantConfigurations;
    listTenantConfigurationViolations: ListTenantConfigurationViolations;
}

/** Optional parameters. */
export declare interface PortalOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export declare interface ProxyResource extends Resource {
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export declare interface Resource {
    /**
     * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
}

/** Supported operations of this resource provider. */
export declare interface ResourceProviderOperation {
    /** Operation name, in format of {provider}/{resource}/{operation} */
    name?: string;
    /** Indicates whether the operation applies to data-plane. */
    isDataAction?: string;
    /** Display metadata associated with the operation. */
    display?: ResourceProviderOperationDisplay;
}

/** Display metadata associated with the operation. */
export declare interface ResourceProviderOperationDisplay {
    /** Resource provider: Microsoft Custom Providers. */
    provider?: string;
    /** Resource on which the operation is performed. */
    resource?: string;
    /** Type of operation: get, read, delete, etc. */
    operation?: string;
    /** Description of this operation. */
    description?: string;
}

/** Results of the request to list operations. */
export declare interface ResourceProviderOperationList {
    /** List of operations supported by this resource provider. */
    value?: ResourceProviderOperation[];
    /** The URL to use for getting the next set of results. */
    nextLink?: string;
}

/** Interface representing a TenantConfigurations. */
export declare interface TenantConfigurations {
    /**
     * Gets list of the tenant configurations.
     * @param options The options parameters.
     */
    list(options?: TenantConfigurationsListOptionalParams): PagedAsyncIterableIterator<Configuration>;
    /**
     * Gets the tenant configuration.
     * @param configurationName The configuration name. Value must be 'default'
     * @param options The options parameters.
     */
    get(configurationName: ConfigurationName, options?: TenantConfigurationsGetOptionalParams): Promise<TenantConfigurationsGetResponse>;
    /**
     * Create the tenant configuration. If configuration already exists - update it. User has to be a
     * Tenant Admin for this operation.
     * @param configurationName The configuration name. Value must be 'default'
     * @param tenantConfiguration The parameters required to create or update tenant configuration.
     * @param options The options parameters.
     */
    create(configurationName: ConfigurationName, tenantConfiguration: Configuration, options?: TenantConfigurationsCreateOptionalParams): Promise<TenantConfigurationsCreateResponse>;
    /**
     * Delete the tenant configuration. User has to be a Tenant Admin for this operation.
     * @param configurationName The configuration name. Value must be 'default'
     * @param options The options parameters.
     */
    delete(configurationName: ConfigurationName, options?: TenantConfigurationsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface TenantConfigurationsCreateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the create operation. */
export declare type TenantConfigurationsCreateResponse = Configuration;

/** Optional parameters. */
export declare interface TenantConfigurationsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface TenantConfigurationsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type TenantConfigurationsGetResponse = Configuration;

/** Optional parameters. */
export declare interface TenantConfigurationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type TenantConfigurationsListNextResponse = ConfigurationList;

/** Optional parameters. */
export declare interface TenantConfigurationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type TenantConfigurationsListResponse = ConfigurationList;

/** Violation information. */
export declare interface Violation {
    /**
     * Id of the item that violates tenant configuration.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Id of the user who owns violated item.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly userId?: string;
    /**
     * Error message.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly errorMessage?: string;
}

/** List of list of items that violate tenant's configuration. */
export declare interface ViolationsList {
    /** The array of violations. */
    value?: Violation[];
    /** The URL to use for getting the next set of results. */
    nextLink?: string;
}

export { }
