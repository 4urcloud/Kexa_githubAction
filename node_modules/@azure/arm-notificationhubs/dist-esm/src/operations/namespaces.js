/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await, __awaiter } from "tslib";
import { setContinuationToken } from "../pagingHelper";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
/// <reference lib="esnext.asynciterable" />
/** Class containing Namespaces operations. */
export class NamespacesImpl {
    /**
     * Initialize a new instance of the class Namespaces class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the available namespaces within a resourceGroup.
     * @param resourceGroupName The name of the resource group. If resourceGroupName value is null the
     *                          method lists all the namespaces within subscription
     * @param options The options parameters.
     */
    list(resourceGroupName, options) {
        const iter = this.listPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, options, settings) {
        return __asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._list(resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listNext(resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, options) {
        return __asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = __asyncValues(this.listPagingPage(resourceGroupName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists all the available namespaces within the subscription irrespective of the resourceGroups.
     * @param options The options parameters.
     */
    listAll(options) {
        const iter = this.listAllPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listAllPagingPage(options, settings);
            }
        };
    }
    listAllPagingPage(options, settings) {
        return __asyncGenerator(this, arguments, function* listAllPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listAll(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listAllNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listAllPagingAll(options) {
        return __asyncGenerator(this, arguments, function* listAllPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = __asyncValues(this.listAllPagingPage(options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Gets the authorization rules for a namespace.
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name
     * @param options The options parameters.
     */
    listAuthorizationRules(resourceGroupName, namespaceName, options) {
        const iter = this.listAuthorizationRulesPagingAll(resourceGroupName, namespaceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listAuthorizationRulesPagingPage(resourceGroupName, namespaceName, options, settings);
            }
        };
    }
    listAuthorizationRulesPagingPage(resourceGroupName, namespaceName, options, settings) {
        return __asyncGenerator(this, arguments, function* listAuthorizationRulesPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listAuthorizationRules(resourceGroupName, namespaceName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listAuthorizationRulesNext(resourceGroupName, namespaceName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listAuthorizationRulesPagingAll(resourceGroupName, namespaceName, options) {
        return __asyncGenerator(this, arguments, function* listAuthorizationRulesPagingAll_1() {
            var e_3, _a;
            try {
                for (var _b = __asyncValues(this.listAuthorizationRulesPagingPage(resourceGroupName, namespaceName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * Checks the availability of the given service namespace across all Azure subscriptions. This is
     * useful because the domain name is created based on the service namespace name.
     * @param parameters The namespace name.
     * @param options The options parameters.
     */
    checkAvailability(parameters, options) {
        return this.client.sendOperationRequest({ parameters, options }, checkAvailabilityOperationSpec);
    }
    /**
     * Creates/Updates a service namespace. Once created, this namespace's resource manifest is immutable.
     * This operation is idempotent.
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name.
     * @param parameters Parameters supplied to create a Namespace Resource.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, namespaceName, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, parameters, options }, createOrUpdateOperationSpec);
    }
    /**
     * Patches the existing namespace
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name.
     * @param parameters Parameters supplied to patch a Namespace Resource.
     * @param options The options parameters.
     */
    patch(resourceGroupName, namespaceName, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, parameters, options }, patchOperationSpec);
    }
    /**
     * Deletes an existing namespace. This operation also removes all associated notificationHubs under the
     * namespace.
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, namespaceName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, namespaceName, options }, deleteOperationSpec);
            const poller = new LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes an existing namespace. This operation also removes all associated notificationHubs under the
     * namespace.
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, namespaceName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, namespaceName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Returns the description for the specified namespace.
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name.
     * @param options The options parameters.
     */
    get(resourceGroupName, namespaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, options }, getOperationSpec);
    }
    /**
     * Creates an authorization rule for a namespace
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name.
     * @param authorizationRuleName Authorization Rule Name.
     * @param parameters The shared access authorization rule.
     * @param options The options parameters.
     */
    createOrUpdateAuthorizationRule(resourceGroupName, namespaceName, authorizationRuleName, parameters, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            namespaceName,
            authorizationRuleName,
            parameters,
            options
        }, createOrUpdateAuthorizationRuleOperationSpec);
    }
    /**
     * Deletes a namespace authorization rule
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name.
     * @param authorizationRuleName Authorization Rule Name.
     * @param options The options parameters.
     */
    deleteAuthorizationRule(resourceGroupName, namespaceName, authorizationRuleName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, authorizationRuleName, options }, deleteAuthorizationRuleOperationSpec);
    }
    /**
     * Gets an authorization rule for a namespace by name.
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name
     * @param authorizationRuleName Authorization rule name.
     * @param options The options parameters.
     */
    getAuthorizationRule(resourceGroupName, namespaceName, authorizationRuleName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, authorizationRuleName, options }, getAuthorizationRuleOperationSpec);
    }
    /**
     * Lists the available namespaces within a resourceGroup.
     * @param resourceGroupName The name of the resource group. If resourceGroupName value is null the
     *                          method lists all the namespaces within subscription
     * @param options The options parameters.
     */
    _list(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listOperationSpec);
    }
    /**
     * Lists all the available namespaces within the subscription irrespective of the resourceGroups.
     * @param options The options parameters.
     */
    _listAll(options) {
        return this.client.sendOperationRequest({ options }, listAllOperationSpec);
    }
    /**
     * Gets the authorization rules for a namespace.
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name
     * @param options The options parameters.
     */
    _listAuthorizationRules(resourceGroupName, namespaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, options }, listAuthorizationRulesOperationSpec);
    }
    /**
     * Gets the Primary and Secondary ConnectionStrings to the namespace
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name.
     * @param authorizationRuleName The connection string of the namespace for the specified
     *                              authorizationRule.
     * @param options The options parameters.
     */
    listKeys(resourceGroupName, namespaceName, authorizationRuleName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, authorizationRuleName, options }, listKeysOperationSpec);
    }
    /**
     * Regenerates the Primary/Secondary Keys to the Namespace Authorization Rule
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name.
     * @param authorizationRuleName The connection string of the namespace for the specified
     *                              authorizationRule.
     * @param parameters Parameters supplied to regenerate the Namespace Authorization Rule Key.
     * @param options The options parameters.
     */
    regenerateKeys(resourceGroupName, namespaceName, authorizationRuleName, parameters, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            namespaceName,
            authorizationRuleName,
            parameters,
            options
        }, regenerateKeysOperationSpec);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. If resourceGroupName value is null the
     *                          method lists all the namespaces within subscription
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, listNextOperationSpec);
    }
    /**
     * ListAllNext
     * @param nextLink The nextLink from the previous successful call to the ListAll method.
     * @param options The options parameters.
     */
    _listAllNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listAllNextOperationSpec);
    }
    /**
     * ListAuthorizationRulesNext
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name
     * @param nextLink The nextLink from the previous successful call to the ListAuthorizationRules method.
     * @param options The options parameters.
     */
    _listAuthorizationRulesNext(resourceGroupName, namespaceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, nextLink, options }, listAuthorizationRulesNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const checkAvailabilityOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.NotificationHubs/checkNamespaceAvailability",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.CheckAvailabilityResult
        }
    },
    requestBody: Parameters.parameters,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.subscriptionId],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.NamespaceResource
        },
        201: {
            bodyMapper: Mappers.NamespaceResource
        }
    },
    requestBody: Parameters.parameters1,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.namespaceName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const patchOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Mappers.NamespaceResource
        }
    },
    requestBody: Parameters.parameters2,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.namespaceName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}",
    httpMethod: "DELETE",
    responses: { 200: {}, 201: {}, 202: {}, 204: {} },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.namespaceName
    ],
    serializer
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.NamespaceResource
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.namespaceName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const createOrUpdateAuthorizationRuleOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/AuthorizationRules/{authorizationRuleName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.SharedAccessAuthorizationRuleResource
        }
    },
    requestBody: Parameters.parameters3,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.namespaceName,
        Parameters.authorizationRuleName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const deleteAuthorizationRuleOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/AuthorizationRules/{authorizationRuleName}",
    httpMethod: "DELETE",
    responses: { 200: {}, 204: {} },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.namespaceName,
        Parameters.authorizationRuleName
    ],
    serializer
};
const getAuthorizationRuleOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/AuthorizationRules/{authorizationRuleName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.SharedAccessAuthorizationRuleResource
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.namespaceName,
        Parameters.authorizationRuleName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.NamespaceListResult
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listAllOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.NotificationHubs/namespaces",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.NamespaceListResult
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.subscriptionId],
    headerParameters: [Parameters.accept],
    serializer
};
const listAuthorizationRulesOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/AuthorizationRules",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.SharedAccessAuthorizationRuleListResult
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.namespaceName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listKeysOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/AuthorizationRules/{authorizationRuleName}/listKeys",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.ResourceListKeys
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.namespaceName,
        Parameters.authorizationRuleName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const regenerateKeysOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/AuthorizationRules/{authorizationRuleName}/regenerateKeys",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.ResourceListKeys
        }
    },
    requestBody: Parameters.parameters4,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.namespaceName,
        Parameters.authorizationRuleName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.NamespaceListResult
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.nextLink,
        Parameters.subscriptionId,
        Parameters.resourceGroupName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listAllNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.NamespaceListResult
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.nextLink,
        Parameters.subscriptionId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listAuthorizationRulesNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.SharedAccessAuthorizationRuleListResult
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.nextLink,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.namespaceName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=namespaces.js.map