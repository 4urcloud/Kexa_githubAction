import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { PollerLike } from '@azure/core-lro';
import { PollOperationState } from '@azure/core-lro';

/** Defines values for AccessRights. */
export declare type AccessRights = "Manage" | "Send" | "Listen";

/** Description of a NotificationHub AdmCredential. */
export declare interface AdmCredential {
    /** The client identifier. */
    clientId?: string;
    /** The credential secret access key. */
    clientSecret?: string;
    /** The URL of the authorization token. */
    authTokenUrl?: string;
}

/** Description of a NotificationHub ApnsCredential. */
export declare interface ApnsCredential {
    /** The APNS certificate. Specify if using Certificate Authentication Mode. */
    apnsCertificate?: string;
    /** The APNS certificate password if it exists. */
    certificateKey?: string;
    /** The APNS endpoint of this credential. If using Certificate Authentication Mode and Sandbox specify 'gateway.sandbox.push.apple.com'. If using Certificate Authentication Mode and Production specify 'gateway.push.apple.com'. If using Token Authentication Mode and Sandbox specify 'https://api.development.push.apple.com:443/3/device'. If using Token Authentication Mode and Production specify 'https://api.push.apple.com:443/3/device'. */
    endpoint?: string;
    /** The APNS certificate thumbprint. Specify if using Certificate Authentication Mode. */
    thumbprint?: string;
    /** A 10-character key identifier (kid) key, obtained from your developer account. Specify if using Token Authentication Mode. */
    keyId?: string;
    /** The name of the application or BundleId. Specify if using Token Authentication Mode. */
    appName?: string;
    /** The issuer (iss) registered claim key. The value is a 10-character TeamId, obtained from your developer account. Specify if using Token Authentication Mode. */
    appId?: string;
    /** Provider Authentication Token, obtained through your developer account. Specify if using Token Authentication Mode. */
    token?: string;
}

/** Description of a NotificationHub BaiduCredential. */
export declare interface BaiduCredential {
    /** Baidu Api Key. */
    baiduApiKey?: string;
    /** Baidu Endpoint. */
    baiduEndPoint?: string;
    /** Baidu Secret Key */
    baiduSecretKey?: string;
}

/** Parameters supplied to the Check Name Availability for Namespace and NotificationHubs. */
export declare interface CheckAvailabilityParameters {
    /**
     * Resource Id
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /** Resource name */
    name: string;
    /**
     * Resource type
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** Resource location */
    location?: string;
    /** Resource tags */
    tags?: {
        [propertyName: string]: string;
    };
    /** The sku of the created namespace */
    sku?: Sku;
    /** True if the name is available and can be used to create new Namespace/NotificationHub. Otherwise false. */
    isAvailiable?: boolean;
}

/** Description of a CheckAvailability resource. */
export declare interface CheckAvailabilityResult extends Resource {
    /** True if the name is available and can be used to create new Namespace/NotificationHub. Otherwise false. */
    isAvailiable?: boolean;
}

/** Description of a NotificationHub Resource. */
export declare interface DebugSendResponse extends Resource {
    /** successful send */
    success?: number;
    /** send failure */
    failure?: number;
    /** actual failure description */
    results?: Record<string, unknown>;
}

/** Error response indicates NotificationHubs service is not able to process the incoming request. The reason is provided in the error message. */
export declare interface ErrorResponse {
    /** Error code. */
    code?: string;
    /** Error message indicating why the operation failed. */
    message?: string;
}

/** Description of a NotificationHub GcmCredential. */
export declare interface GcmCredential {
    /** The FCM legacy endpoint. Default value is 'https://fcm.googleapis.com/fcm/send' */
    gcmEndpoint?: string;
    /** The Google API key. */
    googleApiKey?: string;
}

/**
 * Given a result page from a pageable operation, returns a
 * continuation token that can be used to begin paging from
 * that point later.
 * @param page A result object from calling .byPage() on a paged operation.
 * @returns The continuation token that can be passed into byPage().
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/** Known values of {@link SkuName} that the service accepts. */
export declare enum KnownSkuName {
    /** Free */
    Free = "Free",
    /** Basic */
    Basic = "Basic",
    /** Standard */
    Standard = "Standard"
}

/** Description of a NotificationHub MpnsCredential. */
export declare interface MpnsCredential {
    /** The MPNS certificate. */
    mpnsCertificate?: string;
    /** The certificate key for this credential. */
    certificateKey?: string;
    /** The MPNS certificate Thumbprint */
    thumbprint?: string;
}

/** Parameters supplied to the CreateOrUpdate Namespace operation. */
export declare interface NamespaceCreateOrUpdateParameters extends Resource {
    /** The name of the namespace. */
    namePropertiesName?: string;
    /** Provisioning state of the Namespace. */
    provisioningState?: string;
    /** Specifies the targeted region in which the namespace should be created. It can be any of the following values: Australia East, Australia Southeast, Central US, East US, East US 2, West US, North Central US, South Central US, East Asia, Southeast Asia, Brazil South, Japan East, Japan West, North Europe, West Europe */
    region?: string;
    /**
     * Identifier for Azure Insights metrics
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly metricId?: string;
    /** Status of the namespace. It can be any of these values:1 = Created/Active2 = Creating3 = Suspended4 = Deleting */
    status?: string;
    /** The time the namespace was created. */
    createdAt?: Date;
    /** The time the namespace was updated. */
    updatedAt?: Date;
    /** Endpoint you can use to perform NotificationHub operations. */
    serviceBusEndpoint?: string;
    /** The Id of the Azure subscription associated with the namespace. */
    subscriptionId?: string;
    /** ScaleUnit where the namespace gets created */
    scaleUnit?: string;
    /** Whether or not the namespace is currently enabled. */
    enabled?: boolean;
    /** Whether or not the namespace is set as Critical. */
    critical?: boolean;
    /** Data center for the namespace */
    dataCenter?: string;
    /** The namespace type. */
    namespaceType?: NamespaceType;
}

/** The response of the List Namespace operation. */
export declare interface NamespaceListResult {
    /** Result of the List Namespace operation. */
    value?: NamespaceResource[];
    /** Link to the next set of results. Not empty if Value contains incomplete list of Namespaces */
    nextLink?: string;
}

/** Parameters supplied to the Patch Namespace operation. */
export declare interface NamespacePatchParameters {
    /** Resource tags */
    tags?: {
        [propertyName: string]: string;
    };
    /** The sku of the created namespace */
    sku?: Sku;
}

/** Description of a Namespace resource. */
export declare interface NamespaceResource extends Resource {
    /** The name of the namespace. */
    namePropertiesName?: string;
    /** Provisioning state of the Namespace. */
    provisioningState?: string;
    /** Specifies the targeted region in which the namespace should be created. It can be any of the following values: Australia East, Australia Southeast, Central US, East US, East US 2, West US, North Central US, South Central US, East Asia, Southeast Asia, Brazil South, Japan East, Japan West, North Europe, West Europe */
    region?: string;
    /**
     * Identifier for Azure Insights metrics
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly metricId?: string;
    /** Status of the namespace. It can be any of these values:1 = Created/Active2 = Creating3 = Suspended4 = Deleting */
    status?: string;
    /** The time the namespace was created. */
    createdAt?: Date;
    /** The time the namespace was updated. */
    updatedAt?: Date;
    /** Endpoint you can use to perform NotificationHub operations. */
    serviceBusEndpoint?: string;
    /** The Id of the Azure subscription associated with the namespace. */
    subscriptionId?: string;
    /** ScaleUnit where the namespace gets created */
    scaleUnit?: string;
    /** Whether or not the namespace is currently enabled. */
    enabled?: boolean;
    /** Whether or not the namespace is set as Critical. */
    critical?: boolean;
    /** Data center for the namespace */
    dataCenter?: string;
    /** The namespace type. */
    namespaceType?: NamespaceType;
}

/** Interface representing a Namespaces. */
export declare interface Namespaces {
    /**
     * Lists the available namespaces within a resourceGroup.
     * @param resourceGroupName The name of the resource group. If resourceGroupName value is null the
     *                          method lists all the namespaces within subscription
     * @param options The options parameters.
     */
    list(resourceGroupName: string, options?: NamespacesListOptionalParams): PagedAsyncIterableIterator<NamespaceResource>;
    /**
     * Lists all the available namespaces within the subscription irrespective of the resourceGroups.
     * @param options The options parameters.
     */
    listAll(options?: NamespacesListAllOptionalParams): PagedAsyncIterableIterator<NamespaceResource>;
    /**
     * Gets the authorization rules for a namespace.
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name
     * @param options The options parameters.
     */
    listAuthorizationRules(resourceGroupName: string, namespaceName: string, options?: NamespacesListAuthorizationRulesOptionalParams): PagedAsyncIterableIterator<SharedAccessAuthorizationRuleResource>;
    /**
     * Checks the availability of the given service namespace across all Azure subscriptions. This is
     * useful because the domain name is created based on the service namespace name.
     * @param parameters The namespace name.
     * @param options The options parameters.
     */
    checkAvailability(parameters: CheckAvailabilityParameters, options?: NamespacesCheckAvailabilityOptionalParams): Promise<NamespacesCheckAvailabilityResponse>;
    /**
     * Creates/Updates a service namespace. Once created, this namespace's resource manifest is immutable.
     * This operation is idempotent.
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name.
     * @param parameters Parameters supplied to create a Namespace Resource.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, namespaceName: string, parameters: NamespaceCreateOrUpdateParameters, options?: NamespacesCreateOrUpdateOptionalParams): Promise<NamespacesCreateOrUpdateResponse>;
    /**
     * Patches the existing namespace
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name.
     * @param parameters Parameters supplied to patch a Namespace Resource.
     * @param options The options parameters.
     */
    patch(resourceGroupName: string, namespaceName: string, parameters: NamespacePatchParameters, options?: NamespacesPatchOptionalParams): Promise<NamespacesPatchResponse>;
    /**
     * Deletes an existing namespace. This operation also removes all associated notificationHubs under the
     * namespace.
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, namespaceName: string, options?: NamespacesDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes an existing namespace. This operation also removes all associated notificationHubs under the
     * namespace.
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, namespaceName: string, options?: NamespacesDeleteOptionalParams): Promise<void>;
    /**
     * Returns the description for the specified namespace.
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, namespaceName: string, options?: NamespacesGetOptionalParams): Promise<NamespacesGetResponse>;
    /**
     * Creates an authorization rule for a namespace
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name.
     * @param authorizationRuleName Authorization Rule Name.
     * @param parameters The shared access authorization rule.
     * @param options The options parameters.
     */
    createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, parameters: SharedAccessAuthorizationRuleCreateOrUpdateParameters, options?: NamespacesCreateOrUpdateAuthorizationRuleOptionalParams): Promise<NamespacesCreateOrUpdateAuthorizationRuleResponse>;
    /**
     * Deletes a namespace authorization rule
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name.
     * @param authorizationRuleName Authorization Rule Name.
     * @param options The options parameters.
     */
    deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, options?: NamespacesDeleteAuthorizationRuleOptionalParams): Promise<void>;
    /**
     * Gets an authorization rule for a namespace by name.
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name
     * @param authorizationRuleName Authorization rule name.
     * @param options The options parameters.
     */
    getAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, options?: NamespacesGetAuthorizationRuleOptionalParams): Promise<NamespacesGetAuthorizationRuleResponse>;
    /**
     * Gets the Primary and Secondary ConnectionStrings to the namespace
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name.
     * @param authorizationRuleName The connection string of the namespace for the specified
     *                              authorizationRule.
     * @param options The options parameters.
     */
    listKeys(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, options?: NamespacesListKeysOptionalParams): Promise<NamespacesListKeysResponse>;
    /**
     * Regenerates the Primary/Secondary Keys to the Namespace Authorization Rule
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name.
     * @param authorizationRuleName The connection string of the namespace for the specified
     *                              authorizationRule.
     * @param parameters Parameters supplied to regenerate the Namespace Authorization Rule Key.
     * @param options The options parameters.
     */
    regenerateKeys(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, parameters: PolicykeyResource, options?: NamespacesRegenerateKeysOptionalParams): Promise<NamespacesRegenerateKeysResponse>;
}

/** Optional parameters. */
export declare interface NamespacesCheckAvailabilityOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the checkAvailability operation. */
export declare type NamespacesCheckAvailabilityResponse = CheckAvailabilityResult;

/** Optional parameters. */
export declare interface NamespacesCreateOrUpdateAuthorizationRuleOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdateAuthorizationRule operation. */
export declare type NamespacesCreateOrUpdateAuthorizationRuleResponse = SharedAccessAuthorizationRuleResource;

/** Optional parameters. */
export declare interface NamespacesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type NamespacesCreateOrUpdateResponse = NamespaceResource;

/** Optional parameters. */
export declare interface NamespacesDeleteAuthorizationRuleOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface NamespacesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface NamespacesGetAuthorizationRuleOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getAuthorizationRule operation. */
export declare type NamespacesGetAuthorizationRuleResponse = SharedAccessAuthorizationRuleResource;

/** Optional parameters. */
export declare interface NamespacesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type NamespacesGetResponse = NamespaceResource;

/** Optional parameters. */
export declare interface NamespacesListAllNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listAllNext operation. */
export declare type NamespacesListAllNextResponse = NamespaceListResult;

/** Optional parameters. */
export declare interface NamespacesListAllOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listAll operation. */
export declare type NamespacesListAllResponse = NamespaceListResult;

/** Optional parameters. */
export declare interface NamespacesListAuthorizationRulesNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listAuthorizationRulesNext operation. */
export declare type NamespacesListAuthorizationRulesNextResponse = SharedAccessAuthorizationRuleListResult;

/** Optional parameters. */
export declare interface NamespacesListAuthorizationRulesOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listAuthorizationRules operation. */
export declare type NamespacesListAuthorizationRulesResponse = SharedAccessAuthorizationRuleListResult;

/** Optional parameters. */
export declare interface NamespacesListKeysOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listKeys operation. */
export declare type NamespacesListKeysResponse = ResourceListKeys;

/** Optional parameters. */
export declare interface NamespacesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type NamespacesListNextResponse = NamespaceListResult;

/** Optional parameters. */
export declare interface NamespacesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type NamespacesListResponse = NamespaceListResult;

/** Optional parameters. */
export declare interface NamespacesPatchOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the patch operation. */
export declare type NamespacesPatchResponse = NamespaceResource;

/** Optional parameters. */
export declare interface NamespacesRegenerateKeysOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the regenerateKeys operation. */
export declare type NamespacesRegenerateKeysResponse = ResourceListKeys;

/** Defines values for NamespaceType. */
export declare type NamespaceType = "Messaging" | "NotificationHub";

/** Parameters supplied to the CreateOrUpdate NotificationHub operation. */
export declare interface NotificationHubCreateOrUpdateParameters extends Resource {
    /** The NotificationHub name. */
    namePropertiesName?: string;
    /** The RegistrationTtl of the created NotificationHub */
    registrationTtl?: string;
    /** The AuthorizationRules of the created NotificationHub */
    authorizationRules?: SharedAccessAuthorizationRuleProperties[];
    /** The ApnsCredential of the created NotificationHub */
    apnsCredential?: ApnsCredential;
    /** The WnsCredential of the created NotificationHub */
    wnsCredential?: WnsCredential;
    /** The GcmCredential of the created NotificationHub */
    gcmCredential?: GcmCredential;
    /** The MpnsCredential of the created NotificationHub */
    mpnsCredential?: MpnsCredential;
    /** The AdmCredential of the created NotificationHub */
    admCredential?: AdmCredential;
    /** The BaiduCredential of the created NotificationHub */
    baiduCredential?: BaiduCredential;
}

/** The response of the List NotificationHub operation. */
export declare interface NotificationHubListResult {
    /** Result of the List NotificationHub operation. */
    value?: NotificationHubResource[];
    /** Link to the next set of results. Not empty if Value contains incomplete list of NotificationHub */
    nextLink?: string;
}

/** Parameters supplied to the patch NotificationHub operation. */
export declare interface NotificationHubPatchParameters extends Resource {
    /** The NotificationHub name. */
    namePropertiesName?: string;
    /** The RegistrationTtl of the created NotificationHub */
    registrationTtl?: string;
    /** The AuthorizationRules of the created NotificationHub */
    authorizationRules?: SharedAccessAuthorizationRuleProperties[];
    /** The ApnsCredential of the created NotificationHub */
    apnsCredential?: ApnsCredential;
    /** The WnsCredential of the created NotificationHub */
    wnsCredential?: WnsCredential;
    /** The GcmCredential of the created NotificationHub */
    gcmCredential?: GcmCredential;
    /** The MpnsCredential of the created NotificationHub */
    mpnsCredential?: MpnsCredential;
    /** The AdmCredential of the created NotificationHub */
    admCredential?: AdmCredential;
    /** The BaiduCredential of the created NotificationHub */
    baiduCredential?: BaiduCredential;
}

/** Description of a NotificationHub Resource. */
export declare interface NotificationHubResource extends Resource {
    /** The NotificationHub name. */
    namePropertiesName?: string;
    /** The RegistrationTtl of the created NotificationHub */
    registrationTtl?: string;
    /** The AuthorizationRules of the created NotificationHub */
    authorizationRules?: SharedAccessAuthorizationRuleProperties[];
    /** The ApnsCredential of the created NotificationHub */
    apnsCredential?: ApnsCredential;
    /** The WnsCredential of the created NotificationHub */
    wnsCredential?: WnsCredential;
    /** The GcmCredential of the created NotificationHub */
    gcmCredential?: GcmCredential;
    /** The MpnsCredential of the created NotificationHub */
    mpnsCredential?: MpnsCredential;
    /** The AdmCredential of the created NotificationHub */
    admCredential?: AdmCredential;
    /** The BaiduCredential of the created NotificationHub */
    baiduCredential?: BaiduCredential;
}

/** Interface representing a NotificationHubs. */
export declare interface NotificationHubs {
    /**
     * Lists the notification hubs associated with a namespace.
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, namespaceName: string, options?: NotificationHubsListOptionalParams): PagedAsyncIterableIterator<NotificationHubResource>;
    /**
     * Gets the authorization rules for a NotificationHub.
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name
     * @param notificationHubName The notification hub name.
     * @param options The options parameters.
     */
    listAuthorizationRules(resourceGroupName: string, namespaceName: string, notificationHubName: string, options?: NotificationHubsListAuthorizationRulesOptionalParams): PagedAsyncIterableIterator<SharedAccessAuthorizationRuleResource>;
    /**
     * Checks the availability of the given notificationHub in a namespace.
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name.
     * @param parameters The notificationHub name.
     * @param options The options parameters.
     */
    checkNotificationHubAvailability(resourceGroupName: string, namespaceName: string, parameters: CheckAvailabilityParameters, options?: NotificationHubsCheckNotificationHubAvailabilityOptionalParams): Promise<NotificationHubsCheckNotificationHubAvailabilityResponse>;
    /**
     * Creates/Update a NotificationHub in a namespace.
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name.
     * @param notificationHubName The notification hub name.
     * @param parameters Parameters supplied to the create/update a NotificationHub Resource.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, namespaceName: string, notificationHubName: string, parameters: NotificationHubCreateOrUpdateParameters, options?: NotificationHubsCreateOrUpdateOptionalParams): Promise<NotificationHubsCreateOrUpdateResponse>;
    /**
     * Patch a NotificationHub in a namespace.
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name.
     * @param notificationHubName The notification hub name.
     * @param options The options parameters.
     */
    patch(resourceGroupName: string, namespaceName: string, notificationHubName: string, options?: NotificationHubsPatchOptionalParams): Promise<NotificationHubsPatchResponse>;
    /**
     * Deletes a notification hub associated with a namespace.
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name.
     * @param notificationHubName The notification hub name.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, namespaceName: string, notificationHubName: string, options?: NotificationHubsDeleteOptionalParams): Promise<void>;
    /**
     * Lists the notification hubs associated with a namespace.
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name.
     * @param notificationHubName The notification hub name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, namespaceName: string, notificationHubName: string, options?: NotificationHubsGetOptionalParams): Promise<NotificationHubsGetResponse>;
    /**
     * test send a push notification
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name.
     * @param notificationHubName The notification hub name.
     * @param options The options parameters.
     */
    debugSend(resourceGroupName: string, namespaceName: string, notificationHubName: string, options?: NotificationHubsDebugSendOptionalParams): Promise<NotificationHubsDebugSendResponse>;
    /**
     * Creates/Updates an authorization rule for a NotificationHub
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name.
     * @param notificationHubName The notification hub name.
     * @param authorizationRuleName Authorization Rule Name.
     * @param parameters The shared access authorization rule.
     * @param options The options parameters.
     */
    createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, notificationHubName: string, authorizationRuleName: string, parameters: SharedAccessAuthorizationRuleCreateOrUpdateParameters, options?: NotificationHubsCreateOrUpdateAuthorizationRuleOptionalParams): Promise<NotificationHubsCreateOrUpdateAuthorizationRuleResponse>;
    /**
     * Deletes a notificationHub authorization rule
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name.
     * @param notificationHubName The notification hub name.
     * @param authorizationRuleName Authorization Rule Name.
     * @param options The options parameters.
     */
    deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, notificationHubName: string, authorizationRuleName: string, options?: NotificationHubsDeleteAuthorizationRuleOptionalParams): Promise<void>;
    /**
     * Gets an authorization rule for a NotificationHub by name.
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name
     * @param notificationHubName The notification hub name.
     * @param authorizationRuleName authorization rule name.
     * @param options The options parameters.
     */
    getAuthorizationRule(resourceGroupName: string, namespaceName: string, notificationHubName: string, authorizationRuleName: string, options?: NotificationHubsGetAuthorizationRuleOptionalParams): Promise<NotificationHubsGetAuthorizationRuleResponse>;
    /**
     * Gets the Primary and Secondary ConnectionStrings to the NotificationHub
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name.
     * @param notificationHubName The notification hub name.
     * @param authorizationRuleName The connection string of the NotificationHub for the specified
     *                              authorizationRule.
     * @param options The options parameters.
     */
    listKeys(resourceGroupName: string, namespaceName: string, notificationHubName: string, authorizationRuleName: string, options?: NotificationHubsListKeysOptionalParams): Promise<NotificationHubsListKeysResponse>;
    /**
     * Regenerates the Primary/Secondary Keys to the NotificationHub Authorization Rule
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name.
     * @param notificationHubName The notification hub name.
     * @param authorizationRuleName The connection string of the NotificationHub for the specified
     *                              authorizationRule.
     * @param parameters Parameters supplied to regenerate the NotificationHub Authorization Rule Key.
     * @param options The options parameters.
     */
    regenerateKeys(resourceGroupName: string, namespaceName: string, notificationHubName: string, authorizationRuleName: string, parameters: PolicykeyResource, options?: NotificationHubsRegenerateKeysOptionalParams): Promise<NotificationHubsRegenerateKeysResponse>;
    /**
     * Lists the PNS Credentials associated with a notification hub .
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name.
     * @param notificationHubName The notification hub name.
     * @param options The options parameters.
     */
    getPnsCredentials(resourceGroupName: string, namespaceName: string, notificationHubName: string, options?: NotificationHubsGetPnsCredentialsOptionalParams): Promise<NotificationHubsGetPnsCredentialsResponse>;
}

/** Optional parameters. */
export declare interface NotificationHubsCheckNotificationHubAvailabilityOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the checkNotificationHubAvailability operation. */
export declare type NotificationHubsCheckNotificationHubAvailabilityResponse = CheckAvailabilityResult;

/** Optional parameters. */
export declare interface NotificationHubsCreateOrUpdateAuthorizationRuleOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdateAuthorizationRule operation. */
export declare type NotificationHubsCreateOrUpdateAuthorizationRuleResponse = SharedAccessAuthorizationRuleResource;

/** Optional parameters. */
export declare interface NotificationHubsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type NotificationHubsCreateOrUpdateResponse = NotificationHubResource;

/** Optional parameters. */
export declare interface NotificationHubsDebugSendOptionalParams extends coreClient.OperationOptions {
    /** Debug send parameters */
    parameters?: Record<string, unknown>;
}

/** Contains response data for the debugSend operation. */
export declare type NotificationHubsDebugSendResponse = DebugSendResponse;

/** Optional parameters. */
export declare interface NotificationHubsDeleteAuthorizationRuleOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface NotificationHubsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface NotificationHubsGetAuthorizationRuleOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getAuthorizationRule operation. */
export declare type NotificationHubsGetAuthorizationRuleResponse = SharedAccessAuthorizationRuleResource;

/** Optional parameters. */
export declare interface NotificationHubsGetOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface NotificationHubsGetPnsCredentialsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getPnsCredentials operation. */
export declare type NotificationHubsGetPnsCredentialsResponse = PnsCredentialsResource;

/** Contains response data for the get operation. */
export declare type NotificationHubsGetResponse = NotificationHubResource;

/** Optional parameters. */
export declare interface NotificationHubsListAuthorizationRulesNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listAuthorizationRulesNext operation. */
export declare type NotificationHubsListAuthorizationRulesNextResponse = SharedAccessAuthorizationRuleListResult;

/** Optional parameters. */
export declare interface NotificationHubsListAuthorizationRulesOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listAuthorizationRules operation. */
export declare type NotificationHubsListAuthorizationRulesResponse = SharedAccessAuthorizationRuleListResult;

/** Optional parameters. */
export declare interface NotificationHubsListKeysOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listKeys operation. */
export declare type NotificationHubsListKeysResponse = ResourceListKeys;

/** Optional parameters. */
export declare interface NotificationHubsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type NotificationHubsListNextResponse = NotificationHubListResult;

/** Optional parameters. */
export declare interface NotificationHubsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type NotificationHubsListResponse = NotificationHubListResult;

export declare class NotificationHubsManagementClient extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the NotificationHubsManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure
     *                       subscription. The subscription ID forms part of the URI for every service call.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: NotificationHubsManagementClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    operations: Operations;
    namespaces: Namespaces;
    notificationHubs: NotificationHubs;
}

/** Optional parameters. */
export declare interface NotificationHubsManagementClientOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** Optional parameters. */
export declare interface NotificationHubsPatchOptionalParams extends coreClient.OperationOptions {
    /** Parameters supplied to patch a NotificationHub Resource. */
    parameters?: NotificationHubPatchParameters;
}

/** Contains response data for the patch operation. */
export declare type NotificationHubsPatchResponse = NotificationHubResource;

/** Optional parameters. */
export declare interface NotificationHubsRegenerateKeysOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the regenerateKeys operation. */
export declare type NotificationHubsRegenerateKeysResponse = ResourceListKeys;

/** A NotificationHubs REST API operation */
export declare interface Operation {
    /**
     * Operation name: {provider}/{resource}/{operation}
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /** The object that represents the operation. */
    display?: OperationDisplay;
}

/** The object that represents the operation. */
export declare interface OperationDisplay {
    /**
     * Service provider: Microsoft.NotificationHubs
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provider?: string;
    /**
     * Resource on which the operation is performed: Invoice, etc.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resource?: string;
    /**
     * Operation type: Read, write, delete, etc.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly operation?: string;
}

/** Result of the request to list NotificationHubs operations. It contains a list of operations and a URL link to get the next set of results. */
export declare interface OperationListResult {
    /**
     * List of NotificationHubs operations supported by the Microsoft.NotificationHubs resource provider.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: Operation[];
    /**
     * URL to get the next set of operation list results if there are any.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a Operations. */
export declare interface Operations {
    /**
     * Lists all of the available NotificationHubs REST API operations.
     * @param options The options parameters.
     */
    list(options?: OperationsListOptionalParams): PagedAsyncIterableIterator<Operation>;
}

/** Optional parameters. */
export declare interface OperationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export declare interface OperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OperationsListResponse = OperationListResult;

/** Description of a NotificationHub PNS Credentials. */
export declare interface PnsCredentialsResource extends Resource {
    /** The ApnsCredential of the created NotificationHub */
    apnsCredential?: ApnsCredential;
    /** The WnsCredential of the created NotificationHub */
    wnsCredential?: WnsCredential;
    /** The GcmCredential of the created NotificationHub */
    gcmCredential?: GcmCredential;
    /** The MpnsCredential of the created NotificationHub */
    mpnsCredential?: MpnsCredential;
    /** The AdmCredential of the created NotificationHub */
    admCredential?: AdmCredential;
    /** The BaiduCredential of the created NotificationHub */
    baiduCredential?: BaiduCredential;
}

/** Namespace/NotificationHub Regenerate Keys */
export declare interface PolicykeyResource {
    /** Name of the key that has to be regenerated for the Namespace/Notification Hub Authorization Rule. The value can be Primary Key/Secondary Key. */
    policyKey?: string;
}

export declare interface Resource {
    /**
     * Resource Id
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Resource name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Resource type
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** Resource location */
    location?: string;
    /** Resource tags */
    tags?: {
        [propertyName: string]: string;
    };
    /** The sku of the created namespace */
    sku?: Sku;
}

/** Namespace/NotificationHub Connection String */
export declare interface ResourceListKeys {
    /** PrimaryConnectionString of the AuthorizationRule. */
    primaryConnectionString?: string;
    /** SecondaryConnectionString of the created AuthorizationRule */
    secondaryConnectionString?: string;
    /** PrimaryKey of the created AuthorizationRule. */
    primaryKey?: string;
    /** SecondaryKey of the created AuthorizationRule */
    secondaryKey?: string;
    /** KeyName of the created AuthorizationRule */
    keyName?: string;
}

/** Parameters supplied to the CreateOrUpdate Namespace AuthorizationRules. */
export declare interface SharedAccessAuthorizationRuleCreateOrUpdateParameters {
    /** Properties of the Namespace AuthorizationRules. */
    properties: SharedAccessAuthorizationRuleProperties;
}

/** The response of the List Namespace operation. */
export declare interface SharedAccessAuthorizationRuleListResult {
    /** Result of the List AuthorizationRules operation. */
    value?: SharedAccessAuthorizationRuleResource[];
    /** Link to the next set of results. Not empty if Value contains incomplete list of AuthorizationRules */
    nextLink?: string;
}

/** SharedAccessAuthorizationRule properties. */
export declare interface SharedAccessAuthorizationRuleProperties {
    /** The rights associated with the rule. */
    rights?: AccessRights[];
    /**
     * A base64-encoded 256-bit primary key for signing and validating the SAS token.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly primaryKey?: string;
    /**
     * A base64-encoded 256-bit primary key for signing and validating the SAS token.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly secondaryKey?: string;
    /**
     * A string that describes the authorization rule.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly keyName?: string;
    /**
     * A string that describes the claim type
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly claimType?: string;
    /**
     * A string that describes the claim value
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly claimValue?: string;
    /**
     * The last modified time for this rule
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly modifiedTime?: string;
    /**
     * The created time for this rule
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdTime?: string;
    /**
     * The revision number for the rule
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly revision?: number;
}

/** Description of a Namespace AuthorizationRules. */
export declare interface SharedAccessAuthorizationRuleResource extends Resource {
    /** The rights associated with the rule. */
    rights?: AccessRights[];
    /**
     * A base64-encoded 256-bit primary key for signing and validating the SAS token.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly primaryKey?: string;
    /**
     * A base64-encoded 256-bit primary key for signing and validating the SAS token.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly secondaryKey?: string;
    /**
     * A string that describes the authorization rule.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly keyName?: string;
    /**
     * A string that describes the claim type
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly claimType?: string;
    /**
     * A string that describes the claim value
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly claimValue?: string;
    /**
     * The last modified time for this rule
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly modifiedTime?: string;
    /**
     * The created time for this rule
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdTime?: string;
    /**
     * The revision number for the rule
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly revision?: number;
}

/** The Sku description for a namespace */
export declare interface Sku {
    /** Name of the notification hub sku */
    name: SkuName;
    /** The tier of particular sku */
    tier?: string;
    /** The Sku size */
    size?: string;
    /** The Sku Family */
    family?: string;
    /** The capacity of the resource */
    capacity?: number;
}

/**
 * Defines values for SkuName. \
 * {@link KnownSkuName} can be used interchangeably with SkuName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Free** \
 * **Basic** \
 * **Standard**
 */
export declare type SkuName = string;

export declare interface SubResource {
    /** Resource Id */
    id?: string;
}

/** Description of a NotificationHub WnsCredential. */
export declare interface WnsCredential {
    /** The package ID for this credential. */
    packageSid?: string;
    /** The secret key. */
    secretKey?: string;
    /** The Windows Live endpoint. */
    windowsLiveEndpoint?: string;
}

export { }
