'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var coreClient = require('@azure/core-client');
var coreRestPipeline = require('@azure/core-rest-pipeline');
var coreLro = require('@azure/core-lro');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var coreClient__namespace = /*#__PURE__*/_interopNamespace(coreClient);
var coreRestPipeline__namespace = /*#__PURE__*/_interopNamespace(coreRestPipeline);

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const pageMap = new WeakMap();
/**
 * Given a result page from a pageable operation, returns a
 * continuation token that can be used to begin paging from
 * that point later.
 * @param page A result object from calling .byPage() on a paged operation.
 * @returns The continuation token that can be passed into byPage().
 */
function getContinuationToken(page) {
    var _a;
    if (typeof page !== "object" || page === null) {
        return undefined;
    }
    return (_a = pageMap.get(page)) === null || _a === void 0 ? void 0 : _a.continuationToken;
}
function setContinuationToken(page, continuationToken) {
    var _a;
    if (typeof page !== "object" || page === null || !continuationToken) {
        return;
    }
    const pageInfo = (_a = pageMap.get(page)) !== null && _a !== void 0 ? _a : {};
    pageInfo.continuationToken = continuationToken;
    pageMap.set(page, pageInfo);
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link SkuName} that the service accepts. */
exports.KnownSkuName = void 0;
(function (KnownSkuName) {
    /** Free */
    KnownSkuName["Free"] = "Free";
    /** Basic */
    KnownSkuName["Basic"] = "Basic";
    /** Standard */
    KnownSkuName["Standard"] = "Standard";
})(exports.KnownSkuName || (exports.KnownSkuName = {}));

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const OperationListResult = {
    type: {
        name: "Composite",
        className: "OperationListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Operation"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Operation = {
    type: {
        name: "Composite",
        className: "Operation",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            display: {
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "OperationDisplay"
                }
            }
        }
    }
};
const OperationDisplay = {
    type: {
        name: "Composite",
        className: "OperationDisplay",
        modelProperties: {
            provider: {
                serializedName: "provider",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "resource",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ErrorResponse = {
    type: {
        name: "Composite",
        className: "ErrorResponse",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CheckAvailabilityParameters = {
    type: {
        name: "Composite",
        className: "CheckAvailabilityParameters",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "Sku"
                }
            },
            isAvailiable: {
                serializedName: "isAvailiable",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const Sku = {
    type: {
        name: "Composite",
        className: "Sku",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            tier: {
                serializedName: "tier",
                type: {
                    name: "String"
                }
            },
            size: {
                serializedName: "size",
                type: {
                    name: "String"
                }
            },
            family: {
                serializedName: "family",
                type: {
                    name: "String"
                }
            },
            capacity: {
                serializedName: "capacity",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const Resource = {
    type: {
        name: "Composite",
        className: "Resource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "Sku"
                }
            }
        }
    }
};
const NamespacePatchParameters = {
    type: {
        name: "Composite",
        className: "NamespacePatchParameters",
        modelProperties: {
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "Sku"
                }
            }
        }
    }
};
const SharedAccessAuthorizationRuleCreateOrUpdateParameters = {
    type: {
        name: "Composite",
        className: "SharedAccessAuthorizationRuleCreateOrUpdateParameters",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "SharedAccessAuthorizationRuleProperties"
                }
            }
        }
    }
};
const SharedAccessAuthorizationRuleProperties = {
    type: {
        name: "Composite",
        className: "SharedAccessAuthorizationRuleProperties",
        modelProperties: {
            rights: {
                serializedName: "rights",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Enum",
                            allowedValues: ["Manage", "Send", "Listen"]
                        }
                    }
                }
            },
            primaryKey: {
                serializedName: "primaryKey",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            secondaryKey: {
                serializedName: "secondaryKey",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            keyName: {
                serializedName: "keyName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            claimType: {
                serializedName: "claimType",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            claimValue: {
                serializedName: "claimValue",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            modifiedTime: {
                serializedName: "modifiedTime",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            createdTime: {
                serializedName: "createdTime",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            revision: {
                serializedName: "revision",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const NamespaceListResult = {
    type: {
        name: "Composite",
        className: "NamespaceListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "NamespaceResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SharedAccessAuthorizationRuleListResult = {
    type: {
        name: "Composite",
        className: "SharedAccessAuthorizationRuleListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SharedAccessAuthorizationRuleResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ResourceListKeys = {
    type: {
        name: "Composite",
        className: "ResourceListKeys",
        modelProperties: {
            primaryConnectionString: {
                serializedName: "primaryConnectionString",
                type: {
                    name: "String"
                }
            },
            secondaryConnectionString: {
                serializedName: "secondaryConnectionString",
                type: {
                    name: "String"
                }
            },
            primaryKey: {
                serializedName: "primaryKey",
                type: {
                    name: "String"
                }
            },
            secondaryKey: {
                serializedName: "secondaryKey",
                type: {
                    name: "String"
                }
            },
            keyName: {
                serializedName: "keyName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PolicykeyResource = {
    type: {
        name: "Composite",
        className: "PolicykeyResource",
        modelProperties: {
            policyKey: {
                serializedName: "policyKey",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ApnsCredential = {
    type: {
        name: "Composite",
        className: "ApnsCredential",
        modelProperties: {
            apnsCertificate: {
                serializedName: "properties.apnsCertificate",
                type: {
                    name: "String"
                }
            },
            certificateKey: {
                serializedName: "properties.certificateKey",
                type: {
                    name: "String"
                }
            },
            endpoint: {
                serializedName: "properties.endpoint",
                type: {
                    name: "String"
                }
            },
            thumbprint: {
                serializedName: "properties.thumbprint",
                type: {
                    name: "String"
                }
            },
            keyId: {
                serializedName: "properties.keyId",
                type: {
                    name: "String"
                }
            },
            appName: {
                serializedName: "properties.appName",
                type: {
                    name: "String"
                }
            },
            appId: {
                serializedName: "properties.appId",
                type: {
                    name: "String"
                }
            },
            token: {
                serializedName: "properties.token",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const WnsCredential = {
    type: {
        name: "Composite",
        className: "WnsCredential",
        modelProperties: {
            packageSid: {
                serializedName: "properties.packageSid",
                type: {
                    name: "String"
                }
            },
            secretKey: {
                serializedName: "properties.secretKey",
                type: {
                    name: "String"
                }
            },
            windowsLiveEndpoint: {
                serializedName: "properties.windowsLiveEndpoint",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const GcmCredential = {
    type: {
        name: "Composite",
        className: "GcmCredential",
        modelProperties: {
            gcmEndpoint: {
                serializedName: "properties.gcmEndpoint",
                type: {
                    name: "String"
                }
            },
            googleApiKey: {
                serializedName: "properties.googleApiKey",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MpnsCredential = {
    type: {
        name: "Composite",
        className: "MpnsCredential",
        modelProperties: {
            mpnsCertificate: {
                serializedName: "properties.mpnsCertificate",
                type: {
                    name: "String"
                }
            },
            certificateKey: {
                serializedName: "properties.certificateKey",
                type: {
                    name: "String"
                }
            },
            thumbprint: {
                serializedName: "properties.thumbprint",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AdmCredential = {
    type: {
        name: "Composite",
        className: "AdmCredential",
        modelProperties: {
            clientId: {
                serializedName: "properties.clientId",
                type: {
                    name: "String"
                }
            },
            clientSecret: {
                serializedName: "properties.clientSecret",
                type: {
                    name: "String"
                }
            },
            authTokenUrl: {
                serializedName: "properties.authTokenUrl",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BaiduCredential = {
    type: {
        name: "Composite",
        className: "BaiduCredential",
        modelProperties: {
            baiduApiKey: {
                serializedName: "properties.baiduApiKey",
                type: {
                    name: "String"
                }
            },
            baiduEndPoint: {
                serializedName: "properties.baiduEndPoint",
                type: {
                    name: "String"
                }
            },
            baiduSecretKey: {
                serializedName: "properties.baiduSecretKey",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const NotificationHubListResult = {
    type: {
        name: "Composite",
        className: "NotificationHubListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "NotificationHubResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SubResource = {
    type: {
        name: "Composite",
        className: "SubResource",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CheckAvailabilityResult = {
    type: {
        name: "Composite",
        className: "CheckAvailabilityResult",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { isAvailiable: {
                serializedName: "isAvailiable",
                type: {
                    name: "Boolean"
                }
            } })
    }
};
const NamespaceCreateOrUpdateParameters = {
    type: {
        name: "Composite",
        className: "NamespaceCreateOrUpdateParameters",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { namePropertiesName: {
                serializedName: "properties.name",
                type: {
                    name: "String"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                type: {
                    name: "String"
                }
            }, region: {
                serializedName: "properties.region",
                type: {
                    name: "String"
                }
            }, metricId: {
                serializedName: "properties.metricId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, status: {
                serializedName: "properties.status",
                type: {
                    name: "String"
                }
            }, createdAt: {
                serializedName: "properties.createdAt",
                type: {
                    name: "DateTime"
                }
            }, updatedAt: {
                serializedName: "properties.updatedAt",
                type: {
                    name: "DateTime"
                }
            }, serviceBusEndpoint: {
                serializedName: "properties.serviceBusEndpoint",
                type: {
                    name: "String"
                }
            }, subscriptionId: {
                serializedName: "properties.subscriptionId",
                type: {
                    name: "String"
                }
            }, scaleUnit: {
                serializedName: "properties.scaleUnit",
                type: {
                    name: "String"
                }
            }, enabled: {
                serializedName: "properties.enabled",
                type: {
                    name: "Boolean"
                }
            }, critical: {
                serializedName: "properties.critical",
                type: {
                    name: "Boolean"
                }
            }, dataCenter: {
                serializedName: "properties.dataCenter",
                type: {
                    name: "String"
                }
            }, namespaceType: {
                serializedName: "properties.namespaceType",
                type: {
                    name: "Enum",
                    allowedValues: ["Messaging", "NotificationHub"]
                }
            } })
    }
};
const NamespaceResource = {
    type: {
        name: "Composite",
        className: "NamespaceResource",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { namePropertiesName: {
                serializedName: "properties.name",
                type: {
                    name: "String"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                type: {
                    name: "String"
                }
            }, region: {
                serializedName: "properties.region",
                type: {
                    name: "String"
                }
            }, metricId: {
                serializedName: "properties.metricId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, status: {
                serializedName: "properties.status",
                type: {
                    name: "String"
                }
            }, createdAt: {
                serializedName: "properties.createdAt",
                type: {
                    name: "DateTime"
                }
            }, updatedAt: {
                serializedName: "properties.updatedAt",
                type: {
                    name: "DateTime"
                }
            }, serviceBusEndpoint: {
                serializedName: "properties.serviceBusEndpoint",
                type: {
                    name: "String"
                }
            }, subscriptionId: {
                serializedName: "properties.subscriptionId",
                type: {
                    name: "String"
                }
            }, scaleUnit: {
                serializedName: "properties.scaleUnit",
                type: {
                    name: "String"
                }
            }, enabled: {
                serializedName: "properties.enabled",
                type: {
                    name: "Boolean"
                }
            }, critical: {
                serializedName: "properties.critical",
                type: {
                    name: "Boolean"
                }
            }, dataCenter: {
                serializedName: "properties.dataCenter",
                type: {
                    name: "String"
                }
            }, namespaceType: {
                serializedName: "properties.namespaceType",
                type: {
                    name: "Enum",
                    allowedValues: ["Messaging", "NotificationHub"]
                }
            } })
    }
};
const SharedAccessAuthorizationRuleResource = {
    type: {
        name: "Composite",
        className: "SharedAccessAuthorizationRuleResource",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { rights: {
                serializedName: "properties.rights",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Enum",
                            allowedValues: ["Manage", "Send", "Listen"]
                        }
                    }
                }
            }, primaryKey: {
                serializedName: "properties.primaryKey",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, secondaryKey: {
                serializedName: "properties.secondaryKey",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, keyName: {
                serializedName: "properties.keyName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, claimType: {
                serializedName: "properties.claimType",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, claimValue: {
                serializedName: "properties.claimValue",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, modifiedTime: {
                serializedName: "properties.modifiedTime",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, createdTime: {
                serializedName: "properties.createdTime",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, revision: {
                serializedName: "properties.revision",
                readOnly: true,
                type: {
                    name: "Number"
                }
            } })
    }
};
const NotificationHubCreateOrUpdateParameters = {
    type: {
        name: "Composite",
        className: "NotificationHubCreateOrUpdateParameters",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { namePropertiesName: {
                serializedName: "properties.name",
                type: {
                    name: "String"
                }
            }, registrationTtl: {
                serializedName: "properties.registrationTtl",
                type: {
                    name: "String"
                }
            }, authorizationRules: {
                serializedName: "properties.authorizationRules",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SharedAccessAuthorizationRuleProperties"
                        }
                    }
                }
            }, apnsCredential: {
                serializedName: "properties.apnsCredential",
                type: {
                    name: "Composite",
                    className: "ApnsCredential"
                }
            }, wnsCredential: {
                serializedName: "properties.wnsCredential",
                type: {
                    name: "Composite",
                    className: "WnsCredential"
                }
            }, gcmCredential: {
                serializedName: "properties.gcmCredential",
                type: {
                    name: "Composite",
                    className: "GcmCredential"
                }
            }, mpnsCredential: {
                serializedName: "properties.mpnsCredential",
                type: {
                    name: "Composite",
                    className: "MpnsCredential"
                }
            }, admCredential: {
                serializedName: "properties.admCredential",
                type: {
                    name: "Composite",
                    className: "AdmCredential"
                }
            }, baiduCredential: {
                serializedName: "properties.baiduCredential",
                type: {
                    name: "Composite",
                    className: "BaiduCredential"
                }
            } })
    }
};
const NotificationHubResource = {
    type: {
        name: "Composite",
        className: "NotificationHubResource",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { namePropertiesName: {
                serializedName: "properties.name",
                type: {
                    name: "String"
                }
            }, registrationTtl: {
                serializedName: "properties.registrationTtl",
                type: {
                    name: "String"
                }
            }, authorizationRules: {
                serializedName: "properties.authorizationRules",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SharedAccessAuthorizationRuleProperties"
                        }
                    }
                }
            }, apnsCredential: {
                serializedName: "properties.apnsCredential",
                type: {
                    name: "Composite",
                    className: "ApnsCredential"
                }
            }, wnsCredential: {
                serializedName: "properties.wnsCredential",
                type: {
                    name: "Composite",
                    className: "WnsCredential"
                }
            }, gcmCredential: {
                serializedName: "properties.gcmCredential",
                type: {
                    name: "Composite",
                    className: "GcmCredential"
                }
            }, mpnsCredential: {
                serializedName: "properties.mpnsCredential",
                type: {
                    name: "Composite",
                    className: "MpnsCredential"
                }
            }, admCredential: {
                serializedName: "properties.admCredential",
                type: {
                    name: "Composite",
                    className: "AdmCredential"
                }
            }, baiduCredential: {
                serializedName: "properties.baiduCredential",
                type: {
                    name: "Composite",
                    className: "BaiduCredential"
                }
            } })
    }
};
const NotificationHubPatchParameters = {
    type: {
        name: "Composite",
        className: "NotificationHubPatchParameters",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { namePropertiesName: {
                serializedName: "properties.name",
                type: {
                    name: "String"
                }
            }, registrationTtl: {
                serializedName: "properties.registrationTtl",
                type: {
                    name: "String"
                }
            }, authorizationRules: {
                serializedName: "properties.authorizationRules",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SharedAccessAuthorizationRuleProperties"
                        }
                    }
                }
            }, apnsCredential: {
                serializedName: "properties.apnsCredential",
                type: {
                    name: "Composite",
                    className: "ApnsCredential"
                }
            }, wnsCredential: {
                serializedName: "properties.wnsCredential",
                type: {
                    name: "Composite",
                    className: "WnsCredential"
                }
            }, gcmCredential: {
                serializedName: "properties.gcmCredential",
                type: {
                    name: "Composite",
                    className: "GcmCredential"
                }
            }, mpnsCredential: {
                serializedName: "properties.mpnsCredential",
                type: {
                    name: "Composite",
                    className: "MpnsCredential"
                }
            }, admCredential: {
                serializedName: "properties.admCredential",
                type: {
                    name: "Composite",
                    className: "AdmCredential"
                }
            }, baiduCredential: {
                serializedName: "properties.baiduCredential",
                type: {
                    name: "Composite",
                    className: "BaiduCredential"
                }
            } })
    }
};
const DebugSendResponse = {
    type: {
        name: "Composite",
        className: "DebugSendResponse",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { success: {
                serializedName: "properties.success",
                type: {
                    name: "Number"
                }
            }, failure: {
                serializedName: "properties.failure",
                type: {
                    name: "Number"
                }
            }, results: {
                serializedName: "properties.results",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            } })
    }
};
const PnsCredentialsResource = {
    type: {
        name: "Composite",
        className: "PnsCredentialsResource",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { apnsCredential: {
                serializedName: "properties.apnsCredential",
                type: {
                    name: "Composite",
                    className: "ApnsCredential"
                }
            }, wnsCredential: {
                serializedName: "properties.wnsCredential",
                type: {
                    name: "Composite",
                    className: "WnsCredential"
                }
            }, gcmCredential: {
                serializedName: "properties.gcmCredential",
                type: {
                    name: "Composite",
                    className: "GcmCredential"
                }
            }, mpnsCredential: {
                serializedName: "properties.mpnsCredential",
                type: {
                    name: "Composite",
                    className: "MpnsCredential"
                }
            }, admCredential: {
                serializedName: "properties.admCredential",
                type: {
                    name: "Composite",
                    className: "AdmCredential"
                }
            }, baiduCredential: {
                serializedName: "properties.baiduCredential",
                type: {
                    name: "Composite",
                    className: "BaiduCredential"
                }
            } })
    }
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    OperationListResult: OperationListResult,
    Operation: Operation,
    OperationDisplay: OperationDisplay,
    ErrorResponse: ErrorResponse,
    CheckAvailabilityParameters: CheckAvailabilityParameters,
    Sku: Sku,
    Resource: Resource,
    NamespacePatchParameters: NamespacePatchParameters,
    SharedAccessAuthorizationRuleCreateOrUpdateParameters: SharedAccessAuthorizationRuleCreateOrUpdateParameters,
    SharedAccessAuthorizationRuleProperties: SharedAccessAuthorizationRuleProperties,
    NamespaceListResult: NamespaceListResult,
    SharedAccessAuthorizationRuleListResult: SharedAccessAuthorizationRuleListResult,
    ResourceListKeys: ResourceListKeys,
    PolicykeyResource: PolicykeyResource,
    ApnsCredential: ApnsCredential,
    WnsCredential: WnsCredential,
    GcmCredential: GcmCredential,
    MpnsCredential: MpnsCredential,
    AdmCredential: AdmCredential,
    BaiduCredential: BaiduCredential,
    NotificationHubListResult: NotificationHubListResult,
    SubResource: SubResource,
    CheckAvailabilityResult: CheckAvailabilityResult,
    NamespaceCreateOrUpdateParameters: NamespaceCreateOrUpdateParameters,
    NamespaceResource: NamespaceResource,
    SharedAccessAuthorizationRuleResource: SharedAccessAuthorizationRuleResource,
    NotificationHubCreateOrUpdateParameters: NotificationHubCreateOrUpdateParameters,
    NotificationHubResource: NotificationHubResource,
    NotificationHubPatchParameters: NotificationHubPatchParameters,
    DebugSendResponse: DebugSendResponse,
    PnsCredentialsResource: PnsCredentialsResource
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2017-04-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const parameters = {
    parameterPath: "parameters",
    mapper: CheckAvailabilityParameters
};
const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters1 = {
    parameterPath: "parameters",
    mapper: NamespaceCreateOrUpdateParameters
};
const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const namespaceName = {
    parameterPath: "namespaceName",
    mapper: {
        serializedName: "namespaceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters2 = {
    parameterPath: "parameters",
    mapper: NamespacePatchParameters
};
const parameters3 = {
    parameterPath: "parameters",
    mapper: SharedAccessAuthorizationRuleCreateOrUpdateParameters
};
const authorizationRuleName = {
    parameterPath: "authorizationRuleName",
    mapper: {
        serializedName: "authorizationRuleName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters4 = {
    parameterPath: "parameters",
    mapper: PolicykeyResource
};
const parameters5 = {
    parameterPath: "parameters",
    mapper: NotificationHubCreateOrUpdateParameters
};
const notificationHubName = {
    parameterPath: "notificationHubName",
    mapper: {
        serializedName: "notificationHubName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters6 = {
    parameterPath: ["options", "parameters"],
    mapper: NotificationHubPatchParameters
};
const parameters7 = {
    parameterPath: ["options", "parameters"],
    mapper: {
        serializedName: "parameters",
        type: {
            name: "Dictionary",
            value: { type: { name: "any" } }
        }
    }
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Operations operations. */
class OperationsImpl {
    /**
     * Initialize a new instance of the class Operations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all of the available NotificationHubs REST API operations.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists all of the available NotificationHubs REST API operations.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$2);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec$2);
    }
}
// Operation Specifications
const serializer$2 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$2 = {
    path: "/providers/Microsoft.NotificationHubs/operations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer: serializer$2
};
const listNextOperationSpec$2 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, nextLink],
    headerParameters: [accept],
    serializer: serializer$2
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class LroImpl {
    constructor(sendOperationFn, args, spec, requestPath = spec.path, requestMethod = spec.httpMethod) {
        this.sendOperationFn = sendOperationFn;
        this.args = args;
        this.spec = spec;
        this.requestPath = requestPath;
        this.requestMethod = requestMethod;
    }
    sendInitialRequest() {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            return this.sendOperationFn(this.args, this.spec);
        });
    }
    sendPollRequest(path) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const _a = this.spec, restSpec = tslib.__rest(_a, ["requestBody"]);
            return this.sendOperationFn(this.args, Object.assign(Object.assign({}, restSpec), { path, httpMethod: "GET" }));
        });
    }
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Namespaces operations. */
class NamespacesImpl {
    /**
     * Initialize a new instance of the class Namespaces class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the available namespaces within a resourceGroup.
     * @param resourceGroupName The name of the resource group. If resourceGroupName value is null the
     *                          method lists all the namespaces within subscription
     * @param options The options parameters.
     */
    list(resourceGroupName, options) {
        const iter = this.listPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists all the available namespaces within the subscription irrespective of the resourceGroups.
     * @param options The options parameters.
     */
    listAll(options) {
        const iter = this.listAllPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listAllPagingPage(options, settings);
            }
        };
    }
    listAllPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listAllPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listAll(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listAllNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listAllPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listAllPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listAllPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Gets the authorization rules for a namespace.
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name
     * @param options The options parameters.
     */
    listAuthorizationRules(resourceGroupName, namespaceName, options) {
        const iter = this.listAuthorizationRulesPagingAll(resourceGroupName, namespaceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listAuthorizationRulesPagingPage(resourceGroupName, namespaceName, options, settings);
            }
        };
    }
    listAuthorizationRulesPagingPage(resourceGroupName, namespaceName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listAuthorizationRulesPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listAuthorizationRules(resourceGroupName, namespaceName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listAuthorizationRulesNext(resourceGroupName, namespaceName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listAuthorizationRulesPagingAll(resourceGroupName, namespaceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listAuthorizationRulesPagingAll_1() {
            var e_3, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listAuthorizationRulesPagingPage(resourceGroupName, namespaceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * Checks the availability of the given service namespace across all Azure subscriptions. This is
     * useful because the domain name is created based on the service namespace name.
     * @param parameters The namespace name.
     * @param options The options parameters.
     */
    checkAvailability(parameters, options) {
        return this.client.sendOperationRequest({ parameters, options }, checkAvailabilityOperationSpec);
    }
    /**
     * Creates/Updates a service namespace. Once created, this namespace's resource manifest is immutable.
     * This operation is idempotent.
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name.
     * @param parameters Parameters supplied to create a Namespace Resource.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, namespaceName, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, parameters, options }, createOrUpdateOperationSpec$1);
    }
    /**
     * Patches the existing namespace
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name.
     * @param parameters Parameters supplied to patch a Namespace Resource.
     * @param options The options parameters.
     */
    patch(resourceGroupName, namespaceName, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, parameters, options }, patchOperationSpec$1);
    }
    /**
     * Deletes an existing namespace. This operation also removes all associated notificationHubs under the
     * namespace.
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, namespaceName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, namespaceName, options }, deleteOperationSpec$1);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes an existing namespace. This operation also removes all associated notificationHubs under the
     * namespace.
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, namespaceName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, namespaceName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Returns the description for the specified namespace.
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name.
     * @param options The options parameters.
     */
    get(resourceGroupName, namespaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, options }, getOperationSpec$1);
    }
    /**
     * Creates an authorization rule for a namespace
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name.
     * @param authorizationRuleName Authorization Rule Name.
     * @param parameters The shared access authorization rule.
     * @param options The options parameters.
     */
    createOrUpdateAuthorizationRule(resourceGroupName, namespaceName, authorizationRuleName, parameters, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            namespaceName,
            authorizationRuleName,
            parameters,
            options
        }, createOrUpdateAuthorizationRuleOperationSpec$1);
    }
    /**
     * Deletes a namespace authorization rule
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name.
     * @param authorizationRuleName Authorization Rule Name.
     * @param options The options parameters.
     */
    deleteAuthorizationRule(resourceGroupName, namespaceName, authorizationRuleName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, authorizationRuleName, options }, deleteAuthorizationRuleOperationSpec$1);
    }
    /**
     * Gets an authorization rule for a namespace by name.
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name
     * @param authorizationRuleName Authorization rule name.
     * @param options The options parameters.
     */
    getAuthorizationRule(resourceGroupName, namespaceName, authorizationRuleName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, authorizationRuleName, options }, getAuthorizationRuleOperationSpec$1);
    }
    /**
     * Lists the available namespaces within a resourceGroup.
     * @param resourceGroupName The name of the resource group. If resourceGroupName value is null the
     *                          method lists all the namespaces within subscription
     * @param options The options parameters.
     */
    _list(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listOperationSpec$1);
    }
    /**
     * Lists all the available namespaces within the subscription irrespective of the resourceGroups.
     * @param options The options parameters.
     */
    _listAll(options) {
        return this.client.sendOperationRequest({ options }, listAllOperationSpec);
    }
    /**
     * Gets the authorization rules for a namespace.
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name
     * @param options The options parameters.
     */
    _listAuthorizationRules(resourceGroupName, namespaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, options }, listAuthorizationRulesOperationSpec$1);
    }
    /**
     * Gets the Primary and Secondary ConnectionStrings to the namespace
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name.
     * @param authorizationRuleName The connection string of the namespace for the specified
     *                              authorizationRule.
     * @param options The options parameters.
     */
    listKeys(resourceGroupName, namespaceName, authorizationRuleName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, authorizationRuleName, options }, listKeysOperationSpec$1);
    }
    /**
     * Regenerates the Primary/Secondary Keys to the Namespace Authorization Rule
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name.
     * @param authorizationRuleName The connection string of the namespace for the specified
     *                              authorizationRule.
     * @param parameters Parameters supplied to regenerate the Namespace Authorization Rule Key.
     * @param options The options parameters.
     */
    regenerateKeys(resourceGroupName, namespaceName, authorizationRuleName, parameters, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            namespaceName,
            authorizationRuleName,
            parameters,
            options
        }, regenerateKeysOperationSpec$1);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. If resourceGroupName value is null the
     *                          method lists all the namespaces within subscription
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, listNextOperationSpec$1);
    }
    /**
     * ListAllNext
     * @param nextLink The nextLink from the previous successful call to the ListAll method.
     * @param options The options parameters.
     */
    _listAllNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listAllNextOperationSpec);
    }
    /**
     * ListAuthorizationRulesNext
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name
     * @param nextLink The nextLink from the previous successful call to the ListAuthorizationRules method.
     * @param options The options parameters.
     */
    _listAuthorizationRulesNext(resourceGroupName, namespaceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, nextLink, options }, listAuthorizationRulesNextOperationSpec$1);
    }
}
// Operation Specifications
const serializer$1 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const checkAvailabilityOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.NotificationHubs/checkNamespaceAvailability",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: CheckAvailabilityResult
        }
    },
    requestBody: parameters,
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$1
};
const createOrUpdateOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: NamespaceResource
        },
        201: {
            bodyMapper: NamespaceResource
        }
    },
    requestBody: parameters1,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$1
};
const patchOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: NamespaceResource
        }
    },
    requestBody: parameters2,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$1
};
const deleteOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}",
    httpMethod: "DELETE",
    responses: { 200: {}, 201: {}, 202: {}, 204: {} },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName
    ],
    serializer: serializer$1
};
const getOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: NamespaceResource
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const createOrUpdateAuthorizationRuleOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/AuthorizationRules/{authorizationRuleName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: SharedAccessAuthorizationRuleResource
        }
    },
    requestBody: parameters3,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName,
        authorizationRuleName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$1
};
const deleteAuthorizationRuleOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/AuthorizationRules/{authorizationRuleName}",
    httpMethod: "DELETE",
    responses: { 200: {}, 204: {} },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName,
        authorizationRuleName
    ],
    serializer: serializer$1
};
const getAuthorizationRuleOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/AuthorizationRules/{authorizationRuleName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SharedAccessAuthorizationRuleResource
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName,
        authorizationRuleName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: NamespaceListResult
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listAllOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.NotificationHubs/namespaces",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: NamespaceListResult
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$1
};
const listAuthorizationRulesOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/AuthorizationRules",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SharedAccessAuthorizationRuleListResult
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listKeysOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/AuthorizationRules/{authorizationRuleName}/listKeys",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ResourceListKeys
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName,
        authorizationRuleName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const regenerateKeysOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/AuthorizationRules/{authorizationRuleName}/regenerateKeys",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ResourceListKeys
        }
    },
    requestBody: parameters4,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName,
        authorizationRuleName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$1
};
const listNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: NamespaceListResult
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        nextLink,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listAllNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: NamespaceListResult
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        nextLink,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listAuthorizationRulesNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SharedAccessAuthorizationRuleListResult
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        nextLink,
        subscriptionId,
        resourceGroupName,
        namespaceName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing NotificationHubs operations. */
class NotificationHubsImpl {
    /**
     * Initialize a new instance of the class NotificationHubs class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the notification hubs associated with a namespace.
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name.
     * @param options The options parameters.
     */
    list(resourceGroupName, namespaceName, options) {
        const iter = this.listPagingAll(resourceGroupName, namespaceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, namespaceName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, namespaceName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, namespaceName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, namespaceName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, namespaceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, namespaceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets the authorization rules for a NotificationHub.
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name
     * @param notificationHubName The notification hub name.
     * @param options The options parameters.
     */
    listAuthorizationRules(resourceGroupName, namespaceName, notificationHubName, options) {
        const iter = this.listAuthorizationRulesPagingAll(resourceGroupName, namespaceName, notificationHubName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listAuthorizationRulesPagingPage(resourceGroupName, namespaceName, notificationHubName, options, settings);
            }
        };
    }
    listAuthorizationRulesPagingPage(resourceGroupName, namespaceName, notificationHubName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listAuthorizationRulesPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listAuthorizationRules(resourceGroupName, namespaceName, notificationHubName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listAuthorizationRulesNext(resourceGroupName, namespaceName, notificationHubName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listAuthorizationRulesPagingAll(resourceGroupName, namespaceName, notificationHubName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listAuthorizationRulesPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listAuthorizationRulesPagingPage(resourceGroupName, namespaceName, notificationHubName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Checks the availability of the given notificationHub in a namespace.
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name.
     * @param parameters The notificationHub name.
     * @param options The options parameters.
     */
    checkNotificationHubAvailability(resourceGroupName, namespaceName, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, parameters, options }, checkNotificationHubAvailabilityOperationSpec);
    }
    /**
     * Creates/Update a NotificationHub in a namespace.
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name.
     * @param notificationHubName The notification hub name.
     * @param parameters Parameters supplied to the create/update a NotificationHub Resource.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, namespaceName, notificationHubName, parameters, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            namespaceName,
            notificationHubName,
            parameters,
            options
        }, createOrUpdateOperationSpec);
    }
    /**
     * Patch a NotificationHub in a namespace.
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name.
     * @param notificationHubName The notification hub name.
     * @param options The options parameters.
     */
    patch(resourceGroupName, namespaceName, notificationHubName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, notificationHubName, options }, patchOperationSpec);
    }
    /**
     * Deletes a notification hub associated with a namespace.
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name.
     * @param notificationHubName The notification hub name.
     * @param options The options parameters.
     */
    delete(resourceGroupName, namespaceName, notificationHubName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, notificationHubName, options }, deleteOperationSpec);
    }
    /**
     * Lists the notification hubs associated with a namespace.
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name.
     * @param notificationHubName The notification hub name.
     * @param options The options parameters.
     */
    get(resourceGroupName, namespaceName, notificationHubName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, notificationHubName, options }, getOperationSpec);
    }
    /**
     * test send a push notification
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name.
     * @param notificationHubName The notification hub name.
     * @param options The options parameters.
     */
    debugSend(resourceGroupName, namespaceName, notificationHubName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, notificationHubName, options }, debugSendOperationSpec);
    }
    /**
     * Creates/Updates an authorization rule for a NotificationHub
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name.
     * @param notificationHubName The notification hub name.
     * @param authorizationRuleName Authorization Rule Name.
     * @param parameters The shared access authorization rule.
     * @param options The options parameters.
     */
    createOrUpdateAuthorizationRule(resourceGroupName, namespaceName, notificationHubName, authorizationRuleName, parameters, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            namespaceName,
            notificationHubName,
            authorizationRuleName,
            parameters,
            options
        }, createOrUpdateAuthorizationRuleOperationSpec);
    }
    /**
     * Deletes a notificationHub authorization rule
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name.
     * @param notificationHubName The notification hub name.
     * @param authorizationRuleName Authorization Rule Name.
     * @param options The options parameters.
     */
    deleteAuthorizationRule(resourceGroupName, namespaceName, notificationHubName, authorizationRuleName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            namespaceName,
            notificationHubName,
            authorizationRuleName,
            options
        }, deleteAuthorizationRuleOperationSpec);
    }
    /**
     * Gets an authorization rule for a NotificationHub by name.
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name
     * @param notificationHubName The notification hub name.
     * @param authorizationRuleName authorization rule name.
     * @param options The options parameters.
     */
    getAuthorizationRule(resourceGroupName, namespaceName, notificationHubName, authorizationRuleName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            namespaceName,
            notificationHubName,
            authorizationRuleName,
            options
        }, getAuthorizationRuleOperationSpec);
    }
    /**
     * Lists the notification hubs associated with a namespace.
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name.
     * @param options The options parameters.
     */
    _list(resourceGroupName, namespaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, options }, listOperationSpec);
    }
    /**
     * Gets the authorization rules for a NotificationHub.
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name
     * @param notificationHubName The notification hub name.
     * @param options The options parameters.
     */
    _listAuthorizationRules(resourceGroupName, namespaceName, notificationHubName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, notificationHubName, options }, listAuthorizationRulesOperationSpec);
    }
    /**
     * Gets the Primary and Secondary ConnectionStrings to the NotificationHub
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name.
     * @param notificationHubName The notification hub name.
     * @param authorizationRuleName The connection string of the NotificationHub for the specified
     *                              authorizationRule.
     * @param options The options parameters.
     */
    listKeys(resourceGroupName, namespaceName, notificationHubName, authorizationRuleName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            namespaceName,
            notificationHubName,
            authorizationRuleName,
            options
        }, listKeysOperationSpec);
    }
    /**
     * Regenerates the Primary/Secondary Keys to the NotificationHub Authorization Rule
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name.
     * @param notificationHubName The notification hub name.
     * @param authorizationRuleName The connection string of the NotificationHub for the specified
     *                              authorizationRule.
     * @param parameters Parameters supplied to regenerate the NotificationHub Authorization Rule Key.
     * @param options The options parameters.
     */
    regenerateKeys(resourceGroupName, namespaceName, notificationHubName, authorizationRuleName, parameters, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            namespaceName,
            notificationHubName,
            authorizationRuleName,
            parameters,
            options
        }, regenerateKeysOperationSpec);
    }
    /**
     * Lists the PNS Credentials associated with a notification hub .
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name.
     * @param notificationHubName The notification hub name.
     * @param options The options parameters.
     */
    getPnsCredentials(resourceGroupName, namespaceName, notificationHubName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, notificationHubName, options }, getPnsCredentialsOperationSpec);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, namespaceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, nextLink, options }, listNextOperationSpec);
    }
    /**
     * ListAuthorizationRulesNext
     * @param resourceGroupName The name of the resource group.
     * @param namespaceName The namespace name
     * @param notificationHubName The notification hub name.
     * @param nextLink The nextLink from the previous successful call to the ListAuthorizationRules method.
     * @param options The options parameters.
     */
    _listAuthorizationRulesNext(resourceGroupName, namespaceName, notificationHubName, nextLink, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            namespaceName,
            notificationHubName,
            nextLink,
            options
        }, listAuthorizationRulesNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const checkNotificationHubAvailabilityOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/checkNotificationHubAvailability",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: CheckAvailabilityResult
        }
    },
    requestBody: parameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: NotificationHubResource
        },
        201: {
            bodyMapper: NotificationHubResource
        }
    },
    requestBody: parameters5,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName,
        notificationHubName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};
const patchOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: NotificationHubResource
        }
    },
    requestBody: parameters6,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName,
        notificationHubName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}",
    httpMethod: "DELETE",
    responses: { 200: {} },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName,
        notificationHubName
    ],
    serializer
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: NotificationHubResource
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName,
        notificationHubName
    ],
    headerParameters: [accept],
    serializer
};
const debugSendOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}/debugsend",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: DebugSendResponse
        }
    },
    requestBody: parameters7,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName,
        notificationHubName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};
const createOrUpdateAuthorizationRuleOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}/AuthorizationRules/{authorizationRuleName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: SharedAccessAuthorizationRuleResource
        }
    },
    requestBody: parameters3,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName,
        authorizationRuleName,
        notificationHubName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};
const deleteAuthorizationRuleOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}/AuthorizationRules/{authorizationRuleName}",
    httpMethod: "DELETE",
    responses: { 200: {}, 204: {} },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName,
        authorizationRuleName,
        notificationHubName
    ],
    serializer
};
const getAuthorizationRuleOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}/AuthorizationRules/{authorizationRuleName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SharedAccessAuthorizationRuleResource
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName,
        authorizationRuleName,
        notificationHubName
    ],
    headerParameters: [accept],
    serializer
};
const listOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: NotificationHubListResult
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName
    ],
    headerParameters: [accept],
    serializer
};
const listAuthorizationRulesOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}/AuthorizationRules",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SharedAccessAuthorizationRuleListResult
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName,
        notificationHubName
    ],
    headerParameters: [accept],
    serializer
};
const listKeysOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}/AuthorizationRules/{authorizationRuleName}/listKeys",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ResourceListKeys
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName,
        authorizationRuleName,
        notificationHubName
    ],
    headerParameters: [accept],
    serializer
};
const regenerateKeysOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}/AuthorizationRules/{authorizationRuleName}/regenerateKeys",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ResourceListKeys
        }
    },
    requestBody: parameters4,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName,
        authorizationRuleName,
        notificationHubName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};
const getPnsCredentialsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}/pnsCredentials",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: PnsCredentialsResource
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName,
        notificationHubName
    ],
    headerParameters: [accept],
    serializer
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: NotificationHubListResult
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        nextLink,
        subscriptionId,
        resourceGroupName,
        namespaceName
    ],
    headerParameters: [accept],
    serializer
};
const listAuthorizationRulesNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SharedAccessAuthorizationRuleListResult
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        nextLink,
        subscriptionId,
        resourceGroupName,
        namespaceName,
        notificationHubName
    ],
    headerParameters: [accept],
    serializer
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class NotificationHubsManagementClient extends coreClient__namespace.ServiceClient {
    /**
     * Initializes a new instance of the NotificationHubsManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure
     *                       subscription. The subscription ID forms part of the URI for every service call.
     * @param options The parameter options
     */
    constructor(credentials, subscriptionId, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        if (subscriptionId === undefined) {
            throw new Error("'subscriptionId' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-notificationhubs/2.1.0`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName
            });
            this.pipeline.addPolicy(coreRestPipeline__namespace.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient__namespace.authorizeRequestOnClaimChallenge
                }
            }));
        }
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.apiVersion = options.apiVersion || "2017-04-01";
        this.operations = new OperationsImpl(this);
        this.namespaces = new NamespacesImpl(this);
        this.notificationHubs = new NotificationHubsImpl(this);
        this.addCustomApiVersionPolicy(options.apiVersion);
    }
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    addCustomApiVersionPolicy(apiVersion) {
        if (!apiVersion) {
            return;
        }
        const apiVersionPolicy = {
            name: "CustomApiVersionPolicy",
            sendRequest(request, next) {
                return tslib.__awaiter(this, void 0, void 0, function* () {
                    const param = request.url.split("?");
                    if (param.length > 1) {
                        const newParams = param[1].split("&").map((item) => {
                            if (item.indexOf("api-version") > -1) {
                                return "api-version=" + apiVersion;
                            }
                            else {
                                return item;
                            }
                        });
                        request.url = param[0] + "?" + newParams.join("&");
                    }
                    return next(request);
                });
            }
        };
        this.pipeline.addPolicy(apiVersionPolicy);
    }
}

exports.NotificationHubsManagementClient = NotificationHubsManagementClient;
exports.getContinuationToken = getContinuationToken;
//# sourceMappingURL=index.js.map
