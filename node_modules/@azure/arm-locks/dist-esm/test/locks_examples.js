/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncValues, __awaiter } from "tslib";
import { env, Recorder, isPlaybackMode, } from "@azure-tools/test-recorder";
import { createTestCredential } from "@azure-tools/test-credential";
import { assert } from "chai";
import { ManagementLockClient } from "../src/managementLockClient";
const replaceableVariables = {
    AZURE_CLIENT_ID: "azure_client_id",
    AZURE_CLIENT_SECRET: "azure_client_secret",
    AZURE_TENANT_ID: "88888888-8888-8888-8888-888888888888",
    SUBSCRIPTION_ID: "azure_subscription_id"
};
const recorderOptions = {
    envSetupForPlayback: replaceableVariables
};
export const testPollingOptions = {
    updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};
describe("Locks test", () => {
    let recorder;
    let subscriptionId;
    let client;
    let location;
    let resourceGroup;
    let lockName;
    beforeEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            recorder = new Recorder(this.currentTest);
            yield recorder.start(recorderOptions);
            subscriptionId = env.SUBSCRIPTION_ID || '';
            // This is an example of how the environment variables are used
            const credential = createTestCredential();
            client = new ManagementLockClient(credential, subscriptionId, recorder.configureClientOptions({}));
            location = "eastus";
            resourceGroup = "myjstest";
            lockName = "jslockrg";
        });
    });
    afterEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            yield recorder.stop();
        });
    });
    // it("managementLocks create test", async function () {
    //   const res = await client.managementLocks.createOrUpdateAtSubscriptionLevel(lockName, { level: "CanNotDelete" });
    //   assert.equal(res.name, lockName);
    // });
    // it("managementLocks get test", async function () {
    //   const res = await client.managementLocks.getAtSubscriptionLevel(lockName);
    //   assert.equal(res.name, lockName);
    // });
    it("managementLocks list test", function () {
        var e_1, _a;
        return __awaiter(this, void 0, void 0, function* () {
            const resArray = new Array();
            try {
                for (var _b = __asyncValues(client.managementLocks.listAtSubscriptionLevel()), _c; _c = yield _b.next(), !_c.done;) {
                    const item = _c.value;
                    resArray.push(item);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            assert.notEqual(resArray.length, 0);
        });
    });
    // it("managementLocks delete test", async function () {
    //   const res = await client.managementLocks.deleteAtSubscriptionLevel(lockName);
    //   const resArray = new Array();
    //   for await (const item of client.managementLocks.listAtSubscriptionLevel()) {
    //     resArray.push(item);
    //   }
    //   assert.notEqual(resArray.length, 0);
    // });
});
//# sourceMappingURL=locks_examples.js.map