/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { StreamAnalyticsManagementClient } from "@azure/arm-streamanalytics";
import { DefaultAzureCredential } from "@azure/identity";
/**
 * This sample demonstrates how to Starts a streaming job. Once a job is started it will start processing input events and produce output.
 *
 * @summary Starts a streaming job. Once a job is started it will start processing input events and produce output.
 * x-ms-original-file: specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/StreamingJob_Start_CustomTime.json
 */
function startAStreamingJobWithCustomTimeOutputStartMode() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "56b5e0a9-b645-407d-99b0-c64f86013e3d";
        const resourceGroupName = "sjrg6936";
        const jobName = "sj59";
        const startJobParameters = {
            outputStartMode: "CustomTime",
            outputStartTime: new Date("2012-12-12T12:12:12Z")
        };
        const options = { startJobParameters };
        const credential = new DefaultAzureCredential();
        const client = new StreamAnalyticsManagementClient(credential, subscriptionId);
        const result = yield client.streamingJobs.beginStartAndWait(resourceGroupName, jobName, options);
        console.log(result);
    });
}
startAStreamingJobWithCustomTimeOutputStartMode().catch(console.error);
/**
 * This sample demonstrates how to Starts a streaming job. Once a job is started it will start processing input events and produce output.
 *
 * @summary Starts a streaming job. Once a job is started it will start processing input events and produce output.
 * x-ms-original-file: specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/StreamingJob_Start_JobStartTime.json
 */
function startAStreamingJobWithJobStartTimeOutputStartMode() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "56b5e0a9-b645-407d-99b0-c64f86013e3d";
        const resourceGroupName = "sjrg6936";
        const jobName = "sj59";
        const startJobParameters = {
            outputStartMode: "JobStartTime"
        };
        const options = { startJobParameters };
        const credential = new DefaultAzureCredential();
        const client = new StreamAnalyticsManagementClient(credential, subscriptionId);
        const result = yield client.streamingJobs.beginStartAndWait(resourceGroupName, jobName, options);
        console.log(result);
    });
}
startAStreamingJobWithJobStartTimeOutputStartMode().catch(console.error);
/**
 * This sample demonstrates how to Starts a streaming job. Once a job is started it will start processing input events and produce output.
 *
 * @summary Starts a streaming job. Once a job is started it will start processing input events and produce output.
 * x-ms-original-file: specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/StreamingJob_Start_LastOutputEventTime.json
 */
function startAStreamingJobWithLastOutputEventTimeOutputStartMode() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "56b5e0a9-b645-407d-99b0-c64f86013e3d";
        const resourceGroupName = "sjrg6936";
        const jobName = "sj59";
        const startJobParameters = {
            outputStartMode: "LastOutputEventTime"
        };
        const options = { startJobParameters };
        const credential = new DefaultAzureCredential();
        const client = new StreamAnalyticsManagementClient(credential, subscriptionId);
        const result = yield client.streamingJobs.beginStartAndWait(resourceGroupName, jobName, options);
        console.log(result);
    });
}
startAStreamingJobWithLastOutputEventTimeOutputStartMode().catch(console.error);
//# sourceMappingURL=streamingJobsStartSample.js.map