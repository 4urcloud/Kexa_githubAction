/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { StreamAnalyticsManagementClient } from "@azure/arm-streamanalytics";
import { DefaultAzureCredential } from "@azure/identity";
/**
 * This sample demonstrates how to Updates an existing output under an existing streaming job. This can be used to partially update (ie. update one or two properties) an output without affecting the rest the job or output definition.
 *
 * @summary Updates an existing output under an existing streaming job. This can be used to partially update (ie. update one or two properties) an output without affecting the rest the job or output definition.
 * x-ms-original-file: specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Update_DocumentDB.json
 */
function updateADocumentDbOutput() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "56b5e0a9-b645-407d-99b0-c64f86013e3d";
        const resourceGroupName = "sjrg7983";
        const jobName = "sj2331";
        const outputName = "output3022";
        const output = {
            datasource: {
                type: "Microsoft.Storage/DocumentDB",
                partitionKey: "differentPartitionKey"
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new StreamAnalyticsManagementClient(credential, subscriptionId);
        const result = yield client.outputs.update(resourceGroupName, jobName, outputName, output);
        console.log(result);
    });
}
updateADocumentDbOutput().catch(console.error);
/**
 * This sample demonstrates how to Updates an existing output under an existing streaming job. This can be used to partially update (ie. update one or two properties) an output without affecting the rest the job or output definition.
 *
 * @summary Updates an existing output under an existing streaming job. This can be used to partially update (ie. update one or two properties) an output without affecting the rest the job or output definition.
 * x-ms-original-file: specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Update_PowerBI.json
 */
function updateAPowerBiOutput() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "56b5e0a9-b645-407d-99b0-c64f86013e3d";
        const resourceGroupName = "sjrg7983";
        const jobName = "sj2331";
        const outputName = "output3022";
        const output = {
            datasource: { type: "PowerBI", dataset: "differentDataset" }
        };
        const credential = new DefaultAzureCredential();
        const client = new StreamAnalyticsManagementClient(credential, subscriptionId);
        const result = yield client.outputs.update(resourceGroupName, jobName, outputName, output);
        console.log(result);
    });
}
updateAPowerBiOutput().catch(console.error);
/**
 * This sample demonstrates how to Updates an existing output under an existing streaming job. This can be used to partially update (ie. update one or two properties) an output without affecting the rest the job or output definition.
 *
 * @summary Updates an existing output under an existing streaming job. This can be used to partially update (ie. update one or two properties) an output without affecting the rest the job or output definition.
 * x-ms-original-file: specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Update_ServiceBusQueue.json
 */
function updateAServiceBusQueueOutputWithAvroSerialization() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "56b5e0a9-b645-407d-99b0-c64f86013e3d";
        const resourceGroupName = "sjrg3410";
        const jobName = "sj5095";
        const outputName = "output3456";
        const output = {
            datasource: {
                type: "Microsoft.ServiceBus/Queue",
                queueName: "differentQueueName"
            },
            serialization: { type: "Json", format: "LineSeparated", encoding: "UTF8" }
        };
        const credential = new DefaultAzureCredential();
        const client = new StreamAnalyticsManagementClient(credential, subscriptionId);
        const result = yield client.outputs.update(resourceGroupName, jobName, outputName, output);
        console.log(result);
    });
}
updateAServiceBusQueueOutputWithAvroSerialization().catch(console.error);
/**
 * This sample demonstrates how to Updates an existing output under an existing streaming job. This can be used to partially update (ie. update one or two properties) an output without affecting the rest the job or output definition.
 *
 * @summary Updates an existing output under an existing streaming job. This can be used to partially update (ie. update one or two properties) an output without affecting the rest the job or output definition.
 * x-ms-original-file: specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Update_ServiceBusTopic.json
 */
function updateAServiceBusTopicOutputWithCsvSerialization() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "56b5e0a9-b645-407d-99b0-c64f86013e3d";
        const resourceGroupName = "sjrg6450";
        const jobName = "sj7094";
        const outputName = "output7886";
        const output = {
            datasource: {
                type: "Microsoft.ServiceBus/Topic",
                topicName: "differentTopicName"
            },
            serialization: { type: "Csv", encoding: "UTF8", fieldDelimiter: "|" }
        };
        const credential = new DefaultAzureCredential();
        const client = new StreamAnalyticsManagementClient(credential, subscriptionId);
        const result = yield client.outputs.update(resourceGroupName, jobName, outputName, output);
        console.log(result);
    });
}
updateAServiceBusTopicOutputWithCsvSerialization().catch(console.error);
/**
 * This sample demonstrates how to Updates an existing output under an existing streaming job. This can be used to partially update (ie. update one or two properties) an output without affecting the rest the job or output definition.
 *
 * @summary Updates an existing output under an existing streaming job. This can be used to partially update (ie. update one or two properties) an output without affecting the rest the job or output definition.
 * x-ms-original-file: specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Update_Blob.json
 */
function updateABlobOutputWithCsvSerialization() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "56b5e0a9-b645-407d-99b0-c64f86013e3d";
        const resourceGroupName = "sjrg5023";
        const jobName = "sj900";
        const outputName = "output1623";
        const output = {
            datasource: {
                type: "Microsoft.Storage/Blob",
                container: "differentContainer"
            },
            serialization: { type: "Csv", encoding: "UTF8", fieldDelimiter: "|" }
        };
        const credential = new DefaultAzureCredential();
        const client = new StreamAnalyticsManagementClient(credential, subscriptionId);
        const result = yield client.outputs.update(resourceGroupName, jobName, outputName, output);
        console.log(result);
    });
}
updateABlobOutputWithCsvSerialization().catch(console.error);
/**
 * This sample demonstrates how to Updates an existing output under an existing streaming job. This can be used to partially update (ie. update one or two properties) an output without affecting the rest the job or output definition.
 *
 * @summary Updates an existing output under an existing streaming job. This can be used to partially update (ie. update one or two properties) an output without affecting the rest the job or output definition.
 * x-ms-original-file: specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Update_AzureDataLakeStore.json
 */
function updateAnAzureDataLakeStoreOutputWithJsonSerialization() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "56b5e0a9-b645-407d-99b0-c64f86013e3d";
        const resourceGroupName = "sjrg6912";
        const jobName = "sj3310";
        const outputName = "output5195";
        const output = {
            datasource: {
                type: "Microsoft.DataLake/Accounts",
                accountName: "differentaccount"
            },
            serialization: { type: "Json", format: "LineSeparated", encoding: "UTF8" }
        };
        const credential = new DefaultAzureCredential();
        const client = new StreamAnalyticsManagementClient(credential, subscriptionId);
        const result = yield client.outputs.update(resourceGroupName, jobName, outputName, output);
        console.log(result);
    });
}
updateAnAzureDataLakeStoreOutputWithJsonSerialization().catch(console.error);
/**
 * This sample demonstrates how to Updates an existing output under an existing streaming job. This can be used to partially update (ie. update one or two properties) an output without affecting the rest the job or output definition.
 *
 * @summary Updates an existing output under an existing streaming job. This can be used to partially update (ie. update one or two properties) an output without affecting the rest the job or output definition.
 * x-ms-original-file: specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Update_AzureSQL.json
 */
function updateAnAzureSqlDatabaseOutput() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "56b5e0a9-b645-407d-99b0-c64f86013e3d";
        const resourceGroupName = "sjrg2157";
        const jobName = "sj6458";
        const outputName = "output1755";
        const output = {
            datasource: {
                type: "Microsoft.Sql/Server/Database",
                table: "differentTable"
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new StreamAnalyticsManagementClient(credential, subscriptionId);
        const result = yield client.outputs.update(resourceGroupName, jobName, outputName, output);
        console.log(result);
    });
}
updateAnAzureSqlDatabaseOutput().catch(console.error);
/**
 * This sample demonstrates how to Updates an existing output under an existing streaming job. This can be used to partially update (ie. update one or two properties) an output without affecting the rest the job or output definition.
 *
 * @summary Updates an existing output under an existing streaming job. This can be used to partially update (ie. update one or two properties) an output without affecting the rest the job or output definition.
 * x-ms-original-file: specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Update_AzureTable.json
 */
function updateAnAzureTableOutput() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "56b5e0a9-b645-407d-99b0-c64f86013e3d";
        const resourceGroupName = "sjrg5176";
        const jobName = "sj2790";
        const outputName = "output958";
        const output = {
            datasource: {
                type: "Microsoft.Storage/Table",
                partitionKey: "differentPartitionKey"
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new StreamAnalyticsManagementClient(credential, subscriptionId);
        const result = yield client.outputs.update(resourceGroupName, jobName, outputName, output);
        console.log(result);
    });
}
updateAnAzureTableOutput().catch(console.error);
/**
 * This sample demonstrates how to Updates an existing output under an existing streaming job. This can be used to partially update (ie. update one or two properties) an output without affecting the rest the job or output definition.
 *
 * @summary Updates an existing output under an existing streaming job. This can be used to partially update (ie. update one or two properties) an output without affecting the rest the job or output definition.
 * x-ms-original-file: specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Update_EventHub.json
 */
function updateAnEventHubOutputWithJsonSerialization() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "56b5e0a9-b645-407d-99b0-c64f86013e3d";
        const resourceGroupName = "sjrg6912";
        const jobName = "sj3310";
        const outputName = "output5195";
        const output = {
            datasource: {
                type: "Microsoft.ServiceBus/EventHub",
                partitionKey: "differentPartitionKey"
            },
            serialization: { type: "Json", format: "LineSeparated", encoding: "UTF8" }
        };
        const credential = new DefaultAzureCredential();
        const client = new StreamAnalyticsManagementClient(credential, subscriptionId);
        const result = yield client.outputs.update(resourceGroupName, jobName, outputName, output);
        console.log(result);
    });
}
updateAnEventHubOutputWithJsonSerialization().catch(console.error);
//# sourceMappingURL=outputsUpdateSample.js.map