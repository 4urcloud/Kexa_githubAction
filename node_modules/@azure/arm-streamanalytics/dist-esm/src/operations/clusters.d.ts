import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Clusters } from "../operationsInterfaces";
import { StreamAnalyticsManagementClient } from "../streamAnalyticsManagementClient";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import { Cluster, ClustersListBySubscriptionOptionalParams, ClustersListByResourceGroupOptionalParams, ClusterJob, ClustersListStreamingJobsOptionalParams, ClustersCreateOrUpdateOptionalParams, ClustersCreateOrUpdateResponse, ClustersUpdateOptionalParams, ClustersUpdateResponse, ClustersGetOptionalParams, ClustersGetResponse, ClustersDeleteOptionalParams } from "../models";
/** Class containing Clusters operations. */
export declare class ClustersImpl implements Clusters {
    private readonly client;
    /**
     * Initialize a new instance of the class Clusters class.
     * @param client Reference to the service client
     */
    constructor(client: StreamAnalyticsManagementClient);
    /**
     * Lists all of the clusters in the given subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: ClustersListBySubscriptionOptionalParams): PagedAsyncIterableIterator<Cluster>;
    private listBySubscriptionPagingPage;
    private listBySubscriptionPagingAll;
    /**
     * Lists all of the clusters in the given resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: ClustersListByResourceGroupOptionalParams): PagedAsyncIterableIterator<Cluster>;
    private listByResourceGroupPagingPage;
    private listByResourceGroupPagingAll;
    /**
     * Lists all of the streaming jobs in the given cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param options The options parameters.
     */
    listStreamingJobs(resourceGroupName: string, clusterName: string, options?: ClustersListStreamingJobsOptionalParams): PagedAsyncIterableIterator<ClusterJob>;
    private listStreamingJobsPagingPage;
    private listStreamingJobsPagingAll;
    /**
     * Creates a Stream Analytics Cluster or replaces an already existing cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param cluster The definition of the cluster that will be used to create a new cluster or replace
     *                the existing one.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, clusterName: string, cluster: Cluster, options?: ClustersCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<ClustersCreateOrUpdateResponse>, ClustersCreateOrUpdateResponse>>;
    /**
     * Creates a Stream Analytics Cluster or replaces an already existing cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param cluster The definition of the cluster that will be used to create a new cluster or replace
     *                the existing one.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, clusterName: string, cluster: Cluster, options?: ClustersCreateOrUpdateOptionalParams): Promise<ClustersCreateOrUpdateResponse>;
    /**
     * Updates an existing cluster. This can be used to partially update (ie. update one or two properties)
     * a cluster without affecting the rest of the cluster definition.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param cluster The properties specified here will overwrite the corresponding properties in the
     *                existing cluster (ie. Those properties will be updated).
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, clusterName: string, cluster: Cluster, options?: ClustersUpdateOptionalParams): Promise<PollerLike<PollOperationState<ClustersUpdateResponse>, ClustersUpdateResponse>>;
    /**
     * Updates an existing cluster. This can be used to partially update (ie. update one or two properties)
     * a cluster without affecting the rest of the cluster definition.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param cluster The properties specified here will overwrite the corresponding properties in the
     *                existing cluster (ie. Those properties will be updated).
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, clusterName: string, cluster: Cluster, options?: ClustersUpdateOptionalParams): Promise<ClustersUpdateResponse>;
    /**
     * Gets information about the specified cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, clusterName: string, options?: ClustersGetOptionalParams): Promise<ClustersGetResponse>;
    /**
     * Deletes the specified cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, clusterName: string, options?: ClustersDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes the specified cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, clusterName: string, options?: ClustersDeleteOptionalParams): Promise<void>;
    /**
     * Lists all of the clusters in the given subscription.
     * @param options The options parameters.
     */
    private _listBySubscription;
    /**
     * Lists all of the clusters in the given resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    private _listByResourceGroup;
    /**
     * Lists all of the streaming jobs in the given cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param options The options parameters.
     */
    private _listStreamingJobs;
    /**
     * ListBySubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
     * @param options The options parameters.
     */
    private _listBySubscriptionNext;
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    private _listByResourceGroupNext;
    /**
     * ListStreamingJobsNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param nextLink The nextLink from the previous successful call to the ListStreamingJobs method.
     * @param options The options parameters.
     */
    private _listStreamingJobsNext;
}
//# sourceMappingURL=clusters.d.ts.map