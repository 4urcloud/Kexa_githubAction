/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await, __awaiter } from "tslib";
import { setContinuationToken } from "../pagingHelper";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
/// <reference lib="esnext.asynciterable" />
/** Class containing Outputs operations. */
export class OutputsImpl {
    /**
     * Initialize a new instance of the class Outputs class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all of the outputs under the specified streaming job.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @param options The options parameters.
     */
    listByStreamingJob(resourceGroupName, jobName, options) {
        const iter = this.listByStreamingJobPagingAll(resourceGroupName, jobName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByStreamingJobPagingPage(resourceGroupName, jobName, options, settings);
            }
        };
    }
    listByStreamingJobPagingPage(resourceGroupName, jobName, options, settings) {
        return __asyncGenerator(this, arguments, function* listByStreamingJobPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listByStreamingJob(resourceGroupName, jobName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listByStreamingJobNext(resourceGroupName, jobName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listByStreamingJobPagingAll(resourceGroupName, jobName, options) {
        return __asyncGenerator(this, arguments, function* listByStreamingJobPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = __asyncValues(this.listByStreamingJobPagingPage(resourceGroupName, jobName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Creates an output or replaces an already existing output under an existing streaming job.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @param outputName The name of the output.
     * @param output The definition of the output that will be used to create a new output or replace the
     *               existing one under the streaming job.
     * @param options The options parameters.
     */
    createOrReplace(resourceGroupName, jobName, outputName, output, options) {
        return this.client.sendOperationRequest({ resourceGroupName, jobName, outputName, output, options }, createOrReplaceOperationSpec);
    }
    /**
     * Updates an existing output under an existing streaming job. This can be used to partially update
     * (ie. update one or two properties) an output without affecting the rest the job or output
     * definition.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @param outputName The name of the output.
     * @param output An Output object. The properties specified here will overwrite the corresponding
     *               properties in the existing output (ie. Those properties will be updated). Any properties that are
     *               set to null here will mean that the corresponding property in the existing output will remain the
     *               same and not change as a result of this PATCH operation.
     * @param options The options parameters.
     */
    update(resourceGroupName, jobName, outputName, output, options) {
        return this.client.sendOperationRequest({ resourceGroupName, jobName, outputName, output, options }, updateOperationSpec);
    }
    /**
     * Deletes an output from the streaming job.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @param outputName The name of the output.
     * @param options The options parameters.
     */
    delete(resourceGroupName, jobName, outputName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, jobName, outputName, options }, deleteOperationSpec);
    }
    /**
     * Gets details about the specified output.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @param outputName The name of the output.
     * @param options The options parameters.
     */
    get(resourceGroupName, jobName, outputName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, jobName, outputName, options }, getOperationSpec);
    }
    /**
     * Lists all of the outputs under the specified streaming job.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @param options The options parameters.
     */
    _listByStreamingJob(resourceGroupName, jobName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, jobName, options }, listByStreamingJobOperationSpec);
    }
    /**
     * Tests whether an output’s datasource is reachable and usable by the Azure Stream Analytics service.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @param outputName The name of the output.
     * @param options The options parameters.
     */
    beginTest(resourceGroupName, jobName, outputName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, jobName, outputName, options }, testOperationSpec);
            const poller = new LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Tests whether an output’s datasource is reachable and usable by the Azure Stream Analytics service.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @param outputName The name of the output.
     * @param options The options parameters.
     */
    beginTestAndWait(resourceGroupName, jobName, outputName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginTest(resourceGroupName, jobName, outputName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * ListByStreamingJobNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @param nextLink The nextLink from the previous successful call to the ListByStreamingJob method.
     * @param options The options parameters.
     */
    _listByStreamingJobNext(resourceGroupName, jobName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, jobName, nextLink, options }, listByStreamingJobNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const createOrReplaceOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/outputs/{outputName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.Output,
            headersMapper: Mappers.OutputsCreateOrReplaceHeaders
        },
        201: {
            bodyMapper: Mappers.Output,
            headersMapper: Mappers.OutputsCreateOrReplaceHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    requestBody: Parameters.output,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.jobName,
        Parameters.outputName
    ],
    headerParameters: [
        Parameters.accept,
        Parameters.contentType,
        Parameters.ifMatch,
        Parameters.ifNoneMatch
    ],
    mediaType: "json",
    serializer
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/outputs/{outputName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Mappers.Output,
            headersMapper: Mappers.OutputsUpdateHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    requestBody: Parameters.output,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.jobName,
        Parameters.outputName
    ],
    headerParameters: [
        Parameters.accept,
        Parameters.contentType,
        Parameters.ifMatch
    ],
    mediaType: "json",
    serializer
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/outputs/{outputName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.jobName,
        Parameters.outputName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/outputs/{outputName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.Output,
            headersMapper: Mappers.OutputsGetHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.jobName,
        Parameters.outputName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listByStreamingJobOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/outputs",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.OutputListResult
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.select],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.jobName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const testOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/outputs/{outputName}/test",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.ResourceTestStatus
        },
        201: {
            bodyMapper: Mappers.ResourceTestStatus
        },
        202: {
            bodyMapper: Mappers.ResourceTestStatus
        },
        204: {
            bodyMapper: Mappers.ResourceTestStatus
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    requestBody: Parameters.output1,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.jobName,
        Parameters.outputName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const listByStreamingJobNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.OutputListResult
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.nextLink,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.jobName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=outputs.js.map