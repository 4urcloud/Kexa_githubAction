/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { StreamingJob as StreamingJobMapper, StartStreamingJobParameters as StartStreamingJobParametersMapper, ScaleStreamingJobParameters as ScaleStreamingJobParametersMapper, Input as InputMapper, Output as OutputMapper, Transformation as TransformationMapper, FunctionModel as FunctionModelMapper, FunctionRetrieveDefaultDefinitionParameters as FunctionRetrieveDefaultDefinitionParametersMapper, Cluster as ClusterMapper, PrivateEndpoint as PrivateEndpointMapper } from "../models/mappers";
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2020-03-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export const streamingJob = {
    parameterPath: "streamingJob",
    mapper: StreamingJobMapper
};
export const ifMatch = {
    parameterPath: ["options", "ifMatch"],
    mapper: {
        serializedName: "If-Match",
        type: {
            name: "String"
        }
    }
};
export const ifNoneMatch = {
    parameterPath: ["options", "ifNoneMatch"],
    mapper: {
        serializedName: "If-None-Match",
        type: {
            name: "String"
        }
    }
};
export const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[-\\w\\._\\(\\)]+$"),
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const jobName = {
    parameterPath: "jobName",
    mapper: {
        serializedName: "jobName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const expand = {
    parameterPath: ["options", "expand"],
    mapper: {
        serializedName: "$expand",
        type: {
            name: "String"
        }
    }
};
export const startJobParameters = {
    parameterPath: ["options", "startJobParameters"],
    mapper: StartStreamingJobParametersMapper
};
export const scaleJobParameters = {
    parameterPath: ["options", "scaleJobParameters"],
    mapper: ScaleStreamingJobParametersMapper
};
export const input = {
    parameterPath: "input",
    mapper: InputMapper
};
export const inputName = {
    parameterPath: "inputName",
    mapper: {
        serializedName: "inputName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const select = {
    parameterPath: ["options", "select"],
    mapper: {
        serializedName: "$select",
        type: {
            name: "String"
        }
    }
};
export const input1 = {
    parameterPath: ["options", "input"],
    mapper: InputMapper
};
export const output = {
    parameterPath: "output",
    mapper: OutputMapper
};
export const outputName = {
    parameterPath: "outputName",
    mapper: {
        serializedName: "outputName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const output1 = {
    parameterPath: ["options", "output"],
    mapper: OutputMapper
};
export const transformation = {
    parameterPath: "transformation",
    mapper: TransformationMapper
};
export const transformationName = {
    parameterPath: "transformationName",
    mapper: {
        serializedName: "transformationName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const functionParam = {
    parameterPath: "functionParam",
    mapper: FunctionModelMapper
};
export const functionName = {
    parameterPath: "functionName",
    mapper: {
        serializedName: "functionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const functionParam1 = {
    parameterPath: ["options", "function"],
    mapper: FunctionModelMapper
};
export const functionRetrieveDefaultDefinitionParameters = {
    parameterPath: ["options", "functionRetrieveDefaultDefinitionParameters"],
    mapper: FunctionRetrieveDefaultDefinitionParametersMapper
};
export const location = {
    parameterPath: "location",
    mapper: {
        serializedName: "location",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const cluster = {
    parameterPath: "cluster",
    mapper: ClusterMapper
};
export const clusterName = {
    parameterPath: "clusterName",
    mapper: {
        serializedName: "clusterName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const privateEndpoint = {
    parameterPath: "privateEndpoint",
    mapper: PrivateEndpointMapper
};
export const privateEndpointName = {
    parameterPath: "privateEndpointName",
    mapper: {
        serializedName: "privateEndpointName",
        required: true,
        type: {
            name: "String"
        }
    }
};
//# sourceMappingURL=parameters.js.map