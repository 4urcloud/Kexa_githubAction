/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from "tslib";
import { setContinuationToken } from "../pagingHelper";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/// <reference lib="esnext.asynciterable" />
/** Class containing Changes operations. */
export class ChangesImpl {
    /**
     * Initialize a new instance of the class Changes class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List the changes of a resource group within the specified time range. Customer data will always be
     * masked.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param startTime Specifies the start time of the changes request.
     * @param endTime Specifies the end time of the changes request.
     * @param options The options parameters.
     */
    listChangesByResourceGroup(resourceGroupName, startTime, endTime, options) {
        const iter = this.listChangesByResourceGroupPagingAll(resourceGroupName, startTime, endTime, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listChangesByResourceGroupPagingPage(resourceGroupName, startTime, endTime, options, settings);
            }
        };
    }
    listChangesByResourceGroupPagingPage(resourceGroupName, startTime, endTime, options, settings) {
        return __asyncGenerator(this, arguments, function* listChangesByResourceGroupPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listChangesByResourceGroup(resourceGroupName, startTime, endTime, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listChangesByResourceGroupNext(resourceGroupName, startTime, endTime, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listChangesByResourceGroupPagingAll(resourceGroupName, startTime, endTime, options) {
        return __asyncGenerator(this, arguments, function* listChangesByResourceGroupPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = __asyncValues(this.listChangesByResourceGroupPagingPage(resourceGroupName, startTime, endTime, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List the changes of a subscription within the specified time range. Customer data will always be
     * masked.
     * @param startTime Specifies the start time of the changes request.
     * @param endTime Specifies the end time of the changes request.
     * @param options The options parameters.
     */
    listChangesBySubscription(startTime, endTime, options) {
        const iter = this.listChangesBySubscriptionPagingAll(startTime, endTime, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listChangesBySubscriptionPagingPage(startTime, endTime, options, settings);
            }
        };
    }
    listChangesBySubscriptionPagingPage(startTime, endTime, options, settings) {
        return __asyncGenerator(this, arguments, function* listChangesBySubscriptionPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listChangesBySubscription(startTime, endTime, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listChangesBySubscriptionNext(startTime, endTime, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listChangesBySubscriptionPagingAll(startTime, endTime, options) {
        return __asyncGenerator(this, arguments, function* listChangesBySubscriptionPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = __asyncValues(this.listChangesBySubscriptionPagingPage(startTime, endTime, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * List the changes of a resource group within the specified time range. Customer data will always be
     * masked.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param startTime Specifies the start time of the changes request.
     * @param endTime Specifies the end time of the changes request.
     * @param options The options parameters.
     */
    _listChangesByResourceGroup(resourceGroupName, startTime, endTime, options) {
        return this.client.sendOperationRequest({ resourceGroupName, startTime, endTime, options }, listChangesByResourceGroupOperationSpec);
    }
    /**
     * List the changes of a subscription within the specified time range. Customer data will always be
     * masked.
     * @param startTime Specifies the start time of the changes request.
     * @param endTime Specifies the end time of the changes request.
     * @param options The options parameters.
     */
    _listChangesBySubscription(startTime, endTime, options) {
        return this.client.sendOperationRequest({ startTime, endTime, options }, listChangesBySubscriptionOperationSpec);
    }
    /**
     * ListChangesByResourceGroupNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param startTime Specifies the start time of the changes request.
     * @param endTime Specifies the end time of the changes request.
     * @param nextLink The nextLink from the previous successful call to the ListChangesByResourceGroup
     *                 method.
     * @param options The options parameters.
     */
    _listChangesByResourceGroupNext(resourceGroupName, startTime, endTime, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, startTime, endTime, nextLink, options }, listChangesByResourceGroupNextOperationSpec);
    }
    /**
     * ListChangesBySubscriptionNext
     * @param startTime Specifies the start time of the changes request.
     * @param endTime Specifies the end time of the changes request.
     * @param nextLink The nextLink from the previous successful call to the ListChangesBySubscription
     *                 method.
     * @param options The options parameters.
     */
    _listChangesBySubscriptionNext(startTime, endTime, nextLink, options) {
        return this.client.sendOperationRequest({ startTime, endTime, nextLink, options }, listChangesBySubscriptionNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listChangesByResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ChangeAnalysis/changes",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ChangeList
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.skipToken,
        Parameters.startTime,
        Parameters.endTime
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listChangesBySubscriptionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.ChangeAnalysis/changes",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ChangeList
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.skipToken,
        Parameters.startTime,
        Parameters.endTime
    ],
    urlParameters: [Parameters.$host, Parameters.subscriptionId],
    headerParameters: [Parameters.accept],
    serializer
};
const listChangesByResourceGroupNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ChangeList
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.skipToken,
        Parameters.startTime,
        Parameters.endTime
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.nextLink,
        Parameters.subscriptionId,
        Parameters.resourceGroupName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listChangesBySubscriptionNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ChangeList
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.skipToken,
        Parameters.startTime,
        Parameters.endTime
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.nextLink,
        Parameters.subscriptionId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=changes.js.map