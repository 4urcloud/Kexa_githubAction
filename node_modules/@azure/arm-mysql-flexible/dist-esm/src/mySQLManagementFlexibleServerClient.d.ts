import * as coreClient from "@azure/core-client";
import * as coreAuth from "@azure/core-auth";
import { Servers, Replicas, Backups, FirewallRules, Databases, Configurations, LocationBasedCapabilities, CheckVirtualNetworkSubnetUsage, CheckNameAvailability, GetPrivateDnsZoneSuffix, Operations } from "./operationsInterfaces";
import { MySQLManagementFlexibleServerClientOptionalParams } from "./models";
export declare class MySQLManagementFlexibleServerClient extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the MySQLManagementFlexibleServerClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: MySQLManagementFlexibleServerClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    servers: Servers;
    replicas: Replicas;
    backups: Backups;
    firewallRules: FirewallRules;
    databases: Databases;
    configurations: Configurations;
    locationBasedCapabilities: LocationBasedCapabilities;
    checkVirtualNetworkSubnetUsage: CheckVirtualNetworkSubnetUsage;
    checkNameAvailability: CheckNameAvailability;
    getPrivateDnsZoneSuffix: GetPrivateDnsZoneSuffix;
    operations: Operations;
}
//# sourceMappingURL=mySQLManagementFlexibleServerClient.d.ts.map