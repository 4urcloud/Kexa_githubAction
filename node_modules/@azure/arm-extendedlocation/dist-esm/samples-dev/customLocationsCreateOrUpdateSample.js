/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { CustomLocationsManagementClient } from "@azure/arm-extendedlocation";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to Creates or updates a Custom Location in the specified Subscription and Resource Group
 *
 * @summary Creates or updates a Custom Location in the specified Subscription and Resource Group
 * x-ms-original-file: specification/extendedlocation/resource-manager/Microsoft.ExtendedLocation/preview/2021-08-31-preview/examples/CustomLocationsCreate_Update.json
 */
function createOrUpdateCustomLocation() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["EXTENDEDLOCATION_SUBSCRIPTION_ID"] ||
            "11111111-2222-3333-4444-555555555555";
        const resourceGroupName = process.env["EXTENDEDLOCATION_RESOURCE_GROUP"] || "testresourcegroup";
        const resourceName = "customLocation01";
        const parameters = {
            authentication: { type: "KubeConfig", value: "<base64 KubeConfig>" },
            clusterExtensionIds: [
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kubernetes/connectedCluster/someCluster/Microsoft.KubernetesConfiguration/clusterExtensions/fooExtension"
            ],
            displayName: "customLocationLocation01",
            hostResourceId: "/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/testresourcegroup/providers/Microsoft.ContainerService/managedClusters/cluster01",
            identity: { type: "SystemAssigned" },
            location: "West US",
            namespace: "namespace01"
        };
        const credential = new DefaultAzureCredential();
        const client = new CustomLocationsManagementClient(credential, subscriptionId);
        const result = yield client.customLocations.beginCreateOrUpdateAndWait(resourceGroupName, resourceName, parameters);
        console.log(result);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        createOrUpdateCustomLocation();
    });
}
main().catch(console.error);
//# sourceMappingURL=customLocationsCreateOrUpdateSample.js.map