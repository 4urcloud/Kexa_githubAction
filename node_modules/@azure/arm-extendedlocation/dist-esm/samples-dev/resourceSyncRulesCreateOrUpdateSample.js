/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { CustomLocationsManagementClient } from "@azure/arm-extendedlocation";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to Creates or updates a Resource Sync Rule in the parent Custom Location, Subscription Id and Resource Group
 *
 * @summary Creates or updates a Resource Sync Rule in the parent Custom Location, Subscription Id and Resource Group
 * x-ms-original-file: specification/extendedlocation/resource-manager/Microsoft.ExtendedLocation/preview/2021-08-31-preview/examples/ResourceSyncRulesCreate_Update.json
 */
function createOrUpdateResourceSyncRule() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["EXTENDEDLOCATION_SUBSCRIPTION_ID"] ||
            "11111111-2222-3333-4444-555555555555";
        const resourceGroupName = process.env["EXTENDEDLOCATION_RESOURCE_GROUP"] || "testresourcegroup";
        const resourceName = "customLocation01";
        const childResourceName = "resourceSyncRule01";
        const parameters = {
            location: "West US",
            priority: 999,
            selector: {
                matchExpressions: [{ key: "key4", operator: "In", values: ["value4"] }],
                matchLabels: { key1: "value1" }
            },
            targetResourceGroup: "/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/testresourcegroup"
        };
        const credential = new DefaultAzureCredential();
        const client = new CustomLocationsManagementClient(credential, subscriptionId);
        const result = yield client.resourceSyncRules.beginCreateOrUpdateAndWait(resourceGroupName, resourceName, childResourceName, parameters);
        console.log(result);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        createOrUpdateResourceSyncRule();
    });
}
main().catch(console.error);
//# sourceMappingURL=resourceSyncRulesCreateOrUpdateSample.js.map