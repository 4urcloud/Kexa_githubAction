/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { CustomLocation as CustomLocationMapper, PatchableCustomLocations as PatchableCustomLocationsMapper, CustomLocationFindTargetResourceGroupProperties as CustomLocationFindTargetResourceGroupPropertiesMapper, ResourceSyncRule as ResourceSyncRuleMapper, PatchableResourceSyncRule as PatchableResourceSyncRuleMapper } from "../models/mappers";
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2021-08-31-preview",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const resourceName = {
    parameterPath: "resourceName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9]$|^[a-zA-Z0-9][-_a-zA-Z0-9]{0,61}[a-zA-Z0-9]$"),
            MaxLength: 63,
            MinLength: 1
        },
        serializedName: "resourceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export const parameters = {
    parameterPath: "parameters",
    mapper: CustomLocationMapper
};
export const identity = {
    parameterPath: ["options", "identity"],
    mapper: PatchableCustomLocationsMapper
};
export const tags = {
    parameterPath: ["options", "tags"],
    mapper: PatchableCustomLocationsMapper
};
export const authentication = {
    parameterPath: ["options", "authentication"],
    mapper: PatchableCustomLocationsMapper
};
export const clusterExtensionIds = {
    parameterPath: ["options", "clusterExtensionIds"],
    mapper: PatchableCustomLocationsMapper
};
export const displayName = {
    parameterPath: ["options", "displayName"],
    mapper: PatchableCustomLocationsMapper
};
export const hostResourceId = {
    parameterPath: ["options", "hostResourceId"],
    mapper: PatchableCustomLocationsMapper
};
export const hostType = {
    parameterPath: ["options", "hostType"],
    mapper: PatchableCustomLocationsMapper
};
export const namespace = {
    parameterPath: ["options", "namespace"],
    mapper: PatchableCustomLocationsMapper
};
export const provisioningState = {
    parameterPath: ["options", "provisioningState"],
    mapper: PatchableCustomLocationsMapper
};
export const parameters2 = {
    parameterPath: "parameters",
    mapper: CustomLocationFindTargetResourceGroupPropertiesMapper
};
export const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const childResourceName = {
    parameterPath: "childResourceName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9]$|^[a-zA-Z0-9][-_a-zA-Z0-9]{0,61}[a-zA-Z0-9]$"),
            MaxLength: 63,
            MinLength: 1
        },
        serializedName: "childResourceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters3 = {
    parameterPath: "parameters",
    mapper: ResourceSyncRuleMapper
};
export const tags1 = {
    parameterPath: ["options", "tags"],
    mapper: PatchableResourceSyncRuleMapper
};
export const priority = {
    parameterPath: ["options", "priority"],
    mapper: PatchableResourceSyncRuleMapper
};
export const selector = {
    parameterPath: ["options", "selector"],
    mapper: PatchableResourceSyncRuleMapper
};
export const targetResourceGroup = {
    parameterPath: ["options", "targetResourceGroup"],
    mapper: PatchableResourceSyncRuleMapper
};
//# sourceMappingURL=parameters.js.map