/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from "tslib";
import { setContinuationToken } from "../pagingHelper";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/// <reference lib="esnext.asynciterable" />
/** Class containing SubscriptionFeatureRegistrations operations. */
export class SubscriptionFeatureRegistrationsImpl {
    /**
     * Initialize a new instance of the class SubscriptionFeatureRegistrations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Returns subscription feature registrations for given subscription and provider namespace.
     * @param providerNamespace The provider namespace.
     * @param options The options parameters.
     */
    listBySubscription(providerNamespace, options) {
        const iter = this.listBySubscriptionPagingAll(providerNamespace, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listBySubscriptionPagingPage(providerNamespace, options, settings);
            }
        };
    }
    listBySubscriptionPagingPage(providerNamespace, options, settings) {
        return __asyncGenerator(this, arguments, function* listBySubscriptionPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listBySubscription(providerNamespace, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listBySubscriptionNext(providerNamespace, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listBySubscriptionPagingAll(providerNamespace, options) {
        return __asyncGenerator(this, arguments, function* listBySubscriptionPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = __asyncValues(this.listBySubscriptionPagingPage(providerNamespace, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Returns subscription feature registrations for given subscription.
     * @param options The options parameters.
     */
    listAllBySubscription(options) {
        const iter = this.listAllBySubscriptionPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listAllBySubscriptionPagingPage(options, settings);
            }
        };
    }
    listAllBySubscriptionPagingPage(options, settings) {
        return __asyncGenerator(this, arguments, function* listAllBySubscriptionPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listAllBySubscription(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listAllBySubscriptionNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listAllBySubscriptionPagingAll(options) {
        return __asyncGenerator(this, arguments, function* listAllBySubscriptionPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = __asyncValues(this.listAllBySubscriptionPagingPage(options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Returns a feature registration
     * @param providerNamespace The provider namespace.
     * @param featureName The feature name.
     * @param options The options parameters.
     */
    get(providerNamespace, featureName, options) {
        return this.client.sendOperationRequest({ providerNamespace, featureName, options }, getOperationSpec);
    }
    /**
     * Create or update a feature registration.
     * @param providerNamespace The provider namespace.
     * @param featureName The feature name.
     * @param options The options parameters.
     */
    createOrUpdate(providerNamespace, featureName, options) {
        return this.client.sendOperationRequest({ providerNamespace, featureName, options }, createOrUpdateOperationSpec);
    }
    /**
     * Deletes a feature registration
     * @param providerNamespace The provider namespace.
     * @param featureName The feature name.
     * @param options The options parameters.
     */
    delete(providerNamespace, featureName, options) {
        return this.client.sendOperationRequest({ providerNamespace, featureName, options }, deleteOperationSpec);
    }
    /**
     * Returns subscription feature registrations for given subscription and provider namespace.
     * @param providerNamespace The provider namespace.
     * @param options The options parameters.
     */
    _listBySubscription(providerNamespace, options) {
        return this.client.sendOperationRequest({ providerNamespace, options }, listBySubscriptionOperationSpec);
    }
    /**
     * Returns subscription feature registrations for given subscription.
     * @param options The options parameters.
     */
    _listAllBySubscription(options) {
        return this.client.sendOperationRequest({ options }, listAllBySubscriptionOperationSpec);
    }
    /**
     * ListBySubscriptionNext
     * @param providerNamespace The provider namespace.
     * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
     * @param options The options parameters.
     */
    _listBySubscriptionNext(providerNamespace, nextLink, options) {
        return this.client.sendOperationRequest({ providerNamespace, nextLink, options }, listBySubscriptionNextOperationSpec);
    }
    /**
     * ListAllBySubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the ListAllBySubscription method.
     * @param options The options parameters.
     */
    _listAllBySubscriptionNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listAllBySubscriptionNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Features/featureProviders/{providerNamespace}/subscriptionFeatureRegistrations/{featureName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.SubscriptionFeatureRegistration
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.featureName,
        Parameters.providerNamespace
    ],
    headerParameters: [Parameters.accept1],
    serializer
};
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Features/featureProviders/{providerNamespace}/subscriptionFeatureRegistrations/{featureName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.SubscriptionFeatureRegistration
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.subscriptionFeatureRegistrationType,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.featureName,
        Parameters.providerNamespace
    ],
    headerParameters: [Parameters.accept1, Parameters.contentType],
    mediaType: "json",
    serializer
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Features/featureProviders/{providerNamespace}/subscriptionFeatureRegistrations/{featureName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.featureName,
        Parameters.providerNamespace
    ],
    headerParameters: [Parameters.accept1],
    serializer
};
const listBySubscriptionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Features/featureProviders/{providerNamespace}/subscriptionFeatureRegistrations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.SubscriptionFeatureRegistrationList
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.providerNamespace
    ],
    headerParameters: [Parameters.accept1],
    serializer
};
const listAllBySubscriptionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Features/subscriptionFeatureRegistrations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.SubscriptionFeatureRegistrationList
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.subscriptionId],
    headerParameters: [Parameters.accept1],
    serializer
};
const listBySubscriptionNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.SubscriptionFeatureRegistrationList
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.nextLink,
        Parameters.subscriptionId,
        Parameters.providerNamespace
    ],
    headerParameters: [Parameters.accept1],
    serializer
};
const listAllBySubscriptionNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.SubscriptionFeatureRegistrationList
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.nextLink,
        Parameters.subscriptionId
    ],
    headerParameters: [Parameters.accept1],
    serializer
};
//# sourceMappingURL=subscriptionFeatureRegistrations.js.map