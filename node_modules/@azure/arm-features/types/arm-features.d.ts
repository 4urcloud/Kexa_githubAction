import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { PagedAsyncIterableIterator } from '@azure/core-paging';

/** Authorization Profile */
export declare interface AuthorizationProfile {
    /**
     * The requested time
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly requestedTime?: Date;
    /**
     * The requester
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly requester?: string;
    /**
     * The requester object id
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly requesterObjectId?: string;
    /**
     * The approved time
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly approvedTime?: Date;
    /**
     * The approver
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly approver?: string;
}

/** Error definition. */
export declare interface ErrorDefinition {
    /**
     * Service specific error code which serves as the substatus for the HTTP error code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * Description of the error.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
    /** Internal error details. */
    details?: ErrorDefinition[];
}

/** Error response indicates that the service is not able to process the incoming request. */
export declare interface ErrorResponse {
    /** The error details. */
    error?: ErrorDefinition;
}

export declare class FeatureClient extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the FeatureClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The Azure subscription ID.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: FeatureClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    /**
     * Lists all of the available Microsoft.Features REST API operations.
     * @param options The options parameters.
     */
    listOperations(options?: ListOperationsOptionalParams): PagedAsyncIterableIterator<Operation>;
    private listOperationsPagingPage;
    private listOperationsPagingAll;
    /**
     * Lists all of the available Microsoft.Features REST API operations.
     * @param options The options parameters.
     */
    private _listOperations;
    /**
     * ListOperationsNext
     * @param nextLink The nextLink from the previous successful call to the ListOperations method.
     * @param options The options parameters.
     */
    private _listOperationsNext;
    features: Features;
    subscriptionFeatureRegistrations: SubscriptionFeatureRegistrations;
}

/** Optional parameters. */
export declare interface FeatureClientOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** List of previewed features. */
export declare interface FeatureOperationsListResult {
    /** The array of features. */
    value?: FeatureResult[];
    /** The URL to use for getting the next set of results. */
    nextLink?: string;
}

/** Information about feature. */
export declare interface FeatureProperties {
    /** The registration state of the feature for the subscription. */
    state?: string;
}

/** Previewed feature information. */
export declare interface FeatureResult {
    /** The name of the feature. */
    name?: string;
    /** Properties of the previewed feature. */
    properties?: FeatureProperties;
    /** The resource ID of the feature. */
    id?: string;
    /** The resource type of the feature. */
    type?: string;
}

/** Interface representing a Features. */
export declare interface Features {
    /**
     * Gets all the preview features that are available through AFEC for the subscription.
     * @param options The options parameters.
     */
    listAll(options?: FeaturesListAllOptionalParams): PagedAsyncIterableIterator<FeatureResult>;
    /**
     * Gets all the preview features in a provider namespace that are available through AFEC for the
     * subscription.
     * @param resourceProviderNamespace The namespace of the resource provider for getting features.
     * @param options The options parameters.
     */
    list(resourceProviderNamespace: string, options?: FeaturesListOptionalParams): PagedAsyncIterableIterator<FeatureResult>;
    /**
     * Gets the preview feature with the specified name.
     * @param resourceProviderNamespace The resource provider namespace for the feature.
     * @param featureName The name of the feature to get.
     * @param options The options parameters.
     */
    get(resourceProviderNamespace: string, featureName: string, options?: FeaturesGetOptionalParams): Promise<FeaturesGetResponse>;
    /**
     * Registers the preview feature for the subscription.
     * @param resourceProviderNamespace The namespace of the resource provider.
     * @param featureName The name of the feature to register.
     * @param options The options parameters.
     */
    register(resourceProviderNamespace: string, featureName: string, options?: FeaturesRegisterOptionalParams): Promise<FeaturesRegisterResponse>;
    /**
     * Unregisters the preview feature for the subscription.
     * @param resourceProviderNamespace The namespace of the resource provider.
     * @param featureName The name of the feature to unregister.
     * @param options The options parameters.
     */
    unregister(resourceProviderNamespace: string, featureName: string, options?: FeaturesUnregisterOptionalParams): Promise<FeaturesUnregisterResponse>;
}

/** Optional parameters. */
export declare interface FeaturesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type FeaturesGetResponse = FeatureResult;

/** Optional parameters. */
export declare interface FeaturesListAllNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listAllNext operation. */
export declare type FeaturesListAllNextResponse = FeatureOperationsListResult;

/** Optional parameters. */
export declare interface FeaturesListAllOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listAll operation. */
export declare type FeaturesListAllResponse = FeatureOperationsListResult;

/** Optional parameters. */
export declare interface FeaturesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type FeaturesListNextResponse = FeatureOperationsListResult;

/** Optional parameters. */
export declare interface FeaturesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type FeaturesListResponse = FeatureOperationsListResult;

/** Optional parameters. */
export declare interface FeaturesRegisterOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the register operation. */
export declare type FeaturesRegisterResponse = FeatureResult;

/** Optional parameters. */
export declare interface FeaturesUnregisterOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the unregister operation. */
export declare type FeaturesUnregisterResponse = FeatureResult;

/**
 * Given a result page from a pageable operation, returns a
 * continuation token that can be used to begin paging from
 * that point later.
 * @param page A result object from calling .byPage() on a paged operation.
 * @returns The continuation token that can be passed into byPage().
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/** Known values of {@link SubscriptionFeatureRegistrationApprovalType} that the service accepts. */
export declare enum KnownSubscriptionFeatureRegistrationApprovalType {
    /** NotSpecified */
    NotSpecified = "NotSpecified",
    /** ApprovalRequired */
    ApprovalRequired = "ApprovalRequired",
    /** AutoApproval */
    AutoApproval = "AutoApproval"
}

/** Known values of {@link SubscriptionFeatureRegistrationState} that the service accepts. */
export declare enum KnownSubscriptionFeatureRegistrationState {
    /** NotSpecified */
    NotSpecified = "NotSpecified",
    /** NotRegistered */
    NotRegistered = "NotRegistered",
    /** Pending */
    Pending = "Pending",
    /** Registering */
    Registering = "Registering",
    /** Registered */
    Registered = "Registered",
    /** Unregistering */
    Unregistering = "Unregistering",
    /** Unregistered */
    Unregistered = "Unregistered"
}

/** Optional parameters. */
export declare interface ListOperationsNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listOperationsNext operation. */
export declare type ListOperationsNextResponse = OperationListResult;

/** Optional parameters. */
export declare interface ListOperationsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listOperations operation. */
export declare type ListOperationsResponse = OperationListResult;

/** Microsoft.Features operation */
export declare interface Operation {
    /** Operation name: {provider}/{resource}/{operation} */
    name?: string;
    /** The object that represents the operation. */
    display?: OperationDisplay;
}

/** The object that represents the operation. */
export declare interface OperationDisplay {
    /** Service provider: Microsoft.Features */
    provider?: string;
    /** Resource on which the operation is performed: Profile, endpoint, etc. */
    resource?: string;
    /** Operation type: Read, write, delete, etc. */
    operation?: string;
}

/** Result of the request to list Microsoft.Features operations. It contains a list of operations and a URL link to get the next set of results. */
export declare interface OperationListResult {
    /** List of Microsoft.Features operations. */
    value?: Operation[];
    /** URL to get the next set of operation list results if there are any. */
    nextLink?: string;
}

/** An Azure proxy resource. */
export declare interface ProxyResource {
    /**
     * Azure resource Id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Azure resource name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Azure resource type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
}

/** Subscription feature registration details */
export declare interface SubscriptionFeatureRegistration extends ProxyResource {
    properties?: SubscriptionFeatureRegistrationProperties;
}

/**
 * Defines values for SubscriptionFeatureRegistrationApprovalType. \
 * {@link KnownSubscriptionFeatureRegistrationApprovalType} can be used interchangeably with SubscriptionFeatureRegistrationApprovalType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **ApprovalRequired** \
 * **AutoApproval**
 */
export declare type SubscriptionFeatureRegistrationApprovalType = string;

/** The list of subscription feature registrations. */
export declare interface SubscriptionFeatureRegistrationList {
    /** The link used to get the next page of subscription feature registrations list. */
    nextLink?: string;
    /** The list of subscription feature registrations. */
    value?: SubscriptionFeatureRegistration[];
}

export declare interface SubscriptionFeatureRegistrationProperties {
    /**
     * The tenantId.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
    /**
     * The subscriptionId.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly subscriptionId?: string;
    /**
     * The featureName.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly featureName?: string;
    /**
     * The featureDisplayName.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly displayName?: string;
    /**
     * The providerNamespace.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly providerNamespace?: string;
    /** The state. */
    state?: SubscriptionFeatureRegistrationState;
    /** Authorization Profile */
    authorizationProfile?: AuthorizationProfile;
    /** Key-value pairs for meta data. */
    metadata?: {
        [propertyName: string]: string;
    };
    /**
     * The feature release date.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly releaseDate?: Date;
    /**
     * The feature registration date.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly registrationDate?: Date;
    /**
     * The feature documentation link.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly documentationLink?: string;
    /**
     * The feature approval type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly approvalType?: SubscriptionFeatureRegistrationApprovalType;
    /** Indicates whether feature should be displayed in Portal. */
    shouldFeatureDisplayInPortal?: boolean;
    /** The feature description. */
    description?: string;
}

/** Interface representing a SubscriptionFeatureRegistrations. */
export declare interface SubscriptionFeatureRegistrations {
    /**
     * Returns subscription feature registrations for given subscription and provider namespace.
     * @param providerNamespace The provider namespace.
     * @param options The options parameters.
     */
    listBySubscription(providerNamespace: string, options?: SubscriptionFeatureRegistrationsListBySubscriptionOptionalParams): PagedAsyncIterableIterator<SubscriptionFeatureRegistration>;
    /**
     * Returns subscription feature registrations for given subscription.
     * @param options The options parameters.
     */
    listAllBySubscription(options?: SubscriptionFeatureRegistrationsListAllBySubscriptionOptionalParams): PagedAsyncIterableIterator<SubscriptionFeatureRegistration>;
    /**
     * Returns a feature registration
     * @param providerNamespace The provider namespace.
     * @param featureName The feature name.
     * @param options The options parameters.
     */
    get(providerNamespace: string, featureName: string, options?: SubscriptionFeatureRegistrationsGetOptionalParams): Promise<SubscriptionFeatureRegistrationsGetResponse>;
    /**
     * Create or update a feature registration.
     * @param providerNamespace The provider namespace.
     * @param featureName The feature name.
     * @param options The options parameters.
     */
    createOrUpdate(providerNamespace: string, featureName: string, options?: SubscriptionFeatureRegistrationsCreateOrUpdateOptionalParams): Promise<SubscriptionFeatureRegistrationsCreateOrUpdateResponse>;
    /**
     * Deletes a feature registration
     * @param providerNamespace The provider namespace.
     * @param featureName The feature name.
     * @param options The options parameters.
     */
    delete(providerNamespace: string, featureName: string, options?: SubscriptionFeatureRegistrationsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface SubscriptionFeatureRegistrationsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Subscription Feature Registration Type details. */
    subscriptionFeatureRegistrationType?: SubscriptionFeatureRegistration;
}

/** Contains response data for the createOrUpdate operation. */
export declare type SubscriptionFeatureRegistrationsCreateOrUpdateResponse = SubscriptionFeatureRegistration;

/** Optional parameters. */
export declare interface SubscriptionFeatureRegistrationsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface SubscriptionFeatureRegistrationsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type SubscriptionFeatureRegistrationsGetResponse = SubscriptionFeatureRegistration;

/** Optional parameters. */
export declare interface SubscriptionFeatureRegistrationsListAllBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listAllBySubscriptionNext operation. */
export declare type SubscriptionFeatureRegistrationsListAllBySubscriptionNextResponse = SubscriptionFeatureRegistrationList;

/** Optional parameters. */
export declare interface SubscriptionFeatureRegistrationsListAllBySubscriptionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listAllBySubscription operation. */
export declare type SubscriptionFeatureRegistrationsListAllBySubscriptionResponse = SubscriptionFeatureRegistrationList;

/** Optional parameters. */
export declare interface SubscriptionFeatureRegistrationsListBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionNext operation. */
export declare type SubscriptionFeatureRegistrationsListBySubscriptionNextResponse = SubscriptionFeatureRegistrationList;

/** Optional parameters. */
export declare interface SubscriptionFeatureRegistrationsListBySubscriptionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscription operation. */
export declare type SubscriptionFeatureRegistrationsListBySubscriptionResponse = SubscriptionFeatureRegistrationList;

/**
 * Defines values for SubscriptionFeatureRegistrationState. \
 * {@link KnownSubscriptionFeatureRegistrationState} can be used interchangeably with SubscriptionFeatureRegistrationState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **NotRegistered** \
 * **Pending** \
 * **Registering** \
 * **Registered** \
 * **Unregistering** \
 * **Unregistered**
 */
export declare type SubscriptionFeatureRegistrationState = string;

export { }
