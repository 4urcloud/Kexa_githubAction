import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Triggers } from "../operationsInterfaces";
import { ImageBuilderClient } from "../imageBuilderClient";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import { Trigger, TriggersListByImageTemplateOptionalParams, TriggersGetOptionalParams, TriggersGetResponse, TriggersCreateOrUpdateOptionalParams, TriggersCreateOrUpdateResponse, TriggersDeleteOptionalParams, TriggersDeleteResponse } from "../models";
/** Class containing Triggers operations. */
export declare class TriggersImpl implements Triggers {
    private readonly client;
    /**
     * Initialize a new instance of the class Triggers class.
     * @param client Reference to the service client
     */
    constructor(client: ImageBuilderClient);
    /**
     * List all triggers for the specified Image Template resource
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param options The options parameters.
     */
    listByImageTemplate(resourceGroupName: string, imageTemplateName: string, options?: TriggersListByImageTemplateOptionalParams): PagedAsyncIterableIterator<Trigger>;
    private listByImageTemplatePagingPage;
    private listByImageTemplatePagingAll;
    /**
     * List all triggers for the specified Image Template resource
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param options The options parameters.
     */
    private _listByImageTemplate;
    /**
     * Get the specified trigger for the specified image template resource
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param triggerName The name of the trigger
     * @param options The options parameters.
     */
    get(resourceGroupName: string, imageTemplateName: string, triggerName: string, options?: TriggersGetOptionalParams): Promise<TriggersGetResponse>;
    /**
     * Create or update a trigger for the specified virtual machine image template
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param triggerName The name of the trigger
     * @param parameters Parameters supplied to the CreateTrigger operation
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, imageTemplateName: string, triggerName: string, parameters: Trigger, options?: TriggersCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<TriggersCreateOrUpdateResponse>, TriggersCreateOrUpdateResponse>>;
    /**
     * Create or update a trigger for the specified virtual machine image template
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param triggerName The name of the trigger
     * @param parameters Parameters supplied to the CreateTrigger operation
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, imageTemplateName: string, triggerName: string, parameters: Trigger, options?: TriggersCreateOrUpdateOptionalParams): Promise<TriggersCreateOrUpdateResponse>;
    /**
     * Delete a trigger for the specified virtual machine image template
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param triggerName The name of the trigger
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, imageTemplateName: string, triggerName: string, options?: TriggersDeleteOptionalParams): Promise<SimplePollerLike<OperationState<TriggersDeleteResponse>, TriggersDeleteResponse>>;
    /**
     * Delete a trigger for the specified virtual machine image template
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param triggerName The name of the trigger
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, imageTemplateName: string, triggerName: string, options?: TriggersDeleteOptionalParams): Promise<TriggersDeleteResponse>;
    /**
     * ListByImageTemplateNext
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param nextLink The nextLink from the previous successful call to the ListByImageTemplate method.
     * @param options The options parameters.
     */
    private _listByImageTemplateNext;
}
//# sourceMappingURL=triggers.d.ts.map