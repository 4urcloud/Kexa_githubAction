import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { VirtualMachineImageTemplates } from "../operationsInterfaces";
import { ImageBuilderClient } from "../imageBuilderClient";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import { ImageTemplate, VirtualMachineImageTemplatesListOptionalParams, VirtualMachineImageTemplatesListByResourceGroupOptionalParams, RunOutput, VirtualMachineImageTemplatesListRunOutputsOptionalParams, VirtualMachineImageTemplatesCreateOrUpdateOptionalParams, VirtualMachineImageTemplatesCreateOrUpdateResponse, ImageTemplateUpdateParameters, VirtualMachineImageTemplatesUpdateOptionalParams, VirtualMachineImageTemplatesUpdateResponse, VirtualMachineImageTemplatesGetOptionalParams, VirtualMachineImageTemplatesGetResponse, VirtualMachineImageTemplatesDeleteOptionalParams, VirtualMachineImageTemplatesDeleteResponse, VirtualMachineImageTemplatesRunOptionalParams, VirtualMachineImageTemplatesCancelOptionalParams, VirtualMachineImageTemplatesGetRunOutputOptionalParams, VirtualMachineImageTemplatesGetRunOutputResponse } from "../models";
/** Class containing VirtualMachineImageTemplates operations. */
export declare class VirtualMachineImageTemplatesImpl implements VirtualMachineImageTemplates {
    private readonly client;
    /**
     * Initialize a new instance of the class VirtualMachineImageTemplates class.
     * @param client Reference to the service client
     */
    constructor(client: ImageBuilderClient);
    /**
     * Gets information about the VM image templates associated with the subscription.
     * @param options The options parameters.
     */
    list(options?: VirtualMachineImageTemplatesListOptionalParams): PagedAsyncIterableIterator<ImageTemplate>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Gets information about the VM image templates associated with the specified resource group.
     * @param resourceGroupName The name of the resource group.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: VirtualMachineImageTemplatesListByResourceGroupOptionalParams): PagedAsyncIterableIterator<ImageTemplate>;
    private listByResourceGroupPagingPage;
    private listByResourceGroupPagingAll;
    /**
     * List all run outputs for the specified Image Template resource
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param options The options parameters.
     */
    listRunOutputs(resourceGroupName: string, imageTemplateName: string, options?: VirtualMachineImageTemplatesListRunOutputsOptionalParams): PagedAsyncIterableIterator<RunOutput>;
    private listRunOutputsPagingPage;
    private listRunOutputsPagingAll;
    /**
     * Gets information about the VM image templates associated with the subscription.
     * @param options The options parameters.
     */
    private _list;
    /**
     * Gets information about the VM image templates associated with the specified resource group.
     * @param resourceGroupName The name of the resource group.
     * @param options The options parameters.
     */
    private _listByResourceGroup;
    /**
     * Create or update a virtual machine image template
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param parameters Parameters supplied to the CreateImageTemplate operation
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, imageTemplateName: string, parameters: ImageTemplate, options?: VirtualMachineImageTemplatesCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<VirtualMachineImageTemplatesCreateOrUpdateResponse>, VirtualMachineImageTemplatesCreateOrUpdateResponse>>;
    /**
     * Create or update a virtual machine image template
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param parameters Parameters supplied to the CreateImageTemplate operation
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, imageTemplateName: string, parameters: ImageTemplate, options?: VirtualMachineImageTemplatesCreateOrUpdateOptionalParams): Promise<VirtualMachineImageTemplatesCreateOrUpdateResponse>;
    /**
     * Update the tags for this Virtual Machine Image Template
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param parameters Additional parameters for Image Template update.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, imageTemplateName: string, parameters: ImageTemplateUpdateParameters, options?: VirtualMachineImageTemplatesUpdateOptionalParams): Promise<SimplePollerLike<OperationState<VirtualMachineImageTemplatesUpdateResponse>, VirtualMachineImageTemplatesUpdateResponse>>;
    /**
     * Update the tags for this Virtual Machine Image Template
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param parameters Additional parameters for Image Template update.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, imageTemplateName: string, parameters: ImageTemplateUpdateParameters, options?: VirtualMachineImageTemplatesUpdateOptionalParams): Promise<VirtualMachineImageTemplatesUpdateResponse>;
    /**
     * Get information about a virtual machine image template
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param options The options parameters.
     */
    get(resourceGroupName: string, imageTemplateName: string, options?: VirtualMachineImageTemplatesGetOptionalParams): Promise<VirtualMachineImageTemplatesGetResponse>;
    /**
     * Delete a virtual machine image template
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, imageTemplateName: string, options?: VirtualMachineImageTemplatesDeleteOptionalParams): Promise<SimplePollerLike<OperationState<VirtualMachineImageTemplatesDeleteResponse>, VirtualMachineImageTemplatesDeleteResponse>>;
    /**
     * Delete a virtual machine image template
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, imageTemplateName: string, options?: VirtualMachineImageTemplatesDeleteOptionalParams): Promise<VirtualMachineImageTemplatesDeleteResponse>;
    /**
     * Create artifacts from a existing image template
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param options The options parameters.
     */
    beginRun(resourceGroupName: string, imageTemplateName: string, options?: VirtualMachineImageTemplatesRunOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Create artifacts from a existing image template
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param options The options parameters.
     */
    beginRunAndWait(resourceGroupName: string, imageTemplateName: string, options?: VirtualMachineImageTemplatesRunOptionalParams): Promise<void>;
    /**
     * Cancel the long running image build based on the image template
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param options The options parameters.
     */
    beginCancel(resourceGroupName: string, imageTemplateName: string, options?: VirtualMachineImageTemplatesCancelOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Cancel the long running image build based on the image template
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param options The options parameters.
     */
    beginCancelAndWait(resourceGroupName: string, imageTemplateName: string, options?: VirtualMachineImageTemplatesCancelOptionalParams): Promise<void>;
    /**
     * List all run outputs for the specified Image Template resource
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param options The options parameters.
     */
    private _listRunOutputs;
    /**
     * Get the specified run output for the specified image template resource
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param runOutputName The name of the run output
     * @param options The options parameters.
     */
    getRunOutput(resourceGroupName: string, imageTemplateName: string, runOutputName: string, options?: VirtualMachineImageTemplatesGetRunOutputOptionalParams): Promise<VirtualMachineImageTemplatesGetRunOutputResponse>;
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName The name of the resource group.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    private _listByResourceGroupNext;
    /**
     * ListRunOutputsNext
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param nextLink The nextLink from the previous successful call to the ListRunOutputs method.
     * @param options The options parameters.
     */
    private _listRunOutputsNext;
}
//# sourceMappingURL=virtualMachineImageTemplates.d.ts.map