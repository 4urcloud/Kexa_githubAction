/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncValues, __awaiter } from "tslib";
import { env, Recorder, isPlaybackMode, } from "@azure-tools/test-recorder";
import { createTestCredential } from "@azure-tools/test-credential";
import { assert } from "chai";
import { ImageBuilderClient } from "../src/imageBuilderClient";
import { ComputeManagementClient } from "@azure/arm-compute";
import { ManagedServiceIdentityClient } from "@azure/arm-msi";
const replaceableVariables = {
    AZURE_CLIENT_ID: "azure_client_id",
    AZURE_CLIENT_SECRET: "azure_client_secret",
    AZURE_TENANT_ID: "88888888-8888-8888-8888-888888888888",
    SUBSCRIPTION_ID: "azure_subscription_id"
};
const recorderOptions = {
    envSetupForPlayback: replaceableVariables
};
export const testPollingOptions = {
    updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};
describe("ImageBuilder test", () => {
    let recorder;
    let subscriptionId;
    let client;
    let compute_client;
    let msi_client;
    let location;
    let resourceGroup;
    let imageTemplateName;
    let diskName;
    let snapshotName;
    let imagesName;
    let msiName;
    beforeEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            recorder = new Recorder(this.currentTest);
            yield recorder.start(recorderOptions);
            subscriptionId = env.SUBSCRIPTION_ID || "";
            // This is an example of how the environment variables are used
            const credential = createTestCredential();
            client = new ImageBuilderClient(credential, subscriptionId, recorder.configureClientOptions({}));
            compute_client = new ComputeManagementClient(credential, subscriptionId, recorder.configureClientOptions({}));
            msi_client = new ManagedServiceIdentityClient(credential, subscriptionId, recorder.configureClientOptions({}));
            location = "eastus";
            resourceGroup = "myjstest";
            imageTemplateName = "myimageTemplatexxxz";
            diskName = "mydiskaaa";
            snapshotName = "mysnapshotaaa";
            imagesName = "myimagesaaa";
            msiName = "mymsiaaa";
        });
    });
    afterEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            yield recorder.stop();
        });
    });
    it("create parameter for virtualMachineImageTemplates test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            //create a userAssignedIdentities
            const msiCreate = yield msi_client.userAssignedIdentities.createOrUpdate(resourceGroup, msiName, { location: location });
            //create a disk
            const diskCreate = yield compute_client.disks.beginCreateOrUpdateAndWait(resourceGroup, diskName, {
                location: location,
                creationData: {
                    createOption: "Empty"
                },
                diskSizeGB: 200
            }, testPollingOptions);
            //create a snapshots
            const snapshotsCreate = yield compute_client.snapshots.beginCreateOrUpdateAndWait(resourceGroup, snapshotName, {
                location: location,
                creationData: {
                    createOption: "Copy",
                    sourceUri: "/subscriptions/" + subscriptionId + "/resourceGroups/" + resourceGroup + "/providers/Microsoft.Compute/disks/mydiskaaa",
                }
            }, testPollingOptions);
            //create a images
            const imagesCreate = yield compute_client.images.beginCreateOrUpdateAndWait(resourceGroup, imagesName, {
                location: location,
                storageProfile: {
                    osDisk: {
                        osType: "Linux",
                        osState: "Generalized",
                        snapshot: {
                            id: "subscriptions/" + subscriptionId + "/resourceGroups/" + resourceGroup + "/providers/Microsoft.Compute/snapshots/mysnapshotaaa",
                        }
                    }
                },
                hyperVGeneration: "V1"
            }, testPollingOptions);
        });
    });
    it("virtualMachineImageTemplates create test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            if (isPlaybackMode()) {
                this.skip();
            }
            const vmidentity = "/subscriptions/" + subscriptionId + "/resourcegroups/myjstest/providers/Microsoft.ManagedIdentity/userAssignedIdentities/mymsiaaa";
            //before create ,we need add msi owner authority for images in portal
            const res = yield client.virtualMachineImageTemplates.beginCreateOrUpdateAndWait(resourceGroup, imageTemplateName, {
                location: location,
                tags: {
                    tag1: "IT_T1",
                    tag2: "IT2_T2"
                },
                identity: {
                    type: "UserAssigned",
                    userAssignedIdentities: {
                        [vmidentity]: {}
                    }
                },
                source: {
                    type: "ManagedImage",
                    imageId: "/subscriptions/" + subscriptionId + "/resourceGroups/" + resourceGroup + "/providers/Microsoft.Compute/images/myimagesaaa"
                },
                customize: [
                    {
                        type: "Shell",
                        name: "Shell Customizer Example",
                        scriptUri: "https://github.com/Azure/azure-quickstart-templates/blob/master/quickstarts/microsoft.compute/vm-msi/scripts/install-and-run-cli-2.sh"
                    }
                ],
                distribute: [
                    {
                        type: "ManagedImage",
                        location: location,
                        runOutputName: "image_it_pir_1",
                        imageId: "/subscriptions/" + subscriptionId + "/resourceGroups/" + resourceGroup + "/providers/Microsoft.Compute/images/myimagesaaa",
                        artifactTags: {
                            tagName: "value"
                        }
                    }
                ]
            }, testPollingOptions);
        });
    }).timeout(3600000);
    ;
    it("virtualMachineImageTemplates get test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.virtualMachineImageTemplates.get(resourceGroup, imageTemplateName);
            assert.equal(res.name, imageTemplateName);
        });
    });
    it("virtualMachineImageTemplates list test", function () {
        var _a, e_1, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const resArray = new Array();
            try {
                for (var _d = true, _e = __asyncValues(client.virtualMachineImageTemplates.list()), _f; _f = yield _e.next(), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    let item = _c;
                    resArray.push(item);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
                }
                finally { if (e_1) throw e_1.error; }
            }
            assert.equal(resArray.length, 1);
        });
    });
    it("virtualMachineImageTemplates delete test", function () {
        var _a, e_2, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.virtualMachineImageTemplates.beginDeleteAndWait(resourceGroup, imageTemplateName, testPollingOptions);
            const resArray = new Array();
            try {
                for (var _d = true, _e = __asyncValues(client.virtualMachineImageTemplates.list()), _f; _f = yield _e.next(), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    let item = _c;
                    resArray.push(item);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
                }
                finally { if (e_2) throw e_2.error; }
            }
            assert.equal(resArray.length, 0);
        });
    });
    it("delete parameter for virtualMachineImageTemplates test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const imagesDelete = yield compute_client.images.beginDeleteAndWait(resourceGroup, imagesName, testPollingOptions);
            const snapshotsDelete = yield compute_client.snapshots.beginDeleteAndWait(resourceGroup, snapshotName, testPollingOptions);
            const diskDelete = yield compute_client.disks.beginDeleteAndWait(resourceGroup, diskName, testPollingOptions);
            const msiDelete = yield msi_client.userAssignedIdentities.delete(resourceGroup, msiName);
        });
    });
});
//# sourceMappingURL=imagebuilder_examples.js.map