'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var coreClient = require('@azure/core-client');
var coreRestPipeline = require('@azure/core-rest-pipeline');
var coreLro = require('@azure/core-lro');

function _interopNamespaceDefault(e) {
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n.default = e;
    return Object.freeze(n);
}

var coreClient__namespace = /*#__PURE__*/_interopNamespaceDefault(coreClient);
var coreRestPipeline__namespace = /*#__PURE__*/_interopNamespaceDefault(coreRestPipeline);

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const pageMap = new WeakMap();
/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
function getContinuationToken(page) {
    var _a;
    if (typeof page !== "object" || page === null) {
        return undefined;
    }
    return (_a = pageMap.get(page)) === null || _a === void 0 ? void 0 : _a.continuationToken;
}
function setContinuationToken(page, continuationToken) {
    var _a;
    if (typeof page !== "object" || page === null || !continuationToken) {
        return;
    }
    const pageInfo = (_a = pageMap.get(page)) !== null && _a !== void 0 ? _a : {};
    pageInfo.continuationToken = continuationToken;
    pageMap.set(page, pageInfo);
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link OnBuildError} that the service accepts. */
exports.KnownOnBuildError = void 0;
(function (KnownOnBuildError) {
    /** Cleanup */
    KnownOnBuildError["Cleanup"] = "cleanup";
    /** Abort */
    KnownOnBuildError["Abort"] = "abort";
})(exports.KnownOnBuildError || (exports.KnownOnBuildError = {}));
/** Known values of {@link ProvisioningErrorCode} that the service accepts. */
exports.KnownProvisioningErrorCode = void 0;
(function (KnownProvisioningErrorCode) {
    /** BadSourceType */
    KnownProvisioningErrorCode["BadSourceType"] = "BadSourceType";
    /** BadPIRSource */
    KnownProvisioningErrorCode["BadPIRSource"] = "BadPIRSource";
    /** BadManagedImageSource */
    KnownProvisioningErrorCode["BadManagedImageSource"] = "BadManagedImageSource";
    /** BadSharedImageVersionSource */
    KnownProvisioningErrorCode["BadSharedImageVersionSource"] = "BadSharedImageVersionSource";
    /** BadCustomizerType */
    KnownProvisioningErrorCode["BadCustomizerType"] = "BadCustomizerType";
    /** UnsupportedCustomizerType */
    KnownProvisioningErrorCode["UnsupportedCustomizerType"] = "UnsupportedCustomizerType";
    /** NoCustomizerScript */
    KnownProvisioningErrorCode["NoCustomizerScript"] = "NoCustomizerScript";
    /** BadValidatorType */
    KnownProvisioningErrorCode["BadValidatorType"] = "BadValidatorType";
    /** UnsupportedValidatorType */
    KnownProvisioningErrorCode["UnsupportedValidatorType"] = "UnsupportedValidatorType";
    /** NoValidatorScript */
    KnownProvisioningErrorCode["NoValidatorScript"] = "NoValidatorScript";
    /** BadDistributeType */
    KnownProvisioningErrorCode["BadDistributeType"] = "BadDistributeType";
    /** BadSharedImageDistribute */
    KnownProvisioningErrorCode["BadSharedImageDistribute"] = "BadSharedImageDistribute";
    /** BadStagingResourceGroup */
    KnownProvisioningErrorCode["BadStagingResourceGroup"] = "BadStagingResourceGroup";
    /** ServerError */
    KnownProvisioningErrorCode["ServerError"] = "ServerError";
    /** Other */
    KnownProvisioningErrorCode["Other"] = "Other";
})(exports.KnownProvisioningErrorCode || (exports.KnownProvisioningErrorCode = {}));
/** Known values of {@link CreatedByType} that the service accepts. */
exports.KnownCreatedByType = void 0;
(function (KnownCreatedByType) {
    /** User */
    KnownCreatedByType["User"] = "User";
    /** Application */
    KnownCreatedByType["Application"] = "Application";
    /** ManagedIdentity */
    KnownCreatedByType["ManagedIdentity"] = "ManagedIdentity";
    /** Key */
    KnownCreatedByType["Key"] = "Key";
})(exports.KnownCreatedByType || (exports.KnownCreatedByType = {}));
/** Known values of {@link SharedImageStorageAccountType} that the service accepts. */
exports.KnownSharedImageStorageAccountType = void 0;
(function (KnownSharedImageStorageAccountType) {
    /** StandardLRS */
    KnownSharedImageStorageAccountType["StandardLRS"] = "Standard_LRS";
    /** StandardZRS */
    KnownSharedImageStorageAccountType["StandardZRS"] = "Standard_ZRS";
    /** PremiumLRS */
    KnownSharedImageStorageAccountType["PremiumLRS"] = "Premium_LRS";
})(exports.KnownSharedImageStorageAccountType || (exports.KnownSharedImageStorageAccountType = {}));

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const ImageTemplateListResult = {
    type: {
        name: "Composite",
        className: "ImageTemplateListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ImageTemplate"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ImageTemplateSource = {
    type: {
        name: "Composite",
        className: "ImageTemplateSource",
        uberParent: "ImageTemplateSource",
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ImageTemplateCustomizer = {
    type: {
        name: "Composite",
        className: "ImageTemplateCustomizer",
        uberParent: "ImageTemplateCustomizer",
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ImageTemplatePropertiesOptimize = {
    type: {
        name: "Composite",
        className: "ImageTemplatePropertiesOptimize",
        modelProperties: {
            vmBoot: {
                serializedName: "vmBoot",
                type: {
                    name: "Composite",
                    className: "ImageTemplatePropertiesOptimizeVmBoot"
                }
            }
        }
    }
};
const ImageTemplatePropertiesOptimizeVmBoot = {
    type: {
        name: "Composite",
        className: "ImageTemplatePropertiesOptimizeVmBoot",
        modelProperties: {
            state: {
                serializedName: "state",
                type: {
                    name: "Enum",
                    allowedValues: ["Enabled", "Disabled"]
                }
            }
        }
    }
};
const ImageTemplatePropertiesValidate = {
    type: {
        name: "Composite",
        className: "ImageTemplatePropertiesValidate",
        modelProperties: {
            continueDistributeOnFailure: {
                defaultValue: false,
                serializedName: "continueDistributeOnFailure",
                type: {
                    name: "Boolean"
                }
            },
            sourceValidationOnly: {
                defaultValue: false,
                serializedName: "sourceValidationOnly",
                type: {
                    name: "Boolean"
                }
            },
            inVMValidations: {
                serializedName: "inVMValidations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ImageTemplateInVMValidator"
                        }
                    }
                }
            }
        }
    }
};
const ImageTemplateInVMValidator = {
    type: {
        name: "Composite",
        className: "ImageTemplateInVMValidator",
        uberParent: "ImageTemplateInVMValidator",
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ImageTemplateDistributor = {
    type: {
        name: "Composite",
        className: "ImageTemplateDistributor",
        uberParent: "ImageTemplateDistributor",
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            runOutputName: {
                constraints: {
                    Pattern: new RegExp("^[A-Za-z0-9-_.]{1,64}$")
                },
                serializedName: "runOutputName",
                required: true,
                type: {
                    name: "String"
                }
            },
            artifactTags: {
                serializedName: "artifactTags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }
        }
    }
};
const ImageTemplatePropertiesErrorHandling = {
    type: {
        name: "Composite",
        className: "ImageTemplatePropertiesErrorHandling",
        modelProperties: {
            onCustomizerError: {
                serializedName: "onCustomizerError",
                type: {
                    name: "String"
                }
            },
            onValidationError: {
                serializedName: "onValidationError",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ProvisioningError = {
    type: {
        name: "Composite",
        className: "ProvisioningError",
        modelProperties: {
            provisioningErrorCode: {
                serializedName: "provisioningErrorCode",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ImageTemplateLastRunStatus = {
    type: {
        name: "Composite",
        className: "ImageTemplateLastRunStatus",
        modelProperties: {
            startTime: {
                serializedName: "startTime",
                type: {
                    name: "DateTime"
                }
            },
            endTime: {
                serializedName: "endTime",
                type: {
                    name: "DateTime"
                }
            },
            runState: {
                serializedName: "runState",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Running",
                        "Canceling",
                        "Succeeded",
                        "PartiallySucceeded",
                        "Failed",
                        "Canceled"
                    ]
                }
            },
            runSubState: {
                serializedName: "runSubState",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Queued",
                        "Building",
                        "Customizing",
                        "Optimizing",
                        "Validating",
                        "Distributing"
                    ]
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ImageTemplateVmProfile = {
    type: {
        name: "Composite",
        className: "ImageTemplateVmProfile",
        modelProperties: {
            vmSize: {
                defaultValue: "",
                serializedName: "vmSize",
                type: {
                    name: "String"
                }
            },
            osDiskSizeGB: {
                defaultValue: 0,
                constraints: {
                    InclusiveMinimum: 0
                },
                serializedName: "osDiskSizeGB",
                type: {
                    name: "Number"
                }
            },
            userAssignedIdentities: {
                serializedName: "userAssignedIdentities",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            vnetConfig: {
                serializedName: "vnetConfig",
                type: {
                    name: "Composite",
                    className: "VirtualNetworkConfig"
                }
            }
        }
    }
};
const VirtualNetworkConfig = {
    type: {
        name: "Composite",
        className: "VirtualNetworkConfig",
        modelProperties: {
            subnetId: {
                serializedName: "subnetId",
                type: {
                    name: "String"
                }
            },
            proxyVmSize: {
                defaultValue: "",
                serializedName: "proxyVmSize",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ImageTemplateIdentity = {
    type: {
        name: "Composite",
        className: "ImageTemplateIdentity",
        modelProperties: {
            type: {
                serializedName: "type",
                type: {
                    name: "Enum",
                    allowedValues: ["UserAssigned", "None"]
                }
            },
            userAssignedIdentities: {
                serializedName: "userAssignedIdentities",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Composite", className: "UserAssignedIdentity" }
                    }
                }
            }
        }
    }
};
const UserAssignedIdentity = {
    type: {
        name: "Composite",
        className: "UserAssignedIdentity",
        modelProperties: {
            principalId: {
                serializedName: "principalId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            clientId: {
                serializedName: "clientId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Resource = {
    type: {
        name: "Composite",
        className: "Resource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }
        }
    }
};
const SystemData = {
    type: {
        name: "Composite",
        className: "SystemData",
        modelProperties: {
            createdBy: {
                serializedName: "createdBy",
                type: {
                    name: "String"
                }
            },
            createdByType: {
                serializedName: "createdByType",
                type: {
                    name: "String"
                }
            },
            createdAt: {
                serializedName: "createdAt",
                type: {
                    name: "DateTime"
                }
            },
            lastModifiedBy: {
                serializedName: "lastModifiedBy",
                type: {
                    name: "String"
                }
            },
            lastModifiedByType: {
                serializedName: "lastModifiedByType",
                type: {
                    name: "String"
                }
            },
            lastModifiedAt: {
                serializedName: "lastModifiedAt",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const ErrorResponse = {
    type: {
        name: "Composite",
        className: "ErrorResponse",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorDetail"
                }
            }
        }
    }
};
const ErrorDetail = {
    type: {
        name: "Composite",
        className: "ErrorDetail",
        modelProperties: {
            code: {
                serializedName: "code",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorDetail"
                        }
                    }
                }
            },
            additionalInfo: {
                serializedName: "additionalInfo",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorAdditionalInfo"
                        }
                    }
                }
            }
        }
    }
};
const ErrorAdditionalInfo = {
    type: {
        name: "Composite",
        className: "ErrorAdditionalInfo",
        modelProperties: {
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            info: {
                serializedName: "info",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
const ImageTemplateUpdateParameters = {
    type: {
        name: "Composite",
        className: "ImageTemplateUpdateParameters",
        modelProperties: {
            identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "ImageTemplateIdentity"
                }
            },
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "ImageTemplateUpdateParametersProperties"
                }
            }
        }
    }
};
const ImageTemplateUpdateParametersProperties = {
    type: {
        name: "Composite",
        className: "ImageTemplateUpdateParametersProperties",
        modelProperties: {
            distribute: {
                serializedName: "distribute",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ImageTemplateDistributor"
                        }
                    }
                }
            }
        }
    }
};
const RunOutputCollection = {
    type: {
        name: "Composite",
        className: "RunOutputCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RunOutput"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TriggerCollection = {
    type: {
        name: "Composite",
        className: "TriggerCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Trigger"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TriggerProperties = {
    type: {
        name: "Composite",
        className: "TriggerProperties",
        uberParent: "TriggerProperties",
        polymorphicDiscriminator: {
            serializedName: "kind",
            clientName: "kind"
        },
        modelProperties: {
            kind: {
                serializedName: "kind",
                required: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                type: {
                    name: "Composite",
                    className: "TriggerStatus"
                }
            },
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Creating",
                        "Updating",
                        "Succeeded",
                        "Failed",
                        "Deleting",
                        "Canceled"
                    ]
                }
            }
        }
    }
};
const TriggerStatus = {
    type: {
        name: "Composite",
        className: "TriggerStatus",
        modelProperties: {
            code: {
                serializedName: "code",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            time: {
                serializedName: "time",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const OperationListResult = {
    type: {
        name: "Composite",
        className: "OperationListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Operation"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Operation = {
    type: {
        name: "Composite",
        className: "Operation",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            display: {
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "OperationDisplay"
                }
            },
            origin: {
                serializedName: "origin",
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            },
            isDataAction: {
                serializedName: "isDataAction",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const OperationDisplay = {
    type: {
        name: "Composite",
        className: "OperationDisplay",
        modelProperties: {
            provider: {
                serializedName: "provider",
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "resource",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PlatformImagePurchasePlan = {
    type: {
        name: "Composite",
        className: "PlatformImagePurchasePlan",
        modelProperties: {
            planName: {
                serializedName: "planName",
                required: true,
                type: {
                    name: "String"
                }
            },
            planProduct: {
                serializedName: "planProduct",
                required: true,
                type: {
                    name: "String"
                }
            },
            planPublisher: {
                serializedName: "planPublisher",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TargetRegion = {
    type: {
        name: "Composite",
        className: "TargetRegion",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            replicaCount: {
                defaultValue: 1,
                constraints: {
                    InclusiveMinimum: 1
                },
                serializedName: "replicaCount",
                type: {
                    name: "Number"
                }
            },
            storageAccountType: {
                serializedName: "storageAccountType",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DistributeVersioner = {
    type: {
        name: "Composite",
        className: "DistributeVersioner",
        uberParent: "DistributeVersioner",
        polymorphicDiscriminator: {
            serializedName: "scheme",
            clientName: "scheme"
        },
        modelProperties: {
            scheme: {
                serializedName: "scheme",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ImageTemplatePlatformImageSource = {
    serializedName: "PlatformImage",
    type: {
        name: "Composite",
        className: "ImageTemplatePlatformImageSource",
        uberParent: "ImageTemplateSource",
        polymorphicDiscriminator: ImageTemplateSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ImageTemplateSource.type.modelProperties), { publisher: {
                serializedName: "publisher",
                type: {
                    name: "String"
                }
            }, offer: {
                serializedName: "offer",
                type: {
                    name: "String"
                }
            }, sku: {
                serializedName: "sku",
                type: {
                    name: "String"
                }
            }, version: {
                serializedName: "version",
                type: {
                    name: "String"
                }
            }, exactVersion: {
                serializedName: "exactVersion",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, planInfo: {
                serializedName: "planInfo",
                type: {
                    name: "Composite",
                    className: "PlatformImagePurchasePlan"
                }
            } })
    }
};
const ImageTemplateManagedImageSource = {
    serializedName: "ManagedImage",
    type: {
        name: "Composite",
        className: "ImageTemplateManagedImageSource",
        uberParent: "ImageTemplateSource",
        polymorphicDiscriminator: ImageTemplateSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ImageTemplateSource.type.modelProperties), { imageId: {
                serializedName: "imageId",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const ImageTemplateSharedImageVersionSource = {
    serializedName: "SharedImageVersion",
    type: {
        name: "Composite",
        className: "ImageTemplateSharedImageVersionSource",
        uberParent: "ImageTemplateSource",
        polymorphicDiscriminator: ImageTemplateSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ImageTemplateSource.type.modelProperties), { imageVersionId: {
                serializedName: "imageVersionId",
                required: true,
                type: {
                    name: "String"
                }
            }, exactVersion: {
                serializedName: "exactVersion",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const ImageTemplateShellCustomizer = {
    serializedName: "Shell",
    type: {
        name: "Composite",
        className: "ImageTemplateShellCustomizer",
        uberParent: "ImageTemplateCustomizer",
        polymorphicDiscriminator: ImageTemplateCustomizer.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ImageTemplateCustomizer.type.modelProperties), { scriptUri: {
                serializedName: "scriptUri",
                type: {
                    name: "String"
                }
            }, sha256Checksum: {
                defaultValue: "",
                serializedName: "sha256Checksum",
                type: {
                    name: "String"
                }
            }, inline: {
                serializedName: "inline",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            } })
    }
};
const ImageTemplateRestartCustomizer = {
    serializedName: "WindowsRestart",
    type: {
        name: "Composite",
        className: "ImageTemplateRestartCustomizer",
        uberParent: "ImageTemplateCustomizer",
        polymorphicDiscriminator: ImageTemplateCustomizer.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ImageTemplateCustomizer.type.modelProperties), { restartCommand: {
                serializedName: "restartCommand",
                type: {
                    name: "String"
                }
            }, restartCheckCommand: {
                serializedName: "restartCheckCommand",
                type: {
                    name: "String"
                }
            }, restartTimeout: {
                serializedName: "restartTimeout",
                type: {
                    name: "String"
                }
            } })
    }
};
const ImageTemplateWindowsUpdateCustomizer = {
    serializedName: "WindowsUpdate",
    type: {
        name: "Composite",
        className: "ImageTemplateWindowsUpdateCustomizer",
        uberParent: "ImageTemplateCustomizer",
        polymorphicDiscriminator: ImageTemplateCustomizer.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ImageTemplateCustomizer.type.modelProperties), { searchCriteria: {
                serializedName: "searchCriteria",
                type: {
                    name: "String"
                }
            }, filters: {
                serializedName: "filters",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, updateLimit: {
                defaultValue: 0,
                constraints: {
                    InclusiveMinimum: 0
                },
                serializedName: "updateLimit",
                type: {
                    name: "Number"
                }
            } })
    }
};
const ImageTemplatePowerShellCustomizer = {
    serializedName: "PowerShell",
    type: {
        name: "Composite",
        className: "ImageTemplatePowerShellCustomizer",
        uberParent: "ImageTemplateCustomizer",
        polymorphicDiscriminator: ImageTemplateCustomizer.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ImageTemplateCustomizer.type.modelProperties), { scriptUri: {
                serializedName: "scriptUri",
                type: {
                    name: "String"
                }
            }, sha256Checksum: {
                defaultValue: "",
                serializedName: "sha256Checksum",
                type: {
                    name: "String"
                }
            }, inline: {
                serializedName: "inline",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, runElevated: {
                defaultValue: false,
                serializedName: "runElevated",
                type: {
                    name: "Boolean"
                }
            }, runAsSystem: {
                defaultValue: false,
                serializedName: "runAsSystem",
                type: {
                    name: "Boolean"
                }
            }, validExitCodes: {
                serializedName: "validExitCodes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Number"
                        }
                    }
                }
            } })
    }
};
const ImageTemplateFileCustomizer = {
    serializedName: "File",
    type: {
        name: "Composite",
        className: "ImageTemplateFileCustomizer",
        uberParent: "ImageTemplateCustomizer",
        polymorphicDiscriminator: ImageTemplateCustomizer.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ImageTemplateCustomizer.type.modelProperties), { sourceUri: {
                serializedName: "sourceUri",
                type: {
                    name: "String"
                }
            }, sha256Checksum: {
                defaultValue: "",
                serializedName: "sha256Checksum",
                type: {
                    name: "String"
                }
            }, destination: {
                serializedName: "destination",
                type: {
                    name: "String"
                }
            } })
    }
};
const ImageTemplateShellValidator = {
    serializedName: "Shell",
    type: {
        name: "Composite",
        className: "ImageTemplateShellValidator",
        uberParent: "ImageTemplateInVMValidator",
        polymorphicDiscriminator: ImageTemplateInVMValidator.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ImageTemplateInVMValidator.type.modelProperties), { scriptUri: {
                serializedName: "scriptUri",
                type: {
                    name: "String"
                }
            }, sha256Checksum: {
                defaultValue: "",
                serializedName: "sha256Checksum",
                type: {
                    name: "String"
                }
            }, inline: {
                serializedName: "inline",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            } })
    }
};
const ImageTemplatePowerShellValidator = {
    serializedName: "PowerShell",
    type: {
        name: "Composite",
        className: "ImageTemplatePowerShellValidator",
        uberParent: "ImageTemplateInVMValidator",
        polymorphicDiscriminator: ImageTemplateInVMValidator.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ImageTemplateInVMValidator.type.modelProperties), { scriptUri: {
                serializedName: "scriptUri",
                type: {
                    name: "String"
                }
            }, sha256Checksum: {
                defaultValue: "",
                serializedName: "sha256Checksum",
                type: {
                    name: "String"
                }
            }, inline: {
                serializedName: "inline",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, runElevated: {
                defaultValue: false,
                serializedName: "runElevated",
                type: {
                    name: "Boolean"
                }
            }, runAsSystem: {
                defaultValue: false,
                serializedName: "runAsSystem",
                type: {
                    name: "Boolean"
                }
            }, validExitCodes: {
                serializedName: "validExitCodes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Number"
                        }
                    }
                }
            } })
    }
};
const ImageTemplateFileValidator = {
    serializedName: "File",
    type: {
        name: "Composite",
        className: "ImageTemplateFileValidator",
        uberParent: "ImageTemplateInVMValidator",
        polymorphicDiscriminator: ImageTemplateInVMValidator.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ImageTemplateInVMValidator.type.modelProperties), { sourceUri: {
                serializedName: "sourceUri",
                type: {
                    name: "String"
                }
            }, sha256Checksum: {
                defaultValue: "",
                serializedName: "sha256Checksum",
                type: {
                    name: "String"
                }
            }, destination: {
                serializedName: "destination",
                type: {
                    name: "String"
                }
            } })
    }
};
const ImageTemplateManagedImageDistributor = {
    serializedName: "ManagedImage",
    type: {
        name: "Composite",
        className: "ImageTemplateManagedImageDistributor",
        uberParent: "ImageTemplateDistributor",
        polymorphicDiscriminator: ImageTemplateDistributor.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ImageTemplateDistributor.type.modelProperties), { imageId: {
                serializedName: "imageId",
                required: true,
                type: {
                    name: "String"
                }
            }, location: {
                serializedName: "location",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const ImageTemplateSharedImageDistributor = {
    serializedName: "SharedImage",
    type: {
        name: "Composite",
        className: "ImageTemplateSharedImageDistributor",
        uberParent: "ImageTemplateDistributor",
        polymorphicDiscriminator: ImageTemplateDistributor.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ImageTemplateDistributor.type.modelProperties), { galleryImageId: {
                serializedName: "galleryImageId",
                required: true,
                type: {
                    name: "String"
                }
            }, replicationRegions: {
                serializedName: "replicationRegions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, excludeFromLatest: {
                defaultValue: false,
                serializedName: "excludeFromLatest",
                type: {
                    name: "Boolean"
                }
            }, storageAccountType: {
                serializedName: "storageAccountType",
                type: {
                    name: "String"
                }
            }, targetRegions: {
                serializedName: "targetRegions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TargetRegion"
                        }
                    }
                }
            }, versioning: {
                serializedName: "versioning",
                type: {
                    name: "Composite",
                    className: "DistributeVersioner"
                }
            } })
    }
};
const ImageTemplateVhdDistributor = {
    serializedName: "VHD",
    type: {
        name: "Composite",
        className: "ImageTemplateVhdDistributor",
        uberParent: "ImageTemplateDistributor",
        polymorphicDiscriminator: ImageTemplateDistributor.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ImageTemplateDistributor.type.modelProperties), { uri: {
                serializedName: "uri",
                type: {
                    name: "String"
                }
            } })
    }
};
const TrackedResource = {
    type: {
        name: "Composite",
        className: "TrackedResource",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }, location: {
                serializedName: "location",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const ProxyResource = {
    type: {
        name: "Composite",
        className: "ProxyResource",
        modelProperties: Object.assign({}, Resource.type.modelProperties)
    }
};
const SourceImageTriggerProperties = {
    serializedName: "SourceImage",
    type: {
        name: "Composite",
        className: "SourceImageTriggerProperties",
        uberParent: "TriggerProperties",
        polymorphicDiscriminator: TriggerProperties.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, TriggerProperties.type.modelProperties)
    }
};
const DistributeVersionerLatest = {
    serializedName: "Latest",
    type: {
        name: "Composite",
        className: "DistributeVersionerLatest",
        uberParent: "DistributeVersioner",
        polymorphicDiscriminator: DistributeVersioner.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DistributeVersioner.type.modelProperties), { major: {
                defaultValue: -1,
                constraints: {
                    InclusiveMinimum: -1
                },
                serializedName: "major",
                type: {
                    name: "Number"
                }
            } })
    }
};
const DistributeVersionerSource = {
    serializedName: "Source",
    type: {
        name: "Composite",
        className: "DistributeVersionerSource",
        uberParent: "DistributeVersioner",
        polymorphicDiscriminator: DistributeVersioner.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, DistributeVersioner.type.modelProperties)
    }
};
const ImageTemplate = {
    type: {
        name: "Composite",
        className: "ImageTemplate",
        modelProperties: Object.assign(Object.assign({}, TrackedResource.type.modelProperties), { identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "ImageTemplateIdentity"
                }
            }, source: {
                serializedName: "properties.source",
                type: {
                    name: "Composite",
                    className: "ImageTemplateSource"
                }
            }, customize: {
                serializedName: "properties.customize",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ImageTemplateCustomizer"
                        }
                    }
                }
            }, optimize: {
                serializedName: "properties.optimize",
                type: {
                    name: "Composite",
                    className: "ImageTemplatePropertiesOptimize"
                }
            }, validate: {
                serializedName: "properties.validate",
                type: {
                    name: "Composite",
                    className: "ImageTemplatePropertiesValidate"
                }
            }, distribute: {
                serializedName: "properties.distribute",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ImageTemplateDistributor"
                        }
                    }
                }
            }, errorHandling: {
                serializedName: "properties.errorHandling",
                type: {
                    name: "Composite",
                    className: "ImageTemplatePropertiesErrorHandling"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Creating",
                        "Updating",
                        "Succeeded",
                        "Failed",
                        "Deleting",
                        "Canceled"
                    ]
                }
            }, provisioningError: {
                serializedName: "properties.provisioningError",
                type: {
                    name: "Composite",
                    className: "ProvisioningError"
                }
            }, lastRunStatus: {
                serializedName: "properties.lastRunStatus",
                type: {
                    name: "Composite",
                    className: "ImageTemplateLastRunStatus"
                }
            }, buildTimeoutInMinutes: {
                defaultValue: 0,
                constraints: {
                    InclusiveMaximum: 960,
                    InclusiveMinimum: 0
                },
                serializedName: "properties.buildTimeoutInMinutes",
                type: {
                    name: "Number"
                }
            }, vmProfile: {
                serializedName: "properties.vmProfile",
                type: {
                    name: "Composite",
                    className: "ImageTemplateVmProfile"
                }
            }, stagingResourceGroup: {
                serializedName: "properties.stagingResourceGroup",
                type: {
                    name: "String"
                }
            }, exactStagingResourceGroup: {
                serializedName: "properties.exactStagingResourceGroup",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const RunOutput = {
    type: {
        name: "Composite",
        className: "RunOutput",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { artifactId: {
                serializedName: "properties.artifactId",
                type: {
                    name: "String"
                }
            }, artifactUri: {
                serializedName: "properties.artifactUri",
                type: {
                    name: "String"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Creating",
                        "Updating",
                        "Succeeded",
                        "Failed",
                        "Deleting",
                        "Canceled"
                    ]
                }
            } })
    }
};
const Trigger = {
    type: {
        name: "Composite",
        className: "Trigger",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { kind: {
                serializedName: "properties.kind",
                type: {
                    name: "String"
                }
            }, status: {
                serializedName: "properties.status",
                type: {
                    name: "Composite",
                    className: "TriggerStatus"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Creating",
                        "Updating",
                        "Succeeded",
                        "Failed",
                        "Deleting",
                        "Canceled"
                    ]
                }
            } })
    }
};
const VirtualMachineImageTemplatesDeleteHeaders = {
    type: {
        name: "Composite",
        className: "VirtualMachineImageTemplatesDeleteHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TriggersDeleteHeaders = {
    type: {
        name: "Composite",
        className: "TriggersDeleteHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }
        }
    }
};
let discriminators = {
    ImageTemplateSource: ImageTemplateSource,
    ImageTemplateCustomizer: ImageTemplateCustomizer,
    ImageTemplateInVMValidator: ImageTemplateInVMValidator,
    ImageTemplateDistributor: ImageTemplateDistributor,
    TriggerProperties: TriggerProperties,
    DistributeVersioner: DistributeVersioner,
    "ImageTemplateSource.PlatformImage": ImageTemplatePlatformImageSource,
    "ImageTemplateSource.ManagedImage": ImageTemplateManagedImageSource,
    "ImageTemplateSource.SharedImageVersion": ImageTemplateSharedImageVersionSource,
    "ImageTemplateCustomizer.Shell": ImageTemplateShellCustomizer,
    "ImageTemplateCustomizer.WindowsRestart": ImageTemplateRestartCustomizer,
    "ImageTemplateCustomizer.WindowsUpdate": ImageTemplateWindowsUpdateCustomizer,
    "ImageTemplateCustomizer.PowerShell": ImageTemplatePowerShellCustomizer,
    "ImageTemplateCustomizer.File": ImageTemplateFileCustomizer,
    "ImageTemplateInVMValidator.Shell": ImageTemplateShellValidator,
    "ImageTemplateInVMValidator.PowerShell": ImageTemplatePowerShellValidator,
    "ImageTemplateInVMValidator.File": ImageTemplateFileValidator,
    "ImageTemplateDistributor.ManagedImage": ImageTemplateManagedImageDistributor,
    "ImageTemplateDistributor.SharedImage": ImageTemplateSharedImageDistributor,
    "ImageTemplateDistributor.VHD": ImageTemplateVhdDistributor,
    "TriggerProperties.SourceImage": SourceImageTriggerProperties,
    "DistributeVersioner.Latest": DistributeVersionerLatest,
    "DistributeVersioner.Source": DistributeVersionerSource
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    DistributeVersioner: DistributeVersioner,
    DistributeVersionerLatest: DistributeVersionerLatest,
    DistributeVersionerSource: DistributeVersionerSource,
    ErrorAdditionalInfo: ErrorAdditionalInfo,
    ErrorDetail: ErrorDetail,
    ErrorResponse: ErrorResponse,
    ImageTemplate: ImageTemplate,
    ImageTemplateCustomizer: ImageTemplateCustomizer,
    ImageTemplateDistributor: ImageTemplateDistributor,
    ImageTemplateFileCustomizer: ImageTemplateFileCustomizer,
    ImageTemplateFileValidator: ImageTemplateFileValidator,
    ImageTemplateIdentity: ImageTemplateIdentity,
    ImageTemplateInVMValidator: ImageTemplateInVMValidator,
    ImageTemplateLastRunStatus: ImageTemplateLastRunStatus,
    ImageTemplateListResult: ImageTemplateListResult,
    ImageTemplateManagedImageDistributor: ImageTemplateManagedImageDistributor,
    ImageTemplateManagedImageSource: ImageTemplateManagedImageSource,
    ImageTemplatePlatformImageSource: ImageTemplatePlatformImageSource,
    ImageTemplatePowerShellCustomizer: ImageTemplatePowerShellCustomizer,
    ImageTemplatePowerShellValidator: ImageTemplatePowerShellValidator,
    ImageTemplatePropertiesErrorHandling: ImageTemplatePropertiesErrorHandling,
    ImageTemplatePropertiesOptimize: ImageTemplatePropertiesOptimize,
    ImageTemplatePropertiesOptimizeVmBoot: ImageTemplatePropertiesOptimizeVmBoot,
    ImageTemplatePropertiesValidate: ImageTemplatePropertiesValidate,
    ImageTemplateRestartCustomizer: ImageTemplateRestartCustomizer,
    ImageTemplateSharedImageDistributor: ImageTemplateSharedImageDistributor,
    ImageTemplateSharedImageVersionSource: ImageTemplateSharedImageVersionSource,
    ImageTemplateShellCustomizer: ImageTemplateShellCustomizer,
    ImageTemplateShellValidator: ImageTemplateShellValidator,
    ImageTemplateSource: ImageTemplateSource,
    ImageTemplateUpdateParameters: ImageTemplateUpdateParameters,
    ImageTemplateUpdateParametersProperties: ImageTemplateUpdateParametersProperties,
    ImageTemplateVhdDistributor: ImageTemplateVhdDistributor,
    ImageTemplateVmProfile: ImageTemplateVmProfile,
    ImageTemplateWindowsUpdateCustomizer: ImageTemplateWindowsUpdateCustomizer,
    Operation: Operation,
    OperationDisplay: OperationDisplay,
    OperationListResult: OperationListResult,
    PlatformImagePurchasePlan: PlatformImagePurchasePlan,
    ProvisioningError: ProvisioningError,
    ProxyResource: ProxyResource,
    Resource: Resource,
    RunOutput: RunOutput,
    RunOutputCollection: RunOutputCollection,
    SourceImageTriggerProperties: SourceImageTriggerProperties,
    SystemData: SystemData,
    TargetRegion: TargetRegion,
    TrackedResource: TrackedResource,
    Trigger: Trigger,
    TriggerCollection: TriggerCollection,
    TriggerProperties: TriggerProperties,
    TriggerStatus: TriggerStatus,
    TriggersDeleteHeaders: TriggersDeleteHeaders,
    UserAssignedIdentity: UserAssignedIdentity,
    VirtualMachineImageTemplatesDeleteHeaders: VirtualMachineImageTemplatesDeleteHeaders,
    VirtualNetworkConfig: VirtualNetworkConfig,
    discriminators: discriminators
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2023-07-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const parameters = {
    parameterPath: "parameters",
    mapper: ImageTemplate
};
const imageTemplateName = {
    parameterPath: "imageTemplateName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[A-Za-z0-9-_.]{1,64}$")
        },
        serializedName: "imageTemplateName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters1 = {
    parameterPath: "parameters",
    mapper: ImageTemplateUpdateParameters
};
const runOutputName = {
    parameterPath: "runOutputName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[A-Za-z0-9-_.]{1,64}$")
        },
        serializedName: "runOutputName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const triggerName = {
    parameterPath: "triggerName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[A-Za-z0-9-_.]{1,64}$")
        },
        serializedName: "triggerName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters2 = {
    parameterPath: "parameters",
    mapper: Trigger
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
function createLroSpec(inputs) {
    const { args, spec, sendOperationFn } = inputs;
    return {
        requestMethod: spec.httpMethod,
        requestPath: spec.path,
        sendInitialRequest: () => sendOperationFn(args, spec),
        sendPollRequest: (path, options) => {
            const restSpec = tslib.__rest(spec, ["requestBody"]);
            return sendOperationFn(args, Object.assign(Object.assign({}, restSpec), { httpMethod: "GET", path, abortSignal: options === null || options === void 0 ? void 0 : options.abortSignal }));
        }
    };
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing VirtualMachineImageTemplates operations. */
class VirtualMachineImageTemplatesImpl {
    /**
     * Initialize a new instance of the class VirtualMachineImageTemplates class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets information about the VM image templates associated with the subscription.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets information about the VM image templates associated with the specified resource group.
     * @param resourceGroupName The name of the resource group.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName, options) {
        const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByResourceGroupPagingPage(resourceGroupName, options, settings);
            }
        };
    }
    listByResourceGroupPagingPage(resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByResourceGroup(resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByResourceGroupNext(resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByResourceGroupPagingAll(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingAll_1() {
            var _a, e_2, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByResourceGroupPagingPage(resourceGroupName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * List all run outputs for the specified Image Template resource
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param options The options parameters.
     */
    listRunOutputs(resourceGroupName, imageTemplateName, options) {
        const iter = this.listRunOutputsPagingAll(resourceGroupName, imageTemplateName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listRunOutputsPagingPage(resourceGroupName, imageTemplateName, options, settings);
            }
        };
    }
    listRunOutputsPagingPage(resourceGroupName, imageTemplateName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listRunOutputsPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listRunOutputs(resourceGroupName, imageTemplateName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listRunOutputsNext(resourceGroupName, imageTemplateName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listRunOutputsPagingAll(resourceGroupName, imageTemplateName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listRunOutputsPagingAll_1() {
            var _a, e_3, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listRunOutputsPagingPage(resourceGroupName, imageTemplateName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * Gets information about the VM image templates associated with the subscription.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$1);
    }
    /**
     * Gets information about the VM image templates associated with the specified resource group.
     * @param resourceGroupName The name of the resource group.
     * @param options The options parameters.
     */
    _listByResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listByResourceGroupOperationSpec);
    }
    /**
     * Create or update a virtual machine image template
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param parameters Parameters supplied to the CreateImageTemplate operation
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, imageTemplateName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, imageTemplateName, parameters, options },
                spec: createOrUpdateOperationSpec$1
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create or update a virtual machine image template
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param parameters Parameters supplied to the CreateImageTemplate operation
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, imageTemplateName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, imageTemplateName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Update the tags for this Virtual Machine Image Template
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param parameters Additional parameters for Image Template update.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, imageTemplateName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, imageTemplateName, parameters, options },
                spec: updateOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Update the tags for this Virtual Machine Image Template
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param parameters Additional parameters for Image Template update.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, imageTemplateName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, imageTemplateName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Get information about a virtual machine image template
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param options The options parameters.
     */
    get(resourceGroupName, imageTemplateName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, imageTemplateName, options }, getOperationSpec$1);
    }
    /**
     * Delete a virtual machine image template
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, imageTemplateName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, imageTemplateName, options },
                spec: deleteOperationSpec$1
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Delete a virtual machine image template
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, imageTemplateName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, imageTemplateName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Create artifacts from a existing image template
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param options The options parameters.
     */
    beginRun(resourceGroupName, imageTemplateName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, imageTemplateName, options },
                spec: runOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create artifacts from a existing image template
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param options The options parameters.
     */
    beginRunAndWait(resourceGroupName, imageTemplateName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginRun(resourceGroupName, imageTemplateName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Cancel the long running image build based on the image template
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param options The options parameters.
     */
    beginCancel(resourceGroupName, imageTemplateName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, imageTemplateName, options },
                spec: cancelOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Cancel the long running image build based on the image template
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param options The options parameters.
     */
    beginCancelAndWait(resourceGroupName, imageTemplateName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCancel(resourceGroupName, imageTemplateName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * List all run outputs for the specified Image Template resource
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param options The options parameters.
     */
    _listRunOutputs(resourceGroupName, imageTemplateName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, imageTemplateName, options }, listRunOutputsOperationSpec);
    }
    /**
     * Get the specified run output for the specified image template resource
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param runOutputName The name of the run output
     * @param options The options parameters.
     */
    getRunOutput(resourceGroupName, imageTemplateName, runOutputName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, imageTemplateName, runOutputName, options }, getRunOutputOperationSpec);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec$1);
    }
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName The name of the resource group.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    _listByResourceGroupNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, listByResourceGroupNextOperationSpec);
    }
    /**
     * ListRunOutputsNext
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param nextLink The nextLink from the previous successful call to the ListRunOutputs method.
     * @param options The options parameters.
     */
    _listRunOutputsNext(resourceGroupName, imageTemplateName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, imageTemplateName, nextLink, options }, listRunOutputsNextOperationSpec);
    }
}
// Operation Specifications
const serializer$2 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.VirtualMachineImages/imageTemplates",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ImageTemplateListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$2
};
const listByResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ImageTemplateListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const createOrUpdateOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates/{imageTemplateName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ImageTemplate
        },
        201: {
            bodyMapper: ImageTemplate
        },
        202: {
            bodyMapper: ImageTemplate
        },
        204: {
            bodyMapper: ImageTemplate
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        imageTemplateName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$2
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates/{imageTemplateName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: ImageTemplate
        },
        201: {
            bodyMapper: ImageTemplate
        },
        202: {
            bodyMapper: ImageTemplate
        },
        204: {
            bodyMapper: ImageTemplate
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters1,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        imageTemplateName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$2
};
const getOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates/{imageTemplateName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ImageTemplate
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        imageTemplateName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const deleteOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates/{imageTemplateName}",
    httpMethod: "DELETE",
    responses: {
        200: {
            headersMapper: VirtualMachineImageTemplatesDeleteHeaders
        },
        201: {
            headersMapper: VirtualMachineImageTemplatesDeleteHeaders
        },
        202: {
            headersMapper: VirtualMachineImageTemplatesDeleteHeaders
        },
        204: {
            headersMapper: VirtualMachineImageTemplatesDeleteHeaders
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        imageTemplateName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const runOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates/{imageTemplateName}/run",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        imageTemplateName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const cancelOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates/{imageTemplateName}/cancel",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        imageTemplateName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listRunOutputsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates/{imageTemplateName}/runOutputs",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: RunOutputCollection
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        imageTemplateName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const getRunOutputOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates/{imageTemplateName}/runOutputs/{runOutputName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: RunOutput
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        imageTemplateName,
        runOutputName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ImageTemplateListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listByResourceGroupNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ImageTemplateListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listRunOutputsNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: RunOutputCollection
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        imageTemplateName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$2
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Triggers operations. */
class TriggersImpl {
    /**
     * Initialize a new instance of the class Triggers class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List all triggers for the specified Image Template resource
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param options The options parameters.
     */
    listByImageTemplate(resourceGroupName, imageTemplateName, options) {
        const iter = this.listByImageTemplatePagingAll(resourceGroupName, imageTemplateName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByImageTemplatePagingPage(resourceGroupName, imageTemplateName, options, settings);
            }
        };
    }
    listByImageTemplatePagingPage(resourceGroupName, imageTemplateName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByImageTemplatePagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByImageTemplate(resourceGroupName, imageTemplateName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByImageTemplateNext(resourceGroupName, imageTemplateName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByImageTemplatePagingAll(resourceGroupName, imageTemplateName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByImageTemplatePagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByImageTemplatePagingPage(resourceGroupName, imageTemplateName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List all triggers for the specified Image Template resource
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param options The options parameters.
     */
    _listByImageTemplate(resourceGroupName, imageTemplateName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, imageTemplateName, options }, listByImageTemplateOperationSpec);
    }
    /**
     * Get the specified trigger for the specified image template resource
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param triggerName The name of the trigger
     * @param options The options parameters.
     */
    get(resourceGroupName, imageTemplateName, triggerName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, imageTemplateName, triggerName, options }, getOperationSpec);
    }
    /**
     * Create or update a trigger for the specified virtual machine image template
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param triggerName The name of the trigger
     * @param parameters Parameters supplied to the CreateTrigger operation
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, imageTemplateName, triggerName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    imageTemplateName,
                    triggerName,
                    parameters,
                    options
                },
                spec: createOrUpdateOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create or update a trigger for the specified virtual machine image template
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param triggerName The name of the trigger
     * @param parameters Parameters supplied to the CreateTrigger operation
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, imageTemplateName, triggerName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, imageTemplateName, triggerName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Delete a trigger for the specified virtual machine image template
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param triggerName The name of the trigger
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, imageTemplateName, triggerName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, imageTemplateName, triggerName, options },
                spec: deleteOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Delete a trigger for the specified virtual machine image template
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param triggerName The name of the trigger
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, imageTemplateName, triggerName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, imageTemplateName, triggerName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * ListByImageTemplateNext
     * @param resourceGroupName The name of the resource group.
     * @param imageTemplateName The name of the image Template
     * @param nextLink The nextLink from the previous successful call to the ListByImageTemplate method.
     * @param options The options parameters.
     */
    _listByImageTemplateNext(resourceGroupName, imageTemplateName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, imageTemplateName, nextLink, options }, listByImageTemplateNextOperationSpec);
    }
}
// Operation Specifications
const serializer$1 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByImageTemplateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates/{imageTemplateName}/triggers",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: TriggerCollection
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        imageTemplateName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates/{imageTemplateName}/triggers/{triggerName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Trigger
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        imageTemplateName,
        triggerName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates/{imageTemplateName}/triggers/{triggerName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Trigger
        },
        201: {
            bodyMapper: Trigger
        },
        202: {
            bodyMapper: Trigger
        },
        204: {
            bodyMapper: Trigger
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters2,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        imageTemplateName,
        triggerName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$1
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates/{imageTemplateName}/triggers/{triggerName}",
    httpMethod: "DELETE",
    responses: {
        200: {
            headersMapper: TriggersDeleteHeaders
        },
        201: {
            headersMapper: TriggersDeleteHeaders
        },
        202: {
            headersMapper: TriggersDeleteHeaders
        },
        204: {
            headersMapper: TriggersDeleteHeaders
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        imageTemplateName,
        triggerName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listByImageTemplateNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: TriggerCollection
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        imageTemplateName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$1
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Operations operations. */
class OperationsImpl {
    /**
     * Initialize a new instance of the class Operations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists available operations for the Microsoft.VirtualMachineImages provider
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists available operations for the Microsoft.VirtualMachineImages provider
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/providers/Microsoft.VirtualMachineImages/operations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [$host, nextLink],
    headerParameters: [accept],
    serializer
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class ImageBuilderClient extends coreClient__namespace.ServiceClient {
    /**
     * Initializes a new instance of the ImageBuilderClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription.
     *                       The subscription Id forms part of the URI for every service call.
     * @param options The parameter options
     */
    constructor(credentials, subscriptionId, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        if (subscriptionId === undefined) {
            throw new Error("'subscriptionId' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-imagebuilder/4.0.0`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName
            });
            this.pipeline.addPolicy(coreRestPipeline__namespace.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient__namespace.authorizeRequestOnClaimChallenge
                }
            }));
        }
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.apiVersion = options.apiVersion || "2023-07-01";
        this.virtualMachineImageTemplates = new VirtualMachineImageTemplatesImpl(this);
        this.triggers = new TriggersImpl(this);
        this.operations = new OperationsImpl(this);
        this.addCustomApiVersionPolicy(options.apiVersion);
    }
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    addCustomApiVersionPolicy(apiVersion) {
        if (!apiVersion) {
            return;
        }
        const apiVersionPolicy = {
            name: "CustomApiVersionPolicy",
            sendRequest(request, next) {
                return tslib.__awaiter(this, void 0, void 0, function* () {
                    const param = request.url.split("?");
                    if (param.length > 1) {
                        const newParams = param[1].split("&").map((item) => {
                            if (item.indexOf("api-version") > -1) {
                                return "api-version=" + apiVersion;
                            }
                            else {
                                return item;
                            }
                        });
                        request.url = param[0] + "?" + newParams.join("&");
                    }
                    return next(request);
                });
            }
        };
        this.pipeline.addPolicy(apiVersionPolicy);
    }
}

exports.ImageBuilderClient = ImageBuilderClient;
exports.getContinuationToken = getContinuationToken;
//# sourceMappingURL=index.js.map
