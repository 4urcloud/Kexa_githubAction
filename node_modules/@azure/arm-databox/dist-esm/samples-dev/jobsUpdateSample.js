/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { DataBoxManagementClient } from "@azure/arm-databox";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to Updates the properties of an existing job.
 *
 * @summary Updates the properties of an existing job.
 * x-ms-original-file: specification/databox/resource-manager/Microsoft.DataBox/stable/2022-12-01/examples/JobsPatch.json
 */
function jobsPatch() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["DATABOX_SUBSCRIPTION_ID"] || "YourSubscriptionId";
        const resourceGroupName = process.env["DATABOX_RESOURCE_GROUP"] || "YourResourceGroupName";
        const jobName = "TestJobName1";
        const jobResourceUpdateParameter = {
            details: {
                contactDetails: {
                    contactName: "XXXX XXXX",
                    emailList: ["xxxx@xxxx.xxx"],
                    phone: "0000000000",
                    phoneExtension: ""
                },
                shippingAddress: {
                    addressType: "Commercial",
                    city: "XXXX XXXX",
                    companyName: "XXXX XXXX",
                    country: "XX",
                    postalCode: "00000",
                    stateOrProvince: "XX",
                    streetAddress1: "XXXX XXXX",
                    streetAddress2: "XXXX XXXX"
                }
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new DataBoxManagementClient(credential, subscriptionId);
        const result = yield client.jobs.beginUpdateAndWait(resourceGroupName, jobName, jobResourceUpdateParameter);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Updates the properties of an existing job.
 *
 * @summary Updates the properties of an existing job.
 * x-ms-original-file: specification/databox/resource-manager/Microsoft.DataBox/stable/2022-12-01/examples/JobsPatchCmk.json
 */
function jobsPatchCmk() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["DATABOX_SUBSCRIPTION_ID"] || "YourSubscriptionId";
        const resourceGroupName = process.env["DATABOX_RESOURCE_GROUP"] || "YourResourceGroupName";
        const jobName = "TestJobName1";
        const jobResourceUpdateParameter = {
            details: {
                keyEncryptionKey: {
                    kekType: "CustomerManaged",
                    kekUrl: "https://xxx.xxx.xx",
                    kekVaultResourceID: "/subscriptions/YourSubscriptionId/resourceGroups/YourResourceGroupName/providers/Microsoft.KeyVault/vaults/YourKeyVaultName"
                }
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new DataBoxManagementClient(credential, subscriptionId);
        const result = yield client.jobs.beginUpdateAndWait(resourceGroupName, jobName, jobResourceUpdateParameter);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Updates the properties of an existing job.
 *
 * @summary Updates the properties of an existing job.
 * x-ms-original-file: specification/databox/resource-manager/Microsoft.DataBox/stable/2022-12-01/examples/JobsPatchSystemAssignedToUserAssigned.json
 */
function jobsPatchSystemAssignedToUserAssigned() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["DATABOX_SUBSCRIPTION_ID"] || "YourSubscriptionId";
        const resourceGroupName = process.env["DATABOX_RESOURCE_GROUP"] || "YourResourceGroupName";
        const jobName = "TestJobName1";
        const jobResourceUpdateParameter = {
            identity: {
                type: "SystemAssigned,UserAssigned",
                userAssignedIdentities: {
                    "/subscriptions/YourSubscriptionId/resourceGroups/YourResourceGroupName/providers/MicrosoftManagedIdentity/userAssignedIdentities/testIdentity": {}
                }
            },
            details: {
                keyEncryptionKey: {
                    identityProperties: {
                        type: "UserAssigned",
                        userAssigned: {
                            resourceId: "/subscriptions/YourSubscriptionId/resourceGroups/YourResourceGroupName/providers/Microsoft.ManagedIdentity/userAssignedIdentities/testIdentity"
                        }
                    },
                    kekType: "CustomerManaged",
                    kekUrl: "https://xxx.xxx.xx",
                    kekVaultResourceID: "/subscriptions/YourSubscriptionId/resourceGroups/YourResourceGroupName/providers/Microsoft.KeyVault/vaults/YourKeyVaultName"
                }
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new DataBoxManagementClient(credential, subscriptionId);
        const result = yield client.jobs.beginUpdateAndWait(resourceGroupName, jobName, jobResourceUpdateParameter);
        console.log(result);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        jobsPatch();
        jobsPatchCmk();
        jobsPatchSystemAssignedToUserAssigned();
    });
}
main().catch(console.error);
//# sourceMappingURL=jobsUpdateSample.js.map