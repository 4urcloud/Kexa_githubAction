/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { DataBoxManagementClient } from "@azure/arm-databox";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to Creates a new job with the specified parameters. Existing job cannot be updated with this API and should instead be updated with the Update job API.
 *
 * @summary Creates a new job with the specified parameters. Existing job cannot be updated with this API and should instead be updated with the Update job API.
 * x-ms-original-file: specification/databox/resource-manager/Microsoft.DataBox/stable/2022-12-01/examples/JobsCreate.json
 */
function jobsCreate() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["DATABOX_SUBSCRIPTION_ID"] || "YourSubscriptionId";
        const resourceGroupName = process.env["DATABOX_RESOURCE_GROUP"] || "YourResourceGroupName";
        const jobName = "TestJobName1";
        const jobResource = {
            location: "westus",
            sku: { name: "DataBox" },
            transferType: "ImportToAzure",
            details: {
                contactDetails: {
                    contactName: "XXXX XXXX",
                    emailList: ["xxxx@xxxx.xxx"],
                    phone: "0000000000",
                    phoneExtension: ""
                },
                dataImportDetails: [
                    {
                        accountDetails: {
                            dataAccountType: "StorageAccount",
                            storageAccountId: "/subscriptions/YourSubscriptionId/resourcegroups/YourResourceGroupName/providers/Microsoft.Storage/storageAccounts/YourStorageAccountName"
                        }
                    }
                ],
                jobDetailsType: "DataBox",
                shippingAddress: {
                    addressType: "Commercial",
                    city: "XXXX XXXX",
                    companyName: "XXXX XXXX",
                    country: "XX",
                    postalCode: "00000",
                    stateOrProvince: "XX",
                    streetAddress1: "XXXX XXXX",
                    streetAddress2: "XXXX XXXX"
                }
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new DataBoxManagementClient(credential, subscriptionId);
        const result = yield client.jobs.beginCreateAndWait(resourceGroupName, jobName, jobResource);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates a new job with the specified parameters. Existing job cannot be updated with this API and should instead be updated with the Update job API.
 *
 * @summary Creates a new job with the specified parameters. Existing job cannot be updated with this API and should instead be updated with the Update job API.
 * x-ms-original-file: specification/databox/resource-manager/Microsoft.DataBox/stable/2022-12-01/examples/JobsCreateDevicePassword.json
 */
function jobsCreateDevicePassword() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["DATABOX_SUBSCRIPTION_ID"] || "YourSubscriptionId";
        const resourceGroupName = process.env["DATABOX_RESOURCE_GROUP"] || "YourResourceGroupName";
        const jobName = "TestJobName1";
        const jobResource = {
            location: "westus",
            sku: { name: "DataBox" },
            transferType: "ImportToAzure",
            details: {
                contactDetails: {
                    contactName: "XXXX XXXX",
                    emailList: ["xxxx@xxxx.xxx"],
                    phone: "0000000000",
                    phoneExtension: ""
                },
                dataImportDetails: [
                    {
                        accountDetails: {
                            dataAccountType: "StorageAccount",
                            sharePassword: "<sharePassword>",
                            storageAccountId: "/subscriptions/YourSubscriptionId/resourceGroups/YourResourceGroupName/providers/Microsoft.Storage/storageAccounts/YourStorageAccountName"
                        }
                    }
                ],
                devicePassword: "<devicePassword>",
                jobDetailsType: "DataBox",
                shippingAddress: {
                    addressType: "Commercial",
                    city: "XXXX XXXX",
                    companyName: "XXXX XXXX",
                    country: "XX",
                    postalCode: "00000",
                    stateOrProvince: "XX",
                    streetAddress1: "XXXX XXXX",
                    streetAddress2: "XXXX XXXX"
                }
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new DataBoxManagementClient(credential, subscriptionId);
        const result = yield client.jobs.beginCreateAndWait(resourceGroupName, jobName, jobResource);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates a new job with the specified parameters. Existing job cannot be updated with this API and should instead be updated with the Update job API.
 *
 * @summary Creates a new job with the specified parameters. Existing job cannot be updated with this API and should instead be updated with the Update job API.
 * x-ms-original-file: specification/databox/resource-manager/Microsoft.DataBox/stable/2022-12-01/examples/JobsCreateDoubleEncryption.json
 */
function jobsCreateDoubleEncryption() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["DATABOX_SUBSCRIPTION_ID"] || "YourSubscriptionId";
        const resourceGroupName = process.env["DATABOX_RESOURCE_GROUP"] || "YourResourceGroupName";
        const jobName = "TestJobName1";
        const jobResource = {
            location: "westus",
            sku: { name: "DataBox" },
            transferType: "ImportToAzure",
            details: {
                contactDetails: {
                    contactName: "XXXX XXXX",
                    emailList: ["xxxx@xxxx.xxx"],
                    phone: "0000000000",
                    phoneExtension: ""
                },
                dataImportDetails: [
                    {
                        accountDetails: {
                            dataAccountType: "StorageAccount",
                            storageAccountId: "/subscriptions/YourSubscriptionId/resourcegroups/YourResourceGroupName/providers/Microsoft.Storage/storageAccounts/YourStorageAccountName"
                        }
                    }
                ],
                jobDetailsType: "DataBox",
                preferences: { encryptionPreferences: { doubleEncryption: "Enabled" } },
                shippingAddress: {
                    addressType: "Commercial",
                    city: "XXXX XXXX",
                    companyName: "XXXX XXXX",
                    country: "XX",
                    postalCode: "00000",
                    stateOrProvince: "XX",
                    streetAddress1: "XXXX XXXX",
                    streetAddress2: "XXXX XXXX"
                }
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new DataBoxManagementClient(credential, subscriptionId);
        const result = yield client.jobs.beginCreateAndWait(resourceGroupName, jobName, jobResource);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates a new job with the specified parameters. Existing job cannot be updated with this API and should instead be updated with the Update job API.
 *
 * @summary Creates a new job with the specified parameters. Existing job cannot be updated with this API and should instead be updated with the Update job API.
 * x-ms-original-file: specification/databox/resource-manager/Microsoft.DataBox/stable/2022-12-01/examples/JobsCreateExport.json
 */
function jobsCreateExport() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["DATABOX_SUBSCRIPTION_ID"] || "YourSubscriptionId";
        const resourceGroupName = process.env["DATABOX_RESOURCE_GROUP"] || "YourResourceGroupName";
        const jobName = "TestJobName1";
        const jobResource = {
            location: "westus",
            sku: { name: "DataBox" },
            transferType: "ExportFromAzure",
            details: {
                contactDetails: {
                    contactName: "XXXX XXXX",
                    emailList: ["xxxx@xxxx.xxx"],
                    phone: "0000000000",
                    phoneExtension: ""
                },
                dataExportDetails: [
                    {
                        accountDetails: {
                            dataAccountType: "StorageAccount",
                            storageAccountId: "/subscriptions/YourSubscriptionId/resourceGroups/YourResourceGroupName/providers/Microsoft.Storage/storageAccounts/YourStorageAccountName"
                        },
                        transferConfiguration: {
                            transferAllDetails: {
                                include: {
                                    dataAccountType: "StorageAccount",
                                    transferAllBlobs: true,
                                    transferAllFiles: true
                                }
                            },
                            transferConfigurationType: "TransferAll"
                        }
                    }
                ],
                jobDetailsType: "DataBox",
                shippingAddress: {
                    addressType: "Commercial",
                    city: "XXXX XXXX",
                    companyName: "XXXX XXXX",
                    country: "XX",
                    postalCode: "00000",
                    stateOrProvince: "XX",
                    streetAddress1: "XXXX XXXX",
                    streetAddress2: "XXXX XXXX"
                }
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new DataBoxManagementClient(credential, subscriptionId);
        const result = yield client.jobs.beginCreateAndWait(resourceGroupName, jobName, jobResource);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates a new job with the specified parameters. Existing job cannot be updated with this API and should instead be updated with the Update job API.
 *
 * @summary Creates a new job with the specified parameters. Existing job cannot be updated with this API and should instead be updated with the Update job API.
 * x-ms-original-file: specification/databox/resource-manager/Microsoft.DataBox/stable/2022-12-01/examples/JobsCreateWithUserAssignedIdentity.json
 */
function jobsCreateWithUserAssignedIdentity() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["DATABOX_SUBSCRIPTION_ID"] || "YourSubscriptionId";
        const resourceGroupName = process.env["DATABOX_RESOURCE_GROUP"] || "YourResourceGroupName";
        const jobName = "TestJobName1";
        const jobResource = {
            identity: {
                type: "UserAssigned",
                userAssignedIdentities: {
                    "/subscriptions/YourSubscriptionId/resourceGroups/YourResourceGroupName/providers/MicrosoftManagedIdentity/userAssignedIdentities/testIdentity": {}
                }
            },
            location: "westus",
            sku: { name: "DataBox" },
            transferType: "ImportToAzure",
            details: {
                contactDetails: {
                    contactName: "XXXX XXXX",
                    emailList: ["xxxx@xxxx.xxx"],
                    phone: "0000000000",
                    phoneExtension: ""
                },
                dataImportDetails: [
                    {
                        accountDetails: {
                            dataAccountType: "StorageAccount",
                            storageAccountId: "/subscriptions/YourSubscriptionId/resourceGroups/YourResourceGroupName/providers/Microsoft.Storage/storageAccounts/YourStorageAccountName"
                        }
                    }
                ],
                jobDetailsType: "DataBox",
                shippingAddress: {
                    addressType: "Commercial",
                    city: "XXXX XXXX",
                    companyName: "XXXX XXXX",
                    country: "XX",
                    postalCode: "00000",
                    stateOrProvince: "XX",
                    streetAddress1: "XXXX XXXX",
                    streetAddress2: "XXXX XXXX"
                }
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new DataBoxManagementClient(credential, subscriptionId);
        const result = yield client.jobs.beginCreateAndWait(resourceGroupName, jobName, jobResource);
        console.log(result);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        jobsCreate();
        jobsCreateDevicePassword();
        jobsCreateDoubleEncryption();
        jobsCreateExport();
        jobsCreateWithUserAssignedIdentity();
    });
}
main().catch(console.error);
//# sourceMappingURL=jobsCreateSample.js.map