/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from "tslib";
import { setContinuationToken } from "../pagingHelper";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/// <reference lib="esnext.asynciterable" />
/** Class containing Service operations. */
export class ServiceImpl {
    /**
     * Initialize a new instance of the class Service class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * This method provides the list of available skus for the given subscription, resource group and
     * location.
     * @param resourceGroupName The Resource Group Name
     * @param location The location of the resource
     * @param availableSkuRequest Filters for showing the available skus.
     * @param options The options parameters.
     */
    listAvailableSkusByResourceGroup(resourceGroupName, location, availableSkuRequest, options) {
        const iter = this.listAvailableSkusByResourceGroupPagingAll(resourceGroupName, location, availableSkuRequest, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listAvailableSkusByResourceGroupPagingPage(resourceGroupName, location, availableSkuRequest, options, settings);
            }
        };
    }
    listAvailableSkusByResourceGroupPagingPage(resourceGroupName, location, availableSkuRequest, options, settings) {
        return __asyncGenerator(this, arguments, function* listAvailableSkusByResourceGroupPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listAvailableSkusByResourceGroup(resourceGroupName, location, availableSkuRequest, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listAvailableSkusByResourceGroupNext(resourceGroupName, location, availableSkuRequest, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listAvailableSkusByResourceGroupPagingAll(resourceGroupName, location, availableSkuRequest, options) {
        return __asyncGenerator(this, arguments, function* listAvailableSkusByResourceGroupPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.listAvailableSkusByResourceGroupPagingPage(resourceGroupName, location, availableSkuRequest, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield __await(yield* __asyncDelegator(__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * This method provides the list of available skus for the given subscription, resource group and
     * location.
     * @param resourceGroupName The Resource Group Name
     * @param location The location of the resource
     * @param availableSkuRequest Filters for showing the available skus.
     * @param options The options parameters.
     */
    _listAvailableSkusByResourceGroup(resourceGroupName, location, availableSkuRequest, options) {
        return this.client.sendOperationRequest({ resourceGroupName, location, availableSkuRequest, options }, listAvailableSkusByResourceGroupOperationSpec);
    }
    /**
     * [DEPRECATED NOTICE: This operation will soon be removed]. This method validates the customer
     * shipping address and provide alternate addresses if any.
     * @param location The location of the resource
     * @param validateAddress Shipping address of the customer.
     * @param options The options parameters.
     */
    validateAddress(location, validateAddress, options) {
        return this.client.sendOperationRequest({ location, validateAddress, options }, validateAddressOperationSpec);
    }
    /**
     * This method does all necessary pre-job creation validation under resource group.
     * @param resourceGroupName The Resource Group Name
     * @param location The location of the resource
     * @param validationRequest Inputs of the customer.
     * @param options The options parameters.
     */
    validateInputsByResourceGroup(resourceGroupName, location, validationRequest, options) {
        return this.client.sendOperationRequest({ resourceGroupName, location, validationRequest, options }, validateInputsByResourceGroupOperationSpec);
    }
    /**
     * This method does all necessary pre-job creation validation under subscription.
     * @param location The location of the resource
     * @param validationRequest Inputs of the customer.
     * @param options The options parameters.
     */
    validateInputs(location, validationRequest, options) {
        return this.client.sendOperationRequest({ location, validationRequest, options }, validateInputsOperationSpec);
    }
    /**
     * This API provides configuration details specific to given region/location at Subscription level.
     * @param location The location of the resource
     * @param regionConfigurationRequest Request body to get the configuration for the region.
     * @param options The options parameters.
     */
    regionConfiguration(location, regionConfigurationRequest, options) {
        return this.client.sendOperationRequest({ location, regionConfigurationRequest, options }, regionConfigurationOperationSpec);
    }
    /**
     * This API provides configuration details specific to given region/location at Resource group level.
     * @param resourceGroupName The Resource Group Name
     * @param location The location of the resource
     * @param regionConfigurationRequest Request body to get the configuration for the region at resource
     *                                   group level.
     * @param options The options parameters.
     */
    regionConfigurationByResourceGroup(resourceGroupName, location, regionConfigurationRequest, options) {
        return this.client.sendOperationRequest({ resourceGroupName, location, regionConfigurationRequest, options }, regionConfigurationByResourceGroupOperationSpec);
    }
    /**
     * ListAvailableSkusByResourceGroupNext
     * @param resourceGroupName The Resource Group Name
     * @param location The location of the resource
     * @param availableSkuRequest Filters for showing the available skus.
     * @param nextLink The nextLink from the previous successful call to the
     *                 ListAvailableSkusByResourceGroup method.
     * @param options The options parameters.
     */
    _listAvailableSkusByResourceGroupNext(resourceGroupName, location, availableSkuRequest, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, location, availableSkuRequest, nextLink, options }, listAvailableSkusByResourceGroupNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listAvailableSkusByResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/locations/{location}/availableSkus",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.AvailableSkusResult
        },
        default: {
            bodyMapper: Mappers.ApiError
        }
    },
    requestBody: Parameters.availableSkuRequest,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.location
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const validateAddressOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.DataBox/locations/{location}/validateAddress",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.AddressValidationOutput
        },
        default: {
            bodyMapper: Mappers.ApiError
        }
    },
    requestBody: Parameters.validateAddress,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.location
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const validateInputsByResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/locations/{location}/validateInputs",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.ValidationResponse
        },
        default: {
            bodyMapper: Mappers.ApiError
        }
    },
    requestBody: Parameters.validationRequest,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.location
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const validateInputsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.DataBox/locations/{location}/validateInputs",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.ValidationResponse
        },
        default: {
            bodyMapper: Mappers.ApiError
        }
    },
    requestBody: Parameters.validationRequest,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.location
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const regionConfigurationOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.DataBox/locations/{location}/regionConfiguration",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.RegionConfigurationResponse
        },
        default: {
            bodyMapper: Mappers.ApiError
        }
    },
    requestBody: Parameters.regionConfigurationRequest,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.location
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const regionConfigurationByResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/locations/{location}/regionConfiguration",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.RegionConfigurationResponse
        },
        default: {
            bodyMapper: Mappers.ApiError
        }
    },
    requestBody: Parameters.regionConfigurationRequest,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.location
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const listAvailableSkusByResourceGroupNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.AvailableSkusResult
        },
        default: {
            bodyMapper: Mappers.ApiError
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.nextLink,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.location
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
//# sourceMappingURL=service.js.map