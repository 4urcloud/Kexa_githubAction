/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { MarkDevicesShippedRequest as MarkDevicesShippedRequestMapper, JobResource as JobResourceMapper, JobResourceUpdateParameter as JobResourceUpdateParameterMapper, ShipmentPickUpRequest as ShipmentPickUpRequestMapper, CancellationReason as CancellationReasonMapper, MitigateJobRequest as MitigateJobRequestMapper, AvailableSkuRequest as AvailableSkuRequestMapper, ValidateAddress as ValidateAddressMapper, ValidationRequest as ValidationRequestMapper, RegionConfigurationRequest as RegionConfigurationRequestMapper } from "../models/mappers";
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2022-12-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const skipToken = {
    parameterPath: ["options", "skipToken"],
    mapper: {
        serializedName: "$skipToken",
        type: {
            name: "String"
        }
    }
};
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export const markDevicesShippedRequest = {
    parameterPath: "markDevicesShippedRequest",
    mapper: MarkDevicesShippedRequestMapper
};
export const jobName = {
    parameterPath: "jobName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[-\\w\\.]+$"),
            MaxLength: 24,
            MinLength: 3
        },
        serializedName: "jobName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const expand = {
    parameterPath: ["options", "expand"],
    mapper: {
        serializedName: "$expand",
        type: {
            name: "String"
        }
    }
};
export const jobResource = {
    parameterPath: "jobResource",
    mapper: JobResourceMapper
};
export const jobResourceUpdateParameter = {
    parameterPath: "jobResourceUpdateParameter",
    mapper: JobResourceUpdateParameterMapper
};
export const ifMatch = {
    parameterPath: ["options", "ifMatch"],
    mapper: {
        serializedName: "If-Match",
        type: {
            name: "String"
        }
    }
};
export const shipmentPickUpRequest = {
    parameterPath: "shipmentPickUpRequest",
    mapper: ShipmentPickUpRequestMapper
};
export const cancellationReason = {
    parameterPath: "cancellationReason",
    mapper: CancellationReasonMapper
};
export const mitigateJobRequest = {
    parameterPath: "mitigateJobRequest",
    mapper: MitigateJobRequestMapper
};
export const availableSkuRequest = {
    parameterPath: "availableSkuRequest",
    mapper: AvailableSkuRequestMapper
};
export const location = {
    parameterPath: "location",
    mapper: {
        serializedName: "location",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const validateAddress = {
    parameterPath: "validateAddress",
    mapper: ValidateAddressMapper
};
export const validationRequest = {
    parameterPath: "validationRequest",
    mapper: ValidationRequestMapper
};
export const regionConfigurationRequest = {
    parameterPath: "regionConfigurationRequest",
    mapper: RegionConfigurationRequestMapper
};
//# sourceMappingURL=parameters.js.map