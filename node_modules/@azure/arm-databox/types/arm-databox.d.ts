import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { OperationState } from '@azure/core-lro';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { SimplePollerLike } from '@azure/core-lro';

/** Defines values for AccessProtocol. */
export declare type AccessProtocol = "SMB" | "NFS";

/** Credential details of the account. */
export declare interface AccountCredentialDetails {
    /**
     * Name of the account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly accountName?: string;
    /**
     * Type of the account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dataAccountType?: DataAccountType;
    /**
     * Connection string of the account endpoint to use the account as a storage endpoint on the device.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly accountConnectionString?: string;
    /**
     * Per share level unencrypted access credentials.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly shareCredentialDetails?: ShareCredentialDetails[];
}

/** This class represents additional info which Resource Providers pass when an error occurs. */
export declare interface AdditionalErrorInfo {
    /** Additional information of the type of error. */
    info?: Record<string, unknown>;
    /** Type of error (e.g. CustomerIntervention, PolicyViolation, SecurityViolation). */
    type?: string;
}

/** Defines values for AddressType. */
export declare type AddressType = "None" | "Residential" | "Commercial";

/** Output of the address validation api. */
export declare interface AddressValidationOutput {
    /** Identifies the type of validation response. */
    validationType?: ValidationInputDiscriminator;
    /**
     * Error code and message of validation response.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly error?: CloudError;
    /**
     * The address validation status.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly validationStatus?: AddressValidationStatus;
    /**
     * List of alternate addresses.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly alternateAddresses?: ShippingAddress[];
}

/** The address validation output. */
export declare interface AddressValidationProperties extends ValidationInputResponse {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    validationType: "ValidateAddress";
    /**
     * The address validation status.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly validationStatus?: AddressValidationStatus;
    /**
     * List of alternate addresses.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly alternateAddresses?: ShippingAddress[];
}

/** Defines values for AddressValidationStatus. */
export declare type AddressValidationStatus = "Valid" | "Invalid" | "Ambiguous";

export declare interface ApiError {
    error: ErrorDetail;
}

/** The Network Adapter configuration of a DataBox. */
export declare interface ApplianceNetworkConfiguration {
    /**
     * Name of the network.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Mac Address.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly macAddress?: string;
}

/** Base class for all objects under resource. */
export declare interface ArmBaseObject {
    /**
     * Name of the object.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Id of the object.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Type of the object.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
}

/** The filters for showing the available skus. */
export declare interface AvailableSkuRequest {
    /** Type of the transfer. */
    transferType: TransferType;
    /** ISO country code. Country for hardware shipment. For codes check: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements */
    country: string;
    /** Location for data transfer. For locations check: https://management.azure.com/subscriptions/SUBSCRIPTIONID/locations?api-version=2018-01-01 */
    location: string;
    /** Sku Names to filter for available skus */
    skuNames?: SkuName[];
}

/** The available skus operation response. */
export declare interface AvailableSkusResult {
    /**
     * List of available skus.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: SkuInformation[];
    /** Link for the next set of skus. */
    nextLink?: string;
}

/** Filter details to transfer Azure files */
export declare interface AzureFileFilterDetails {
    /** Prefix list of the Azure files to be transferred. */
    filePrefixList?: string[];
    /** List of full path of the files to be transferred. */
    filePathList?: string[];
    /** List of file shares to be transferred. */
    fileShareList?: string[];
}

/** Filter details to transfer Azure Blobs */
export declare interface BlobFilterDetails {
    /** Prefix list of the Azure blobs to be transferred. */
    blobPrefixList?: string[];
    /** List of full path of the blobs to be transferred. */
    blobPathList?: string[];
    /** List of blob containers to be transferred. */
    containerList?: string[];
}

/** Reason for cancellation. */
export declare interface CancellationReason {
    /** Reason for cancellation. */
    reason: string;
}

/** Defines values for ClassDiscriminator. */
export declare type ClassDiscriminator = "DataBox" | "DataBoxDisk" | "DataBoxHeavy" | "DataBoxCustomerDisk";

/** Provides additional information about an http error response. */
export declare interface CloudError {
    /**
     * Gets or sets additional error info.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalInfo?: AdditionalErrorInfo[];
    /** Error code. */
    code?: string;
    /**
     * Gets or sets details for the error.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly details?: CloudError[];
    /** The error message parsed from the body of the http error response. */
    message?: string;
    /** Gets or sets the target of the error. */
    target?: string;
}

/** Contact Details. */
export declare interface ContactDetails {
    /** Contact name of the person. */
    contactName: string;
    /** Phone number of the contact person. */
    phone: string;
    /** Phone extension number of the contact person. */
    phoneExtension?: string;
    /** Mobile number of the contact person. */
    mobile?: string;
    /** List of Email-ids to be notified about job progress. */
    emailList: string[];
    /** Notification preference for a job stage. */
    notificationPreference?: NotificationPreference[];
}

/** Contact Info. */
export declare interface ContactInfo {
    /** Contact name of the person. */
    contactName: string;
    /** Phone number of the contact person. */
    phone: string;
    /** Phone extension number of the contact person. */
    phoneExtension?: string;
    /** Mobile number of the contact person. */
    mobile?: string;
}

/** Details for log generated during copy. */
export declare interface CopyLogDetails {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    copyLogDetailsType: "DataBox" | "DataBoxCustomerDisk" | "DataBoxDisk" | "DataBoxHeavy";
}

export declare type CopyLogDetailsUnion = CopyLogDetails | DataBoxAccountCopyLogDetails | DataBoxCustomerDiskCopyLogDetails | DataBoxDiskCopyLogDetails | DataBoxHeavyAccountCopyLogDetails;

/** Copy progress. */
export declare interface CopyProgress {
    /**
     * Name of the storage account. This will be empty for data account types other than storage account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly storageAccountName?: string;
    /**
     * Transfer type of data
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly transferType?: TransferType;
    /**
     * Data Account Type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dataAccountType?: DataAccountType;
    /**
     * Id of the account where the data needs to be uploaded.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly accountId?: string;
    /**
     * To indicate bytes transferred.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly bytesProcessed?: number;
    /**
     * Total amount of data to be processed by the job.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly totalBytesToProcess?: number;
    /**
     * Number of files processed
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly filesProcessed?: number;
    /**
     * Total files to process
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly totalFilesToProcess?: number;
    /**
     * Number of files not adhering to azure naming conventions which were processed by automatic renaming
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly invalidFilesProcessed?: number;
    /**
     * Total amount of data not adhering to azure naming conventions which were processed by automatic renaming
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly invalidFileBytesUploaded?: number;
    /**
     * Number of folders not adhering to azure naming conventions which were processed by automatic renaming
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly renamedContainerCount?: number;
    /**
     * Number of files which could not be copied
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly filesErroredOut?: number;
    /**
     * To indicate directories errored out in the job.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly directoriesErroredOut?: number;
    /**
     * To indicate directories renamed
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly invalidDirectoriesProcessed?: number;
    /**
     * To indicate if enumeration of data is in progress.
     * Until this is true, the TotalBytesToProcess may not be valid.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isEnumerationInProgress?: boolean;
    /**
     * Error, if any, in the stage
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly error?: CloudError;
    /**
     * Available actions on the job.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly actions?: CustomerResolutionCode[];
}

/**
 * Defines values for CopyStatus. \
 * {@link KnownCopyStatus} can be used interchangeably with CopyStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotStarted**: Data copy hasn't started yet. \
 * **InProgress**: Data copy is in progress. \
 * **Completed**: Data copy completed. \
 * **CompletedWithErrors**: Data copy completed with errors. \
 * **Failed**: Data copy failed. No data was copied. \
 * **NotReturned**: No copy triggered as device was not returned. \
 * **HardwareError**: The Device has hit hardware issues. \
 * **DeviceFormatted**: Data copy failed. The Device was formatted by user. \
 * **DeviceMetadataModified**: Data copy failed. Device metadata was modified by user. \
 * **StorageAccountNotAccessible**: Data copy failed. Storage Account was not accessible during copy. \
 * **UnsupportedData**: Data copy failed. The Device data content is not supported. \
 * **DriveNotReceived**: No copy triggered as device was not received. \
 * **UnsupportedDrive**: No copy triggered as device type is not supported. \
 * **OtherServiceError**: Copy failed due to service error. \
 * **OtherUserError**: Copy failed due to user error. \
 * **DriveNotDetected**: Copy failed due to disk detection error. \
 * **DriveCorrupted**: Copy failed due to corrupted drive. \
 * **MetadataFilesModifiedOrRemoved**: Copy failed due to modified or removed metadata files.
 */
export declare type CopyStatus = string;

/** It does all pre-job creation validations. */
export declare interface CreateJobValidations extends ValidationRequest {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    validationCategory: "JobCreationValidation";
}

/** Request to validate create order limit for current subscription. */
export declare interface CreateOrderLimitForSubscriptionValidationRequest extends ValidationInputRequest {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    validationType: "ValidateCreateOrderLimit";
    /** Device type to be used for the job. */
    deviceType: SkuName;
}

/** Properties of create order limit for subscription validation response. */
export declare interface CreateOrderLimitForSubscriptionValidationResponseProperties extends ValidationInputResponse {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    validationType: "ValidateCreateOrderLimit";
    /**
     * Create order limit validation status.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: ValidationStatus;
}

/** The secrets related to customer disk job. */
export declare interface CustomerDiskJobSecrets extends JobSecrets {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    jobSecretsType: "DataBoxCustomerDisk";
    /**
     * Contains the list of secrets object for that device.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly diskSecrets?: DiskSecret[];
    /**
     * Carrier Account Number of the customer
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly carrierAccountNumber?: string;
}

/** Defines values for CustomerResolutionCode. */
export declare type CustomerResolutionCode = "None" | "MoveToCleanUpDevice" | "Resume" | "Restart" | "ReachOutToOperation";

/** Account details of the data to be transferred */
export declare interface DataAccountDetails {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    dataAccountType: "ManagedDisk" | "StorageAccount";
    /** Password for all the shares to be created on the device. Should not be passed for TransferType:ExportFromAzure jobs. If this is not passed, the service will generate password itself. This will not be returned in Get Call. Password Requirements :  Password must be minimum of 12 and maximum of 64 characters. Password must have at least one uppercase alphabet, one number and one special character. Password cannot have the following characters : IilLoO0 Password can have only alphabets, numbers and these characters : @#\-$%^!+=;:_()]+ */
    sharePassword?: string;
}

export declare type DataAccountDetailsUnion = DataAccountDetails | ManagedDiskDetails | StorageAccountDetails;

/** Defines values for DataAccountType. */
export declare type DataAccountType = "StorageAccount" | "ManagedDisk";

/** Copy log details for a storage account of a DataBox job */
export declare interface DataBoxAccountCopyLogDetails extends CopyLogDetails {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    copyLogDetailsType: "DataBox";
    /**
     * Account name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly accountName?: string;
    /**
     * Link for copy logs.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly copyLogLink?: string;
    /**
     * Link for copy verbose logs. This will be set only when LogCollectionLevel is set to Verbose.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly copyVerboseLogLink?: string;
}

/** Copy Log Details for customer disk */
export declare interface DataBoxCustomerDiskCopyLogDetails extends CopyLogDetails {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    copyLogDetailsType: "DataBoxCustomerDisk";
    /**
     * Disk Serial Number.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly serialNumber?: string;
    /**
     * Link for copy error logs.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly errorLogLink?: string;
    /**
     * Link for copy verbose logs.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly verboseLogLink?: string;
}

/** DataBox CustomerDisk Copy Progress */
export declare interface DataBoxCustomerDiskCopyProgress extends CopyProgress {
    /**
     * Disk Serial Number.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly serialNumber?: string;
    /**
     * The Status of the copy
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly copyStatus?: CopyStatus;
}

/** Customer disk job details. */
export declare interface DataBoxCustomerDiskJobDetails extends JobDetails {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    jobDetailsType: "DataBoxCustomerDisk";
    /** Contains the map of disk serial number to the disk details for import jobs. */
    importDiskDetailsCollection?: {
        [propertyName: string]: ImportDiskDetails;
    };
    /**
     * Contains the map of disk serial number to the disk details for export jobs.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly exportDiskDetailsCollection?: {
        [propertyName: string]: ExportDiskDetails;
    };
    /**
     * Copy progress per disk.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly copyProgress?: DataBoxCustomerDiskCopyProgress[];
    /**
     * Delivery package shipping details.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly deliverToDcPackageDetails?: PackageCarrierInfo;
    /** Return package shipping details. */
    returnToCustomerPackageDetails: PackageCarrierDetails;
    /** Flag to indicate if disk manifest should be backed-up in the Storage Account. */
    enableManifestBackup?: boolean;
}

/** Copy Log Details for a disk */
export declare interface DataBoxDiskCopyLogDetails extends CopyLogDetails {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    copyLogDetailsType: "DataBoxDisk";
    /**
     * Disk Serial Number.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly diskSerialNumber?: string;
    /**
     * Link for copy error logs.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly errorLogLink?: string;
    /**
     * Link for copy verbose logs.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly verboseLogLink?: string;
}

/** DataBox Disk Copy Progress */
export declare interface DataBoxDiskCopyProgress {
    /**
     * The serial number of the disk
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly serialNumber?: string;
    /**
     * Bytes copied during the copy of disk.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly bytesCopied?: number;
    /**
     * Indicates the percentage completed for the copy of the disk.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly percentComplete?: number;
    /**
     * The Status of the copy
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: CopyStatus;
    /**
     * Error, if any, in the stage
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly error?: CloudError;
    /**
     * Available actions on the job.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly actions?: CustomerResolutionCode[];
}

/** Granular Copy Log Details for customer disk */
export declare interface DataBoxDiskGranularCopyLogDetails extends GranularCopyLogDetails {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    copyLogDetailsType: "DataBoxCustomerDisk";
    /**
     * Disk Serial Number.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly serialNumber?: string;
    /**
     * Account id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly accountId?: string;
    /**
     * Link for copy error logs.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly errorLogLink?: string;
    /**
     * Link for copy verbose logs.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly verboseLogLink?: string;
}

/** DataBox Disk Granular Copy Progress */
export declare interface DataBoxDiskGranularCopyProgress extends GranularCopyProgress {
    /**
     * Disk Serial Number.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly serialNumber?: string;
    /**
     * The Status of the copy
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly copyStatus?: CopyStatus;
}

/** DataBox Disk Job Details. */
export declare interface DataBoxDiskJobDetails extends JobDetails {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    jobDetailsType: "DataBoxDisk";
    /** User preference on what size disks are needed for the job. The map is from the disk size in TB to the count. Eg. {2,5} means 5 disks of 2 TB size. Key is string but will be checked against an int. */
    preferredDisks?: {
        [propertyName: string]: number;
    };
    /**
     * Copy progress per disk.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly copyProgress?: DataBoxDiskCopyProgress[];
    /**
     * Copy progress per disk.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly granularCopyProgress?: DataBoxDiskGranularCopyProgress[];
    /**
     * Copy progress per disk.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly granularCopyLogDetails?: DataBoxDiskGranularCopyLogDetails[];
    /**
     * Contains the map of disk serial number to the disk size being used for the job. Is returned only after the disks are shipped to the customer.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly disksAndSizeDetails?: {
        [propertyName: string]: number;
    };
    /** User entered passkey for DataBox Disk job. */
    passkey?: string;
}

/** The secrets related to disk job. */
export declare interface DataBoxDiskJobSecrets extends JobSecrets {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    jobSecretsType: "DataBoxDisk";
    /**
     * Contains the list of secrets object for that device.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly diskSecrets?: DiskSecret[];
    /**
     * PassKey for the disk Job.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly passKey?: string;
    /**
     * Whether passkey was provided by user.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isPasskeyUserDefined?: boolean;
}

/** Copy log details for a storage account for Databox heavy */
export declare interface DataBoxHeavyAccountCopyLogDetails extends CopyLogDetails {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    copyLogDetailsType: "DataBoxHeavy";
    /**
     * Account name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly accountName?: string;
    /**
     * Link for copy logs.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly copyLogLink?: string[];
    /**
     * Link for copy verbose logs. This will be set only when the LogCollectionLevel is set to verbose.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly copyVerboseLogLink?: string[];
}

/** Databox Heavy Device Job Details */
export declare interface DataBoxHeavyJobDetails extends JobDetails {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    jobDetailsType: "DataBoxHeavy";
    /**
     * Copy progress per account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly copyProgress?: CopyProgress[];
    /** Set Device password for unlocking Databox Heavy. Should not be passed for TransferType:ExportFromAzure jobs. If this is not passed, the service will generate password itself. This will not be returned in Get Call. Password Requirements :  Password must be minimum of 12 and maximum of 64 characters. Password must have at least one uppercase alphabet, one number and one special character. Password cannot have the following characters : IilLoO0 Password can have only alphabets, numbers and these characters : @#\-$%^!+=;:_()]+ */
    devicePassword?: string;
}

/** The secrets related to a databox heavy job. */
export declare interface DataBoxHeavyJobSecrets extends JobSecrets {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    jobSecretsType: "DataBoxHeavy";
    /**
     * Contains the list of secret objects for a databox heavy job.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly cabinetPodSecrets?: DataBoxHeavySecret[];
}

/** The secrets related to a databox heavy. */
export declare interface DataBoxHeavySecret {
    /**
     * Serial number of the assigned device.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly deviceSerialNumber?: string;
    /**
     * Password for out of the box experience on device.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly devicePassword?: string;
    /**
     * Network configuration of the appliance.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly networkConfigurations?: ApplianceNetworkConfiguration[];
    /**
     * The base 64 encoded public key to authenticate with the device
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly encodedValidationCertPubKey?: string;
    /**
     * Per account level access credentials.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly accountCredentialDetails?: AccountCredentialDetails[];
}

/** Databox Job Details */
export declare interface DataBoxJobDetails extends JobDetails {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    jobDetailsType: "DataBox";
    /**
     * Copy progress per storage account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly copyProgress?: CopyProgress[];
    /** Set Device password for unlocking Databox. Should not be passed for TransferType:ExportFromAzure jobs. If this is not passed, the service will generate password itself. This will not be returned in Get Call. Password Requirements :  Password must be minimum of 12 and maximum of 64 characters. Password must have at least one uppercase alphabet, one number and one special character. Password cannot have the following characters : IilLoO0 Password can have only alphabets, numbers and these characters : @#\-$%^!+=;:_()]+ */
    devicePassword?: string;
}

/** The secrets related to a databox job. */
export declare interface DataboxJobSecrets extends JobSecrets {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    jobSecretsType: "DataBox";
    /** Contains the list of secret objects for a job. */
    podSecrets?: DataBoxSecret[];
}

export declare class DataBoxManagementClient extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the DataBoxManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The Subscription Id
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: DataBoxManagementClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    /**
     * Request to mitigate for a given job
     * @param jobName The name of the job Resource within the specified resource group. job names must be
     *                between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param resourceGroupName The Resource Group Name
     * @param mitigateJobRequest Mitigation Request
     * @param options The options parameters.
     */
    mitigate(jobName: string, resourceGroupName: string, mitigateJobRequest: MitigateJobRequest, options?: MitigateOptionalParams): Promise<void>;
    operations: Operations;
    jobs: Jobs;
    service: Service;
}

/** Optional parameters. */
export declare interface DataBoxManagementClientOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** Request body to get the availability for scheduling data box orders orders. */
export declare interface DataBoxScheduleAvailabilityRequest extends ScheduleAvailabilityRequest {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    skuName: "DataBox";
}

/** The secrets related to a DataBox. */
export declare interface DataBoxSecret {
    /**
     * Serial number of the assigned device.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly deviceSerialNumber?: string;
    /**
     * Password for out of the box experience on device.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly devicePassword?: string;
    /**
     * Network configuration of the appliance.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly networkConfigurations?: ApplianceNetworkConfiguration[];
    /**
     * The base 64 encoded public key to authenticate with the device
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly encodedValidationCertPubKey?: string;
    /**
     * Per account level access credentials.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly accountCredentialDetails?: AccountCredentialDetails[];
}

/** Datacenter instruction for given storage location. */
export declare interface DatacenterAddressInstructionResponse extends DatacenterAddressResponse {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    datacenterAddressType: "DatacenterAddressInstruction";
    /**
     * Data center communication instruction
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly communicationInstruction?: string;
}

/** Datacenter address for given storage location. */
export declare interface DatacenterAddressLocationResponse extends DatacenterAddressResponse {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    datacenterAddressType: "DatacenterAddressLocation";
    /**
     * Contact person name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly contactPersonName?: string;
    /**
     * Company name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly company?: string;
    /**
     * Street address line 1
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly street1?: string;
    /**
     * Street address line 2
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly street2?: string;
    /**
     * Street address line 3
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly street3?: string;
    /**
     * City name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly city?: string;
    /**
     * name of the state
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly state?: string;
    /**
     * Zip code
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly zip?: string;
    /**
     * name of the country
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly country?: string;
    /**
     * Phone number
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly phone?: string;
    /**
     * Phone extension
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly phoneExtension?: string;
    /**
     * Address type
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly addressType?: string;
    /**
     * Special instruction for shipping
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalShippingInformation?: string;
}

/** Request body to get the datacenter address. */
export declare interface DatacenterAddressRequest {
    /** Storage location. For locations check: https://management.azure.com/subscriptions/SUBSCRIPTIONID/locations?api-version=2018-01-01 */
    storageLocation: string;
    /** Sku Name for which the data center address requested. */
    skuName: SkuName;
}

/** Datacenter address for given storage location. */
export declare interface DatacenterAddressResponse {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    datacenterAddressType: "DatacenterAddressInstruction" | "DatacenterAddressLocation";
    /**
     * List of supported carriers for return shipment.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly supportedCarriersForReturnShipment?: string[];
    /**
     * Azure Location where the Data Center serves primarily.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dataCenterAzureLocation?: string;
}

export declare type DatacenterAddressResponseUnion = DatacenterAddressResponse | DatacenterAddressInstructionResponse | DatacenterAddressLocationResponse;

/** Defines values for DatacenterAddressType. */
export declare type DatacenterAddressType = "DatacenterAddressLocation" | "DatacenterAddressInstruction";

/**
 * Defines values for DataCenterCode. \
 * {@link KnownDataCenterCode} can be used interchangeably with DataCenterCode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Invalid** \
 * **BY2** \
 * **BY1** \
 * **ORK70** \
 * **AM2** \
 * **AMS20** \
 * **BY21** \
 * **BY24** \
 * **MWH01** \
 * **AMS06** \
 * **SSE90** \
 * **SYD03** \
 * **SYD23** \
 * **CBR20** \
 * **YTO20** \
 * **CWL20** \
 * **LON24** \
 * **BOM01** \
 * **BL20** \
 * **BL7** \
 * **SEL20** \
 * **TYO01** \
 * **BN1** \
 * **SN5** \
 * **CYS04** \
 * **TYO22** \
 * **YTO21** \
 * **YQB20** \
 * **FRA22** \
 * **MAA01** \
 * **CPQ02** \
 * **CPQ20** \
 * **SIN20** \
 * **HKG20** \
 * **SG2** \
 * **MEL23** \
 * **SEL21** \
 * **OSA20** \
 * **SHA03** \
 * **BJB** \
 * **JNB22** \
 * **JNB21** \
 * **MNZ21** \
 * **SN8** \
 * **AUH20** \
 * **ZRH20** \
 * **PUS20** \
 * **AdHoc** \
 * **CH1** \
 * **DSM05** \
 * **DUB07** \
 * **PNQ01** \
 * **SVG20** \
 * **OSA02** \
 * **OSA22** \
 * **PAR22** \
 * **BN7** \
 * **SN6** \
 * **BJS20**
 */
export declare type DataCenterCode = string;

/** Details of the data to be used for exporting data from azure. */
export declare interface DataExportDetails {
    /** Configuration for the data transfer. */
    transferConfiguration: TransferConfiguration;
    /** Level of the logs to be collected. */
    logCollectionLevel?: LogCollectionLevel;
    /** Account details of the data to be transferred */
    accountDetails: DataAccountDetailsUnion;
}

/** Details of the data to be used for importing data to azure. */
export declare interface DataImportDetails {
    /** Account details of the data to be transferred */
    accountDetails: DataAccountDetailsUnion;
    /** Level of the logs to be collected. */
    logCollectionLevel?: LogCollectionLevel;
}

/** Map of data location to service location */
export declare interface DataLocationToServiceLocationMap {
    /**
     * Location of the data.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dataLocation?: string;
    /**
     * Location of the service.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly serviceLocation?: string;
}

/** Request to validate export and import data details. */
export declare interface DataTransferDetailsValidationRequest extends ValidationInputRequest {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    validationType: "ValidateDataTransferDetails";
    /** List of DataTransfer details to be used to export data from azure. */
    dataExportDetails?: DataExportDetails[];
    /** List of DataTransfer details to be used to import data to azure. */
    dataImportDetails?: DataImportDetails[];
    /** Device type. */
    deviceType: SkuName;
    /** Type of the transfer. */
    transferType: TransferType;
}

/** Properties of data transfer details validation response. */
export declare interface DataTransferDetailsValidationResponseProperties extends ValidationInputResponse {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    validationType: "ValidateDataTransferDetails";
    /**
     * Data transfer details validation status.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: ValidationStatus;
}

/** Dc access security code */
export declare interface DcAccessSecurityCode {
    /** Reverse Dc access security code. */
    reverseDCAccessCode?: string;
    /** Forward Dc access security code. */
    forwardDCAccessCode?: string;
}

export declare interface Details {
    code: string;
    message: string;
}

/** Device erasure details with erasure completion status and erasureordestructionlog sas key */
export declare interface DeviceErasureDetails {
    /**
     * Holds the device erasure completion status
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly deviceErasureStatus?: StageStatus;
    /**
     * Shared access key to download cleanup or destruction certificate for device
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly erasureOrDestructionCertificateSasKey?: string;
}

/** Request body to get the availability for scheduling disk orders. */
export declare interface DiskScheduleAvailabilityRequest extends ScheduleAvailabilityRequest {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    skuName: "DataBoxDisk";
    /** The expected size of the data, which needs to be transferred in this job, in terabytes. */
    expectedDataSizeInTeraBytes: number;
}

/** Contains all the secrets of a Disk. */
export declare interface DiskSecret {
    /**
     * Serial number of the assigned disk.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly diskSerialNumber?: string;
    /**
     * Bit Locker key of the disk which can be used to unlock the disk to copy data.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly bitLockerKey?: string;
}

/** Defines values for DoubleEncryption. */
export declare type DoubleEncryption = "Enabled" | "Disabled";

/** Preferences related to the Encryption. */
export declare interface EncryptionPreferences {
    /** Defines secondary layer of software-based encryption enablement. */
    doubleEncryption?: DoubleEncryption;
    /** Defines Hardware level encryption (Only for disk) */
    hardwareEncryption?: HardwareEncryption;
}

export declare interface ErrorDetail {
    code: string;
    message: string;
    details?: Details[];
    target?: string;
}

/** Export disk details */
export declare interface ExportDiskDetails {
    /**
     * The relative path of the manifest file on the disk.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly manifestFile?: string;
    /**
     * The Base16-encoded MD5 hash of the manifest file on the disk.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly manifestHash?: string;
    /**
     * Path to backed up manifest, only returned if enableManifestBackup is true.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly backupManifestCloudPath?: string;
}

/** Details of the filter files to be used for data transfer. */
export declare interface FilterFileDetails {
    /** Type of the filter file. */
    filterFileType: FilterFileType;
    /** Path of the file that contains the details of all items to transfer. */
    filterFilePath: string;
}

/** Defines values for FilterFileType. */
export declare type FilterFileType = "AzureBlob" | "AzureFile";

/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/** Granular Details for log generated during copy. */
export declare interface GranularCopyLogDetails {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    copyLogDetailsType: "DataBoxCustomerDisk";
}

export declare type GranularCopyLogDetailsUnion = GranularCopyLogDetails | DataBoxDiskGranularCopyLogDetails;

/** Granular Copy progress. */
export declare interface GranularCopyProgress {
    /**
     * Name of the storage account. This will be empty for data account types other than storage account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly storageAccountName?: string;
    /**
     * Transfer type of data
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly transferType?: TransferType;
    /**
     * Data Account Type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dataAccountType?: DataAccountType;
    /**
     * Id of the account where the data needs to be uploaded.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly accountId?: string;
    /**
     * To indicate bytes transferred.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly bytesProcessed?: number;
    /**
     * Total amount of data to be processed by the job.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly totalBytesToProcess?: number;
    /**
     * Number of files processed
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly filesProcessed?: number;
    /**
     * Total files to process
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly totalFilesToProcess?: number;
    /**
     * Number of files not adhering to azure naming conventions which were processed by automatic renaming
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly invalidFilesProcessed?: number;
    /**
     * Total amount of data not adhering to azure naming conventions which were processed by automatic renaming
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly invalidFileBytesUploaded?: number;
    /**
     * Number of folders not adhering to azure naming conventions which were processed by automatic renaming
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly renamedContainerCount?: number;
    /**
     * Number of files which could not be copied
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly filesErroredOut?: number;
    /**
     * To indicate directories errored out in the job.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly directoriesErroredOut?: number;
    /**
     * To indicate directories renamed
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly invalidDirectoriesProcessed?: number;
    /**
     * To indicate if enumeration of data is in progress.
     * Until this is true, the TotalBytesToProcess may not be valid.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isEnumerationInProgress?: boolean;
    /**
     * Error, if any, in the stage
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly error?: CloudError;
    /**
     * Available actions on the job.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly actions?: CustomerResolutionCode[];
}

/** Defines values for HardwareEncryption. */
export declare type HardwareEncryption = "Enabled" | "Disabled";

/** Request body to get the availability for scheduling heavy orders. */
export declare interface HeavyScheduleAvailabilityRequest extends ScheduleAvailabilityRequest {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    skuName: "DataBoxHeavy";
}

/** Managed identity properties. */
export declare interface IdentityProperties {
    /** Managed service identity type. */
    type?: string;
    /** User assigned identity properties. */
    userAssigned?: UserAssignedProperties;
}

/** Import disk details */
export declare interface ImportDiskDetails {
    /** The relative path of the manifest file on the disk. */
    manifestFile: string;
    /** The Base16-encoded MD5 hash of the manifest file on the disk. */
    manifestHash: string;
    /** BitLocker key used to encrypt the disk. */
    bitLockerKey: string;
    /**
     * Path to backed up manifest, only returned if enableManifestBackup is true.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly backupManifestCloudPath?: string;
}

/** Additional delivery info. */
export declare interface JobDeliveryInfo {
    /** Scheduled date time. */
    scheduledDateTime?: Date;
}

/** Defines values for JobDeliveryType. */
export declare type JobDeliveryType = "NonScheduled" | "Scheduled";

/** Job details. */
export declare interface JobDetails {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    jobDetailsType: "DataBoxCustomerDisk" | "DataBoxDisk" | "DataBoxHeavy" | "DataBox";
    /**
     * List of stages that run in the job.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly jobStages?: JobStages[];
    /** Contact details for notification and shipping. */
    contactDetails: ContactDetails;
    /** Shipping address of the customer. */
    shippingAddress?: ShippingAddress;
    /**
     * Delivery package shipping details.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly deliveryPackage?: PackageShippingDetails;
    /**
     * Return package shipping details.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly returnPackage?: PackageShippingDetails;
    /** Details of the data to be imported into azure. */
    dataImportDetails?: DataImportDetails[];
    /** Details of the data to be exported from azure. */
    dataExportDetails?: DataExportDetails[];
    /** Preferences for the order. */
    preferences?: Preferences;
    /** Optional Reverse Shipping details for order. */
    reverseShippingDetails?: ReverseShippingDetails;
    /**
     * List of copy log details.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly copyLogDetails?: CopyLogDetailsUnion[];
    /**
     * Shared access key to download the return shipment label
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly reverseShipmentLabelSasKey?: string;
    /**
     * Shared access key to download the chain of custody logs
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly chainOfCustodySasKey?: string;
    /**
     * Holds device data erasure details
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly deviceErasureDetails?: DeviceErasureDetails;
    /** Details about which key encryption type is being used. */
    keyEncryptionKey?: KeyEncryptionKey;
    /** The expected size of the data, which needs to be transferred in this job, in terabytes. */
    expectedDataSizeInTeraBytes?: number;
    /**
     * Available actions on the job.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly actions?: CustomerResolutionCode[];
    /**
     * Last mitigation action performed on the job.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastMitigationActionOnJob?: LastMitigationActionOnJob;
    /**
     * Datacenter address to ship to, for the given sku and storage location.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly datacenterAddress?: DatacenterAddressResponseUnion;
    /**
     * DataCenter code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dataCenterCode?: DataCenterCode;
}

export declare type JobDetailsUnion = JobDetails | DataBoxCustomerDiskJobDetails | DataBoxDiskJobDetails | DataBoxHeavyJobDetails | DataBoxJobDetails;

/** Job Resource. */
export declare interface JobResource extends Resource {
    /**
     * Name of the object.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Id of the object.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Type of the object.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * Metadata pertaining to creation and last modification of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** Type of the data transfer. */
    transferType: TransferType;
    /**
     * Describes whether the job is cancellable or not.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isCancellable?: boolean;
    /**
     * Describes whether the job is deletable or not.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isDeletable?: boolean;
    /**
     * Describes whether the shipping address is editable or not.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isShippingAddressEditable?: boolean;
    /**
     * The Editable status for Reverse Shipping Address and Contact Info
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly reverseShippingDetailsUpdate?: ReverseShippingDetailsEditStatus;
    /**
     * The Editable status for Reverse Transport preferences
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly reverseTransportPreferenceUpdate?: ReverseTransportPreferenceEditStatus;
    /**
     * Is Prepare To Ship Enabled on this job
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isPrepareToShipEnabled?: boolean;
    /**
     * Name of the stage which is in progress.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: StageName;
    /**
     * Time at which the job was started in UTC ISO 8601 format.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly startTime?: Date;
    /**
     * Top level error for the job.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly error?: CloudError;
    /** Details of a job run. This field will only be sent for expand details filter. */
    details?: JobDetailsUnion;
    /**
     * Reason for cancellation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly cancellationReason?: string;
    /** Delivery type of Job. */
    deliveryType?: JobDeliveryType;
    /** Delivery Info of Job. */
    deliveryInfo?: JobDeliveryInfo;
    /**
     * Flag to indicate cancellation of scheduled job.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isCancellableWithoutFee?: boolean;
}

/** Job Resource Collection */
export declare interface JobResourceList {
    /** List of job resources. */
    value?: JobResource[];
    /** Link for the next set of job resources. */
    nextLink?: string;
}

/** The JobResourceUpdateParameter. */
export declare interface JobResourceUpdateParameter {
    /** The list of key value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). */
    tags?: {
        [propertyName: string]: string;
    };
    /** Msi identity of the resource */
    identity?: ResourceIdentity;
    /** Details of a job to be updated. */
    details?: UpdateJobDetails;
}

/** Interface representing a Jobs. */
export declare interface Jobs {
    /**
     * Lists all the jobs available under the subscription.
     * @param options The options parameters.
     */
    list(options?: JobsListOptionalParams): PagedAsyncIterableIterator<JobResource>;
    /**
     * Lists all the jobs available under the given resource group.
     * @param resourceGroupName The Resource Group Name
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: JobsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<JobResource>;
    /**
     * This method gets the unencrypted secrets related to the job.
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be
     *                between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param options The options parameters.
     */
    listCredentials(resourceGroupName: string, jobName: string, options?: JobsListCredentialsOptionalParams): PagedAsyncIterableIterator<UnencryptedCredentials>;
    /**
     * Request to mark devices for a given job as shipped
     * @param jobName The name of the job Resource within the specified resource group. job names must be
     *                between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param resourceGroupName The Resource Group Name
     * @param markDevicesShippedRequest Mark Devices Shipped Request
     * @param options The options parameters.
     */
    markDevicesShipped(jobName: string, resourceGroupName: string, markDevicesShippedRequest: MarkDevicesShippedRequest, options?: JobsMarkDevicesShippedOptionalParams): Promise<void>;
    /**
     * Gets information about the specified job.
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be
     *                between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param options The options parameters.
     */
    get(resourceGroupName: string, jobName: string, options?: JobsGetOptionalParams): Promise<JobsGetResponse>;
    /**
     * Creates a new job with the specified parameters. Existing job cannot be updated with this API and
     * should instead be updated with the Update job API.
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be
     *                between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param jobResource Job details from request body.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName: string, jobName: string, jobResource: JobResource, options?: JobsCreateOptionalParams): Promise<SimplePollerLike<OperationState<JobsCreateResponse>, JobsCreateResponse>>;
    /**
     * Creates a new job with the specified parameters. Existing job cannot be updated with this API and
     * should instead be updated with the Update job API.
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be
     *                between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param jobResource Job details from request body.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName: string, jobName: string, jobResource: JobResource, options?: JobsCreateOptionalParams): Promise<JobsCreateResponse>;
    /**
     * Deletes a job.
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be
     *                between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, jobName: string, options?: JobsDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes a job.
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be
     *                between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, jobName: string, options?: JobsDeleteOptionalParams): Promise<void>;
    /**
     * Updates the properties of an existing job.
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be
     *                between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param jobResourceUpdateParameter Job update parameters from request body.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, jobName: string, jobResourceUpdateParameter: JobResourceUpdateParameter, options?: JobsUpdateOptionalParams): Promise<SimplePollerLike<OperationState<JobsUpdateResponse>, JobsUpdateResponse>>;
    /**
     * Updates the properties of an existing job.
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be
     *                between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param jobResourceUpdateParameter Job update parameters from request body.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, jobName: string, jobResourceUpdateParameter: JobResourceUpdateParameter, options?: JobsUpdateOptionalParams): Promise<JobsUpdateResponse>;
    /**
     * Book shipment pick up.
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be
     *                between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param shipmentPickUpRequest Details of shipment pick up request.
     * @param options The options parameters.
     */
    bookShipmentPickUp(resourceGroupName: string, jobName: string, shipmentPickUpRequest: ShipmentPickUpRequest, options?: JobsBookShipmentPickUpOptionalParams): Promise<JobsBookShipmentPickUpResponse>;
    /**
     * CancelJob.
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be
     *                between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param cancellationReason Reason for cancellation.
     * @param options The options parameters.
     */
    cancel(resourceGroupName: string, jobName: string, cancellationReason: CancellationReason, options?: JobsCancelOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface JobsBookShipmentPickUpOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the bookShipmentPickUp operation. */
export declare type JobsBookShipmentPickUpResponse = ShipmentPickUpResponse;

/** Optional parameters. */
export declare interface JobsCancelOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface JobsCreateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the create operation. */
export declare type JobsCreateResponse = JobResource;

/** Defines headers for Jobs_delete operation. */
export declare interface JobsDeleteHeaders {
    /** The URI to poll for completion status. */
    location?: string;
}

/** Optional parameters. */
export declare interface JobsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** The base class for the secrets */
export declare interface JobSecrets {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    jobSecretsType: "DataBoxCustomerDisk" | "DataBoxDisk" | "DataBoxHeavy" | "DataBox";
    /**
     * Dc Access Security Code for Customer Managed Shipping
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dcAccessSecurityCode?: DcAccessSecurityCode;
    /**
     * Error while fetching the secrets.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly error?: CloudError;
}

export declare type JobSecretsUnion = JobSecrets | CustomerDiskJobSecrets | DataBoxDiskJobSecrets | DataBoxHeavyJobSecrets | DataboxJobSecrets;

/** Optional parameters. */
export declare interface JobsGetOptionalParams extends coreClient.OperationOptions {
    /** $expand is supported on details parameter for job, which provides details on the job stages. */
    expand?: string;
}

/** Contains response data for the get operation. */
export declare type JobsGetResponse = JobResource;

/** Optional parameters. */
export declare interface JobsListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type JobsListByResourceGroupNextResponse = JobResourceList;

/** Optional parameters. */
export declare interface JobsListByResourceGroupOptionalParams extends coreClient.OperationOptions {
    /** $skipToken is supported on Get list of jobs, which provides the next page in the list of jobs. */
    skipToken?: string;
}

/** Contains response data for the listByResourceGroup operation. */
export declare type JobsListByResourceGroupResponse = JobResourceList;

/** Optional parameters. */
export declare interface JobsListCredentialsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listCredentials operation. */
export declare type JobsListCredentialsResponse = UnencryptedCredentialsList;

/** Optional parameters. */
export declare interface JobsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type JobsListNextResponse = JobResourceList;

/** Optional parameters. */
export declare interface JobsListOptionalParams extends coreClient.OperationOptions {
    /** $skipToken is supported on Get list of jobs, which provides the next page in the list of jobs. */
    skipToken?: string;
}

/** Contains response data for the list operation. */
export declare type JobsListResponse = JobResourceList;

/** Optional parameters. */
export declare interface JobsMarkDevicesShippedOptionalParams extends coreClient.OperationOptions {
}

/** Job stages. */
export declare interface JobStages {
    /**
     * Name of the job stage.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly stageName?: StageName;
    /**
     * Display name of the job stage.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly displayName?: string;
    /**
     * Status of the job stage.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly stageStatus?: StageStatus;
    /**
     * Time for the job stage in UTC ISO 8601 format.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly stageTime?: Date;
    /**
     * Job Stage Details
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly jobStageDetails?: Record<string, unknown>;
}

/** Defines headers for Jobs_update operation. */
export declare interface JobsUpdateHeaders {
    /** The URI to poll for completion status. */
    location?: string;
}

/** Optional parameters. */
export declare interface JobsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Defines the If-Match condition. The patch will be performed only if the ETag of the job on the server matches this value. */
    ifMatch?: string;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type JobsUpdateResponse = JobResource;

/** Defines values for KekType. */
export declare type KekType = "MicrosoftManaged" | "CustomerManaged";

/** Encryption key containing details about key to encrypt different keys. */
export declare interface KeyEncryptionKey {
    /** Type of encryption key used for key encryption. */
    kekType: KekType;
    /** Managed identity properties used for key encryption. */
    identityProperties?: IdentityProperties;
    /** Key encryption key. It is required in case of Customer managed KekType. */
    kekUrl?: string;
    /** Kek vault resource id. It is required in case of Customer managed KekType. */
    kekVaultResourceID?: string;
}

/** Known values of {@link CopyStatus} that the service accepts. */
export declare enum KnownCopyStatus {
    /** Data copy hasn't started yet. */
    NotStarted = "NotStarted",
    /** Data copy is in progress. */
    InProgress = "InProgress",
    /** Data copy completed. */
    Completed = "Completed",
    /** Data copy completed with errors. */
    CompletedWithErrors = "CompletedWithErrors",
    /** Data copy failed. No data was copied. */
    Failed = "Failed",
    /** No copy triggered as device was not returned. */
    NotReturned = "NotReturned",
    /** The Device has hit hardware issues. */
    HardwareError = "HardwareError",
    /** Data copy failed. The Device was formatted by user. */
    DeviceFormatted = "DeviceFormatted",
    /** Data copy failed. Device metadata was modified by user. */
    DeviceMetadataModified = "DeviceMetadataModified",
    /** Data copy failed. Storage Account was not accessible during copy. */
    StorageAccountNotAccessible = "StorageAccountNotAccessible",
    /** Data copy failed. The Device data content is not supported. */
    UnsupportedData = "UnsupportedData",
    /** No copy triggered as device was not received. */
    DriveNotReceived = "DriveNotReceived",
    /** No copy triggered as device type is not supported. */
    UnsupportedDrive = "UnsupportedDrive",
    /** Copy failed due to service error. */
    OtherServiceError = "OtherServiceError",
    /** Copy failed due to user error. */
    OtherUserError = "OtherUserError",
    /** Copy failed due to disk detection error. */
    DriveNotDetected = "DriveNotDetected",
    /** Copy failed due to corrupted drive. */
    DriveCorrupted = "DriveCorrupted",
    /** Copy failed due to modified or removed metadata files. */
    MetadataFilesModifiedOrRemoved = "MetadataFilesModifiedOrRemoved"
}

/** Known values of {@link DataCenterCode} that the service accepts. */
export declare enum KnownDataCenterCode {
    /** Invalid */
    Invalid = "Invalid",
    /** BY2 */
    BY2 = "BY2",
    /** BY1 */
    BY1 = "BY1",
    /** ORK70 */
    ORK70 = "ORK70",
    /** AM2 */
    AM2 = "AM2",
    /** AMS20 */
    AMS20 = "AMS20",
    /** BY21 */
    BY21 = "BY21",
    /** BY24 */
    BY24 = "BY24",
    /** MWH01 */
    MWH01 = "MWH01",
    /** AMS06 */
    AMS06 = "AMS06",
    /** SSE90 */
    SSE90 = "SSE90",
    /** SYD03 */
    SYD03 = "SYD03",
    /** SYD23 */
    SYD23 = "SYD23",
    /** CBR20 */
    CBR20 = "CBR20",
    /** YTO20 */
    YTO20 = "YTO20",
    /** CWL20 */
    CWL20 = "CWL20",
    /** LON24 */
    LON24 = "LON24",
    /** BOM01 */
    BOM01 = "BOM01",
    /** BL20 */
    BL20 = "BL20",
    /** BL7 */
    BL7 = "BL7",
    /** SEL20 */
    SEL20 = "SEL20",
    /** TYO01 */
    TYO01 = "TYO01",
    /** BN1 */
    BN1 = "BN1",
    /** SN5 */
    SN5 = "SN5",
    /** CYS04 */
    CYS04 = "CYS04",
    /** TYO22 */
    TYO22 = "TYO22",
    /** YTO21 */
    YTO21 = "YTO21",
    /** YQB20 */
    YQB20 = "YQB20",
    /** FRA22 */
    FRA22 = "FRA22",
    /** MAA01 */
    MAA01 = "MAA01",
    /** CPQ02 */
    CPQ02 = "CPQ02",
    /** CPQ20 */
    CPQ20 = "CPQ20",
    /** SIN20 */
    SIN20 = "SIN20",
    /** HKG20 */
    HKG20 = "HKG20",
    /** SG2 */
    SG2 = "SG2",
    /** MEL23 */
    MEL23 = "MEL23",
    /** SEL21 */
    SEL21 = "SEL21",
    /** OSA20 */
    OSA20 = "OSA20",
    /** SHA03 */
    SHA03 = "SHA03",
    /** BJB */
    BJB = "BJB",
    /** JNB22 */
    JNB22 = "JNB22",
    /** JNB21 */
    JNB21 = "JNB21",
    /** MNZ21 */
    MNZ21 = "MNZ21",
    /** SN8 */
    SN8 = "SN8",
    /** AUH20 */
    AUH20 = "AUH20",
    /** ZRH20 */
    ZRH20 = "ZRH20",
    /** PUS20 */
    PUS20 = "PUS20",
    /** AdHoc */
    AdHoc = "AdHoc",
    /** CH1 */
    CH1 = "CH1",
    /** DSM05 */
    DSM05 = "DSM05",
    /** DUB07 */
    DUB07 = "DUB07",
    /** PNQ01 */
    PNQ01 = "PNQ01",
    /** SVG20 */
    SVG20 = "SVG20",
    /** OSA02 */
    OSA02 = "OSA02",
    /** OSA22 */
    OSA22 = "OSA22",
    /** PAR22 */
    PAR22 = "PAR22",
    /** BN7 */
    BN7 = "BN7",
    /** SN6 */
    SN6 = "SN6",
    /** BJS20 */
    BJS20 = "BJS20"
}

/** Known values of {@link NotificationStageName} that the service accepts. */
export declare enum KnownNotificationStageName {
    /** Notification at device prepared stage. */
    DevicePrepared = "DevicePrepared",
    /** Notification at device dispatched stage. */
    Dispatched = "Dispatched",
    /** Notification at device delivered stage. */
    Delivered = "Delivered",
    /** Notification at device picked up from user stage. */
    PickedUp = "PickedUp",
    /** Notification at device received at Azure datacenter stage. */
    AtAzureDC = "AtAzureDC",
    /** Notification at data copy started stage. */
    DataCopy = "DataCopy",
    /** Notification at job created stage. */
    Created = "Created",
    /** Notification at shipped devices to customer stage. */
    ShippedToCustomer = "ShippedToCustomer"
}

/** Known values of {@link StageName} that the service accepts. */
export declare enum KnownStageName {
    /** An order has been created. */
    DeviceOrdered = "DeviceOrdered",
    /** A device has been prepared for the order. */
    DevicePrepared = "DevicePrepared",
    /** Device has been dispatched to the user of the order. */
    Dispatched = "Dispatched",
    /** Device has been delivered to the user of the order. */
    Delivered = "Delivered",
    /** Device has been picked up from user and in transit to Azure datacenter. */
    PickedUp = "PickedUp",
    /** Device has been received at Azure datacenter from the user. */
    AtAzureDC = "AtAzureDC",
    /** Data copy from the device at Azure datacenter. */
    DataCopy = "DataCopy",
    /** Order has completed. */
    Completed = "Completed",
    /** Order has completed with errors. */
    CompletedWithErrors = "CompletedWithErrors",
    /** Order has been cancelled. */
    Cancelled = "Cancelled",
    /** Order has failed due to issue reported by user. */
    FailedIssueReportedAtCustomer = "Failed_IssueReportedAtCustomer",
    /** Order has failed due to issue detected at Azure datacenter. */
    FailedIssueDetectedAtAzureDC = "Failed_IssueDetectedAtAzureDC",
    /** Order has been aborted. */
    Aborted = "Aborted",
    /** Order has completed with warnings. */
    CompletedWithWarnings = "CompletedWithWarnings",
    /** Device is ready to be handed to customer from Azure DC. */
    ReadyToDispatchFromAzureDC = "ReadyToDispatchFromAzureDC",
    /** Device can be dropped off at Azure DC. */
    ReadyToReceiveAtAzureDC = "ReadyToReceiveAtAzureDC",
    /** Job created by the customer. */
    Created = "Created",
    /** User shipped the device to AzureDC. */
    ShippedToAzureDC = "ShippedToAzureDC",
    /** Awaiting shipment details of device from customer. */
    AwaitingShipmentDetails = "AwaitingShipmentDetails",
    /** Preparing the device to ship to customer. */
    PreparingToShipFromAzureDC = "PreparingToShipFromAzureDC",
    /** Shipped the device to customer. */
    ShippedToCustomer = "ShippedToCustomer"
}

/** Last Mitigation Action Performed On Job */
export declare interface LastMitigationActionOnJob {
    /** Action performed date time */
    actionDateTimeInUtc?: Date;
    /**
     * Action performed by customer,
     * possibility is that mitigation might happen by customer or service or by ops
     */
    isPerformedByCustomer?: boolean;
    /** Resolution code provided by customer */
    customerResolution?: CustomerResolutionCode;
}

/** Defines values for LogCollectionLevel. */
export declare type LogCollectionLevel = "Error" | "Verbose";

/** Details of the managed disks. */
export declare interface ManagedDiskDetails extends DataAccountDetails {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    dataAccountType: "ManagedDisk";
    /** Resource Group Id of the compute disks. */
    resourceGroupId: string;
    /** Resource Id of the storage account that can be used to copy the vhd for staging. */
    stagingStorageAccountId: string;
}

/** The request body to provide the delivery package details of job */
export declare interface MarkDevicesShippedRequest {
    /** Delivery package details */
    deliverToDcPackageDetails: PackageCarrierInfo;
}

/** The Mitigate Job captured from request body for Mitigate API */
export declare interface MitigateJobRequest {
    /** Resolution code for the job */
    customerResolutionCode?: CustomerResolutionCode;
    /** Serial number and the customer resolution code corresponding to each serial number */
    serialNumberCustomerResolutionMap?: {
        [propertyName: string]: CustomerResolutionCode;
    };
}

/** Optional parameters. */
export declare interface MitigateOptionalParams extends coreClient.OperationOptions {
}

/** Notification preference for a job stage. */
export declare interface NotificationPreference {
    /** Name of the stage. */
    stageName: NotificationStageName;
    /** Notification is required or not. */
    sendNotification: boolean;
}

/**
 * Defines values for NotificationStageName. \
 * {@link KnownNotificationStageName} can be used interchangeably with NotificationStageName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **DevicePrepared**: Notification at device prepared stage. \
 * **Dispatched**: Notification at device dispatched stage. \
 * **Delivered**: Notification at device delivered stage. \
 * **PickedUp**: Notification at device picked up from user stage. \
 * **AtAzureDC**: Notification at device received at Azure datacenter stage. \
 * **DataCopy**: Notification at data copy started stage. \
 * **Created**: Notification at job created stage. \
 * **ShippedToCustomer**: Notification at shipped devices to customer stage.
 */
export declare type NotificationStageName = string;

/** Operation entity. */
export declare interface Operation {
    /**
     * Name of the operation. Format: {resourceProviderNamespace}/{resourceType}/{read|write|delete|action}
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Operation display values.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly display?: OperationDisplay;
    /**
     * Operation properties.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly properties?: Record<string, unknown>;
    /**
     * Origin of the operation. Can be : user|system|user,system
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly origin?: string;
    /** Indicates whether the operation is a data action */
    isDataAction?: boolean;
}

/** Operation display */
export declare interface OperationDisplay {
    /** Provider name. */
    provider?: string;
    /** Resource name. */
    resource?: string;
    /** Localized name of the operation for display purpose. */
    operation?: string;
    /** Localized description of the operation for display purpose. */
    description?: string;
}

/** Operation Collection. */
export declare interface OperationList {
    /**
     * List of operations.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: Operation[];
    /** Link for the next set of operations. */
    nextLink?: string;
}

/** Interface representing a Operations. */
export declare interface Operations {
    /**
     * This method gets all the operations.
     * @param options The options parameters.
     */
    list(options?: OperationsListOptionalParams): PagedAsyncIterableIterator<Operation>;
}

/** Optional parameters. */
export declare interface OperationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type OperationsListNextResponse = OperationList;

/** Optional parameters. */
export declare interface OperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OperationsListResponse = OperationList;

/** Defines values for OverallValidationStatus. */
export declare type OverallValidationStatus = "AllValidToProceed" | "InputsRevisitRequired" | "CertainInputValidationsSkipped";

/** Package carrier details. */
export declare interface PackageCarrierDetails {
    /** Carrier Account Number of customer for customer disk. */
    carrierAccountNumber?: string;
    /** Name of the carrier. */
    carrierName?: string;
    /** Tracking Id of shipment. */
    trackingId?: string;
}

/** package carrier info */
export declare interface PackageCarrierInfo {
    /** Name of the carrier. */
    carrierName?: string;
    /** Tracking Id of shipment. */
    trackingId?: string;
}

/** package shipping details */
export declare interface PackageShippingDetails {
    /**
     * Url where shipment can be tracked.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly trackingUrl?: string;
    /**
     * Name of the carrier.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly carrierName?: string;
    /**
     * Tracking Id of shipment.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly trackingId?: string;
}

/** Preferences related to the order */
export declare interface Preferences {
    /** Preferred data center region. */
    preferredDataCenterRegion?: string[];
    /** Preferences related to the shipment logistics of the sku. */
    transportPreferences?: TransportPreferences;
    /** Optional Preferences related to the reverse shipment logistics of the sku. */
    reverseTransportPreferences?: TransportPreferences;
    /** Preferences related to the Encryption. */
    encryptionPreferences?: EncryptionPreferences;
    /** Preferences related to the Access Tier of storage accounts. */
    storageAccountAccessTierPreferences?: string[];
}

/** Request to validate preference of transport and data center. */
export declare interface PreferencesValidationRequest extends ValidationInputRequest {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    validationType: "ValidatePreferences";
    /** Preference of transport and data center. */
    preference?: Preferences;
    /** Device type to be used for the job. */
    deviceType: SkuName;
}

/** Properties of data center and transport preference validation response. */
export declare interface PreferencesValidationResponseProperties extends ValidationInputResponse {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    validationType: "ValidatePreferences";
    /**
     * Validation status of requested data center and transport.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: ValidationStatus;
}

/** Request body to get the configuration for the region. */
export declare interface RegionConfigurationRequest {
    /** Request body to get the availability for scheduling orders. */
    scheduleAvailabilityRequest?: ScheduleAvailabilityRequestUnion;
    /** Request body to get the transport availability for given sku. */
    transportAvailabilityRequest?: TransportAvailabilityRequest;
    /** Request body to get the datacenter address for given sku. */
    datacenterAddressRequest?: DatacenterAddressRequest;
}

/** Configuration response specific to a region. */
export declare interface RegionConfigurationResponse {
    /**
     * Schedule availability for given sku in a region.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly scheduleAvailabilityResponse?: ScheduleAvailabilityResponse;
    /**
     * Transport options available for given sku in a region.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly transportAvailabilityResponse?: TransportAvailabilityResponse;
    /**
     * Datacenter address for given sku in a region.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly datacenterAddressResponse?: DatacenterAddressResponseUnion;
}

/** Model of the Resource. */
export declare interface Resource {
    /** The location of the resource. This will be one of the supported and registered Azure Regions (e.g. West US, East US, Southeast Asia, etc.). The region of a resource cannot be changed once it is created, but if an identical region is specified on update the request will succeed. */
    location: string;
    /** The list of key value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). */
    tags?: {
        [propertyName: string]: string;
    };
    /** The sku type. */
    sku: Sku;
    /** Msi identity of the resource */
    identity?: ResourceIdentity;
}

/** Msi identity details of the resource */
export declare interface ResourceIdentity {
    /** Identity type */
    type?: string;
    /**
     * Service Principal Id backing the Msi
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
    /**
     * Home Tenant Id
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
    /** User Assigned Identities */
    userAssignedIdentities?: {
        [propertyName: string]: UserAssignedIdentity;
    };
}

/** Reverse Shipping Address and contact details for a job. */
export declare interface ReverseShippingDetails {
    /** Contact Info. */
    contactDetails?: ContactInfo;
    /** Shipping address where customer wishes to receive the device. */
    shippingAddress?: ShippingAddress;
    /**
     * A flag to indicate whether Reverse Shipping details are updated or not after device has been prepared.
     * Read only field
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isUpdated?: boolean;
}

/** Defines values for ReverseShippingDetailsEditStatus. */
export declare type ReverseShippingDetailsEditStatus = "Enabled" | "Disabled" | "NotSupported";

/** Defines values for ReverseTransportPreferenceEditStatus. */
export declare type ReverseTransportPreferenceEditStatus = "Enabled" | "Disabled" | "NotSupported";

/** Request body to get the availability for scheduling orders. */
export declare interface ScheduleAvailabilityRequest {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    skuName: "DataBox" | "DataBoxDisk" | "DataBoxHeavy";
    /** Location for data transfer. For locations check: https://management.azure.com/subscriptions/SUBSCRIPTIONID/locations?api-version=2018-01-01 */
    storageLocation: string;
    /** Country in which storage location should be supported. */
    country?: string;
}

export declare type ScheduleAvailabilityRequestUnion = ScheduleAvailabilityRequest | DataBoxScheduleAvailabilityRequest | DiskScheduleAvailabilityRequest | HeavyScheduleAvailabilityRequest;

/** Schedule availability for given sku in a region. */
export declare interface ScheduleAvailabilityResponse {
    /**
     * List of dates available to schedule
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly availableDates?: Date[];
}

/** Interface representing a Service. */
export declare interface Service {
    /**
     * This method provides the list of available skus for the given subscription, resource group and
     * location.
     * @param resourceGroupName The Resource Group Name
     * @param location The location of the resource
     * @param availableSkuRequest Filters for showing the available skus.
     * @param options The options parameters.
     */
    listAvailableSkusByResourceGroup(resourceGroupName: string, location: string, availableSkuRequest: AvailableSkuRequest, options?: ServiceListAvailableSkusByResourceGroupOptionalParams): PagedAsyncIterableIterator<SkuInformation>;
    /**
     * [DEPRECATED NOTICE: This operation will soon be removed]. This method validates the customer
     * shipping address and provide alternate addresses if any.
     * @param location The location of the resource
     * @param validateAddress Shipping address of the customer.
     * @param options The options parameters.
     */
    validateAddress(location: string, validateAddress: ValidateAddress, options?: ServiceValidateAddressOptionalParams): Promise<ServiceValidateAddressResponse>;
    /**
     * This method does all necessary pre-job creation validation under resource group.
     * @param resourceGroupName The Resource Group Name
     * @param location The location of the resource
     * @param validationRequest Inputs of the customer.
     * @param options The options parameters.
     */
    validateInputsByResourceGroup(resourceGroupName: string, location: string, validationRequest: ValidationRequestUnion, options?: ServiceValidateInputsByResourceGroupOptionalParams): Promise<ServiceValidateInputsByResourceGroupResponse>;
    /**
     * This method does all necessary pre-job creation validation under subscription.
     * @param location The location of the resource
     * @param validationRequest Inputs of the customer.
     * @param options The options parameters.
     */
    validateInputs(location: string, validationRequest: ValidationRequestUnion, options?: ServiceValidateInputsOptionalParams): Promise<ServiceValidateInputsResponse>;
    /**
     * This API provides configuration details specific to given region/location at Subscription level.
     * @param location The location of the resource
     * @param regionConfigurationRequest Request body to get the configuration for the region.
     * @param options The options parameters.
     */
    regionConfiguration(location: string, regionConfigurationRequest: RegionConfigurationRequest, options?: ServiceRegionConfigurationOptionalParams): Promise<ServiceRegionConfigurationResponse>;
    /**
     * This API provides configuration details specific to given region/location at Resource group level.
     * @param resourceGroupName The Resource Group Name
     * @param location The location of the resource
     * @param regionConfigurationRequest Request body to get the configuration for the region at resource
     *                                   group level.
     * @param options The options parameters.
     */
    regionConfigurationByResourceGroup(resourceGroupName: string, location: string, regionConfigurationRequest: RegionConfigurationRequest, options?: ServiceRegionConfigurationByResourceGroupOptionalParams): Promise<ServiceRegionConfigurationByResourceGroupResponse>;
}

/** Optional parameters. */
export declare interface ServiceListAvailableSkusByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listAvailableSkusByResourceGroupNext operation. */
export declare type ServiceListAvailableSkusByResourceGroupNextResponse = AvailableSkusResult;

/** Optional parameters. */
export declare interface ServiceListAvailableSkusByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listAvailableSkusByResourceGroup operation. */
export declare type ServiceListAvailableSkusByResourceGroupResponse = AvailableSkusResult;

/** Optional parameters. */
export declare interface ServiceRegionConfigurationByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the regionConfigurationByResourceGroup operation. */
export declare type ServiceRegionConfigurationByResourceGroupResponse = RegionConfigurationResponse;

/** Optional parameters. */
export declare interface ServiceRegionConfigurationOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the regionConfiguration operation. */
export declare type ServiceRegionConfigurationResponse = RegionConfigurationResponse;

/** Optional parameters. */
export declare interface ServiceValidateAddressOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the validateAddress operation. */
export declare type ServiceValidateAddressResponse = AddressValidationOutput;

/** Optional parameters. */
export declare interface ServiceValidateInputsByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the validateInputsByResourceGroup operation. */
export declare type ServiceValidateInputsByResourceGroupResponse = ValidationResponse;

/** Optional parameters. */
export declare interface ServiceValidateInputsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the validateInputs operation. */
export declare type ServiceValidateInputsResponse = ValidationResponse;

/** Credential details of the shares in account. */
export declare interface ShareCredentialDetails {
    /**
     * Name of the share.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly shareName?: string;
    /**
     * Type of the share.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly shareType?: ShareDestinationFormatType;
    /**
     * User name for the share.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly userName?: string;
    /**
     * Password for the share.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly password?: string;
    /**
     * Access protocols supported on the device.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly supportedAccessProtocols?: AccessProtocol[];
}

/** Defines values for ShareDestinationFormatType. */
export declare type ShareDestinationFormatType = "UnknownType" | "HCS" | "BlockBlob" | "PageBlob" | "AzureFile" | "ManagedDisk";

/** Shipment pick up request details. */
export declare interface ShipmentPickUpRequest {
    /** Minimum date after which the pick up should commence, this must be in local time of pick up area. */
    startTime: Date;
    /** Maximum date before which the pick up should commence, this must be in local time of pick up area. */
    endTime: Date;
    /** Shipment Location in the pickup place. Eg.front desk */
    shipmentLocation: string;
}

/** Shipment pick up response. */
export declare interface ShipmentPickUpResponse {
    /**
     * Confirmation number for the pick up request.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly confirmationNumber?: string;
    /**
     * Time by which shipment should be ready for pick up, this is in local time of pick up area.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly readyByTime?: Date;
}

/** Shipping address where customer wishes to receive the device. */
export declare interface ShippingAddress {
    /** Street Address line 1. */
    streetAddress1: string;
    /** Street Address line 2. */
    streetAddress2?: string;
    /** Street Address line 3. */
    streetAddress3?: string;
    /** Name of the City. */
    city?: string;
    /** Name of the State or Province. */
    stateOrProvince?: string;
    /** Name of the Country. */
    country: string;
    /** Postal code. */
    postalCode?: string;
    /** Extended Zip Code. */
    zipExtendedCode?: string;
    /** Name of the company. */
    companyName?: string;
    /** Type of address. */
    addressType?: AddressType;
    /** Flag to indicate if customer has chosen to skip default address validation */
    skipAddressValidation?: boolean;
    /** Tax Identification Number */
    taxIdentificationNumber?: string;
}

/** The Sku. */
export declare interface Sku {
    /** The sku name. */
    name: SkuName;
    /** The display name of the sku. */
    displayName?: string;
    /** The sku family. */
    family?: string;
}

/** Request to validate sku availability. */
export declare interface SkuAvailabilityValidationRequest extends ValidationInputRequest {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    validationType: "ValidateSkuAvailability";
    /** Device type to be used for the job. */
    deviceType: SkuName;
    /** Type of the transfer. */
    transferType: TransferType;
    /** ISO country code. Country for hardware shipment. For codes check: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements */
    country: string;
    /** Location for data transfer. For locations check: https://management.azure.com/subscriptions/SUBSCRIPTIONID/locations?api-version=2018-01-01 */
    location: string;
}

/** Properties of sku availability validation response. */
export declare interface SkuAvailabilityValidationResponseProperties extends ValidationInputResponse {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    validationType: "ValidateSkuAvailability";
    /**
     * Sku availability validation status.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: ValidationStatus;
}

/** Capacity of the sku. */
export declare interface SkuCapacity {
    /**
     * Usable capacity in TB.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly usable?: string;
    /**
     * Maximum capacity in TB.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly maximum?: string;
}

/** Describes metadata for retrieving price info. */
export declare interface SkuCost {
    /**
     * Meter id of the Sku.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly meterId?: string;
    /**
     * The type of the meter.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly meterType?: string;
    /**
     * Multiplier specifies the region specific value to be multiplied with 1$ guid. Eg: Our new regions will be using 1$ shipping guid with appropriate multiplier specific to region.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly multiplier?: number;
}

/** Defines values for SkuDisabledReason. */
export declare type SkuDisabledReason = "None" | "Country" | "Region" | "Feature" | "OfferType" | "NoSubscriptionInfo";

/** Information of the sku. */
export declare interface SkuInformation {
    /**
     * The Sku.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly sku?: Sku;
    /**
     * The sku is enabled or not.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly enabled?: boolean;
    /**
     * The map of data location to service location.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dataLocationToServiceLocationMap?: DataLocationToServiceLocationMap[];
    /**
     * Capacity of the Sku.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly capacity?: SkuCapacity;
    /**
     * Cost of the Sku.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly costs?: SkuCost[];
    /**
     * Api versions that support this Sku.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly apiVersions?: string[];
    /**
     * Reason why the Sku is disabled.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly disabledReason?: SkuDisabledReason;
    /**
     * Message for why the Sku is disabled.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly disabledReasonMessage?: string;
    /**
     * Required feature to access the sku.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly requiredFeature?: string;
    /**
     * List of all the Countries in the SKU specific commerce boundary
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly countriesWithinCommerceBoundary?: string[];
}

/** Defines values for SkuName. */
export declare type SkuName = "DataBox" | "DataBoxDisk" | "DataBoxHeavy" | "DataBoxCustomerDisk";

/**
 * Defines values for StageName. \
 * {@link KnownStageName} can be used interchangeably with StageName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **DeviceOrdered**: An order has been created. \
 * **DevicePrepared**: A device has been prepared for the order. \
 * **Dispatched**: Device has been dispatched to the user of the order. \
 * **Delivered**: Device has been delivered to the user of the order. \
 * **PickedUp**: Device has been picked up from user and in transit to Azure datacenter. \
 * **AtAzureDC**: Device has been received at Azure datacenter from the user. \
 * **DataCopy**: Data copy from the device at Azure datacenter. \
 * **Completed**: Order has completed. \
 * **CompletedWithErrors**: Order has completed with errors. \
 * **Cancelled**: Order has been cancelled. \
 * **Failed_IssueReportedAtCustomer**: Order has failed due to issue reported by user. \
 * **Failed_IssueDetectedAtAzureDC**: Order has failed due to issue detected at Azure datacenter. \
 * **Aborted**: Order has been aborted. \
 * **CompletedWithWarnings**: Order has completed with warnings. \
 * **ReadyToDispatchFromAzureDC**: Device is ready to be handed to customer from Azure DC. \
 * **ReadyToReceiveAtAzureDC**: Device can be dropped off at Azure DC. \
 * **Created**: Job created by the customer. \
 * **ShippedToAzureDC**: User shipped the device to AzureDC. \
 * **AwaitingShipmentDetails**: Awaiting shipment details of device from customer. \
 * **PreparingToShipFromAzureDC**: Preparing the device to ship to customer. \
 * **ShippedToCustomer**: Shipped the device to customer.
 */
export declare type StageName = string;

/** Defines values for StageStatus. */
export declare type StageStatus = "None" | "InProgress" | "Succeeded" | "Failed" | "Cancelled" | "Cancelling" | "SucceededWithErrors" | "WaitingForCustomerAction" | "SucceededWithWarnings" | "WaitingForCustomerActionForKek" | "WaitingForCustomerActionForCleanUp" | "CustomerActionPerformedForCleanUp" | "CustomerActionPerformed";

/** Details for the storage account. */
export declare interface StorageAccountDetails extends DataAccountDetails {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    dataAccountType: "StorageAccount";
    /** Storage Account Resource Id. */
    storageAccountId: string;
}

/** Request to validate subscription permission to create jobs. */
export declare interface SubscriptionIsAllowedToCreateJobValidationRequest extends ValidationInputRequest {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    validationType: "ValidateSubscriptionIsAllowedToCreateJob";
}

/** Properties of subscription permission to create job validation response. */
export declare interface SubscriptionIsAllowedToCreateJobValidationResponseProperties extends ValidationInputResponse {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    validationType: "ValidateSubscriptionIsAllowedToCreateJob";
    /**
     * Validation status of subscription permission to create job.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: ValidationStatus;
}

/** Provides details about resource creation and update time */
export declare interface SystemData {
    /**
     * A string identifier for the identity that created the resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdBy?: string;
    /**
     * The type of identity that created the resource: user, application, managedIdentity
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdByType?: string;
    /**
     * The timestamp of resource creation (UTC)
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdAt?: Date;
    /**
     * A string identifier for the identity that last modified the resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastModifiedBy?: string;
    /**
     * The type of identity that last modified the resource: user, application, managedIdentity
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastModifiedByType?: string;
    /**
     * The timestamp of resource last modification (UTC)
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastModifiedAt?: Date;
}

/** Details to transfer all data. */
export declare interface TransferAllDetails {
    /** Type of the account of data */
    dataAccountType: DataAccountType;
    /** To indicate if all Azure blobs have to be transferred */
    transferAllBlobs?: boolean;
    /** To indicate if all Azure Files have to be transferred */
    transferAllFiles?: boolean;
}

/** Configuration for defining the transfer of data. */
export declare interface TransferConfiguration {
    /** Type of the configuration for transfer. */
    transferConfigurationType: TransferConfigurationType;
    /** Map of filter type and the details to filter. This field is required only if the TransferConfigurationType is given as TransferUsingFilter. */
    transferFilterDetails?: TransferConfigurationTransferFilterDetails;
    /** Map of filter type and the details to transfer all data. This field is required only if the TransferConfigurationType is given as TransferAll */
    transferAllDetails?: TransferConfigurationTransferAllDetails;
}

/** Map of filter type and the details to transfer all data. This field is required only if the TransferConfigurationType is given as TransferAll */
export declare interface TransferConfigurationTransferAllDetails {
    /** Details to transfer all data. */
    include?: TransferAllDetails;
}

/** Map of filter type and the details to filter. This field is required only if the TransferConfigurationType is given as TransferUsingFilter. */
export declare interface TransferConfigurationTransferFilterDetails {
    /** Details of the filtering the transfer of data. */
    include?: TransferFilterDetails;
}

/** Defines values for TransferConfigurationType. */
export declare type TransferConfigurationType = "TransferAll" | "TransferUsingFilter";

/** Details of the filtering the transfer of data. */
export declare interface TransferFilterDetails {
    /** Type of the account of data. */
    dataAccountType: DataAccountType;
    /** Filter details to transfer blobs. */
    blobFilterDetails?: BlobFilterDetails;
    /** Filter details to transfer Azure files. */
    azureFileFilterDetails?: AzureFileFilterDetails;
    /** Details of the filter files to be used for data transfer. */
    filterFileDetails?: FilterFileDetails[];
}

/** Defines values for TransferType. */
export declare type TransferType = "ImportToAzure" | "ExportFromAzure";

/** Transport options availability details for given region. */
export declare interface TransportAvailabilityDetails {
    /**
     * Transport Shipment Type supported for given region.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly shipmentType?: TransportShipmentTypes;
}

/** Request body to get the transport availability for given sku. */
export declare interface TransportAvailabilityRequest {
    /** Type of the device. */
    skuName?: SkuName;
}

/** Transport options available for given sku in a region. */
export declare interface TransportAvailabilityResponse {
    /**
     * List of transport availability details for given region
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly transportAvailabilityDetails?: TransportAvailabilityDetails[];
}

/** Preferences related to the shipment logistics of the sku */
export declare interface TransportPreferences {
    /** Indicates Shipment Logistics type that the customer preferred. */
    preferredShipmentType: TransportShipmentTypes;
    /**
     * Read only property which indicates whether transport preferences has been updated or not after device is prepared.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isUpdated?: boolean;
}

/** Defines values for TransportShipmentTypes. */
export declare type TransportShipmentTypes = "CustomerManaged" | "MicrosoftManaged";

/** Unencrypted credentials for accessing device. */
export declare interface UnencryptedCredentials {
    /**
     * Name of the job.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly jobName?: string;
    /**
     * Secrets related to this job.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly jobSecrets?: JobSecretsUnion;
}

/** List of unencrypted credentials for accessing device. */
export declare interface UnencryptedCredentialsList {
    /** List of unencrypted credentials. */
    value?: UnencryptedCredentials[];
    /** Link for the next set of unencrypted credentials. */
    nextLink?: string;
}

/** Job details for update. */
export declare interface UpdateJobDetails {
    /** Contact details for notification and shipping. */
    contactDetails?: ContactDetails;
    /** Shipping address of the customer. */
    shippingAddress?: ShippingAddress;
    /** Reverse Shipping Address and contact details for a job. */
    reverseShippingDetails?: ReverseShippingDetails;
    /** Preferences related to the order */
    preferences?: Preferences;
    /** Key encryption key for the job. */
    keyEncryptionKey?: KeyEncryptionKey;
    /** Return package details of job. */
    returnToCustomerPackageDetails?: PackageCarrierDetails;
}

/** Class defining User assigned identity details. */
export declare interface UserAssignedIdentity {
    /**
     * The principal id of user assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
    /**
     * The client id of user assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly clientId?: string;
}

/** User assigned identity properties. */
export declare interface UserAssignedProperties {
    /** Arm resource id for user assigned identity to be used to fetch MSI token. */
    resourceId?: string;
}

/** The requirements to validate customer address where the device needs to be shipped. */
export declare interface ValidateAddress extends ValidationInputRequest {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    validationType: "ValidateAddress";
    /** Shipping address of the customer. */
    shippingAddress: ShippingAddress;
    /** Device type to be used for the job. */
    deviceType: SkuName;
    /** Preferences related to the shipment logistics of the sku. */
    transportPreferences?: TransportPreferences;
}

/** Defines values for ValidationInputDiscriminator. */
export declare type ValidationInputDiscriminator = "ValidateAddress" | "ValidateSubscriptionIsAllowedToCreateJob" | "ValidatePreferences" | "ValidateCreateOrderLimit" | "ValidateSkuAvailability" | "ValidateDataTransferDetails";

/** Minimum fields that must be present in any type of validation request. */
export declare interface ValidationInputRequest {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    validationType: "ValidateAddress" | "ValidateCreateOrderLimit" | "ValidateDataTransferDetails" | "ValidatePreferences" | "ValidateSkuAvailability" | "ValidateSubscriptionIsAllowedToCreateJob";
}

export declare type ValidationInputRequestUnion = ValidationInputRequest | ValidateAddress | CreateOrderLimitForSubscriptionValidationRequest | DataTransferDetailsValidationRequest | PreferencesValidationRequest | SkuAvailabilityValidationRequest | SubscriptionIsAllowedToCreateJobValidationRequest;

/** Minimum properties that should be present in each individual validation response. */
export declare interface ValidationInputResponse {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    validationType: "ValidateAddress" | "ValidateCreateOrderLimit" | "ValidateDataTransferDetails" | "ValidatePreferences" | "ValidateSkuAvailability" | "ValidateSubscriptionIsAllowedToCreateJob";
    /**
     * Error code and message of validation response.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly error?: CloudError;
}

export declare type ValidationInputResponseUnion = ValidationInputResponse | AddressValidationProperties | CreateOrderLimitForSubscriptionValidationResponseProperties | DataTransferDetailsValidationResponseProperties | PreferencesValidationResponseProperties | SkuAvailabilityValidationResponseProperties | SubscriptionIsAllowedToCreateJobValidationResponseProperties;

/** Minimum request requirement of any validation category. */
export declare interface ValidationRequest {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    validationCategory: "JobCreationValidation";
    /** List of request details contain validationType and its request as key and value respectively. */
    individualRequestDetails: ValidationInputRequestUnion[];
}

export declare type ValidationRequestUnion = ValidationRequest | CreateJobValidations;

/** Response of pre job creation validations. */
export declare interface ValidationResponse {
    /**
     * Overall validation status.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: OverallValidationStatus;
    /**
     * List of response details contain validationType and its response as key and value respectively.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly individualResponseDetails?: ValidationInputResponseUnion[];
}

/** Defines values for ValidationStatus. */
export declare type ValidationStatus = "Valid" | "Invalid" | "Skipped";

export { }
