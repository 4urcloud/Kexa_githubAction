'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var coreClient = require('@azure/core-client');
var coreRestPipeline = require('@azure/core-rest-pipeline');
var coreLro = require('@azure/core-lro');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var coreClient__namespace = /*#__PURE__*/_interopNamespace(coreClient);
var coreRestPipeline__namespace = /*#__PURE__*/_interopNamespace(coreRestPipeline);

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const pageMap = new WeakMap();
/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
function getContinuationToken(page) {
    var _a;
    if (typeof page !== "object" || page === null) {
        return undefined;
    }
    return (_a = pageMap.get(page)) === null || _a === void 0 ? void 0 : _a.continuationToken;
}
function setContinuationToken(page, continuationToken) {
    var _a;
    if (typeof page !== "object" || page === null || !continuationToken) {
        return;
    }
    const pageInfo = (_a = pageMap.get(page)) !== null && _a !== void 0 ? _a : {};
    pageInfo.continuationToken = continuationToken;
    pageMap.set(page, pageInfo);
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link StageName} that the service accepts. */
exports.KnownStageName = void 0;
(function (KnownStageName) {
    /** An order has been created. */
    KnownStageName["DeviceOrdered"] = "DeviceOrdered";
    /** A device has been prepared for the order. */
    KnownStageName["DevicePrepared"] = "DevicePrepared";
    /** Device has been dispatched to the user of the order. */
    KnownStageName["Dispatched"] = "Dispatched";
    /** Device has been delivered to the user of the order. */
    KnownStageName["Delivered"] = "Delivered";
    /** Device has been picked up from user and in transit to Azure datacenter. */
    KnownStageName["PickedUp"] = "PickedUp";
    /** Device has been received at Azure datacenter from the user. */
    KnownStageName["AtAzureDC"] = "AtAzureDC";
    /** Data copy from the device at Azure datacenter. */
    KnownStageName["DataCopy"] = "DataCopy";
    /** Order has completed. */
    KnownStageName["Completed"] = "Completed";
    /** Order has completed with errors. */
    KnownStageName["CompletedWithErrors"] = "CompletedWithErrors";
    /** Order has been cancelled. */
    KnownStageName["Cancelled"] = "Cancelled";
    /** Order has failed due to issue reported by user. */
    KnownStageName["FailedIssueReportedAtCustomer"] = "Failed_IssueReportedAtCustomer";
    /** Order has failed due to issue detected at Azure datacenter. */
    KnownStageName["FailedIssueDetectedAtAzureDC"] = "Failed_IssueDetectedAtAzureDC";
    /** Order has been aborted. */
    KnownStageName["Aborted"] = "Aborted";
    /** Order has completed with warnings. */
    KnownStageName["CompletedWithWarnings"] = "CompletedWithWarnings";
    /** Device is ready to be handed to customer from Azure DC. */
    KnownStageName["ReadyToDispatchFromAzureDC"] = "ReadyToDispatchFromAzureDC";
    /** Device can be dropped off at Azure DC. */
    KnownStageName["ReadyToReceiveAtAzureDC"] = "ReadyToReceiveAtAzureDC";
    /** Job created by the customer. */
    KnownStageName["Created"] = "Created";
    /** User shipped the device to AzureDC. */
    KnownStageName["ShippedToAzureDC"] = "ShippedToAzureDC";
    /** Awaiting shipment details of device from customer. */
    KnownStageName["AwaitingShipmentDetails"] = "AwaitingShipmentDetails";
    /** Preparing the device to ship to customer. */
    KnownStageName["PreparingToShipFromAzureDC"] = "PreparingToShipFromAzureDC";
    /** Shipped the device to customer. */
    KnownStageName["ShippedToCustomer"] = "ShippedToCustomer";
})(exports.KnownStageName || (exports.KnownStageName = {}));
/** Known values of {@link NotificationStageName} that the service accepts. */
exports.KnownNotificationStageName = void 0;
(function (KnownNotificationStageName) {
    /** Notification at device prepared stage. */
    KnownNotificationStageName["DevicePrepared"] = "DevicePrepared";
    /** Notification at device dispatched stage. */
    KnownNotificationStageName["Dispatched"] = "Dispatched";
    /** Notification at device delivered stage. */
    KnownNotificationStageName["Delivered"] = "Delivered";
    /** Notification at device picked up from user stage. */
    KnownNotificationStageName["PickedUp"] = "PickedUp";
    /** Notification at device received at Azure datacenter stage. */
    KnownNotificationStageName["AtAzureDC"] = "AtAzureDC";
    /** Notification at data copy started stage. */
    KnownNotificationStageName["DataCopy"] = "DataCopy";
    /** Notification at job created stage. */
    KnownNotificationStageName["Created"] = "Created";
    /** Notification at shipped devices to customer stage. */
    KnownNotificationStageName["ShippedToCustomer"] = "ShippedToCustomer";
})(exports.KnownNotificationStageName || (exports.KnownNotificationStageName = {}));
/** Known values of {@link DataCenterCode} that the service accepts. */
exports.KnownDataCenterCode = void 0;
(function (KnownDataCenterCode) {
    /** Invalid */
    KnownDataCenterCode["Invalid"] = "Invalid";
    /** BY2 */
    KnownDataCenterCode["BY2"] = "BY2";
    /** BY1 */
    KnownDataCenterCode["BY1"] = "BY1";
    /** ORK70 */
    KnownDataCenterCode["ORK70"] = "ORK70";
    /** AM2 */
    KnownDataCenterCode["AM2"] = "AM2";
    /** AMS20 */
    KnownDataCenterCode["AMS20"] = "AMS20";
    /** BY21 */
    KnownDataCenterCode["BY21"] = "BY21";
    /** BY24 */
    KnownDataCenterCode["BY24"] = "BY24";
    /** MWH01 */
    KnownDataCenterCode["MWH01"] = "MWH01";
    /** AMS06 */
    KnownDataCenterCode["AMS06"] = "AMS06";
    /** SSE90 */
    KnownDataCenterCode["SSE90"] = "SSE90";
    /** SYD03 */
    KnownDataCenterCode["SYD03"] = "SYD03";
    /** SYD23 */
    KnownDataCenterCode["SYD23"] = "SYD23";
    /** CBR20 */
    KnownDataCenterCode["CBR20"] = "CBR20";
    /** YTO20 */
    KnownDataCenterCode["YTO20"] = "YTO20";
    /** CWL20 */
    KnownDataCenterCode["CWL20"] = "CWL20";
    /** LON24 */
    KnownDataCenterCode["LON24"] = "LON24";
    /** BOM01 */
    KnownDataCenterCode["BOM01"] = "BOM01";
    /** BL20 */
    KnownDataCenterCode["BL20"] = "BL20";
    /** BL7 */
    KnownDataCenterCode["BL7"] = "BL7";
    /** SEL20 */
    KnownDataCenterCode["SEL20"] = "SEL20";
    /** TYO01 */
    KnownDataCenterCode["TYO01"] = "TYO01";
    /** BN1 */
    KnownDataCenterCode["BN1"] = "BN1";
    /** SN5 */
    KnownDataCenterCode["SN5"] = "SN5";
    /** CYS04 */
    KnownDataCenterCode["CYS04"] = "CYS04";
    /** TYO22 */
    KnownDataCenterCode["TYO22"] = "TYO22";
    /** YTO21 */
    KnownDataCenterCode["YTO21"] = "YTO21";
    /** YQB20 */
    KnownDataCenterCode["YQB20"] = "YQB20";
    /** FRA22 */
    KnownDataCenterCode["FRA22"] = "FRA22";
    /** MAA01 */
    KnownDataCenterCode["MAA01"] = "MAA01";
    /** CPQ02 */
    KnownDataCenterCode["CPQ02"] = "CPQ02";
    /** CPQ20 */
    KnownDataCenterCode["CPQ20"] = "CPQ20";
    /** SIN20 */
    KnownDataCenterCode["SIN20"] = "SIN20";
    /** HKG20 */
    KnownDataCenterCode["HKG20"] = "HKG20";
    /** SG2 */
    KnownDataCenterCode["SG2"] = "SG2";
    /** MEL23 */
    KnownDataCenterCode["MEL23"] = "MEL23";
    /** SEL21 */
    KnownDataCenterCode["SEL21"] = "SEL21";
    /** OSA20 */
    KnownDataCenterCode["OSA20"] = "OSA20";
    /** SHA03 */
    KnownDataCenterCode["SHA03"] = "SHA03";
    /** BJB */
    KnownDataCenterCode["BJB"] = "BJB";
    /** JNB22 */
    KnownDataCenterCode["JNB22"] = "JNB22";
    /** JNB21 */
    KnownDataCenterCode["JNB21"] = "JNB21";
    /** MNZ21 */
    KnownDataCenterCode["MNZ21"] = "MNZ21";
    /** SN8 */
    KnownDataCenterCode["SN8"] = "SN8";
    /** AUH20 */
    KnownDataCenterCode["AUH20"] = "AUH20";
    /** ZRH20 */
    KnownDataCenterCode["ZRH20"] = "ZRH20";
    /** PUS20 */
    KnownDataCenterCode["PUS20"] = "PUS20";
    /** AdHoc */
    KnownDataCenterCode["AdHoc"] = "AdHoc";
    /** CH1 */
    KnownDataCenterCode["CH1"] = "CH1";
    /** DSM05 */
    KnownDataCenterCode["DSM05"] = "DSM05";
    /** DUB07 */
    KnownDataCenterCode["DUB07"] = "DUB07";
    /** PNQ01 */
    KnownDataCenterCode["PNQ01"] = "PNQ01";
    /** SVG20 */
    KnownDataCenterCode["SVG20"] = "SVG20";
    /** OSA02 */
    KnownDataCenterCode["OSA02"] = "OSA02";
    /** OSA22 */
    KnownDataCenterCode["OSA22"] = "OSA22";
    /** PAR22 */
    KnownDataCenterCode["PAR22"] = "PAR22";
    /** BN7 */
    KnownDataCenterCode["BN7"] = "BN7";
    /** SN6 */
    KnownDataCenterCode["SN6"] = "SN6";
    /** BJS20 */
    KnownDataCenterCode["BJS20"] = "BJS20";
})(exports.KnownDataCenterCode || (exports.KnownDataCenterCode = {}));
/** Known values of {@link CopyStatus} that the service accepts. */
exports.KnownCopyStatus = void 0;
(function (KnownCopyStatus) {
    /** Data copy hasn't started yet. */
    KnownCopyStatus["NotStarted"] = "NotStarted";
    /** Data copy is in progress. */
    KnownCopyStatus["InProgress"] = "InProgress";
    /** Data copy completed. */
    KnownCopyStatus["Completed"] = "Completed";
    /** Data copy completed with errors. */
    KnownCopyStatus["CompletedWithErrors"] = "CompletedWithErrors";
    /** Data copy failed. No data was copied. */
    KnownCopyStatus["Failed"] = "Failed";
    /** No copy triggered as device was not returned. */
    KnownCopyStatus["NotReturned"] = "NotReturned";
    /** The Device has hit hardware issues. */
    KnownCopyStatus["HardwareError"] = "HardwareError";
    /** Data copy failed. The Device was formatted by user. */
    KnownCopyStatus["DeviceFormatted"] = "DeviceFormatted";
    /** Data copy failed. Device metadata was modified by user. */
    KnownCopyStatus["DeviceMetadataModified"] = "DeviceMetadataModified";
    /** Data copy failed. Storage Account was not accessible during copy. */
    KnownCopyStatus["StorageAccountNotAccessible"] = "StorageAccountNotAccessible";
    /** Data copy failed. The Device data content is not supported. */
    KnownCopyStatus["UnsupportedData"] = "UnsupportedData";
    /** No copy triggered as device was not received. */
    KnownCopyStatus["DriveNotReceived"] = "DriveNotReceived";
    /** No copy triggered as device type is not supported. */
    KnownCopyStatus["UnsupportedDrive"] = "UnsupportedDrive";
    /** Copy failed due to service error. */
    KnownCopyStatus["OtherServiceError"] = "OtherServiceError";
    /** Copy failed due to user error. */
    KnownCopyStatus["OtherUserError"] = "OtherUserError";
    /** Copy failed due to disk detection error. */
    KnownCopyStatus["DriveNotDetected"] = "DriveNotDetected";
    /** Copy failed due to corrupted drive. */
    KnownCopyStatus["DriveCorrupted"] = "DriveCorrupted";
    /** Copy failed due to modified or removed metadata files. */
    KnownCopyStatus["MetadataFilesModifiedOrRemoved"] = "MetadataFilesModifiedOrRemoved";
})(exports.KnownCopyStatus || (exports.KnownCopyStatus = {}));

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const OperationList = {
    type: {
        name: "Composite",
        className: "OperationList",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Operation"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Operation = {
    type: {
        name: "Composite",
        className: "Operation",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            display: {
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "OperationDisplay"
                }
            },
            properties: {
                serializedName: "properties",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            },
            origin: {
                serializedName: "origin",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            isDataAction: {
                serializedName: "isDataAction",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const OperationDisplay = {
    type: {
        name: "Composite",
        className: "OperationDisplay",
        modelProperties: {
            provider: {
                serializedName: "provider",
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "resource",
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ApiError = {
    type: {
        name: "Composite",
        className: "ApiError",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorDetail"
                }
            }
        }
    }
};
const ErrorDetail = {
    type: {
        name: "Composite",
        className: "ErrorDetail",
        modelProperties: {
            code: {
                serializedName: "code",
                required: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                required: true,
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Details"
                        }
                    }
                }
            },
            target: {
                serializedName: "target",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Details = {
    type: {
        name: "Composite",
        className: "Details",
        modelProperties: {
            code: {
                serializedName: "code",
                required: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const JobResourceList = {
    type: {
        name: "Composite",
        className: "JobResourceList",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "JobResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CloudError = {
    type: {
        name: "Composite",
        className: "CloudError",
        modelProperties: {
            additionalInfo: {
                serializedName: "additionalInfo",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AdditionalErrorInfo"
                        }
                    }
                }
            },
            code: {
                serializedName: "code",
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CloudError"
                        }
                    }
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AdditionalErrorInfo = {
    type: {
        name: "Composite",
        className: "AdditionalErrorInfo",
        modelProperties: {
            info: {
                serializedName: "info",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const JobDetails = {
    type: {
        name: "Composite",
        className: "JobDetails",
        uberParent: "JobDetails",
        polymorphicDiscriminator: {
            serializedName: "jobDetailsType",
            clientName: "jobDetailsType"
        },
        modelProperties: {
            jobStages: {
                serializedName: "jobStages",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "JobStages"
                        }
                    }
                }
            },
            contactDetails: {
                serializedName: "contactDetails",
                type: {
                    name: "Composite",
                    className: "ContactDetails"
                }
            },
            shippingAddress: {
                serializedName: "shippingAddress",
                type: {
                    name: "Composite",
                    className: "ShippingAddress"
                }
            },
            deliveryPackage: {
                serializedName: "deliveryPackage",
                type: {
                    name: "Composite",
                    className: "PackageShippingDetails"
                }
            },
            returnPackage: {
                serializedName: "returnPackage",
                type: {
                    name: "Composite",
                    className: "PackageShippingDetails"
                }
            },
            dataImportDetails: {
                serializedName: "dataImportDetails",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DataImportDetails"
                        }
                    }
                }
            },
            dataExportDetails: {
                serializedName: "dataExportDetails",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DataExportDetails"
                        }
                    }
                }
            },
            jobDetailsType: {
                serializedName: "jobDetailsType",
                required: true,
                type: {
                    name: "Enum",
                    allowedValues: [
                        "DataBox",
                        "DataBoxDisk",
                        "DataBoxHeavy",
                        "DataBoxCustomerDisk"
                    ]
                }
            },
            preferences: {
                serializedName: "preferences",
                type: {
                    name: "Composite",
                    className: "Preferences"
                }
            },
            reverseShippingDetails: {
                serializedName: "reverseShippingDetails",
                type: {
                    name: "Composite",
                    className: "ReverseShippingDetails"
                }
            },
            copyLogDetails: {
                serializedName: "copyLogDetails",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CopyLogDetails"
                        }
                    }
                }
            },
            reverseShipmentLabelSasKey: {
                serializedName: "reverseShipmentLabelSasKey",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            chainOfCustodySasKey: {
                serializedName: "chainOfCustodySasKey",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            deviceErasureDetails: {
                serializedName: "deviceErasureDetails",
                type: {
                    name: "Composite",
                    className: "DeviceErasureDetails"
                }
            },
            keyEncryptionKey: {
                serializedName: "keyEncryptionKey",
                type: {
                    name: "Composite",
                    className: "KeyEncryptionKey"
                }
            },
            expectedDataSizeInTeraBytes: {
                serializedName: "expectedDataSizeInTeraBytes",
                type: {
                    name: "Number"
                }
            },
            actions: {
                serializedName: "actions",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Enum",
                            allowedValues: [
                                "None",
                                "MoveToCleanUpDevice",
                                "Resume",
                                "Restart",
                                "ReachOutToOperation"
                            ]
                        }
                    }
                }
            },
            lastMitigationActionOnJob: {
                serializedName: "lastMitigationActionOnJob",
                type: {
                    name: "Composite",
                    className: "LastMitigationActionOnJob"
                }
            },
            datacenterAddress: {
                serializedName: "datacenterAddress",
                type: {
                    name: "Composite",
                    className: "DatacenterAddressResponse"
                }
            },
            dataCenterCode: {
                serializedName: "dataCenterCode",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const JobStages = {
    type: {
        name: "Composite",
        className: "JobStages",
        modelProperties: {
            stageName: {
                serializedName: "stageName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            stageStatus: {
                serializedName: "stageStatus",
                readOnly: true,
                type: {
                    name: "Enum",
                    allowedValues: [
                        "None",
                        "InProgress",
                        "Succeeded",
                        "Failed",
                        "Cancelled",
                        "Cancelling",
                        "SucceededWithErrors",
                        "WaitingForCustomerAction",
                        "SucceededWithWarnings",
                        "WaitingForCustomerActionForKek",
                        "WaitingForCustomerActionForCleanUp",
                        "CustomerActionPerformedForCleanUp",
                        "CustomerActionPerformed"
                    ]
                }
            },
            stageTime: {
                serializedName: "stageTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            jobStageDetails: {
                serializedName: "jobStageDetails",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
const ContactDetails = {
    type: {
        name: "Composite",
        className: "ContactDetails",
        modelProperties: {
            contactName: {
                serializedName: "contactName",
                required: true,
                type: {
                    name: "String"
                }
            },
            phone: {
                serializedName: "phone",
                required: true,
                type: {
                    name: "String"
                }
            },
            phoneExtension: {
                serializedName: "phoneExtension",
                type: {
                    name: "String"
                }
            },
            mobile: {
                serializedName: "mobile",
                type: {
                    name: "String"
                }
            },
            emailList: {
                serializedName: "emailList",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            notificationPreference: {
                serializedName: "notificationPreference",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "NotificationPreference"
                        }
                    }
                }
            }
        }
    }
};
const NotificationPreference = {
    type: {
        name: "Composite",
        className: "NotificationPreference",
        modelProperties: {
            stageName: {
                serializedName: "stageName",
                required: true,
                type: {
                    name: "String"
                }
            },
            sendNotification: {
                defaultValue: true,
                serializedName: "sendNotification",
                required: true,
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const ShippingAddress = {
    type: {
        name: "Composite",
        className: "ShippingAddress",
        modelProperties: {
            streetAddress1: {
                serializedName: "streetAddress1",
                required: true,
                type: {
                    name: "String"
                }
            },
            streetAddress2: {
                serializedName: "streetAddress2",
                type: {
                    name: "String"
                }
            },
            streetAddress3: {
                serializedName: "streetAddress3",
                type: {
                    name: "String"
                }
            },
            city: {
                serializedName: "city",
                type: {
                    name: "String"
                }
            },
            stateOrProvince: {
                serializedName: "stateOrProvince",
                type: {
                    name: "String"
                }
            },
            country: {
                serializedName: "country",
                required: true,
                type: {
                    name: "String"
                }
            },
            postalCode: {
                serializedName: "postalCode",
                type: {
                    name: "String"
                }
            },
            zipExtendedCode: {
                serializedName: "zipExtendedCode",
                type: {
                    name: "String"
                }
            },
            companyName: {
                serializedName: "companyName",
                type: {
                    name: "String"
                }
            },
            addressType: {
                defaultValue: "None",
                serializedName: "addressType",
                type: {
                    name: "Enum",
                    allowedValues: ["None", "Residential", "Commercial"]
                }
            },
            skipAddressValidation: {
                serializedName: "skipAddressValidation",
                type: {
                    name: "Boolean"
                }
            },
            taxIdentificationNumber: {
                serializedName: "taxIdentificationNumber",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PackageShippingDetails = {
    type: {
        name: "Composite",
        className: "PackageShippingDetails",
        modelProperties: {
            trackingUrl: {
                serializedName: "trackingUrl",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            carrierName: {
                serializedName: "carrierName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            trackingId: {
                serializedName: "trackingId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DataImportDetails = {
    type: {
        name: "Composite",
        className: "DataImportDetails",
        modelProperties: {
            accountDetails: {
                serializedName: "accountDetails",
                type: {
                    name: "Composite",
                    className: "DataAccountDetails"
                }
            },
            logCollectionLevel: {
                serializedName: "logCollectionLevel",
                type: {
                    name: "Enum",
                    allowedValues: ["Error", "Verbose"]
                }
            }
        }
    }
};
const DataAccountDetails = {
    type: {
        name: "Composite",
        className: "DataAccountDetails",
        uberParent: "DataAccountDetails",
        polymorphicDiscriminator: {
            serializedName: "dataAccountType",
            clientName: "dataAccountType"
        },
        modelProperties: {
            dataAccountType: {
                serializedName: "dataAccountType",
                required: true,
                type: {
                    name: "Enum",
                    allowedValues: ["StorageAccount", "ManagedDisk"]
                }
            },
            sharePassword: {
                serializedName: "sharePassword",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DataExportDetails = {
    type: {
        name: "Composite",
        className: "DataExportDetails",
        modelProperties: {
            transferConfiguration: {
                serializedName: "transferConfiguration",
                type: {
                    name: "Composite",
                    className: "TransferConfiguration"
                }
            },
            logCollectionLevel: {
                serializedName: "logCollectionLevel",
                type: {
                    name: "Enum",
                    allowedValues: ["Error", "Verbose"]
                }
            },
            accountDetails: {
                serializedName: "accountDetails",
                type: {
                    name: "Composite",
                    className: "DataAccountDetails"
                }
            }
        }
    }
};
const TransferConfiguration = {
    type: {
        name: "Composite",
        className: "TransferConfiguration",
        modelProperties: {
            transferConfigurationType: {
                serializedName: "transferConfigurationType",
                required: true,
                type: {
                    name: "Enum",
                    allowedValues: ["TransferAll", "TransferUsingFilter"]
                }
            },
            transferFilterDetails: {
                serializedName: "transferFilterDetails",
                type: {
                    name: "Composite",
                    className: "TransferConfigurationTransferFilterDetails"
                }
            },
            transferAllDetails: {
                serializedName: "transferAllDetails",
                type: {
                    name: "Composite",
                    className: "TransferConfigurationTransferAllDetails"
                }
            }
        }
    }
};
const TransferConfigurationTransferFilterDetails = {
    type: {
        name: "Composite",
        className: "TransferConfigurationTransferFilterDetails",
        modelProperties: {
            include: {
                serializedName: "include",
                type: {
                    name: "Composite",
                    className: "TransferFilterDetails"
                }
            }
        }
    }
};
const TransferFilterDetails = {
    type: {
        name: "Composite",
        className: "TransferFilterDetails",
        modelProperties: {
            dataAccountType: {
                serializedName: "dataAccountType",
                required: true,
                type: {
                    name: "Enum",
                    allowedValues: ["StorageAccount", "ManagedDisk"]
                }
            },
            blobFilterDetails: {
                serializedName: "blobFilterDetails",
                type: {
                    name: "Composite",
                    className: "BlobFilterDetails"
                }
            },
            azureFileFilterDetails: {
                serializedName: "azureFileFilterDetails",
                type: {
                    name: "Composite",
                    className: "AzureFileFilterDetails"
                }
            },
            filterFileDetails: {
                serializedName: "filterFileDetails",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "FilterFileDetails"
                        }
                    }
                }
            }
        }
    }
};
const BlobFilterDetails = {
    type: {
        name: "Composite",
        className: "BlobFilterDetails",
        modelProperties: {
            blobPrefixList: {
                serializedName: "blobPrefixList",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            blobPathList: {
                serializedName: "blobPathList",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            containerList: {
                serializedName: "containerList",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const AzureFileFilterDetails = {
    type: {
        name: "Composite",
        className: "AzureFileFilterDetails",
        modelProperties: {
            filePrefixList: {
                serializedName: "filePrefixList",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            filePathList: {
                serializedName: "filePathList",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            fileShareList: {
                serializedName: "fileShareList",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const FilterFileDetails = {
    type: {
        name: "Composite",
        className: "FilterFileDetails",
        modelProperties: {
            filterFileType: {
                serializedName: "filterFileType",
                required: true,
                type: {
                    name: "Enum",
                    allowedValues: ["AzureBlob", "AzureFile"]
                }
            },
            filterFilePath: {
                serializedName: "filterFilePath",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TransferConfigurationTransferAllDetails = {
    type: {
        name: "Composite",
        className: "TransferConfigurationTransferAllDetails",
        modelProperties: {
            include: {
                serializedName: "include",
                type: {
                    name: "Composite",
                    className: "TransferAllDetails"
                }
            }
        }
    }
};
const TransferAllDetails = {
    type: {
        name: "Composite",
        className: "TransferAllDetails",
        modelProperties: {
            dataAccountType: {
                serializedName: "dataAccountType",
                required: true,
                type: {
                    name: "Enum",
                    allowedValues: ["StorageAccount", "ManagedDisk"]
                }
            },
            transferAllBlobs: {
                serializedName: "transferAllBlobs",
                type: {
                    name: "Boolean"
                }
            },
            transferAllFiles: {
                serializedName: "transferAllFiles",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const Preferences = {
    type: {
        name: "Composite",
        className: "Preferences",
        modelProperties: {
            preferredDataCenterRegion: {
                serializedName: "preferredDataCenterRegion",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            transportPreferences: {
                serializedName: "transportPreferences",
                type: {
                    name: "Composite",
                    className: "TransportPreferences"
                }
            },
            reverseTransportPreferences: {
                serializedName: "reverseTransportPreferences",
                type: {
                    name: "Composite",
                    className: "TransportPreferences"
                }
            },
            encryptionPreferences: {
                serializedName: "encryptionPreferences",
                type: {
                    name: "Composite",
                    className: "EncryptionPreferences"
                }
            },
            storageAccountAccessTierPreferences: {
                serializedName: "storageAccountAccessTierPreferences",
                type: {
                    name: "Sequence",
                    element: {
                        defaultValue: "Archive",
                        isConstant: true,
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const TransportPreferences = {
    type: {
        name: "Composite",
        className: "TransportPreferences",
        modelProperties: {
            preferredShipmentType: {
                serializedName: "preferredShipmentType",
                required: true,
                type: {
                    name: "Enum",
                    allowedValues: ["CustomerManaged", "MicrosoftManaged"]
                }
            },
            isUpdated: {
                serializedName: "isUpdated",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const EncryptionPreferences = {
    type: {
        name: "Composite",
        className: "EncryptionPreferences",
        modelProperties: {
            doubleEncryption: {
                defaultValue: "Disabled",
                serializedName: "doubleEncryption",
                type: {
                    name: "Enum",
                    allowedValues: ["Enabled", "Disabled"]
                }
            },
            hardwareEncryption: {
                serializedName: "hardwareEncryption",
                type: {
                    name: "Enum",
                    allowedValues: ["Enabled", "Disabled"]
                }
            }
        }
    }
};
const ReverseShippingDetails = {
    type: {
        name: "Composite",
        className: "ReverseShippingDetails",
        modelProperties: {
            contactDetails: {
                serializedName: "contactDetails",
                type: {
                    name: "Composite",
                    className: "ContactInfo"
                }
            },
            shippingAddress: {
                serializedName: "shippingAddress",
                type: {
                    name: "Composite",
                    className: "ShippingAddress"
                }
            },
            isUpdated: {
                serializedName: "isUpdated",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const ContactInfo = {
    type: {
        name: "Composite",
        className: "ContactInfo",
        modelProperties: {
            contactName: {
                constraints: {
                    MinLength: 1
                },
                serializedName: "contactName",
                required: true,
                type: {
                    name: "String"
                }
            },
            phone: {
                constraints: {
                    MinLength: 1
                },
                serializedName: "phone",
                required: true,
                type: {
                    name: "String"
                }
            },
            phoneExtension: {
                serializedName: "phoneExtension",
                type: {
                    name: "String"
                }
            },
            mobile: {
                serializedName: "mobile",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CopyLogDetails = {
    type: {
        name: "Composite",
        className: "CopyLogDetails",
        uberParent: "CopyLogDetails",
        polymorphicDiscriminator: {
            serializedName: "copyLogDetailsType",
            clientName: "copyLogDetailsType"
        },
        modelProperties: {
            copyLogDetailsType: {
                serializedName: "copyLogDetailsType",
                required: true,
                type: {
                    name: "Enum",
                    allowedValues: [
                        "DataBox",
                        "DataBoxDisk",
                        "DataBoxHeavy",
                        "DataBoxCustomerDisk"
                    ]
                }
            }
        }
    }
};
const DeviceErasureDetails = {
    type: {
        name: "Composite",
        className: "DeviceErasureDetails",
        modelProperties: {
            deviceErasureStatus: {
                serializedName: "deviceErasureStatus",
                readOnly: true,
                type: {
                    name: "Enum",
                    allowedValues: [
                        "None",
                        "InProgress",
                        "Succeeded",
                        "Failed",
                        "Cancelled",
                        "Cancelling",
                        "SucceededWithErrors",
                        "WaitingForCustomerAction",
                        "SucceededWithWarnings",
                        "WaitingForCustomerActionForKek",
                        "WaitingForCustomerActionForCleanUp",
                        "CustomerActionPerformedForCleanUp",
                        "CustomerActionPerformed"
                    ]
                }
            },
            erasureOrDestructionCertificateSasKey: {
                serializedName: "erasureOrDestructionCertificateSasKey",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const KeyEncryptionKey = {
    type: {
        name: "Composite",
        className: "KeyEncryptionKey",
        modelProperties: {
            kekType: {
                defaultValue: "MicrosoftManaged",
                serializedName: "kekType",
                required: true,
                type: {
                    name: "Enum",
                    allowedValues: ["MicrosoftManaged", "CustomerManaged"]
                }
            },
            identityProperties: {
                serializedName: "identityProperties",
                type: {
                    name: "Composite",
                    className: "IdentityProperties"
                }
            },
            kekUrl: {
                serializedName: "kekUrl",
                type: {
                    name: "String"
                }
            },
            kekVaultResourceID: {
                serializedName: "kekVaultResourceID",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const IdentityProperties = {
    type: {
        name: "Composite",
        className: "IdentityProperties",
        modelProperties: {
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            userAssigned: {
                serializedName: "userAssigned",
                type: {
                    name: "Composite",
                    className: "UserAssignedProperties"
                }
            }
        }
    }
};
const UserAssignedProperties = {
    type: {
        name: "Composite",
        className: "UserAssignedProperties",
        modelProperties: {
            resourceId: {
                serializedName: "resourceId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const LastMitigationActionOnJob = {
    type: {
        name: "Composite",
        className: "LastMitigationActionOnJob",
        modelProperties: {
            actionDateTimeInUtc: {
                serializedName: "actionDateTimeInUtc",
                type: {
                    name: "DateTime"
                }
            },
            isPerformedByCustomer: {
                serializedName: "isPerformedByCustomer",
                type: {
                    name: "Boolean"
                }
            },
            customerResolution: {
                serializedName: "customerResolution",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "None",
                        "MoveToCleanUpDevice",
                        "Resume",
                        "Restart",
                        "ReachOutToOperation"
                    ]
                }
            }
        }
    }
};
const DatacenterAddressResponse = {
    type: {
        name: "Composite",
        className: "DatacenterAddressResponse",
        uberParent: "DatacenterAddressResponse",
        polymorphicDiscriminator: {
            serializedName: "datacenterAddressType",
            clientName: "datacenterAddressType"
        },
        modelProperties: {
            datacenterAddressType: {
                serializedName: "datacenterAddressType",
                required: true,
                type: {
                    name: "Enum",
                    allowedValues: [
                        "DatacenterAddressLocation",
                        "DatacenterAddressInstruction"
                    ]
                }
            },
            supportedCarriersForReturnShipment: {
                serializedName: "supportedCarriersForReturnShipment",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            dataCenterAzureLocation: {
                serializedName: "dataCenterAzureLocation",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const JobDeliveryInfo = {
    type: {
        name: "Composite",
        className: "JobDeliveryInfo",
        modelProperties: {
            scheduledDateTime: {
                serializedName: "scheduledDateTime",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const SystemData = {
    type: {
        name: "Composite",
        className: "SystemData",
        modelProperties: {
            createdBy: {
                serializedName: "createdBy",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            createdByType: {
                serializedName: "createdByType",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            createdAt: {
                serializedName: "createdAt",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            lastModifiedBy: {
                serializedName: "lastModifiedBy",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            lastModifiedByType: {
                serializedName: "lastModifiedByType",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            lastModifiedAt: {
                serializedName: "lastModifiedAt",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const Resource = {
    type: {
        name: "Composite",
        className: "Resource",
        modelProperties: {
            location: {
                serializedName: "location",
                required: true,
                type: {
                    name: "String"
                }
            },
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "Sku"
                }
            },
            identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "ResourceIdentity"
                }
            }
        }
    }
};
const Sku = {
    type: {
        name: "Composite",
        className: "Sku",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "Enum",
                    allowedValues: [
                        "DataBox",
                        "DataBoxDisk",
                        "DataBoxHeavy",
                        "DataBoxCustomerDisk"
                    ]
                }
            },
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            },
            family: {
                serializedName: "family",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ResourceIdentity = {
    type: {
        name: "Composite",
        className: "ResourceIdentity",
        modelProperties: {
            type: {
                defaultValue: "None",
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            principalId: {
                serializedName: "principalId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            tenantId: {
                serializedName: "tenantId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            userAssignedIdentities: {
                serializedName: "userAssignedIdentities",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Composite", className: "UserAssignedIdentity" }
                    }
                }
            }
        }
    }
};
const UserAssignedIdentity = {
    type: {
        name: "Composite",
        className: "UserAssignedIdentity",
        modelProperties: {
            principalId: {
                serializedName: "principalId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            clientId: {
                serializedName: "clientId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MitigateJobRequest = {
    type: {
        name: "Composite",
        className: "MitigateJobRequest",
        modelProperties: {
            customerResolutionCode: {
                serializedName: "customerResolutionCode",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "None",
                        "MoveToCleanUpDevice",
                        "Resume",
                        "Restart",
                        "ReachOutToOperation"
                    ]
                }
            },
            serialNumberCustomerResolutionMap: {
                serializedName: "serialNumberCustomerResolutionMap",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Enum",
                            allowedValues: [
                                "None",
                                "MoveToCleanUpDevice",
                                "Resume",
                                "Restart",
                                "ReachOutToOperation"
                            ]
                        }
                    }
                }
            }
        }
    }
};
const MarkDevicesShippedRequest = {
    type: {
        name: "Composite",
        className: "MarkDevicesShippedRequest",
        modelProperties: {
            deliverToDcPackageDetails: {
                serializedName: "deliverToDcPackageDetails",
                type: {
                    name: "Composite",
                    className: "PackageCarrierInfo"
                }
            }
        }
    }
};
const PackageCarrierInfo = {
    type: {
        name: "Composite",
        className: "PackageCarrierInfo",
        modelProperties: {
            carrierName: {
                serializedName: "carrierName",
                type: {
                    name: "String"
                }
            },
            trackingId: {
                serializedName: "trackingId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AvailableSkuRequest = {
    type: {
        name: "Composite",
        className: "AvailableSkuRequest",
        modelProperties: {
            transferType: {
                serializedName: "transferType",
                required: true,
                type: {
                    name: "Enum",
                    allowedValues: ["ImportToAzure", "ExportFromAzure"]
                }
            },
            country: {
                serializedName: "country",
                required: true,
                type: {
                    name: "String"
                }
            },
            location: {
                serializedName: "location",
                required: true,
                type: {
                    name: "String"
                }
            },
            skuNames: {
                serializedName: "skuNames",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Enum",
                            allowedValues: [
                                "DataBox",
                                "DataBoxDisk",
                                "DataBoxHeavy",
                                "DataBoxCustomerDisk"
                            ]
                        }
                    }
                }
            }
        }
    }
};
const AvailableSkusResult = {
    type: {
        name: "Composite",
        className: "AvailableSkusResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SkuInformation"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SkuInformation = {
    type: {
        name: "Composite",
        className: "SkuInformation",
        modelProperties: {
            sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "Sku"
                }
            },
            enabled: {
                serializedName: "enabled",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            dataLocationToServiceLocationMap: {
                serializedName: "properties.dataLocationToServiceLocationMap",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DataLocationToServiceLocationMap"
                        }
                    }
                }
            },
            capacity: {
                serializedName: "properties.capacity",
                type: {
                    name: "Composite",
                    className: "SkuCapacity"
                }
            },
            costs: {
                serializedName: "properties.costs",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SkuCost"
                        }
                    }
                }
            },
            apiVersions: {
                serializedName: "properties.apiVersions",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            disabledReason: {
                serializedName: "properties.disabledReason",
                readOnly: true,
                type: {
                    name: "Enum",
                    allowedValues: [
                        "None",
                        "Country",
                        "Region",
                        "Feature",
                        "OfferType",
                        "NoSubscriptionInfo"
                    ]
                }
            },
            disabledReasonMessage: {
                serializedName: "properties.disabledReasonMessage",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            requiredFeature: {
                serializedName: "properties.requiredFeature",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            countriesWithinCommerceBoundary: {
                serializedName: "properties.countriesWithinCommerceBoundary",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const DataLocationToServiceLocationMap = {
    type: {
        name: "Composite",
        className: "DataLocationToServiceLocationMap",
        modelProperties: {
            dataLocation: {
                serializedName: "dataLocation",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            serviceLocation: {
                serializedName: "serviceLocation",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SkuCapacity = {
    type: {
        name: "Composite",
        className: "SkuCapacity",
        modelProperties: {
            usable: {
                serializedName: "usable",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            maximum: {
                serializedName: "maximum",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SkuCost = {
    type: {
        name: "Composite",
        className: "SkuCost",
        modelProperties: {
            meterId: {
                serializedName: "meterId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            meterType: {
                serializedName: "meterType",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            multiplier: {
                serializedName: "multiplier",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const ValidationInputRequest = {
    type: {
        name: "Composite",
        className: "ValidationInputRequest",
        uberParent: "ValidationInputRequest",
        polymorphicDiscriminator: {
            serializedName: "validationType",
            clientName: "validationType"
        },
        modelProperties: {
            validationType: {
                serializedName: "validationType",
                required: true,
                type: {
                    name: "Enum",
                    allowedValues: [
                        "ValidateAddress",
                        "ValidateSubscriptionIsAllowedToCreateJob",
                        "ValidatePreferences",
                        "ValidateCreateOrderLimit",
                        "ValidateSkuAvailability",
                        "ValidateDataTransferDetails"
                    ]
                }
            }
        }
    }
};
const AddressValidationOutput = {
    type: {
        name: "Composite",
        className: "AddressValidationOutput",
        modelProperties: {
            validationType: {
                serializedName: "properties.validationType",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "ValidateAddress",
                        "ValidateSubscriptionIsAllowedToCreateJob",
                        "ValidatePreferences",
                        "ValidateCreateOrderLimit",
                        "ValidateSkuAvailability",
                        "ValidateDataTransferDetails"
                    ]
                }
            },
            error: {
                serializedName: "properties.error",
                type: {
                    name: "Composite",
                    className: "CloudError"
                }
            },
            validationStatus: {
                serializedName: "properties.validationStatus",
                readOnly: true,
                type: {
                    name: "Enum",
                    allowedValues: ["Valid", "Invalid", "Ambiguous"]
                }
            },
            alternateAddresses: {
                serializedName: "properties.alternateAddresses",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ShippingAddress"
                        }
                    }
                }
            }
        }
    }
};
const ValidationInputResponse = {
    type: {
        name: "Composite",
        className: "ValidationInputResponse",
        uberParent: "ValidationInputResponse",
        polymorphicDiscriminator: {
            serializedName: "validationType",
            clientName: "validationType"
        },
        modelProperties: {
            validationType: {
                serializedName: "validationType",
                required: true,
                type: {
                    name: "Enum",
                    allowedValues: [
                        "ValidateAddress",
                        "ValidateSubscriptionIsAllowedToCreateJob",
                        "ValidatePreferences",
                        "ValidateCreateOrderLimit",
                        "ValidateSkuAvailability",
                        "ValidateDataTransferDetails"
                    ]
                }
            },
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "CloudError"
                }
            }
        }
    }
};
const ValidationRequest = {
    type: {
        name: "Composite",
        className: "ValidationRequest",
        uberParent: "ValidationRequest",
        polymorphicDiscriminator: {
            serializedName: "validationCategory",
            clientName: "validationCategory"
        },
        modelProperties: {
            validationCategory: {
                defaultValue: "JobCreationValidation",
                isConstant: true,
                serializedName: "validationCategory",
                type: {
                    name: "String"
                }
            },
            individualRequestDetails: {
                serializedName: "individualRequestDetails",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ValidationInputRequest"
                        }
                    }
                }
            }
        }
    }
};
const ValidationResponse = {
    type: {
        name: "Composite",
        className: "ValidationResponse",
        modelProperties: {
            status: {
                serializedName: "properties.status",
                readOnly: true,
                type: {
                    name: "Enum",
                    allowedValues: [
                        "AllValidToProceed",
                        "InputsRevisitRequired",
                        "CertainInputValidationsSkipped"
                    ]
                }
            },
            individualResponseDetails: {
                serializedName: "properties.individualResponseDetails",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ValidationInputResponse"
                        }
                    }
                }
            }
        }
    }
};
const JobResourceUpdateParameter = {
    type: {
        name: "Composite",
        className: "JobResourceUpdateParameter",
        modelProperties: {
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "ResourceIdentity"
                }
            },
            details: {
                serializedName: "properties.details",
                type: {
                    name: "Composite",
                    className: "UpdateJobDetails"
                }
            }
        }
    }
};
const UpdateJobDetails = {
    type: {
        name: "Composite",
        className: "UpdateJobDetails",
        modelProperties: {
            contactDetails: {
                serializedName: "contactDetails",
                type: {
                    name: "Composite",
                    className: "ContactDetails"
                }
            },
            shippingAddress: {
                serializedName: "shippingAddress",
                type: {
                    name: "Composite",
                    className: "ShippingAddress"
                }
            },
            reverseShippingDetails: {
                serializedName: "reverseShippingDetails",
                type: {
                    name: "Composite",
                    className: "ReverseShippingDetails"
                }
            },
            preferences: {
                serializedName: "preferences",
                type: {
                    name: "Composite",
                    className: "Preferences"
                }
            },
            keyEncryptionKey: {
                serializedName: "keyEncryptionKey",
                type: {
                    name: "Composite",
                    className: "KeyEncryptionKey"
                }
            },
            returnToCustomerPackageDetails: {
                serializedName: "returnToCustomerPackageDetails",
                type: {
                    name: "Composite",
                    className: "PackageCarrierDetails"
                }
            }
        }
    }
};
const PackageCarrierDetails = {
    type: {
        name: "Composite",
        className: "PackageCarrierDetails",
        modelProperties: {
            carrierAccountNumber: {
                serializedName: "carrierAccountNumber",
                type: {
                    name: "String"
                }
            },
            carrierName: {
                serializedName: "carrierName",
                type: {
                    name: "String"
                }
            },
            trackingId: {
                serializedName: "trackingId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ShipmentPickUpRequest = {
    type: {
        name: "Composite",
        className: "ShipmentPickUpRequest",
        modelProperties: {
            startTime: {
                serializedName: "startTime",
                required: true,
                type: {
                    name: "DateTime"
                }
            },
            endTime: {
                serializedName: "endTime",
                required: true,
                type: {
                    name: "DateTime"
                }
            },
            shipmentLocation: {
                serializedName: "shipmentLocation",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ShipmentPickUpResponse = {
    type: {
        name: "Composite",
        className: "ShipmentPickUpResponse",
        modelProperties: {
            confirmationNumber: {
                serializedName: "confirmationNumber",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            readyByTime: {
                serializedName: "readyByTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const CancellationReason = {
    type: {
        name: "Composite",
        className: "CancellationReason",
        modelProperties: {
            reason: {
                serializedName: "reason",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const UnencryptedCredentialsList = {
    type: {
        name: "Composite",
        className: "UnencryptedCredentialsList",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "UnencryptedCredentials"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const UnencryptedCredentials = {
    type: {
        name: "Composite",
        className: "UnencryptedCredentials",
        modelProperties: {
            jobName: {
                serializedName: "jobName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            jobSecrets: {
                serializedName: "jobSecrets",
                type: {
                    name: "Composite",
                    className: "JobSecrets"
                }
            }
        }
    }
};
const JobSecrets = {
    type: {
        name: "Composite",
        className: "JobSecrets",
        uberParent: "JobSecrets",
        polymorphicDiscriminator: {
            serializedName: "jobSecretsType",
            clientName: "jobSecretsType"
        },
        modelProperties: {
            jobSecretsType: {
                serializedName: "jobSecretsType",
                required: true,
                type: {
                    name: "Enum",
                    allowedValues: [
                        "DataBox",
                        "DataBoxDisk",
                        "DataBoxHeavy",
                        "DataBoxCustomerDisk"
                    ]
                }
            },
            dcAccessSecurityCode: {
                serializedName: "dcAccessSecurityCode",
                type: {
                    name: "Composite",
                    className: "DcAccessSecurityCode"
                }
            },
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "CloudError"
                }
            }
        }
    }
};
const DcAccessSecurityCode = {
    type: {
        name: "Composite",
        className: "DcAccessSecurityCode",
        modelProperties: {
            reverseDCAccessCode: {
                serializedName: "reverseDCAccessCode",
                type: {
                    name: "String"
                }
            },
            forwardDCAccessCode: {
                serializedName: "forwardDCAccessCode",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RegionConfigurationRequest = {
    type: {
        name: "Composite",
        className: "RegionConfigurationRequest",
        modelProperties: {
            scheduleAvailabilityRequest: {
                serializedName: "scheduleAvailabilityRequest",
                type: {
                    name: "Composite",
                    className: "ScheduleAvailabilityRequest"
                }
            },
            transportAvailabilityRequest: {
                serializedName: "transportAvailabilityRequest",
                type: {
                    name: "Composite",
                    className: "TransportAvailabilityRequest"
                }
            },
            datacenterAddressRequest: {
                serializedName: "datacenterAddressRequest",
                type: {
                    name: "Composite",
                    className: "DatacenterAddressRequest"
                }
            }
        }
    }
};
const ScheduleAvailabilityRequest = {
    type: {
        name: "Composite",
        className: "ScheduleAvailabilityRequest",
        uberParent: "ScheduleAvailabilityRequest",
        polymorphicDiscriminator: {
            serializedName: "skuName",
            clientName: "skuName"
        },
        modelProperties: {
            storageLocation: {
                serializedName: "storageLocation",
                required: true,
                type: {
                    name: "String"
                }
            },
            skuName: {
                serializedName: "skuName",
                required: true,
                type: {
                    name: "Enum",
                    allowedValues: [
                        "DataBox",
                        "DataBoxDisk",
                        "DataBoxHeavy",
                        "DataBoxCustomerDisk"
                    ]
                }
            },
            country: {
                serializedName: "country",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TransportAvailabilityRequest = {
    type: {
        name: "Composite",
        className: "TransportAvailabilityRequest",
        modelProperties: {
            skuName: {
                serializedName: "skuName",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "DataBox",
                        "DataBoxDisk",
                        "DataBoxHeavy",
                        "DataBoxCustomerDisk"
                    ]
                }
            }
        }
    }
};
const DatacenterAddressRequest = {
    type: {
        name: "Composite",
        className: "DatacenterAddressRequest",
        modelProperties: {
            storageLocation: {
                serializedName: "storageLocation",
                required: true,
                type: {
                    name: "String"
                }
            },
            skuName: {
                serializedName: "skuName",
                required: true,
                type: {
                    name: "Enum",
                    allowedValues: [
                        "DataBox",
                        "DataBoxDisk",
                        "DataBoxHeavy",
                        "DataBoxCustomerDisk"
                    ]
                }
            }
        }
    }
};
const RegionConfigurationResponse = {
    type: {
        name: "Composite",
        className: "RegionConfigurationResponse",
        modelProperties: {
            scheduleAvailabilityResponse: {
                serializedName: "scheduleAvailabilityResponse",
                type: {
                    name: "Composite",
                    className: "ScheduleAvailabilityResponse"
                }
            },
            transportAvailabilityResponse: {
                serializedName: "transportAvailabilityResponse",
                type: {
                    name: "Composite",
                    className: "TransportAvailabilityResponse"
                }
            },
            datacenterAddressResponse: {
                serializedName: "datacenterAddressResponse",
                type: {
                    name: "Composite",
                    className: "DatacenterAddressResponse"
                }
            }
        }
    }
};
const ScheduleAvailabilityResponse = {
    type: {
        name: "Composite",
        className: "ScheduleAvailabilityResponse",
        modelProperties: {
            availableDates: {
                serializedName: "availableDates",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "DateTime"
                        }
                    }
                }
            }
        }
    }
};
const TransportAvailabilityResponse = {
    type: {
        name: "Composite",
        className: "TransportAvailabilityResponse",
        modelProperties: {
            transportAvailabilityDetails: {
                serializedName: "transportAvailabilityDetails",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TransportAvailabilityDetails"
                        }
                    }
                }
            }
        }
    }
};
const TransportAvailabilityDetails = {
    type: {
        name: "Composite",
        className: "TransportAvailabilityDetails",
        modelProperties: {
            shipmentType: {
                serializedName: "shipmentType",
                readOnly: true,
                type: {
                    name: "Enum",
                    allowedValues: ["CustomerManaged", "MicrosoftManaged"]
                }
            }
        }
    }
};
const AccountCredentialDetails = {
    type: {
        name: "Composite",
        className: "AccountCredentialDetails",
        modelProperties: {
            accountName: {
                serializedName: "accountName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            dataAccountType: {
                serializedName: "dataAccountType",
                readOnly: true,
                type: {
                    name: "Enum",
                    allowedValues: ["StorageAccount", "ManagedDisk"]
                }
            },
            accountConnectionString: {
                serializedName: "accountConnectionString",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            shareCredentialDetails: {
                serializedName: "shareCredentialDetails",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ShareCredentialDetails"
                        }
                    }
                }
            }
        }
    }
};
const ShareCredentialDetails = {
    type: {
        name: "Composite",
        className: "ShareCredentialDetails",
        modelProperties: {
            shareName: {
                serializedName: "shareName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            shareType: {
                serializedName: "shareType",
                readOnly: true,
                type: {
                    name: "Enum",
                    allowedValues: [
                        "UnknownType",
                        "HCS",
                        "BlockBlob",
                        "PageBlob",
                        "AzureFile",
                        "ManagedDisk"
                    ]
                }
            },
            userName: {
                serializedName: "userName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            password: {
                serializedName: "password",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            supportedAccessProtocols: {
                serializedName: "supportedAccessProtocols",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Enum",
                            allowedValues: ["SMB", "NFS"]
                        }
                    }
                }
            }
        }
    }
};
const ApplianceNetworkConfiguration = {
    type: {
        name: "Composite",
        className: "ApplianceNetworkConfiguration",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            macAddress: {
                serializedName: "macAddress",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ArmBaseObject = {
    type: {
        name: "Composite",
        className: "ArmBaseObject",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const GranularCopyLogDetails = {
    type: {
        name: "Composite",
        className: "GranularCopyLogDetails",
        uberParent: "GranularCopyLogDetails",
        polymorphicDiscriminator: {
            serializedName: "copyLogDetailsType",
            clientName: "copyLogDetailsType"
        },
        modelProperties: {
            copyLogDetailsType: {
                serializedName: "copyLogDetailsType",
                required: true,
                type: {
                    name: "Enum",
                    allowedValues: [
                        "DataBox",
                        "DataBoxDisk",
                        "DataBoxHeavy",
                        "DataBoxCustomerDisk"
                    ]
                }
            }
        }
    }
};
const CopyProgress = {
    type: {
        name: "Composite",
        className: "CopyProgress",
        modelProperties: {
            storageAccountName: {
                serializedName: "storageAccountName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            transferType: {
                serializedName: "transferType",
                readOnly: true,
                type: {
                    name: "Enum",
                    allowedValues: ["ImportToAzure", "ExportFromAzure"]
                }
            },
            dataAccountType: {
                serializedName: "dataAccountType",
                readOnly: true,
                type: {
                    name: "Enum",
                    allowedValues: ["StorageAccount", "ManagedDisk"]
                }
            },
            accountId: {
                serializedName: "accountId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            bytesProcessed: {
                serializedName: "bytesProcessed",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            totalBytesToProcess: {
                serializedName: "totalBytesToProcess",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            filesProcessed: {
                serializedName: "filesProcessed",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            totalFilesToProcess: {
                serializedName: "totalFilesToProcess",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            invalidFilesProcessed: {
                serializedName: "invalidFilesProcessed",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            invalidFileBytesUploaded: {
                serializedName: "invalidFileBytesUploaded",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            renamedContainerCount: {
                serializedName: "renamedContainerCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            filesErroredOut: {
                serializedName: "filesErroredOut",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            directoriesErroredOut: {
                serializedName: "directoriesErroredOut",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            invalidDirectoriesProcessed: {
                serializedName: "invalidDirectoriesProcessed",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            isEnumerationInProgress: {
                serializedName: "isEnumerationInProgress",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "CloudError"
                }
            },
            actions: {
                serializedName: "actions",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Enum",
                            allowedValues: [
                                "None",
                                "MoveToCleanUpDevice",
                                "Resume",
                                "Restart",
                                "ReachOutToOperation"
                            ]
                        }
                    }
                }
            }
        }
    }
};
const GranularCopyProgress = {
    type: {
        name: "Composite",
        className: "GranularCopyProgress",
        modelProperties: {
            storageAccountName: {
                serializedName: "storageAccountName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            transferType: {
                serializedName: "transferType",
                readOnly: true,
                type: {
                    name: "Enum",
                    allowedValues: ["ImportToAzure", "ExportFromAzure"]
                }
            },
            dataAccountType: {
                serializedName: "dataAccountType",
                readOnly: true,
                type: {
                    name: "Enum",
                    allowedValues: ["StorageAccount", "ManagedDisk"]
                }
            },
            accountId: {
                serializedName: "accountId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            bytesProcessed: {
                serializedName: "bytesProcessed",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            totalBytesToProcess: {
                serializedName: "totalBytesToProcess",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            filesProcessed: {
                serializedName: "filesProcessed",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            totalFilesToProcess: {
                serializedName: "totalFilesToProcess",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            invalidFilesProcessed: {
                serializedName: "invalidFilesProcessed",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            invalidFileBytesUploaded: {
                serializedName: "invalidFileBytesUploaded",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            renamedContainerCount: {
                serializedName: "renamedContainerCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            filesErroredOut: {
                serializedName: "filesErroredOut",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            directoriesErroredOut: {
                serializedName: "directoriesErroredOut",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            invalidDirectoriesProcessed: {
                serializedName: "invalidDirectoriesProcessed",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            isEnumerationInProgress: {
                serializedName: "isEnumerationInProgress",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "CloudError"
                }
            },
            actions: {
                serializedName: "actions",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Enum",
                            allowedValues: [
                                "None",
                                "MoveToCleanUpDevice",
                                "Resume",
                                "Restart",
                                "ReachOutToOperation"
                            ]
                        }
                    }
                }
            }
        }
    }
};
const ImportDiskDetails = {
    type: {
        name: "Composite",
        className: "ImportDiskDetails",
        modelProperties: {
            manifestFile: {
                serializedName: "manifestFile",
                required: true,
                type: {
                    name: "String"
                }
            },
            manifestHash: {
                serializedName: "manifestHash",
                required: true,
                type: {
                    name: "String"
                }
            },
            bitLockerKey: {
                serializedName: "bitLockerKey",
                required: true,
                type: {
                    name: "String"
                }
            },
            backupManifestCloudPath: {
                serializedName: "backupManifestCloudPath",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ExportDiskDetails = {
    type: {
        name: "Composite",
        className: "ExportDiskDetails",
        modelProperties: {
            manifestFile: {
                serializedName: "manifestFile",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            manifestHash: {
                serializedName: "manifestHash",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            backupManifestCloudPath: {
                serializedName: "backupManifestCloudPath",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DiskSecret = {
    type: {
        name: "Composite",
        className: "DiskSecret",
        modelProperties: {
            diskSerialNumber: {
                serializedName: "diskSerialNumber",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            bitLockerKey: {
                serializedName: "bitLockerKey",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DataBoxDiskCopyProgress = {
    type: {
        name: "Composite",
        className: "DataBoxDiskCopyProgress",
        modelProperties: {
            serialNumber: {
                serializedName: "serialNumber",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            bytesCopied: {
                serializedName: "bytesCopied",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            percentComplete: {
                serializedName: "percentComplete",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "CloudError"
                }
            },
            actions: {
                serializedName: "actions",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Enum",
                            allowedValues: [
                                "None",
                                "MoveToCleanUpDevice",
                                "Resume",
                                "Restart",
                                "ReachOutToOperation"
                            ]
                        }
                    }
                }
            }
        }
    }
};
const DataBoxHeavySecret = {
    type: {
        name: "Composite",
        className: "DataBoxHeavySecret",
        modelProperties: {
            deviceSerialNumber: {
                serializedName: "deviceSerialNumber",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            devicePassword: {
                serializedName: "devicePassword",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            networkConfigurations: {
                serializedName: "networkConfigurations",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ApplianceNetworkConfiguration"
                        }
                    }
                }
            },
            encodedValidationCertPubKey: {
                serializedName: "encodedValidationCertPubKey",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            accountCredentialDetails: {
                serializedName: "accountCredentialDetails",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AccountCredentialDetails"
                        }
                    }
                }
            }
        }
    }
};
const DataBoxSecret = {
    type: {
        name: "Composite",
        className: "DataBoxSecret",
        modelProperties: {
            deviceSerialNumber: {
                serializedName: "deviceSerialNumber",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            devicePassword: {
                serializedName: "devicePassword",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            networkConfigurations: {
                serializedName: "networkConfigurations",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ApplianceNetworkConfiguration"
                        }
                    }
                }
            },
            encodedValidationCertPubKey: {
                serializedName: "encodedValidationCertPubKey",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            accountCredentialDetails: {
                serializedName: "accountCredentialDetails",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AccountCredentialDetails"
                        }
                    }
                }
            }
        }
    }
};
const DataBoxCustomerDiskJobDetails = {
    serializedName: "DataBoxCustomerDisk",
    type: {
        name: "Composite",
        className: "DataBoxCustomerDiskJobDetails",
        uberParent: "JobDetails",
        polymorphicDiscriminator: JobDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, JobDetails.type.modelProperties), { importDiskDetailsCollection: {
                serializedName: "importDiskDetailsCollection",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "Composite", className: "ImportDiskDetails" } }
                }
            }, exportDiskDetailsCollection: {
                serializedName: "exportDiskDetailsCollection",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "Composite", className: "ExportDiskDetails" } }
                }
            }, copyProgress: {
                serializedName: "copyProgress",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DataBoxCustomerDiskCopyProgress"
                        }
                    }
                }
            }, deliverToDcPackageDetails: {
                serializedName: "deliverToDcPackageDetails",
                type: {
                    name: "Composite",
                    className: "PackageCarrierInfo"
                }
            }, returnToCustomerPackageDetails: {
                serializedName: "returnToCustomerPackageDetails",
                type: {
                    name: "Composite",
                    className: "PackageCarrierDetails"
                }
            }, enableManifestBackup: {
                defaultValue: false,
                serializedName: "enableManifestBackup",
                type: {
                    name: "Boolean"
                }
            } })
    }
};
const DataBoxDiskJobDetails = {
    serializedName: "DataBoxDisk",
    type: {
        name: "Composite",
        className: "DataBoxDiskJobDetails",
        uberParent: "JobDetails",
        polymorphicDiscriminator: JobDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, JobDetails.type.modelProperties), { preferredDisks: {
                serializedName: "preferredDisks",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "Number" } }
                }
            }, copyProgress: {
                serializedName: "copyProgress",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DataBoxDiskCopyProgress"
                        }
                    }
                }
            }, granularCopyProgress: {
                serializedName: "granularCopyProgress",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DataBoxDiskGranularCopyProgress"
                        }
                    }
                }
            }, granularCopyLogDetails: {
                serializedName: "granularCopyLogDetails",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DataBoxDiskGranularCopyLogDetails"
                        }
                    }
                }
            }, disksAndSizeDetails: {
                serializedName: "disksAndSizeDetails",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "Number" } }
                }
            }, passkey: {
                serializedName: "passkey",
                type: {
                    name: "String"
                }
            } })
    }
};
const DataBoxHeavyJobDetails = {
    serializedName: "DataBoxHeavy",
    type: {
        name: "Composite",
        className: "DataBoxHeavyJobDetails",
        uberParent: "JobDetails",
        polymorphicDiscriminator: JobDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, JobDetails.type.modelProperties), { copyProgress: {
                serializedName: "copyProgress",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CopyProgress"
                        }
                    }
                }
            }, devicePassword: {
                serializedName: "devicePassword",
                type: {
                    name: "String"
                }
            } })
    }
};
const DataBoxJobDetails = {
    serializedName: "DataBox",
    type: {
        name: "Composite",
        className: "DataBoxJobDetails",
        uberParent: "JobDetails",
        polymorphicDiscriminator: JobDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, JobDetails.type.modelProperties), { copyProgress: {
                serializedName: "copyProgress",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CopyProgress"
                        }
                    }
                }
            }, devicePassword: {
                serializedName: "devicePassword",
                type: {
                    name: "String"
                }
            } })
    }
};
const ManagedDiskDetails = {
    serializedName: "ManagedDisk",
    type: {
        name: "Composite",
        className: "ManagedDiskDetails",
        uberParent: "DataAccountDetails",
        polymorphicDiscriminator: DataAccountDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DataAccountDetails.type.modelProperties), { resourceGroupId: {
                serializedName: "resourceGroupId",
                required: true,
                type: {
                    name: "String"
                }
            }, stagingStorageAccountId: {
                serializedName: "stagingStorageAccountId",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const StorageAccountDetails = {
    serializedName: "StorageAccount",
    type: {
        name: "Composite",
        className: "StorageAccountDetails",
        uberParent: "DataAccountDetails",
        polymorphicDiscriminator: DataAccountDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DataAccountDetails.type.modelProperties), { storageAccountId: {
                serializedName: "storageAccountId",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const DataBoxAccountCopyLogDetails = {
    serializedName: "DataBox",
    type: {
        name: "Composite",
        className: "DataBoxAccountCopyLogDetails",
        uberParent: "CopyLogDetails",
        polymorphicDiscriminator: CopyLogDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopyLogDetails.type.modelProperties), { accountName: {
                serializedName: "accountName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, copyLogLink: {
                serializedName: "copyLogLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, copyVerboseLogLink: {
                serializedName: "copyVerboseLogLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const DataBoxCustomerDiskCopyLogDetails = {
    serializedName: "DataBoxCustomerDisk",
    type: {
        name: "Composite",
        className: "DataBoxCustomerDiskCopyLogDetails",
        uberParent: "CopyLogDetails",
        polymorphicDiscriminator: CopyLogDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopyLogDetails.type.modelProperties), { serialNumber: {
                serializedName: "serialNumber",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, errorLogLink: {
                serializedName: "errorLogLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, verboseLogLink: {
                serializedName: "verboseLogLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const DataBoxDiskCopyLogDetails = {
    serializedName: "DataBoxDisk",
    type: {
        name: "Composite",
        className: "DataBoxDiskCopyLogDetails",
        uberParent: "CopyLogDetails",
        polymorphicDiscriminator: CopyLogDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopyLogDetails.type.modelProperties), { diskSerialNumber: {
                serializedName: "diskSerialNumber",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, errorLogLink: {
                serializedName: "errorLogLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, verboseLogLink: {
                serializedName: "verboseLogLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const DataBoxHeavyAccountCopyLogDetails = {
    serializedName: "DataBoxHeavy",
    type: {
        name: "Composite",
        className: "DataBoxHeavyAccountCopyLogDetails",
        uberParent: "CopyLogDetails",
        polymorphicDiscriminator: CopyLogDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CopyLogDetails.type.modelProperties), { accountName: {
                serializedName: "accountName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, copyLogLink: {
                serializedName: "copyLogLink",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, copyVerboseLogLink: {
                serializedName: "copyVerboseLogLink",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            } })
    }
};
const DatacenterAddressInstructionResponse = {
    serializedName: "DatacenterAddressInstruction",
    type: {
        name: "Composite",
        className: "DatacenterAddressInstructionResponse",
        uberParent: "DatacenterAddressResponse",
        polymorphicDiscriminator: DatacenterAddressResponse.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DatacenterAddressResponse.type.modelProperties), { communicationInstruction: {
                serializedName: "communicationInstruction",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const DatacenterAddressLocationResponse = {
    serializedName: "DatacenterAddressLocation",
    type: {
        name: "Composite",
        className: "DatacenterAddressLocationResponse",
        uberParent: "DatacenterAddressResponse",
        polymorphicDiscriminator: DatacenterAddressResponse.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DatacenterAddressResponse.type.modelProperties), { contactPersonName: {
                serializedName: "contactPersonName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, company: {
                serializedName: "company",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, street1: {
                serializedName: "street1",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, street2: {
                serializedName: "street2",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, street3: {
                serializedName: "street3",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, city: {
                serializedName: "city",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, state: {
                serializedName: "state",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, zip: {
                serializedName: "zip",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, country: {
                serializedName: "country",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, phone: {
                serializedName: "phone",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, phoneExtension: {
                serializedName: "phoneExtension",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, addressType: {
                serializedName: "addressType",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, additionalShippingInformation: {
                serializedName: "additionalShippingInformation",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const JobResource = {
    type: {
        name: "Composite",
        className: "JobResource",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, transferType: {
                serializedName: "properties.transferType",
                required: true,
                type: {
                    name: "Enum",
                    allowedValues: ["ImportToAzure", "ExportFromAzure"]
                }
            }, isCancellable: {
                serializedName: "properties.isCancellable",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            }, isDeletable: {
                serializedName: "properties.isDeletable",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            }, isShippingAddressEditable: {
                serializedName: "properties.isShippingAddressEditable",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            }, reverseShippingDetailsUpdate: {
                serializedName: "properties.reverseShippingDetailsUpdate",
                readOnly: true,
                type: {
                    name: "Enum",
                    allowedValues: ["Enabled", "Disabled", "NotSupported"]
                }
            }, reverseTransportPreferenceUpdate: {
                serializedName: "properties.reverseTransportPreferenceUpdate",
                readOnly: true,
                type: {
                    name: "Enum",
                    allowedValues: ["Enabled", "Disabled", "NotSupported"]
                }
            }, isPrepareToShipEnabled: {
                serializedName: "properties.isPrepareToShipEnabled",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            }, status: {
                serializedName: "properties.status",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, startTime: {
                serializedName: "properties.startTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, error: {
                serializedName: "properties.error",
                type: {
                    name: "Composite",
                    className: "CloudError"
                }
            }, details: {
                serializedName: "properties.details",
                type: {
                    name: "Composite",
                    className: "JobDetails"
                }
            }, cancellationReason: {
                serializedName: "properties.cancellationReason",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, deliveryType: {
                defaultValue: "NonScheduled",
                serializedName: "properties.deliveryType",
                type: {
                    name: "Enum",
                    allowedValues: ["NonScheduled", "Scheduled"]
                }
            }, deliveryInfo: {
                serializedName: "properties.deliveryInfo",
                type: {
                    name: "Composite",
                    className: "JobDeliveryInfo"
                }
            }, isCancellableWithoutFee: {
                serializedName: "properties.isCancellableWithoutFee",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            } })
    }
};
const ValidateAddress = {
    serializedName: "ValidateAddress",
    type: {
        name: "Composite",
        className: "ValidateAddress",
        uberParent: "ValidationInputRequest",
        polymorphicDiscriminator: ValidationInputRequest.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ValidationInputRequest.type.modelProperties), { shippingAddress: {
                serializedName: "shippingAddress",
                type: {
                    name: "Composite",
                    className: "ShippingAddress"
                }
            }, deviceType: {
                serializedName: "deviceType",
                required: true,
                type: {
                    name: "Enum",
                    allowedValues: [
                        "DataBox",
                        "DataBoxDisk",
                        "DataBoxHeavy",
                        "DataBoxCustomerDisk"
                    ]
                }
            }, transportPreferences: {
                serializedName: "transportPreferences",
                type: {
                    name: "Composite",
                    className: "TransportPreferences"
                }
            } })
    }
};
const CreateOrderLimitForSubscriptionValidationRequest = {
    serializedName: "ValidateCreateOrderLimit",
    type: {
        name: "Composite",
        className: "CreateOrderLimitForSubscriptionValidationRequest",
        uberParent: "ValidationInputRequest",
        polymorphicDiscriminator: ValidationInputRequest.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ValidationInputRequest.type.modelProperties), { deviceType: {
                serializedName: "deviceType",
                required: true,
                type: {
                    name: "Enum",
                    allowedValues: [
                        "DataBox",
                        "DataBoxDisk",
                        "DataBoxHeavy",
                        "DataBoxCustomerDisk"
                    ]
                }
            } })
    }
};
const DataTransferDetailsValidationRequest = {
    serializedName: "ValidateDataTransferDetails",
    type: {
        name: "Composite",
        className: "DataTransferDetailsValidationRequest",
        uberParent: "ValidationInputRequest",
        polymorphicDiscriminator: ValidationInputRequest.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ValidationInputRequest.type.modelProperties), { dataExportDetails: {
                serializedName: "dataExportDetails",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DataExportDetails"
                        }
                    }
                }
            }, dataImportDetails: {
                serializedName: "dataImportDetails",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DataImportDetails"
                        }
                    }
                }
            }, deviceType: {
                serializedName: "deviceType",
                required: true,
                type: {
                    name: "Enum",
                    allowedValues: [
                        "DataBox",
                        "DataBoxDisk",
                        "DataBoxHeavy",
                        "DataBoxCustomerDisk"
                    ]
                }
            }, transferType: {
                serializedName: "transferType",
                required: true,
                type: {
                    name: "Enum",
                    allowedValues: ["ImportToAzure", "ExportFromAzure"]
                }
            } })
    }
};
const PreferencesValidationRequest = {
    serializedName: "ValidatePreferences",
    type: {
        name: "Composite",
        className: "PreferencesValidationRequest",
        uberParent: "ValidationInputRequest",
        polymorphicDiscriminator: ValidationInputRequest.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ValidationInputRequest.type.modelProperties), { preference: {
                serializedName: "preference",
                type: {
                    name: "Composite",
                    className: "Preferences"
                }
            }, deviceType: {
                serializedName: "deviceType",
                required: true,
                type: {
                    name: "Enum",
                    allowedValues: [
                        "DataBox",
                        "DataBoxDisk",
                        "DataBoxHeavy",
                        "DataBoxCustomerDisk"
                    ]
                }
            } })
    }
};
const SkuAvailabilityValidationRequest = {
    serializedName: "ValidateSkuAvailability",
    type: {
        name: "Composite",
        className: "SkuAvailabilityValidationRequest",
        uberParent: "ValidationInputRequest",
        polymorphicDiscriminator: ValidationInputRequest.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ValidationInputRequest.type.modelProperties), { deviceType: {
                serializedName: "deviceType",
                required: true,
                type: {
                    name: "Enum",
                    allowedValues: [
                        "DataBox",
                        "DataBoxDisk",
                        "DataBoxHeavy",
                        "DataBoxCustomerDisk"
                    ]
                }
            }, transferType: {
                serializedName: "transferType",
                required: true,
                type: {
                    name: "Enum",
                    allowedValues: ["ImportToAzure", "ExportFromAzure"]
                }
            }, country: {
                serializedName: "country",
                required: true,
                type: {
                    name: "String"
                }
            }, location: {
                serializedName: "location",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const SubscriptionIsAllowedToCreateJobValidationRequest = {
    serializedName: "ValidateSubscriptionIsAllowedToCreateJob",
    type: {
        name: "Composite",
        className: "SubscriptionIsAllowedToCreateJobValidationRequest",
        uberParent: "ValidationInputRequest",
        polymorphicDiscriminator: ValidationInputRequest.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, ValidationInputRequest.type.modelProperties)
    }
};
const AddressValidationProperties = {
    serializedName: "ValidateAddress",
    type: {
        name: "Composite",
        className: "AddressValidationProperties",
        uberParent: "ValidationInputResponse",
        polymorphicDiscriminator: ValidationInputResponse.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ValidationInputResponse.type.modelProperties), { validationStatus: {
                serializedName: "validationStatus",
                readOnly: true,
                type: {
                    name: "Enum",
                    allowedValues: ["Valid", "Invalid", "Ambiguous"]
                }
            }, alternateAddresses: {
                serializedName: "alternateAddresses",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ShippingAddress"
                        }
                    }
                }
            } })
    }
};
const CreateOrderLimitForSubscriptionValidationResponseProperties = {
    serializedName: "ValidateCreateOrderLimit",
    type: {
        name: "Composite",
        className: "CreateOrderLimitForSubscriptionValidationResponseProperties",
        uberParent: "ValidationInputResponse",
        polymorphicDiscriminator: ValidationInputResponse.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ValidationInputResponse.type.modelProperties), { status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "Enum",
                    allowedValues: ["Valid", "Invalid", "Skipped"]
                }
            } })
    }
};
const DataTransferDetailsValidationResponseProperties = {
    serializedName: "ValidateDataTransferDetails",
    type: {
        name: "Composite",
        className: "DataTransferDetailsValidationResponseProperties",
        uberParent: "ValidationInputResponse",
        polymorphicDiscriminator: ValidationInputResponse.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ValidationInputResponse.type.modelProperties), { status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "Enum",
                    allowedValues: ["Valid", "Invalid", "Skipped"]
                }
            } })
    }
};
const PreferencesValidationResponseProperties = {
    serializedName: "ValidatePreferences",
    type: {
        name: "Composite",
        className: "PreferencesValidationResponseProperties",
        uberParent: "ValidationInputResponse",
        polymorphicDiscriminator: ValidationInputResponse.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ValidationInputResponse.type.modelProperties), { status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "Enum",
                    allowedValues: ["Valid", "Invalid", "Skipped"]
                }
            } })
    }
};
const SkuAvailabilityValidationResponseProperties = {
    serializedName: "ValidateSkuAvailability",
    type: {
        name: "Composite",
        className: "SkuAvailabilityValidationResponseProperties",
        uberParent: "ValidationInputResponse",
        polymorphicDiscriminator: ValidationInputResponse.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ValidationInputResponse.type.modelProperties), { status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "Enum",
                    allowedValues: ["Valid", "Invalid", "Skipped"]
                }
            } })
    }
};
const SubscriptionIsAllowedToCreateJobValidationResponseProperties = {
    serializedName: "ValidateSubscriptionIsAllowedToCreateJob",
    type: {
        name: "Composite",
        className: "SubscriptionIsAllowedToCreateJobValidationResponseProperties",
        uberParent: "ValidationInputResponse",
        polymorphicDiscriminator: ValidationInputResponse.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ValidationInputResponse.type.modelProperties), { status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "Enum",
                    allowedValues: ["Valid", "Invalid", "Skipped"]
                }
            } })
    }
};
const CreateJobValidations = {
    serializedName: "JobCreationValidation",
    type: {
        name: "Composite",
        className: "CreateJobValidations",
        uberParent: "ValidationRequest",
        polymorphicDiscriminator: ValidationRequest.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, ValidationRequest.type.modelProperties)
    }
};
const CustomerDiskJobSecrets = {
    serializedName: "DataBoxCustomerDisk",
    type: {
        name: "Composite",
        className: "CustomerDiskJobSecrets",
        uberParent: "JobSecrets",
        polymorphicDiscriminator: JobSecrets.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, JobSecrets.type.modelProperties), { diskSecrets: {
                serializedName: "diskSecrets",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DiskSecret"
                        }
                    }
                }
            }, carrierAccountNumber: {
                serializedName: "carrierAccountNumber",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const DataBoxDiskJobSecrets = {
    serializedName: "DataBoxDisk",
    type: {
        name: "Composite",
        className: "DataBoxDiskJobSecrets",
        uberParent: "JobSecrets",
        polymorphicDiscriminator: JobSecrets.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, JobSecrets.type.modelProperties), { diskSecrets: {
                serializedName: "diskSecrets",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DiskSecret"
                        }
                    }
                }
            }, passKey: {
                serializedName: "passKey",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, isPasskeyUserDefined: {
                serializedName: "isPasskeyUserDefined",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            } })
    }
};
const DataBoxHeavyJobSecrets = {
    serializedName: "DataBoxHeavy",
    type: {
        name: "Composite",
        className: "DataBoxHeavyJobSecrets",
        uberParent: "JobSecrets",
        polymorphicDiscriminator: JobSecrets.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, JobSecrets.type.modelProperties), { cabinetPodSecrets: {
                serializedName: "cabinetPodSecrets",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DataBoxHeavySecret"
                        }
                    }
                }
            } })
    }
};
const DataboxJobSecrets = {
    serializedName: "DataBox",
    type: {
        name: "Composite",
        className: "DataboxJobSecrets",
        uberParent: "JobSecrets",
        polymorphicDiscriminator: JobSecrets.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, JobSecrets.type.modelProperties), { podSecrets: {
                serializedName: "podSecrets",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DataBoxSecret"
                        }
                    }
                }
            } })
    }
};
const DataBoxScheduleAvailabilityRequest = {
    serializedName: "DataBox",
    type: {
        name: "Composite",
        className: "DataBoxScheduleAvailabilityRequest",
        uberParent: "ScheduleAvailabilityRequest",
        polymorphicDiscriminator: ScheduleAvailabilityRequest.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, ScheduleAvailabilityRequest.type.modelProperties)
    }
};
const DiskScheduleAvailabilityRequest = {
    serializedName: "DataBoxDisk",
    type: {
        name: "Composite",
        className: "DiskScheduleAvailabilityRequest",
        uberParent: "ScheduleAvailabilityRequest",
        polymorphicDiscriminator: ScheduleAvailabilityRequest.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ScheduleAvailabilityRequest.type.modelProperties), { expectedDataSizeInTeraBytes: {
                serializedName: "expectedDataSizeInTeraBytes",
                required: true,
                type: {
                    name: "Number"
                }
            } })
    }
};
const HeavyScheduleAvailabilityRequest = {
    serializedName: "DataBoxHeavy",
    type: {
        name: "Composite",
        className: "HeavyScheduleAvailabilityRequest",
        uberParent: "ScheduleAvailabilityRequest",
        polymorphicDiscriminator: ScheduleAvailabilityRequest.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, ScheduleAvailabilityRequest.type.modelProperties)
    }
};
const DataBoxDiskGranularCopyLogDetails = {
    serializedName: "DataBoxCustomerDisk",
    type: {
        name: "Composite",
        className: "DataBoxDiskGranularCopyLogDetails",
        uberParent: "GranularCopyLogDetails",
        polymorphicDiscriminator: GranularCopyLogDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, GranularCopyLogDetails.type.modelProperties), { serialNumber: {
                serializedName: "serialNumber",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, accountId: {
                serializedName: "accountId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, errorLogLink: {
                serializedName: "errorLogLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, verboseLogLink: {
                serializedName: "verboseLogLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const DataBoxCustomerDiskCopyProgress = {
    type: {
        name: "Composite",
        className: "DataBoxCustomerDiskCopyProgress",
        modelProperties: Object.assign(Object.assign({}, CopyProgress.type.modelProperties), { serialNumber: {
                serializedName: "serialNumber",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, copyStatus: {
                serializedName: "copyStatus",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const DataBoxDiskGranularCopyProgress = {
    type: {
        name: "Composite",
        className: "DataBoxDiskGranularCopyProgress",
        modelProperties: Object.assign(Object.assign({}, GranularCopyProgress.type.modelProperties), { serialNumber: {
                serializedName: "serialNumber",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, copyStatus: {
                serializedName: "copyStatus",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const JobsDeleteHeaders = {
    type: {
        name: "Composite",
        className: "JobsDeleteHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const JobsUpdateHeaders = {
    type: {
        name: "Composite",
        className: "JobsUpdateHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }
        }
    }
};
let discriminators = {
    JobDetails: JobDetails,
    DataAccountDetails: DataAccountDetails,
    CopyLogDetails: CopyLogDetails,
    DatacenterAddressResponse: DatacenterAddressResponse,
    ValidationInputRequest: ValidationInputRequest,
    ValidationInputResponse: ValidationInputResponse,
    ValidationRequest: ValidationRequest,
    JobSecrets: JobSecrets,
    ScheduleAvailabilityRequest: ScheduleAvailabilityRequest,
    GranularCopyLogDetails: GranularCopyLogDetails,
    "JobDetails.DataBoxCustomerDisk": DataBoxCustomerDiskJobDetails,
    "JobDetails.DataBoxDisk": DataBoxDiskJobDetails,
    "JobDetails.DataBoxHeavy": DataBoxHeavyJobDetails,
    "JobDetails.DataBox": DataBoxJobDetails,
    "DataAccountDetails.ManagedDisk": ManagedDiskDetails,
    "DataAccountDetails.StorageAccount": StorageAccountDetails,
    "CopyLogDetails.DataBox": DataBoxAccountCopyLogDetails,
    "CopyLogDetails.DataBoxCustomerDisk": DataBoxCustomerDiskCopyLogDetails,
    "CopyLogDetails.DataBoxDisk": DataBoxDiskCopyLogDetails,
    "CopyLogDetails.DataBoxHeavy": DataBoxHeavyAccountCopyLogDetails,
    "DatacenterAddressResponse.DatacenterAddressInstruction": DatacenterAddressInstructionResponse,
    "DatacenterAddressResponse.DatacenterAddressLocation": DatacenterAddressLocationResponse,
    "ValidationInputRequest.ValidateAddress": ValidateAddress,
    "ValidationInputRequest.ValidateCreateOrderLimit": CreateOrderLimitForSubscriptionValidationRequest,
    "ValidationInputRequest.ValidateDataTransferDetails": DataTransferDetailsValidationRequest,
    "ValidationInputRequest.ValidatePreferences": PreferencesValidationRequest,
    "ValidationInputRequest.ValidateSkuAvailability": SkuAvailabilityValidationRequest,
    "ValidationInputRequest.ValidateSubscriptionIsAllowedToCreateJob": SubscriptionIsAllowedToCreateJobValidationRequest,
    "ValidationInputResponse.ValidateAddress": AddressValidationProperties,
    "ValidationInputResponse.ValidateCreateOrderLimit": CreateOrderLimitForSubscriptionValidationResponseProperties,
    "ValidationInputResponse.ValidateDataTransferDetails": DataTransferDetailsValidationResponseProperties,
    "ValidationInputResponse.ValidatePreferences": PreferencesValidationResponseProperties,
    "ValidationInputResponse.ValidateSkuAvailability": SkuAvailabilityValidationResponseProperties,
    "ValidationInputResponse.ValidateSubscriptionIsAllowedToCreateJob": SubscriptionIsAllowedToCreateJobValidationResponseProperties,
    "ValidationRequest.JobCreationValidation": CreateJobValidations,
    "JobSecrets.DataBoxCustomerDisk": CustomerDiskJobSecrets,
    "JobSecrets.DataBoxDisk": DataBoxDiskJobSecrets,
    "JobSecrets.DataBoxHeavy": DataBoxHeavyJobSecrets,
    "JobSecrets.DataBox": DataboxJobSecrets,
    "ScheduleAvailabilityRequest.DataBox": DataBoxScheduleAvailabilityRequest,
    "ScheduleAvailabilityRequest.DataBoxDisk": DiskScheduleAvailabilityRequest,
    "ScheduleAvailabilityRequest.DataBoxHeavy": HeavyScheduleAvailabilityRequest,
    "GranularCopyLogDetails.DataBoxCustomerDisk": DataBoxDiskGranularCopyLogDetails
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    OperationList: OperationList,
    Operation: Operation,
    OperationDisplay: OperationDisplay,
    ApiError: ApiError,
    ErrorDetail: ErrorDetail,
    Details: Details,
    JobResourceList: JobResourceList,
    CloudError: CloudError,
    AdditionalErrorInfo: AdditionalErrorInfo,
    JobDetails: JobDetails,
    JobStages: JobStages,
    ContactDetails: ContactDetails,
    NotificationPreference: NotificationPreference,
    ShippingAddress: ShippingAddress,
    PackageShippingDetails: PackageShippingDetails,
    DataImportDetails: DataImportDetails,
    DataAccountDetails: DataAccountDetails,
    DataExportDetails: DataExportDetails,
    TransferConfiguration: TransferConfiguration,
    TransferConfigurationTransferFilterDetails: TransferConfigurationTransferFilterDetails,
    TransferFilterDetails: TransferFilterDetails,
    BlobFilterDetails: BlobFilterDetails,
    AzureFileFilterDetails: AzureFileFilterDetails,
    FilterFileDetails: FilterFileDetails,
    TransferConfigurationTransferAllDetails: TransferConfigurationTransferAllDetails,
    TransferAllDetails: TransferAllDetails,
    Preferences: Preferences,
    TransportPreferences: TransportPreferences,
    EncryptionPreferences: EncryptionPreferences,
    ReverseShippingDetails: ReverseShippingDetails,
    ContactInfo: ContactInfo,
    CopyLogDetails: CopyLogDetails,
    DeviceErasureDetails: DeviceErasureDetails,
    KeyEncryptionKey: KeyEncryptionKey,
    IdentityProperties: IdentityProperties,
    UserAssignedProperties: UserAssignedProperties,
    LastMitigationActionOnJob: LastMitigationActionOnJob,
    DatacenterAddressResponse: DatacenterAddressResponse,
    JobDeliveryInfo: JobDeliveryInfo,
    SystemData: SystemData,
    Resource: Resource,
    Sku: Sku,
    ResourceIdentity: ResourceIdentity,
    UserAssignedIdentity: UserAssignedIdentity,
    MitigateJobRequest: MitigateJobRequest,
    MarkDevicesShippedRequest: MarkDevicesShippedRequest,
    PackageCarrierInfo: PackageCarrierInfo,
    AvailableSkuRequest: AvailableSkuRequest,
    AvailableSkusResult: AvailableSkusResult,
    SkuInformation: SkuInformation,
    DataLocationToServiceLocationMap: DataLocationToServiceLocationMap,
    SkuCapacity: SkuCapacity,
    SkuCost: SkuCost,
    ValidationInputRequest: ValidationInputRequest,
    AddressValidationOutput: AddressValidationOutput,
    ValidationInputResponse: ValidationInputResponse,
    ValidationRequest: ValidationRequest,
    ValidationResponse: ValidationResponse,
    JobResourceUpdateParameter: JobResourceUpdateParameter,
    UpdateJobDetails: UpdateJobDetails,
    PackageCarrierDetails: PackageCarrierDetails,
    ShipmentPickUpRequest: ShipmentPickUpRequest,
    ShipmentPickUpResponse: ShipmentPickUpResponse,
    CancellationReason: CancellationReason,
    UnencryptedCredentialsList: UnencryptedCredentialsList,
    UnencryptedCredentials: UnencryptedCredentials,
    JobSecrets: JobSecrets,
    DcAccessSecurityCode: DcAccessSecurityCode,
    RegionConfigurationRequest: RegionConfigurationRequest,
    ScheduleAvailabilityRequest: ScheduleAvailabilityRequest,
    TransportAvailabilityRequest: TransportAvailabilityRequest,
    DatacenterAddressRequest: DatacenterAddressRequest,
    RegionConfigurationResponse: RegionConfigurationResponse,
    ScheduleAvailabilityResponse: ScheduleAvailabilityResponse,
    TransportAvailabilityResponse: TransportAvailabilityResponse,
    TransportAvailabilityDetails: TransportAvailabilityDetails,
    AccountCredentialDetails: AccountCredentialDetails,
    ShareCredentialDetails: ShareCredentialDetails,
    ApplianceNetworkConfiguration: ApplianceNetworkConfiguration,
    ArmBaseObject: ArmBaseObject,
    GranularCopyLogDetails: GranularCopyLogDetails,
    CopyProgress: CopyProgress,
    GranularCopyProgress: GranularCopyProgress,
    ImportDiskDetails: ImportDiskDetails,
    ExportDiskDetails: ExportDiskDetails,
    DiskSecret: DiskSecret,
    DataBoxDiskCopyProgress: DataBoxDiskCopyProgress,
    DataBoxHeavySecret: DataBoxHeavySecret,
    DataBoxSecret: DataBoxSecret,
    DataBoxCustomerDiskJobDetails: DataBoxCustomerDiskJobDetails,
    DataBoxDiskJobDetails: DataBoxDiskJobDetails,
    DataBoxHeavyJobDetails: DataBoxHeavyJobDetails,
    DataBoxJobDetails: DataBoxJobDetails,
    ManagedDiskDetails: ManagedDiskDetails,
    StorageAccountDetails: StorageAccountDetails,
    DataBoxAccountCopyLogDetails: DataBoxAccountCopyLogDetails,
    DataBoxCustomerDiskCopyLogDetails: DataBoxCustomerDiskCopyLogDetails,
    DataBoxDiskCopyLogDetails: DataBoxDiskCopyLogDetails,
    DataBoxHeavyAccountCopyLogDetails: DataBoxHeavyAccountCopyLogDetails,
    DatacenterAddressInstructionResponse: DatacenterAddressInstructionResponse,
    DatacenterAddressLocationResponse: DatacenterAddressLocationResponse,
    JobResource: JobResource,
    ValidateAddress: ValidateAddress,
    CreateOrderLimitForSubscriptionValidationRequest: CreateOrderLimitForSubscriptionValidationRequest,
    DataTransferDetailsValidationRequest: DataTransferDetailsValidationRequest,
    PreferencesValidationRequest: PreferencesValidationRequest,
    SkuAvailabilityValidationRequest: SkuAvailabilityValidationRequest,
    SubscriptionIsAllowedToCreateJobValidationRequest: SubscriptionIsAllowedToCreateJobValidationRequest,
    AddressValidationProperties: AddressValidationProperties,
    CreateOrderLimitForSubscriptionValidationResponseProperties: CreateOrderLimitForSubscriptionValidationResponseProperties,
    DataTransferDetailsValidationResponseProperties: DataTransferDetailsValidationResponseProperties,
    PreferencesValidationResponseProperties: PreferencesValidationResponseProperties,
    SkuAvailabilityValidationResponseProperties: SkuAvailabilityValidationResponseProperties,
    SubscriptionIsAllowedToCreateJobValidationResponseProperties: SubscriptionIsAllowedToCreateJobValidationResponseProperties,
    CreateJobValidations: CreateJobValidations,
    CustomerDiskJobSecrets: CustomerDiskJobSecrets,
    DataBoxDiskJobSecrets: DataBoxDiskJobSecrets,
    DataBoxHeavyJobSecrets: DataBoxHeavyJobSecrets,
    DataboxJobSecrets: DataboxJobSecrets,
    DataBoxScheduleAvailabilityRequest: DataBoxScheduleAvailabilityRequest,
    DiskScheduleAvailabilityRequest: DiskScheduleAvailabilityRequest,
    HeavyScheduleAvailabilityRequest: HeavyScheduleAvailabilityRequest,
    DataBoxDiskGranularCopyLogDetails: DataBoxDiskGranularCopyLogDetails,
    DataBoxCustomerDiskCopyProgress: DataBoxCustomerDiskCopyProgress,
    DataBoxDiskGranularCopyProgress: DataBoxDiskGranularCopyProgress,
    JobsDeleteHeaders: JobsDeleteHeaders,
    JobsUpdateHeaders: JobsUpdateHeaders,
    discriminators: discriminators
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2022-12-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const skipToken = {
    parameterPath: ["options", "skipToken"],
    mapper: {
        serializedName: "$skipToken",
        type: {
            name: "String"
        }
    }
};
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const markDevicesShippedRequest = {
    parameterPath: "markDevicesShippedRequest",
    mapper: MarkDevicesShippedRequest
};
const jobName = {
    parameterPath: "jobName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[-\\w\\.]+$"),
            MaxLength: 24,
            MinLength: 3
        },
        serializedName: "jobName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const expand = {
    parameterPath: ["options", "expand"],
    mapper: {
        serializedName: "$expand",
        type: {
            name: "String"
        }
    }
};
const jobResource = {
    parameterPath: "jobResource",
    mapper: JobResource
};
const jobResourceUpdateParameter = {
    parameterPath: "jobResourceUpdateParameter",
    mapper: JobResourceUpdateParameter
};
const ifMatch = {
    parameterPath: ["options", "ifMatch"],
    mapper: {
        serializedName: "If-Match",
        type: {
            name: "String"
        }
    }
};
const shipmentPickUpRequest = {
    parameterPath: "shipmentPickUpRequest",
    mapper: ShipmentPickUpRequest
};
const cancellationReason = {
    parameterPath: "cancellationReason",
    mapper: CancellationReason
};
const mitigateJobRequest = {
    parameterPath: "mitigateJobRequest",
    mapper: MitigateJobRequest
};
const availableSkuRequest = {
    parameterPath: "availableSkuRequest",
    mapper: AvailableSkuRequest
};
const location = {
    parameterPath: "location",
    mapper: {
        serializedName: "location",
        required: true,
        type: {
            name: "String"
        }
    }
};
const validateAddress = {
    parameterPath: "validateAddress",
    mapper: ValidateAddress
};
const validationRequest = {
    parameterPath: "validationRequest",
    mapper: ValidationRequest
};
const regionConfigurationRequest = {
    parameterPath: "regionConfigurationRequest",
    mapper: RegionConfigurationRequest
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Operations operations. */
class OperationsImpl {
    /**
     * Initialize a new instance of the class Operations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * This method gets all the operations.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * This method gets all the operations.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$1);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec$1);
    }
}
// Operation Specifications
const serializer$3 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$1 = {
    path: "/providers/Microsoft.DataBox/operations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationList
        },
        default: {
            bodyMapper: ApiError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer: serializer$3
};
const listNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationList
        },
        default: {
            bodyMapper: ApiError
        }
    },
    urlParameters: [$host, nextLink],
    headerParameters: [accept],
    serializer: serializer$3
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
function createLroSpec(inputs) {
    const { args, spec, sendOperationFn } = inputs;
    return {
        requestMethod: spec.httpMethod,
        requestPath: spec.path,
        sendInitialRequest: () => sendOperationFn(args, spec),
        sendPollRequest: (path, options) => {
            const restSpec = tslib.__rest(spec, ["requestBody"]);
            return sendOperationFn(args, Object.assign(Object.assign({}, restSpec), { httpMethod: "GET", path, abortSignal: options === null || options === void 0 ? void 0 : options.abortSignal }));
        }
    };
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Jobs operations. */
class JobsImpl {
    /**
     * Initialize a new instance of the class Jobs class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all the jobs available under the subscription.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists all the jobs available under the given resource group.
     * @param resourceGroupName The Resource Group Name
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName, options) {
        const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByResourceGroupPagingPage(resourceGroupName, options, settings);
            }
        };
    }
    listByResourceGroupPagingPage(resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByResourceGroup(resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByResourceGroupNext(resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByResourceGroupPagingAll(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingAll_1() {
            var _a, e_2, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByResourceGroupPagingPage(resourceGroupName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * This method gets the unencrypted secrets related to the job.
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be
     *                between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param options The options parameters.
     */
    listCredentials(resourceGroupName, jobName, options) {
        const iter = this.listCredentialsPagingAll(resourceGroupName, jobName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listCredentialsPagingPage(resourceGroupName, jobName, options, settings);
            }
        };
    }
    listCredentialsPagingPage(resourceGroupName, jobName, options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listCredentialsPagingPage_1() {
            let result;
            result = yield tslib.__await(this._listCredentials(resourceGroupName, jobName, options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listCredentialsPagingAll(resourceGroupName, jobName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listCredentialsPagingAll_1() {
            var _a, e_3, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listCredentialsPagingPage(resourceGroupName, jobName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * Lists all the jobs available under the subscription.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec);
    }
    /**
     * Request to mark devices for a given job as shipped
     * @param jobName The name of the job Resource within the specified resource group. job names must be
     *                between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param resourceGroupName The Resource Group Name
     * @param markDevicesShippedRequest Mark Devices Shipped Request
     * @param options The options parameters.
     */
    markDevicesShipped(jobName, resourceGroupName, markDevicesShippedRequest, options) {
        return this.client.sendOperationRequest({ jobName, resourceGroupName, markDevicesShippedRequest, options }, markDevicesShippedOperationSpec);
    }
    /**
     * Lists all the jobs available under the given resource group.
     * @param resourceGroupName The Resource Group Name
     * @param options The options parameters.
     */
    _listByResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listByResourceGroupOperationSpec);
    }
    /**
     * Gets information about the specified job.
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be
     *                between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param options The options parameters.
     */
    get(resourceGroupName, jobName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, jobName, options }, getOperationSpec);
    }
    /**
     * Creates a new job with the specified parameters. Existing job cannot be updated with this API and
     * should instead be updated with the Update job API.
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be
     *                between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param jobResource Job details from request body.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName, jobName, jobResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, jobName, jobResource, options },
                spec: createOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Creates a new job with the specified parameters. Existing job cannot be updated with this API and
     * should instead be updated with the Update job API.
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be
     *                between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param jobResource Job details from request body.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName, jobName, jobResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreate(resourceGroupName, jobName, jobResource, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Deletes a job.
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be
     *                between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, jobName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, jobName, options },
                spec: deleteOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes a job.
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be
     *                between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, jobName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, jobName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Updates the properties of an existing job.
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be
     *                between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param jobResourceUpdateParameter Job update parameters from request body.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, jobName, jobResourceUpdateParameter, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, jobName, jobResourceUpdateParameter, options },
                spec: updateOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Updates the properties of an existing job.
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be
     *                between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param jobResourceUpdateParameter Job update parameters from request body.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, jobName, jobResourceUpdateParameter, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, jobName, jobResourceUpdateParameter, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Book shipment pick up.
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be
     *                between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param shipmentPickUpRequest Details of shipment pick up request.
     * @param options The options parameters.
     */
    bookShipmentPickUp(resourceGroupName, jobName, shipmentPickUpRequest, options) {
        return this.client.sendOperationRequest({ resourceGroupName, jobName, shipmentPickUpRequest, options }, bookShipmentPickUpOperationSpec);
    }
    /**
     * CancelJob.
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be
     *                between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param cancellationReason Reason for cancellation.
     * @param options The options parameters.
     */
    cancel(resourceGroupName, jobName, cancellationReason, options) {
        return this.client.sendOperationRequest({ resourceGroupName, jobName, cancellationReason, options }, cancelOperationSpec);
    }
    /**
     * This method gets the unencrypted secrets related to the job.
     * @param resourceGroupName The Resource Group Name
     * @param jobName The name of the job Resource within the specified resource group. job names must be
     *                between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param options The options parameters.
     */
    _listCredentials(resourceGroupName, jobName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, jobName, options }, listCredentialsOperationSpec);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec);
    }
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName The Resource Group Name
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    _listByResourceGroupNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, listByResourceGroupNextOperationSpec);
    }
}
// Operation Specifications
const serializer$2 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.DataBox/jobs",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: JobResourceList
        },
        default: {
            bodyMapper: ApiError
        }
    },
    queryParameters: [apiVersion, skipToken],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$2
};
const markDevicesShippedOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs/{jobName}/markDevicesShipped",
    httpMethod: "POST",
    responses: {
        204: {},
        default: {
            bodyMapper: ApiError
        }
    },
    requestBody: markDevicesShippedRequest,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        jobName,
        resourceGroupName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$2
};
const listByResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: JobResourceList
        },
        default: {
            bodyMapper: ApiError
        }
    },
    queryParameters: [apiVersion, skipToken],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs/{jobName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: JobResource
        },
        default: {
            bodyMapper: ApiError
        }
    },
    queryParameters: [apiVersion, expand],
    urlParameters: [
        $host,
        subscriptionId,
        jobName,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const createOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs/{jobName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: JobResource
        },
        201: {
            bodyMapper: JobResource
        },
        202: {
            bodyMapper: JobResource
        },
        204: {
            bodyMapper: JobResource
        },
        default: {
            bodyMapper: ApiError
        }
    },
    requestBody: jobResource,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        jobName,
        resourceGroupName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$2
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs/{jobName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ApiError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        jobName,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs/{jobName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: JobResource
        },
        201: {
            bodyMapper: JobResource
        },
        202: {
            bodyMapper: JobResource
        },
        204: {
            bodyMapper: JobResource
        },
        default: {
            bodyMapper: ApiError
        }
    },
    requestBody: jobResourceUpdateParameter,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        jobName,
        resourceGroupName
    ],
    headerParameters: [
        accept,
        contentType,
        ifMatch
    ],
    mediaType: "json",
    serializer: serializer$2
};
const bookShipmentPickUpOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs/{jobName}/bookShipmentPickUp",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ShipmentPickUpResponse
        },
        default: {
            bodyMapper: ApiError
        }
    },
    requestBody: shipmentPickUpRequest,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        jobName,
        resourceGroupName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$2
};
const cancelOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs/{jobName}/cancel",
    httpMethod: "POST",
    responses: {
        204: {},
        default: {
            bodyMapper: ApiError
        }
    },
    requestBody: cancellationReason,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        jobName,
        resourceGroupName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$2
};
const listCredentialsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs/{jobName}/listCredentials",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: UnencryptedCredentialsList
        },
        default: {
            bodyMapper: ApiError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        jobName,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: JobResourceList
        },
        default: {
            bodyMapper: ApiError
        }
    },
    urlParameters: [
        $host,
        nextLink,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listByResourceGroupNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: JobResourceList
        },
        default: {
            bodyMapper: ApiError
        }
    },
    urlParameters: [
        $host,
        nextLink,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Service operations. */
class ServiceImpl {
    /**
     * Initialize a new instance of the class Service class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * This method provides the list of available skus for the given subscription, resource group and
     * location.
     * @param resourceGroupName The Resource Group Name
     * @param location The location of the resource
     * @param availableSkuRequest Filters for showing the available skus.
     * @param options The options parameters.
     */
    listAvailableSkusByResourceGroup(resourceGroupName, location, availableSkuRequest, options) {
        const iter = this.listAvailableSkusByResourceGroupPagingAll(resourceGroupName, location, availableSkuRequest, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listAvailableSkusByResourceGroupPagingPage(resourceGroupName, location, availableSkuRequest, options, settings);
            }
        };
    }
    listAvailableSkusByResourceGroupPagingPage(resourceGroupName, location, availableSkuRequest, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listAvailableSkusByResourceGroupPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listAvailableSkusByResourceGroup(resourceGroupName, location, availableSkuRequest, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listAvailableSkusByResourceGroupNext(resourceGroupName, location, availableSkuRequest, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listAvailableSkusByResourceGroupPagingAll(resourceGroupName, location, availableSkuRequest, options) {
        return tslib.__asyncGenerator(this, arguments, function* listAvailableSkusByResourceGroupPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listAvailableSkusByResourceGroupPagingPage(resourceGroupName, location, availableSkuRequest, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * This method provides the list of available skus for the given subscription, resource group and
     * location.
     * @param resourceGroupName The Resource Group Name
     * @param location The location of the resource
     * @param availableSkuRequest Filters for showing the available skus.
     * @param options The options parameters.
     */
    _listAvailableSkusByResourceGroup(resourceGroupName, location, availableSkuRequest, options) {
        return this.client.sendOperationRequest({ resourceGroupName, location, availableSkuRequest, options }, listAvailableSkusByResourceGroupOperationSpec);
    }
    /**
     * [DEPRECATED NOTICE: This operation will soon be removed]. This method validates the customer
     * shipping address and provide alternate addresses if any.
     * @param location The location of the resource
     * @param validateAddress Shipping address of the customer.
     * @param options The options parameters.
     */
    validateAddress(location, validateAddress, options) {
        return this.client.sendOperationRequest({ location, validateAddress, options }, validateAddressOperationSpec);
    }
    /**
     * This method does all necessary pre-job creation validation under resource group.
     * @param resourceGroupName The Resource Group Name
     * @param location The location of the resource
     * @param validationRequest Inputs of the customer.
     * @param options The options parameters.
     */
    validateInputsByResourceGroup(resourceGroupName, location, validationRequest, options) {
        return this.client.sendOperationRequest({ resourceGroupName, location, validationRequest, options }, validateInputsByResourceGroupOperationSpec);
    }
    /**
     * This method does all necessary pre-job creation validation under subscription.
     * @param location The location of the resource
     * @param validationRequest Inputs of the customer.
     * @param options The options parameters.
     */
    validateInputs(location, validationRequest, options) {
        return this.client.sendOperationRequest({ location, validationRequest, options }, validateInputsOperationSpec);
    }
    /**
     * This API provides configuration details specific to given region/location at Subscription level.
     * @param location The location of the resource
     * @param regionConfigurationRequest Request body to get the configuration for the region.
     * @param options The options parameters.
     */
    regionConfiguration(location, regionConfigurationRequest, options) {
        return this.client.sendOperationRequest({ location, regionConfigurationRequest, options }, regionConfigurationOperationSpec);
    }
    /**
     * This API provides configuration details specific to given region/location at Resource group level.
     * @param resourceGroupName The Resource Group Name
     * @param location The location of the resource
     * @param regionConfigurationRequest Request body to get the configuration for the region at resource
     *                                   group level.
     * @param options The options parameters.
     */
    regionConfigurationByResourceGroup(resourceGroupName, location, regionConfigurationRequest, options) {
        return this.client.sendOperationRequest({ resourceGroupName, location, regionConfigurationRequest, options }, regionConfigurationByResourceGroupOperationSpec);
    }
    /**
     * ListAvailableSkusByResourceGroupNext
     * @param resourceGroupName The Resource Group Name
     * @param location The location of the resource
     * @param availableSkuRequest Filters for showing the available skus.
     * @param nextLink The nextLink from the previous successful call to the
     *                 ListAvailableSkusByResourceGroup method.
     * @param options The options parameters.
     */
    _listAvailableSkusByResourceGroupNext(resourceGroupName, location, availableSkuRequest, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, location, availableSkuRequest, nextLink, options }, listAvailableSkusByResourceGroupNextOperationSpec);
    }
}
// Operation Specifications
const serializer$1 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listAvailableSkusByResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/locations/{location}/availableSkus",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: AvailableSkusResult
        },
        default: {
            bodyMapper: ApiError
        }
    },
    requestBody: availableSkuRequest,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        location
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$1
};
const validateAddressOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.DataBox/locations/{location}/validateAddress",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: AddressValidationOutput
        },
        default: {
            bodyMapper: ApiError
        }
    },
    requestBody: validateAddress,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        location
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$1
};
const validateInputsByResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/locations/{location}/validateInputs",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ValidationResponse
        },
        default: {
            bodyMapper: ApiError
        }
    },
    requestBody: validationRequest,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        location
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$1
};
const validateInputsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.DataBox/locations/{location}/validateInputs",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ValidationResponse
        },
        default: {
            bodyMapper: ApiError
        }
    },
    requestBody: validationRequest,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        location
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$1
};
const regionConfigurationOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.DataBox/locations/{location}/regionConfiguration",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: RegionConfigurationResponse
        },
        default: {
            bodyMapper: ApiError
        }
    },
    requestBody: regionConfigurationRequest,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        location
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$1
};
const regionConfigurationByResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/locations/{location}/regionConfiguration",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: RegionConfigurationResponse
        },
        default: {
            bodyMapper: ApiError
        }
    },
    requestBody: regionConfigurationRequest,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        location
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$1
};
const listAvailableSkusByResourceGroupNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AvailableSkusResult
        },
        default: {
            bodyMapper: ApiError
        }
    },
    urlParameters: [
        $host,
        nextLink,
        subscriptionId,
        resourceGroupName,
        location
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$1
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class DataBoxManagementClient extends coreClient__namespace.ServiceClient {
    /**
     * Initializes a new instance of the DataBoxManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The Subscription Id
     * @param options The parameter options
     */
    constructor(credentials, subscriptionId, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        if (subscriptionId === undefined) {
            throw new Error("'subscriptionId' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-databox/5.0.0`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName
            });
            this.pipeline.addPolicy(coreRestPipeline__namespace.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient__namespace.authorizeRequestOnClaimChallenge
                }
            }));
        }
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.apiVersion = options.apiVersion || "2022-12-01";
        this.operations = new OperationsImpl(this);
        this.jobs = new JobsImpl(this);
        this.service = new ServiceImpl(this);
        this.addCustomApiVersionPolicy(options.apiVersion);
    }
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    addCustomApiVersionPolicy(apiVersion) {
        if (!apiVersion) {
            return;
        }
        const apiVersionPolicy = {
            name: "CustomApiVersionPolicy",
            sendRequest(request, next) {
                return tslib.__awaiter(this, void 0, void 0, function* () {
                    const param = request.url.split("?");
                    if (param.length > 1) {
                        const newParams = param[1].split("&").map((item) => {
                            if (item.indexOf("api-version") > -1) {
                                return "api-version=" + apiVersion;
                            }
                            else {
                                return item;
                            }
                        });
                        request.url = param[0] + "?" + newParams.join("&");
                    }
                    return next(request);
                });
            }
        };
        this.pipeline.addPolicy(apiVersionPolicy);
    }
    /**
     * Request to mitigate for a given job
     * @param jobName The name of the job Resource within the specified resource group. job names must be
     *                between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param resourceGroupName The Resource Group Name
     * @param mitigateJobRequest Mitigation Request
     * @param options The options parameters.
     */
    mitigate(jobName, resourceGroupName, mitigateJobRequest, options) {
        return this.sendOperationRequest({ jobName, resourceGroupName, mitigateJobRequest, options }, mitigateOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const mitigateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs/{jobName}/mitigate",
    httpMethod: "POST",
    responses: {
        204: {},
        default: {
            bodyMapper: ApiError
        }
    },
    requestBody: mitigateJobRequest,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        jobName,
        resourceGroupName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};

exports.DataBoxManagementClient = DataBoxManagementClient;
exports.getContinuationToken = getContinuationToken;
//# sourceMappingURL=index.js.map
