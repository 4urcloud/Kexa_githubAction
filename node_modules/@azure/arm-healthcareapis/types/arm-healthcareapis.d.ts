import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { OperationState } from '@azure/core-lro';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { SimplePollerLike } from '@azure/core-lro';

/**
 * Defines values for ActionType. \
 * {@link KnownActionType} can be used interchangeably with ActionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Internal**
 */
export declare type ActionType = string;

/** Input values. */
export declare interface CheckNameAvailabilityParameters {
    /** The name of the service instance to check. */
    name: string;
    /** The fully qualified resource type which includes provider namespace. */
    type: string;
}

/** The settings for the CORS configuration of the service instance. */
export declare interface CorsConfiguration {
    /** The origins to be allowed via CORS. */
    origins?: string[];
    /** The headers to be allowed via CORS. */
    headers?: string[];
    /** The methods to be allowed via CORS. */
    methods?: string[];
    /** The max age to be allowed via CORS. */
    maxAge?: number;
    /** If credentials are allowed via CORS. */
    allowCredentials?: boolean;
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export declare type CreatedByType = string;

/** The description of Dicom Service */
export declare interface DicomService extends TaggedResource, ServiceManagedIdentity {
    /**
     * Metadata pertaining to creation and last modification of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /**
     * The provisioning state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /** Dicom Service authentication configuration. */
    authenticationConfiguration?: DicomServiceAuthenticationConfiguration;
    /** Dicom Service Cors configuration. */
    corsConfiguration?: CorsConfiguration;
    /**
     * The url of the Dicom Services.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly serviceUrl?: string;
    /**
     * The list of private endpoint connections that are set up for this resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly privateEndpointConnections?: PrivateEndpointConnection[];
    /** Control permission for data plane traffic coming from public networks while private endpoint is enabled. */
    publicNetworkAccess?: PublicNetworkAccess;
    /**
     * DICOM Service event support status.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly eventState?: ServiceEventState;
    /** The encryption settings of the DICOM service */
    encryption?: Encryption;
}

/** Authentication configuration information */
export declare interface DicomServiceAuthenticationConfiguration {
    /**
     * The authority url for the service
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly authority?: string;
    /**
     * The audiences for the service
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly audiences?: string[];
}

/** The collection of Dicom Services. */
export declare interface DicomServiceCollection {
    /** The link used to get the next page of Dicom Services. */
    nextLink?: string;
    /** The list of Dicom Services. */
    value?: DicomService[];
}

/** Dicom Service patch properties */
export declare interface DicomServicePatchResource extends ResourceTags, ServiceManagedIdentity {
}

/** Interface representing a DicomServices. */
export declare interface DicomServices {
    /**
     * Lists all DICOM Services for the given workspace
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param workspaceName The name of workspace resource.
     * @param options The options parameters.
     */
    listByWorkspace(resourceGroupName: string, workspaceName: string, options?: DicomServicesListByWorkspaceOptionalParams): PagedAsyncIterableIterator<DicomService>;
    /**
     * Gets the properties of the specified DICOM Service.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param workspaceName The name of workspace resource.
     * @param dicomServiceName The name of DICOM Service resource.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, dicomServiceName: string, options?: DicomServicesGetOptionalParams): Promise<DicomServicesGetResponse>;
    /**
     * Creates or updates a DICOM Service resource with the specified parameters.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param workspaceName The name of workspace resource.
     * @param dicomServiceName The name of DICOM Service resource.
     * @param dicomservice The parameters for creating or updating a Dicom Service resource.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, workspaceName: string, dicomServiceName: string, dicomservice: DicomService, options?: DicomServicesCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<DicomServicesCreateOrUpdateResponse>, DicomServicesCreateOrUpdateResponse>>;
    /**
     * Creates or updates a DICOM Service resource with the specified parameters.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param workspaceName The name of workspace resource.
     * @param dicomServiceName The name of DICOM Service resource.
     * @param dicomservice The parameters for creating or updating a Dicom Service resource.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, workspaceName: string, dicomServiceName: string, dicomservice: DicomService, options?: DicomServicesCreateOrUpdateOptionalParams): Promise<DicomServicesCreateOrUpdateResponse>;
    /**
     * Patch DICOM Service details.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param dicomServiceName The name of DICOM Service resource.
     * @param workspaceName The name of workspace resource.
     * @param dicomservicePatchResource The parameters for updating a Dicom Service.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, dicomServiceName: string, workspaceName: string, dicomservicePatchResource: DicomServicePatchResource, options?: DicomServicesUpdateOptionalParams): Promise<SimplePollerLike<OperationState<DicomServicesUpdateResponse>, DicomServicesUpdateResponse>>;
    /**
     * Patch DICOM Service details.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param dicomServiceName The name of DICOM Service resource.
     * @param workspaceName The name of workspace resource.
     * @param dicomservicePatchResource The parameters for updating a Dicom Service.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, dicomServiceName: string, workspaceName: string, dicomservicePatchResource: DicomServicePatchResource, options?: DicomServicesUpdateOptionalParams): Promise<DicomServicesUpdateResponse>;
    /**
     * Deletes a DICOM Service.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param dicomServiceName The name of DICOM Service resource.
     * @param workspaceName The name of workspace resource.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, dicomServiceName: string, workspaceName: string, options?: DicomServicesDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes a DICOM Service.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param dicomServiceName The name of DICOM Service resource.
     * @param workspaceName The name of workspace resource.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, dicomServiceName: string, workspaceName: string, options?: DicomServicesDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface DicomServicesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type DicomServicesCreateOrUpdateResponse = DicomService;

/** Optional parameters. */
export declare interface DicomServicesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface DicomServicesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type DicomServicesGetResponse = DicomService;

/** Optional parameters. */
export declare interface DicomServicesListByWorkspaceNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByWorkspaceNext operation. */
export declare type DicomServicesListByWorkspaceNextResponse = DicomServiceCollection;

/** Optional parameters. */
export declare interface DicomServicesListByWorkspaceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByWorkspace operation. */
export declare type DicomServicesListByWorkspaceResponse = DicomServiceCollection;

/** Optional parameters. */
export declare interface DicomServicesUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type DicomServicesUpdateResponse = DicomService;

/** Settings to encrypt a service */
export declare interface Encryption {
    /** The encryption settings for the customer-managed key */
    customerManagedKeyEncryption?: EncryptionCustomerManagedKeyEncryption;
}

/** The encryption settings for the customer-managed key */
export declare interface EncryptionCustomerManagedKeyEncryption {
    /** The URL of the key to use for encryption */
    keyEncryptionKeyUrl?: string;
}

/** Error details. */
export declare interface ErrorDetails {
    /** Error details */
    error?: ErrorDetailsInternal;
}

/** Error details. */
export declare interface ErrorDetailsInternal {
    /**
     * The error code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * The error message.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
    /**
     * The target of the particular error.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly target?: string;
}

/** Error details. */
export declare interface ErrorModel {
    /** Error details */
    error?: ErrorDetailsInternal;
}

/** Interface representing a FhirDestinations. */
export declare interface FhirDestinations {
    /**
     * Lists all FHIR destinations for the given IoT Connector
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param workspaceName The name of workspace resource.
     * @param iotConnectorName The name of IoT Connector resource.
     * @param options The options parameters.
     */
    listByIotConnector(resourceGroupName: string, workspaceName: string, iotConnectorName: string, options?: FhirDestinationsListByIotConnectorOptionalParams): PagedAsyncIterableIterator<IotFhirDestination>;
}

/** Optional parameters. */
export declare interface FhirDestinationsListByIotConnectorNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByIotConnectorNext operation. */
export declare type FhirDestinationsListByIotConnectorNextResponse = IotFhirDestinationCollection;

/** Optional parameters. */
export declare interface FhirDestinationsListByIotConnectorOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByIotConnector operation. */
export declare type FhirDestinationsListByIotConnectorResponse = IotFhirDestinationCollection;

/**
 * Defines values for FhirResourceVersionPolicy. \
 * {@link KnownFhirResourceVersionPolicy} can be used interchangeably with FhirResourceVersionPolicy,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **no-version** \
 * **versioned** \
 * **versioned-update**
 */
export declare type FhirResourceVersionPolicy = string;

/** The description of Fhir Service */
export declare interface FhirService extends TaggedResource, ServiceManagedIdentity {
    /** The kind of the service. */
    kind?: FhirServiceKind;
    /**
     * Metadata pertaining to creation and last modification of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /**
     * The provisioning state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /** Fhir Service Azure container registry configuration. */
    acrConfiguration?: FhirServiceAcrConfiguration;
    /** Fhir Service authentication configuration. */
    authenticationConfiguration?: FhirServiceAuthenticationConfiguration;
    /** Fhir Service Cors configuration. */
    corsConfiguration?: FhirServiceCorsConfiguration;
    /** Fhir Service export configuration. */
    exportConfiguration?: FhirServiceExportConfiguration;
    /**
     * The list of private endpoint connections that are set up for this resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly privateEndpointConnections?: PrivateEndpointConnection[];
    /** Control permission for data plane traffic coming from public networks while private endpoint is enabled. */
    publicNetworkAccess?: PublicNetworkAccess;
    /**
     * Fhir Service event support status.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly eventState?: ServiceEventState;
    /** Determines tracking of history for resources. */
    resourceVersionPolicyConfiguration?: ResourceVersionPolicyConfiguration;
    /** Fhir Service import configuration. */
    importConfiguration?: FhirServiceImportConfiguration;
    /** Implementation Guides configuration. */
    implementationGuidesConfiguration?: ImplementationGuidesConfiguration;
    /** The encryption settings of the FHIR service */
    encryption?: Encryption;
}

/** Azure container registry configuration information */
export declare interface FhirServiceAcrConfiguration {
    /** The list of the Azure container registry login servers. */
    loginServers?: string[];
    /** The list of Open Container Initiative (OCI) artifacts. */
    ociArtifacts?: ServiceOciArtifactEntry[];
}

/** Authentication configuration information */
export declare interface FhirServiceAuthenticationConfiguration {
    /** The authority url for the service */
    authority?: string;
    /** The audience url for the service */
    audience?: string;
    /** If the SMART on FHIR proxy is enabled */
    smartProxyEnabled?: boolean;
}

/** A collection of Fhir services. */
export declare interface FhirServiceCollection {
    /** The link used to get the next page of Fhir Services. */
    nextLink?: string;
    /** The list of Fhir Services. */
    value?: FhirService[];
}

/** The settings for the CORS configuration of the service instance. */
export declare interface FhirServiceCorsConfiguration {
    /** The origins to be allowed via CORS. */
    origins?: string[];
    /** The headers to be allowed via CORS. */
    headers?: string[];
    /** The methods to be allowed via CORS. */
    methods?: string[];
    /** The max age to be allowed via CORS. */
    maxAge?: number;
    /** If credentials are allowed via CORS. */
    allowCredentials?: boolean;
}

/** Export operation configuration information */
export declare interface FhirServiceExportConfiguration {
    /** The name of the default export storage account. */
    storageAccountName?: string;
}

/** Import operation configuration information */
export declare interface FhirServiceImportConfiguration {
    /** The name of the default integration storage account. */
    integrationDataStore?: string;
    /** If the FHIR service is in InitialImportMode. */
    initialImportMode?: boolean;
    /** If the import operation is enabled. */
    enabled?: boolean;
}

/**
 * Defines values for FhirServiceKind. \
 * {@link KnownFhirServiceKind} can be used interchangeably with FhirServiceKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **fhir-Stu3** \
 * **fhir-R4**
 */
export declare type FhirServiceKind = string;

/** FhirService patch properties */
export declare interface FhirServicePatchResource extends ResourceTags, ServiceManagedIdentity {
}

/** Interface representing a FhirServices. */
export declare interface FhirServices {
    /**
     * Lists all FHIR Services for the given workspace
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param workspaceName The name of workspace resource.
     * @param options The options parameters.
     */
    listByWorkspace(resourceGroupName: string, workspaceName: string, options?: FhirServicesListByWorkspaceOptionalParams): PagedAsyncIterableIterator<FhirService>;
    /**
     * Gets the properties of the specified FHIR Service.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param workspaceName The name of workspace resource.
     * @param fhirServiceName The name of FHIR Service resource.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, fhirServiceName: string, options?: FhirServicesGetOptionalParams): Promise<FhirServicesGetResponse>;
    /**
     * Creates or updates a FHIR Service resource with the specified parameters.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param workspaceName The name of workspace resource.
     * @param fhirServiceName The name of FHIR Service resource.
     * @param fhirservice The parameters for creating or updating a Fhir Service resource.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, workspaceName: string, fhirServiceName: string, fhirservice: FhirService, options?: FhirServicesCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<FhirServicesCreateOrUpdateResponse>, FhirServicesCreateOrUpdateResponse>>;
    /**
     * Creates or updates a FHIR Service resource with the specified parameters.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param workspaceName The name of workspace resource.
     * @param fhirServiceName The name of FHIR Service resource.
     * @param fhirservice The parameters for creating or updating a Fhir Service resource.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, workspaceName: string, fhirServiceName: string, fhirservice: FhirService, options?: FhirServicesCreateOrUpdateOptionalParams): Promise<FhirServicesCreateOrUpdateResponse>;
    /**
     * Patch FHIR Service details.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param fhirServiceName The name of FHIR Service resource.
     * @param workspaceName The name of workspace resource.
     * @param fhirservicePatchResource The parameters for updating a Fhir Service.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, fhirServiceName: string, workspaceName: string, fhirservicePatchResource: FhirServicePatchResource, options?: FhirServicesUpdateOptionalParams): Promise<SimplePollerLike<OperationState<FhirServicesUpdateResponse>, FhirServicesUpdateResponse>>;
    /**
     * Patch FHIR Service details.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param fhirServiceName The name of FHIR Service resource.
     * @param workspaceName The name of workspace resource.
     * @param fhirservicePatchResource The parameters for updating a Fhir Service.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, fhirServiceName: string, workspaceName: string, fhirservicePatchResource: FhirServicePatchResource, options?: FhirServicesUpdateOptionalParams): Promise<FhirServicesUpdateResponse>;
    /**
     * Deletes a FHIR Service.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param fhirServiceName The name of FHIR Service resource.
     * @param workspaceName The name of workspace resource.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, fhirServiceName: string, workspaceName: string, options?: FhirServicesDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes a FHIR Service.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param fhirServiceName The name of FHIR Service resource.
     * @param workspaceName The name of workspace resource.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, fhirServiceName: string, workspaceName: string, options?: FhirServicesDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface FhirServicesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type FhirServicesCreateOrUpdateResponse = FhirService;

/** Optional parameters. */
export declare interface FhirServicesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface FhirServicesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type FhirServicesGetResponse = FhirService;

/** Optional parameters. */
export declare interface FhirServicesListByWorkspaceNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByWorkspaceNext operation. */
export declare type FhirServicesListByWorkspaceNextResponse = FhirServiceCollection;

/** Optional parameters. */
export declare interface FhirServicesListByWorkspaceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByWorkspace operation. */
export declare type FhirServicesListByWorkspaceResponse = FhirServiceCollection;

/** Optional parameters. */
export declare interface FhirServicesUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type FhirServicesUpdateResponse = FhirService;

/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
export declare function getContinuationToken(page: unknown): string | undefined;

export declare class HealthcareApisManagementClient extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the HealthcareApisManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: HealthcareApisManagementClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    services: Services;
    privateEndpointConnections: PrivateEndpointConnections;
    privateLinkResources: PrivateLinkResources;
    workspaces: Workspaces;
    dicomServices: DicomServices;
    iotConnectors: IotConnectors;
    fhirDestinations: FhirDestinations;
    iotConnectorFhirDestination: IotConnectorFhirDestination;
    fhirServices: FhirServices;
    workspacePrivateEndpointConnections: WorkspacePrivateEndpointConnections;
    workspacePrivateLinkResources: WorkspacePrivateLinkResources;
    operations: Operations;
    operationResults: OperationResults;
}

/** Optional parameters. */
export declare interface HealthcareApisManagementClientOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** The settings for Implementation Guides - defining capabilities for national standards, vendor consortiums, clinical societies, etc. */
export declare interface ImplementationGuidesConfiguration {
    /** If US Core Missing Data requirement is enabled. */
    usCoreMissingData?: boolean;
}

/** IoT Connector definition. */
export declare interface IotConnector extends TaggedResource, ServiceManagedIdentity {
    /**
     * Metadata pertaining to creation and last modification of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /**
     * The provisioning state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /** Source configuration. */
    ingestionEndpointConfiguration?: IotEventHubIngestionEndpointConfiguration;
    /** Device Mappings. */
    deviceMapping?: IotMappingProperties;
}

/** A collection of IoT Connectors. */
export declare interface IotConnectorCollection {
    /** The link used to get the next page of IoT Connectors. */
    nextLink?: string;
    /** The list of IoT Connectors. */
    value?: IotConnector[];
}

/** Interface representing a IotConnectorFhirDestination. */
export declare interface IotConnectorFhirDestination {
    /**
     * Gets the properties of the specified Iot Connector FHIR destination.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param workspaceName The name of workspace resource.
     * @param iotConnectorName The name of IoT Connector resource.
     * @param fhirDestinationName The name of IoT Connector FHIR destination resource.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, iotConnectorName: string, fhirDestinationName: string, options?: IotConnectorFhirDestinationGetOptionalParams): Promise<IotConnectorFhirDestinationGetResponse>;
    /**
     * Creates or updates an IoT Connector FHIR destination resource with the specified parameters.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param workspaceName The name of workspace resource.
     * @param iotConnectorName The name of IoT Connector resource.
     * @param fhirDestinationName The name of IoT Connector FHIR destination resource.
     * @param iotFhirDestination The parameters for creating or updating an IoT Connector FHIR destination
     *                           resource.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, workspaceName: string, iotConnectorName: string, fhirDestinationName: string, iotFhirDestination: IotFhirDestination, options?: IotConnectorFhirDestinationCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<IotConnectorFhirDestinationCreateOrUpdateResponse>, IotConnectorFhirDestinationCreateOrUpdateResponse>>;
    /**
     * Creates or updates an IoT Connector FHIR destination resource with the specified parameters.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param workspaceName The name of workspace resource.
     * @param iotConnectorName The name of IoT Connector resource.
     * @param fhirDestinationName The name of IoT Connector FHIR destination resource.
     * @param iotFhirDestination The parameters for creating or updating an IoT Connector FHIR destination
     *                           resource.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, workspaceName: string, iotConnectorName: string, fhirDestinationName: string, iotFhirDestination: IotFhirDestination, options?: IotConnectorFhirDestinationCreateOrUpdateOptionalParams): Promise<IotConnectorFhirDestinationCreateOrUpdateResponse>;
    /**
     * Deletes an IoT Connector FHIR destination.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param workspaceName The name of workspace resource.
     * @param iotConnectorName The name of IoT Connector resource.
     * @param fhirDestinationName The name of IoT Connector FHIR destination resource.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, workspaceName: string, iotConnectorName: string, fhirDestinationName: string, options?: IotConnectorFhirDestinationDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes an IoT Connector FHIR destination.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param workspaceName The name of workspace resource.
     * @param iotConnectorName The name of IoT Connector resource.
     * @param fhirDestinationName The name of IoT Connector FHIR destination resource.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, workspaceName: string, iotConnectorName: string, fhirDestinationName: string, options?: IotConnectorFhirDestinationDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface IotConnectorFhirDestinationCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type IotConnectorFhirDestinationCreateOrUpdateResponse = IotFhirDestination;

/** Optional parameters. */
export declare interface IotConnectorFhirDestinationDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface IotConnectorFhirDestinationGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type IotConnectorFhirDestinationGetResponse = IotFhirDestination;

/** Iot Connector patch properties */
export declare interface IotConnectorPatchResource extends ResourceTags, ServiceManagedIdentity {
}

/** Interface representing a IotConnectors. */
export declare interface IotConnectors {
    /**
     * Lists all IoT Connectors for the given workspace
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param workspaceName The name of workspace resource.
     * @param options The options parameters.
     */
    listByWorkspace(resourceGroupName: string, workspaceName: string, options?: IotConnectorsListByWorkspaceOptionalParams): PagedAsyncIterableIterator<IotConnector>;
    /**
     * Gets the properties of the specified IoT Connector.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param workspaceName The name of workspace resource.
     * @param iotConnectorName The name of IoT Connector resource.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, iotConnectorName: string, options?: IotConnectorsGetOptionalParams): Promise<IotConnectorsGetResponse>;
    /**
     * Creates or updates an IoT Connector resource with the specified parameters.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param workspaceName The name of workspace resource.
     * @param iotConnectorName The name of IoT Connector resource.
     * @param iotConnector The parameters for creating or updating an IoT Connectors resource.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, workspaceName: string, iotConnectorName: string, iotConnector: IotConnector, options?: IotConnectorsCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<IotConnectorsCreateOrUpdateResponse>, IotConnectorsCreateOrUpdateResponse>>;
    /**
     * Creates or updates an IoT Connector resource with the specified parameters.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param workspaceName The name of workspace resource.
     * @param iotConnectorName The name of IoT Connector resource.
     * @param iotConnector The parameters for creating or updating an IoT Connectors resource.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, workspaceName: string, iotConnectorName: string, iotConnector: IotConnector, options?: IotConnectorsCreateOrUpdateOptionalParams): Promise<IotConnectorsCreateOrUpdateResponse>;
    /**
     * Patch an IoT Connector.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param iotConnectorName The name of IoT Connector resource.
     * @param workspaceName The name of workspace resource.
     * @param iotConnectorPatchResource The parameters for updating an IoT Connector.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, iotConnectorName: string, workspaceName: string, iotConnectorPatchResource: IotConnectorPatchResource, options?: IotConnectorsUpdateOptionalParams): Promise<SimplePollerLike<OperationState<IotConnectorsUpdateResponse>, IotConnectorsUpdateResponse>>;
    /**
     * Patch an IoT Connector.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param iotConnectorName The name of IoT Connector resource.
     * @param workspaceName The name of workspace resource.
     * @param iotConnectorPatchResource The parameters for updating an IoT Connector.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, iotConnectorName: string, workspaceName: string, iotConnectorPatchResource: IotConnectorPatchResource, options?: IotConnectorsUpdateOptionalParams): Promise<IotConnectorsUpdateResponse>;
    /**
     * Deletes an IoT Connector.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param iotConnectorName The name of IoT Connector resource.
     * @param workspaceName The name of workspace resource.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, iotConnectorName: string, workspaceName: string, options?: IotConnectorsDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes an IoT Connector.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param iotConnectorName The name of IoT Connector resource.
     * @param workspaceName The name of workspace resource.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, iotConnectorName: string, workspaceName: string, options?: IotConnectorsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface IotConnectorsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type IotConnectorsCreateOrUpdateResponse = IotConnector;

/** Optional parameters. */
export declare interface IotConnectorsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface IotConnectorsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type IotConnectorsGetResponse = IotConnector;

/** Optional parameters. */
export declare interface IotConnectorsListByWorkspaceNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByWorkspaceNext operation. */
export declare type IotConnectorsListByWorkspaceNextResponse = IotConnectorCollection;

/** Optional parameters. */
export declare interface IotConnectorsListByWorkspaceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByWorkspace operation. */
export declare type IotConnectorsListByWorkspaceResponse = IotConnectorCollection;

/** Optional parameters. */
export declare interface IotConnectorsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type IotConnectorsUpdateResponse = IotConnector;

/** Common IoT Connector destination properties. */
export declare interface IotDestinationProperties {
    /**
     * The provisioning state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
}

/** Event Hub ingestion endpoint configuration */
export declare interface IotEventHubIngestionEndpointConfiguration {
    /** Event Hub name to connect to. */
    eventHubName?: string;
    /** Consumer group of the event hub to connected to. */
    consumerGroup?: string;
    /** Fully qualified namespace of the Event Hub to connect to. */
    fullyQualifiedEventHubNamespace?: string;
}

/** IoT Connector FHIR destination definition. */
export declare interface IotFhirDestination extends LocationBasedResource {
    /**
     * Metadata pertaining to creation and last modification of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /**
     * The provisioning state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /** Determines how resource identity is resolved on the destination. */
    resourceIdentityResolutionType: IotIdentityResolutionType;
    /** Fully qualified resource id of the FHIR service to connect to. */
    fhirServiceResourceId: string;
    /** FHIR Mappings */
    fhirMapping: IotMappingProperties;
}

/** A collection of IoT Connector FHIR destinations. */
export declare interface IotFhirDestinationCollection {
    /** The link used to get the next page of IoT FHIR destinations. */
    nextLink?: string;
    /** The list of IoT Connector FHIR destinations. */
    value?: IotFhirDestination[];
}

/** IoT Connector destination properties for an Azure FHIR service. */
export declare interface IotFhirDestinationProperties extends IotDestinationProperties {
    /** Determines how resource identity is resolved on the destination. */
    resourceIdentityResolutionType: IotIdentityResolutionType;
    /** Fully qualified resource id of the FHIR service to connect to. */
    fhirServiceResourceId: string;
    /** FHIR Mappings */
    fhirMapping: IotMappingProperties;
}

/**
 * Defines values for IotIdentityResolutionType. \
 * {@link KnownIotIdentityResolutionType} can be used interchangeably with IotIdentityResolutionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Create** \
 * **Lookup**
 */
export declare type IotIdentityResolutionType = string;

/** The mapping content. */
export declare interface IotMappingProperties {
    /** The mapping. */
    content?: Record<string, unknown>;
}

/** Defines values for Kind. */
export declare type Kind = "fhir" | "fhir-Stu3" | "fhir-R4";

/** Known values of {@link ActionType} that the service accepts. */
export declare enum KnownActionType {
    /** Internal */
    Internal = "Internal"
}

/** Known values of {@link CreatedByType} that the service accepts. */
export declare enum KnownCreatedByType {
    /** User */
    User = "User",
    /** Application */
    Application = "Application",
    /** ManagedIdentity */
    ManagedIdentity = "ManagedIdentity",
    /** Key */
    Key = "Key"
}

/** Known values of {@link FhirResourceVersionPolicy} that the service accepts. */
export declare enum KnownFhirResourceVersionPolicy {
    /** NoVersion */
    NoVersion = "no-version",
    /** Versioned */
    Versioned = "versioned",
    /** VersionedUpdate */
    VersionedUpdate = "versioned-update"
}

/** Known values of {@link FhirServiceKind} that the service accepts. */
export declare enum KnownFhirServiceKind {
    /** FhirStu3 */
    FhirStu3 = "fhir-Stu3",
    /** FhirR4 */
    FhirR4 = "fhir-R4"
}

/** Known values of {@link IotIdentityResolutionType} that the service accepts. */
export declare enum KnownIotIdentityResolutionType {
    /** Create */
    Create = "Create",
    /** Lookup */
    Lookup = "Lookup"
}

/** Known values of {@link ManagedServiceIdentityType} that the service accepts. */
export declare enum KnownManagedServiceIdentityType {
    /** SystemAssigned */
    SystemAssigned = "SystemAssigned",
    /** None */
    None = "None"
}

/** Known values of {@link OperationResultStatus} that the service accepts. */
export declare enum KnownOperationResultStatus {
    /** Canceled */
    Canceled = "Canceled",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Requested */
    Requested = "Requested",
    /** Running */
    Running = "Running"
}

/** Known values of {@link PrivateEndpointConnectionProvisioningState} that the service accepts. */
export declare enum KnownPrivateEndpointConnectionProvisioningState {
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Creating */
    Creating = "Creating",
    /** Deleting */
    Deleting = "Deleting",
    /** Failed */
    Failed = "Failed"
}

/** Known values of {@link PrivateEndpointServiceConnectionStatus} that the service accepts. */
export declare enum KnownPrivateEndpointServiceConnectionStatus {
    /** Pending */
    Pending = "Pending",
    /** Approved */
    Approved = "Approved",
    /** Rejected */
    Rejected = "Rejected"
}

/** Known values of {@link ProvisioningState} that the service accepts. */
export declare enum KnownProvisioningState {
    /** Deleting */
    Deleting = "Deleting",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Creating */
    Creating = "Creating",
    /** Accepted */
    Accepted = "Accepted",
    /** Verifying */
    Verifying = "Verifying",
    /** Updating */
    Updating = "Updating",
    /** Failed */
    Failed = "Failed",
    /** Canceled */
    Canceled = "Canceled",
    /** Deprovisioned */
    Deprovisioned = "Deprovisioned",
    /** Moving */
    Moving = "Moving",
    /** Suspended */
    Suspended = "Suspended",
    /** Warned */
    Warned = "Warned",
    /** SystemMaintenance */
    SystemMaintenance = "SystemMaintenance"
}

/** Known values of {@link PublicNetworkAccess} that the service accepts. */
export declare enum KnownPublicNetworkAccess {
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled"
}

/** Known values of {@link ServiceEventState} that the service accepts. */
export declare enum KnownServiceEventState {
    /** Disabled */
    Disabled = "Disabled",
    /** Enabled */
    Enabled = "Enabled",
    /** Updating */
    Updating = "Updating"
}

/** Known values of {@link ServiceManagedIdentityType} that the service accepts. */
export declare enum KnownServiceManagedIdentityType {
    /** None */
    None = "None",
    /** SystemAssigned */
    SystemAssigned = "SystemAssigned",
    /** UserAssigned */
    UserAssigned = "UserAssigned",
    /** SystemAssignedUserAssigned */
    SystemAssignedUserAssigned = "SystemAssigned,UserAssigned"
}

/** Available operations of the service */
export declare interface ListOperations {
    /**
     * Collection of available operation details
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: OperationDetail[];
    /**
     * URL client should use to fetch the next page (per server side paging).
     * It's null for now, added for future use.
     */
    nextLink?: string;
}

/** The common properties for any location based resource, tracked or proxy. */
export declare interface LocationBasedResource extends ResourceCore {
    /** The resource location. */
    location?: string;
}

/** Specifications of the Log for Azure Monitoring */
export declare interface LogSpecification {
    /** Name of the log */
    name?: string;
    /** Localized friendly display name of the log */
    displayName?: string;
    /** Blob duration of the log */
    blobDuration?: string;
}

/**
 * Defines values for ManagedServiceIdentityType. \
 * {@link KnownManagedServiceIdentityType} can be used interchangeably with ManagedServiceIdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SystemAssigned** \
 * **None**
 */
export declare type ManagedServiceIdentityType = string;

/** Specifications of the Dimension of metrics */
export declare interface MetricDimension {
    /** Name of the dimension */
    name?: string;
    /** Localized friendly display name of the dimension */
    displayName?: string;
    /** Whether this dimension should be included for the Shoebox export scenario */
    toBeExportedForShoebox?: boolean;
}

/** Specifications of the Metrics for Azure Monitoring */
export declare interface MetricSpecification {
    /** Name of the metric */
    name?: string;
    /** Localized friendly display name of the metric */
    displayName?: string;
    /** Localized friendly description of the metric */
    displayDescription?: string;
    /** Unit that makes sense for the metric */
    unit?: string;
    /** Name of the metric category that the metric belongs to. A metric can only belong to a single category. */
    category?: string;
    /** Only provide one value for this field. Valid values: Average, Minimum, Maximum, Total, Count. */
    aggregationType?: string;
    /** Supported aggregation types */
    supportedAggregationTypes?: string[];
    /** Supported time grain types */
    supportedTimeGrainTypes?: string[];
    /** Optional. If set to true, then zero will be returned for time duration where no metric is emitted/published. */
    fillGapWithZero?: boolean;
    /** Pattern for the filter of the metric. */
    metricFilterPattern?: string;
    /** Dimensions of the metric */
    dimensions?: MetricDimension[];
    /** Whether the metric is internal. */
    isInternal?: boolean;
    /** The source MDM account. */
    sourceMdmAccount?: string;
    /** The source MDM namespace. */
    sourceMdmNamespace?: string;
    /** Whether regional MDM account enabled. */
    enableRegionalMdmAccount?: boolean;
    /** The resource Id dimension name override. */
    resourceIdDimensionNameOverride?: string;
}

/** Service REST API operation. */
export declare interface OperationDetail {
    /**
     * Name of the operation
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for ARM/control-plane operations.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isDataAction?: boolean;
    /** Display of the operation */
    display?: OperationDisplay;
    /**
     * Default value is 'user,system'.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly origin?: string;
    /**
     * Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly actionType?: ActionType;
    /** Properties of the operation */
    properties?: OperationProperties;
}

/** The object that represents the operation. */
export declare interface OperationDisplay {
    /**
     * Service provider: Microsoft.HealthcareApis
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provider?: string;
    /**
     * Resource Type: Services
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resource?: string;
    /**
     * Name of the operation
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly operation?: string;
    /**
     * Friendly description for the operation,
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly description?: string;
}

/** Extra Operation properties */
export declare interface OperationProperties {
    /** Service specifications of the operation */
    serviceSpecification?: ServiceSpecification;
}

/** Interface representing a OperationResults. */
export declare interface OperationResults {
    /**
     * Get the operation result for a long running operation.
     * @param locationName The location of the operation.
     * @param operationResultId The ID of the operation result to get.
     * @param options The options parameters.
     */
    get(locationName: string, operationResultId: string, options?: OperationResultsGetOptionalParams): Promise<OperationResultsGetResponse>;
}

/** The properties indicating the operation result of an operation on a service. */
export declare interface OperationResultsDescription {
    /**
     * The ID of the operation returned.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the operation result.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The status of the operation being performed.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: OperationResultStatus;
    /**
     * The time that the operation was started.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly startTime?: string;
    /**
     * The time that the operation finished.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly endTime?: string;
    /** Additional properties of the operation result. */
    properties?: Record<string, unknown>;
}

/** Optional parameters. */
export declare interface OperationResultsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type OperationResultsGetResponse = OperationResultsDescription;

/**
 * Defines values for OperationResultStatus. \
 * {@link KnownOperationResultStatus} can be used interchangeably with OperationResultStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Canceled** \
 * **Succeeded** \
 * **Failed** \
 * **Requested** \
 * **Running**
 */
export declare type OperationResultStatus = string;

/** Interface representing a Operations. */
export declare interface Operations {
    /**
     * Lists all of the available operations supported by Microsoft Healthcare resource provider.
     * @param options The options parameters.
     */
    list(options?: OperationsListOptionalParams): PagedAsyncIterableIterator<OperationDetail>;
}

/** Optional parameters. */
export declare interface OperationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type OperationsListNextResponse = ListOperations;

/** Optional parameters. */
export declare interface OperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OperationsListResponse = ListOperations;

/** The Private Endpoint resource. */
export declare interface PrivateEndpoint {
    /**
     * The ARM identifier for Private Endpoint
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
}

/** The Private Endpoint Connection resource. */
export declare interface PrivateEndpointConnection extends Resource {
    /** The resource of private end point. */
    privateEndpoint?: PrivateEndpoint;
    /** A collection of information about the state of the connection between service consumer and provider. */
    privateLinkServiceConnectionState?: PrivateLinkServiceConnectionState;
    /**
     * The provisioning state of the private endpoint connection resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: PrivateEndpointConnectionProvisioningState;
}

/** The Private Endpoint Connection resource. */
export declare interface PrivateEndpointConnectionDescription extends PrivateEndpointConnection {
    /**
     * Metadata pertaining to creation and last modification of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
}

/** List of private endpoint connection associated with the specified storage account */
export declare interface PrivateEndpointConnectionListResult {
    /** Array of private endpoint connections */
    value?: PrivateEndpointConnection[];
}

/** List of private endpoint connection associated with the specified storage account */
export declare interface PrivateEndpointConnectionListResultDescription {
    /** Array of private endpoint connections */
    value?: PrivateEndpointConnectionDescription[];
}

/**
 * Defines values for PrivateEndpointConnectionProvisioningState. \
 * {@link KnownPrivateEndpointConnectionProvisioningState} can be used interchangeably with PrivateEndpointConnectionProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Creating** \
 * **Deleting** \
 * **Failed**
 */
export declare type PrivateEndpointConnectionProvisioningState = string;

/** Interface representing a PrivateEndpointConnections. */
export declare interface PrivateEndpointConnections {
    /**
     * Lists all private endpoint connections for a service.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param resourceName The name of the service instance.
     * @param options The options parameters.
     */
    listByService(resourceGroupName: string, resourceName: string, options?: PrivateEndpointConnectionsListByServiceOptionalParams): PagedAsyncIterableIterator<PrivateEndpointConnectionDescription>;
    /**
     * Gets the specified private endpoint connection associated with the service.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param resourceName The name of the service instance.
     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the
     *                                      Azure resource
     * @param options The options parameters.
     */
    get(resourceGroupName: string, resourceName: string, privateEndpointConnectionName: string, options?: PrivateEndpointConnectionsGetOptionalParams): Promise<PrivateEndpointConnectionsGetResponse>;
    /**
     * Update the state of the specified private endpoint connection associated with the service.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param resourceName The name of the service instance.
     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the
     *                                      Azure resource
     * @param properties The private endpoint connection properties.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, resourceName: string, privateEndpointConnectionName: string, properties: PrivateEndpointConnection, options?: PrivateEndpointConnectionsCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<PrivateEndpointConnectionsCreateOrUpdateResponse>, PrivateEndpointConnectionsCreateOrUpdateResponse>>;
    /**
     * Update the state of the specified private endpoint connection associated with the service.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param resourceName The name of the service instance.
     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the
     *                                      Azure resource
     * @param properties The private endpoint connection properties.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, resourceName: string, privateEndpointConnectionName: string, properties: PrivateEndpointConnection, options?: PrivateEndpointConnectionsCreateOrUpdateOptionalParams): Promise<PrivateEndpointConnectionsCreateOrUpdateResponse>;
    /**
     * Deletes a private endpoint connection.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param resourceName The name of the service instance.
     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the
     *                                      Azure resource
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, resourceName: string, privateEndpointConnectionName: string, options?: PrivateEndpointConnectionsDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes a private endpoint connection.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param resourceName The name of the service instance.
     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the
     *                                      Azure resource
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, resourceName: string, privateEndpointConnectionName: string, options?: PrivateEndpointConnectionsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type PrivateEndpointConnectionsCreateOrUpdateResponse = PrivateEndpointConnectionDescription;

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type PrivateEndpointConnectionsGetResponse = PrivateEndpointConnectionDescription;

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsListByServiceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByService operation. */
export declare type PrivateEndpointConnectionsListByServiceResponse = PrivateEndpointConnectionListResultDescription;

/**
 * Defines values for PrivateEndpointServiceConnectionStatus. \
 * {@link KnownPrivateEndpointServiceConnectionStatus} can be used interchangeably with PrivateEndpointServiceConnectionStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Pending** \
 * **Approved** \
 * **Rejected**
 */
export declare type PrivateEndpointServiceConnectionStatus = string;

/** A private link resource */
export declare interface PrivateLinkResource extends Resource {
    /**
     * The private link resource group id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly groupId?: string;
    /**
     * The private link resource required member names.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly requiredMembers?: string[];
    /** The private link resource Private link DNS zone name. */
    requiredZoneNames?: string[];
}

/** The Private Endpoint Connection resource. */
export declare interface PrivateLinkResourceDescription extends PrivateLinkResource {
    /**
     * Metadata pertaining to creation and last modification of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
}

/** A list of private link resources */
export declare interface PrivateLinkResourceListResultDescription {
    /** Array of private link resources */
    value?: PrivateLinkResourceDescription[];
}

/** Interface representing a PrivateLinkResources. */
export declare interface PrivateLinkResources {
    /**
     * Gets the private link resources that need to be created for a service.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param resourceName The name of the service instance.
     * @param options The options parameters.
     */
    listByService(resourceGroupName: string, resourceName: string, options?: PrivateLinkResourcesListByServiceOptionalParams): Promise<PrivateLinkResourcesListByServiceResponse>;
    /**
     * Gets a private link resource that need to be created for a service.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param resourceName The name of the service instance.
     * @param groupName The name of the private link resource group.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, resourceName: string, groupName: string, options?: PrivateLinkResourcesGetOptionalParams): Promise<PrivateLinkResourcesGetResponse>;
}

/** Optional parameters. */
export declare interface PrivateLinkResourcesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type PrivateLinkResourcesGetResponse = PrivateLinkResourceDescription;

/** Optional parameters. */
export declare interface PrivateLinkResourcesListByServiceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByService operation. */
export declare type PrivateLinkResourcesListByServiceResponse = PrivateLinkResourceListResultDescription;

/** A collection of information about the state of the connection between service consumer and provider. */
export declare interface PrivateLinkServiceConnectionState {
    /** Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service. */
    status?: PrivateEndpointServiceConnectionStatus;
    /** The reason for approval/rejection of the connection. */
    description?: string;
    /** A message indicating if changes on the service provider require any updates on the consumer. */
    actionsRequired?: string;
}

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Deleting** \
 * **Succeeded** \
 * **Creating** \
 * **Accepted** \
 * **Verifying** \
 * **Updating** \
 * **Failed** \
 * **Canceled** \
 * **Deprovisioned** \
 * **Moving** \
 * **Suspended** \
 * **Warned** \
 * **SystemMaintenance**
 */
export declare type ProvisioningState = string;

/**
 * Defines values for PublicNetworkAccess. \
 * {@link KnownPublicNetworkAccess} can be used interchangeably with PublicNetworkAccess,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export declare type PublicNetworkAccess = string;

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export declare interface Resource {
    /**
     * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
}

/** The common properties for any resource, tracked or proxy. */
export declare interface ResourceCore {
    /**
     * The resource identifier.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The resource name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The resource type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** An etag associated with the resource, used for optimistic concurrency when editing it. */
    etag?: string;
}

/** List of key value pairs that describe the resource. This will overwrite the existing tags. */
export declare interface ResourceTags {
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
}

/** The settings for history tracking for FHIR resources. */
export declare interface ResourceVersionPolicyConfiguration {
    /** The default value for tracking history across all resources. */
    default?: FhirResourceVersionPolicy;
    /** A list of FHIR Resources and their version policy overrides. */
    resourceTypeOverrides?: {
        [propertyName: string]: FhirResourceVersionPolicy;
    };
}

/** An access policy entry. */
export declare interface ServiceAccessPolicyEntry {
    /** An Azure AD object ID (User or Apps) that is allowed access to the FHIR service. */
    objectId: string;
}

/** Azure container registry configuration information */
export declare interface ServiceAcrConfigurationInfo {
    /** The list of the ACR login servers. */
    loginServers?: string[];
    /** The list of Open Container Initiative (OCI) artifacts. */
    ociArtifacts?: ServiceOciArtifactEntry[];
}

/** Authentication configuration information */
export declare interface ServiceAuthenticationConfigurationInfo {
    /** The authority url for the service */
    authority?: string;
    /** The audience url for the service */
    audience?: string;
    /** If the SMART on FHIR proxy is enabled */
    smartProxyEnabled?: boolean;
}

/** The settings for the CORS configuration of the service instance. */
export declare interface ServiceCorsConfigurationInfo {
    /** The origins to be allowed via CORS. */
    origins?: string[];
    /** The headers to be allowed via CORS. */
    headers?: string[];
    /** The methods to be allowed via CORS. */
    methods?: string[];
    /** The max age to be allowed via CORS. */
    maxAge?: number;
    /** If credentials are allowed via CORS. */
    allowCredentials?: boolean;
}

/** The settings for the Cosmos DB database backing the service. */
export declare interface ServiceCosmosDbConfigurationInfo {
    /** The provisioned throughput for the backing database. */
    offerThroughput?: number;
    /** The URI of the customer-managed key for the backing database. */
    keyVaultKeyUri?: string;
    /** The multi-tenant application id used to enable CMK access for services in a data sovereign region. */
    crossTenantCmkApplicationId?: string;
}

/**
 * Defines values for ServiceEventState. \
 * {@link KnownServiceEventState} can be used interchangeably with ServiceEventState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Disabled** \
 * **Enabled** \
 * **Updating**
 */
export declare type ServiceEventState = string;

/** Export operation configuration information */
export declare interface ServiceExportConfigurationInfo {
    /** The name of the default export storage account. */
    storageAccountName?: string;
}

/** Import operation configuration information */
export declare interface ServiceImportConfigurationInfo {
    /** The name of the default integration storage account. */
    integrationDataStore?: string;
    /** If the FHIR service is in InitialImportMode. */
    initialImportMode?: boolean;
    /** If the import operation is enabled. */
    enabled?: boolean;
}

/** Managed service identity (system assigned and/or user assigned identities) */
export declare interface ServiceManagedIdentity {
    /** Setting indicating whether the service has a managed identity associated with it. */
    identity?: ServiceManagedIdentityIdentity;
}

/** Setting indicating whether the service has a managed identity associated with it. */
export declare interface ServiceManagedIdentityIdentity {
    /** Type of identity being specified, currently SystemAssigned and None are allowed. */
    type: ServiceManagedIdentityType;
    /**
     * The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
    /**
     * The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
    /** The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests. */
    userAssignedIdentities?: {
        [propertyName: string]: UserAssignedIdentity;
    };
}

/**
 * Defines values for ServiceManagedIdentityType. \
 * {@link KnownServiceManagedIdentityType} can be used interchangeably with ServiceManagedIdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **SystemAssigned** \
 * **UserAssigned** \
 * **SystemAssigned,UserAssigned**
 */
export declare type ServiceManagedIdentityType = string;

/** Defines values for ServiceNameUnavailabilityReason. */
export declare type ServiceNameUnavailabilityReason = "Invalid" | "AlreadyExists";

/** An Open Container Initiative (OCI) artifact. */
export declare interface ServiceOciArtifactEntry {
    /** The Azure Container Registry login server. */
    loginServer?: string;
    /** The artifact name. */
    imageName?: string;
    /** The artifact digest. */
    digest?: string;
}

/** Interface representing a Services. */
export declare interface Services {
    /**
     * Get all the service instances in a subscription.
     * @param options The options parameters.
     */
    list(options?: ServicesListOptionalParams): PagedAsyncIterableIterator<ServicesDescription>;
    /**
     * Get all the service instances in a resource group.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: ServicesListByResourceGroupOptionalParams): PagedAsyncIterableIterator<ServicesDescription>;
    /**
     * Get the metadata of a service instance.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param resourceName The name of the service instance.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, resourceName: string, options?: ServicesGetOptionalParams): Promise<ServicesGetResponse>;
    /**
     * Create or update the metadata of a service instance.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param resourceName The name of the service instance.
     * @param serviceDescription The service instance metadata.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, resourceName: string, serviceDescription: ServicesDescription, options?: ServicesCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<ServicesCreateOrUpdateResponse>, ServicesCreateOrUpdateResponse>>;
    /**
     * Create or update the metadata of a service instance.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param resourceName The name of the service instance.
     * @param serviceDescription The service instance metadata.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, resourceName: string, serviceDescription: ServicesDescription, options?: ServicesCreateOrUpdateOptionalParams): Promise<ServicesCreateOrUpdateResponse>;
    /**
     * Update the metadata of a service instance.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param resourceName The name of the service instance.
     * @param servicePatchDescription The service instance metadata and security metadata.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, resourceName: string, servicePatchDescription: ServicesPatchDescription, options?: ServicesUpdateOptionalParams): Promise<SimplePollerLike<OperationState<ServicesUpdateResponse>, ServicesUpdateResponse>>;
    /**
     * Update the metadata of a service instance.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param resourceName The name of the service instance.
     * @param servicePatchDescription The service instance metadata and security metadata.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, resourceName: string, servicePatchDescription: ServicesPatchDescription, options?: ServicesUpdateOptionalParams): Promise<ServicesUpdateResponse>;
    /**
     * Delete a service instance.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param resourceName The name of the service instance.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, resourceName: string, options?: ServicesDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Delete a service instance.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param resourceName The name of the service instance.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, resourceName: string, options?: ServicesDeleteOptionalParams): Promise<void>;
    /**
     * Check if a service instance name is available.
     * @param checkNameAvailabilityInputs Set the name parameter in the CheckNameAvailabilityParameters
     *                                    structure to the name of the service instance to check.
     * @param options The options parameters.
     */
    checkNameAvailability(checkNameAvailabilityInputs: CheckNameAvailabilityParameters, options?: ServicesCheckNameAvailabilityOptionalParams): Promise<ServicesCheckNameAvailabilityResponse>;
}

/** Optional parameters. */
export declare interface ServicesCheckNameAvailabilityOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the checkNameAvailability operation. */
export declare type ServicesCheckNameAvailabilityResponse = ServicesNameAvailabilityInfo;

/** Optional parameters. */
export declare interface ServicesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type ServicesCreateOrUpdateResponse = ServicesDescription;

/** Optional parameters. */
export declare interface ServicesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** The description of the service. */
export declare interface ServicesDescription extends ServicesResource {
    /** The common properties of a service. */
    properties?: ServicesProperties;
    /**
     * Metadata pertaining to creation and last modification of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
}

/** A list of service description objects with a next link. */
export declare interface ServicesDescriptionListResult {
    /** The link used to get the next page of service description objects. */
    nextLink?: string;
    /** A list of service description objects. */
    value?: ServicesDescription[];
}

/** Optional parameters. */
export declare interface ServicesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ServicesGetResponse = ServicesDescription;

/** Optional parameters. */
export declare interface ServicesListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type ServicesListByResourceGroupNextResponse = ServicesDescriptionListResult;

/** Optional parameters. */
export declare interface ServicesListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type ServicesListByResourceGroupResponse = ServicesDescriptionListResult;

/** Optional parameters. */
export declare interface ServicesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type ServicesListNextResponse = ServicesDescriptionListResult;

/** Optional parameters. */
export declare interface ServicesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type ServicesListResponse = ServicesDescriptionListResult;

/** The properties indicating whether a given service name is available. */
export declare interface ServicesNameAvailabilityInfo {
    /**
     * The value which indicates whether the provided name is available.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nameAvailable?: boolean;
    /**
     * The reason for unavailability.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly reason?: ServiceNameUnavailabilityReason;
    /** The detailed reason message. */
    message?: string;
}

/** The description of the service. */
export declare interface ServicesPatchDescription {
    /** Instance tags */
    tags?: {
        [propertyName: string]: string;
    };
    /** Control permission for data plane traffic coming from public networks while private endpoint is enabled. */
    publicNetworkAccess?: PublicNetworkAccess;
}

/** Service specification payload */
export declare interface ServiceSpecification {
    /** Specifications of the Log for Azure Monitoring */
    logSpecifications?: LogSpecification[];
    /** Specifications of the Metrics for Azure Monitoring */
    metricSpecifications?: MetricSpecification[];
}

/** The properties of a service instance. */
export declare interface ServicesProperties {
    /**
     * The provisioning state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /** The access policies of the service instance. */
    accessPolicies?: ServiceAccessPolicyEntry[];
    /** The settings for the Cosmos DB database backing the service. */
    cosmosDbConfiguration?: ServiceCosmosDbConfigurationInfo;
    /** The authentication configuration for the service instance. */
    authenticationConfiguration?: ServiceAuthenticationConfigurationInfo;
    /** The settings for the CORS configuration of the service instance. */
    corsConfiguration?: ServiceCorsConfigurationInfo;
    /** The settings for the export operation of the service instance. */
    exportConfiguration?: ServiceExportConfigurationInfo;
    /** The list of private endpoint connections that are set up for this resource. */
    privateEndpointConnections?: PrivateEndpointConnection[];
    /** Control permission for data plane traffic coming from public networks while private endpoint is enabled. */
    publicNetworkAccess?: PublicNetworkAccess;
    /** The azure container registry settings used for convert data operation of the service instance. */
    acrConfiguration?: ServiceAcrConfigurationInfo;
    /** The settings for the import operation of the service instance. */
    importConfiguration?: ServiceImportConfigurationInfo;
}

/** The common properties of a service. */
export declare interface ServicesResource {
    /**
     * The resource identifier.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The resource name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The resource type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** The kind of the service. */
    kind: Kind;
    /** The resource location. */
    location: string;
    /** The resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** An etag associated with the resource, used for optimistic concurrency when editing it. */
    etag?: string;
    /** Setting indicating whether the service has a managed identity associated with it. */
    identity?: ServicesResourceIdentity;
}

/** Setting indicating whether the service has a managed identity associated with it. */
export declare interface ServicesResourceIdentity {
    /**
     * The principal ID of the resource identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
    /**
     * The tenant ID of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
    /** Type of identity being specified, currently SystemAssigned and None are allowed. */
    type?: ManagedServiceIdentityType;
}

/** Optional parameters. */
export declare interface ServicesUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type ServicesUpdateResponse = ServicesDescription;

/** Metadata pertaining to creation and last modification of the resource. */
export declare interface SystemData {
    /** The identity that created the resource. */
    createdBy?: string;
    /** The type of identity that created the resource. */
    createdByType?: CreatedByType;
    /** The timestamp of resource creation (UTC). */
    createdAt?: Date;
    /** The identity that last modified the resource. */
    lastModifiedBy?: string;
    /** The type of identity that last modified the resource. */
    lastModifiedByType?: CreatedByType;
    /** The timestamp of resource last modification (UTC) */
    lastModifiedAt?: Date;
}

/** The common properties of tracked resources in the service. */
export declare interface TaggedResource extends ResourceTags, LocationBasedResource {
}

/** User assigned identity properties */
export declare interface UserAssignedIdentity {
    /**
     * The principal ID of the assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
    /**
     * The client ID of the assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly clientId?: string;
}

/** Workspace resource. */
export declare interface Workspace extends TaggedResource {
    /** Workspaces resource specific properties. */
    properties?: WorkspaceProperties;
    /**
     * Metadata pertaining to creation and last modification of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
}

/** Collection of workspace object with a next link */
export declare interface WorkspaceList {
    /** The link used to get the next page. */
    nextLink?: string;
    /** Collection of resources. */
    value?: Workspace[];
}

/** Workspace patch properties */
export declare interface WorkspacePatchResource extends ResourceTags {
}

/** Interface representing a WorkspacePrivateEndpointConnections. */
export declare interface WorkspacePrivateEndpointConnections {
    /**
     * Lists all private endpoint connections for a workspace.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param workspaceName The name of workspace resource.
     * @param options The options parameters.
     */
    listByWorkspace(resourceGroupName: string, workspaceName: string, options?: WorkspacePrivateEndpointConnectionsListByWorkspaceOptionalParams): PagedAsyncIterableIterator<PrivateEndpointConnectionDescription>;
    /**
     * Gets the specified private endpoint connection associated with the workspace.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param workspaceName The name of workspace resource.
     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the
     *                                      Azure resource
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, privateEndpointConnectionName: string, options?: WorkspacePrivateEndpointConnectionsGetOptionalParams): Promise<WorkspacePrivateEndpointConnectionsGetResponse>;
    /**
     * Update the state of the specified private endpoint connection associated with the workspace.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param workspaceName The name of workspace resource.
     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the
     *                                      Azure resource
     * @param properties The private endpoint connection properties.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, workspaceName: string, privateEndpointConnectionName: string, properties: PrivateEndpointConnectionDescription, options?: WorkspacePrivateEndpointConnectionsCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<WorkspacePrivateEndpointConnectionsCreateOrUpdateResponse>, WorkspacePrivateEndpointConnectionsCreateOrUpdateResponse>>;
    /**
     * Update the state of the specified private endpoint connection associated with the workspace.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param workspaceName The name of workspace resource.
     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the
     *                                      Azure resource
     * @param properties The private endpoint connection properties.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, workspaceName: string, privateEndpointConnectionName: string, properties: PrivateEndpointConnectionDescription, options?: WorkspacePrivateEndpointConnectionsCreateOrUpdateOptionalParams): Promise<WorkspacePrivateEndpointConnectionsCreateOrUpdateResponse>;
    /**
     * Deletes a private endpoint connection.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param workspaceName The name of workspace resource.
     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the
     *                                      Azure resource
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, workspaceName: string, privateEndpointConnectionName: string, options?: WorkspacePrivateEndpointConnectionsDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes a private endpoint connection.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param workspaceName The name of workspace resource.
     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the
     *                                      Azure resource
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, workspaceName: string, privateEndpointConnectionName: string, options?: WorkspacePrivateEndpointConnectionsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface WorkspacePrivateEndpointConnectionsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type WorkspacePrivateEndpointConnectionsCreateOrUpdateResponse = PrivateEndpointConnectionDescription;

/** Optional parameters. */
export declare interface WorkspacePrivateEndpointConnectionsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface WorkspacePrivateEndpointConnectionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type WorkspacePrivateEndpointConnectionsGetResponse = PrivateEndpointConnectionDescription;

/** Optional parameters. */
export declare interface WorkspacePrivateEndpointConnectionsListByWorkspaceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByWorkspace operation. */
export declare type WorkspacePrivateEndpointConnectionsListByWorkspaceResponse = PrivateEndpointConnectionListResultDescription;

/** Interface representing a WorkspacePrivateLinkResources. */
export declare interface WorkspacePrivateLinkResources {
    /**
     * Gets the private link resources that need to be created for a workspace.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param workspaceName The name of workspace resource.
     * @param options The options parameters.
     */
    listByWorkspace(resourceGroupName: string, workspaceName: string, options?: WorkspacePrivateLinkResourcesListByWorkspaceOptionalParams): PagedAsyncIterableIterator<PrivateLinkResourceDescription>;
    /**
     * Gets a private link resource that need to be created for a workspace.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param workspaceName The name of workspace resource.
     * @param groupName The name of the private link resource group.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, groupName: string, options?: WorkspacePrivateLinkResourcesGetOptionalParams): Promise<WorkspacePrivateLinkResourcesGetResponse>;
}

/** Optional parameters. */
export declare interface WorkspacePrivateLinkResourcesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type WorkspacePrivateLinkResourcesGetResponse = PrivateLinkResourceDescription;

/** Optional parameters. */
export declare interface WorkspacePrivateLinkResourcesListByWorkspaceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByWorkspace operation. */
export declare type WorkspacePrivateLinkResourcesListByWorkspaceResponse = PrivateLinkResourceListResultDescription;

/** Workspaces resource specific properties. */
export declare interface WorkspaceProperties {
    /**
     * The provisioning state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /**
     * The list of private endpoint connections that are set up for this resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly privateEndpointConnections?: PrivateEndpointConnection[];
    /** Control permission for data plane traffic coming from public networks while private endpoint is enabled. */
    publicNetworkAccess?: PublicNetworkAccess;
}

/** Interface representing a Workspaces. */
export declare interface Workspaces {
    /**
     * Lists all the available workspaces under the specified subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: WorkspacesListBySubscriptionOptionalParams): PagedAsyncIterableIterator<Workspace>;
    /**
     * Lists all the available workspaces under the specified resource group.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: WorkspacesListByResourceGroupOptionalParams): PagedAsyncIterableIterator<Workspace>;
    /**
     * Gets the properties of the specified workspace.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param workspaceName The name of workspace resource.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, options?: WorkspacesGetOptionalParams): Promise<WorkspacesGetResponse>;
    /**
     * Creates or updates a workspace resource with the specified parameters.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param workspaceName The name of workspace resource.
     * @param workspace The parameters for creating or updating a healthcare workspace.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, workspaceName: string, workspace: Workspace, options?: WorkspacesCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<WorkspacesCreateOrUpdateResponse>, WorkspacesCreateOrUpdateResponse>>;
    /**
     * Creates or updates a workspace resource with the specified parameters.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param workspaceName The name of workspace resource.
     * @param workspace The parameters for creating or updating a healthcare workspace.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, workspaceName: string, workspace: Workspace, options?: WorkspacesCreateOrUpdateOptionalParams): Promise<WorkspacesCreateOrUpdateResponse>;
    /**
     * Patch workspace details.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param workspaceName The name of workspace resource.
     * @param workspacePatchResource The parameters for updating a specified workspace.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, workspaceName: string, workspacePatchResource: WorkspacePatchResource, options?: WorkspacesUpdateOptionalParams): Promise<SimplePollerLike<OperationState<WorkspacesUpdateResponse>, WorkspacesUpdateResponse>>;
    /**
     * Patch workspace details.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param workspaceName The name of workspace resource.
     * @param workspacePatchResource The parameters for updating a specified workspace.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, workspaceName: string, workspacePatchResource: WorkspacePatchResource, options?: WorkspacesUpdateOptionalParams): Promise<WorkspacesUpdateResponse>;
    /**
     * Deletes a specified workspace.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param workspaceName The name of workspace resource.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, workspaceName: string, options?: WorkspacesDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes a specified workspace.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param workspaceName The name of workspace resource.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, workspaceName: string, options?: WorkspacesDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface WorkspacesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type WorkspacesCreateOrUpdateResponse = Workspace;

/** Optional parameters. */
export declare interface WorkspacesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface WorkspacesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type WorkspacesGetResponse = Workspace;

/** Optional parameters. */
export declare interface WorkspacesListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type WorkspacesListByResourceGroupNextResponse = WorkspaceList;

/** Optional parameters. */
export declare interface WorkspacesListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type WorkspacesListByResourceGroupResponse = WorkspaceList;

/** Optional parameters. */
export declare interface WorkspacesListBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionNext operation. */
export declare type WorkspacesListBySubscriptionNextResponse = WorkspaceList;

/** Optional parameters. */
export declare interface WorkspacesListBySubscriptionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscription operation. */
export declare type WorkspacesListBySubscriptionResponse = WorkspaceList;

/** Optional parameters. */
export declare interface WorkspacesUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type WorkspacesUpdateResponse = Workspace;

export { }
