/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { ServicesDescription as ServicesDescriptionMapper, ServicesPatchDescription as ServicesPatchDescriptionMapper, CheckNameAvailabilityParameters as CheckNameAvailabilityParametersMapper, PrivateEndpointConnection as PrivateEndpointConnectionMapper, Workspace as WorkspaceMapper, WorkspacePatchResource as WorkspacePatchResourceMapper, DicomService as DicomServiceMapper, DicomServicePatchResource as DicomServicePatchResourceMapper, IotConnector as IotConnectorMapper, IotConnectorPatchResource as IotConnectorPatchResourceMapper, IotFhirDestination as IotFhirDestinationMapper, FhirService as FhirServiceMapper, FhirServicePatchResource as FhirServicePatchResourceMapper, PrivateEndpointConnectionDescription as PrivateEndpointConnectionDescriptionMapper } from "../models/mappers";
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2023-11-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[-\\w\\._\\(\\)]+$"),
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const resourceName = {
    parameterPath: "resourceName",
    mapper: {
        constraints: {
            MaxLength: 24,
            MinLength: 3
        },
        serializedName: "resourceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export const serviceDescription = {
    parameterPath: "serviceDescription",
    mapper: ServicesDescriptionMapper
};
export const servicePatchDescription = {
    parameterPath: "servicePatchDescription",
    mapper: ServicesPatchDescriptionMapper
};
export const checkNameAvailabilityInputs = {
    parameterPath: "checkNameAvailabilityInputs",
    mapper: CheckNameAvailabilityParametersMapper
};
export const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const privateEndpointConnectionName = {
    parameterPath: "privateEndpointConnectionName",
    mapper: {
        serializedName: "privateEndpointConnectionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const properties = {
    parameterPath: "properties",
    mapper: PrivateEndpointConnectionMapper
};
export const groupName = {
    parameterPath: "groupName",
    mapper: {
        serializedName: "groupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const workspaceName = {
    parameterPath: "workspaceName",
    mapper: {
        constraints: {
            MaxLength: 24,
            MinLength: 3
        },
        serializedName: "workspaceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const workspace = {
    parameterPath: "workspace",
    mapper: WorkspaceMapper
};
export const workspacePatchResource = {
    parameterPath: "workspacePatchResource",
    mapper: WorkspacePatchResourceMapper
};
export const dicomServiceName = {
    parameterPath: "dicomServiceName",
    mapper: {
        constraints: {
            MaxLength: 24,
            MinLength: 3
        },
        serializedName: "dicomServiceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const dicomservice = {
    parameterPath: "dicomservice",
    mapper: DicomServiceMapper
};
export const dicomservicePatchResource = {
    parameterPath: "dicomservicePatchResource",
    mapper: DicomServicePatchResourceMapper
};
export const iotConnectorName = {
    parameterPath: "iotConnectorName",
    mapper: {
        constraints: {
            MaxLength: 24,
            MinLength: 3
        },
        serializedName: "iotConnectorName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const iotConnector = {
    parameterPath: "iotConnector",
    mapper: IotConnectorMapper
};
export const iotConnectorPatchResource = {
    parameterPath: "iotConnectorPatchResource",
    mapper: IotConnectorPatchResourceMapper
};
export const fhirDestinationName = {
    parameterPath: "fhirDestinationName",
    mapper: {
        constraints: {
            MaxLength: 24,
            MinLength: 3
        },
        serializedName: "fhirDestinationName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const iotFhirDestination = {
    parameterPath: "iotFhirDestination",
    mapper: IotFhirDestinationMapper
};
export const fhirServiceName = {
    parameterPath: "fhirServiceName",
    mapper: {
        constraints: {
            MaxLength: 24,
            MinLength: 3
        },
        serializedName: "fhirServiceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const fhirservice = {
    parameterPath: "fhirservice",
    mapper: FhirServiceMapper
};
export const fhirservicePatchResource = {
    parameterPath: "fhirservicePatchResource",
    mapper: FhirServicePatchResourceMapper
};
export const properties1 = {
    parameterPath: "properties",
    mapper: PrivateEndpointConnectionDescriptionMapper
};
export const locationName = {
    parameterPath: "locationName",
    mapper: {
        serializedName: "locationName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const operationResultId = {
    parameterPath: "operationResultId",
    mapper: {
        serializedName: "operationResultId",
        required: true,
        type: {
            name: "String"
        }
    }
};
//# sourceMappingURL=parameters.js.map