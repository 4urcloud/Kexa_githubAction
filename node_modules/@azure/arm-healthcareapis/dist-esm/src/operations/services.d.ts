import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Services } from "../operationsInterfaces";
import { HealthcareApisManagementClient } from "../healthcareApisManagementClient";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import { ServicesDescription, ServicesListOptionalParams, ServicesListByResourceGroupOptionalParams, ServicesGetOptionalParams, ServicesGetResponse, ServicesCreateOrUpdateOptionalParams, ServicesCreateOrUpdateResponse, ServicesPatchDescription, ServicesUpdateOptionalParams, ServicesUpdateResponse, ServicesDeleteOptionalParams, CheckNameAvailabilityParameters, ServicesCheckNameAvailabilityOptionalParams, ServicesCheckNameAvailabilityResponse } from "../models";
/** Class containing Services operations. */
export declare class ServicesImpl implements Services {
    private readonly client;
    /**
     * Initialize a new instance of the class Services class.
     * @param client Reference to the service client
     */
    constructor(client: HealthcareApisManagementClient);
    /**
     * Get all the service instances in a subscription.
     * @param options The options parameters.
     */
    list(options?: ServicesListOptionalParams): PagedAsyncIterableIterator<ServicesDescription>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Get all the service instances in a resource group.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: ServicesListByResourceGroupOptionalParams): PagedAsyncIterableIterator<ServicesDescription>;
    private listByResourceGroupPagingPage;
    private listByResourceGroupPagingAll;
    /**
     * Get the metadata of a service instance.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param resourceName The name of the service instance.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, resourceName: string, options?: ServicesGetOptionalParams): Promise<ServicesGetResponse>;
    /**
     * Create or update the metadata of a service instance.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param resourceName The name of the service instance.
     * @param serviceDescription The service instance metadata.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, resourceName: string, serviceDescription: ServicesDescription, options?: ServicesCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<ServicesCreateOrUpdateResponse>, ServicesCreateOrUpdateResponse>>;
    /**
     * Create or update the metadata of a service instance.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param resourceName The name of the service instance.
     * @param serviceDescription The service instance metadata.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, resourceName: string, serviceDescription: ServicesDescription, options?: ServicesCreateOrUpdateOptionalParams): Promise<ServicesCreateOrUpdateResponse>;
    /**
     * Update the metadata of a service instance.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param resourceName The name of the service instance.
     * @param servicePatchDescription The service instance metadata and security metadata.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, resourceName: string, servicePatchDescription: ServicesPatchDescription, options?: ServicesUpdateOptionalParams): Promise<SimplePollerLike<OperationState<ServicesUpdateResponse>, ServicesUpdateResponse>>;
    /**
     * Update the metadata of a service instance.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param resourceName The name of the service instance.
     * @param servicePatchDescription The service instance metadata and security metadata.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, resourceName: string, servicePatchDescription: ServicesPatchDescription, options?: ServicesUpdateOptionalParams): Promise<ServicesUpdateResponse>;
    /**
     * Delete a service instance.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param resourceName The name of the service instance.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, resourceName: string, options?: ServicesDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Delete a service instance.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param resourceName The name of the service instance.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, resourceName: string, options?: ServicesDeleteOptionalParams): Promise<void>;
    /**
     * Get all the service instances in a subscription.
     * @param options The options parameters.
     */
    private _list;
    /**
     * Get all the service instances in a resource group.
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param options The options parameters.
     */
    private _listByResourceGroup;
    /**
     * Check if a service instance name is available.
     * @param checkNameAvailabilityInputs Set the name parameter in the CheckNameAvailabilityParameters
     *                                    structure to the name of the service instance to check.
     * @param options The options parameters.
     */
    checkNameAvailability(checkNameAvailabilityInputs: CheckNameAvailabilityParameters, options?: ServicesCheckNameAvailabilityOptionalParams): Promise<ServicesCheckNameAvailabilityResponse>;
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    private _listByResourceGroupNext;
}
//# sourceMappingURL=services.d.ts.map