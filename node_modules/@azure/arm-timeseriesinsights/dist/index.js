'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var coreClient = require('@azure/core-client');
var tslib = require('tslib');
var coreLro = require('@azure/core-lro');

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
(function (KnownEnvironmentKind) {
    KnownEnvironmentKind["Gen1"] = "Gen1";
    KnownEnvironmentKind["Gen2"] = "Gen2";
})(exports.KnownEnvironmentKind || (exports.KnownEnvironmentKind = {}));
(function (KnownSkuName) {
    KnownSkuName["S1"] = "S1";
    KnownSkuName["S2"] = "S2";
    KnownSkuName["P1"] = "P1";
    KnownSkuName["L1"] = "L1";
})(exports.KnownSkuName || (exports.KnownSkuName = {}));
(function (KnownEnvironmentResourceKind) {
    KnownEnvironmentResourceKind["Gen1"] = "Gen1";
    KnownEnvironmentResourceKind["Gen2"] = "Gen2";
})(exports.KnownEnvironmentResourceKind || (exports.KnownEnvironmentResourceKind = {}));
(function (KnownEventSourceKind) {
    KnownEventSourceKind["MicrosoftEventHub"] = "Microsoft.EventHub";
    KnownEventSourceKind["MicrosoftIoTHub"] = "Microsoft.IoTHub";
})(exports.KnownEventSourceKind || (exports.KnownEventSourceKind = {}));
(function (KnownLocalTimestampFormat) {
    KnownLocalTimestampFormat["Embedded"] = "Embedded";
})(exports.KnownLocalTimestampFormat || (exports.KnownLocalTimestampFormat = {}));
(function (KnownEventSourceResourceKind) {
    KnownEventSourceResourceKind["MicrosoftEventHub"] = "Microsoft.EventHub";
    KnownEventSourceResourceKind["MicrosoftIoTHub"] = "Microsoft.IoTHub";
})(exports.KnownEventSourceResourceKind || (exports.KnownEventSourceResourceKind = {}));
(function (KnownReferenceDataKeyPropertyType) {
    KnownReferenceDataKeyPropertyType["String"] = "String";
    KnownReferenceDataKeyPropertyType["Double"] = "Double";
    KnownReferenceDataKeyPropertyType["Bool"] = "Bool";
    KnownReferenceDataKeyPropertyType["DateTime"] = "DateTime";
})(exports.KnownReferenceDataKeyPropertyType || (exports.KnownReferenceDataKeyPropertyType = {}));
(function (KnownDataStringComparisonBehavior) {
    KnownDataStringComparisonBehavior["Ordinal"] = "Ordinal";
    KnownDataStringComparisonBehavior["OrdinalIgnoreCase"] = "OrdinalIgnoreCase";
})(exports.KnownDataStringComparisonBehavior || (exports.KnownDataStringComparisonBehavior = {}));
(function (KnownProvisioningState) {
    KnownProvisioningState["Accepted"] = "Accepted";
    KnownProvisioningState["Creating"] = "Creating";
    KnownProvisioningState["Updating"] = "Updating";
    KnownProvisioningState["Succeeded"] = "Succeeded";
    KnownProvisioningState["Failed"] = "Failed";
    KnownProvisioningState["Deleting"] = "Deleting";
})(exports.KnownProvisioningState || (exports.KnownProvisioningState = {}));
(function (KnownAccessPolicyRole) {
    KnownAccessPolicyRole["Reader"] = "Reader";
    KnownAccessPolicyRole["Contributor"] = "Contributor";
})(exports.KnownAccessPolicyRole || (exports.KnownAccessPolicyRole = {}));
(function (KnownStorageLimitExceededBehavior) {
    KnownStorageLimitExceededBehavior["PurgeOldData"] = "PurgeOldData";
    KnownStorageLimitExceededBehavior["PauseIngress"] = "PauseIngress";
})(exports.KnownStorageLimitExceededBehavior || (exports.KnownStorageLimitExceededBehavior = {}));
(function (KnownPropertyType) {
    KnownPropertyType["String"] = "String";
})(exports.KnownPropertyType || (exports.KnownPropertyType = {}));
(function (KnownIngressState) {
    KnownIngressState["Disabled"] = "Disabled";
    KnownIngressState["Ready"] = "Ready";
    KnownIngressState["Running"] = "Running";
    KnownIngressState["Paused"] = "Paused";
    KnownIngressState["Unknown"] = "Unknown";
})(exports.KnownIngressState || (exports.KnownIngressState = {}));
(function (KnownWarmStoragePropertiesState) {
    KnownWarmStoragePropertiesState["Ok"] = "Ok";
    KnownWarmStoragePropertiesState["Error"] = "Error";
    KnownWarmStoragePropertiesState["Unknown"] = "Unknown";
})(exports.KnownWarmStoragePropertiesState || (exports.KnownWarmStoragePropertiesState = {}));
(function (KnownIngressStartAtType) {
    KnownIngressStartAtType["EarliestAvailable"] = "EarliestAvailable";
    KnownIngressStartAtType["EventSourceCreationTime"] = "EventSourceCreationTime";
    KnownIngressStartAtType["CustomEnqueuedTime"] = "CustomEnqueuedTime";
})(exports.KnownIngressStartAtType || (exports.KnownIngressStartAtType = {}));

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const OperationListResult = {
    type: {
        name: "Composite",
        className: "OperationListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Operation"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Operation = {
    type: {
        name: "Composite",
        className: "Operation",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            display: {
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "OperationDisplay"
                }
            },
            origin: {
                serializedName: "origin",
                type: {
                    name: "String"
                }
            },
            serviceSpecification: {
                serializedName: "properties.serviceSpecification",
                type: {
                    name: "Composite",
                    className: "ServiceSpecification"
                }
            }
        }
    }
};
const OperationDisplay = {
    type: {
        name: "Composite",
        className: "OperationDisplay",
        modelProperties: {
            provider: {
                serializedName: "provider",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "resource",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ServiceSpecification = {
    type: {
        name: "Composite",
        className: "ServiceSpecification",
        modelProperties: {
            metricSpecifications: {
                serializedName: "metricSpecifications",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MetricSpecification"
                        }
                    }
                }
            },
            logSpecifications: {
                serializedName: "logSpecifications",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LogSpecification"
                        }
                    }
                }
            }
        }
    }
};
const MetricSpecification = {
    type: {
        name: "Composite",
        className: "MetricSpecification",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            },
            displayDescription: {
                serializedName: "displayDescription",
                type: {
                    name: "String"
                }
            },
            unit: {
                serializedName: "unit",
                type: {
                    name: "String"
                }
            },
            dimensions: {
                serializedName: "dimensions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Dimension"
                        }
                    }
                }
            },
            aggregationType: {
                serializedName: "aggregationType",
                type: {
                    name: "String"
                }
            },
            availabilities: {
                serializedName: "availabilities",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MetricAvailability"
                        }
                    }
                }
            },
            category: {
                serializedName: "category",
                type: {
                    name: "String"
                }
            },
            resourceIdDimensionNameOverride: {
                serializedName: "resourceIdDimensionNameOverride",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Dimension = {
    type: {
        name: "Composite",
        className: "Dimension",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MetricAvailability = {
    type: {
        name: "Composite",
        className: "MetricAvailability",
        modelProperties: {
            timeGrain: {
                serializedName: "timeGrain",
                type: {
                    name: "String"
                }
            },
            blobDuration: {
                serializedName: "blobDuration",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const LogSpecification = {
    type: {
        name: "Composite",
        className: "LogSpecification",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CloudError = {
    type: {
        name: "Composite",
        className: "CloudError",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "CloudErrorBody"
                }
            }
        }
    }
};
const CloudErrorBody = {
    type: {
        name: "Composite",
        className: "CloudErrorBody",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CloudErrorBody"
                        }
                    }
                }
            }
        }
    }
};
const Sku = {
    type: {
        name: "Composite",
        className: "Sku",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            capacity: {
                constraints: {
                    InclusiveMaximum: 10,
                    InclusiveMinimum: 1
                },
                serializedName: "capacity",
                required: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const CreateOrUpdateTrackedResourceProperties = {
    type: {
        name: "Composite",
        className: "CreateOrUpdateTrackedResourceProperties",
        modelProperties: {
            location: {
                serializedName: "location",
                required: true,
                type: {
                    name: "String"
                }
            },
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }
        }
    }
};
const Resource = {
    type: {
        name: "Composite",
        className: "Resource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const EnvironmentUpdateParameters = {
    type: {
        name: "Composite",
        className: "EnvironmentUpdateParameters",
        uberParent: "EnvironmentUpdateParameters",
        polymorphicDiscriminator: {
            serializedName: "kind",
            clientName: "kind"
        },
        modelProperties: {
            kind: {
                serializedName: "kind",
                required: true,
                type: {
                    name: "String"
                }
            },
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }
        }
    }
};
const EnvironmentListResponse = {
    type: {
        name: "Composite",
        className: "EnvironmentListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EnvironmentResource"
                        }
                    }
                }
            }
        }
    }
};
const LocalTimestamp = {
    type: {
        name: "Composite",
        className: "LocalTimestamp",
        modelProperties: {
            format: {
                serializedName: "format",
                type: {
                    name: "String"
                }
            },
            timeZoneOffset: {
                serializedName: "timeZoneOffset",
                type: {
                    name: "Composite",
                    className: "LocalTimestampTimeZoneOffset"
                }
            }
        }
    }
};
const LocalTimestampTimeZoneOffset = {
    type: {
        name: "Composite",
        className: "LocalTimestampTimeZoneOffset",
        modelProperties: {
            propertyName: {
                serializedName: "propertyName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const EventSourceUpdateParameters = {
    type: {
        name: "Composite",
        className: "EventSourceUpdateParameters",
        uberParent: "EventSourceUpdateParameters",
        polymorphicDiscriminator: {
            serializedName: "kind",
            clientName: "kind"
        },
        modelProperties: {
            kind: {
                serializedName: "kind",
                required: true,
                type: {
                    name: "String"
                }
            },
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }
        }
    }
};
const EventSourceListResponse = {
    type: {
        name: "Composite",
        className: "EventSourceListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EventSourceResource"
                        }
                    }
                }
            }
        }
    }
};
const ReferenceDataSetCreationProperties = {
    type: {
        name: "Composite",
        className: "ReferenceDataSetCreationProperties",
        modelProperties: {
            keyProperties: {
                serializedName: "keyProperties",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReferenceDataSetKeyProperty"
                        }
                    }
                }
            },
            dataStringComparisonBehavior: {
                serializedName: "dataStringComparisonBehavior",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ReferenceDataSetKeyProperty = {
    type: {
        name: "Composite",
        className: "ReferenceDataSetKeyProperty",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ResourceProperties = {
    type: {
        name: "Composite",
        className: "ResourceProperties",
        modelProperties: {
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            creationTime: {
                serializedName: "creationTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const ReferenceDataSetUpdateParameters = {
    type: {
        name: "Composite",
        className: "ReferenceDataSetUpdateParameters",
        modelProperties: {
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }
        }
    }
};
const ReferenceDataSetListResponse = {
    type: {
        name: "Composite",
        className: "ReferenceDataSetListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReferenceDataSetResource"
                        }
                    }
                }
            }
        }
    }
};
const AccessPolicyCreateOrUpdateParameters = {
    type: {
        name: "Composite",
        className: "AccessPolicyCreateOrUpdateParameters",
        modelProperties: {
            principalObjectId: {
                serializedName: "properties.principalObjectId",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "properties.description",
                type: {
                    name: "String"
                }
            },
            roles: {
                serializedName: "properties.roles",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const AccessPolicyUpdateParameters = {
    type: {
        name: "Composite",
        className: "AccessPolicyUpdateParameters",
        modelProperties: {
            description: {
                serializedName: "properties.description",
                type: {
                    name: "String"
                }
            },
            roles: {
                serializedName: "properties.roles",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const AccessPolicyListResponse = {
    type: {
        name: "Composite",
        className: "AccessPolicyListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AccessPolicyResource"
                        }
                    }
                }
            }
        }
    }
};
const WarmStoreConfigurationProperties = {
    type: {
        name: "Composite",
        className: "WarmStoreConfigurationProperties",
        modelProperties: {
            dataRetention: {
                serializedName: "dataRetention",
                required: true,
                type: {
                    name: "TimeSpan"
                }
            }
        }
    }
};
const Gen2StorageConfigurationInput = {
    type: {
        name: "Composite",
        className: "Gen2StorageConfigurationInput",
        modelProperties: {
            accountName: {
                serializedName: "accountName",
                required: true,
                type: {
                    name: "String"
                }
            },
            managementKey: {
                serializedName: "managementKey",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Gen2StorageConfigurationOutput = {
    type: {
        name: "Composite",
        className: "Gen2StorageConfigurationOutput",
        modelProperties: {
            accountName: {
                serializedName: "accountName",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Gen2StorageConfigurationMutableProperties = {
    type: {
        name: "Composite",
        className: "Gen2StorageConfigurationMutableProperties",
        modelProperties: {
            managementKey: {
                serializedName: "managementKey",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Gen1EnvironmentCreationProperties = {
    type: {
        name: "Composite",
        className: "Gen1EnvironmentCreationProperties",
        modelProperties: {
            dataRetentionTime: {
                serializedName: "dataRetentionTime",
                required: true,
                type: {
                    name: "TimeSpan"
                }
            },
            storageLimitExceededBehavior: {
                serializedName: "storageLimitExceededBehavior",
                type: {
                    name: "String"
                }
            },
            partitionKeyProperties: {
                serializedName: "partitionKeyProperties",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TimeSeriesIdProperty"
                        }
                    }
                }
            }
        }
    }
};
const TimeSeriesIdProperty = {
    type: {
        name: "Composite",
        className: "TimeSeriesIdProperty",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const EnvironmentStatus = {
    type: {
        name: "Composite",
        className: "EnvironmentStatus",
        modelProperties: {
            ingress: {
                serializedName: "ingress",
                type: {
                    name: "Composite",
                    className: "IngressEnvironmentStatus"
                }
            },
            warmStorage: {
                serializedName: "warmStorage",
                type: {
                    name: "Composite",
                    className: "WarmStorageEnvironmentStatus"
                }
            }
        }
    }
};
const IngressEnvironmentStatus = {
    type: {
        name: "Composite",
        className: "IngressEnvironmentStatus",
        modelProperties: {
            state: {
                serializedName: "state",
                type: {
                    name: "String"
                }
            },
            stateDetails: {
                serializedName: "stateDetails",
                type: {
                    name: "Composite",
                    className: "EnvironmentStateDetails"
                }
            }
        }
    }
};
const EnvironmentStateDetails = {
    type: {
        name: "Composite",
        className: "EnvironmentStateDetails",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const WarmStorageEnvironmentStatus = {
    type: {
        name: "Composite",
        className: "WarmStorageEnvironmentStatus",
        modelProperties: {
            state: {
                serializedName: "propertiesUsage.state",
                type: {
                    name: "String"
                }
            },
            currentCount: {
                constraints: {
                    InclusiveMaximum: 10,
                    InclusiveMinimum: 1
                },
                serializedName: "propertiesUsage.stateDetails.currentCount",
                type: {
                    name: "Number"
                }
            },
            maxCount: {
                constraints: {
                    InclusiveMaximum: 10,
                    InclusiveMinimum: 1
                },
                serializedName: "propertiesUsage.stateDetails.maxCount",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const EventSourceMutableProperties = {
    type: {
        name: "Composite",
        className: "EventSourceMutableProperties",
        modelProperties: {
            timestampPropertyName: {
                serializedName: "timestampPropertyName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const EnvironmentCreateOrUpdateParameters = {
    serializedName: "EnvironmentCreateOrUpdateParameters",
    type: {
        name: "Composite",
        className: "EnvironmentCreateOrUpdateParameters",
        uberParent: "CreateOrUpdateTrackedResourceProperties",
        polymorphicDiscriminator: {
            serializedName: "kind",
            clientName: "kind"
        },
        modelProperties: Object.assign(Object.assign({}, CreateOrUpdateTrackedResourceProperties.type.modelProperties), { kind: {
                serializedName: "kind",
                required: true,
                type: {
                    name: "String"
                }
            }, sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "Sku"
                }
            } })
    }
};
const EventSourceCreateOrUpdateParameters = {
    serializedName: "EventSourceCreateOrUpdateParameters",
    type: {
        name: "Composite",
        className: "EventSourceCreateOrUpdateParameters",
        uberParent: "CreateOrUpdateTrackedResourceProperties",
        polymorphicDiscriminator: {
            serializedName: "kind",
            clientName: "kind"
        },
        modelProperties: Object.assign(Object.assign({}, CreateOrUpdateTrackedResourceProperties.type.modelProperties), { kind: {
                serializedName: "kind",
                required: true,
                type: {
                    name: "String"
                }
            }, localTimestamp: {
                serializedName: "localTimestamp",
                type: {
                    name: "Composite",
                    className: "LocalTimestamp"
                }
            } })
    }
};
const ReferenceDataSetCreateOrUpdateParameters = {
    type: {
        name: "Composite",
        className: "ReferenceDataSetCreateOrUpdateParameters",
        modelProperties: Object.assign(Object.assign({}, CreateOrUpdateTrackedResourceProperties.type.modelProperties), { keyProperties: {
                serializedName: "properties.keyProperties",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReferenceDataSetKeyProperty"
                        }
                    }
                }
            }, dataStringComparisonBehavior: {
                serializedName: "properties.dataStringComparisonBehavior",
                type: {
                    name: "String"
                }
            } })
    }
};
const TrackedResource = {
    type: {
        name: "Composite",
        className: "TrackedResource",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { location: {
                serializedName: "location",
                required: true,
                type: {
                    name: "String"
                }
            }, tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            } })
    }
};
const AccessPolicyResource = {
    type: {
        name: "Composite",
        className: "AccessPolicyResource",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { principalObjectId: {
                serializedName: "properties.principalObjectId",
                type: {
                    name: "String"
                }
            }, description: {
                serializedName: "properties.description",
                type: {
                    name: "String"
                }
            }, roles: {
                serializedName: "properties.roles",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            } })
    }
};
const Gen1EnvironmentUpdateParameters = {
    serializedName: "Gen1",
    type: {
        name: "Composite",
        className: "Gen1EnvironmentUpdateParameters",
        uberParent: "EnvironmentUpdateParameters",
        polymorphicDiscriminator: EnvironmentUpdateParameters.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, EnvironmentUpdateParameters.type.modelProperties), { sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "Sku"
                }
            }, dataRetentionTime: {
                serializedName: "properties.dataRetentionTime",
                type: {
                    name: "TimeSpan"
                }
            }, storageLimitExceededBehavior: {
                serializedName: "properties.storageLimitExceededBehavior",
                type: {
                    name: "String"
                }
            } })
    }
};
const Gen2EnvironmentUpdateParameters = {
    serializedName: "Gen2",
    type: {
        name: "Composite",
        className: "Gen2EnvironmentUpdateParameters",
        uberParent: "EnvironmentUpdateParameters",
        polymorphicDiscriminator: EnvironmentUpdateParameters.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, EnvironmentUpdateParameters.type.modelProperties), { storageConfiguration: {
                serializedName: "properties.storageConfiguration",
                type: {
                    name: "Composite",
                    className: "Gen2StorageConfigurationMutableProperties"
                }
            }, warmStoreConfiguration: {
                serializedName: "properties.warmStoreConfiguration",
                type: {
                    name: "Composite",
                    className: "WarmStoreConfigurationProperties"
                }
            } })
    }
};
const EventHubEventSourceUpdateParameters = {
    serializedName: "Microsoft.EventHub",
    type: {
        name: "Composite",
        className: "EventHubEventSourceUpdateParameters",
        uberParent: "EventSourceUpdateParameters",
        polymorphicDiscriminator: EventSourceUpdateParameters.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, EventSourceUpdateParameters.type.modelProperties), { timestampPropertyName: {
                serializedName: "properties.timestampPropertyName",
                type: {
                    name: "String"
                }
            }, sharedAccessKey: {
                serializedName: "properties.sharedAccessKey",
                type: {
                    name: "String"
                }
            } })
    }
};
const IoTHubEventSourceUpdateParameters = {
    serializedName: "Microsoft.IoTHub",
    type: {
        name: "Composite",
        className: "IoTHubEventSourceUpdateParameters",
        uberParent: "EventSourceUpdateParameters",
        polymorphicDiscriminator: EventSourceUpdateParameters.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, EventSourceUpdateParameters.type.modelProperties), { timestampPropertyName: {
                serializedName: "properties.timestampPropertyName",
                type: {
                    name: "String"
                }
            }, sharedAccessKey: {
                serializedName: "properties.sharedAccessKey",
                type: {
                    name: "String"
                }
            } })
    }
};
const ReferenceDataSetResourceProperties = {
    type: {
        name: "Composite",
        className: "ReferenceDataSetResourceProperties",
        modelProperties: Object.assign(Object.assign({}, ReferenceDataSetCreationProperties.type.modelProperties), ResourceProperties.type.modelProperties)
    }
};
const EnvironmentResourceProperties = {
    type: {
        name: "Composite",
        className: "EnvironmentResourceProperties",
        modelProperties: Object.assign(Object.assign({}, ResourceProperties.type.modelProperties), { dataAccessId: {
                serializedName: "dataAccessId",
                readOnly: true,
                type: {
                    name: "Uuid"
                }
            }, dataAccessFqdn: {
                serializedName: "dataAccessFqdn",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, status: {
                serializedName: "status",
                type: {
                    name: "Composite",
                    className: "EnvironmentStatus"
                }
            } })
    }
};
const EventSourceCommonProperties = {
    type: {
        name: "Composite",
        className: "EventSourceCommonProperties",
        modelProperties: Object.assign(Object.assign({}, ResourceProperties.type.modelProperties), { timestampPropertyName: {
                serializedName: "timestampPropertyName",
                type: {
                    name: "String"
                }
            }, localTimestamp: {
                serializedName: "localTimestamp",
                type: {
                    name: "Composite",
                    className: "LocalTimestamp"
                }
            }, type: {
                serializedName: "ingressStartAt.type",
                type: {
                    name: "String"
                }
            }, time: {
                serializedName: "ingressStartAt.time",
                type: {
                    name: "String"
                }
            } })
    }
};
const Gen1EnvironmentResourceProperties = {
    type: {
        name: "Composite",
        className: "Gen1EnvironmentResourceProperties",
        modelProperties: Object.assign(Object.assign({}, Gen1EnvironmentCreationProperties.type.modelProperties), EnvironmentResourceProperties.type.modelProperties)
    }
};
const EventHubEventSourceMutableProperties = {
    type: {
        name: "Composite",
        className: "EventHubEventSourceMutableProperties",
        modelProperties: Object.assign(Object.assign({}, EventSourceMutableProperties.type.modelProperties), { sharedAccessKey: {
                serializedName: "sharedAccessKey",
                type: {
                    name: "String"
                }
            } })
    }
};
const IoTHubEventSourceMutableProperties = {
    type: {
        name: "Composite",
        className: "IoTHubEventSourceMutableProperties",
        modelProperties: Object.assign(Object.assign({}, EventSourceMutableProperties.type.modelProperties), { sharedAccessKey: {
                serializedName: "sharedAccessKey",
                type: {
                    name: "String"
                }
            } })
    }
};
const Gen1EnvironmentCreateOrUpdateParameters = {
    serializedName: "Gen1",
    type: {
        name: "Composite",
        className: "Gen1EnvironmentCreateOrUpdateParameters",
        uberParent: "CreateOrUpdateTrackedResourceProperties",
        polymorphicDiscriminator: CreateOrUpdateTrackedResourceProperties.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, EnvironmentCreateOrUpdateParameters.type.modelProperties), { dataRetentionTime: {
                serializedName: "properties.dataRetentionTime",
                required: true,
                type: {
                    name: "TimeSpan"
                }
            }, storageLimitExceededBehavior: {
                serializedName: "properties.storageLimitExceededBehavior",
                type: {
                    name: "String"
                }
            }, partitionKeyProperties: {
                serializedName: "properties.partitionKeyProperties",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TimeSeriesIdProperty"
                        }
                    }
                }
            } })
    }
};
const Gen2EnvironmentCreateOrUpdateParameters = {
    serializedName: "Gen2",
    type: {
        name: "Composite",
        className: "Gen2EnvironmentCreateOrUpdateParameters",
        uberParent: "CreateOrUpdateTrackedResourceProperties",
        polymorphicDiscriminator: CreateOrUpdateTrackedResourceProperties.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, EnvironmentCreateOrUpdateParameters.type.modelProperties), { timeSeriesIdProperties: {
                serializedName: "properties.timeSeriesIdProperties",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TimeSeriesIdProperty"
                        }
                    }
                }
            }, storageConfiguration: {
                serializedName: "properties.storageConfiguration",
                type: {
                    name: "Composite",
                    className: "Gen2StorageConfigurationInput"
                }
            }, warmStoreConfiguration: {
                serializedName: "properties.warmStoreConfiguration",
                type: {
                    name: "Composite",
                    className: "WarmStoreConfigurationProperties"
                }
            } })
    }
};
const EventHubEventSourceCreateOrUpdateParameters = {
    serializedName: "Microsoft.EventHub",
    type: {
        name: "Composite",
        className: "EventHubEventSourceCreateOrUpdateParameters",
        uberParent: "CreateOrUpdateTrackedResourceProperties",
        polymorphicDiscriminator: CreateOrUpdateTrackedResourceProperties.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, EventSourceCreateOrUpdateParameters.type.modelProperties), { provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, creationTime: {
                serializedName: "properties.creationTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, timestampPropertyName: {
                serializedName: "properties.timestampPropertyName",
                type: {
                    name: "String"
                }
            }, localTimestampPropertiesLocalTimestamp: {
                serializedName: "properties.localTimestamp",
                type: {
                    name: "Composite",
                    className: "LocalTimestamp"
                }
            }, type: {
                serializedName: "properties.ingressStartAt.type",
                type: {
                    name: "String"
                }
            }, time: {
                serializedName: "properties.ingressStartAt.time",
                type: {
                    name: "String"
                }
            }, eventSourceResourceId: {
                serializedName: "properties.eventSourceResourceId",
                required: true,
                type: {
                    name: "String"
                }
            }, serviceBusNamespace: {
                serializedName: "properties.serviceBusNamespace",
                required: true,
                type: {
                    name: "String"
                }
            }, eventHubName: {
                serializedName: "properties.eventHubName",
                required: true,
                type: {
                    name: "String"
                }
            }, consumerGroupName: {
                serializedName: "properties.consumerGroupName",
                required: true,
                type: {
                    name: "String"
                }
            }, keyName: {
                serializedName: "properties.keyName",
                required: true,
                type: {
                    name: "String"
                }
            }, sharedAccessKey: {
                serializedName: "properties.sharedAccessKey",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const IoTHubEventSourceCreateOrUpdateParameters = {
    serializedName: "Microsoft.IoTHub",
    type: {
        name: "Composite",
        className: "IoTHubEventSourceCreateOrUpdateParameters",
        uberParent: "CreateOrUpdateTrackedResourceProperties",
        polymorphicDiscriminator: CreateOrUpdateTrackedResourceProperties.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, EventSourceCreateOrUpdateParameters.type.modelProperties), { provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, creationTime: {
                serializedName: "properties.creationTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, timestampPropertyName: {
                serializedName: "properties.timestampPropertyName",
                type: {
                    name: "String"
                }
            }, localTimestampPropertiesLocalTimestamp: {
                serializedName: "properties.localTimestamp",
                type: {
                    name: "Composite",
                    className: "LocalTimestamp"
                }
            }, type: {
                serializedName: "properties.ingressStartAt.type",
                type: {
                    name: "String"
                }
            }, time: {
                serializedName: "properties.ingressStartAt.time",
                type: {
                    name: "String"
                }
            }, eventSourceResourceId: {
                serializedName: "properties.eventSourceResourceId",
                required: true,
                type: {
                    name: "String"
                }
            }, iotHubName: {
                serializedName: "properties.iotHubName",
                required: true,
                type: {
                    name: "String"
                }
            }, consumerGroupName: {
                serializedName: "properties.consumerGroupName",
                required: true,
                type: {
                    name: "String"
                }
            }, keyName: {
                serializedName: "properties.keyName",
                required: true,
                type: {
                    name: "String"
                }
            }, sharedAccessKey: {
                serializedName: "properties.sharedAccessKey",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const EnvironmentResource = {
    serializedName: "EnvironmentResource",
    type: {
        name: "Composite",
        className: "EnvironmentResource",
        uberParent: "Resource",
        polymorphicDiscriminator: {
            serializedName: "kind",
            clientName: "kind"
        },
        modelProperties: Object.assign(Object.assign({}, TrackedResource.type.modelProperties), { sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "Sku"
                }
            }, kind: {
                serializedName: "kind",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const EventSourceResource = {
    serializedName: "EventSourceResource",
    type: {
        name: "Composite",
        className: "EventSourceResource",
        uberParent: "Resource",
        polymorphicDiscriminator: {
            serializedName: "kind",
            clientName: "kind"
        },
        modelProperties: Object.assign(Object.assign({}, TrackedResource.type.modelProperties), { kind: {
                serializedName: "kind",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const ReferenceDataSetResource = {
    type: {
        name: "Composite",
        className: "ReferenceDataSetResource",
        modelProperties: Object.assign(Object.assign({}, TrackedResource.type.modelProperties), { keyProperties: {
                serializedName: "properties.keyProperties",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReferenceDataSetKeyProperty"
                        }
                    }
                }
            }, dataStringComparisonBehavior: {
                serializedName: "properties.dataStringComparisonBehavior",
                type: {
                    name: "String"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, creationTime: {
                serializedName: "properties.creationTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            } })
    }
};
const Gen2EnvironmentResourceProperties = {
    type: {
        name: "Composite",
        className: "Gen2EnvironmentResourceProperties",
        modelProperties: Object.assign(Object.assign({}, EnvironmentResourceProperties.type.modelProperties), { timeSeriesIdProperties: {
                serializedName: "timeSeriesIdProperties",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TimeSeriesIdProperty"
                        }
                    }
                }
            }, storageConfiguration: {
                serializedName: "storageConfiguration",
                type: {
                    name: "Composite",
                    className: "Gen2StorageConfigurationOutput"
                }
            }, warmStoreConfiguration: {
                serializedName: "warmStoreConfiguration",
                type: {
                    name: "Composite",
                    className: "WarmStoreConfigurationProperties"
                }
            } })
    }
};
const AzureEventSourceProperties = {
    type: {
        name: "Composite",
        className: "AzureEventSourceProperties",
        modelProperties: Object.assign(Object.assign({}, EventSourceCommonProperties.type.modelProperties), { eventSourceResourceId: {
                serializedName: "eventSourceResourceId",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const Gen1EnvironmentResource = {
    serializedName: "Gen1",
    type: {
        name: "Composite",
        className: "Gen1EnvironmentResource",
        uberParent: "Resource",
        polymorphicDiscriminator: Resource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, EnvironmentResource.type.modelProperties), { dataRetentionTime: {
                serializedName: "properties.dataRetentionTime",
                required: true,
                type: {
                    name: "TimeSpan"
                }
            }, storageLimitExceededBehavior: {
                serializedName: "properties.storageLimitExceededBehavior",
                type: {
                    name: "String"
                }
            }, partitionKeyProperties: {
                serializedName: "properties.partitionKeyProperties",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TimeSeriesIdProperty"
                        }
                    }
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, creationTime: {
                serializedName: "properties.creationTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, dataAccessId: {
                serializedName: "properties.dataAccessId",
                readOnly: true,
                type: {
                    name: "Uuid"
                }
            }, dataAccessFqdn: {
                serializedName: "properties.dataAccessFqdn",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, status: {
                serializedName: "properties.status",
                type: {
                    name: "Composite",
                    className: "EnvironmentStatus"
                }
            } })
    }
};
const Gen2EnvironmentResource = {
    serializedName: "Gen2",
    type: {
        name: "Composite",
        className: "Gen2EnvironmentResource",
        uberParent: "Resource",
        polymorphicDiscriminator: Resource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, EnvironmentResource.type.modelProperties), { provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, creationTime: {
                serializedName: "properties.creationTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, dataAccessId: {
                serializedName: "properties.dataAccessId",
                readOnly: true,
                type: {
                    name: "Uuid"
                }
            }, dataAccessFqdn: {
                serializedName: "properties.dataAccessFqdn",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, status: {
                serializedName: "properties.status",
                type: {
                    name: "Composite",
                    className: "EnvironmentStatus"
                }
            }, timeSeriesIdProperties: {
                serializedName: "properties.timeSeriesIdProperties",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TimeSeriesIdProperty"
                        }
                    }
                }
            }, storageConfiguration: {
                serializedName: "properties.storageConfiguration",
                type: {
                    name: "Composite",
                    className: "Gen2StorageConfigurationOutput"
                }
            }, warmStoreConfiguration: {
                serializedName: "properties.warmStoreConfiguration",
                type: {
                    name: "Composite",
                    className: "WarmStoreConfigurationProperties"
                }
            } })
    }
};
const EventHubEventSourceResource = {
    serializedName: "Microsoft.EventHub",
    type: {
        name: "Composite",
        className: "EventHubEventSourceResource",
        uberParent: "Resource",
        polymorphicDiscriminator: Resource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, EventSourceResource.type.modelProperties), { provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, creationTime: {
                serializedName: "properties.creationTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, timestampPropertyName: {
                serializedName: "properties.timestampPropertyName",
                type: {
                    name: "String"
                }
            }, localTimestamp: {
                serializedName: "properties.localTimestamp",
                type: {
                    name: "Composite",
                    className: "LocalTimestamp"
                }
            }, typePropertiesIngressStartAtType: {
                serializedName: "properties.ingressStartAt.type",
                type: {
                    name: "String"
                }
            }, time: {
                serializedName: "properties.ingressStartAt.time",
                type: {
                    name: "String"
                }
            }, eventSourceResourceId: {
                serializedName: "properties.eventSourceResourceId",
                required: true,
                type: {
                    name: "String"
                }
            }, serviceBusNamespace: {
                serializedName: "properties.serviceBusNamespace",
                required: true,
                type: {
                    name: "String"
                }
            }, eventHubName: {
                serializedName: "properties.eventHubName",
                required: true,
                type: {
                    name: "String"
                }
            }, consumerGroupName: {
                serializedName: "properties.consumerGroupName",
                required: true,
                type: {
                    name: "String"
                }
            }, keyName: {
                serializedName: "properties.keyName",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const IoTHubEventSourceResource = {
    serializedName: "Microsoft.IoTHub",
    type: {
        name: "Composite",
        className: "IoTHubEventSourceResource",
        uberParent: "Resource",
        polymorphicDiscriminator: Resource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, EventSourceResource.type.modelProperties), { provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, creationTime: {
                serializedName: "properties.creationTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, timestampPropertyName: {
                serializedName: "properties.timestampPropertyName",
                type: {
                    name: "String"
                }
            }, localTimestamp: {
                serializedName: "properties.localTimestamp",
                type: {
                    name: "Composite",
                    className: "LocalTimestamp"
                }
            }, typePropertiesIngressStartAtType: {
                serializedName: "properties.ingressStartAt.type",
                type: {
                    name: "String"
                }
            }, time: {
                serializedName: "properties.ingressStartAt.time",
                type: {
                    name: "String"
                }
            }, eventSourceResourceId: {
                serializedName: "properties.eventSourceResourceId",
                required: true,
                type: {
                    name: "String"
                }
            }, iotHubName: {
                serializedName: "properties.iotHubName",
                required: true,
                type: {
                    name: "String"
                }
            }, consumerGroupName: {
                serializedName: "properties.consumerGroupName",
                required: true,
                type: {
                    name: "String"
                }
            }, keyName: {
                serializedName: "properties.keyName",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const EventHubEventSourceCommonProperties = {
    type: {
        name: "Composite",
        className: "EventHubEventSourceCommonProperties",
        modelProperties: Object.assign(Object.assign({}, AzureEventSourceProperties.type.modelProperties), { serviceBusNamespace: {
                serializedName: "serviceBusNamespace",
                required: true,
                type: {
                    name: "String"
                }
            }, eventHubName: {
                serializedName: "eventHubName",
                required: true,
                type: {
                    name: "String"
                }
            }, consumerGroupName: {
                serializedName: "consumerGroupName",
                required: true,
                type: {
                    name: "String"
                }
            }, keyName: {
                serializedName: "keyName",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const IoTHubEventSourceCommonProperties = {
    type: {
        name: "Composite",
        className: "IoTHubEventSourceCommonProperties",
        modelProperties: Object.assign(Object.assign({}, AzureEventSourceProperties.type.modelProperties), { iotHubName: {
                serializedName: "iotHubName",
                required: true,
                type: {
                    name: "String"
                }
            }, consumerGroupName: {
                serializedName: "consumerGroupName",
                required: true,
                type: {
                    name: "String"
                }
            }, keyName: {
                serializedName: "keyName",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const EventHubEventSourceCreationProperties = {
    type: {
        name: "Composite",
        className: "EventHubEventSourceCreationProperties",
        modelProperties: Object.assign(Object.assign({}, EventHubEventSourceCommonProperties.type.modelProperties), { sharedAccessKey: {
                serializedName: "sharedAccessKey",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const EventHubEventSourceResourceProperties = {
    type: {
        name: "Composite",
        className: "EventHubEventSourceResourceProperties",
        modelProperties: Object.assign({}, EventHubEventSourceCommonProperties.type.modelProperties)
    }
};
const IoTHubEventSourceCreationProperties = {
    type: {
        name: "Composite",
        className: "IoTHubEventSourceCreationProperties",
        modelProperties: Object.assign(Object.assign({}, IoTHubEventSourceCommonProperties.type.modelProperties), { sharedAccessKey: {
                serializedName: "sharedAccessKey",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const IoTHubEventSourceResourceProperties = {
    type: {
        name: "Composite",
        className: "IoTHubEventSourceResourceProperties",
        modelProperties: Object.assign({}, IoTHubEventSourceCommonProperties.type.modelProperties)
    }
};
let discriminators = {
    EnvironmentUpdateParameters: EnvironmentUpdateParameters,
    EventSourceUpdateParameters: EventSourceUpdateParameters,
    "CreateOrUpdateTrackedResourceProperties.EnvironmentCreateOrUpdateParameters": EnvironmentCreateOrUpdateParameters,
    "CreateOrUpdateTrackedResourceProperties.EventSourceCreateOrUpdateParameters": EventSourceCreateOrUpdateParameters,
    "EnvironmentUpdateParameters.Gen1": Gen1EnvironmentUpdateParameters,
    "EnvironmentUpdateParameters.Gen2": Gen2EnvironmentUpdateParameters,
    "EventSourceUpdateParameters.Microsoft.EventHub": EventHubEventSourceUpdateParameters,
    "EventSourceUpdateParameters.Microsoft.IoTHub": IoTHubEventSourceUpdateParameters,
    "CreateOrUpdateTrackedResourceProperties.Gen1": Gen1EnvironmentCreateOrUpdateParameters,
    "CreateOrUpdateTrackedResourceProperties.Gen2": Gen2EnvironmentCreateOrUpdateParameters,
    "CreateOrUpdateTrackedResourceProperties.Microsoft.EventHub": EventHubEventSourceCreateOrUpdateParameters,
    "CreateOrUpdateTrackedResourceProperties.Microsoft.IoTHub": IoTHubEventSourceCreateOrUpdateParameters,
    "Resource.EnvironmentResource": EnvironmentResource,
    "Resource.EventSourceResource": EventSourceResource,
    "Resource.Gen1": Gen1EnvironmentResource,
    "Resource.Gen2": Gen2EnvironmentResource,
    "Resource.Microsoft.EventHub": EventHubEventSourceResource,
    "Resource.Microsoft.IoTHub": IoTHubEventSourceResource
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    OperationListResult: OperationListResult,
    Operation: Operation,
    OperationDisplay: OperationDisplay,
    ServiceSpecification: ServiceSpecification,
    MetricSpecification: MetricSpecification,
    Dimension: Dimension,
    MetricAvailability: MetricAvailability,
    LogSpecification: LogSpecification,
    CloudError: CloudError,
    CloudErrorBody: CloudErrorBody,
    Sku: Sku,
    CreateOrUpdateTrackedResourceProperties: CreateOrUpdateTrackedResourceProperties,
    Resource: Resource,
    EnvironmentUpdateParameters: EnvironmentUpdateParameters,
    EnvironmentListResponse: EnvironmentListResponse,
    LocalTimestamp: LocalTimestamp,
    LocalTimestampTimeZoneOffset: LocalTimestampTimeZoneOffset,
    EventSourceUpdateParameters: EventSourceUpdateParameters,
    EventSourceListResponse: EventSourceListResponse,
    ReferenceDataSetCreationProperties: ReferenceDataSetCreationProperties,
    ReferenceDataSetKeyProperty: ReferenceDataSetKeyProperty,
    ResourceProperties: ResourceProperties,
    ReferenceDataSetUpdateParameters: ReferenceDataSetUpdateParameters,
    ReferenceDataSetListResponse: ReferenceDataSetListResponse,
    AccessPolicyCreateOrUpdateParameters: AccessPolicyCreateOrUpdateParameters,
    AccessPolicyUpdateParameters: AccessPolicyUpdateParameters,
    AccessPolicyListResponse: AccessPolicyListResponse,
    WarmStoreConfigurationProperties: WarmStoreConfigurationProperties,
    Gen2StorageConfigurationInput: Gen2StorageConfigurationInput,
    Gen2StorageConfigurationOutput: Gen2StorageConfigurationOutput,
    Gen2StorageConfigurationMutableProperties: Gen2StorageConfigurationMutableProperties,
    Gen1EnvironmentCreationProperties: Gen1EnvironmentCreationProperties,
    TimeSeriesIdProperty: TimeSeriesIdProperty,
    EnvironmentStatus: EnvironmentStatus,
    IngressEnvironmentStatus: IngressEnvironmentStatus,
    EnvironmentStateDetails: EnvironmentStateDetails,
    WarmStorageEnvironmentStatus: WarmStorageEnvironmentStatus,
    EventSourceMutableProperties: EventSourceMutableProperties,
    EnvironmentCreateOrUpdateParameters: EnvironmentCreateOrUpdateParameters,
    EventSourceCreateOrUpdateParameters: EventSourceCreateOrUpdateParameters,
    ReferenceDataSetCreateOrUpdateParameters: ReferenceDataSetCreateOrUpdateParameters,
    TrackedResource: TrackedResource,
    AccessPolicyResource: AccessPolicyResource,
    Gen1EnvironmentUpdateParameters: Gen1EnvironmentUpdateParameters,
    Gen2EnvironmentUpdateParameters: Gen2EnvironmentUpdateParameters,
    EventHubEventSourceUpdateParameters: EventHubEventSourceUpdateParameters,
    IoTHubEventSourceUpdateParameters: IoTHubEventSourceUpdateParameters,
    ReferenceDataSetResourceProperties: ReferenceDataSetResourceProperties,
    EnvironmentResourceProperties: EnvironmentResourceProperties,
    EventSourceCommonProperties: EventSourceCommonProperties,
    Gen1EnvironmentResourceProperties: Gen1EnvironmentResourceProperties,
    EventHubEventSourceMutableProperties: EventHubEventSourceMutableProperties,
    IoTHubEventSourceMutableProperties: IoTHubEventSourceMutableProperties,
    Gen1EnvironmentCreateOrUpdateParameters: Gen1EnvironmentCreateOrUpdateParameters,
    Gen2EnvironmentCreateOrUpdateParameters: Gen2EnvironmentCreateOrUpdateParameters,
    EventHubEventSourceCreateOrUpdateParameters: EventHubEventSourceCreateOrUpdateParameters,
    IoTHubEventSourceCreateOrUpdateParameters: IoTHubEventSourceCreateOrUpdateParameters,
    EnvironmentResource: EnvironmentResource,
    EventSourceResource: EventSourceResource,
    ReferenceDataSetResource: ReferenceDataSetResource,
    Gen2EnvironmentResourceProperties: Gen2EnvironmentResourceProperties,
    AzureEventSourceProperties: AzureEventSourceProperties,
    Gen1EnvironmentResource: Gen1EnvironmentResource,
    Gen2EnvironmentResource: Gen2EnvironmentResource,
    EventHubEventSourceResource: EventHubEventSourceResource,
    IoTHubEventSourceResource: IoTHubEventSourceResource,
    EventHubEventSourceCommonProperties: EventHubEventSourceCommonProperties,
    IoTHubEventSourceCommonProperties: IoTHubEventSourceCommonProperties,
    EventHubEventSourceCreationProperties: EventHubEventSourceCreationProperties,
    EventHubEventSourceResourceProperties: EventHubEventSourceResourceProperties,
    IoTHubEventSourceCreationProperties: IoTHubEventSourceCreationProperties,
    IoTHubEventSourceResourceProperties: IoTHubEventSourceResourceProperties,
    discriminators: discriminators
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2020-05-15",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const parameters = {
    parameterPath: "parameters",
    mapper: EnvironmentCreateOrUpdateParameters
};
const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const environmentName = {
    parameterPath: "environmentName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[-\\w\\._\\(\\)]+$"),
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "environmentName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const environmentName1 = {
    parameterPath: "environmentName",
    mapper: {
        serializedName: "environmentName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const expand = {
    parameterPath: ["options", "expand"],
    mapper: {
        serializedName: "$expand",
        type: {
            name: "String"
        }
    }
};
const environmentUpdateParameters = {
    parameterPath: "environmentUpdateParameters",
    mapper: EnvironmentUpdateParameters
};
const parameters1 = {
    parameterPath: "parameters",
    mapper: EventSourceCreateOrUpdateParameters
};
const eventSourceName = {
    parameterPath: "eventSourceName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[-\\w\\._\\(\\)]+$"),
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "eventSourceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const eventSourceName1 = {
    parameterPath: "eventSourceName",
    mapper: {
        serializedName: "eventSourceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const eventSourceUpdateParameters = {
    parameterPath: "eventSourceUpdateParameters",
    mapper: EventSourceUpdateParameters
};
const parameters2 = {
    parameterPath: "parameters",
    mapper: ReferenceDataSetCreateOrUpdateParameters
};
const referenceDataSetName = {
    parameterPath: "referenceDataSetName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[A-Za-z0-9]"),
            MaxLength: 63,
            MinLength: 3
        },
        serializedName: "referenceDataSetName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const referenceDataSetName1 = {
    parameterPath: "referenceDataSetName",
    mapper: {
        serializedName: "referenceDataSetName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const referenceDataSetUpdateParameters = {
    parameterPath: "referenceDataSetUpdateParameters",
    mapper: ReferenceDataSetUpdateParameters
};
const parameters3 = {
    parameterPath: "parameters",
    mapper: AccessPolicyCreateOrUpdateParameters
};
const accessPolicyName = {
    parameterPath: "accessPolicyName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[-\\w\\._\\(\\)]+$"),
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "accessPolicyName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const accessPolicyName1 = {
    parameterPath: "accessPolicyName",
    mapper: {
        serializedName: "accessPolicyName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const accessPolicyUpdateParameters = {
    parameterPath: "accessPolicyUpdateParameters",
    mapper: AccessPolicyUpdateParameters
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Operations operations. */
class OperationsImpl {
    /**
     * Initialize a new instance of the class Operations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all of the available Time Series Insights related operations.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listPagingPage(options);
            }
        };
    }
    listPagingPage(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result = yield tslib.__await(this._list(options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists all of the available Time Series Insights related operations.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/providers/Microsoft.TimeSeriesInsights/operations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationListResult
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationListResult
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, nextLink],
    headerParameters: [accept],
    serializer
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class LroImpl {
    constructor(sendOperationFn, args, spec, requestPath = spec.path, requestMethod = spec.httpMethod) {
        this.sendOperationFn = sendOperationFn;
        this.args = args;
        this.spec = spec;
        this.requestPath = requestPath;
        this.requestMethod = requestMethod;
    }
    sendInitialRequest() {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            return this.sendOperationFn(this.args, this.spec);
        });
    }
    sendPollRequest(path) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const _a = this.spec, restSpec = tslib.__rest(_a, ["requestBody"]);
            return this.sendOperationFn(this.args, Object.assign(Object.assign({}, restSpec), { path, httpMethod: "GET" }));
        });
    }
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing Environments operations. */
class EnvironmentsImpl {
    /**
     * Initialize a new instance of the class Environments class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Create or update an environment in the specified subscription and resource group.
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName Name of the environment
     * @param parameters Parameters for creating an environment resource.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, environmentName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, environmentName, parameters, options }, createOrUpdateOperationSpec);
            return new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
        });
    }
    /**
     * Create or update an environment in the specified subscription and resource group.
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName Name of the environment
     * @param parameters Parameters for creating an environment resource.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, environmentName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, environmentName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Gets the environment with the specified name in the specified subscription and resource group.
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the
     *                        specified resource group.
     * @param options The options parameters.
     */
    get(resourceGroupName, environmentName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, environmentName, options }, getOperationSpec);
    }
    /**
     * Updates the environment with the specified name in the specified subscription and resource group.
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the
     *                        specified resource group.
     * @param environmentUpdateParameters Request object that contains the updated information for the
     *                                    environment.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, environmentName, environmentUpdateParameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                environmentName,
                environmentUpdateParameters,
                options
            }, updateOperationSpec);
            return new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
        });
    }
    /**
     * Updates the environment with the specified name in the specified subscription and resource group.
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the
     *                        specified resource group.
     * @param environmentUpdateParameters Request object that contains the updated information for the
     *                                    environment.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, environmentName, environmentUpdateParameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, environmentName, environmentUpdateParameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Deletes the environment with the specified name in the specified subscription and resource group.
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the
     *                        specified resource group.
     * @param options The options parameters.
     */
    delete(resourceGroupName, environmentName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, environmentName, options }, deleteOperationSpec);
    }
    /**
     * Lists all the available environments associated with the subscription and within the specified
     * resource group.
     * @param resourceGroupName Name of an Azure Resource group.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listByResourceGroupOperationSpec);
    }
    /**
     * Lists all the available environments within a subscription, irrespective of the resource groups.
     * @param options The options parameters.
     */
    listBySubscription(options) {
        return this.client.sendOperationRequest({ options }, listBySubscriptionOperationSpec);
    }
}
// Operation Specifications
const serializer$1 = coreClient.createSerializer(Mappers, /* isXml */ false);
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: EnvironmentResource
        },
        201: {
            bodyMapper: EnvironmentResource
        },
        202: {
            bodyMapper: EnvironmentResource
        },
        204: {
            bodyMapper: EnvironmentResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: parameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        environmentName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$1
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: EnvironmentResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion, expand],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        environmentName1
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: EnvironmentResource
        },
        201: {
            bodyMapper: EnvironmentResource
        },
        202: {
            bodyMapper: EnvironmentResource
        },
        204: {
            bodyMapper: EnvironmentResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: environmentUpdateParameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        environmentName1
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$1
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        environmentName1
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listByResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: EnvironmentListResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listBySubscriptionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.TimeSeriesInsights/environments",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: EnvironmentListResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$1
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing EventSources operations. */
class EventSourcesImpl {
    /**
     * Initialize a new instance of the class EventSources class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Create or update an event source under the specified environment.
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the
     *                        specified resource group.
     * @param eventSourceName Name of the event source.
     * @param parameters Parameters for creating an event source resource.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, environmentName, eventSourceName, parameters, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            environmentName,
            eventSourceName,
            parameters,
            options
        }, createOrUpdateOperationSpec$1);
    }
    /**
     * Gets the event source with the specified name in the specified environment.
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the
     *                        specified resource group.
     * @param eventSourceName The name of the Time Series Insights event source associated with the
     *                        specified environment.
     * @param options The options parameters.
     */
    get(resourceGroupName, environmentName, eventSourceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, environmentName, eventSourceName, options }, getOperationSpec$1);
    }
    /**
     * Updates the event source with the specified name in the specified subscription, resource group, and
     * environment.
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the
     *                        specified resource group.
     * @param eventSourceName The name of the Time Series Insights event source associated with the
     *                        specified environment.
     * @param eventSourceUpdateParameters Request object that contains the updated information for the
     *                                    event source.
     * @param options The options parameters.
     */
    update(resourceGroupName, environmentName, eventSourceName, eventSourceUpdateParameters, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            environmentName,
            eventSourceName,
            eventSourceUpdateParameters,
            options
        }, updateOperationSpec$1);
    }
    /**
     * Deletes the event source with the specified name in the specified subscription, resource group, and
     * environment
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the
     *                        specified resource group.
     * @param eventSourceName The name of the Time Series Insights event source associated with the
     *                        specified environment.
     * @param options The options parameters.
     */
    delete(resourceGroupName, environmentName, eventSourceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, environmentName, eventSourceName, options }, deleteOperationSpec$1);
    }
    /**
     * Lists all the available event sources associated with the subscription and within the specified
     * resource group and environment.
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the
     *                        specified resource group.
     * @param options The options parameters.
     */
    listByEnvironment(resourceGroupName, environmentName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, environmentName, options }, listByEnvironmentOperationSpec);
    }
}
// Operation Specifications
const serializer$2 = coreClient.createSerializer(Mappers, /* isXml */ false);
const createOrUpdateOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}/eventSources/{eventSourceName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: EventSourceResource
        },
        201: {
            bodyMapper: EventSourceResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: parameters1,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        environmentName1,
        eventSourceName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$2
};
const getOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}/eventSources/{eventSourceName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: EventSourceResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        environmentName1,
        eventSourceName1
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const updateOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}/eventSources/{eventSourceName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: EventSourceResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: eventSourceUpdateParameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        environmentName1,
        eventSourceName1
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$2
};
const deleteOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}/eventSources/{eventSourceName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        environmentName1,
        eventSourceName1
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listByEnvironmentOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}/eventSources",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: EventSourceListResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        environmentName1
    ],
    headerParameters: [accept],
    serializer: serializer$2
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing ReferenceDataSets operations. */
class ReferenceDataSetsImpl {
    /**
     * Initialize a new instance of the class ReferenceDataSets class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Create or update a reference data set in the specified environment.
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the
     *                        specified resource group.
     * @param referenceDataSetName Name of the reference data set.
     * @param parameters Parameters for creating a reference data set.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, environmentName, referenceDataSetName, parameters, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            environmentName,
            referenceDataSetName,
            parameters,
            options
        }, createOrUpdateOperationSpec$2);
    }
    /**
     * Gets the reference data set with the specified name in the specified environment.
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the
     *                        specified resource group.
     * @param referenceDataSetName The name of the Time Series Insights reference data set associated with
     *                             the specified environment.
     * @param options The options parameters.
     */
    get(resourceGroupName, environmentName, referenceDataSetName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, environmentName, referenceDataSetName, options }, getOperationSpec$2);
    }
    /**
     * Updates the reference data set with the specified name in the specified subscription, resource
     * group, and environment.
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the
     *                        specified resource group.
     * @param referenceDataSetName The name of the Time Series Insights reference data set associated with
     *                             the specified environment.
     * @param referenceDataSetUpdateParameters Request object that contains the updated information for the
     *                                         reference data set.
     * @param options The options parameters.
     */
    update(resourceGroupName, environmentName, referenceDataSetName, referenceDataSetUpdateParameters, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            environmentName,
            referenceDataSetName,
            referenceDataSetUpdateParameters,
            options
        }, updateOperationSpec$2);
    }
    /**
     * Deletes the reference data set with the specified name in the specified subscription, resource
     * group, and environment
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the
     *                        specified resource group.
     * @param referenceDataSetName The name of the Time Series Insights reference data set associated with
     *                             the specified environment.
     * @param options The options parameters.
     */
    delete(resourceGroupName, environmentName, referenceDataSetName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, environmentName, referenceDataSetName, options }, deleteOperationSpec$2);
    }
    /**
     * Lists all the available reference data sets associated with the subscription and within the
     * specified resource group and environment.
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the
     *                        specified resource group.
     * @param options The options parameters.
     */
    listByEnvironment(resourceGroupName, environmentName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, environmentName, options }, listByEnvironmentOperationSpec$1);
    }
}
// Operation Specifications
const serializer$3 = coreClient.createSerializer(Mappers, /* isXml */ false);
const createOrUpdateOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}/referenceDataSets/{referenceDataSetName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ReferenceDataSetResource
        },
        201: {
            bodyMapper: ReferenceDataSetResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: parameters2,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        environmentName1,
        referenceDataSetName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$3
};
const getOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}/referenceDataSets/{referenceDataSetName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ReferenceDataSetResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        environmentName1,
        referenceDataSetName1
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const updateOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}/referenceDataSets/{referenceDataSetName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: ReferenceDataSetResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: referenceDataSetUpdateParameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        environmentName1,
        referenceDataSetName1
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$3
};
const deleteOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}/referenceDataSets/{referenceDataSetName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        environmentName1,
        referenceDataSetName1
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const listByEnvironmentOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}/referenceDataSets",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ReferenceDataSetListResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        environmentName1
    ],
    headerParameters: [accept],
    serializer: serializer$3
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing AccessPolicies operations. */
class AccessPoliciesImpl {
    /**
     * Initialize a new instance of the class AccessPolicies class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Create or update an access policy in the specified environment.
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the
     *                        specified resource group.
     * @param accessPolicyName Name of the access policy.
     * @param parameters Parameters for creating an access policy.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, environmentName, accessPolicyName, parameters, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            environmentName,
            accessPolicyName,
            parameters,
            options
        }, createOrUpdateOperationSpec$3);
    }
    /**
     * Gets the access policy with the specified name in the specified environment.
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the
     *                        specified resource group.
     * @param accessPolicyName The name of the Time Series Insights access policy associated with the
     *                         specified environment.
     * @param options The options parameters.
     */
    get(resourceGroupName, environmentName, accessPolicyName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, environmentName, accessPolicyName, options }, getOperationSpec$3);
    }
    /**
     * Updates the access policy with the specified name in the specified subscription, resource group, and
     * environment.
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the
     *                        specified resource group.
     * @param accessPolicyName The name of the Time Series Insights access policy associated with the
     *                         specified environment.
     * @param accessPolicyUpdateParameters Request object that contains the updated information for the
     *                                     access policy.
     * @param options The options parameters.
     */
    update(resourceGroupName, environmentName, accessPolicyName, accessPolicyUpdateParameters, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            environmentName,
            accessPolicyName,
            accessPolicyUpdateParameters,
            options
        }, updateOperationSpec$3);
    }
    /**
     * Deletes the access policy with the specified name in the specified subscription, resource group, and
     * environment
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the
     *                        specified resource group.
     * @param accessPolicyName The name of the Time Series Insights access policy associated with the
     *                         specified environment.
     * @param options The options parameters.
     */
    delete(resourceGroupName, environmentName, accessPolicyName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, environmentName, accessPolicyName, options }, deleteOperationSpec$3);
    }
    /**
     * Lists all the available access policies associated with the environment.
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the
     *                        specified resource group.
     * @param options The options parameters.
     */
    listByEnvironment(resourceGroupName, environmentName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, environmentName, options }, listByEnvironmentOperationSpec$2);
    }
}
// Operation Specifications
const serializer$4 = coreClient.createSerializer(Mappers, /* isXml */ false);
const createOrUpdateOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}/accessPolicies/{accessPolicyName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: AccessPolicyResource
        },
        201: {
            bodyMapper: AccessPolicyResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: parameters3,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        environmentName1,
        accessPolicyName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$4
};
const getOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}/accessPolicies/{accessPolicyName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AccessPolicyResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        environmentName1,
        accessPolicyName1
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const updateOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}/accessPolicies/{accessPolicyName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: AccessPolicyResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: accessPolicyUpdateParameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        environmentName1,
        accessPolicyName1
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$4
};
const deleteOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}/accessPolicies/{accessPolicyName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        environmentName1,
        accessPolicyName1
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const listByEnvironmentOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}/accessPolicies",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AccessPolicyListResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        environmentName1
    ],
    headerParameters: [accept],
    serializer: serializer$4
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class TimeSeriesInsightsClient extends coreClient.ServiceClient {
    /**
     * Initializes a new instance of the TimeSeriesInsightsClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId Azure Subscription ID.
     * @param options The parameter options
     */
    constructor(credentials, subscriptionId, options) {
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        if (subscriptionId === undefined) {
            throw new Error("'subscriptionId' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-timeseriesinsights/2.0.0`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        if (!options.credentialScopes) {
            options.credentialScopes = ["https://management.azure.com/.default"];
        }
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, baseUri: options.endpoint || "https://management.azure.com" });
        super(optionsWithDefaults);
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.apiVersion = options.apiVersion || "2020-05-15";
        this.operations = new OperationsImpl(this);
        this.environments = new EnvironmentsImpl(this);
        this.eventSources = new EventSourcesImpl(this);
        this.referenceDataSets = new ReferenceDataSetsImpl(this);
        this.accessPolicies = new AccessPoliciesImpl(this);
    }
}

exports.TimeSeriesInsightsClient = TimeSeriesInsightsClient;
//# sourceMappingURL=index.js.map
