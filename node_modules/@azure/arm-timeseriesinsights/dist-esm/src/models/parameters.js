/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { EnvironmentCreateOrUpdateParameters as EnvironmentCreateOrUpdateParametersMapper, EnvironmentUpdateParameters as EnvironmentUpdateParametersMapper, EventSourceCreateOrUpdateParameters as EventSourceCreateOrUpdateParametersMapper, EventSourceUpdateParameters as EventSourceUpdateParametersMapper, ReferenceDataSetCreateOrUpdateParameters as ReferenceDataSetCreateOrUpdateParametersMapper, ReferenceDataSetUpdateParameters as ReferenceDataSetUpdateParametersMapper, AccessPolicyCreateOrUpdateParameters as AccessPolicyCreateOrUpdateParametersMapper, AccessPolicyUpdateParameters as AccessPolicyUpdateParametersMapper } from "../models/mappers";
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2020-05-15",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export const parameters = {
    parameterPath: "parameters",
    mapper: EnvironmentCreateOrUpdateParametersMapper
};
export const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const environmentName = {
    parameterPath: "environmentName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[-\\w\\._\\(\\)]+$"),
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "environmentName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const environmentName1 = {
    parameterPath: "environmentName",
    mapper: {
        serializedName: "environmentName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const expand = {
    parameterPath: ["options", "expand"],
    mapper: {
        serializedName: "$expand",
        type: {
            name: "String"
        }
    }
};
export const environmentUpdateParameters = {
    parameterPath: "environmentUpdateParameters",
    mapper: EnvironmentUpdateParametersMapper
};
export const parameters1 = {
    parameterPath: "parameters",
    mapper: EventSourceCreateOrUpdateParametersMapper
};
export const eventSourceName = {
    parameterPath: "eventSourceName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[-\\w\\._\\(\\)]+$"),
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "eventSourceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const eventSourceName1 = {
    parameterPath: "eventSourceName",
    mapper: {
        serializedName: "eventSourceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const eventSourceUpdateParameters = {
    parameterPath: "eventSourceUpdateParameters",
    mapper: EventSourceUpdateParametersMapper
};
export const parameters2 = {
    parameterPath: "parameters",
    mapper: ReferenceDataSetCreateOrUpdateParametersMapper
};
export const referenceDataSetName = {
    parameterPath: "referenceDataSetName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[A-Za-z0-9]"),
            MaxLength: 63,
            MinLength: 3
        },
        serializedName: "referenceDataSetName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const referenceDataSetName1 = {
    parameterPath: "referenceDataSetName",
    mapper: {
        serializedName: "referenceDataSetName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const referenceDataSetUpdateParameters = {
    parameterPath: "referenceDataSetUpdateParameters",
    mapper: ReferenceDataSetUpdateParametersMapper
};
export const parameters3 = {
    parameterPath: "parameters",
    mapper: AccessPolicyCreateOrUpdateParametersMapper
};
export const accessPolicyName = {
    parameterPath: "accessPolicyName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[-\\w\\._\\(\\)]+$"),
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "accessPolicyName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const accessPolicyName1 = {
    parameterPath: "accessPolicyName",
    mapper: {
        serializedName: "accessPolicyName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const accessPolicyUpdateParameters = {
    parameterPath: "accessPolicyUpdateParameters",
    mapper: AccessPolicyUpdateParametersMapper
};
//# sourceMappingURL=parameters.js.map