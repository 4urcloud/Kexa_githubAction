/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
export const OperationListResult = {
    type: {
        name: "Composite",
        className: "OperationListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Operation"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const Operation = {
    type: {
        name: "Composite",
        className: "Operation",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            display: {
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "OperationDisplay"
                }
            },
            origin: {
                serializedName: "origin",
                type: {
                    name: "String"
                }
            },
            serviceSpecification: {
                serializedName: "properties.serviceSpecification",
                type: {
                    name: "Composite",
                    className: "ServiceSpecification"
                }
            }
        }
    }
};
export const OperationDisplay = {
    type: {
        name: "Composite",
        className: "OperationDisplay",
        modelProperties: {
            provider: {
                serializedName: "provider",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "resource",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ServiceSpecification = {
    type: {
        name: "Composite",
        className: "ServiceSpecification",
        modelProperties: {
            metricSpecifications: {
                serializedName: "metricSpecifications",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MetricSpecification"
                        }
                    }
                }
            },
            logSpecifications: {
                serializedName: "logSpecifications",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LogSpecification"
                        }
                    }
                }
            }
        }
    }
};
export const MetricSpecification = {
    type: {
        name: "Composite",
        className: "MetricSpecification",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            },
            displayDescription: {
                serializedName: "displayDescription",
                type: {
                    name: "String"
                }
            },
            unit: {
                serializedName: "unit",
                type: {
                    name: "String"
                }
            },
            dimensions: {
                serializedName: "dimensions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Dimension"
                        }
                    }
                }
            },
            aggregationType: {
                serializedName: "aggregationType",
                type: {
                    name: "String"
                }
            },
            availabilities: {
                serializedName: "availabilities",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MetricAvailability"
                        }
                    }
                }
            },
            category: {
                serializedName: "category",
                type: {
                    name: "String"
                }
            },
            resourceIdDimensionNameOverride: {
                serializedName: "resourceIdDimensionNameOverride",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const Dimension = {
    type: {
        name: "Composite",
        className: "Dimension",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const MetricAvailability = {
    type: {
        name: "Composite",
        className: "MetricAvailability",
        modelProperties: {
            timeGrain: {
                serializedName: "timeGrain",
                type: {
                    name: "String"
                }
            },
            blobDuration: {
                serializedName: "blobDuration",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const LogSpecification = {
    type: {
        name: "Composite",
        className: "LogSpecification",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const CloudError = {
    type: {
        name: "Composite",
        className: "CloudError",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "CloudErrorBody"
                }
            }
        }
    }
};
export const CloudErrorBody = {
    type: {
        name: "Composite",
        className: "CloudErrorBody",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CloudErrorBody"
                        }
                    }
                }
            }
        }
    }
};
export const Sku = {
    type: {
        name: "Composite",
        className: "Sku",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            capacity: {
                constraints: {
                    InclusiveMaximum: 10,
                    InclusiveMinimum: 1
                },
                serializedName: "capacity",
                required: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export const CreateOrUpdateTrackedResourceProperties = {
    type: {
        name: "Composite",
        className: "CreateOrUpdateTrackedResourceProperties",
        modelProperties: {
            location: {
                serializedName: "location",
                required: true,
                type: {
                    name: "String"
                }
            },
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }
        }
    }
};
export const Resource = {
    type: {
        name: "Composite",
        className: "Resource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const EnvironmentUpdateParameters = {
    type: {
        name: "Composite",
        className: "EnvironmentUpdateParameters",
        uberParent: "EnvironmentUpdateParameters",
        polymorphicDiscriminator: {
            serializedName: "kind",
            clientName: "kind"
        },
        modelProperties: {
            kind: {
                serializedName: "kind",
                required: true,
                type: {
                    name: "String"
                }
            },
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }
        }
    }
};
export const EnvironmentListResponse = {
    type: {
        name: "Composite",
        className: "EnvironmentListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EnvironmentResource"
                        }
                    }
                }
            }
        }
    }
};
export const LocalTimestamp = {
    type: {
        name: "Composite",
        className: "LocalTimestamp",
        modelProperties: {
            format: {
                serializedName: "format",
                type: {
                    name: "String"
                }
            },
            timeZoneOffset: {
                serializedName: "timeZoneOffset",
                type: {
                    name: "Composite",
                    className: "LocalTimestampTimeZoneOffset"
                }
            }
        }
    }
};
export const LocalTimestampTimeZoneOffset = {
    type: {
        name: "Composite",
        className: "LocalTimestampTimeZoneOffset",
        modelProperties: {
            propertyName: {
                serializedName: "propertyName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const EventSourceUpdateParameters = {
    type: {
        name: "Composite",
        className: "EventSourceUpdateParameters",
        uberParent: "EventSourceUpdateParameters",
        polymorphicDiscriminator: {
            serializedName: "kind",
            clientName: "kind"
        },
        modelProperties: {
            kind: {
                serializedName: "kind",
                required: true,
                type: {
                    name: "String"
                }
            },
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }
        }
    }
};
export const EventSourceListResponse = {
    type: {
        name: "Composite",
        className: "EventSourceListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EventSourceResource"
                        }
                    }
                }
            }
        }
    }
};
export const ReferenceDataSetCreationProperties = {
    type: {
        name: "Composite",
        className: "ReferenceDataSetCreationProperties",
        modelProperties: {
            keyProperties: {
                serializedName: "keyProperties",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReferenceDataSetKeyProperty"
                        }
                    }
                }
            },
            dataStringComparisonBehavior: {
                serializedName: "dataStringComparisonBehavior",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ReferenceDataSetKeyProperty = {
    type: {
        name: "Composite",
        className: "ReferenceDataSetKeyProperty",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ResourceProperties = {
    type: {
        name: "Composite",
        className: "ResourceProperties",
        modelProperties: {
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            creationTime: {
                serializedName: "creationTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
export const ReferenceDataSetUpdateParameters = {
    type: {
        name: "Composite",
        className: "ReferenceDataSetUpdateParameters",
        modelProperties: {
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }
        }
    }
};
export const ReferenceDataSetListResponse = {
    type: {
        name: "Composite",
        className: "ReferenceDataSetListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReferenceDataSetResource"
                        }
                    }
                }
            }
        }
    }
};
export const AccessPolicyCreateOrUpdateParameters = {
    type: {
        name: "Composite",
        className: "AccessPolicyCreateOrUpdateParameters",
        modelProperties: {
            principalObjectId: {
                serializedName: "properties.principalObjectId",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "properties.description",
                type: {
                    name: "String"
                }
            },
            roles: {
                serializedName: "properties.roles",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
export const AccessPolicyUpdateParameters = {
    type: {
        name: "Composite",
        className: "AccessPolicyUpdateParameters",
        modelProperties: {
            description: {
                serializedName: "properties.description",
                type: {
                    name: "String"
                }
            },
            roles: {
                serializedName: "properties.roles",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
export const AccessPolicyListResponse = {
    type: {
        name: "Composite",
        className: "AccessPolicyListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AccessPolicyResource"
                        }
                    }
                }
            }
        }
    }
};
export const WarmStoreConfigurationProperties = {
    type: {
        name: "Composite",
        className: "WarmStoreConfigurationProperties",
        modelProperties: {
            dataRetention: {
                serializedName: "dataRetention",
                required: true,
                type: {
                    name: "TimeSpan"
                }
            }
        }
    }
};
export const Gen2StorageConfigurationInput = {
    type: {
        name: "Composite",
        className: "Gen2StorageConfigurationInput",
        modelProperties: {
            accountName: {
                serializedName: "accountName",
                required: true,
                type: {
                    name: "String"
                }
            },
            managementKey: {
                serializedName: "managementKey",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const Gen2StorageConfigurationOutput = {
    type: {
        name: "Composite",
        className: "Gen2StorageConfigurationOutput",
        modelProperties: {
            accountName: {
                serializedName: "accountName",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const Gen2StorageConfigurationMutableProperties = {
    type: {
        name: "Composite",
        className: "Gen2StorageConfigurationMutableProperties",
        modelProperties: {
            managementKey: {
                serializedName: "managementKey",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const Gen1EnvironmentCreationProperties = {
    type: {
        name: "Composite",
        className: "Gen1EnvironmentCreationProperties",
        modelProperties: {
            dataRetentionTime: {
                serializedName: "dataRetentionTime",
                required: true,
                type: {
                    name: "TimeSpan"
                }
            },
            storageLimitExceededBehavior: {
                serializedName: "storageLimitExceededBehavior",
                type: {
                    name: "String"
                }
            },
            partitionKeyProperties: {
                serializedName: "partitionKeyProperties",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TimeSeriesIdProperty"
                        }
                    }
                }
            }
        }
    }
};
export const TimeSeriesIdProperty = {
    type: {
        name: "Composite",
        className: "TimeSeriesIdProperty",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const EnvironmentStatus = {
    type: {
        name: "Composite",
        className: "EnvironmentStatus",
        modelProperties: {
            ingress: {
                serializedName: "ingress",
                type: {
                    name: "Composite",
                    className: "IngressEnvironmentStatus"
                }
            },
            warmStorage: {
                serializedName: "warmStorage",
                type: {
                    name: "Composite",
                    className: "WarmStorageEnvironmentStatus"
                }
            }
        }
    }
};
export const IngressEnvironmentStatus = {
    type: {
        name: "Composite",
        className: "IngressEnvironmentStatus",
        modelProperties: {
            state: {
                serializedName: "state",
                type: {
                    name: "String"
                }
            },
            stateDetails: {
                serializedName: "stateDetails",
                type: {
                    name: "Composite",
                    className: "EnvironmentStateDetails"
                }
            }
        }
    }
};
export const EnvironmentStateDetails = {
    type: {
        name: "Composite",
        className: "EnvironmentStateDetails",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const WarmStorageEnvironmentStatus = {
    type: {
        name: "Composite",
        className: "WarmStorageEnvironmentStatus",
        modelProperties: {
            state: {
                serializedName: "propertiesUsage.state",
                type: {
                    name: "String"
                }
            },
            currentCount: {
                constraints: {
                    InclusiveMaximum: 10,
                    InclusiveMinimum: 1
                },
                serializedName: "propertiesUsage.stateDetails.currentCount",
                type: {
                    name: "Number"
                }
            },
            maxCount: {
                constraints: {
                    InclusiveMaximum: 10,
                    InclusiveMinimum: 1
                },
                serializedName: "propertiesUsage.stateDetails.maxCount",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export const EventSourceMutableProperties = {
    type: {
        name: "Composite",
        className: "EventSourceMutableProperties",
        modelProperties: {
            timestampPropertyName: {
                serializedName: "timestampPropertyName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const EnvironmentCreateOrUpdateParameters = {
    serializedName: "EnvironmentCreateOrUpdateParameters",
    type: {
        name: "Composite",
        className: "EnvironmentCreateOrUpdateParameters",
        uberParent: "CreateOrUpdateTrackedResourceProperties",
        polymorphicDiscriminator: {
            serializedName: "kind",
            clientName: "kind"
        },
        modelProperties: Object.assign(Object.assign({}, CreateOrUpdateTrackedResourceProperties.type.modelProperties), { kind: {
                serializedName: "kind",
                required: true,
                type: {
                    name: "String"
                }
            }, sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "Sku"
                }
            } })
    }
};
export const EventSourceCreateOrUpdateParameters = {
    serializedName: "EventSourceCreateOrUpdateParameters",
    type: {
        name: "Composite",
        className: "EventSourceCreateOrUpdateParameters",
        uberParent: "CreateOrUpdateTrackedResourceProperties",
        polymorphicDiscriminator: {
            serializedName: "kind",
            clientName: "kind"
        },
        modelProperties: Object.assign(Object.assign({}, CreateOrUpdateTrackedResourceProperties.type.modelProperties), { kind: {
                serializedName: "kind",
                required: true,
                type: {
                    name: "String"
                }
            }, localTimestamp: {
                serializedName: "localTimestamp",
                type: {
                    name: "Composite",
                    className: "LocalTimestamp"
                }
            } })
    }
};
export const ReferenceDataSetCreateOrUpdateParameters = {
    type: {
        name: "Composite",
        className: "ReferenceDataSetCreateOrUpdateParameters",
        modelProperties: Object.assign(Object.assign({}, CreateOrUpdateTrackedResourceProperties.type.modelProperties), { keyProperties: {
                serializedName: "properties.keyProperties",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReferenceDataSetKeyProperty"
                        }
                    }
                }
            }, dataStringComparisonBehavior: {
                serializedName: "properties.dataStringComparisonBehavior",
                type: {
                    name: "String"
                }
            } })
    }
};
export const TrackedResource = {
    type: {
        name: "Composite",
        className: "TrackedResource",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { location: {
                serializedName: "location",
                required: true,
                type: {
                    name: "String"
                }
            }, tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            } })
    }
};
export const AccessPolicyResource = {
    type: {
        name: "Composite",
        className: "AccessPolicyResource",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { principalObjectId: {
                serializedName: "properties.principalObjectId",
                type: {
                    name: "String"
                }
            }, description: {
                serializedName: "properties.description",
                type: {
                    name: "String"
                }
            }, roles: {
                serializedName: "properties.roles",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            } })
    }
};
export const Gen1EnvironmentUpdateParameters = {
    serializedName: "Gen1",
    type: {
        name: "Composite",
        className: "Gen1EnvironmentUpdateParameters",
        uberParent: "EnvironmentUpdateParameters",
        polymorphicDiscriminator: EnvironmentUpdateParameters.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, EnvironmentUpdateParameters.type.modelProperties), { sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "Sku"
                }
            }, dataRetentionTime: {
                serializedName: "properties.dataRetentionTime",
                type: {
                    name: "TimeSpan"
                }
            }, storageLimitExceededBehavior: {
                serializedName: "properties.storageLimitExceededBehavior",
                type: {
                    name: "String"
                }
            } })
    }
};
export const Gen2EnvironmentUpdateParameters = {
    serializedName: "Gen2",
    type: {
        name: "Composite",
        className: "Gen2EnvironmentUpdateParameters",
        uberParent: "EnvironmentUpdateParameters",
        polymorphicDiscriminator: EnvironmentUpdateParameters.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, EnvironmentUpdateParameters.type.modelProperties), { storageConfiguration: {
                serializedName: "properties.storageConfiguration",
                type: {
                    name: "Composite",
                    className: "Gen2StorageConfigurationMutableProperties"
                }
            }, warmStoreConfiguration: {
                serializedName: "properties.warmStoreConfiguration",
                type: {
                    name: "Composite",
                    className: "WarmStoreConfigurationProperties"
                }
            } })
    }
};
export const EventHubEventSourceUpdateParameters = {
    serializedName: "Microsoft.EventHub",
    type: {
        name: "Composite",
        className: "EventHubEventSourceUpdateParameters",
        uberParent: "EventSourceUpdateParameters",
        polymorphicDiscriminator: EventSourceUpdateParameters.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, EventSourceUpdateParameters.type.modelProperties), { timestampPropertyName: {
                serializedName: "properties.timestampPropertyName",
                type: {
                    name: "String"
                }
            }, sharedAccessKey: {
                serializedName: "properties.sharedAccessKey",
                type: {
                    name: "String"
                }
            } })
    }
};
export const IoTHubEventSourceUpdateParameters = {
    serializedName: "Microsoft.IoTHub",
    type: {
        name: "Composite",
        className: "IoTHubEventSourceUpdateParameters",
        uberParent: "EventSourceUpdateParameters",
        polymorphicDiscriminator: EventSourceUpdateParameters.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, EventSourceUpdateParameters.type.modelProperties), { timestampPropertyName: {
                serializedName: "properties.timestampPropertyName",
                type: {
                    name: "String"
                }
            }, sharedAccessKey: {
                serializedName: "properties.sharedAccessKey",
                type: {
                    name: "String"
                }
            } })
    }
};
export const ReferenceDataSetResourceProperties = {
    type: {
        name: "Composite",
        className: "ReferenceDataSetResourceProperties",
        modelProperties: Object.assign(Object.assign({}, ReferenceDataSetCreationProperties.type.modelProperties), ResourceProperties.type.modelProperties)
    }
};
export const EnvironmentResourceProperties = {
    type: {
        name: "Composite",
        className: "EnvironmentResourceProperties",
        modelProperties: Object.assign(Object.assign({}, ResourceProperties.type.modelProperties), { dataAccessId: {
                serializedName: "dataAccessId",
                readOnly: true,
                type: {
                    name: "Uuid"
                }
            }, dataAccessFqdn: {
                serializedName: "dataAccessFqdn",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, status: {
                serializedName: "status",
                type: {
                    name: "Composite",
                    className: "EnvironmentStatus"
                }
            } })
    }
};
export const EventSourceCommonProperties = {
    type: {
        name: "Composite",
        className: "EventSourceCommonProperties",
        modelProperties: Object.assign(Object.assign({}, ResourceProperties.type.modelProperties), { timestampPropertyName: {
                serializedName: "timestampPropertyName",
                type: {
                    name: "String"
                }
            }, localTimestamp: {
                serializedName: "localTimestamp",
                type: {
                    name: "Composite",
                    className: "LocalTimestamp"
                }
            }, type: {
                serializedName: "ingressStartAt.type",
                type: {
                    name: "String"
                }
            }, time: {
                serializedName: "ingressStartAt.time",
                type: {
                    name: "String"
                }
            } })
    }
};
export const Gen1EnvironmentResourceProperties = {
    type: {
        name: "Composite",
        className: "Gen1EnvironmentResourceProperties",
        modelProperties: Object.assign(Object.assign({}, Gen1EnvironmentCreationProperties.type.modelProperties), EnvironmentResourceProperties.type.modelProperties)
    }
};
export const EventHubEventSourceMutableProperties = {
    type: {
        name: "Composite",
        className: "EventHubEventSourceMutableProperties",
        modelProperties: Object.assign(Object.assign({}, EventSourceMutableProperties.type.modelProperties), { sharedAccessKey: {
                serializedName: "sharedAccessKey",
                type: {
                    name: "String"
                }
            } })
    }
};
export const IoTHubEventSourceMutableProperties = {
    type: {
        name: "Composite",
        className: "IoTHubEventSourceMutableProperties",
        modelProperties: Object.assign(Object.assign({}, EventSourceMutableProperties.type.modelProperties), { sharedAccessKey: {
                serializedName: "sharedAccessKey",
                type: {
                    name: "String"
                }
            } })
    }
};
export const Gen1EnvironmentCreateOrUpdateParameters = {
    serializedName: "Gen1",
    type: {
        name: "Composite",
        className: "Gen1EnvironmentCreateOrUpdateParameters",
        uberParent: "CreateOrUpdateTrackedResourceProperties",
        polymorphicDiscriminator: CreateOrUpdateTrackedResourceProperties.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, EnvironmentCreateOrUpdateParameters.type.modelProperties), { dataRetentionTime: {
                serializedName: "properties.dataRetentionTime",
                required: true,
                type: {
                    name: "TimeSpan"
                }
            }, storageLimitExceededBehavior: {
                serializedName: "properties.storageLimitExceededBehavior",
                type: {
                    name: "String"
                }
            }, partitionKeyProperties: {
                serializedName: "properties.partitionKeyProperties",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TimeSeriesIdProperty"
                        }
                    }
                }
            } })
    }
};
export const Gen2EnvironmentCreateOrUpdateParameters = {
    serializedName: "Gen2",
    type: {
        name: "Composite",
        className: "Gen2EnvironmentCreateOrUpdateParameters",
        uberParent: "CreateOrUpdateTrackedResourceProperties",
        polymorphicDiscriminator: CreateOrUpdateTrackedResourceProperties.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, EnvironmentCreateOrUpdateParameters.type.modelProperties), { timeSeriesIdProperties: {
                serializedName: "properties.timeSeriesIdProperties",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TimeSeriesIdProperty"
                        }
                    }
                }
            }, storageConfiguration: {
                serializedName: "properties.storageConfiguration",
                type: {
                    name: "Composite",
                    className: "Gen2StorageConfigurationInput"
                }
            }, warmStoreConfiguration: {
                serializedName: "properties.warmStoreConfiguration",
                type: {
                    name: "Composite",
                    className: "WarmStoreConfigurationProperties"
                }
            } })
    }
};
export const EventHubEventSourceCreateOrUpdateParameters = {
    serializedName: "Microsoft.EventHub",
    type: {
        name: "Composite",
        className: "EventHubEventSourceCreateOrUpdateParameters",
        uberParent: "CreateOrUpdateTrackedResourceProperties",
        polymorphicDiscriminator: CreateOrUpdateTrackedResourceProperties.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, EventSourceCreateOrUpdateParameters.type.modelProperties), { provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, creationTime: {
                serializedName: "properties.creationTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, timestampPropertyName: {
                serializedName: "properties.timestampPropertyName",
                type: {
                    name: "String"
                }
            }, localTimestampPropertiesLocalTimestamp: {
                serializedName: "properties.localTimestamp",
                type: {
                    name: "Composite",
                    className: "LocalTimestamp"
                }
            }, type: {
                serializedName: "properties.ingressStartAt.type",
                type: {
                    name: "String"
                }
            }, time: {
                serializedName: "properties.ingressStartAt.time",
                type: {
                    name: "String"
                }
            }, eventSourceResourceId: {
                serializedName: "properties.eventSourceResourceId",
                required: true,
                type: {
                    name: "String"
                }
            }, serviceBusNamespace: {
                serializedName: "properties.serviceBusNamespace",
                required: true,
                type: {
                    name: "String"
                }
            }, eventHubName: {
                serializedName: "properties.eventHubName",
                required: true,
                type: {
                    name: "String"
                }
            }, consumerGroupName: {
                serializedName: "properties.consumerGroupName",
                required: true,
                type: {
                    name: "String"
                }
            }, keyName: {
                serializedName: "properties.keyName",
                required: true,
                type: {
                    name: "String"
                }
            }, sharedAccessKey: {
                serializedName: "properties.sharedAccessKey",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
export const IoTHubEventSourceCreateOrUpdateParameters = {
    serializedName: "Microsoft.IoTHub",
    type: {
        name: "Composite",
        className: "IoTHubEventSourceCreateOrUpdateParameters",
        uberParent: "CreateOrUpdateTrackedResourceProperties",
        polymorphicDiscriminator: CreateOrUpdateTrackedResourceProperties.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, EventSourceCreateOrUpdateParameters.type.modelProperties), { provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, creationTime: {
                serializedName: "properties.creationTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, timestampPropertyName: {
                serializedName: "properties.timestampPropertyName",
                type: {
                    name: "String"
                }
            }, localTimestampPropertiesLocalTimestamp: {
                serializedName: "properties.localTimestamp",
                type: {
                    name: "Composite",
                    className: "LocalTimestamp"
                }
            }, type: {
                serializedName: "properties.ingressStartAt.type",
                type: {
                    name: "String"
                }
            }, time: {
                serializedName: "properties.ingressStartAt.time",
                type: {
                    name: "String"
                }
            }, eventSourceResourceId: {
                serializedName: "properties.eventSourceResourceId",
                required: true,
                type: {
                    name: "String"
                }
            }, iotHubName: {
                serializedName: "properties.iotHubName",
                required: true,
                type: {
                    name: "String"
                }
            }, consumerGroupName: {
                serializedName: "properties.consumerGroupName",
                required: true,
                type: {
                    name: "String"
                }
            }, keyName: {
                serializedName: "properties.keyName",
                required: true,
                type: {
                    name: "String"
                }
            }, sharedAccessKey: {
                serializedName: "properties.sharedAccessKey",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
export const EnvironmentResource = {
    serializedName: "EnvironmentResource",
    type: {
        name: "Composite",
        className: "EnvironmentResource",
        uberParent: "Resource",
        polymorphicDiscriminator: {
            serializedName: "kind",
            clientName: "kind"
        },
        modelProperties: Object.assign(Object.assign({}, TrackedResource.type.modelProperties), { sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "Sku"
                }
            }, kind: {
                serializedName: "kind",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
export const EventSourceResource = {
    serializedName: "EventSourceResource",
    type: {
        name: "Composite",
        className: "EventSourceResource",
        uberParent: "Resource",
        polymorphicDiscriminator: {
            serializedName: "kind",
            clientName: "kind"
        },
        modelProperties: Object.assign(Object.assign({}, TrackedResource.type.modelProperties), { kind: {
                serializedName: "kind",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
export const ReferenceDataSetResource = {
    type: {
        name: "Composite",
        className: "ReferenceDataSetResource",
        modelProperties: Object.assign(Object.assign({}, TrackedResource.type.modelProperties), { keyProperties: {
                serializedName: "properties.keyProperties",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReferenceDataSetKeyProperty"
                        }
                    }
                }
            }, dataStringComparisonBehavior: {
                serializedName: "properties.dataStringComparisonBehavior",
                type: {
                    name: "String"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, creationTime: {
                serializedName: "properties.creationTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            } })
    }
};
export const Gen2EnvironmentResourceProperties = {
    type: {
        name: "Composite",
        className: "Gen2EnvironmentResourceProperties",
        modelProperties: Object.assign(Object.assign({}, EnvironmentResourceProperties.type.modelProperties), { timeSeriesIdProperties: {
                serializedName: "timeSeriesIdProperties",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TimeSeriesIdProperty"
                        }
                    }
                }
            }, storageConfiguration: {
                serializedName: "storageConfiguration",
                type: {
                    name: "Composite",
                    className: "Gen2StorageConfigurationOutput"
                }
            }, warmStoreConfiguration: {
                serializedName: "warmStoreConfiguration",
                type: {
                    name: "Composite",
                    className: "WarmStoreConfigurationProperties"
                }
            } })
    }
};
export const AzureEventSourceProperties = {
    type: {
        name: "Composite",
        className: "AzureEventSourceProperties",
        modelProperties: Object.assign(Object.assign({}, EventSourceCommonProperties.type.modelProperties), { eventSourceResourceId: {
                serializedName: "eventSourceResourceId",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
export const Gen1EnvironmentResource = {
    serializedName: "Gen1",
    type: {
        name: "Composite",
        className: "Gen1EnvironmentResource",
        uberParent: "Resource",
        polymorphicDiscriminator: Resource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, EnvironmentResource.type.modelProperties), { dataRetentionTime: {
                serializedName: "properties.dataRetentionTime",
                required: true,
                type: {
                    name: "TimeSpan"
                }
            }, storageLimitExceededBehavior: {
                serializedName: "properties.storageLimitExceededBehavior",
                type: {
                    name: "String"
                }
            }, partitionKeyProperties: {
                serializedName: "properties.partitionKeyProperties",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TimeSeriesIdProperty"
                        }
                    }
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, creationTime: {
                serializedName: "properties.creationTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, dataAccessId: {
                serializedName: "properties.dataAccessId",
                readOnly: true,
                type: {
                    name: "Uuid"
                }
            }, dataAccessFqdn: {
                serializedName: "properties.dataAccessFqdn",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, status: {
                serializedName: "properties.status",
                type: {
                    name: "Composite",
                    className: "EnvironmentStatus"
                }
            } })
    }
};
export const Gen2EnvironmentResource = {
    serializedName: "Gen2",
    type: {
        name: "Composite",
        className: "Gen2EnvironmentResource",
        uberParent: "Resource",
        polymorphicDiscriminator: Resource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, EnvironmentResource.type.modelProperties), { provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, creationTime: {
                serializedName: "properties.creationTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, dataAccessId: {
                serializedName: "properties.dataAccessId",
                readOnly: true,
                type: {
                    name: "Uuid"
                }
            }, dataAccessFqdn: {
                serializedName: "properties.dataAccessFqdn",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, status: {
                serializedName: "properties.status",
                type: {
                    name: "Composite",
                    className: "EnvironmentStatus"
                }
            }, timeSeriesIdProperties: {
                serializedName: "properties.timeSeriesIdProperties",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TimeSeriesIdProperty"
                        }
                    }
                }
            }, storageConfiguration: {
                serializedName: "properties.storageConfiguration",
                type: {
                    name: "Composite",
                    className: "Gen2StorageConfigurationOutput"
                }
            }, warmStoreConfiguration: {
                serializedName: "properties.warmStoreConfiguration",
                type: {
                    name: "Composite",
                    className: "WarmStoreConfigurationProperties"
                }
            } })
    }
};
export const EventHubEventSourceResource = {
    serializedName: "Microsoft.EventHub",
    type: {
        name: "Composite",
        className: "EventHubEventSourceResource",
        uberParent: "Resource",
        polymorphicDiscriminator: Resource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, EventSourceResource.type.modelProperties), { provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, creationTime: {
                serializedName: "properties.creationTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, timestampPropertyName: {
                serializedName: "properties.timestampPropertyName",
                type: {
                    name: "String"
                }
            }, localTimestamp: {
                serializedName: "properties.localTimestamp",
                type: {
                    name: "Composite",
                    className: "LocalTimestamp"
                }
            }, typePropertiesIngressStartAtType: {
                serializedName: "properties.ingressStartAt.type",
                type: {
                    name: "String"
                }
            }, time: {
                serializedName: "properties.ingressStartAt.time",
                type: {
                    name: "String"
                }
            }, eventSourceResourceId: {
                serializedName: "properties.eventSourceResourceId",
                required: true,
                type: {
                    name: "String"
                }
            }, serviceBusNamespace: {
                serializedName: "properties.serviceBusNamespace",
                required: true,
                type: {
                    name: "String"
                }
            }, eventHubName: {
                serializedName: "properties.eventHubName",
                required: true,
                type: {
                    name: "String"
                }
            }, consumerGroupName: {
                serializedName: "properties.consumerGroupName",
                required: true,
                type: {
                    name: "String"
                }
            }, keyName: {
                serializedName: "properties.keyName",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
export const IoTHubEventSourceResource = {
    serializedName: "Microsoft.IoTHub",
    type: {
        name: "Composite",
        className: "IoTHubEventSourceResource",
        uberParent: "Resource",
        polymorphicDiscriminator: Resource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, EventSourceResource.type.modelProperties), { provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, creationTime: {
                serializedName: "properties.creationTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, timestampPropertyName: {
                serializedName: "properties.timestampPropertyName",
                type: {
                    name: "String"
                }
            }, localTimestamp: {
                serializedName: "properties.localTimestamp",
                type: {
                    name: "Composite",
                    className: "LocalTimestamp"
                }
            }, typePropertiesIngressStartAtType: {
                serializedName: "properties.ingressStartAt.type",
                type: {
                    name: "String"
                }
            }, time: {
                serializedName: "properties.ingressStartAt.time",
                type: {
                    name: "String"
                }
            }, eventSourceResourceId: {
                serializedName: "properties.eventSourceResourceId",
                required: true,
                type: {
                    name: "String"
                }
            }, iotHubName: {
                serializedName: "properties.iotHubName",
                required: true,
                type: {
                    name: "String"
                }
            }, consumerGroupName: {
                serializedName: "properties.consumerGroupName",
                required: true,
                type: {
                    name: "String"
                }
            }, keyName: {
                serializedName: "properties.keyName",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
export const EventHubEventSourceCommonProperties = {
    type: {
        name: "Composite",
        className: "EventHubEventSourceCommonProperties",
        modelProperties: Object.assign(Object.assign({}, AzureEventSourceProperties.type.modelProperties), { serviceBusNamespace: {
                serializedName: "serviceBusNamespace",
                required: true,
                type: {
                    name: "String"
                }
            }, eventHubName: {
                serializedName: "eventHubName",
                required: true,
                type: {
                    name: "String"
                }
            }, consumerGroupName: {
                serializedName: "consumerGroupName",
                required: true,
                type: {
                    name: "String"
                }
            }, keyName: {
                serializedName: "keyName",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
export const IoTHubEventSourceCommonProperties = {
    type: {
        name: "Composite",
        className: "IoTHubEventSourceCommonProperties",
        modelProperties: Object.assign(Object.assign({}, AzureEventSourceProperties.type.modelProperties), { iotHubName: {
                serializedName: "iotHubName",
                required: true,
                type: {
                    name: "String"
                }
            }, consumerGroupName: {
                serializedName: "consumerGroupName",
                required: true,
                type: {
                    name: "String"
                }
            }, keyName: {
                serializedName: "keyName",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
export const EventHubEventSourceCreationProperties = {
    type: {
        name: "Composite",
        className: "EventHubEventSourceCreationProperties",
        modelProperties: Object.assign(Object.assign({}, EventHubEventSourceCommonProperties.type.modelProperties), { sharedAccessKey: {
                serializedName: "sharedAccessKey",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
export const EventHubEventSourceResourceProperties = {
    type: {
        name: "Composite",
        className: "EventHubEventSourceResourceProperties",
        modelProperties: Object.assign({}, EventHubEventSourceCommonProperties.type.modelProperties)
    }
};
export const IoTHubEventSourceCreationProperties = {
    type: {
        name: "Composite",
        className: "IoTHubEventSourceCreationProperties",
        modelProperties: Object.assign(Object.assign({}, IoTHubEventSourceCommonProperties.type.modelProperties), { sharedAccessKey: {
                serializedName: "sharedAccessKey",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
export const IoTHubEventSourceResourceProperties = {
    type: {
        name: "Composite",
        className: "IoTHubEventSourceResourceProperties",
        modelProperties: Object.assign({}, IoTHubEventSourceCommonProperties.type.modelProperties)
    }
};
export let discriminators = {
    EnvironmentUpdateParameters: EnvironmentUpdateParameters,
    EventSourceUpdateParameters: EventSourceUpdateParameters,
    "CreateOrUpdateTrackedResourceProperties.EnvironmentCreateOrUpdateParameters": EnvironmentCreateOrUpdateParameters,
    "CreateOrUpdateTrackedResourceProperties.EventSourceCreateOrUpdateParameters": EventSourceCreateOrUpdateParameters,
    "EnvironmentUpdateParameters.Gen1": Gen1EnvironmentUpdateParameters,
    "EnvironmentUpdateParameters.Gen2": Gen2EnvironmentUpdateParameters,
    "EventSourceUpdateParameters.Microsoft.EventHub": EventHubEventSourceUpdateParameters,
    "EventSourceUpdateParameters.Microsoft.IoTHub": IoTHubEventSourceUpdateParameters,
    "CreateOrUpdateTrackedResourceProperties.Gen1": Gen1EnvironmentCreateOrUpdateParameters,
    "CreateOrUpdateTrackedResourceProperties.Gen2": Gen2EnvironmentCreateOrUpdateParameters,
    "CreateOrUpdateTrackedResourceProperties.Microsoft.EventHub": EventHubEventSourceCreateOrUpdateParameters,
    "CreateOrUpdateTrackedResourceProperties.Microsoft.IoTHub": IoTHubEventSourceCreateOrUpdateParameters,
    "Resource.EnvironmentResource": EnvironmentResource,
    "Resource.EventSourceResource": EventSourceResource,
    "Resource.Gen1": Gen1EnvironmentResource,
    "Resource.Gen2": Gen2EnvironmentResource,
    "Resource.Microsoft.EventHub": EventHubEventSourceResource,
    "Resource.Microsoft.IoTHub": IoTHubEventSourceResource
};
//# sourceMappingURL=mappers.js.map