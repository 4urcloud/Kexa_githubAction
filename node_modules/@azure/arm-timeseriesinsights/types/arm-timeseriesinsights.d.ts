import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { PollerLike } from '@azure/core-lro';
import { PollOperationState } from '@azure/core-lro';

/** Interface representing a AccessPolicies. */
export declare interface AccessPolicies {
    /**
     * Create or update an access policy in the specified environment.
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the
     *                        specified resource group.
     * @param accessPolicyName Name of the access policy.
     * @param parameters Parameters for creating an access policy.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, environmentName: string, accessPolicyName: string, parameters: AccessPolicyCreateOrUpdateParameters, options?: AccessPoliciesCreateOrUpdateOptionalParams): Promise<AccessPoliciesCreateOrUpdateResponse>;
    /**
     * Gets the access policy with the specified name in the specified environment.
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the
     *                        specified resource group.
     * @param accessPolicyName The name of the Time Series Insights access policy associated with the
     *                         specified environment.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, environmentName: string, accessPolicyName: string, options?: AccessPoliciesGetOptionalParams): Promise<AccessPoliciesGetResponse>;
    /**
     * Updates the access policy with the specified name in the specified subscription, resource group, and
     * environment.
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the
     *                        specified resource group.
     * @param accessPolicyName The name of the Time Series Insights access policy associated with the
     *                         specified environment.
     * @param accessPolicyUpdateParameters Request object that contains the updated information for the
     *                                     access policy.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, environmentName: string, accessPolicyName: string, accessPolicyUpdateParameters: AccessPolicyUpdateParameters, options?: AccessPoliciesUpdateOptionalParams): Promise<AccessPoliciesUpdateResponse>;
    /**
     * Deletes the access policy with the specified name in the specified subscription, resource group, and
     * environment
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the
     *                        specified resource group.
     * @param accessPolicyName The name of the Time Series Insights access policy associated with the
     *                         specified environment.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, environmentName: string, accessPolicyName: string, options?: AccessPoliciesDeleteOptionalParams): Promise<void>;
    /**
     * Lists all the available access policies associated with the environment.
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the
     *                        specified resource group.
     * @param options The options parameters.
     */
    listByEnvironment(resourceGroupName: string, environmentName: string, options?: AccessPoliciesListByEnvironmentOptionalParams): Promise<AccessPoliciesListByEnvironmentResponse>;
}

/** Optional parameters. */
export declare interface AccessPoliciesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type AccessPoliciesCreateOrUpdateResponse = AccessPolicyResource;

/** Optional parameters. */
export declare interface AccessPoliciesDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface AccessPoliciesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type AccessPoliciesGetResponse = AccessPolicyResource;

/** Optional parameters. */
export declare interface AccessPoliciesListByEnvironmentOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByEnvironment operation. */
export declare type AccessPoliciesListByEnvironmentResponse = AccessPolicyListResponse;

/** Optional parameters. */
export declare interface AccessPoliciesUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type AccessPoliciesUpdateResponse = AccessPolicyResource;

export declare interface AccessPolicyCreateOrUpdateParameters {
    /** The objectId of the principal in Azure Active Directory. */
    principalObjectId?: string;
    /** An description of the access policy. */
    description?: string;
    /** The list of roles the principal is assigned on the environment. */
    roles?: AccessPolicyRole[];
}

/** The response of the List access policies operation. */
export declare interface AccessPolicyListResponse {
    /** Result of the List access policies operation. */
    value?: AccessPolicyResource[];
}

/** An access policy is used to grant users and applications access to the environment. Roles are assigned to service principals in Azure Active Directory. These roles define the actions the principal can perform through the Time Series Insights data plane APIs. */
export declare type AccessPolicyResource = Resource & {
    /** The objectId of the principal in Azure Active Directory. */
    principalObjectId?: string;
    /** An description of the access policy. */
    description?: string;
    /** The list of roles the principal is assigned on the environment. */
    roles?: AccessPolicyRole[];
};

/**
 * Defines values for AccessPolicyRole. \
 * {@link KnownAccessPolicyRole} can be used interchangeably with AccessPolicyRole,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Reader** \
 * **Contributor**
 */
export declare type AccessPolicyRole = string;

export declare interface AccessPolicyUpdateParameters {
    /** An description of the access policy. */
    description?: string;
    /** The list of roles the principal is assigned on the environment. */
    roles?: AccessPolicyRole[];
}

/** Properties of an event source that reads events from an event broker in Azure. */
export declare type AzureEventSourceProperties = EventSourceCommonProperties & {
    /** The resource id of the event source in Azure Resource Manager. */
    eventSourceResourceId: string;
};

/** Contains information about an API error. */
export declare interface CloudError {
    /** Describes a particular API error with an error code and a message. */
    error?: CloudErrorBody;
}

/** Describes a particular API error with an error code and a message. */
export declare interface CloudErrorBody {
    /** An error code that describes the error condition more precisely than an HTTP status code. Can be used to programmatically handle specific error cases. */
    code?: string;
    /** A message that describes the error in detail and provides debugging information. */
    message?: string;
    /** The target of the particular error (for example, the name of the property in error). */
    target?: string;
    /** Contains nested errors that are related to this error. */
    details?: CloudErrorBody[];
}

/** Properties required to create any resource tracked by Azure Resource Manager. */
export declare interface CreateOrUpdateTrackedResourceProperties {
    /** The location of the resource. */
    location: string;
    /** Key-value pairs of additional properties for the resource. */
    tags?: {
        [propertyName: string]: string;
    };
}

/**
 * Defines values for DataStringComparisonBehavior. \
 * {@link KnownDataStringComparisonBehavior} can be used interchangeably with DataStringComparisonBehavior,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Ordinal** \
 * **OrdinalIgnoreCase**
 */
export declare type DataStringComparisonBehavior = string;

/** Dimension of blobs, possibly be blob type or access tier. */
export declare interface Dimension {
    /** Display name of dimension. */
    name?: string;
    /** Display name of dimension. */
    displayName?: string;
}

/** Parameters supplied to the CreateOrUpdate Environment operation. */
export declare type EnvironmentCreateOrUpdateParameters = CreateOrUpdateTrackedResourceProperties & {
    /** The kind of the environment. */
    kind: EnvironmentKind;
    /** The sku determines the type of environment, either Gen1 (S1 or S2) or Gen2 (L1). For Gen1 environments the sku determines the capacity of the environment, the ingress rate, and the billing rate. */
    sku: Sku;
};

export declare type EnvironmentCreateOrUpdateParametersUnion = EnvironmentCreateOrUpdateParameters | Gen1EnvironmentCreateOrUpdateParameters | Gen2EnvironmentCreateOrUpdateParameters;

/**
 * Defines values for EnvironmentKind. \
 * {@link KnownEnvironmentKind} can be used interchangeably with EnvironmentKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Gen1** \
 * **Gen2**
 */
export declare type EnvironmentKind = string;

/** The response of the List Environments operation. */
export declare interface EnvironmentListResponse {
    /** Result of the List Environments operation. */
    value?: EnvironmentResourceUnion[];
}

/** An environment is a set of time-series data available for query, and is the top level Azure Time Series Insights resource. */
export declare type EnvironmentResource = TrackedResource & {
    /** The sku determines the type of environment, either Gen1 (S1 or S2) or Gen2 (L1). For Gen1 environments the sku determines the capacity of the environment, the ingress rate, and the billing rate. */
    sku: Sku;
    /** The kind of the environment. */
    kind: EnvironmentResourceKind;
};

/**
 * Defines values for EnvironmentResourceKind. \
 * {@link KnownEnvironmentResourceKind} can be used interchangeably with EnvironmentResourceKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Gen1** \
 * **Gen2**
 */
export declare type EnvironmentResourceKind = string;

/** Properties of the environment. */
export declare type EnvironmentResourceProperties = ResourceProperties & {
    /**
     * An id used to access the environment data, e.g. to query the environment's events or upload reference data for the environment.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dataAccessId?: string;
    /**
     * The fully qualified domain name used to access the environment data, e.g. to query the environment's events or upload reference data for the environment.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dataAccessFqdn?: string;
    /**
     * An object that represents the status of the environment, and its internal state in the Time Series Insights service.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: EnvironmentStatus;
};

export declare type EnvironmentResourceUnion = EnvironmentResource | Gen1EnvironmentResource | Gen2EnvironmentResource;

/** Interface representing a Environments. */
export declare interface Environments {
    /**
     * Create or update an environment in the specified subscription and resource group.
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName Name of the environment
     * @param parameters Parameters for creating an environment resource.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, environmentName: string, parameters: EnvironmentCreateOrUpdateParametersUnion, options?: EnvironmentsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<EnvironmentsCreateOrUpdateResponse>, EnvironmentsCreateOrUpdateResponse>>;
    /**
     * Create or update an environment in the specified subscription and resource group.
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName Name of the environment
     * @param parameters Parameters for creating an environment resource.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, environmentName: string, parameters: EnvironmentCreateOrUpdateParametersUnion, options?: EnvironmentsCreateOrUpdateOptionalParams): Promise<EnvironmentsCreateOrUpdateResponse>;
    /**
     * Gets the environment with the specified name in the specified subscription and resource group.
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the
     *                        specified resource group.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, environmentName: string, options?: EnvironmentsGetOptionalParams): Promise<EnvironmentsGetResponse>;
    /**
     * Updates the environment with the specified name in the specified subscription and resource group.
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the
     *                        specified resource group.
     * @param environmentUpdateParameters Request object that contains the updated information for the
     *                                    environment.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, environmentName: string, environmentUpdateParameters: EnvironmentUpdateParametersUnion, options?: EnvironmentsUpdateOptionalParams): Promise<PollerLike<PollOperationState<EnvironmentsUpdateResponse>, EnvironmentsUpdateResponse>>;
    /**
     * Updates the environment with the specified name in the specified subscription and resource group.
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the
     *                        specified resource group.
     * @param environmentUpdateParameters Request object that contains the updated information for the
     *                                    environment.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, environmentName: string, environmentUpdateParameters: EnvironmentUpdateParametersUnion, options?: EnvironmentsUpdateOptionalParams): Promise<EnvironmentsUpdateResponse>;
    /**
     * Deletes the environment with the specified name in the specified subscription and resource group.
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the
     *                        specified resource group.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, environmentName: string, options?: EnvironmentsDeleteOptionalParams): Promise<void>;
    /**
     * Lists all the available environments associated with the subscription and within the specified
     * resource group.
     * @param resourceGroupName Name of an Azure Resource group.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: EnvironmentsListByResourceGroupOptionalParams): Promise<EnvironmentsListByResourceGroupResponse>;
    /**
     * Lists all the available environments within a subscription, irrespective of the resource groups.
     * @param options The options parameters.
     */
    listBySubscription(options?: EnvironmentsListBySubscriptionOptionalParams): Promise<EnvironmentsListBySubscriptionResponse>;
}

/** Optional parameters. */
export declare interface EnvironmentsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type EnvironmentsCreateOrUpdateResponse = EnvironmentResourceUnion;

/** Optional parameters. */
export declare interface EnvironmentsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface EnvironmentsGetOptionalParams extends coreClient.OperationOptions {
    /** Setting $expand=status will include the status of the internal services of the environment in the Time Series Insights service. */
    expand?: string;
}

/** Contains response data for the get operation. */
export declare type EnvironmentsGetResponse = EnvironmentResourceUnion;

/** Optional parameters. */
export declare interface EnvironmentsListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type EnvironmentsListByResourceGroupResponse = EnvironmentListResponse;

/** Optional parameters. */
export declare interface EnvironmentsListBySubscriptionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscription operation. */
export declare type EnvironmentsListBySubscriptionResponse = EnvironmentListResponse;

/** An object that contains the details about an environment's state. */
export declare interface EnvironmentStateDetails {
    /** Contains the code that represents the reason of an environment being in a particular state. Can be used to programmatically handle specific cases. */
    code?: string;
    /** A message that describes the state in detail. */
    message?: string;
}

/** An object that represents the status of the environment, and its internal state in the Time Series Insights service. */
export declare interface EnvironmentStatus {
    /**
     * An object that represents the status of ingress on an environment.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly ingress?: IngressEnvironmentStatus;
    /**
     * An object that represents the status of warm storage on an environment.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly warmStorage?: WarmStorageEnvironmentStatus;
}

/** Optional parameters. */
export declare interface EnvironmentsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type EnvironmentsUpdateResponse = EnvironmentResourceUnion;

/** Parameters supplied to the Update Environment operation. */
export declare interface EnvironmentUpdateParameters {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "Gen1" | "Gen2";
    /** Key-value pairs of additional properties for the environment. */
    tags?: {
        [propertyName: string]: string;
    };
}

export declare type EnvironmentUpdateParametersUnion = EnvironmentUpdateParameters | Gen1EnvironmentUpdateParameters | Gen2EnvironmentUpdateParameters;

/** Properties of the EventHub event source. */
export declare type EventHubEventSourceCommonProperties = AzureEventSourceProperties & {
    /** The name of the service bus that contains the event hub. */
    serviceBusNamespace: string;
    /** The name of the event hub. */
    eventHubName: string;
    /** The name of the event hub's consumer group that holds the partitions from which events will be read. */
    consumerGroupName: string;
    /** The name of the SAS key that grants the Time Series Insights service access to the event hub. The shared access policies for this key must grant 'Listen' permissions to the event hub. */
    keyName: string;
};

/** Parameters supplied to the Create or Update Event Source operation for an EventHub event source. */
export declare type EventHubEventSourceCreateOrUpdateParameters = EventSourceCreateOrUpdateParameters & {
    /**
     * Provisioning state of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /**
     * The time the resource was created.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly creationTime?: Date;
    /** The event property that will be used as the event source's timestamp. If a value isn't specified for timestampPropertyName, or if null or empty-string is specified, the event creation time will be used. */
    timestampPropertyName?: string;
    /** An object that represents the local timestamp property. It contains the format of local timestamp that needs to be used and the corresponding timezone offset information. If a value isn't specified for localTimestamp, or if null, then the local timestamp will not be ingressed with the events. */
    localTimestampPropertiesLocalTimestamp?: LocalTimestamp;
    /** The type of the ingressStartAt, It can be "EarliestAvailable", "EventSourceCreationTime", "CustomEnqueuedTime". */
    type?: IngressStartAtType;
    /** ISO8601 UTC datetime with seconds precision (milliseconds are optional), specifying the date and time that will be the starting point for Events to be consumed. */
    time?: string;
    /** The resource id of the event source in Azure Resource Manager. */
    eventSourceResourceId: string;
    /** The name of the service bus that contains the event hub. */
    serviceBusNamespace: string;
    /** The name of the event hub. */
    eventHubName: string;
    /** The name of the event hub's consumer group that holds the partitions from which events will be read. */
    consumerGroupName: string;
    /** The name of the SAS key that grants the Time Series Insights service access to the event hub. The shared access policies for this key must grant 'Listen' permissions to the event hub. */
    keyName: string;
    /** The value of the shared access key that grants the Time Series Insights service read access to the event hub. This property is not shown in event source responses. */
    sharedAccessKey: string;
};

/** Properties of the EventHub event source that are required on create or update requests. */
export declare type EventHubEventSourceCreationProperties = EventHubEventSourceCommonProperties & {
    /** The value of the shared access key that grants the Time Series Insights service read access to the event hub. This property is not shown in event source responses. */
    sharedAccessKey: string;
};

/** An object that represents a set of mutable EventHub event source resource properties. */
export declare type EventHubEventSourceMutableProperties = EventSourceMutableProperties & {
    /** The value of the shared access key that grants the Time Series Insights service read access to the event hub. This property is not shown in event source responses. */
    sharedAccessKey?: string;
};

/** An event source that receives its data from an Azure EventHub. */
export declare type EventHubEventSourceResource = EventSourceResource & {
    /**
     * Provisioning state of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /**
     * The time the resource was created.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly creationTime?: Date;
    /** The event property that will be used as the event source's timestamp. If a value isn't specified for timestampPropertyName, or if null or empty-string is specified, the event creation time will be used. */
    timestampPropertyName?: string;
    /** An object that represents the local timestamp property. It contains the format of local timestamp that needs to be used and the corresponding timezone offset information. If a value isn't specified for localTimestamp, or if null, then the local timestamp will not be ingressed with the events. */
    localTimestamp?: LocalTimestamp;
    /** The type of the ingressStartAt, It can be "EarliestAvailable", "EventSourceCreationTime", "CustomEnqueuedTime". */
    typePropertiesIngressStartAtType?: IngressStartAtType;
    /** ISO8601 UTC datetime with seconds precision (milliseconds are optional), specifying the date and time that will be the starting point for Events to be consumed. */
    time?: string;
    /** The resource id of the event source in Azure Resource Manager. */
    eventSourceResourceId: string;
    /** The name of the service bus that contains the event hub. */
    serviceBusNamespace: string;
    /** The name of the event hub. */
    eventHubName: string;
    /** The name of the event hub's consumer group that holds the partitions from which events will be read. */
    consumerGroupName: string;
    /** The name of the SAS key that grants the Time Series Insights service access to the event hub. The shared access policies for this key must grant 'Listen' permissions to the event hub. */
    keyName: string;
};

/** Properties of the EventHub event source resource. */
export declare type EventHubEventSourceResourceProperties = EventHubEventSourceCommonProperties & {};

/** Parameters supplied to the Update Event Source operation to update an EventHub event source. */
export declare type EventHubEventSourceUpdateParameters = EventSourceUpdateParameters & {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "Microsoft.EventHub";
    /** The event property that will be used as the event source's timestamp. If a value isn't specified for timestampPropertyName, or if null or empty-string is specified, the event creation time will be used. */
    timestampPropertyName?: string;
    /** The value of the shared access key that grants the Time Series Insights service read access to the event hub. This property is not shown in event source responses. */
    sharedAccessKey?: string;
};

/** Properties of the event source. */
export declare type EventSourceCommonProperties = ResourceProperties & {
    /** The event property that will be used as the event source's timestamp. If a value isn't specified for timestampPropertyName, or if null or empty-string is specified, the event creation time will be used. */
    timestampPropertyName?: string;
    /** An object that represents the local timestamp property. It contains the format of local timestamp that needs to be used and the corresponding timezone offset information. If a value isn't specified for localTimestamp, or if null, then the local timestamp will not be ingressed with the events. */
    localTimestamp?: LocalTimestamp;
    /** The type of the ingressStartAt, It can be "EarliestAvailable", "EventSourceCreationTime", "CustomEnqueuedTime". */
    type?: IngressStartAtType;
    /** ISO8601 UTC datetime with seconds precision (milliseconds are optional), specifying the date and time that will be the starting point for Events to be consumed. */
    time?: string;
};

/** Parameters supplied to the Create or Update Event Source operation. */
export declare type EventSourceCreateOrUpdateParameters = CreateOrUpdateTrackedResourceProperties & {
    /** The kind of the event source. */
    kind: EventSourceKind;
    /** An object that represents the local timestamp property. It contains the format of local timestamp that needs to be used and the corresponding timezone offset information. If a value isn't specified for localTimestamp, or if null, then the local timestamp will not be ingressed with the events. */
    localTimestamp?: LocalTimestamp;
};

export declare type EventSourceCreateOrUpdateParametersUnion = EventSourceCreateOrUpdateParameters | EventHubEventSourceCreateOrUpdateParameters | IoTHubEventSourceCreateOrUpdateParameters;

/**
 * Defines values for EventSourceKind. \
 * {@link KnownEventSourceKind} can be used interchangeably with EventSourceKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Microsoft.EventHub** \
 * **Microsoft.IoTHub**
 */
export declare type EventSourceKind = string;

/** The response of the List EventSources operation. */
export declare interface EventSourceListResponse {
    /** Result of the List EventSources operation. */
    value?: EventSourceResourceUnion[];
}

/** An object that represents a set of mutable event source resource properties. */
export declare interface EventSourceMutableProperties {
    /** The event property that will be used as the event source's timestamp. If a value isn't specified for timestampPropertyName, or if null or empty-string is specified, the event creation time will be used. */
    timestampPropertyName?: string;
}

/** An environment receives data from one or more event sources. Each event source has associated connection info that allows the Time Series Insights ingress pipeline to connect to and pull data from the event source */
export declare type EventSourceResource = TrackedResource & {
    /** The kind of the event source. */
    kind: EventSourceResourceKind;
};

/**
 * Defines values for EventSourceResourceKind. \
 * {@link KnownEventSourceResourceKind} can be used interchangeably with EventSourceResourceKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Microsoft.EventHub** \
 * **Microsoft.IoTHub**
 */
export declare type EventSourceResourceKind = string;

export declare type EventSourceResourceUnion = EventSourceResource | EventHubEventSourceResource | IoTHubEventSourceResource;

/** Interface representing a EventSources. */
export declare interface EventSources {
    /**
     * Create or update an event source under the specified environment.
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the
     *                        specified resource group.
     * @param eventSourceName Name of the event source.
     * @param parameters Parameters for creating an event source resource.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, environmentName: string, eventSourceName: string, parameters: EventSourceCreateOrUpdateParametersUnion, options?: EventSourcesCreateOrUpdateOptionalParams): Promise<EventSourcesCreateOrUpdateResponse>;
    /**
     * Gets the event source with the specified name in the specified environment.
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the
     *                        specified resource group.
     * @param eventSourceName The name of the Time Series Insights event source associated with the
     *                        specified environment.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, environmentName: string, eventSourceName: string, options?: EventSourcesGetOptionalParams): Promise<EventSourcesGetResponse>;
    /**
     * Updates the event source with the specified name in the specified subscription, resource group, and
     * environment.
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the
     *                        specified resource group.
     * @param eventSourceName The name of the Time Series Insights event source associated with the
     *                        specified environment.
     * @param eventSourceUpdateParameters Request object that contains the updated information for the
     *                                    event source.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, environmentName: string, eventSourceName: string, eventSourceUpdateParameters: EventSourceUpdateParametersUnion, options?: EventSourcesUpdateOptionalParams): Promise<EventSourcesUpdateResponse>;
    /**
     * Deletes the event source with the specified name in the specified subscription, resource group, and
     * environment
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the
     *                        specified resource group.
     * @param eventSourceName The name of the Time Series Insights event source associated with the
     *                        specified environment.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, environmentName: string, eventSourceName: string, options?: EventSourcesDeleteOptionalParams): Promise<void>;
    /**
     * Lists all the available event sources associated with the subscription and within the specified
     * resource group and environment.
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the
     *                        specified resource group.
     * @param options The options parameters.
     */
    listByEnvironment(resourceGroupName: string, environmentName: string, options?: EventSourcesListByEnvironmentOptionalParams): Promise<EventSourcesListByEnvironmentResponse>;
}

/** Optional parameters. */
export declare interface EventSourcesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type EventSourcesCreateOrUpdateResponse = EventSourceResourceUnion;

/** Optional parameters. */
export declare interface EventSourcesDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface EventSourcesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type EventSourcesGetResponse = EventSourceResourceUnion;

/** Optional parameters. */
export declare interface EventSourcesListByEnvironmentOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByEnvironment operation. */
export declare type EventSourcesListByEnvironmentResponse = EventSourceListResponse;

/** Optional parameters. */
export declare interface EventSourcesUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type EventSourcesUpdateResponse = EventSourceResourceUnion;

/** Parameters supplied to the Update Event Source operation. */
export declare interface EventSourceUpdateParameters {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "Microsoft.EventHub" | "Microsoft.IoTHub";
    /** Key-value pairs of additional properties for the event source. */
    tags?: {
        [propertyName: string]: string;
    };
}

export declare type EventSourceUpdateParametersUnion = EventSourceUpdateParameters | EventHubEventSourceUpdateParameters | IoTHubEventSourceUpdateParameters;

/** Parameters supplied to the Create or Update Environment operation for a Gen1 environment. */
export declare type Gen1EnvironmentCreateOrUpdateParameters = EnvironmentCreateOrUpdateParameters & {
    /** ISO8601 timespan specifying the minimum number of days the environment's events will be available for query. */
    dataRetentionTime: string;
    /** The behavior the Time Series Insights service should take when the environment's capacity has been exceeded. If "PauseIngress" is specified, new events will not be read from the event source. If "PurgeOldData" is specified, new events will continue to be read and old events will be deleted from the environment. The default behavior is PurgeOldData. */
    storageLimitExceededBehavior?: StorageLimitExceededBehavior;
    /** The list of event properties which will be used to partition data in the environment. Currently, only a single partition key property is supported. */
    partitionKeyProperties?: TimeSeriesIdProperty[];
};

/** Properties used to create a Gen1 environment. */
export declare interface Gen1EnvironmentCreationProperties {
    /** ISO8601 timespan specifying the minimum number of days the environment's events will be available for query. */
    dataRetentionTime: string;
    /** The behavior the Time Series Insights service should take when the environment's capacity has been exceeded. If "PauseIngress" is specified, new events will not be read from the event source. If "PurgeOldData" is specified, new events will continue to be read and old events will be deleted from the environment. The default behavior is PurgeOldData. */
    storageLimitExceededBehavior?: StorageLimitExceededBehavior;
    /** The list of event properties which will be used to partition data in the environment. Currently, only a single partition key property is supported. */
    partitionKeyProperties?: TimeSeriesIdProperty[];
}

/** An environment is a set of time-series data available for query, and is the top level Azure Time Series Insights resource. Gen1 environments have data retention limits. */
export declare type Gen1EnvironmentResource = EnvironmentResource & {
    /** ISO8601 timespan specifying the minimum number of days the environment's events will be available for query. */
    dataRetentionTime: string;
    /** The behavior the Time Series Insights service should take when the environment's capacity has been exceeded. If "PauseIngress" is specified, new events will not be read from the event source. If "PurgeOldData" is specified, new events will continue to be read and old events will be deleted from the environment. The default behavior is PurgeOldData. */
    storageLimitExceededBehavior?: StorageLimitExceededBehavior;
    /** The list of event properties which will be used to partition data in the environment. Currently, only a single partition key property is supported. */
    partitionKeyProperties?: TimeSeriesIdProperty[];
    /**
     * Provisioning state of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /**
     * The time the resource was created.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly creationTime?: Date;
    /**
     * An id used to access the environment data, e.g. to query the environment's events or upload reference data for the environment.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dataAccessId?: string;
    /**
     * The fully qualified domain name used to access the environment data, e.g. to query the environment's events or upload reference data for the environment.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dataAccessFqdn?: string;
    /**
     * An object that represents the status of the environment, and its internal state in the Time Series Insights service.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: EnvironmentStatus;
};

/** Properties of the Gen1 environment. */
export declare type Gen1EnvironmentResourceProperties = Gen1EnvironmentCreationProperties & EnvironmentResourceProperties & {};

/** Parameters supplied to the Update Environment operation to update a Gen1 environment. */
export declare type Gen1EnvironmentUpdateParameters = EnvironmentUpdateParameters & {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "Gen1";
    /** The sku of the environment. */
    sku?: Sku;
    /** ISO8601 timespan specifying the minimum number of days the environment's events will be available for query. */
    dataRetentionTime?: string;
    /** The behavior the Time Series Insights service should take when the environment's capacity has been exceeded. If "PauseIngress" is specified, new events will not be read from the event source. If "PurgeOldData" is specified, new events will continue to be read and old events will be deleted from the environment. The default behavior is PurgeOldData. */
    storageLimitExceededBehavior?: StorageLimitExceededBehavior;
};

/** Parameters supplied to the Create or Update Environment operation for a Gen2 environment. */
export declare type Gen2EnvironmentCreateOrUpdateParameters = EnvironmentCreateOrUpdateParameters & {
    /** The list of event properties which will be used to define the environment's time series id. */
    timeSeriesIdProperties: TimeSeriesIdProperty[];
    /** The storage configuration provides the connection details that allows the Time Series Insights service to connect to the customer storage account that is used to store the environment's data. */
    storageConfiguration: Gen2StorageConfigurationInput;
    /** The warm store configuration provides the details to create a warm store cache that will retain a copy of the environment's data available for faster query. */
    warmStoreConfiguration?: WarmStoreConfigurationProperties;
};

/** An environment is a set of time-series data available for query, and is the top level Azure Time Series Insights resource. Gen2 environments do not have set data retention limits. */
export declare type Gen2EnvironmentResource = EnvironmentResource & {
    /**
     * Provisioning state of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /**
     * The time the resource was created.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly creationTime?: Date;
    /**
     * An id used to access the environment data, e.g. to query the environment's events or upload reference data for the environment.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dataAccessId?: string;
    /**
     * The fully qualified domain name used to access the environment data, e.g. to query the environment's events or upload reference data for the environment.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dataAccessFqdn?: string;
    /**
     * An object that represents the status of the environment, and its internal state in the Time Series Insights service.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: EnvironmentStatus;
    /** The list of event properties which will be used to define the environment's time series id. */
    timeSeriesIdProperties: TimeSeriesIdProperty[];
    /** The storage configuration provides the connection details that allows the Time Series Insights service to connect to the customer storage account that is used to store the environment's data. */
    storageConfiguration: Gen2StorageConfigurationOutput;
    /** The warm store configuration provides the details to create a warm store cache that will retain a copy of the environment's data available for faster query. */
    warmStoreConfiguration?: WarmStoreConfigurationProperties;
};

/** Properties of the Gen2 environment. */
export declare type Gen2EnvironmentResourceProperties = EnvironmentResourceProperties & {
    /** The list of event properties which will be used to define the environment's time series id. */
    timeSeriesIdProperties: TimeSeriesIdProperty[];
    /** The storage configuration provides the connection details that allows the Time Series Insights service to connect to the customer storage account that is used to store the environment's data. */
    storageConfiguration: Gen2StorageConfigurationOutput;
    /** The warm store configuration provides the details to create a warm store cache that will retain a copy of the environment's data available for faster query. */
    warmStoreConfiguration?: WarmStoreConfigurationProperties;
};

/** Parameters supplied to the Update Environment operation to update a Gen2 environment. */
export declare type Gen2EnvironmentUpdateParameters = EnvironmentUpdateParameters & {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "Gen2";
    /** The storage configuration provides the connection details that allows the Time Series Insights service to connect to the customer storage account that is used to store the environment's data. */
    storageConfiguration?: Gen2StorageConfigurationMutableProperties;
    /** The warm store configuration provides the details to create a warm store cache that will retain a copy of the environment's data available for faster query. */
    warmStoreConfiguration?: WarmStoreConfigurationProperties;
};

/** The storage configuration provides the connection details that allows the Time Series Insights service to connect to the customer storage account that is used to store the environment's data. */
export declare interface Gen2StorageConfigurationInput {
    /** The name of the storage account that will hold the environment's Gen2 data. */
    accountName: string;
    /** The value of the management key that grants the Time Series Insights service write access to the storage account. This property is not shown in environment responses. */
    managementKey: string;
}

/** The storage configuration provides the connection details that allows the Time Series Insights service to connect to the customer storage account that is used to store the environment's data. */
export declare interface Gen2StorageConfigurationMutableProperties {
    /** The value of the management key that grants the Time Series Insights service write access to the storage account. This property is not shown in environment responses. */
    managementKey: string;
}

/** The storage configuration provides the non-secret connection details about the customer storage account that is used to store the environment's data. */
export declare interface Gen2StorageConfigurationOutput {
    /** The name of the storage account that will hold the environment's Gen2 data. */
    accountName: string;
}

/** An object that represents the status of ingress on an environment. */
export declare interface IngressEnvironmentStatus {
    /** This string represents the state of ingress operations on an environment. It can be "Disabled", "Ready", "Running", "Paused" or "Unknown" */
    state?: IngressState;
    /**
     * An object that contains the details about an environment's state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly stateDetails?: EnvironmentStateDetails;
}

/**
 * Defines values for IngressStartAtType. \
 * {@link KnownIngressStartAtType} can be used interchangeably with IngressStartAtType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **EarliestAvailable** \
 * **EventSourceCreationTime** \
 * **CustomEnqueuedTime**
 */
export declare type IngressStartAtType = string;

/**
 * Defines values for IngressState. \
 * {@link KnownIngressState} can be used interchangeably with IngressState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Disabled** \
 * **Ready** \
 * **Running** \
 * **Paused** \
 * **Unknown**
 */
export declare type IngressState = string;

/** Properties of the IoTHub event source. */
export declare type IoTHubEventSourceCommonProperties = AzureEventSourceProperties & {
    /** The name of the iot hub. */
    iotHubName: string;
    /** The name of the iot hub's consumer group that holds the partitions from which events will be read. */
    consumerGroupName: string;
    /** The name of the Shared Access Policy key that grants the Time Series Insights service access to the iot hub. This shared access policy key must grant 'service connect' permissions to the iot hub. */
    keyName: string;
};

/** Parameters supplied to the Create or Update Event Source operation for an IoTHub event source. */
export declare type IoTHubEventSourceCreateOrUpdateParameters = EventSourceCreateOrUpdateParameters & {
    /**
     * Provisioning state of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /**
     * The time the resource was created.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly creationTime?: Date;
    /** The event property that will be used as the event source's timestamp. If a value isn't specified for timestampPropertyName, or if null or empty-string is specified, the event creation time will be used. */
    timestampPropertyName?: string;
    /** An object that represents the local timestamp property. It contains the format of local timestamp that needs to be used and the corresponding timezone offset information. If a value isn't specified for localTimestamp, or if null, then the local timestamp will not be ingressed with the events. */
    localTimestampPropertiesLocalTimestamp?: LocalTimestamp;
    /** The type of the ingressStartAt, It can be "EarliestAvailable", "EventSourceCreationTime", "CustomEnqueuedTime". */
    type?: IngressStartAtType;
    /** ISO8601 UTC datetime with seconds precision (milliseconds are optional), specifying the date and time that will be the starting point for Events to be consumed. */
    time?: string;
    /** The resource id of the event source in Azure Resource Manager. */
    eventSourceResourceId: string;
    /** The name of the iot hub. */
    iotHubName: string;
    /** The name of the iot hub's consumer group that holds the partitions from which events will be read. */
    consumerGroupName: string;
    /** The name of the Shared Access Policy key that grants the Time Series Insights service access to the iot hub. This shared access policy key must grant 'service connect' permissions to the iot hub. */
    keyName: string;
    /** The value of the Shared Access Policy key that grants the Time Series Insights service read access to the iot hub. This property is not shown in event source responses. */
    sharedAccessKey: string;
};

/** Properties of the IoTHub event source that are required on create or update requests. */
export declare type IoTHubEventSourceCreationProperties = IoTHubEventSourceCommonProperties & {
    /** The value of the Shared Access Policy key that grants the Time Series Insights service read access to the iot hub. This property is not shown in event source responses. */
    sharedAccessKey: string;
};

/** An object that represents a set of mutable IoTHub event source resource properties. */
export declare type IoTHubEventSourceMutableProperties = EventSourceMutableProperties & {
    /** The value of the shared access key that grants the Time Series Insights service read access to the iot hub. This property is not shown in event source responses. */
    sharedAccessKey?: string;
};

/** An event source that receives its data from an Azure IoTHub. */
export declare type IoTHubEventSourceResource = EventSourceResource & {
    /**
     * Provisioning state of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /**
     * The time the resource was created.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly creationTime?: Date;
    /** The event property that will be used as the event source's timestamp. If a value isn't specified for timestampPropertyName, or if null or empty-string is specified, the event creation time will be used. */
    timestampPropertyName?: string;
    /** An object that represents the local timestamp property. It contains the format of local timestamp that needs to be used and the corresponding timezone offset information. If a value isn't specified for localTimestamp, or if null, then the local timestamp will not be ingressed with the events. */
    localTimestamp?: LocalTimestamp;
    /** The type of the ingressStartAt, It can be "EarliestAvailable", "EventSourceCreationTime", "CustomEnqueuedTime". */
    typePropertiesIngressStartAtType?: IngressStartAtType;
    /** ISO8601 UTC datetime with seconds precision (milliseconds are optional), specifying the date and time that will be the starting point for Events to be consumed. */
    time?: string;
    /** The resource id of the event source in Azure Resource Manager. */
    eventSourceResourceId: string;
    /** The name of the iot hub. */
    iotHubName: string;
    /** The name of the iot hub's consumer group that holds the partitions from which events will be read. */
    consumerGroupName: string;
    /** The name of the Shared Access Policy key that grants the Time Series Insights service access to the iot hub. This shared access policy key must grant 'service connect' permissions to the iot hub. */
    keyName: string;
};

/** Properties of the IoTHub event source resource. */
export declare type IoTHubEventSourceResourceProperties = IoTHubEventSourceCommonProperties & {};

/** Parameters supplied to the Update Event Source operation to update an IoTHub event source. */
export declare type IoTHubEventSourceUpdateParameters = EventSourceUpdateParameters & {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    kind: "Microsoft.IoTHub";
    /** The event property that will be used as the event source's timestamp. If a value isn't specified for timestampPropertyName, or if null or empty-string is specified, the event creation time will be used. */
    timestampPropertyName?: string;
    /** The value of the shared access key that grants the Time Series Insights service read access to the iot hub. This property is not shown in event source responses. */
    sharedAccessKey?: string;
};

/** Known values of {@link AccessPolicyRole} that the service accepts. */
export declare enum KnownAccessPolicyRole {
    Reader = "Reader",
    Contributor = "Contributor"
}

/** Known values of {@link DataStringComparisonBehavior} that the service accepts. */
export declare enum KnownDataStringComparisonBehavior {
    Ordinal = "Ordinal",
    OrdinalIgnoreCase = "OrdinalIgnoreCase"
}

/** Known values of {@link EnvironmentKind} that the service accepts. */
export declare enum KnownEnvironmentKind {
    Gen1 = "Gen1",
    Gen2 = "Gen2"
}

/** Known values of {@link EnvironmentResourceKind} that the service accepts. */
export declare enum KnownEnvironmentResourceKind {
    Gen1 = "Gen1",
    Gen2 = "Gen2"
}

/** Known values of {@link EventSourceKind} that the service accepts. */
export declare enum KnownEventSourceKind {
    MicrosoftEventHub = "Microsoft.EventHub",
    MicrosoftIoTHub = "Microsoft.IoTHub"
}

/** Known values of {@link EventSourceResourceKind} that the service accepts. */
export declare enum KnownEventSourceResourceKind {
    MicrosoftEventHub = "Microsoft.EventHub",
    MicrosoftIoTHub = "Microsoft.IoTHub"
}

/** Known values of {@link IngressStartAtType} that the service accepts. */
export declare enum KnownIngressStartAtType {
    EarliestAvailable = "EarliestAvailable",
    EventSourceCreationTime = "EventSourceCreationTime",
    CustomEnqueuedTime = "CustomEnqueuedTime"
}

/** Known values of {@link IngressState} that the service accepts. */
export declare enum KnownIngressState {
    Disabled = "Disabled",
    Ready = "Ready",
    Running = "Running",
    Paused = "Paused",
    Unknown = "Unknown"
}

/** Known values of {@link LocalTimestampFormat} that the service accepts. */
export declare enum KnownLocalTimestampFormat {
    Embedded = "Embedded"
}

/** Known values of {@link PropertyType} that the service accepts. */
export declare enum KnownPropertyType {
    String = "String"
}

/** Known values of {@link ProvisioningState} that the service accepts. */
export declare enum KnownProvisioningState {
    Accepted = "Accepted",
    Creating = "Creating",
    Updating = "Updating",
    Succeeded = "Succeeded",
    Failed = "Failed",
    Deleting = "Deleting"
}

/** Known values of {@link ReferenceDataKeyPropertyType} that the service accepts. */
export declare enum KnownReferenceDataKeyPropertyType {
    String = "String",
    Double = "Double",
    Bool = "Bool",
    DateTime = "DateTime"
}

/** Known values of {@link SkuName} that the service accepts. */
export declare enum KnownSkuName {
    S1 = "S1",
    S2 = "S2",
    P1 = "P1",
    L1 = "L1"
}

/** Known values of {@link StorageLimitExceededBehavior} that the service accepts. */
export declare enum KnownStorageLimitExceededBehavior {
    PurgeOldData = "PurgeOldData",
    PauseIngress = "PauseIngress"
}

/** Known values of {@link WarmStoragePropertiesState} that the service accepts. */
export declare enum KnownWarmStoragePropertiesState {
    Ok = "Ok",
    Error = "Error",
    Unknown = "Unknown"
}

/** An object that represents the local timestamp property. It contains the format of local timestamp that needs to be used and the corresponding timezone offset information. If a value isn't specified for localTimestamp, or if null, then the local timestamp will not be ingressed with the events. */
export declare interface LocalTimestamp {
    /** An enum that represents the format of the local timestamp property that needs to be set. */
    format?: LocalTimestampFormat;
    /** An object that represents the offset information for the local timestamp format specified. Should not be specified for LocalTimestampFormat - Embedded. */
    timeZoneOffset?: LocalTimestampTimeZoneOffset;
}

/**
 * Defines values for LocalTimestampFormat. \
 * {@link KnownLocalTimestampFormat} can be used interchangeably with LocalTimestampFormat,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Embedded**
 */
export declare type LocalTimestampFormat = string;

/** An object that represents the offset information for the local timestamp format specified. Should not be specified for LocalTimestampFormat - Embedded. */
export declare interface LocalTimestampTimeZoneOffset {
    /** The event property that will be contain the offset information to calculate the local timestamp. When the LocalTimestampFormat is Iana, the property name will contain the name of the column which contains IANA Timezone Name (eg: Americas/Los Angeles). When LocalTimestampFormat is Timespan, it contains the name of property which contains values representing the offset (eg: P1D or 1.00:00:00) */
    propertyName?: string;
}

/** The specification of an Azure Monitoring log. */
export declare interface LogSpecification {
    /** Log name. */
    name?: string;
    /** Log display name. */
    displayName?: string;
}

/** Retention policy of a resource metric. */
export declare interface MetricAvailability {
    timeGrain?: string;
    blobDuration?: string;
}

/** Metric specification of operation. */
export declare interface MetricSpecification {
    /** Name of metric specification. */
    name?: string;
    /** Display name of metric specification. */
    displayName?: string;
    /** Display description of metric specification. */
    displayDescription?: string;
    /** Unit could be Bytes or Count. */
    unit?: string;
    /** Dimensions of blobs, including blob type and access tier. */
    dimensions?: Dimension[];
    /** Aggregation type could be Average. */
    aggregationType?: string;
    /** Retention policies of a resource metric. */
    availabilities?: MetricAvailability[];
    /** The category this metric specification belong to, could be Capacity. */
    category?: string;
    /** Account Resource Id. */
    resourceIdDimensionNameOverride?: string;
}

/** A Time Series Insights REST API operation */
export declare interface Operation {
    /**
     * The name of the operation being performed on this particular object.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Contains the localized display information for this particular operation / action.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly display?: OperationDisplay;
    /** The intended executor of the operation. */
    origin?: string;
    /** One property of operation, include metric specifications. */
    serviceSpecification?: ServiceSpecification;
}

/** Contains the localized display information for this particular operation / action. */
export declare interface OperationDisplay {
    /**
     * The localized friendly form of the resource provider name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provider?: string;
    /**
     * The localized friendly form of the resource type related to this action/operation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resource?: string;
    /**
     * The localized friendly name for the operation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly operation?: string;
    /**
     * The localized friendly description for the operation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly description?: string;
}

/** Result of the request to list Time Series Insights operations. It contains a list of operations and a URL link to get the next set of results. */
export declare interface OperationListResult {
    /**
     * List of Time Series Insights operations supported by the Microsoft.TimeSeriesInsights resource provider.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: Operation[];
    /**
     * URL to get the next set of operation list results if there are any.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a Operations. */
export declare interface Operations {
    /**
     * Lists all of the available Time Series Insights related operations.
     * @param options The options parameters.
     */
    list(options?: OperationsListOptionalParams): PagedAsyncIterableIterator<Operation>;
}

/** Optional parameters. */
export declare interface OperationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export declare interface OperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OperationsListResponse = OperationListResult;

/**
 * Defines values for PropertyType. \
 * {@link KnownPropertyType} can be used interchangeably with PropertyType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **String**
 */
export declare type PropertyType = string;

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Accepted** \
 * **Creating** \
 * **Updating** \
 * **Succeeded** \
 * **Failed** \
 * **Deleting**
 */
export declare type ProvisioningState = string;

/**
 * Defines values for ReferenceDataKeyPropertyType. \
 * {@link KnownReferenceDataKeyPropertyType} can be used interchangeably with ReferenceDataKeyPropertyType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **String** \
 * **Double** \
 * **Bool** \
 * **DateTime**
 */
export declare type ReferenceDataKeyPropertyType = string;

export declare type ReferenceDataSetCreateOrUpdateParameters = CreateOrUpdateTrackedResourceProperties & {
    /** The list of key properties for the reference data set. */
    keyProperties: ReferenceDataSetKeyProperty[];
    /** The reference data set key comparison behavior can be set using this property. By default, the value is 'Ordinal' - which means case sensitive key comparison will be performed while joining reference data with events or while adding new reference data. When 'OrdinalIgnoreCase' is set, case insensitive comparison will be used. */
    dataStringComparisonBehavior?: DataStringComparisonBehavior;
};

/** Properties used to create a reference data set. */
export declare interface ReferenceDataSetCreationProperties {
    /** The list of key properties for the reference data set. */
    keyProperties: ReferenceDataSetKeyProperty[];
    /** The reference data set key comparison behavior can be set using this property. By default, the value is 'Ordinal' - which means case sensitive key comparison will be performed while joining reference data with events or while adding new reference data. When 'OrdinalIgnoreCase' is set, case insensitive comparison will be used. */
    dataStringComparisonBehavior?: DataStringComparisonBehavior;
}

/** A key property for the reference data set. A reference data set can have multiple key properties. */
export declare interface ReferenceDataSetKeyProperty {
    /** The name of the key property. */
    name?: string;
    /** The type of the key property. */
    type?: ReferenceDataKeyPropertyType;
}

/** The response of the List Reference Data Sets operation. */
export declare interface ReferenceDataSetListResponse {
    /** Result of the List Reference Data Sets operation. */
    value?: ReferenceDataSetResource[];
}

/** A reference data set provides metadata about the events in an environment. Metadata in the reference data set will be joined with events as they are read from event sources. The metadata that makes up the reference data set is uploaded or modified through the Time Series Insights data plane APIs. */
export declare type ReferenceDataSetResource = TrackedResource & {
    /** The list of key properties for the reference data set. */
    keyProperties?: ReferenceDataSetKeyProperty[];
    /** The reference data set key comparison behavior can be set using this property. By default, the value is 'Ordinal' - which means case sensitive key comparison will be performed while joining reference data with events or while adding new reference data. When 'OrdinalIgnoreCase' is set, case insensitive comparison will be used. */
    dataStringComparisonBehavior?: DataStringComparisonBehavior;
    /**
     * Provisioning state of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /**
     * The time the resource was created.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly creationTime?: Date;
};

/** Properties of the reference data set. */
export declare type ReferenceDataSetResourceProperties = ReferenceDataSetCreationProperties & ResourceProperties & {};

/** Interface representing a ReferenceDataSets. */
export declare interface ReferenceDataSets {
    /**
     * Create or update a reference data set in the specified environment.
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the
     *                        specified resource group.
     * @param referenceDataSetName Name of the reference data set.
     * @param parameters Parameters for creating a reference data set.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, environmentName: string, referenceDataSetName: string, parameters: ReferenceDataSetCreateOrUpdateParameters, options?: ReferenceDataSetsCreateOrUpdateOptionalParams): Promise<ReferenceDataSetsCreateOrUpdateResponse>;
    /**
     * Gets the reference data set with the specified name in the specified environment.
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the
     *                        specified resource group.
     * @param referenceDataSetName The name of the Time Series Insights reference data set associated with
     *                             the specified environment.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, environmentName: string, referenceDataSetName: string, options?: ReferenceDataSetsGetOptionalParams): Promise<ReferenceDataSetsGetResponse>;
    /**
     * Updates the reference data set with the specified name in the specified subscription, resource
     * group, and environment.
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the
     *                        specified resource group.
     * @param referenceDataSetName The name of the Time Series Insights reference data set associated with
     *                             the specified environment.
     * @param referenceDataSetUpdateParameters Request object that contains the updated information for the
     *                                         reference data set.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, environmentName: string, referenceDataSetName: string, referenceDataSetUpdateParameters: ReferenceDataSetUpdateParameters, options?: ReferenceDataSetsUpdateOptionalParams): Promise<ReferenceDataSetsUpdateResponse>;
    /**
     * Deletes the reference data set with the specified name in the specified subscription, resource
     * group, and environment
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the
     *                        specified resource group.
     * @param referenceDataSetName The name of the Time Series Insights reference data set associated with
     *                             the specified environment.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, environmentName: string, referenceDataSetName: string, options?: ReferenceDataSetsDeleteOptionalParams): Promise<void>;
    /**
     * Lists all the available reference data sets associated with the subscription and within the
     * specified resource group and environment.
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the
     *                        specified resource group.
     * @param options The options parameters.
     */
    listByEnvironment(resourceGroupName: string, environmentName: string, options?: ReferenceDataSetsListByEnvironmentOptionalParams): Promise<ReferenceDataSetsListByEnvironmentResponse>;
}

/** Optional parameters. */
export declare interface ReferenceDataSetsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type ReferenceDataSetsCreateOrUpdateResponse = ReferenceDataSetResource;

/** Optional parameters. */
export declare interface ReferenceDataSetsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface ReferenceDataSetsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ReferenceDataSetsGetResponse = ReferenceDataSetResource;

/** Optional parameters. */
export declare interface ReferenceDataSetsListByEnvironmentOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByEnvironment operation. */
export declare type ReferenceDataSetsListByEnvironmentResponse = ReferenceDataSetListResponse;

/** Optional parameters. */
export declare interface ReferenceDataSetsUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type ReferenceDataSetsUpdateResponse = ReferenceDataSetResource;

/** Parameters supplied to the Update Reference Data Set operation. */
export declare interface ReferenceDataSetUpdateParameters {
    /** Key-value pairs of additional properties for the reference data set. */
    tags?: {
        [propertyName: string]: string;
    };
}

/** Time Series Insights resource */
export declare interface Resource {
    /**
     * Resource Id
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Resource name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Resource type
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
}

/** Properties that are common to all tracked resources. */
export declare interface ResourceProperties {
    /**
     * Provisioning state of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /**
     * The time the resource was created.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly creationTime?: Date;
}

/** One property of operation, include metric specifications. */
export declare interface ServiceSpecification {
    /** Metric specifications of operation. */
    metricSpecifications?: MetricSpecification[];
    /** A list of Azure Monitoring log definitions. */
    logSpecifications?: LogSpecification[];
}

/** The sku determines the type of environment, either Gen1 (S1 or S2) or Gen2 (L1). For Gen1 environments the sku determines the capacity of the environment, the ingress rate, and the billing rate. */
export declare interface Sku {
    /** The name of this SKU. */
    name: SkuName;
    /** The capacity of the sku. For Gen1 environments, this value can be changed to support scale out of environments after they have been created. */
    capacity: number;
}

/**
 * Defines values for SkuName. \
 * {@link KnownSkuName} can be used interchangeably with SkuName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **S1** \
 * **S2** \
 * **P1** \
 * **L1**
 */
export declare type SkuName = string;

/**
 * Defines values for StorageLimitExceededBehavior. \
 * {@link KnownStorageLimitExceededBehavior} can be used interchangeably with StorageLimitExceededBehavior,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **PurgeOldData** \
 * **PauseIngress**
 */
export declare type StorageLimitExceededBehavior = string;

/** The structure of the property that a time series id can have. An environment can have multiple such properties. */
export declare interface TimeSeriesIdProperty {
    /** The name of the property. */
    name?: string;
    /** The type of the property. */
    type?: PropertyType;
}

export declare class TimeSeriesInsightsClient extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the TimeSeriesInsightsClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId Azure Subscription ID.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: TimeSeriesInsightsClientOptionalParams);
    operations: Operations;
    environments: Environments;
    eventSources: EventSources;
    referenceDataSets: ReferenceDataSets;
    accessPolicies: AccessPolicies;
}

/** Optional parameters. */
export declare interface TimeSeriesInsightsClientOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** Time Series Insights resource that is tracked by Azure Resource Manager. */
export declare type TrackedResource = Resource & {
    /** Resource location */
    location: string;
    /** Resource tags */
    tags?: {
        [propertyName: string]: string;
    };
};

/** An object that represents the status of warm storage on an environment. */
export declare interface WarmStorageEnvironmentStatus {
    /** This string represents the state of warm storage properties usage. It can be "Ok", "Error", "Unknown". */
    state?: WarmStoragePropertiesState;
    /** A value that represents the number of properties used by the environment for S1/S2 SKU and number of properties used by Warm Store for PAYG SKU */
    currentCount?: number;
    /** A value that represents the maximum number of properties used allowed by the environment for S1/S2 SKU and maximum number of properties allowed by Warm Store for PAYG SKU. */
    maxCount?: number;
}

/**
 * Defines values for WarmStoragePropertiesState. \
 * {@link KnownWarmStoragePropertiesState} can be used interchangeably with WarmStoragePropertiesState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Ok** \
 * **Error** \
 * **Unknown**
 */
export declare type WarmStoragePropertiesState = string;

/** The warm store configuration provides the details to create a warm store cache that will retain a copy of the environment's data available for faster query. */
export declare interface WarmStoreConfigurationProperties {
    /** ISO8601 timespan specifying the number of days the environment's events will be available for query from the warm store. */
    dataRetention: string;
}

export { }
