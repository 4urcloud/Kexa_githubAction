import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { OperationState } from '@azure/core-lro';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { SimplePollerLike } from '@azure/core-lro';

/** An addon resource */
export declare interface Addon extends Resource {
    /** The properties of an addon resource */
    properties?: AddonPropertiesUnion;
}

/** The properties of an Arc addon */
export declare interface AddonArcProperties extends AddonProperties {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    addonType: "Arc";
    /** The VMware vCenter resource ID */
    vCenter?: string;
}

/** The properties of an HCX addon */
export declare interface AddonHcxProperties extends AddonProperties {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    addonType: "HCX";
    /** The HCX offer, example VMware MaaS Cloud Provider (Enterprise) */
    offer: string;
}

/** A paged list of addons */
export declare interface AddonList {
    /**
     * The items on a page
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: Addon[];
    /**
     * URL to get the next page if any
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** The properties of an addon */
export declare interface AddonProperties {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    addonType: "SRM" | "VR" | "HCX" | "Arc";
    /**
     * The state of the addon provisioning
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: AddonProvisioningState;
}

export declare type AddonPropertiesUnion = AddonProperties | AddonSrmProperties | AddonVrProperties | AddonHcxProperties | AddonArcProperties;

/**
 * Defines values for AddonProvisioningState. \
 * {@link KnownAddonProvisioningState} can be used interchangeably with AddonProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Cancelled** \
 * **Building** \
 * **Deleting** \
 * **Updating** \
 * **Canceled**
 */
export declare type AddonProvisioningState = string;

/** Interface representing a Addons. */
export declare interface Addons {
    /**
     * List addons in a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param options The options parameters.
     */
    list(resourceGroupName: string, privateCloudName: string, options?: AddonsListOptionalParams): PagedAsyncIterableIterator<Addon>;
    /**
     * Get an addon by name in a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param addonName Name of the addon for the private cloud
     * @param options The options parameters.
     */
    get(resourceGroupName: string, privateCloudName: string, addonName: string, options?: AddonsGetOptionalParams): Promise<AddonsGetResponse>;
    /**
     * Create or update a addon in a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName The name of the private cloud.
     * @param addonName Name of the addon for the private cloud
     * @param addon A addon in the private cloud
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, privateCloudName: string, addonName: string, addon: Addon, options?: AddonsCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<AddonsCreateOrUpdateResponse>, AddonsCreateOrUpdateResponse>>;
    /**
     * Create or update a addon in a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName The name of the private cloud.
     * @param addonName Name of the addon for the private cloud
     * @param addon A addon in the private cloud
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, privateCloudName: string, addonName: string, addon: Addon, options?: AddonsCreateOrUpdateOptionalParams): Promise<AddonsCreateOrUpdateResponse>;
    /**
     * Delete a addon in a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param addonName Name of the addon for the private cloud
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, privateCloudName: string, addonName: string, options?: AddonsDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Delete a addon in a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param addonName Name of the addon for the private cloud
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, privateCloudName: string, addonName: string, options?: AddonsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface AddonsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type AddonsCreateOrUpdateResponse = Addon;

/** Optional parameters. */
export declare interface AddonsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface AddonsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type AddonsGetResponse = Addon;

/** Optional parameters. */
export declare interface AddonsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type AddonsListNextResponse = AddonList;

/** Optional parameters. */
export declare interface AddonsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type AddonsListResponse = AddonList;

/** The properties of a Site Recovery Manager (SRM) addon */
export declare interface AddonSrmProperties extends AddonProperties {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    addonType: "SRM";
    /** The Site Recovery Manager (SRM) license */
    licenseKey?: string;
}

/**
 * Defines values for AddonType. \
 * {@link KnownAddonType} can be used interchangeably with AddonType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SRM** \
 * **VR** \
 * **HCX** \
 * **Arc**
 */
export declare type AddonType = string;

/** The properties of a vSphere Replication (VR) addon */
export declare interface AddonVrProperties extends AddonProperties {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    addonType: "VR";
    /** The vSphere Replication Server (VRS) count */
    vrsCount: number;
}

/** Administrative credentials for accessing vCenter and NSX-T */
export declare interface AdminCredentials {
    /**
     * NSX-T Manager username
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nsxtUsername?: string;
    /**
     * NSX-T Manager password
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nsxtPassword?: string;
    /**
     * vCenter admin username
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly vcenterUsername?: string;
    /**
     * vCenter admin password
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly vcenterPassword?: string;
}

/**
 * Defines values for AffinityStrength. \
 * {@link KnownAffinityStrength} can be used interchangeably with AffinityStrength,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Should** \
 * **Must**
 */
export declare type AffinityStrength = string;

/**
 * Defines values for AffinityType. \
 * {@link KnownAffinityType} can be used interchangeably with AffinityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Affinity** \
 * **AntiAffinity**
 */
export declare type AffinityType = string;

/** Interface representing a Authorizations. */
export declare interface Authorizations {
    /**
     * List ExpressRoute Circuit Authorizations in a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param options The options parameters.
     */
    list(resourceGroupName: string, privateCloudName: string, options?: AuthorizationsListOptionalParams): PagedAsyncIterableIterator<ExpressRouteAuthorization>;
    /**
     * Get an ExpressRoute Circuit Authorization by name in a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param authorizationName Name of the ExpressRoute Circuit Authorization in the private cloud
     * @param options The options parameters.
     */
    get(resourceGroupName: string, privateCloudName: string, authorizationName: string, options?: AuthorizationsGetOptionalParams): Promise<AuthorizationsGetResponse>;
    /**
     * Create or update an ExpressRoute Circuit Authorization in a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName The name of the private cloud.
     * @param authorizationName Name of the ExpressRoute Circuit Authorization in the private cloud
     * @param authorization An ExpressRoute Circuit Authorization
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, privateCloudName: string, authorizationName: string, authorization: ExpressRouteAuthorization, options?: AuthorizationsCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<AuthorizationsCreateOrUpdateResponse>, AuthorizationsCreateOrUpdateResponse>>;
    /**
     * Create or update an ExpressRoute Circuit Authorization in a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName The name of the private cloud.
     * @param authorizationName Name of the ExpressRoute Circuit Authorization in the private cloud
     * @param authorization An ExpressRoute Circuit Authorization
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, privateCloudName: string, authorizationName: string, authorization: ExpressRouteAuthorization, options?: AuthorizationsCreateOrUpdateOptionalParams): Promise<AuthorizationsCreateOrUpdateResponse>;
    /**
     * Delete an ExpressRoute Circuit Authorization in a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param authorizationName Name of the ExpressRoute Circuit Authorization in the private cloud
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, privateCloudName: string, authorizationName: string, options?: AuthorizationsDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Delete an ExpressRoute Circuit Authorization in a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param authorizationName Name of the ExpressRoute Circuit Authorization in the private cloud
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, privateCloudName: string, authorizationName: string, options?: AuthorizationsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface AuthorizationsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type AuthorizationsCreateOrUpdateResponse = ExpressRouteAuthorization;

/** Optional parameters. */
export declare interface AuthorizationsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface AuthorizationsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type AuthorizationsGetResponse = ExpressRouteAuthorization;

/** Optional parameters. */
export declare interface AuthorizationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type AuthorizationsListNextResponse = ExpressRouteAuthorizationList;

/** Optional parameters. */
export declare interface AuthorizationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type AuthorizationsListResponse = ExpressRouteAuthorizationList;

/** The properties describing private cloud availability zone distribution */
export declare interface AvailabilityProperties {
    /** The availability strategy for the private cloud */
    strategy?: AvailabilityStrategy;
    /** The primary availability zone for the private cloud */
    zone?: number;
    /** The secondary availability zone for the private cloud */
    secondaryZone?: number;
}

/**
 * Defines values for AvailabilityStrategy. \
 * {@link KnownAvailabilityStrategy} can be used interchangeably with AvailabilityStrategy,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SingleZone** \
 * **DualZone**
 */
export declare type AvailabilityStrategy = string;

/**
 * Defines values for AzureHybridBenefitType. \
 * {@link KnownAzureHybridBenefitType} can be used interchangeably with AzureHybridBenefitType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SqlHost** \
 * **None**
 */
export declare type AzureHybridBenefitType = string;

export declare class AzureVMwareSolutionAPI extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the AzureVMwareSolutionAPI class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: AzureVMwareSolutionAPIOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    operations: Operations;
    locations: Locations;
    privateClouds: PrivateClouds;
    clusters: Clusters;
    datastores: Datastores;
    hcxEnterpriseSites: HcxEnterpriseSites;
    authorizations: Authorizations;
    globalReachConnections: GlobalReachConnections;
    workloadNetworks: WorkloadNetworks;
    cloudLinks: CloudLinks;
    addons: Addons;
    virtualMachines: VirtualMachines;
    placementPolicies: PlacementPolicies;
    scriptPackages: ScriptPackages;
    scriptCmdlets: ScriptCmdlets;
    scriptExecutions: ScriptExecutions;
}

/** Optional parameters. */
export declare interface AzureVMwareSolutionAPIOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** An ExpressRoute Circuit */
export declare interface Circuit {
    /**
     * CIDR of primary subnet
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly primarySubnet?: string;
    /**
     * CIDR of secondary subnet
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly secondarySubnet?: string;
    /**
     * Identifier of the ExpressRoute Circuit (Microsoft Colo only)
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly expressRouteID?: string;
    /**
     * ExpressRoute Circuit private peering identifier
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly expressRoutePrivatePeeringID?: string;
}

/** A cloud link resource */
export declare interface CloudLink extends Resource {
    /**
     * The state of the cloud link.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: CloudLinkStatus;
    /** Identifier of the other private cloud participating in the link. */
    linkedCloud?: string;
}

/** A paged list of cloud links */
export declare interface CloudLinkList {
    /**
     * The items on a page
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: CloudLink[];
    /**
     * URL to get the next page if any
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a CloudLinks. */
export declare interface CloudLinks {
    /**
     * List cloud link in a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param options The options parameters.
     */
    list(resourceGroupName: string, privateCloudName: string, options?: CloudLinksListOptionalParams): PagedAsyncIterableIterator<CloudLink>;
    /**
     * Get an cloud link by name in a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param cloudLinkName Name of the cloud link resource
     * @param options The options parameters.
     */
    get(resourceGroupName: string, privateCloudName: string, cloudLinkName: string, options?: CloudLinksGetOptionalParams): Promise<CloudLinksGetResponse>;
    /**
     * Create or update a cloud link in a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName The name of the private cloud.
     * @param cloudLinkName Name of the cloud link resource
     * @param cloudLink A cloud link in the private cloud
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, privateCloudName: string, cloudLinkName: string, cloudLink: CloudLink, options?: CloudLinksCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<CloudLinksCreateOrUpdateResponse>, CloudLinksCreateOrUpdateResponse>>;
    /**
     * Create or update a cloud link in a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName The name of the private cloud.
     * @param cloudLinkName Name of the cloud link resource
     * @param cloudLink A cloud link in the private cloud
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, privateCloudName: string, cloudLinkName: string, cloudLink: CloudLink, options?: CloudLinksCreateOrUpdateOptionalParams): Promise<CloudLinksCreateOrUpdateResponse>;
    /**
     * Delete a cloud link in a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param cloudLinkName Name of the cloud link resource
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, privateCloudName: string, cloudLinkName: string, options?: CloudLinksDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Delete a cloud link in a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param cloudLinkName Name of the cloud link resource
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, privateCloudName: string, cloudLinkName: string, options?: CloudLinksDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface CloudLinksCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type CloudLinksCreateOrUpdateResponse = CloudLink;

/** Optional parameters. */
export declare interface CloudLinksDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface CloudLinksGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type CloudLinksGetResponse = CloudLink;

/** Optional parameters. */
export declare interface CloudLinksListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type CloudLinksListNextResponse = CloudLinkList;

/** Optional parameters. */
export declare interface CloudLinksListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type CloudLinksListResponse = CloudLinkList;

/**
 * Defines values for CloudLinkStatus. \
 * {@link KnownCloudLinkStatus} can be used interchangeably with CloudLinkStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Active** \
 * **Building** \
 * **Deleting** \
 * **Failed** \
 * **Disconnected**
 */
export declare type CloudLinkStatus = string;

/** A cluster resource */
export declare interface Cluster extends Resource {
    /** The cluster SKU */
    sku: Sku;
    /** The cluster size */
    clusterSize?: number;
    /**
     * The state of the cluster provisioning
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ClusterProvisioningState;
    /**
     * The identity
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly clusterId?: number;
    /** The hosts */
    hosts?: string[];
}

/** A paged list of clusters */
export declare interface ClusterList {
    /**
     * The items on a page
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: Cluster[];
    /**
     * URL to get the next page if any
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** The properties of a cluster */
export declare interface ClusterProperties extends CommonClusterProperties {
}

/**
 * Defines values for ClusterProvisioningState. \
 * {@link KnownClusterProvisioningState} can be used interchangeably with ClusterProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Cancelled** \
 * **Deleting** \
 * **Updating** \
 * **Canceled**
 */
export declare type ClusterProvisioningState = string;

/** Interface representing a Clusters. */
export declare interface Clusters {
    /**
     * List clusters in a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param options The options parameters.
     */
    list(resourceGroupName: string, privateCloudName: string, options?: ClustersListOptionalParams): PagedAsyncIterableIterator<Cluster>;
    /**
     * Get a cluster by name in a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param clusterName Name of the cluster in the private cloud
     * @param options The options parameters.
     */
    get(resourceGroupName: string, privateCloudName: string, clusterName: string, options?: ClustersGetOptionalParams): Promise<ClustersGetResponse>;
    /**
     * Create or update a cluster in a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName The name of the private cloud.
     * @param clusterName Name of the cluster in the private cloud
     * @param cluster A cluster in the private cloud
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, privateCloudName: string, clusterName: string, cluster: Cluster, options?: ClustersCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<ClustersCreateOrUpdateResponse>, ClustersCreateOrUpdateResponse>>;
    /**
     * Create or update a cluster in a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName The name of the private cloud.
     * @param clusterName Name of the cluster in the private cloud
     * @param cluster A cluster in the private cloud
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, privateCloudName: string, clusterName: string, cluster: Cluster, options?: ClustersCreateOrUpdateOptionalParams): Promise<ClustersCreateOrUpdateResponse>;
    /**
     * Update a cluster in a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param clusterName Name of the cluster in the private cloud
     * @param clusterUpdate The cluster properties to be updated
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, privateCloudName: string, clusterName: string, clusterUpdate: ClusterUpdate, options?: ClustersUpdateOptionalParams): Promise<SimplePollerLike<OperationState<ClustersUpdateResponse>, ClustersUpdateResponse>>;
    /**
     * Update a cluster in a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param clusterName Name of the cluster in the private cloud
     * @param clusterUpdate The cluster properties to be updated
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, privateCloudName: string, clusterName: string, clusterUpdate: ClusterUpdate, options?: ClustersUpdateOptionalParams): Promise<ClustersUpdateResponse>;
    /**
     * Delete a cluster in a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param clusterName Name of the cluster in the private cloud
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, privateCloudName: string, clusterName: string, options?: ClustersDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Delete a cluster in a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param clusterName Name of the cluster in the private cloud
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, privateCloudName: string, clusterName: string, options?: ClustersDeleteOptionalParams): Promise<void>;
    /**
     * List hosts by zone in a cluster
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param clusterName Name of the cluster in the private cloud
     * @param options The options parameters.
     */
    listZones(resourceGroupName: string, privateCloudName: string, clusterName: string, options?: ClustersListZonesOptionalParams): Promise<ClustersListZonesResponse>;
}

/** Optional parameters. */
export declare interface ClustersCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type ClustersCreateOrUpdateResponse = Cluster;

/** Optional parameters. */
export declare interface ClustersDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface ClustersGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ClustersGetResponse = Cluster;

/** Optional parameters. */
export declare interface ClustersListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type ClustersListNextResponse = ClusterList;

/** Optional parameters. */
export declare interface ClustersListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type ClustersListResponse = ClusterList;

/** Optional parameters. */
export declare interface ClustersListZonesOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listZones operation. */
export declare type ClustersListZonesResponse = ClusterZoneList;

/** Optional parameters. */
export declare interface ClustersUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type ClustersUpdateResponse = Cluster;

/** An update of a cluster resource */
export declare interface ClusterUpdate {
    /** The cluster size */
    clusterSize?: number;
    /** The hosts */
    hosts?: string[];
}

/** Zone and associated hosts info */
export declare interface ClusterZone {
    /**
     * List of hosts belonging to the availability zone in a cluster
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly hosts?: string[];
    /**
     * Availability zone identifier
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly zone?: string;
}

/** List of all zones and associated hosts for a cluster */
export declare interface ClusterZoneList {
    /** Zone and associated hosts info */
    zones?: ClusterZone[];
}

/** The common properties of a cluster */
export declare interface CommonClusterProperties {
    /** The cluster size */
    clusterSize?: number;
    /**
     * The state of the cluster provisioning
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ClusterProvisioningState;
    /**
     * The identity
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly clusterId?: number;
    /** The hosts */
    hosts?: string[];
}

/** A datastore resource */
export declare interface Datastore extends Resource {
    /**
     * The state of the datastore provisioning
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: DatastoreProvisioningState;
    /** An Azure NetApp Files volume */
    netAppVolume?: NetAppVolume;
    /** An iSCSI volume */
    diskPoolVolume?: DiskPoolVolume;
    /**
     * The operational status of the datastore
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: DatastoreStatus;
}

/** A paged list of datastores */
export declare interface DatastoreList {
    /**
     * The items on a page
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: Datastore[];
    /**
     * URL to get the next page if any
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/**
 * Defines values for DatastoreProvisioningState. \
 * {@link KnownDatastoreProvisioningState} can be used interchangeably with DatastoreProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Cancelled** \
 * **Pending** \
 * **Creating** \
 * **Updating** \
 * **Deleting** \
 * **Canceled**
 */
export declare type DatastoreProvisioningState = string;

/** Interface representing a Datastores. */
export declare interface Datastores {
    /**
     * List datastores in a private cloud cluster
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param clusterName Name of the cluster in the private cloud
     * @param options The options parameters.
     */
    list(resourceGroupName: string, privateCloudName: string, clusterName: string, options?: DatastoresListOptionalParams): PagedAsyncIterableIterator<Datastore>;
    /**
     * Get a datastore in a private cloud cluster
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param clusterName Name of the cluster in the private cloud
     * @param datastoreName Name of the datastore in the private cloud cluster
     * @param options The options parameters.
     */
    get(resourceGroupName: string, privateCloudName: string, clusterName: string, datastoreName: string, options?: DatastoresGetOptionalParams): Promise<DatastoresGetResponse>;
    /**
     * Create or update a datastore in a private cloud cluster
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param clusterName Name of the cluster in the private cloud
     * @param datastoreName Name of the datastore in the private cloud cluster
     * @param datastore A datastore in a private cloud cluster
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, privateCloudName: string, clusterName: string, datastoreName: string, datastore: Datastore, options?: DatastoresCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<DatastoresCreateOrUpdateResponse>, DatastoresCreateOrUpdateResponse>>;
    /**
     * Create or update a datastore in a private cloud cluster
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param clusterName Name of the cluster in the private cloud
     * @param datastoreName Name of the datastore in the private cloud cluster
     * @param datastore A datastore in a private cloud cluster
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, privateCloudName: string, clusterName: string, datastoreName: string, datastore: Datastore, options?: DatastoresCreateOrUpdateOptionalParams): Promise<DatastoresCreateOrUpdateResponse>;
    /**
     * Delete a datastore in a private cloud cluster
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param clusterName Name of the cluster in the private cloud
     * @param datastoreName Name of the datastore in the private cloud cluster
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, privateCloudName: string, clusterName: string, datastoreName: string, options?: DatastoresDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Delete a datastore in a private cloud cluster
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param clusterName Name of the cluster in the private cloud
     * @param datastoreName Name of the datastore in the private cloud cluster
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, privateCloudName: string, clusterName: string, datastoreName: string, options?: DatastoresDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface DatastoresCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type DatastoresCreateOrUpdateResponse = Datastore;

/** Optional parameters. */
export declare interface DatastoresDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface DatastoresGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type DatastoresGetResponse = Datastore;

/** Optional parameters. */
export declare interface DatastoresListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type DatastoresListNextResponse = DatastoreList;

/** Optional parameters. */
export declare interface DatastoresListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type DatastoresListResponse = DatastoreList;

/**
 * Defines values for DatastoreStatus. \
 * {@link KnownDatastoreStatus} can be used interchangeably with DatastoreStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **Accessible** \
 * **Inaccessible** \
 * **Attached** \
 * **Detached** \
 * **LostCommunication** \
 * **DeadOrError**
 */
export declare type DatastoreStatus = string;

/**
 * Defines values for DhcpTypeEnum. \
 * {@link KnownDhcpTypeEnum} can be used interchangeably with DhcpTypeEnum,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SERVER** \
 * **RELAY**
 */
export declare type DhcpTypeEnum = string;

/** An iSCSI volume from Microsoft.StoragePool provider */
export declare interface DiskPoolVolume {
    /** Azure resource ID of the iSCSI target */
    targetId: string;
    /** Name of the LUN to be used for datastore */
    lunName: string;
    /** Mode that describes whether the LUN has to be mounted as a datastore or attached as a LUN */
    mountOption?: MountOptionEnum;
    /**
     * Device path
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly path?: string;
}

/**
 * Defines values for DnsServiceLogLevelEnum. \
 * {@link KnownDnsServiceLogLevelEnum} can be used interchangeably with DnsServiceLogLevelEnum,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **DEBUG** \
 * **INFO** \
 * **WARNING** \
 * **ERROR** \
 * **FATAL**
 */
export declare type DnsServiceLogLevelEnum = string;

/**
 * Defines values for DnsServiceStatusEnum. \
 * {@link KnownDnsServiceStatusEnum} can be used interchangeably with DnsServiceStatusEnum,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SUCCESS** \
 * **FAILURE**
 */
export declare type DnsServiceStatusEnum = string;

/** The properties of customer managed encryption key */
export declare interface Encryption {
    /** Status of customer managed encryption key */
    status?: EncryptionState;
    /** The key vault where the encryption key is stored */
    keyVaultProperties?: EncryptionKeyVaultProperties;
}

/**
 * Defines values for EncryptionKeyStatus. \
 * {@link KnownEncryptionKeyStatus} can be used interchangeably with EncryptionKeyStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Connected** \
 * **AccessDenied**
 */
export declare type EncryptionKeyStatus = string;

/** An Encryption Key */
export declare interface EncryptionKeyVaultProperties {
    /** The name of the key. */
    keyName?: string;
    /** The version of the key. */
    keyVersion?: string;
    /**
     * The auto-detected version of the key if versionType is auto-detected.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly autoDetectedKeyVersion?: string;
    /** The URL of the vault. */
    keyVaultUrl?: string;
    /**
     * The state of key provided
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly keyState?: EncryptionKeyStatus;
    /**
     * Property of the key if user provided or auto detected
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly versionType?: EncryptionVersionType;
}

/**
 * Defines values for EncryptionState. \
 * {@link KnownEncryptionState} can be used interchangeably with EncryptionState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export declare type EncryptionState = string;

/**
 * Defines values for EncryptionVersionType. \
 * {@link KnownEncryptionVersionType} can be used interchangeably with EncryptionVersionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Fixed** \
 * **AutoDetected**
 */
export declare type EncryptionVersionType = string;

/** Endpoint addresses */
export declare interface Endpoints {
    /**
     * Endpoint for the NSX-T Data Center manager
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nsxtManager?: string;
    /**
     * Endpoint for Virtual Center Server Appliance
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly vcsa?: string;
    /**
     * Endpoint for the HCX Cloud Manager
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly hcxCloudManager?: string;
}

/** The resource management error additional info. */
export declare interface ErrorAdditionalInfo {
    /**
     * The additional info type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The additional info.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly info?: Record<string, unknown>;
}

/** The error detail. */
export declare interface ErrorDetail {
    /**
     * The error code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * The error message.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
    /**
     * The error target.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly target?: string;
    /**
     * The error details.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly details?: ErrorDetail[];
    /**
     * The error additional info.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export declare interface ErrorResponse {
    /** The error object. */
    error?: ErrorDetail;
}

/** ExpressRoute Circuit Authorization */
export declare interface ExpressRouteAuthorization extends Resource {
    /**
     * The state of the  ExpressRoute Circuit Authorization provisioning
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ExpressRouteAuthorizationProvisioningState;
    /**
     * The ID of the ExpressRoute Circuit Authorization
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly expressRouteAuthorizationId?: string;
    /**
     * The key of the ExpressRoute Circuit Authorization
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly expressRouteAuthorizationKey?: string;
    /** The ID of the ExpressRoute Circuit */
    expressRouteId?: string;
}

/** A paged list of ExpressRoute Circuit Authorizations */
export declare interface ExpressRouteAuthorizationList {
    /**
     * The items on a page
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: ExpressRouteAuthorization[];
    /**
     * URL to get the next page if any
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/**
 * Defines values for ExpressRouteAuthorizationProvisioningState. \
 * {@link KnownExpressRouteAuthorizationProvisioningState} can be used interchangeably with ExpressRouteAuthorizationProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Updating** \
 * **Canceled**
 */
export declare type ExpressRouteAuthorizationProvisioningState = string;

/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/** A global reach connection resource */
export declare interface GlobalReachConnection extends Resource {
    /**
     * The state of the  ExpressRoute Circuit Authorization provisioning
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: GlobalReachConnectionProvisioningState;
    /**
     * The network used for global reach carved out from the original network block provided for the private cloud
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly addressPrefix?: string;
    /** Authorization key from the peer express route used for the global reach connection */
    authorizationKey?: string;
    /**
     * The connection status of the global reach connection
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly circuitConnectionStatus?: GlobalReachConnectionStatus;
    /** Identifier of the ExpressRoute Circuit to peer with in the global reach connection */
    peerExpressRouteCircuit?: string;
    /** The ID of the Private Cloud's ExpressRoute Circuit that is participating in the global reach connection */
    expressRouteId?: string;
}

/** A paged list of global reach connections */
export declare interface GlobalReachConnectionList {
    /**
     * The items on a page
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: GlobalReachConnection[];
    /**
     * URL to get the next page if any
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/**
 * Defines values for GlobalReachConnectionProvisioningState. \
 * {@link KnownGlobalReachConnectionProvisioningState} can be used interchangeably with GlobalReachConnectionProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Updating** \
 * **Canceled**
 */
export declare type GlobalReachConnectionProvisioningState = string;

/** Interface representing a GlobalReachConnections. */
export declare interface GlobalReachConnections {
    /**
     * List global reach connections in a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param options The options parameters.
     */
    list(resourceGroupName: string, privateCloudName: string, options?: GlobalReachConnectionsListOptionalParams): PagedAsyncIterableIterator<GlobalReachConnection>;
    /**
     * Get a global reach connection by name in a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param globalReachConnectionName Name of the global reach connection in the private cloud
     * @param options The options parameters.
     */
    get(resourceGroupName: string, privateCloudName: string, globalReachConnectionName: string, options?: GlobalReachConnectionsGetOptionalParams): Promise<GlobalReachConnectionsGetResponse>;
    /**
     * Create or update a global reach connection in a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName The name of the private cloud.
     * @param globalReachConnectionName Name of the global reach connection in the private cloud
     * @param globalReachConnection A global reach connection in the private cloud
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, privateCloudName: string, globalReachConnectionName: string, globalReachConnection: GlobalReachConnection, options?: GlobalReachConnectionsCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<GlobalReachConnectionsCreateOrUpdateResponse>, GlobalReachConnectionsCreateOrUpdateResponse>>;
    /**
     * Create or update a global reach connection in a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName The name of the private cloud.
     * @param globalReachConnectionName Name of the global reach connection in the private cloud
     * @param globalReachConnection A global reach connection in the private cloud
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, privateCloudName: string, globalReachConnectionName: string, globalReachConnection: GlobalReachConnection, options?: GlobalReachConnectionsCreateOrUpdateOptionalParams): Promise<GlobalReachConnectionsCreateOrUpdateResponse>;
    /**
     * Delete a global reach connection in a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param globalReachConnectionName Name of the global reach connection in the private cloud
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, privateCloudName: string, globalReachConnectionName: string, options?: GlobalReachConnectionsDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Delete a global reach connection in a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param globalReachConnectionName Name of the global reach connection in the private cloud
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, privateCloudName: string, globalReachConnectionName: string, options?: GlobalReachConnectionsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface GlobalReachConnectionsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type GlobalReachConnectionsCreateOrUpdateResponse = GlobalReachConnection;

/** Optional parameters. */
export declare interface GlobalReachConnectionsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface GlobalReachConnectionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type GlobalReachConnectionsGetResponse = GlobalReachConnection;

/** Optional parameters. */
export declare interface GlobalReachConnectionsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type GlobalReachConnectionsListNextResponse = GlobalReachConnectionList;

/** Optional parameters. */
export declare interface GlobalReachConnectionsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type GlobalReachConnectionsListResponse = GlobalReachConnectionList;

/**
 * Defines values for GlobalReachConnectionStatus. \
 * {@link KnownGlobalReachConnectionStatus} can be used interchangeably with GlobalReachConnectionStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Connected** \
 * **Connecting** \
 * **Disconnected**
 */
export declare type GlobalReachConnectionStatus = string;

/** An HCX Enterprise Site resource */
export declare interface HcxEnterpriseSite extends Resource {
    /**
     * The activation key
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly activationKey?: string;
    /**
     * The status of the HCX Enterprise Site
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: HcxEnterpriseSiteStatus;
}

/** A paged list of HCX Enterprise Sites */
export declare interface HcxEnterpriseSiteList {
    /**
     * The items on a page
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: HcxEnterpriseSite[];
    /**
     * URL to get the next page if any
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a HcxEnterpriseSites. */
export declare interface HcxEnterpriseSites {
    /**
     * List HCX on-premises key in a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param options The options parameters.
     */
    list(resourceGroupName: string, privateCloudName: string, options?: HcxEnterpriseSitesListOptionalParams): PagedAsyncIterableIterator<HcxEnterpriseSite>;
    /**
     * Get an HCX on-premises key by name in a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param hcxEnterpriseSiteName Name of the HCX Enterprise Site in the private cloud
     * @param options The options parameters.
     */
    get(resourceGroupName: string, privateCloudName: string, hcxEnterpriseSiteName: string, options?: HcxEnterpriseSitesGetOptionalParams): Promise<HcxEnterpriseSitesGetResponse>;
    /**
     * Create or update an activation key for on-premises HCX site
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName The name of the private cloud.
     * @param hcxEnterpriseSiteName Name of the HCX Enterprise Site in the private cloud
     * @param hcxEnterpriseSite The HCX Enterprise Site
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, privateCloudName: string, hcxEnterpriseSiteName: string, hcxEnterpriseSite: HcxEnterpriseSite, options?: HcxEnterpriseSitesCreateOrUpdateOptionalParams): Promise<HcxEnterpriseSitesCreateOrUpdateResponse>;
    /**
     * Delete HCX on-premises key in a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param hcxEnterpriseSiteName Name of the HCX Enterprise Site in the private cloud
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, privateCloudName: string, hcxEnterpriseSiteName: string, options?: HcxEnterpriseSitesDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface HcxEnterpriseSitesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type HcxEnterpriseSitesCreateOrUpdateResponse = HcxEnterpriseSite;

/** Optional parameters. */
export declare interface HcxEnterpriseSitesDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface HcxEnterpriseSitesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type HcxEnterpriseSitesGetResponse = HcxEnterpriseSite;

/** Optional parameters. */
export declare interface HcxEnterpriseSitesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type HcxEnterpriseSitesListNextResponse = HcxEnterpriseSiteList;

/** Optional parameters. */
export declare interface HcxEnterpriseSitesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type HcxEnterpriseSitesListResponse = HcxEnterpriseSiteList;

/**
 * Defines values for HcxEnterpriseSiteStatus. \
 * {@link KnownHcxEnterpriseSiteStatus} can be used interchangeably with HcxEnterpriseSiteStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Available** \
 * **Consumed** \
 * **Deactivated** \
 * **Deleted**
 */
export declare type HcxEnterpriseSiteStatus = string;

/** vCenter Single Sign On Identity Source */
export declare interface IdentitySource {
    /** The name of the identity source */
    name?: string;
    /** The domain's NetBIOS name */
    alias?: string;
    /** The domain's dns name */
    domain?: string;
    /** The base distinguished name for users */
    baseUserDN?: string;
    /** The base distinguished name for groups */
    baseGroupDN?: string;
    /** Primary server URL */
    primaryServer?: string;
    /** Secondary server URL */
    secondaryServer?: string;
    /** Protect LDAP communication using SSL certificate (LDAPS) */
    ssl?: SslEnum;
    /** The ID of an Active Directory user with a minimum of read-only access to Base DN for users and group */
    username?: string;
    /** The password of the Active Directory user with a minimum of read-only access to Base DN for users and groups. */
    password?: string;
}

/**
 * Defines values for InternetEnum. \
 * {@link KnownInternetEnum} can be used interchangeably with InternetEnum,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export declare type InternetEnum = string;

/** Known values of {@link AddonProvisioningState} that the service accepts. */
export declare enum KnownAddonProvisioningState {
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Cancelled */
    Cancelled = "Cancelled",
    /** Building */
    Building = "Building",
    /** Deleting */
    Deleting = "Deleting",
    /** Updating */
    Updating = "Updating",
    /** Canceled */
    Canceled = "Canceled"
}

/** Known values of {@link AddonType} that the service accepts. */
export declare enum KnownAddonType {
    /** SRM */
    SRM = "SRM",
    /** VR */
    VR = "VR",
    /** HCX */
    HCX = "HCX",
    /** Arc */
    Arc = "Arc"
}

/** Known values of {@link AffinityStrength} that the service accepts. */
export declare enum KnownAffinityStrength {
    /** Should */
    Should = "Should",
    /** Must */
    Must = "Must"
}

/** Known values of {@link AffinityType} that the service accepts. */
export declare enum KnownAffinityType {
    /** Affinity */
    Affinity = "Affinity",
    /** AntiAffinity */
    AntiAffinity = "AntiAffinity"
}

/** Known values of {@link AvailabilityStrategy} that the service accepts. */
export declare enum KnownAvailabilityStrategy {
    /** SingleZone */
    SingleZone = "SingleZone",
    /** DualZone */
    DualZone = "DualZone"
}

/** Known values of {@link AzureHybridBenefitType} that the service accepts. */
export declare enum KnownAzureHybridBenefitType {
    /** SqlHost */
    SqlHost = "SqlHost",
    /** None */
    None = "None"
}

/** Known values of {@link CloudLinkStatus} that the service accepts. */
export declare enum KnownCloudLinkStatus {
    /** Active */
    Active = "Active",
    /** Building */
    Building = "Building",
    /** Deleting */
    Deleting = "Deleting",
    /** Failed */
    Failed = "Failed",
    /** Disconnected */
    Disconnected = "Disconnected"
}

/** Known values of {@link ClusterProvisioningState} that the service accepts. */
export declare enum KnownClusterProvisioningState {
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Cancelled */
    Cancelled = "Cancelled",
    /** Deleting */
    Deleting = "Deleting",
    /** Updating */
    Updating = "Updating",
    /** Canceled */
    Canceled = "Canceled"
}

/** Known values of {@link DatastoreProvisioningState} that the service accepts. */
export declare enum KnownDatastoreProvisioningState {
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Cancelled */
    Cancelled = "Cancelled",
    /** Pending */
    Pending = "Pending",
    /** Creating */
    Creating = "Creating",
    /** Updating */
    Updating = "Updating",
    /** Deleting */
    Deleting = "Deleting",
    /** Canceled */
    Canceled = "Canceled"
}

/** Known values of {@link DatastoreStatus} that the service accepts. */
export declare enum KnownDatastoreStatus {
    /** Unknown */
    Unknown = "Unknown",
    /** Accessible */
    Accessible = "Accessible",
    /** Inaccessible */
    Inaccessible = "Inaccessible",
    /** Attached */
    Attached = "Attached",
    /** Detached */
    Detached = "Detached",
    /** LostCommunication */
    LostCommunication = "LostCommunication",
    /** DeadOrError */
    DeadOrError = "DeadOrError"
}

/** Known values of {@link DhcpTypeEnum} that the service accepts. */
export declare enum KnownDhcpTypeEnum {
    /** Server */
    Server = "SERVER",
    /** Relay */
    Relay = "RELAY"
}

/** Known values of {@link DnsServiceLogLevelEnum} that the service accepts. */
export declare enum KnownDnsServiceLogLevelEnum {
    /** Debug */
    Debug = "DEBUG",
    /** Info */
    Info = "INFO",
    /** Warning */
    Warning = "WARNING",
    /** Error */
    Error = "ERROR",
    /** Fatal */
    Fatal = "FATAL"
}

/** Known values of {@link DnsServiceStatusEnum} that the service accepts. */
export declare enum KnownDnsServiceStatusEnum {
    /** Success */
    Success = "SUCCESS",
    /** Failure */
    Failure = "FAILURE"
}

/** Known values of {@link EncryptionKeyStatus} that the service accepts. */
export declare enum KnownEncryptionKeyStatus {
    /** Connected */
    Connected = "Connected",
    /** AccessDenied */
    AccessDenied = "AccessDenied"
}

/** Known values of {@link EncryptionState} that the service accepts. */
export declare enum KnownEncryptionState {
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled"
}

/** Known values of {@link EncryptionVersionType} that the service accepts. */
export declare enum KnownEncryptionVersionType {
    /** Fixed */
    Fixed = "Fixed",
    /** AutoDetected */
    AutoDetected = "AutoDetected"
}

/** Known values of {@link ExpressRouteAuthorizationProvisioningState} that the service accepts. */
export declare enum KnownExpressRouteAuthorizationProvisioningState {
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Updating */
    Updating = "Updating",
    /** Canceled */
    Canceled = "Canceled"
}

/** Known values of {@link GlobalReachConnectionProvisioningState} that the service accepts. */
export declare enum KnownGlobalReachConnectionProvisioningState {
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Updating */
    Updating = "Updating",
    /** Canceled */
    Canceled = "Canceled"
}

/** Known values of {@link GlobalReachConnectionStatus} that the service accepts. */
export declare enum KnownGlobalReachConnectionStatus {
    /** Connected */
    Connected = "Connected",
    /** Connecting */
    Connecting = "Connecting",
    /** Disconnected */
    Disconnected = "Disconnected"
}

/** Known values of {@link HcxEnterpriseSiteStatus} that the service accepts. */
export declare enum KnownHcxEnterpriseSiteStatus {
    /** Available */
    Available = "Available",
    /** Consumed */
    Consumed = "Consumed",
    /** Deactivated */
    Deactivated = "Deactivated",
    /** Deleted */
    Deleted = "Deleted"
}

/** Known values of {@link InternetEnum} that the service accepts. */
export declare enum KnownInternetEnum {
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled"
}

/** Known values of {@link MountOptionEnum} that the service accepts. */
export declare enum KnownMountOptionEnum {
    /** Mount */
    Mount = "MOUNT",
    /** Attach */
    Attach = "ATTACH"
}

/** Known values of {@link NsxPublicIpQuotaRaisedEnum} that the service accepts. */
export declare enum KnownNsxPublicIpQuotaRaisedEnum {
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled"
}

/** Known values of {@link OptionalParamEnum} that the service accepts. */
export declare enum KnownOptionalParamEnum {
    /** Optional */
    Optional = "Optional",
    /** Required */
    Required = "Required"
}

/** Known values of {@link PlacementPolicyProvisioningState} that the service accepts. */
export declare enum KnownPlacementPolicyProvisioningState {
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Building */
    Building = "Building",
    /** Deleting */
    Deleting = "Deleting",
    /** Updating */
    Updating = "Updating",
    /** Canceled */
    Canceled = "Canceled"
}

/** Known values of {@link PlacementPolicyState} that the service accepts. */
export declare enum KnownPlacementPolicyState {
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled"
}

/** Known values of {@link PlacementPolicyType} that the service accepts. */
export declare enum KnownPlacementPolicyType {
    /** VmVm */
    VmVm = "VmVm",
    /** VmHost */
    VmHost = "VmHost"
}

/** Known values of {@link PortMirroringDirectionEnum} that the service accepts. */
export declare enum KnownPortMirroringDirectionEnum {
    /** Ingress */
    Ingress = "INGRESS",
    /** Egress */
    Egress = "EGRESS",
    /** Bidirectional */
    Bidirectional = "BIDIRECTIONAL"
}

/** Known values of {@link PortMirroringStatusEnum} that the service accepts. */
export declare enum KnownPortMirroringStatusEnum {
    /** Success */
    Success = "SUCCESS",
    /** Failure */
    Failure = "FAILURE"
}

/** Known values of {@link PrivateCloudProvisioningState} that the service accepts. */
export declare enum KnownPrivateCloudProvisioningState {
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Cancelled */
    Cancelled = "Cancelled",
    /** Pending */
    Pending = "Pending",
    /** Building */
    Building = "Building",
    /** Deleting */
    Deleting = "Deleting",
    /** Updating */
    Updating = "Updating",
    /** Canceled */
    Canceled = "Canceled"
}

/** Known values of {@link QuotaEnabled} that the service accepts. */
export declare enum KnownQuotaEnabled {
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled"
}

/** Known values of {@link ResourceIdentityType} that the service accepts. */
export declare enum KnownResourceIdentityType {
    /** SystemAssigned */
    SystemAssigned = "SystemAssigned",
    /** None */
    None = "None"
}

/** Known values of {@link ScriptExecutionParameterType} that the service accepts. */
export declare enum KnownScriptExecutionParameterType {
    /** Value */
    Value = "Value",
    /** SecureValue */
    SecureValue = "SecureValue",
    /** Credential */
    Credential = "Credential"
}

/** Known values of {@link ScriptExecutionProvisioningState} that the service accepts. */
export declare enum KnownScriptExecutionProvisioningState {
    /** Pending */
    Pending = "Pending",
    /** Running */
    Running = "Running",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Cancelling */
    Cancelling = "Cancelling",
    /** Cancelled */
    Cancelled = "Cancelled",
    /** Deleting */
    Deleting = "Deleting",
    /** Canceled */
    Canceled = "Canceled"
}

/** Known values of {@link ScriptOutputStreamType} that the service accepts. */
export declare enum KnownScriptOutputStreamType {
    /** Information */
    Information = "Information",
    /** Warning */
    Warning = "Warning",
    /** Output */
    Output = "Output",
    /** Error */
    Error = "Error"
}

/** Known values of {@link ScriptParameterTypes} that the service accepts. */
export declare enum KnownScriptParameterTypes {
    /** String */
    String = "String",
    /** SecureString */
    SecureString = "SecureString",
    /** Credential */
    Credential = "Credential",
    /** Int */
    Int = "Int",
    /** Bool */
    Bool = "Bool",
    /** Float */
    Float = "Float"
}

/** Known values of {@link SegmentStatusEnum} that the service accepts. */
export declare enum KnownSegmentStatusEnum {
    /** Success */
    Success = "SUCCESS",
    /** Failure */
    Failure = "FAILURE"
}

/** Known values of {@link SslEnum} that the service accepts. */
export declare enum KnownSslEnum {
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled"
}

/** Known values of {@link TrialStatus} that the service accepts. */
export declare enum KnownTrialStatus {
    /** TrialAvailable */
    TrialAvailable = "TrialAvailable",
    /** TrialUsed */
    TrialUsed = "TrialUsed",
    /** TrialDisabled */
    TrialDisabled = "TrialDisabled"
}

/** Known values of {@link VirtualMachineRestrictMovementState} that the service accepts. */
export declare enum KnownVirtualMachineRestrictMovementState {
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled"
}

/** Known values of {@link VisibilityParameterEnum} that the service accepts. */
export declare enum KnownVisibilityParameterEnum {
    /** Visible */
    Visible = "Visible",
    /** Hidden */
    Hidden = "Hidden"
}

/** Known values of {@link VMGroupStatusEnum} that the service accepts. */
export declare enum KnownVMGroupStatusEnum {
    /** Success */
    Success = "SUCCESS",
    /** Failure */
    Failure = "FAILURE"
}

/** Known values of {@link VMTypeEnum} that the service accepts. */
export declare enum KnownVMTypeEnum {
    /** Regular */
    Regular = "REGULAR",
    /** Edge */
    Edge = "EDGE",
    /** Service */
    Service = "SERVICE"
}

/** Known values of {@link WorkloadNetworkDhcpProvisioningState} that the service accepts. */
export declare enum KnownWorkloadNetworkDhcpProvisioningState {
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Building */
    Building = "Building",
    /** Deleting */
    Deleting = "Deleting",
    /** Updating */
    Updating = "Updating",
    /** Canceled */
    Canceled = "Canceled"
}

/** Known values of {@link WorkloadNetworkDnsServiceProvisioningState} that the service accepts. */
export declare enum KnownWorkloadNetworkDnsServiceProvisioningState {
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Building */
    Building = "Building",
    /** Deleting */
    Deleting = "Deleting",
    /** Updating */
    Updating = "Updating",
    /** Canceled */
    Canceled = "Canceled"
}

/** Known values of {@link WorkloadNetworkDnsZoneProvisioningState} that the service accepts. */
export declare enum KnownWorkloadNetworkDnsZoneProvisioningState {
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Building */
    Building = "Building",
    /** Deleting */
    Deleting = "Deleting",
    /** Updating */
    Updating = "Updating",
    /** Canceled */
    Canceled = "Canceled"
}

/** Known values of {@link WorkloadNetworkName} that the service accepts. */
export declare enum KnownWorkloadNetworkName {
    /** Default */
    Default = "default"
}

/** Known values of {@link WorkloadNetworkPortMirroringProvisioningState} that the service accepts. */
export declare enum KnownWorkloadNetworkPortMirroringProvisioningState {
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Building */
    Building = "Building",
    /** Deleting */
    Deleting = "Deleting",
    /** Updating */
    Updating = "Updating",
    /** Canceled */
    Canceled = "Canceled"
}

/** Known values of {@link WorkloadNetworkPublicIPProvisioningState} that the service accepts. */
export declare enum KnownWorkloadNetworkPublicIPProvisioningState {
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Building */
    Building = "Building",
    /** Deleting */
    Deleting = "Deleting",
    /** Updating */
    Updating = "Updating",
    /** Canceled */
    Canceled = "Canceled"
}

/** Known values of {@link WorkloadNetworkSegmentProvisioningState} that the service accepts. */
export declare enum KnownWorkloadNetworkSegmentProvisioningState {
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Building */
    Building = "Building",
    /** Deleting */
    Deleting = "Deleting",
    /** Updating */
    Updating = "Updating",
    /** Canceled */
    Canceled = "Canceled"
}

/** Known values of {@link WorkloadNetworkVMGroupProvisioningState} that the service accepts. */
export declare enum KnownWorkloadNetworkVMGroupProvisioningState {
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Building */
    Building = "Building",
    /** Deleting */
    Deleting = "Deleting",
    /** Updating */
    Updating = "Updating",
    /** Canceled */
    Canceled = "Canceled"
}

/** Interface representing a Locations. */
export declare interface Locations {
    /**
     * Return trial status for subscription by region
     * @param location Azure region
     * @param options The options parameters.
     */
    checkTrialAvailability(location: string, options?: LocationsCheckTrialAvailabilityOptionalParams): Promise<LocationsCheckTrialAvailabilityResponse>;
    /**
     * Return quota for subscription by region
     * @param location Azure region
     * @param options The options parameters.
     */
    checkQuotaAvailability(location: string, options?: LocationsCheckQuotaAvailabilityOptionalParams): Promise<LocationsCheckQuotaAvailabilityResponse>;
}

/** Optional parameters. */
export declare interface LocationsCheckQuotaAvailabilityOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the checkQuotaAvailability operation. */
export declare type LocationsCheckQuotaAvailabilityResponse = Quota;

/** Optional parameters. */
export declare interface LocationsCheckTrialAvailabilityOptionalParams extends coreClient.OperationOptions {
    /** The sku to check for trial availability */
    sku?: Sku;
}

/** Contains response data for the checkTrialAvailability operation. */
export declare type LocationsCheckTrialAvailabilityResponse = Trial;

/** Specifications of the Log for Azure Monitoring */
export declare interface LogSpecification {
    /** Name of the log */
    name?: string;
    /** Localized friendly display name of the log */
    displayName?: string;
    /** Blob duration of the log */
    blobDuration?: string;
}

/** The properties of a management cluster */
export declare interface ManagementCluster extends CommonClusterProperties {
}

/** Specifications of the Dimension of metrics */
export declare interface MetricDimension {
    /** Name of the dimension */
    name?: string;
    /** Localized friendly display name of the dimension */
    displayName?: string;
    /** Name of the dimension as it appears in MDM */
    internalName?: string;
    /** A boolean flag indicating whether this dimension should be included for the shoebox export scenario */
    toBeExportedForShoebox?: boolean;
}

/** Specifications of the Metrics for Azure Monitoring */
export declare interface MetricSpecification {
    /** Name of the metric */
    name?: string;
    /** Localized friendly display name of the metric */
    displayName?: string;
    /** Localized friendly description of the metric */
    displayDescription?: string;
    /** Unit that makes sense for the metric */
    unit?: string;
    /** Name of the metric category that the metric belongs to. A metric can only belong to a single category. */
    category?: string;
    /** Only provide one value for this field. Valid values: Average, Minimum, Maximum, Total, Count. */
    aggregationType?: string;
    /** Supported aggregation types */
    supportedAggregationTypes?: string[];
    /** Supported time grain types */
    supportedTimeGrainTypes?: string[];
    /** Optional. If set to true, then zero will be returned for time duration where no metric is emitted/published. */
    fillGapWithZero?: boolean;
    /** Dimensions of the metric */
    dimensions?: MetricDimension[];
    /** Whether or not the service is using regional MDM accounts. */
    enableRegionalMdmAccount?: string;
    /** The name of the MDM account. */
    sourceMdmAccount?: string;
    /** The name of the MDM namespace. */
    sourceMdmNamespace?: string;
}

/**
 * Defines values for MountOptionEnum. \
 * {@link KnownMountOptionEnum} can be used interchangeably with MountOptionEnum,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **MOUNT** \
 * **ATTACH**
 */
export declare type MountOptionEnum = string;

/** An Azure NetApp Files volume from Microsoft.NetApp provider */
export declare interface NetAppVolume {
    /** Azure resource ID of the NetApp volume */
    id: string;
}

/**
 * Defines values for NsxPublicIpQuotaRaisedEnum. \
 * {@link KnownNsxPublicIpQuotaRaisedEnum} can be used interchangeably with NsxPublicIpQuotaRaisedEnum,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export declare type NsxPublicIpQuotaRaisedEnum = string;

/** A REST API operation */
export declare interface Operation {
    /**
     * Name of the operation being performed on this object
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Contains the localized display information for this operation
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly display?: OperationDisplay;
    /** Gets or sets a value indicating whether the operation is a data action or not */
    isDataAction?: boolean;
    /** Origin of the operation */
    origin?: string;
    /** Properties of the operation */
    properties?: OperationProperties;
}

/** Contains the localized display information for this operation */
export declare interface OperationDisplay {
    /**
     * Localized friendly form of the resource provider name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provider?: string;
    /**
     * Localized friendly form of the resource type related to this operation
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resource?: string;
    /**
     * Localized friendly name for the operation
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly operation?: string;
    /**
     * Localized friendly description for the operation
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly description?: string;
}

/** Pageable list of operations */
export declare interface OperationList {
    /**
     * List of operations
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: Operation[];
    /**
     * URL to get the next page if any
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Extra Operation properties */
export declare interface OperationProperties {
    /** Service specifications of the operation */
    serviceSpecification?: ServiceSpecification;
}

/** Interface representing a Operations. */
export declare interface Operations {
    /**
     * Lists all of the available operations
     * @param options The options parameters.
     */
    list(options?: OperationsListOptionalParams): PagedAsyncIterableIterator<Operation>;
}

/** Optional parameters. */
export declare interface OperationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type OperationsListNextResponse = OperationList;

/** Optional parameters. */
export declare interface OperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OperationsListResponse = OperationList;

/**
 * Defines values for OptionalParamEnum. \
 * {@link KnownOptionalParamEnum} can be used interchangeably with OptionalParamEnum,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Optional** \
 * **Required**
 */
export declare type OptionalParamEnum = string;

/** Interface representing a PlacementPolicies. */
export declare interface PlacementPolicies {
    /**
     * List placement policies in a private cloud cluster
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param clusterName Name of the cluster in the private cloud
     * @param options The options parameters.
     */
    list(resourceGroupName: string, privateCloudName: string, clusterName: string, options?: PlacementPoliciesListOptionalParams): PagedAsyncIterableIterator<PlacementPolicy>;
    /**
     * Get a placement policy by name in a private cloud cluster
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param clusterName Name of the cluster in the private cloud
     * @param placementPolicyName Name of the VMware vSphere Distributed Resource Scheduler (DRS) placement
     *                            policy
     * @param options The options parameters.
     */
    get(resourceGroupName: string, privateCloudName: string, clusterName: string, placementPolicyName: string, options?: PlacementPoliciesGetOptionalParams): Promise<PlacementPoliciesGetResponse>;
    /**
     * Create or update a placement policy in a private cloud cluster
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param clusterName Name of the cluster in the private cloud
     * @param placementPolicyName Name of the VMware vSphere Distributed Resource Scheduler (DRS) placement
     *                            policy
     * @param placementPolicy A placement policy in the private cloud cluster
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, privateCloudName: string, clusterName: string, placementPolicyName: string, placementPolicy: PlacementPolicy, options?: PlacementPoliciesCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<PlacementPoliciesCreateOrUpdateResponse>, PlacementPoliciesCreateOrUpdateResponse>>;
    /**
     * Create or update a placement policy in a private cloud cluster
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param clusterName Name of the cluster in the private cloud
     * @param placementPolicyName Name of the VMware vSphere Distributed Resource Scheduler (DRS) placement
     *                            policy
     * @param placementPolicy A placement policy in the private cloud cluster
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, privateCloudName: string, clusterName: string, placementPolicyName: string, placementPolicy: PlacementPolicy, options?: PlacementPoliciesCreateOrUpdateOptionalParams): Promise<PlacementPoliciesCreateOrUpdateResponse>;
    /**
     * Update a placement policy in a private cloud cluster
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param clusterName Name of the cluster in the private cloud
     * @param placementPolicyName Name of the VMware vSphere Distributed Resource Scheduler (DRS) placement
     *                            policy
     * @param placementPolicyUpdate The placement policy properties that may be updated
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, privateCloudName: string, clusterName: string, placementPolicyName: string, placementPolicyUpdate: PlacementPolicyUpdate, options?: PlacementPoliciesUpdateOptionalParams): Promise<SimplePollerLike<OperationState<PlacementPoliciesUpdateResponse>, PlacementPoliciesUpdateResponse>>;
    /**
     * Update a placement policy in a private cloud cluster
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param clusterName Name of the cluster in the private cloud
     * @param placementPolicyName Name of the VMware vSphere Distributed Resource Scheduler (DRS) placement
     *                            policy
     * @param placementPolicyUpdate The placement policy properties that may be updated
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, privateCloudName: string, clusterName: string, placementPolicyName: string, placementPolicyUpdate: PlacementPolicyUpdate, options?: PlacementPoliciesUpdateOptionalParams): Promise<PlacementPoliciesUpdateResponse>;
    /**
     * Delete a placement policy in a private cloud cluster
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param clusterName Name of the cluster in the private cloud
     * @param placementPolicyName Name of the VMware vSphere Distributed Resource Scheduler (DRS) placement
     *                            policy
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, privateCloudName: string, clusterName: string, placementPolicyName: string, options?: PlacementPoliciesDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Delete a placement policy in a private cloud cluster
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param clusterName Name of the cluster in the private cloud
     * @param placementPolicyName Name of the VMware vSphere Distributed Resource Scheduler (DRS) placement
     *                            policy
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, privateCloudName: string, clusterName: string, placementPolicyName: string, options?: PlacementPoliciesDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface PlacementPoliciesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type PlacementPoliciesCreateOrUpdateResponse = PlacementPolicy;

/** Optional parameters. */
export declare interface PlacementPoliciesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface PlacementPoliciesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type PlacementPoliciesGetResponse = PlacementPolicy;

/** Represents list of placement policies */
export declare interface PlacementPoliciesList {
    /**
     * The items on the page
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: PlacementPolicy[];
    /**
     * URL to get the next page if any
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Optional parameters. */
export declare interface PlacementPoliciesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type PlacementPoliciesListNextResponse = PlacementPoliciesList;

/** Optional parameters. */
export declare interface PlacementPoliciesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type PlacementPoliciesListResponse = PlacementPoliciesList;

/** Optional parameters. */
export declare interface PlacementPoliciesUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type PlacementPoliciesUpdateResponse = PlacementPolicy;

/** A vSphere Distributed Resource Scheduler (DRS) placement policy */
export declare interface PlacementPolicy extends Resource {
    /** placement policy properties */
    properties?: PlacementPolicyPropertiesUnion;
}

/** Abstract placement policy properties */
export declare interface PlacementPolicyProperties {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "VmVm" | "VmHost";
    /** Whether the placement policy is enabled or disabled */
    state?: PlacementPolicyState;
    /** Display name of the placement policy */
    displayName?: string;
    /**
     * The provisioning state
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: PlacementPolicyProvisioningState;
}

export declare type PlacementPolicyPropertiesUnion = PlacementPolicyProperties | VmPlacementPolicyProperties | VmHostPlacementPolicyProperties;

/**
 * Defines values for PlacementPolicyProvisioningState. \
 * {@link KnownPlacementPolicyProvisioningState} can be used interchangeably with PlacementPolicyProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Building** \
 * **Deleting** \
 * **Updating** \
 * **Canceled**
 */
export declare type PlacementPolicyProvisioningState = string;

/**
 * Defines values for PlacementPolicyState. \
 * {@link KnownPlacementPolicyState} can be used interchangeably with PlacementPolicyState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export declare type PlacementPolicyState = string;

/**
 * Defines values for PlacementPolicyType. \
 * {@link KnownPlacementPolicyType} can be used interchangeably with PlacementPolicyType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **VmVm** \
 * **VmHost**
 */
export declare type PlacementPolicyType = string;

/** An update of a DRS placement policy resource */
export declare interface PlacementPolicyUpdate {
    /** Whether the placement policy is enabled or disabled */
    state?: PlacementPolicyState;
    /** Virtual machine members list */
    vmMembers?: string[];
    /** Host members list */
    hostMembers?: string[];
    /** vm-host placement policy affinity strength (should/must) */
    affinityStrength?: AffinityStrength;
    /** placement policy azure hybrid benefit opt-in type */
    azureHybridBenefitType?: AzureHybridBenefitType;
}

/**
 * Defines values for PortMirroringDirectionEnum. \
 * {@link KnownPortMirroringDirectionEnum} can be used interchangeably with PortMirroringDirectionEnum,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **INGRESS** \
 * **EGRESS** \
 * **BIDIRECTIONAL**
 */
export declare type PortMirroringDirectionEnum = string;

/**
 * Defines values for PortMirroringStatusEnum. \
 * {@link KnownPortMirroringStatusEnum} can be used interchangeably with PortMirroringStatusEnum,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SUCCESS** \
 * **FAILURE**
 */
export declare type PortMirroringStatusEnum = string;

/** A private cloud resource */
export declare interface PrivateCloud extends TrackedResource {
    /** The private cloud SKU */
    sku: Sku;
    /** The identity of the private cloud, if configured. */
    identity?: PrivateCloudIdentity;
    /** The default cluster used for management */
    managementCluster?: ManagementCluster;
    /** Connectivity to internet is enabled or disabled */
    internet?: InternetEnum;
    /** vCenter Single Sign On Identity Sources */
    identitySources?: IdentitySource[];
    /** Properties describing how the cloud is distributed across availability zones */
    availability?: AvailabilityProperties;
    /** Customer managed key encryption, can be enabled or disabled */
    encryption?: Encryption;
    /** Array of additional networks noncontiguous with networkBlock. Networks must be unique and non-overlapping across VNet in your subscription, on-premise, and this privateCloud networkBlock attribute. Make sure the CIDR format conforms to (A.B.C.D/X). */
    extendedNetworkBlocks?: string[];
    /**
     * The provisioning state
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: PrivateCloudProvisioningState;
    /** An ExpressRoute Circuit */
    circuit?: Circuit;
    /**
     * The endpoints
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly endpoints?: Endpoints;
    /** The block of addresses should be unique across VNet in your subscription as well as on-premise. Make sure the CIDR format is conformed to (A.B.C.D/X) where A,B,C,D are between 0 and 255, and X is between 0 and 22 */
    networkBlock?: string;
    /**
     * Network used to access vCenter Server and NSX-T Manager
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly managementNetwork?: string;
    /**
     * Used for virtual machine cold migration, cloning, and snapshot migration
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningNetwork?: string;
    /**
     * Used for live migration of virtual machines
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly vmotionNetwork?: string;
    /** Optionally, set the vCenter admin password when the private cloud is created */
    vcenterPassword?: string;
    /** Optionally, set the NSX-T Manager password when the private cloud is created */
    nsxtPassword?: string;
    /**
     * Thumbprint of the vCenter Server SSL certificate
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly vcenterCertificateThumbprint?: string;
    /**
     * Thumbprint of the NSX-T Manager SSL certificate
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nsxtCertificateThumbprint?: string;
    /**
     * Array of cloud link IDs from other clouds that connect to this one
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly externalCloudLinks?: string[];
    /** A secondary expressRoute circuit from a separate AZ. Only present in a stretched private cloud */
    secondaryCircuit?: Circuit;
    /**
     * Flag to indicate whether the private cloud has the quota for provisioned NSX Public IP count raised from 64 to 1024
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nsxPublicIpQuotaRaised?: NsxPublicIpQuotaRaisedEnum;
}

/** Identity for the virtual machine. */
export declare interface PrivateCloudIdentity {
    /**
     * The principal ID of private cloud identity. This property will only be provided for a system assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
    /**
     * The tenant ID associated with the private cloud. This property will only be provided for a system assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
    /** The type of identity used for the private cloud. The type 'SystemAssigned' refers to an implicitly created identity. The type 'None' will remove any identities from the Private Cloud. */
    type?: ResourceIdentityType;
}

/** A paged list of private clouds */
export declare interface PrivateCloudList {
    /**
     * The items on the page
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: PrivateCloud[];
    /**
     * URL to get the next page if any
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** The properties of a private cloud resource */
export declare interface PrivateCloudProperties extends PrivateCloudUpdateProperties {
    /**
     * The provisioning state
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: PrivateCloudProvisioningState;
    /** An ExpressRoute Circuit */
    circuit?: Circuit;
    /**
     * The endpoints
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly endpoints?: Endpoints;
    /** The block of addresses should be unique across VNet in your subscription as well as on-premise. Make sure the CIDR format is conformed to (A.B.C.D/X) where A,B,C,D are between 0 and 255, and X is between 0 and 22 */
    networkBlock: string;
    /**
     * Network used to access vCenter Server and NSX-T Manager
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly managementNetwork?: string;
    /**
     * Used for virtual machine cold migration, cloning, and snapshot migration
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningNetwork?: string;
    /**
     * Used for live migration of virtual machines
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly vmotionNetwork?: string;
    /** Optionally, set the vCenter admin password when the private cloud is created */
    vcenterPassword?: string;
    /** Optionally, set the NSX-T Manager password when the private cloud is created */
    nsxtPassword?: string;
    /**
     * Thumbprint of the vCenter Server SSL certificate
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly vcenterCertificateThumbprint?: string;
    /**
     * Thumbprint of the NSX-T Manager SSL certificate
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nsxtCertificateThumbprint?: string;
    /**
     * Array of cloud link IDs from other clouds that connect to this one
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly externalCloudLinks?: string[];
    /** A secondary expressRoute circuit from a separate AZ. Only present in a stretched private cloud */
    secondaryCircuit?: Circuit;
    /**
     * Flag to indicate whether the private cloud has the quota for provisioned NSX Public IP count raised from 64 to 1024
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nsxPublicIpQuotaRaised?: NsxPublicIpQuotaRaisedEnum;
}

/**
 * Defines values for PrivateCloudProvisioningState. \
 * {@link KnownPrivateCloudProvisioningState} can be used interchangeably with PrivateCloudProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Cancelled** \
 * **Pending** \
 * **Building** \
 * **Deleting** \
 * **Updating** \
 * **Canceled**
 */
export declare type PrivateCloudProvisioningState = string;

/** Interface representing a PrivateClouds. */
export declare interface PrivateClouds {
    /**
     * List private clouds in a resource group
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, options?: PrivateCloudsListOptionalParams): PagedAsyncIterableIterator<PrivateCloud>;
    /**
     * List private clouds in a subscription
     * @param options The options parameters.
     */
    listInSubscription(options?: PrivateCloudsListInSubscriptionOptionalParams): PagedAsyncIterableIterator<PrivateCloud>;
    /**
     * Get a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param options The options parameters.
     */
    get(resourceGroupName: string, privateCloudName: string, options?: PrivateCloudsGetOptionalParams): Promise<PrivateCloudsGetResponse>;
    /**
     * Create or update a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param privateCloud The private cloud
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, privateCloudName: string, privateCloud: PrivateCloud, options?: PrivateCloudsCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<PrivateCloudsCreateOrUpdateResponse>, PrivateCloudsCreateOrUpdateResponse>>;
    /**
     * Create or update a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param privateCloud The private cloud
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, privateCloudName: string, privateCloud: PrivateCloud, options?: PrivateCloudsCreateOrUpdateOptionalParams): Promise<PrivateCloudsCreateOrUpdateResponse>;
    /**
     * Update a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param privateCloudUpdate The private cloud properties to be updated
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, privateCloudName: string, privateCloudUpdate: PrivateCloudUpdate, options?: PrivateCloudsUpdateOptionalParams): Promise<SimplePollerLike<OperationState<PrivateCloudsUpdateResponse>, PrivateCloudsUpdateResponse>>;
    /**
     * Update a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param privateCloudUpdate The private cloud properties to be updated
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, privateCloudName: string, privateCloudUpdate: PrivateCloudUpdate, options?: PrivateCloudsUpdateOptionalParams): Promise<PrivateCloudsUpdateResponse>;
    /**
     * Delete a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, privateCloudName: string, options?: PrivateCloudsDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Delete a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, privateCloudName: string, options?: PrivateCloudsDeleteOptionalParams): Promise<void>;
    /**
     * Rotate the vCenter password
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param options The options parameters.
     */
    beginRotateVcenterPassword(resourceGroupName: string, privateCloudName: string, options?: PrivateCloudsRotateVcenterPasswordOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Rotate the vCenter password
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param options The options parameters.
     */
    beginRotateVcenterPasswordAndWait(resourceGroupName: string, privateCloudName: string, options?: PrivateCloudsRotateVcenterPasswordOptionalParams): Promise<void>;
    /**
     * Rotate the NSX-T Manager password
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param options The options parameters.
     */
    beginRotateNsxtPassword(resourceGroupName: string, privateCloudName: string, options?: PrivateCloudsRotateNsxtPasswordOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Rotate the NSX-T Manager password
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param options The options parameters.
     */
    beginRotateNsxtPasswordAndWait(resourceGroupName: string, privateCloudName: string, options?: PrivateCloudsRotateNsxtPasswordOptionalParams): Promise<void>;
    /**
     * List the admin credentials for the private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param options The options parameters.
     */
    listAdminCredentials(resourceGroupName: string, privateCloudName: string, options?: PrivateCloudsListAdminCredentialsOptionalParams): Promise<PrivateCloudsListAdminCredentialsResponse>;
}

/** Optional parameters. */
export declare interface PrivateCloudsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type PrivateCloudsCreateOrUpdateResponse = PrivateCloud;

/** Optional parameters. */
export declare interface PrivateCloudsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface PrivateCloudsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type PrivateCloudsGetResponse = PrivateCloud;

/** Optional parameters. */
export declare interface PrivateCloudsListAdminCredentialsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listAdminCredentials operation. */
export declare type PrivateCloudsListAdminCredentialsResponse = AdminCredentials;

/** Optional parameters. */
export declare interface PrivateCloudsListInSubscriptionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listInSubscriptionNext operation. */
export declare type PrivateCloudsListInSubscriptionNextResponse = PrivateCloudList;

/** Optional parameters. */
export declare interface PrivateCloudsListInSubscriptionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listInSubscription operation. */
export declare type PrivateCloudsListInSubscriptionResponse = PrivateCloudList;

/** Optional parameters. */
export declare interface PrivateCloudsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type PrivateCloudsListNextResponse = PrivateCloudList;

/** Optional parameters. */
export declare interface PrivateCloudsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type PrivateCloudsListResponse = PrivateCloudList;

/** Optional parameters. */
export declare interface PrivateCloudsRotateNsxtPasswordOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface PrivateCloudsRotateVcenterPasswordOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface PrivateCloudsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type PrivateCloudsUpdateResponse = PrivateCloud;

/** An update to a private cloud resource */
export declare interface PrivateCloudUpdate {
    /** Resource tags */
    tags?: {
        [propertyName: string]: string;
    };
    /** The identity of the private cloud, if configured. */
    identity?: PrivateCloudIdentity;
    /** The default cluster used for management */
    managementCluster?: ManagementCluster;
    /** Connectivity to internet is enabled or disabled */
    internet?: InternetEnum;
    /** vCenter Single Sign On Identity Sources */
    identitySources?: IdentitySource[];
    /** Properties describing how the cloud is distributed across availability zones */
    availability?: AvailabilityProperties;
    /** Customer managed key encryption, can be enabled or disabled */
    encryption?: Encryption;
    /** Array of additional networks noncontiguous with networkBlock. Networks must be unique and non-overlapping across VNet in your subscription, on-premise, and this privateCloud networkBlock attribute. Make sure the CIDR format conforms to (A.B.C.D/X). */
    extendedNetworkBlocks?: string[];
}

/** The properties of a private cloud resource that may be updated */
export declare interface PrivateCloudUpdateProperties {
    /** The default cluster used for management */
    managementCluster?: ManagementCluster;
    /** Connectivity to internet is enabled or disabled */
    internet?: InternetEnum;
    /** vCenter Single Sign On Identity Sources */
    identitySources?: IdentitySource[];
    /** Properties describing how the cloud is distributed across availability zones */
    availability?: AvailabilityProperties;
    /** Customer managed key encryption, can be enabled or disabled */
    encryption?: Encryption;
    /** Array of additional networks noncontiguous with networkBlock. Networks must be unique and non-overlapping across VNet in your subscription, on-premise, and this privateCloud networkBlock attribute. Make sure the CIDR format conforms to (A.B.C.D/X). */
    extendedNetworkBlocks?: string[];
}

/** The resource model definition for a ARM proxy resource */
export declare interface ProxyResource extends Resource {
}

/** a powershell credential object */
export declare interface PSCredentialExecutionParameter extends ScriptExecutionParameter {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Credential";
    /** username for login */
    username?: string;
    /** password for login */
    password?: string;
}

/** Subscription quotas */
export declare interface Quota {
    /**
     * Remaining hosts quota by sku type
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly hostsRemaining?: {
        [propertyName: string]: number;
    };
    /**
     * Host quota is active for current subscription
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly quotaEnabled?: QuotaEnabled;
}

/**
 * Defines values for QuotaEnabled. \
 * {@link KnownQuotaEnabled} can be used interchangeably with QuotaEnabled,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export declare type QuotaEnabled = string;

/** The core properties of ARM resources */
export declare interface Resource {
    /**
     * Resource ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Resource name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Resource type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
}

/**
 * Defines values for ResourceIdentityType. \
 * {@link KnownResourceIdentityType} can be used interchangeably with ResourceIdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SystemAssigned** \
 * **None**
 */
export declare type ResourceIdentityType = string;

/** A cmdlet available for script execution */
export declare interface ScriptCmdlet extends ProxyResource {
    /**
     * Description of the scripts functionality
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly description?: string;
    /**
     * Recommended time limit for execution
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly timeout?: string;
    /**
     * Parameters the script will accept
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly parameters?: ScriptParameter[];
}

/** Interface representing a ScriptCmdlets. */
export declare interface ScriptCmdlets {
    /**
     * List script cmdlet resources available for a private cloud to create a script execution resource on
     * a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param scriptPackageName Name of the script package in the private cloud
     * @param options The options parameters.
     */
    list(resourceGroupName: string, privateCloudName: string, scriptPackageName: string, options?: ScriptCmdletsListOptionalParams): PagedAsyncIterableIterator<ScriptCmdlet>;
    /**
     * Return information about a script cmdlet resource in a specific package on a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param scriptPackageName Name of the script package in the private cloud
     * @param scriptCmdletName Name of the script cmdlet resource in the script package in the private
     *                         cloud
     * @param options The options parameters.
     */
    get(resourceGroupName: string, privateCloudName: string, scriptPackageName: string, scriptCmdletName: string, options?: ScriptCmdletsGetOptionalParams): Promise<ScriptCmdletsGetResponse>;
}

/** Optional parameters. */
export declare interface ScriptCmdletsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ScriptCmdletsGetResponse = ScriptCmdlet;

/** Pageable list of scripts/cmdlets */
export declare interface ScriptCmdletsList {
    /**
     * List of scripts
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: ScriptCmdlet[];
    /**
     * URL to get the next page if any
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Optional parameters. */
export declare interface ScriptCmdletsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type ScriptCmdletsListNextResponse = ScriptCmdletsList;

/** Optional parameters. */
export declare interface ScriptCmdletsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type ScriptCmdletsListResponse = ScriptCmdletsList;

/** An instance of a script executed by a user - custom or AVS */
export declare interface ScriptExecution extends ProxyResource {
    /** A reference to the script cmdlet resource if user is running a AVS script */
    scriptCmdletId?: string;
    /** Parameters the script will accept */
    parameters?: ScriptExecutionParameterUnion[];
    /** Parameters that will be hidden/not visible to ARM, such as passwords and credentials */
    hiddenParameters?: ScriptExecutionParameterUnion[];
    /** Error message if the script was able to run, but if the script itself had errors or powershell threw an exception */
    failureReason?: string;
    /** Time limit for execution */
    timeout?: string;
    /** Time to live for the resource. If not provided, will be available for 60 days */
    retention?: string;
    /**
     * Time the script execution was submitted
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly submittedAt?: Date;
    /**
     * Time the script execution was started
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly startedAt?: Date;
    /**
     * Time the script execution was finished
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly finishedAt?: Date;
    /**
     * The state of the script execution resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ScriptExecutionProvisioningState;
    /** Standard output stream from the powershell execution */
    output?: string[];
    /** User-defined dictionary. */
    namedOutputs?: {
        [propertyName: string]: Record<string, unknown>;
    };
    /**
     * Standard information out stream from the powershell execution
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly information?: string[];
    /**
     * Standard warning out stream from the powershell execution
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly warnings?: string[];
    /**
     * Standard error output stream from the powershell execution
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly errors?: string[];
}

/** The arguments passed in to the execution */
export declare interface ScriptExecutionParameter {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SecureValue" | "Value" | "Credential";
    /** The parameter name */
    name: string;
}

/**
 * Defines values for ScriptExecutionParameterType. \
 * {@link KnownScriptExecutionParameterType} can be used interchangeably with ScriptExecutionParameterType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Value** \
 * **SecureValue** \
 * **Credential**
 */
export declare type ScriptExecutionParameterType = string;

export declare type ScriptExecutionParameterUnion = ScriptExecutionParameter | ScriptSecureStringExecutionParameter | ScriptStringExecutionParameter | PSCredentialExecutionParameter;

/**
 * Defines values for ScriptExecutionProvisioningState. \
 * {@link KnownScriptExecutionProvisioningState} can be used interchangeably with ScriptExecutionProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Pending** \
 * **Running** \
 * **Succeeded** \
 * **Failed** \
 * **Cancelling** \
 * **Cancelled** \
 * **Deleting** \
 * **Canceled**
 */
export declare type ScriptExecutionProvisioningState = string;

/** Interface representing a ScriptExecutions. */
export declare interface ScriptExecutions {
    /**
     * List script executions in a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param options The options parameters.
     */
    list(resourceGroupName: string, privateCloudName: string, options?: ScriptExecutionsListOptionalParams): PagedAsyncIterableIterator<ScriptExecution>;
    /**
     * Get an script execution by name in a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param scriptExecutionName Name of the user-invoked script execution resource
     * @param options The options parameters.
     */
    get(resourceGroupName: string, privateCloudName: string, scriptExecutionName: string, options?: ScriptExecutionsGetOptionalParams): Promise<ScriptExecutionsGetResponse>;
    /**
     * Create or update a script execution in a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName The name of the private cloud.
     * @param scriptExecutionName Name of the user-invoked script execution resource
     * @param scriptExecution A script running in the private cloud
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, privateCloudName: string, scriptExecutionName: string, scriptExecution: ScriptExecution, options?: ScriptExecutionsCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<ScriptExecutionsCreateOrUpdateResponse>, ScriptExecutionsCreateOrUpdateResponse>>;
    /**
     * Create or update a script execution in a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName The name of the private cloud.
     * @param scriptExecutionName Name of the user-invoked script execution resource
     * @param scriptExecution A script running in the private cloud
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, privateCloudName: string, scriptExecutionName: string, scriptExecution: ScriptExecution, options?: ScriptExecutionsCreateOrUpdateOptionalParams): Promise<ScriptExecutionsCreateOrUpdateResponse>;
    /**
     * Cancel a ScriptExecution in a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param scriptExecutionName Name of the user-invoked script execution resource
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, privateCloudName: string, scriptExecutionName: string, options?: ScriptExecutionsDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Cancel a ScriptExecution in a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param scriptExecutionName Name of the user-invoked script execution resource
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, privateCloudName: string, scriptExecutionName: string, options?: ScriptExecutionsDeleteOptionalParams): Promise<void>;
    /**
     * Return the logs for a script execution resource
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param scriptExecutionName Name of the user-invoked script execution resource
     * @param options The options parameters.
     */
    getExecutionLogs(resourceGroupName: string, privateCloudName: string, scriptExecutionName: string, options?: ScriptExecutionsGetExecutionLogsOptionalParams): Promise<ScriptExecutionsGetExecutionLogsResponse>;
}

/** Optional parameters. */
export declare interface ScriptExecutionsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type ScriptExecutionsCreateOrUpdateResponse = ScriptExecution;

/** Optional parameters. */
export declare interface ScriptExecutionsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface ScriptExecutionsGetExecutionLogsOptionalParams extends coreClient.OperationOptions {
    /** Name of the desired output stream to return. If not provided, will return all. An empty array will return nothing */
    scriptOutputStreamType?: ScriptOutputStreamType[];
}

/** Contains response data for the getExecutionLogs operation. */
export declare type ScriptExecutionsGetExecutionLogsResponse = ScriptExecution;

/** Optional parameters. */
export declare interface ScriptExecutionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ScriptExecutionsGetResponse = ScriptExecution;

/** Pageable list of script executions */
export declare interface ScriptExecutionsList {
    /**
     * List of scripts
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: ScriptExecution[];
    /**
     * URL to get the next page if any
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Optional parameters. */
export declare interface ScriptExecutionsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type ScriptExecutionsListNextResponse = ScriptExecutionsList;

/** Optional parameters. */
export declare interface ScriptExecutionsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type ScriptExecutionsListResponse = ScriptExecutionsList;

/**
 * Defines values for ScriptOutputStreamType. \
 * {@link KnownScriptOutputStreamType} can be used interchangeably with ScriptOutputStreamType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Information** \
 * **Warning** \
 * **Output** \
 * **Error**
 */
export declare type ScriptOutputStreamType = string;

/** Script Package resources available for execution */
export declare interface ScriptPackage extends ProxyResource {
    /**
     * User friendly description of the package
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly description?: string;
    /**
     * Module version
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly version?: string;
    /**
     * Company that created and supports the package
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly company?: string;
    /**
     * Link to support by the package vendor
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly uri?: string;
}

/** Interface representing a ScriptPackages. */
export declare interface ScriptPackages {
    /**
     * List script packages available to run on the private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param options The options parameters.
     */
    list(resourceGroupName: string, privateCloudName: string, options?: ScriptPackagesListOptionalParams): PagedAsyncIterableIterator<ScriptPackage>;
    /**
     * Get a script package available to run on a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param scriptPackageName Name of the script package in the private cloud
     * @param options The options parameters.
     */
    get(resourceGroupName: string, privateCloudName: string, scriptPackageName: string, options?: ScriptPackagesGetOptionalParams): Promise<ScriptPackagesGetResponse>;
}

/** Optional parameters. */
export declare interface ScriptPackagesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ScriptPackagesGetResponse = ScriptPackage;

/** A list of the available script packages */
export declare interface ScriptPackagesList {
    /**
     * List of script package resources
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: ScriptPackage[];
    /**
     * URL to get the next page if any
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Optional parameters. */
export declare interface ScriptPackagesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type ScriptPackagesListNextResponse = ScriptPackagesList;

/** Optional parameters. */
export declare interface ScriptPackagesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type ScriptPackagesListResponse = ScriptPackagesList;

/** An parameter that the script will accept */
export declare interface ScriptParameter {
    /**
     * The type of parameter the script is expecting. psCredential is a PSCredentialObject
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: ScriptParameterTypes;
    /** The parameter name that the script will expect a parameter value for */
    name?: string;
    /**
     * User friendly description of the parameter
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly description?: string;
    /**
     * Should this parameter be visible to arm and passed in the parameters argument when executing
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly visibility?: VisibilityParameterEnum;
    /**
     * Is this parameter required or optional
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly optional?: OptionalParamEnum;
}

/**
 * Defines values for ScriptParameterTypes. \
 * {@link KnownScriptParameterTypes} can be used interchangeably with ScriptParameterTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **String** \
 * **SecureString** \
 * **Credential** \
 * **Int** \
 * **Bool** \
 * **Float**
 */
export declare type ScriptParameterTypes = string;

/** a plain text value execution parameter */
export declare interface ScriptSecureStringExecutionParameter extends ScriptExecutionParameter {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SecureValue";
    /** A secure value for the passed parameter, not to be stored in logs */
    secureValue?: string;
}

/** a plain text value execution parameter */
export declare interface ScriptStringExecutionParameter extends ScriptExecutionParameter {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Value";
    /** The value for the passed parameter */
    value?: string;
}

/**
 * Defines values for SegmentStatusEnum. \
 * {@link KnownSegmentStatusEnum} can be used interchangeably with SegmentStatusEnum,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SUCCESS** \
 * **FAILURE**
 */
export declare type SegmentStatusEnum = string;

/** Service specification payload */
export declare interface ServiceSpecification {
    /** Specifications of the Log for Azure Monitoring */
    logSpecifications?: LogSpecification[];
    /** Specifications of the Metrics for Azure Monitoring */
    metricSpecifications?: MetricSpecification[];
}

/** The resource model definition representing SKU */
export declare interface Sku {
    /** The name of the SKU. */
    name: string;
}

/**
 * Defines values for SslEnum. \
 * {@link KnownSslEnum} can be used interchangeably with SslEnum,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export declare type SslEnum = string;

/** The resource model definition for a ARM tracked top level resource */
export declare interface TrackedResource extends Resource {
    /** Resource location */
    location?: string;
    /** Resource tags */
    tags?: {
        [propertyName: string]: string;
    };
}

/** Subscription trial availability */
export declare interface Trial {
    /**
     * Trial status
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: TrialStatus;
    /**
     * Number of trial hosts available
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly availableHosts?: number;
}

/**
 * Defines values for TrialStatus. \
 * {@link KnownTrialStatus} can be used interchangeably with TrialStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **TrialAvailable** \
 * **TrialUsed** \
 * **TrialDisabled**
 */
export declare type TrialStatus = string;

/** Virtual Machine */
export declare interface VirtualMachine extends ProxyResource {
    /**
     * Display name of the VM.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly displayName?: string;
    /**
     * Virtual machine managed object reference id
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly moRefId?: string;
    /**
     * Path to virtual machine's folder starting from datacenter virtual machine folder
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly folderPath?: string;
    /**
     * Whether VM DRS-driven movement is restricted (enabled) or not (disabled)
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly restrictMovement?: VirtualMachineRestrictMovementState;
}

/** Set VM DRS-driven movement to restricted (enabled) or not (disabled) */
export declare interface VirtualMachineRestrictMovement {
    /** Whether VM DRS-driven movement is restricted (enabled) or not (disabled) */
    restrictMovement?: VirtualMachineRestrictMovementState;
}

/**
 * Defines values for VirtualMachineRestrictMovementState. \
 * {@link KnownVirtualMachineRestrictMovementState} can be used interchangeably with VirtualMachineRestrictMovementState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export declare type VirtualMachineRestrictMovementState = string;

/** Interface representing a VirtualMachines. */
export declare interface VirtualMachines {
    /**
     * List of virtual machines in a private cloud cluster
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param clusterName Name of the cluster in the private cloud
     * @param options The options parameters.
     */
    list(resourceGroupName: string, privateCloudName: string, clusterName: string, options?: VirtualMachinesListOptionalParams): PagedAsyncIterableIterator<VirtualMachine>;
    /**
     * Get a virtual machine by id in a private cloud cluster
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param clusterName Name of the cluster in the private cloud
     * @param virtualMachineId Virtual Machine identifier
     * @param options The options parameters.
     */
    get(resourceGroupName: string, privateCloudName: string, clusterName: string, virtualMachineId: string, options?: VirtualMachinesGetOptionalParams): Promise<VirtualMachinesGetResponse>;
    /**
     * Enable or disable DRS-driven VM movement restriction
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param clusterName Name of the cluster in the private cloud
     * @param virtualMachineId Virtual Machine identifier
     * @param restrictMovement Whether VM DRS-driven movement is restricted (Enabled) or not (Disabled)
     * @param options The options parameters.
     */
    beginRestrictMovement(resourceGroupName: string, privateCloudName: string, clusterName: string, virtualMachineId: string, restrictMovement: VirtualMachineRestrictMovement, options?: VirtualMachinesRestrictMovementOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Enable or disable DRS-driven VM movement restriction
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param clusterName Name of the cluster in the private cloud
     * @param virtualMachineId Virtual Machine identifier
     * @param restrictMovement Whether VM DRS-driven movement is restricted (Enabled) or not (Disabled)
     * @param options The options parameters.
     */
    beginRestrictMovementAndWait(resourceGroupName: string, privateCloudName: string, clusterName: string, virtualMachineId: string, restrictMovement: VirtualMachineRestrictMovement, options?: VirtualMachinesRestrictMovementOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface VirtualMachinesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type VirtualMachinesGetResponse = VirtualMachine;

/** A list of Virtual Machines */
export declare interface VirtualMachinesList {
    /**
     * The items to be displayed on the page
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: VirtualMachine[];
    /**
     * URL to get the next page if any
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Optional parameters. */
export declare interface VirtualMachinesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type VirtualMachinesListNextResponse = VirtualMachinesList;

/** Optional parameters. */
export declare interface VirtualMachinesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type VirtualMachinesListResponse = VirtualMachinesList;

/** Optional parameters. */
export declare interface VirtualMachinesRestrictMovementOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/**
 * Defines values for VisibilityParameterEnum. \
 * {@link KnownVisibilityParameterEnum} can be used interchangeably with VisibilityParameterEnum,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Visible** \
 * **Hidden**
 */
export declare type VisibilityParameterEnum = string;

/**
 * Defines values for VMGroupStatusEnum. \
 * {@link KnownVMGroupStatusEnum} can be used interchangeably with VMGroupStatusEnum,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SUCCESS** \
 * **FAILURE**
 */
export declare type VMGroupStatusEnum = string;

/** VM-Host placement policy properties */
export declare interface VmHostPlacementPolicyProperties extends PlacementPolicyProperties {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "VmHost";
    /** Virtual machine members list */
    vmMembers: string[];
    /** Host members list */
    hostMembers: string[];
    /** placement policy affinity type */
    affinityType: AffinityType;
    /** vm-host placement policy affinity strength (should/must) */
    affinityStrength?: AffinityStrength;
    /** placement policy azure hybrid benefit opt-in type */
    azureHybridBenefitType?: AzureHybridBenefitType;
}

/** VM-VM placement policy properties */
export declare interface VmPlacementPolicyProperties extends PlacementPolicyProperties {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "VmVm";
    /** Virtual machine members list */
    vmMembers: string[];
    /** placement policy affinity type */
    affinityType: AffinityType;
}

/**
 * Defines values for VMTypeEnum. \
 * {@link KnownVMTypeEnum} can be used interchangeably with VMTypeEnum,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **REGULAR** \
 * **EDGE** \
 * **SERVICE**
 */
export declare type VMTypeEnum = string;

/** Workload Network */
export declare interface WorkloadNetwork extends ProxyResource {
}

/** NSX DHCP */
export declare interface WorkloadNetworkDhcp extends ProxyResource {
    /** DHCP properties. */
    properties?: WorkloadNetworkDhcpEntityUnion;
}

/** Base class for WorkloadNetworkDhcpServer and WorkloadNetworkDhcpRelay to inherit from */
export declare interface WorkloadNetworkDhcpEntity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    dhcpType: "SERVER" | "RELAY";
    /** Display name of the DHCP entity. */
    displayName?: string;
    /**
     * NSX Segments consuming DHCP.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly segments?: string[];
    /**
     * The provisioning state
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: WorkloadNetworkDhcpProvisioningState;
    /** NSX revision number. */
    revision?: number;
}

export declare type WorkloadNetworkDhcpEntityUnion = WorkloadNetworkDhcpEntity | WorkloadNetworkDhcpServer | WorkloadNetworkDhcpRelay;

/** A list of NSX dhcp entities */
export declare interface WorkloadNetworkDhcpList {
    /**
     * The items on the page
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: WorkloadNetworkDhcp[];
    /**
     * URL to get the next page if any
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/**
 * Defines values for WorkloadNetworkDhcpProvisioningState. \
 * {@link KnownWorkloadNetworkDhcpProvisioningState} can be used interchangeably with WorkloadNetworkDhcpProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Building** \
 * **Deleting** \
 * **Updating** \
 * **Canceled**
 */
export declare type WorkloadNetworkDhcpProvisioningState = string;

/** NSX DHCP Relay */
export declare interface WorkloadNetworkDhcpRelay extends WorkloadNetworkDhcpEntity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    dhcpType: "RELAY";
    /** DHCP Relay Addresses. Max 3. */
    serverAddresses?: string[];
}

/** NSX DHCP Server */
export declare interface WorkloadNetworkDhcpServer extends WorkloadNetworkDhcpEntity {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    dhcpType: "SERVER";
    /** DHCP Server Address. */
    serverAddress?: string;
    /** DHCP Server Lease Time. */
    leaseTime?: number;
}

/** NSX DNS Service */
export declare interface WorkloadNetworkDnsService extends ProxyResource {
    /** Display name of the DNS Service. */
    displayName?: string;
    /** DNS service IP of the DNS Service. */
    dnsServiceIp?: string;
    /** Default DNS zone of the DNS Service. */
    defaultDnsZone?: string;
    /** FQDN zones of the DNS Service. */
    fqdnZones?: string[];
    /** DNS Service log level. */
    logLevel?: DnsServiceLogLevelEnum;
    /**
     * DNS Service status.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: DnsServiceStatusEnum;
    /**
     * The provisioning state
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: WorkloadNetworkDnsServiceProvisioningState;
    /** NSX revision number. */
    revision?: number;
}

/**
 * Defines values for WorkloadNetworkDnsServiceProvisioningState. \
 * {@link KnownWorkloadNetworkDnsServiceProvisioningState} can be used interchangeably with WorkloadNetworkDnsServiceProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Building** \
 * **Deleting** \
 * **Updating** \
 * **Canceled**
 */
export declare type WorkloadNetworkDnsServiceProvisioningState = string;

/** A list of NSX DNS Services */
export declare interface WorkloadNetworkDnsServicesList {
    /**
     * The items on the page
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: WorkloadNetworkDnsService[];
    /**
     * URL to get the next page if any
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** NSX DNS Zone */
export declare interface WorkloadNetworkDnsZone extends ProxyResource {
    /** Display name of the DNS Zone. */
    displayName?: string;
    /** Domain names of the DNS Zone. */
    domain?: string[];
    /** DNS Server IP array of the DNS Zone. */
    dnsServerIps?: string[];
    /** Source IP of the DNS Zone. */
    sourceIp?: string;
    /** Number of DNS Services using the DNS zone. */
    dnsServices?: number;
    /**
     * The provisioning state
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: WorkloadNetworkDnsZoneProvisioningState;
    /** NSX revision number. */
    revision?: number;
}

/**
 * Defines values for WorkloadNetworkDnsZoneProvisioningState. \
 * {@link KnownWorkloadNetworkDnsZoneProvisioningState} can be used interchangeably with WorkloadNetworkDnsZoneProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Building** \
 * **Deleting** \
 * **Updating** \
 * **Canceled**
 */
export declare type WorkloadNetworkDnsZoneProvisioningState = string;

/** A list of NSX DNS Zones */
export declare interface WorkloadNetworkDnsZonesList {
    /**
     * The items on the page
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: WorkloadNetworkDnsZone[];
    /**
     * URL to get the next page if any
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** NSX Gateway. */
export declare interface WorkloadNetworkGateway extends ProxyResource {
    /** Display name of the DHCP entity. */
    displayName?: string;
    /**
     * NSX Gateway Path.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly path?: string;
}

/** A list of NSX Gateways */
export declare interface WorkloadNetworkGatewayList {
    /**
     * The items on the page
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: WorkloadNetworkGateway[];
    /**
     * URL to get the next page if any
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** A list of workload networks */
export declare interface WorkloadNetworkList {
    /**
     * The items on the page
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: WorkloadNetwork[];
    /**
     * URL to get the next page if any
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/**
 * Defines values for WorkloadNetworkName. \
 * {@link KnownWorkloadNetworkName} can be used interchangeably with WorkloadNetworkName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **default**
 */
export declare type WorkloadNetworkName = string;

/** NSX Port Mirroring */
export declare interface WorkloadNetworkPortMirroring extends ProxyResource {
    /** Display name of the port mirroring profile. */
    displayName?: string;
    /** Direction of port mirroring profile. */
    direction?: PortMirroringDirectionEnum;
    /** Source VM Group. */
    source?: string;
    /** Destination VM Group. */
    destination?: string;
    /**
     * Port Mirroring Status.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: PortMirroringStatusEnum;
    /**
     * The provisioning state
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: WorkloadNetworkPortMirroringProvisioningState;
    /** NSX revision number. */
    revision?: number;
}

/** A list of NSX Port Mirroring */
export declare interface WorkloadNetworkPortMirroringList {
    /**
     * The items on the page
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: WorkloadNetworkPortMirroring[];
    /**
     * URL to get the next page if any
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/**
 * Defines values for WorkloadNetworkPortMirroringProvisioningState. \
 * {@link KnownWorkloadNetworkPortMirroringProvisioningState} can be used interchangeably with WorkloadNetworkPortMirroringProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Building** \
 * **Deleting** \
 * **Updating** \
 * **Canceled**
 */
export declare type WorkloadNetworkPortMirroringProvisioningState = string;

/** NSX Public IP Block */
export declare interface WorkloadNetworkPublicIP extends ProxyResource {
    /** Display name of the Public IP Block. */
    displayName?: string;
    /** Number of Public IPs requested. */
    numberOfPublicIPs?: number;
    /**
     * CIDR Block of the Public IP Block.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly publicIPBlock?: string;
    /**
     * The provisioning state
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: WorkloadNetworkPublicIPProvisioningState;
}

/**
 * Defines values for WorkloadNetworkPublicIPProvisioningState. \
 * {@link KnownWorkloadNetworkPublicIPProvisioningState} can be used interchangeably with WorkloadNetworkPublicIPProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Building** \
 * **Deleting** \
 * **Updating** \
 * **Canceled**
 */
export declare type WorkloadNetworkPublicIPProvisioningState = string;

/** A list of NSX Public IP Blocks */
export declare interface WorkloadNetworkPublicIPsList {
    /**
     * The items on the page
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: WorkloadNetworkPublicIP[];
    /**
     * URL to get the next page if any
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a WorkloadNetworks. */
export declare interface WorkloadNetworks {
    /**
     * List of workload networks in a private cloud.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param options The options parameters.
     */
    list(resourceGroupName: string, privateCloudName: string, options?: WorkloadNetworksListOptionalParams): PagedAsyncIterableIterator<WorkloadNetwork>;
    /**
     * List of segments in a private cloud workload network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param options The options parameters.
     */
    listSegments(resourceGroupName: string, privateCloudName: string, options?: WorkloadNetworksListSegmentsOptionalParams): PagedAsyncIterableIterator<WorkloadNetworkSegment>;
    /**
     * List dhcp in a private cloud workload network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param options The options parameters.
     */
    listDhcp(resourceGroupName: string, privateCloudName: string, options?: WorkloadNetworksListDhcpOptionalParams): PagedAsyncIterableIterator<WorkloadNetworkDhcp>;
    /**
     * List of gateways in a private cloud workload network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param options The options parameters.
     */
    listGateways(resourceGroupName: string, privateCloudName: string, options?: WorkloadNetworksListGatewaysOptionalParams): PagedAsyncIterableIterator<WorkloadNetworkGateway>;
    /**
     * List of port mirroring profiles in a private cloud workload network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param options The options parameters.
     */
    listPortMirroring(resourceGroupName: string, privateCloudName: string, options?: WorkloadNetworksListPortMirroringOptionalParams): PagedAsyncIterableIterator<WorkloadNetworkPortMirroring>;
    /**
     * List of vm groups in a private cloud workload network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param options The options parameters.
     */
    listVMGroups(resourceGroupName: string, privateCloudName: string, options?: WorkloadNetworksListVMGroupsOptionalParams): PagedAsyncIterableIterator<WorkloadNetworkVMGroup>;
    /**
     * List of virtual machines in a private cloud workload network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param options The options parameters.
     */
    listVirtualMachines(resourceGroupName: string, privateCloudName: string, options?: WorkloadNetworksListVirtualMachinesOptionalParams): PagedAsyncIterableIterator<WorkloadNetworkVirtualMachine>;
    /**
     * List of DNS services in a private cloud workload network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param options The options parameters.
     */
    listDnsServices(resourceGroupName: string, privateCloudName: string, options?: WorkloadNetworksListDnsServicesOptionalParams): PagedAsyncIterableIterator<WorkloadNetworkDnsService>;
    /**
     * List of DNS zones in a private cloud workload network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param options The options parameters.
     */
    listDnsZones(resourceGroupName: string, privateCloudName: string, options?: WorkloadNetworksListDnsZonesOptionalParams): PagedAsyncIterableIterator<WorkloadNetworkDnsZone>;
    /**
     * List of Public IP Blocks in a private cloud workload network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param options The options parameters.
     */
    listPublicIPs(resourceGroupName: string, privateCloudName: string, options?: WorkloadNetworksListPublicIPsOptionalParams): PagedAsyncIterableIterator<WorkloadNetworkPublicIP>;
    /**
     * Get a private cloud workload network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param workloadNetworkName Name for the workload network in the private cloud
     * @param options The options parameters.
     */
    get(resourceGroupName: string, privateCloudName: string, workloadNetworkName: WorkloadNetworkName, options?: WorkloadNetworksGetOptionalParams): Promise<WorkloadNetworksGetResponse>;
    /**
     * Get a segment by id in a private cloud workload network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @param options The options parameters.
     */
    getSegment(resourceGroupName: string, privateCloudName: string, segmentId: string, options?: WorkloadNetworksGetSegmentOptionalParams): Promise<WorkloadNetworksGetSegmentResponse>;
    /**
     * Create a segment by id in a private cloud workload network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @param workloadNetworkSegment NSX Segment
     * @param options The options parameters.
     */
    beginCreateSegments(resourceGroupName: string, privateCloudName: string, segmentId: string, workloadNetworkSegment: WorkloadNetworkSegment, options?: WorkloadNetworksCreateSegmentsOptionalParams): Promise<SimplePollerLike<OperationState<WorkloadNetworksCreateSegmentsResponse>, WorkloadNetworksCreateSegmentsResponse>>;
    /**
     * Create a segment by id in a private cloud workload network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @param workloadNetworkSegment NSX Segment
     * @param options The options parameters.
     */
    beginCreateSegmentsAndWait(resourceGroupName: string, privateCloudName: string, segmentId: string, workloadNetworkSegment: WorkloadNetworkSegment, options?: WorkloadNetworksCreateSegmentsOptionalParams): Promise<WorkloadNetworksCreateSegmentsResponse>;
    /**
     * Create or update a segment by id in a private cloud workload network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @param workloadNetworkSegment NSX Segment
     * @param options The options parameters.
     */
    beginUpdateSegments(resourceGroupName: string, privateCloudName: string, segmentId: string, workloadNetworkSegment: WorkloadNetworkSegment, options?: WorkloadNetworksUpdateSegmentsOptionalParams): Promise<SimplePollerLike<OperationState<WorkloadNetworksUpdateSegmentsResponse>, WorkloadNetworksUpdateSegmentsResponse>>;
    /**
     * Create or update a segment by id in a private cloud workload network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @param workloadNetworkSegment NSX Segment
     * @param options The options parameters.
     */
    beginUpdateSegmentsAndWait(resourceGroupName: string, privateCloudName: string, segmentId: string, workloadNetworkSegment: WorkloadNetworkSegment, options?: WorkloadNetworksUpdateSegmentsOptionalParams): Promise<WorkloadNetworksUpdateSegmentsResponse>;
    /**
     * Delete a segment by id in a private cloud workload network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @param options The options parameters.
     */
    beginDeleteSegment(resourceGroupName: string, privateCloudName: string, segmentId: string, options?: WorkloadNetworksDeleteSegmentOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Delete a segment by id in a private cloud workload network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @param options The options parameters.
     */
    beginDeleteSegmentAndWait(resourceGroupName: string, privateCloudName: string, segmentId: string, options?: WorkloadNetworksDeleteSegmentOptionalParams): Promise<void>;
    /**
     * Get dhcp by id in a private cloud workload network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param privateCloudName Name of the private cloud
     * @param options The options parameters.
     */
    getDhcp(resourceGroupName: string, dhcpId: string, privateCloudName: string, options?: WorkloadNetworksGetDhcpOptionalParams): Promise<WorkloadNetworksGetDhcpResponse>;
    /**
     * Create dhcp by id in a private cloud workload network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param workloadNetworkDhcp NSX DHCP
     * @param options The options parameters.
     */
    beginCreateDhcp(resourceGroupName: string, privateCloudName: string, dhcpId: string, workloadNetworkDhcp: WorkloadNetworkDhcp, options?: WorkloadNetworksCreateDhcpOptionalParams): Promise<SimplePollerLike<OperationState<WorkloadNetworksCreateDhcpResponse>, WorkloadNetworksCreateDhcpResponse>>;
    /**
     * Create dhcp by id in a private cloud workload network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param workloadNetworkDhcp NSX DHCP
     * @param options The options parameters.
     */
    beginCreateDhcpAndWait(resourceGroupName: string, privateCloudName: string, dhcpId: string, workloadNetworkDhcp: WorkloadNetworkDhcp, options?: WorkloadNetworksCreateDhcpOptionalParams): Promise<WorkloadNetworksCreateDhcpResponse>;
    /**
     * Create or update dhcp by id in a private cloud workload network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param workloadNetworkDhcp NSX DHCP
     * @param options The options parameters.
     */
    beginUpdateDhcp(resourceGroupName: string, privateCloudName: string, dhcpId: string, workloadNetworkDhcp: WorkloadNetworkDhcp, options?: WorkloadNetworksUpdateDhcpOptionalParams): Promise<SimplePollerLike<OperationState<WorkloadNetworksUpdateDhcpResponse>, WorkloadNetworksUpdateDhcpResponse>>;
    /**
     * Create or update dhcp by id in a private cloud workload network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param workloadNetworkDhcp NSX DHCP
     * @param options The options parameters.
     */
    beginUpdateDhcpAndWait(resourceGroupName: string, privateCloudName: string, dhcpId: string, workloadNetworkDhcp: WorkloadNetworkDhcp, options?: WorkloadNetworksUpdateDhcpOptionalParams): Promise<WorkloadNetworksUpdateDhcpResponse>;
    /**
     * Delete dhcp by id in a private cloud workload network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param options The options parameters.
     */
    beginDeleteDhcp(resourceGroupName: string, privateCloudName: string, dhcpId: string, options?: WorkloadNetworksDeleteDhcpOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Delete dhcp by id in a private cloud workload network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param options The options parameters.
     */
    beginDeleteDhcpAndWait(resourceGroupName: string, privateCloudName: string, dhcpId: string, options?: WorkloadNetworksDeleteDhcpOptionalParams): Promise<void>;
    /**
     * Get a gateway by id in a private cloud workload network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param gatewayId NSX Gateway identifier. Generally the same as the Gateway's display name
     * @param options The options parameters.
     */
    getGateway(resourceGroupName: string, privateCloudName: string, gatewayId: string, options?: WorkloadNetworksGetGatewayOptionalParams): Promise<WorkloadNetworksGetGatewayResponse>;
    /**
     * Get a port mirroring profile by id in a private cloud workload network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring
     *                        display name
     * @param options The options parameters.
     */
    getPortMirroring(resourceGroupName: string, privateCloudName: string, portMirroringId: string, options?: WorkloadNetworksGetPortMirroringOptionalParams): Promise<WorkloadNetworksGetPortMirroringResponse>;
    /**
     * Create a port mirroring profile by id in a private cloud workload network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring
     *                        display name
     * @param workloadNetworkPortMirroring NSX port mirroring
     * @param options The options parameters.
     */
    beginCreatePortMirroring(resourceGroupName: string, privateCloudName: string, portMirroringId: string, workloadNetworkPortMirroring: WorkloadNetworkPortMirroring, options?: WorkloadNetworksCreatePortMirroringOptionalParams): Promise<SimplePollerLike<OperationState<WorkloadNetworksCreatePortMirroringResponse>, WorkloadNetworksCreatePortMirroringResponse>>;
    /**
     * Create a port mirroring profile by id in a private cloud workload network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring
     *                        display name
     * @param workloadNetworkPortMirroring NSX port mirroring
     * @param options The options parameters.
     */
    beginCreatePortMirroringAndWait(resourceGroupName: string, privateCloudName: string, portMirroringId: string, workloadNetworkPortMirroring: WorkloadNetworkPortMirroring, options?: WorkloadNetworksCreatePortMirroringOptionalParams): Promise<WorkloadNetworksCreatePortMirroringResponse>;
    /**
     * Create or update a port mirroring profile by id in a private cloud workload network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring
     *                        display name
     * @param workloadNetworkPortMirroring NSX port mirroring
     * @param options The options parameters.
     */
    beginUpdatePortMirroring(resourceGroupName: string, privateCloudName: string, portMirroringId: string, workloadNetworkPortMirroring: WorkloadNetworkPortMirroring, options?: WorkloadNetworksUpdatePortMirroringOptionalParams): Promise<SimplePollerLike<OperationState<WorkloadNetworksUpdatePortMirroringResponse>, WorkloadNetworksUpdatePortMirroringResponse>>;
    /**
     * Create or update a port mirroring profile by id in a private cloud workload network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring
     *                        display name
     * @param workloadNetworkPortMirroring NSX port mirroring
     * @param options The options parameters.
     */
    beginUpdatePortMirroringAndWait(resourceGroupName: string, privateCloudName: string, portMirroringId: string, workloadNetworkPortMirroring: WorkloadNetworkPortMirroring, options?: WorkloadNetworksUpdatePortMirroringOptionalParams): Promise<WorkloadNetworksUpdatePortMirroringResponse>;
    /**
     * Delete a port mirroring profile by id in a private cloud workload network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring
     *                        display name
     * @param privateCloudName Name of the private cloud
     * @param options The options parameters.
     */
    beginDeletePortMirroring(resourceGroupName: string, portMirroringId: string, privateCloudName: string, options?: WorkloadNetworksDeletePortMirroringOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Delete a port mirroring profile by id in a private cloud workload network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring
     *                        display name
     * @param privateCloudName Name of the private cloud
     * @param options The options parameters.
     */
    beginDeletePortMirroringAndWait(resourceGroupName: string, portMirroringId: string, privateCloudName: string, options?: WorkloadNetworksDeletePortMirroringOptionalParams): Promise<void>;
    /**
     * Get a vm group by id in a private cloud workload network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param options The options parameters.
     */
    getVMGroup(resourceGroupName: string, privateCloudName: string, vmGroupId: string, options?: WorkloadNetworksGetVMGroupOptionalParams): Promise<WorkloadNetworksGetVMGroupResponse>;
    /**
     * Create a vm group by id in a private cloud workload network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param workloadNetworkVMGroup NSX VM Group
     * @param options The options parameters.
     */
    beginCreateVMGroup(resourceGroupName: string, privateCloudName: string, vmGroupId: string, workloadNetworkVMGroup: WorkloadNetworkVMGroup, options?: WorkloadNetworksCreateVMGroupOptionalParams): Promise<SimplePollerLike<OperationState<WorkloadNetworksCreateVMGroupResponse>, WorkloadNetworksCreateVMGroupResponse>>;
    /**
     * Create a vm group by id in a private cloud workload network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param workloadNetworkVMGroup NSX VM Group
     * @param options The options parameters.
     */
    beginCreateVMGroupAndWait(resourceGroupName: string, privateCloudName: string, vmGroupId: string, workloadNetworkVMGroup: WorkloadNetworkVMGroup, options?: WorkloadNetworksCreateVMGroupOptionalParams): Promise<WorkloadNetworksCreateVMGroupResponse>;
    /**
     * Create or update a vm group by id in a private cloud workload network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param workloadNetworkVMGroup NSX VM Group
     * @param options The options parameters.
     */
    beginUpdateVMGroup(resourceGroupName: string, privateCloudName: string, vmGroupId: string, workloadNetworkVMGroup: WorkloadNetworkVMGroup, options?: WorkloadNetworksUpdateVMGroupOptionalParams): Promise<SimplePollerLike<OperationState<WorkloadNetworksUpdateVMGroupResponse>, WorkloadNetworksUpdateVMGroupResponse>>;
    /**
     * Create or update a vm group by id in a private cloud workload network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param workloadNetworkVMGroup NSX VM Group
     * @param options The options parameters.
     */
    beginUpdateVMGroupAndWait(resourceGroupName: string, privateCloudName: string, vmGroupId: string, workloadNetworkVMGroup: WorkloadNetworkVMGroup, options?: WorkloadNetworksUpdateVMGroupOptionalParams): Promise<WorkloadNetworksUpdateVMGroupResponse>;
    /**
     * Delete a vm group by id in a private cloud workload network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param privateCloudName Name of the private cloud
     * @param options The options parameters.
     */
    beginDeleteVMGroup(resourceGroupName: string, vmGroupId: string, privateCloudName: string, options?: WorkloadNetworksDeleteVMGroupOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Delete a vm group by id in a private cloud workload network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param privateCloudName Name of the private cloud
     * @param options The options parameters.
     */
    beginDeleteVMGroupAndWait(resourceGroupName: string, vmGroupId: string, privateCloudName: string, options?: WorkloadNetworksDeleteVMGroupOptionalParams): Promise<void>;
    /**
     * Get a virtual machine by id in a private cloud workload network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param virtualMachineId Virtual Machine identifier
     * @param options The options parameters.
     */
    getVirtualMachine(resourceGroupName: string, privateCloudName: string, virtualMachineId: string, options?: WorkloadNetworksGetVirtualMachineOptionalParams): Promise<WorkloadNetworksGetVirtualMachineResponse>;
    /**
     * Get a DNS service by id in a private cloud workload network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dnsServiceId NSX DNS Service identifier. Generally the same as the DNS Service's display name
     * @param options The options parameters.
     */
    getDnsService(resourceGroupName: string, privateCloudName: string, dnsServiceId: string, options?: WorkloadNetworksGetDnsServiceOptionalParams): Promise<WorkloadNetworksGetDnsServiceResponse>;
    /**
     * Create a DNS service by id in a private cloud workload network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dnsServiceId NSX DNS Service identifier. Generally the same as the DNS Service's display name
     * @param workloadNetworkDnsService NSX DNS Service
     * @param options The options parameters.
     */
    beginCreateDnsService(resourceGroupName: string, privateCloudName: string, dnsServiceId: string, workloadNetworkDnsService: WorkloadNetworkDnsService, options?: WorkloadNetworksCreateDnsServiceOptionalParams): Promise<SimplePollerLike<OperationState<WorkloadNetworksCreateDnsServiceResponse>, WorkloadNetworksCreateDnsServiceResponse>>;
    /**
     * Create a DNS service by id in a private cloud workload network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dnsServiceId NSX DNS Service identifier. Generally the same as the DNS Service's display name
     * @param workloadNetworkDnsService NSX DNS Service
     * @param options The options parameters.
     */
    beginCreateDnsServiceAndWait(resourceGroupName: string, privateCloudName: string, dnsServiceId: string, workloadNetworkDnsService: WorkloadNetworkDnsService, options?: WorkloadNetworksCreateDnsServiceOptionalParams): Promise<WorkloadNetworksCreateDnsServiceResponse>;
    /**
     * Create or update a DNS service by id in a private cloud workload network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dnsServiceId NSX DNS Service identifier. Generally the same as the DNS Service's display name
     * @param workloadNetworkDnsService NSX DNS Service
     * @param options The options parameters.
     */
    beginUpdateDnsService(resourceGroupName: string, privateCloudName: string, dnsServiceId: string, workloadNetworkDnsService: WorkloadNetworkDnsService, options?: WorkloadNetworksUpdateDnsServiceOptionalParams): Promise<SimplePollerLike<OperationState<WorkloadNetworksUpdateDnsServiceResponse>, WorkloadNetworksUpdateDnsServiceResponse>>;
    /**
     * Create or update a DNS service by id in a private cloud workload network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dnsServiceId NSX DNS Service identifier. Generally the same as the DNS Service's display name
     * @param workloadNetworkDnsService NSX DNS Service
     * @param options The options parameters.
     */
    beginUpdateDnsServiceAndWait(resourceGroupName: string, privateCloudName: string, dnsServiceId: string, workloadNetworkDnsService: WorkloadNetworkDnsService, options?: WorkloadNetworksUpdateDnsServiceOptionalParams): Promise<WorkloadNetworksUpdateDnsServiceResponse>;
    /**
     * Delete a DNS service by id in a private cloud workload network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsServiceId NSX DNS Service identifier. Generally the same as the DNS Service's display name
     * @param privateCloudName Name of the private cloud
     * @param options The options parameters.
     */
    beginDeleteDnsService(resourceGroupName: string, dnsServiceId: string, privateCloudName: string, options?: WorkloadNetworksDeleteDnsServiceOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Delete a DNS service by id in a private cloud workload network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsServiceId NSX DNS Service identifier. Generally the same as the DNS Service's display name
     * @param privateCloudName Name of the private cloud
     * @param options The options parameters.
     */
    beginDeleteDnsServiceAndWait(resourceGroupName: string, dnsServiceId: string, privateCloudName: string, options?: WorkloadNetworksDeleteDnsServiceOptionalParams): Promise<void>;
    /**
     * Get a DNS zone by id in a private cloud workload network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dnsZoneId NSX DNS Zone identifier. Generally the same as the DNS Zone's display name
     * @param options The options parameters.
     */
    getDnsZone(resourceGroupName: string, privateCloudName: string, dnsZoneId: string, options?: WorkloadNetworksGetDnsZoneOptionalParams): Promise<WorkloadNetworksGetDnsZoneResponse>;
    /**
     * Create a DNS zone by id in a private cloud workload network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dnsZoneId NSX DNS Zone identifier. Generally the same as the DNS Zone's display name
     * @param workloadNetworkDnsZone NSX DNS Zone
     * @param options The options parameters.
     */
    beginCreateDnsZone(resourceGroupName: string, privateCloudName: string, dnsZoneId: string, workloadNetworkDnsZone: WorkloadNetworkDnsZone, options?: WorkloadNetworksCreateDnsZoneOptionalParams): Promise<SimplePollerLike<OperationState<WorkloadNetworksCreateDnsZoneResponse>, WorkloadNetworksCreateDnsZoneResponse>>;
    /**
     * Create a DNS zone by id in a private cloud workload network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dnsZoneId NSX DNS Zone identifier. Generally the same as the DNS Zone's display name
     * @param workloadNetworkDnsZone NSX DNS Zone
     * @param options The options parameters.
     */
    beginCreateDnsZoneAndWait(resourceGroupName: string, privateCloudName: string, dnsZoneId: string, workloadNetworkDnsZone: WorkloadNetworkDnsZone, options?: WorkloadNetworksCreateDnsZoneOptionalParams): Promise<WorkloadNetworksCreateDnsZoneResponse>;
    /**
     * Create or update a DNS zone by id in a private cloud workload network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dnsZoneId NSX DNS Zone identifier. Generally the same as the DNS Zone's display name
     * @param workloadNetworkDnsZone NSX DNS Zone
     * @param options The options parameters.
     */
    beginUpdateDnsZone(resourceGroupName: string, privateCloudName: string, dnsZoneId: string, workloadNetworkDnsZone: WorkloadNetworkDnsZone, options?: WorkloadNetworksUpdateDnsZoneOptionalParams): Promise<SimplePollerLike<OperationState<WorkloadNetworksUpdateDnsZoneResponse>, WorkloadNetworksUpdateDnsZoneResponse>>;
    /**
     * Create or update a DNS zone by id in a private cloud workload network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dnsZoneId NSX DNS Zone identifier. Generally the same as the DNS Zone's display name
     * @param workloadNetworkDnsZone NSX DNS Zone
     * @param options The options parameters.
     */
    beginUpdateDnsZoneAndWait(resourceGroupName: string, privateCloudName: string, dnsZoneId: string, workloadNetworkDnsZone: WorkloadNetworkDnsZone, options?: WorkloadNetworksUpdateDnsZoneOptionalParams): Promise<WorkloadNetworksUpdateDnsZoneResponse>;
    /**
     * Delete a DNS zone by id in a private cloud workload network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsZoneId NSX DNS Zone identifier. Generally the same as the DNS Zone's display name
     * @param privateCloudName Name of the private cloud
     * @param options The options parameters.
     */
    beginDeleteDnsZone(resourceGroupName: string, dnsZoneId: string, privateCloudName: string, options?: WorkloadNetworksDeleteDnsZoneOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Delete a DNS zone by id in a private cloud workload network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsZoneId NSX DNS Zone identifier. Generally the same as the DNS Zone's display name
     * @param privateCloudName Name of the private cloud
     * @param options The options parameters.
     */
    beginDeleteDnsZoneAndWait(resourceGroupName: string, dnsZoneId: string, privateCloudName: string, options?: WorkloadNetworksDeleteDnsZoneOptionalParams): Promise<void>;
    /**
     * Get a Public IP Block by id in a private cloud workload network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param publicIPId NSX Public IP Block identifier. Generally the same as the Public IP Block's
     *                   display name
     * @param options The options parameters.
     */
    getPublicIP(resourceGroupName: string, privateCloudName: string, publicIPId: string, options?: WorkloadNetworksGetPublicIPOptionalParams): Promise<WorkloadNetworksGetPublicIPResponse>;
    /**
     * Create a Public IP Block by id in a private cloud workload network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param publicIPId NSX Public IP Block identifier. Generally the same as the Public IP Block's
     *                   display name
     * @param workloadNetworkPublicIP NSX Public IP Block
     * @param options The options parameters.
     */
    beginCreatePublicIP(resourceGroupName: string, privateCloudName: string, publicIPId: string, workloadNetworkPublicIP: WorkloadNetworkPublicIP, options?: WorkloadNetworksCreatePublicIPOptionalParams): Promise<SimplePollerLike<OperationState<WorkloadNetworksCreatePublicIPResponse>, WorkloadNetworksCreatePublicIPResponse>>;
    /**
     * Create a Public IP Block by id in a private cloud workload network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param publicIPId NSX Public IP Block identifier. Generally the same as the Public IP Block's
     *                   display name
     * @param workloadNetworkPublicIP NSX Public IP Block
     * @param options The options parameters.
     */
    beginCreatePublicIPAndWait(resourceGroupName: string, privateCloudName: string, publicIPId: string, workloadNetworkPublicIP: WorkloadNetworkPublicIP, options?: WorkloadNetworksCreatePublicIPOptionalParams): Promise<WorkloadNetworksCreatePublicIPResponse>;
    /**
     * Delete a Public IP Block by id in a private cloud workload network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publicIPId NSX Public IP Block identifier. Generally the same as the Public IP Block's
     *                   display name
     * @param privateCloudName Name of the private cloud
     * @param options The options parameters.
     */
    beginDeletePublicIP(resourceGroupName: string, publicIPId: string, privateCloudName: string, options?: WorkloadNetworksDeletePublicIPOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Delete a Public IP Block by id in a private cloud workload network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publicIPId NSX Public IP Block identifier. Generally the same as the Public IP Block's
     *                   display name
     * @param privateCloudName Name of the private cloud
     * @param options The options parameters.
     */
    beginDeletePublicIPAndWait(resourceGroupName: string, publicIPId: string, privateCloudName: string, options?: WorkloadNetworksDeletePublicIPOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface WorkloadNetworksCreateDhcpOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createDhcp operation. */
export declare type WorkloadNetworksCreateDhcpResponse = WorkloadNetworkDhcp;

/** Optional parameters. */
export declare interface WorkloadNetworksCreateDnsServiceOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createDnsService operation. */
export declare type WorkloadNetworksCreateDnsServiceResponse = WorkloadNetworkDnsService;

/** Optional parameters. */
export declare interface WorkloadNetworksCreateDnsZoneOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createDnsZone operation. */
export declare type WorkloadNetworksCreateDnsZoneResponse = WorkloadNetworkDnsZone;

/** Optional parameters. */
export declare interface WorkloadNetworksCreatePortMirroringOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createPortMirroring operation. */
export declare type WorkloadNetworksCreatePortMirroringResponse = WorkloadNetworkPortMirroring;

/** Optional parameters. */
export declare interface WorkloadNetworksCreatePublicIPOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createPublicIP operation. */
export declare type WorkloadNetworksCreatePublicIPResponse = WorkloadNetworkPublicIP;

/** Optional parameters. */
export declare interface WorkloadNetworksCreateSegmentsOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createSegments operation. */
export declare type WorkloadNetworksCreateSegmentsResponse = WorkloadNetworkSegment;

/** Optional parameters. */
export declare interface WorkloadNetworksCreateVMGroupOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createVMGroup operation. */
export declare type WorkloadNetworksCreateVMGroupResponse = WorkloadNetworkVMGroup;

/** Optional parameters. */
export declare interface WorkloadNetworksDeleteDhcpOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface WorkloadNetworksDeleteDnsServiceOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface WorkloadNetworksDeleteDnsZoneOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface WorkloadNetworksDeletePortMirroringOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface WorkloadNetworksDeletePublicIPOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface WorkloadNetworksDeleteSegmentOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface WorkloadNetworksDeleteVMGroupOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** NSX Segment */
export declare interface WorkloadNetworkSegment extends ProxyResource {
    /** Display name of the segment. */
    displayName?: string;
    /** Gateway which to connect segment to. */
    connectedGateway?: string;
    /** Subnet which to connect segment to. */
    subnet?: WorkloadNetworkSegmentSubnet;
    /**
     * Port Vif which segment is associated with.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly portVif?: WorkloadNetworkSegmentPortVif[];
    /**
     * Segment status.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: SegmentStatusEnum;
    /**
     * The provisioning state
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: WorkloadNetworkSegmentProvisioningState;
    /** NSX revision number. */
    revision?: number;
}

/** Ports and any VIF attached to segment. */
export declare interface WorkloadNetworkSegmentPortVif {
    /** Name of port or VIF attached to segment. */
    portName?: string;
}

/**
 * Defines values for WorkloadNetworkSegmentProvisioningState. \
 * {@link KnownWorkloadNetworkSegmentProvisioningState} can be used interchangeably with WorkloadNetworkSegmentProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Building** \
 * **Deleting** \
 * **Updating** \
 * **Canceled**
 */
export declare type WorkloadNetworkSegmentProvisioningState = string;

/** A list of NSX Segments */
export declare interface WorkloadNetworkSegmentsList {
    /**
     * The items on the page
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: WorkloadNetworkSegment[];
    /**
     * URL to get the next page if any
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Subnet configuration for segment */
export declare interface WorkloadNetworkSegmentSubnet {
    /** DHCP Range assigned for subnet. */
    dhcpRanges?: string[];
    /** Gateway address. */
    gatewayAddress?: string;
}

/** Optional parameters. */
export declare interface WorkloadNetworksGetDhcpOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getDhcp operation. */
export declare type WorkloadNetworksGetDhcpResponse = WorkloadNetworkDhcp;

/** Optional parameters. */
export declare interface WorkloadNetworksGetDnsServiceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getDnsService operation. */
export declare type WorkloadNetworksGetDnsServiceResponse = WorkloadNetworkDnsService;

/** Optional parameters. */
export declare interface WorkloadNetworksGetDnsZoneOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getDnsZone operation. */
export declare type WorkloadNetworksGetDnsZoneResponse = WorkloadNetworkDnsZone;

/** Optional parameters. */
export declare interface WorkloadNetworksGetGatewayOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getGateway operation. */
export declare type WorkloadNetworksGetGatewayResponse = WorkloadNetworkGateway;

/** Optional parameters. */
export declare interface WorkloadNetworksGetOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface WorkloadNetworksGetPortMirroringOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getPortMirroring operation. */
export declare type WorkloadNetworksGetPortMirroringResponse = WorkloadNetworkPortMirroring;

/** Optional parameters. */
export declare interface WorkloadNetworksGetPublicIPOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getPublicIP operation. */
export declare type WorkloadNetworksGetPublicIPResponse = WorkloadNetworkPublicIP;

/** Contains response data for the get operation. */
export declare type WorkloadNetworksGetResponse = WorkloadNetwork;

/** Optional parameters. */
export declare interface WorkloadNetworksGetSegmentOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getSegment operation. */
export declare type WorkloadNetworksGetSegmentResponse = WorkloadNetworkSegment;

/** Optional parameters. */
export declare interface WorkloadNetworksGetVirtualMachineOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getVirtualMachine operation. */
export declare type WorkloadNetworksGetVirtualMachineResponse = WorkloadNetworkVirtualMachine;

/** Optional parameters. */
export declare interface WorkloadNetworksGetVMGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getVMGroup operation. */
export declare type WorkloadNetworksGetVMGroupResponse = WorkloadNetworkVMGroup;

/** Optional parameters. */
export declare interface WorkloadNetworksListDhcpNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listDhcpNext operation. */
export declare type WorkloadNetworksListDhcpNextResponse = WorkloadNetworkDhcpList;

/** Optional parameters. */
export declare interface WorkloadNetworksListDhcpOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listDhcp operation. */
export declare type WorkloadNetworksListDhcpResponse = WorkloadNetworkDhcpList;

/** Optional parameters. */
export declare interface WorkloadNetworksListDnsServicesNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listDnsServicesNext operation. */
export declare type WorkloadNetworksListDnsServicesNextResponse = WorkloadNetworkDnsServicesList;

/** Optional parameters. */
export declare interface WorkloadNetworksListDnsServicesOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listDnsServices operation. */
export declare type WorkloadNetworksListDnsServicesResponse = WorkloadNetworkDnsServicesList;

/** Optional parameters. */
export declare interface WorkloadNetworksListDnsZonesNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listDnsZonesNext operation. */
export declare type WorkloadNetworksListDnsZonesNextResponse = WorkloadNetworkDnsZonesList;

/** Optional parameters. */
export declare interface WorkloadNetworksListDnsZonesOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listDnsZones operation. */
export declare type WorkloadNetworksListDnsZonesResponse = WorkloadNetworkDnsZonesList;

/** Optional parameters. */
export declare interface WorkloadNetworksListGatewaysNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listGatewaysNext operation. */
export declare type WorkloadNetworksListGatewaysNextResponse = WorkloadNetworkGatewayList;

/** Optional parameters. */
export declare interface WorkloadNetworksListGatewaysOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listGateways operation. */
export declare type WorkloadNetworksListGatewaysResponse = WorkloadNetworkGatewayList;

/** Optional parameters. */
export declare interface WorkloadNetworksListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type WorkloadNetworksListNextResponse = WorkloadNetworkList;

/** Optional parameters. */
export declare interface WorkloadNetworksListOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface WorkloadNetworksListPortMirroringNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listPortMirroringNext operation. */
export declare type WorkloadNetworksListPortMirroringNextResponse = WorkloadNetworkPortMirroringList;

/** Optional parameters. */
export declare interface WorkloadNetworksListPortMirroringOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listPortMirroring operation. */
export declare type WorkloadNetworksListPortMirroringResponse = WorkloadNetworkPortMirroringList;

/** Optional parameters. */
export declare interface WorkloadNetworksListPublicIPsNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listPublicIPsNext operation. */
export declare type WorkloadNetworksListPublicIPsNextResponse = WorkloadNetworkPublicIPsList;

/** Optional parameters. */
export declare interface WorkloadNetworksListPublicIPsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listPublicIPs operation. */
export declare type WorkloadNetworksListPublicIPsResponse = WorkloadNetworkPublicIPsList;

/** Contains response data for the list operation. */
export declare type WorkloadNetworksListResponse = WorkloadNetworkList;

/** Optional parameters. */
export declare interface WorkloadNetworksListSegmentsNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listSegmentsNext operation. */
export declare type WorkloadNetworksListSegmentsNextResponse = WorkloadNetworkSegmentsList;

/** Optional parameters. */
export declare interface WorkloadNetworksListSegmentsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listSegments operation. */
export declare type WorkloadNetworksListSegmentsResponse = WorkloadNetworkSegmentsList;

/** Optional parameters. */
export declare interface WorkloadNetworksListVirtualMachinesNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listVirtualMachinesNext operation. */
export declare type WorkloadNetworksListVirtualMachinesNextResponse = WorkloadNetworkVirtualMachinesList;

/** Optional parameters. */
export declare interface WorkloadNetworksListVirtualMachinesOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listVirtualMachines operation. */
export declare type WorkloadNetworksListVirtualMachinesResponse = WorkloadNetworkVirtualMachinesList;

/** Optional parameters. */
export declare interface WorkloadNetworksListVMGroupsNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listVMGroupsNext operation. */
export declare type WorkloadNetworksListVMGroupsNextResponse = WorkloadNetworkVMGroupsList;

/** Optional parameters. */
export declare interface WorkloadNetworksListVMGroupsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listVMGroups operation. */
export declare type WorkloadNetworksListVMGroupsResponse = WorkloadNetworkVMGroupsList;

/** Optional parameters. */
export declare interface WorkloadNetworksUpdateDhcpOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the updateDhcp operation. */
export declare type WorkloadNetworksUpdateDhcpResponse = WorkloadNetworkDhcp;

/** Optional parameters. */
export declare interface WorkloadNetworksUpdateDnsServiceOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the updateDnsService operation. */
export declare type WorkloadNetworksUpdateDnsServiceResponse = WorkloadNetworkDnsService;

/** Optional parameters. */
export declare interface WorkloadNetworksUpdateDnsZoneOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the updateDnsZone operation. */
export declare type WorkloadNetworksUpdateDnsZoneResponse = WorkloadNetworkDnsZone;

/** Optional parameters. */
export declare interface WorkloadNetworksUpdatePortMirroringOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the updatePortMirroring operation. */
export declare type WorkloadNetworksUpdatePortMirroringResponse = WorkloadNetworkPortMirroring;

/** Optional parameters. */
export declare interface WorkloadNetworksUpdateSegmentsOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the updateSegments operation. */
export declare type WorkloadNetworksUpdateSegmentsResponse = WorkloadNetworkSegment;

/** Optional parameters. */
export declare interface WorkloadNetworksUpdateVMGroupOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the updateVMGroup operation. */
export declare type WorkloadNetworksUpdateVMGroupResponse = WorkloadNetworkVMGroup;

/** NSX Virtual Machine */
export declare interface WorkloadNetworkVirtualMachine extends ProxyResource {
    /** Display name of the VM. */
    displayName?: string;
    /**
     * Virtual machine type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly vmType?: VMTypeEnum;
}

/** A list of NSX Virtual Machines */
export declare interface WorkloadNetworkVirtualMachinesList {
    /**
     * The items on the page
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: WorkloadNetworkVirtualMachine[];
    /**
     * URL to get the next page if any
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** NSX VM Group */
export declare interface WorkloadNetworkVMGroup extends ProxyResource {
    /** Display name of the VM group. */
    displayName?: string;
    /** Virtual machine members of this group. */
    members?: string[];
    /**
     * VM Group status.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: VMGroupStatusEnum;
    /**
     * The provisioning state
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: WorkloadNetworkVMGroupProvisioningState;
    /** NSX revision number. */
    revision?: number;
}

/**
 * Defines values for WorkloadNetworkVMGroupProvisioningState. \
 * {@link KnownWorkloadNetworkVMGroupProvisioningState} can be used interchangeably with WorkloadNetworkVMGroupProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Building** \
 * **Deleting** \
 * **Updating** \
 * **Canceled**
 */
export declare type WorkloadNetworkVMGroupProvisioningState = string;

/** A list of NSX VM Groups */
export declare interface WorkloadNetworkVMGroupsList {
    /**
     * The items on the page
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: WorkloadNetworkVMGroup[];
    /**
     * URL to get the next page if any
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

export { }
