/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { AzureVMwareSolutionAPI } from "@azure/arm-avs";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to Create or update a addon in a private cloud
 *
 * @summary Create or update a addon in a private cloud
 * x-ms-original-file: specification/vmware/resource-manager/Microsoft.AVS/stable/2023-03-01/examples/Addons_CreateOrUpdate_ArcReg.json
 */
function addonsCreateOrUpdateArc() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["AVS_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = process.env["AVS_RESOURCE_GROUP"] || "group1";
        const privateCloudName = "cloud1";
        const addonName = "arc";
        const addon = {
            properties: {
                addonType: "Arc",
                vCenter: "subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg_test/providers/Microsoft.ConnectedVMwarevSphere/VCenters/test-vcenter"
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new AzureVMwareSolutionAPI(credential, subscriptionId);
        const result = yield client.addons.beginCreateOrUpdateAndWait(resourceGroupName, privateCloudName, addonName, addon);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Create or update a addon in a private cloud
 *
 * @summary Create or update a addon in a private cloud
 * x-ms-original-file: specification/vmware/resource-manager/Microsoft.AVS/stable/2023-03-01/examples/Addons_CreateOrUpdate_HCX.json
 */
function addonsCreateOrUpdateHcx() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["AVS_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = process.env["AVS_RESOURCE_GROUP"] || "group1";
        const privateCloudName = "cloud1";
        const addonName = "hcx";
        const addon = {
            properties: {
                addonType: "HCX",
                offer: "VMware MaaS Cloud Provider (Enterprise)"
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new AzureVMwareSolutionAPI(credential, subscriptionId);
        const result = yield client.addons.beginCreateOrUpdateAndWait(resourceGroupName, privateCloudName, addonName, addon);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Create or update a addon in a private cloud
 *
 * @summary Create or update a addon in a private cloud
 * x-ms-original-file: specification/vmware/resource-manager/Microsoft.AVS/stable/2023-03-01/examples/Addons_CreateOrUpdate_SRM.json
 */
function addonsCreateOrUpdateSrm() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["AVS_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = process.env["AVS_RESOURCE_GROUP"] || "group1";
        const privateCloudName = "cloud1";
        const addonName = "srm";
        const addon = {
            properties: {
                addonType: "SRM",
                licenseKey: "41915178-A8FF-4A4D-B683-6D735AF5E3F5"
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new AzureVMwareSolutionAPI(credential, subscriptionId);
        const result = yield client.addons.beginCreateOrUpdateAndWait(resourceGroupName, privateCloudName, addonName, addon);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Create or update a addon in a private cloud
 *
 * @summary Create or update a addon in a private cloud
 * x-ms-original-file: specification/vmware/resource-manager/Microsoft.AVS/stable/2023-03-01/examples/Addons_CreateOrUpdate_VR.json
 */
function addonsCreateOrUpdateVr() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["AVS_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = process.env["AVS_RESOURCE_GROUP"] || "group1";
        const privateCloudName = "cloud1";
        const addonName = "vr";
        const addon = { properties: { addonType: "VR", vrsCount: 1 } };
        const credential = new DefaultAzureCredential();
        const client = new AzureVMwareSolutionAPI(credential, subscriptionId);
        const result = yield client.addons.beginCreateOrUpdateAndWait(resourceGroupName, privateCloudName, addonName, addon);
        console.log(result);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        addonsCreateOrUpdateArc();
        addonsCreateOrUpdateHcx();
        addonsCreateOrUpdateSrm();
        addonsCreateOrUpdateVr();
    });
}
main().catch(console.error);
//# sourceMappingURL=addonsCreateOrUpdateSample.js.map