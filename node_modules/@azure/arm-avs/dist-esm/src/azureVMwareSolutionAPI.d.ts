import * as coreClient from "@azure/core-client";
import * as coreAuth from "@azure/core-auth";
import { Operations, Locations, PrivateClouds, Clusters, Datastores, HcxEnterpriseSites, Authorizations, GlobalReachConnections, WorkloadNetworks, CloudLinks, Addons, VirtualMachines, PlacementPolicies, ScriptPackages, ScriptCmdlets, ScriptExecutions } from "./operationsInterfaces";
import { AzureVMwareSolutionAPIOptionalParams } from "./models";
export declare class AzureVMwareSolutionAPI extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the AzureVMwareSolutionAPI class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: AzureVMwareSolutionAPIOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    operations: Operations;
    locations: Locations;
    privateClouds: PrivateClouds;
    clusters: Clusters;
    datastores: Datastores;
    hcxEnterpriseSites: HcxEnterpriseSites;
    authorizations: Authorizations;
    globalReachConnections: GlobalReachConnections;
    workloadNetworks: WorkloadNetworks;
    cloudLinks: CloudLinks;
    addons: Addons;
    virtualMachines: VirtualMachines;
    placementPolicies: PlacementPolicies;
    scriptPackages: ScriptPackages;
    scriptCmdlets: ScriptCmdlets;
    scriptExecutions: ScriptExecutions;
}
//# sourceMappingURL=azureVMwareSolutionAPI.d.ts.map