import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { ScriptExecutions } from "../operationsInterfaces";
import { AzureVMwareSolutionAPI } from "../azureVMwareSolutionAPI";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import { ScriptExecution, ScriptExecutionsListOptionalParams, ScriptExecutionsGetOptionalParams, ScriptExecutionsGetResponse, ScriptExecutionsCreateOrUpdateOptionalParams, ScriptExecutionsCreateOrUpdateResponse, ScriptExecutionsDeleteOptionalParams, ScriptExecutionsGetExecutionLogsOptionalParams, ScriptExecutionsGetExecutionLogsResponse } from "../models";
/** Class containing ScriptExecutions operations. */
export declare class ScriptExecutionsImpl implements ScriptExecutions {
    private readonly client;
    /**
     * Initialize a new instance of the class ScriptExecutions class.
     * @param client Reference to the service client
     */
    constructor(client: AzureVMwareSolutionAPI);
    /**
     * List script executions in a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param options The options parameters.
     */
    list(resourceGroupName: string, privateCloudName: string, options?: ScriptExecutionsListOptionalParams): PagedAsyncIterableIterator<ScriptExecution>;
    private listPagingPage;
    private listPagingAll;
    /**
     * List script executions in a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param options The options parameters.
     */
    private _list;
    /**
     * Get an script execution by name in a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param scriptExecutionName Name of the user-invoked script execution resource
     * @param options The options parameters.
     */
    get(resourceGroupName: string, privateCloudName: string, scriptExecutionName: string, options?: ScriptExecutionsGetOptionalParams): Promise<ScriptExecutionsGetResponse>;
    /**
     * Create or update a script execution in a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName The name of the private cloud.
     * @param scriptExecutionName Name of the user-invoked script execution resource
     * @param scriptExecution A script running in the private cloud
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, privateCloudName: string, scriptExecutionName: string, scriptExecution: ScriptExecution, options?: ScriptExecutionsCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<ScriptExecutionsCreateOrUpdateResponse>, ScriptExecutionsCreateOrUpdateResponse>>;
    /**
     * Create or update a script execution in a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName The name of the private cloud.
     * @param scriptExecutionName Name of the user-invoked script execution resource
     * @param scriptExecution A script running in the private cloud
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, privateCloudName: string, scriptExecutionName: string, scriptExecution: ScriptExecution, options?: ScriptExecutionsCreateOrUpdateOptionalParams): Promise<ScriptExecutionsCreateOrUpdateResponse>;
    /**
     * Cancel a ScriptExecution in a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param scriptExecutionName Name of the user-invoked script execution resource
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, privateCloudName: string, scriptExecutionName: string, options?: ScriptExecutionsDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Cancel a ScriptExecution in a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param scriptExecutionName Name of the user-invoked script execution resource
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, privateCloudName: string, scriptExecutionName: string, options?: ScriptExecutionsDeleteOptionalParams): Promise<void>;
    /**
     * Return the logs for a script execution resource
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param scriptExecutionName Name of the user-invoked script execution resource
     * @param options The options parameters.
     */
    getExecutionLogs(resourceGroupName: string, privateCloudName: string, scriptExecutionName: string, options?: ScriptExecutionsGetExecutionLogsOptionalParams): Promise<ScriptExecutionsGetExecutionLogsResponse>;
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
}
//# sourceMappingURL=scriptExecutions.d.ts.map