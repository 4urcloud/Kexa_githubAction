import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Datastores } from "../operationsInterfaces";
import { AzureVMwareSolutionAPI } from "../azureVMwareSolutionAPI";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import { Datastore, DatastoresListOptionalParams, DatastoresGetOptionalParams, DatastoresGetResponse, DatastoresCreateOrUpdateOptionalParams, DatastoresCreateOrUpdateResponse, DatastoresDeleteOptionalParams } from "../models";
/** Class containing Datastores operations. */
export declare class DatastoresImpl implements Datastores {
    private readonly client;
    /**
     * Initialize a new instance of the class Datastores class.
     * @param client Reference to the service client
     */
    constructor(client: AzureVMwareSolutionAPI);
    /**
     * List datastores in a private cloud cluster
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param clusterName Name of the cluster in the private cloud
     * @param options The options parameters.
     */
    list(resourceGroupName: string, privateCloudName: string, clusterName: string, options?: DatastoresListOptionalParams): PagedAsyncIterableIterator<Datastore>;
    private listPagingPage;
    private listPagingAll;
    /**
     * List datastores in a private cloud cluster
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param clusterName Name of the cluster in the private cloud
     * @param options The options parameters.
     */
    private _list;
    /**
     * Get a datastore in a private cloud cluster
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param clusterName Name of the cluster in the private cloud
     * @param datastoreName Name of the datastore in the private cloud cluster
     * @param options The options parameters.
     */
    get(resourceGroupName: string, privateCloudName: string, clusterName: string, datastoreName: string, options?: DatastoresGetOptionalParams): Promise<DatastoresGetResponse>;
    /**
     * Create or update a datastore in a private cloud cluster
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param clusterName Name of the cluster in the private cloud
     * @param datastoreName Name of the datastore in the private cloud cluster
     * @param datastore A datastore in a private cloud cluster
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, privateCloudName: string, clusterName: string, datastoreName: string, datastore: Datastore, options?: DatastoresCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<DatastoresCreateOrUpdateResponse>, DatastoresCreateOrUpdateResponse>>;
    /**
     * Create or update a datastore in a private cloud cluster
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param clusterName Name of the cluster in the private cloud
     * @param datastoreName Name of the datastore in the private cloud cluster
     * @param datastore A datastore in a private cloud cluster
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, privateCloudName: string, clusterName: string, datastoreName: string, datastore: Datastore, options?: DatastoresCreateOrUpdateOptionalParams): Promise<DatastoresCreateOrUpdateResponse>;
    /**
     * Delete a datastore in a private cloud cluster
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param clusterName Name of the cluster in the private cloud
     * @param datastoreName Name of the datastore in the private cloud cluster
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, privateCloudName: string, clusterName: string, datastoreName: string, options?: DatastoresDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Delete a datastore in a private cloud cluster
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param clusterName Name of the cluster in the private cloud
     * @param datastoreName Name of the datastore in the private cloud cluster
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, privateCloudName: string, clusterName: string, datastoreName: string, options?: DatastoresDeleteOptionalParams): Promise<void>;
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param clusterName Name of the cluster in the private cloud
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
}
//# sourceMappingURL=datastores.d.ts.map