import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PrivateClouds } from "../operationsInterfaces";
import { AzureVMwareSolutionAPI } from "../azureVMwareSolutionAPI";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import { PrivateCloud, PrivateCloudsListOptionalParams, PrivateCloudsListInSubscriptionOptionalParams, PrivateCloudsGetOptionalParams, PrivateCloudsGetResponse, PrivateCloudsCreateOrUpdateOptionalParams, PrivateCloudsCreateOrUpdateResponse, PrivateCloudUpdate, PrivateCloudsUpdateOptionalParams, PrivateCloudsUpdateResponse, PrivateCloudsDeleteOptionalParams, PrivateCloudsRotateVcenterPasswordOptionalParams, PrivateCloudsRotateNsxtPasswordOptionalParams, PrivateCloudsListAdminCredentialsOptionalParams, PrivateCloudsListAdminCredentialsResponse } from "../models";
/** Class containing PrivateClouds operations. */
export declare class PrivateCloudsImpl implements PrivateClouds {
    private readonly client;
    /**
     * Initialize a new instance of the class PrivateClouds class.
     * @param client Reference to the service client
     */
    constructor(client: AzureVMwareSolutionAPI);
    /**
     * List private clouds in a resource group
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, options?: PrivateCloudsListOptionalParams): PagedAsyncIterableIterator<PrivateCloud>;
    private listPagingPage;
    private listPagingAll;
    /**
     * List private clouds in a subscription
     * @param options The options parameters.
     */
    listInSubscription(options?: PrivateCloudsListInSubscriptionOptionalParams): PagedAsyncIterableIterator<PrivateCloud>;
    private listInSubscriptionPagingPage;
    private listInSubscriptionPagingAll;
    /**
     * List private clouds in a resource group
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    private _list;
    /**
     * List private clouds in a subscription
     * @param options The options parameters.
     */
    private _listInSubscription;
    /**
     * Get a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param options The options parameters.
     */
    get(resourceGroupName: string, privateCloudName: string, options?: PrivateCloudsGetOptionalParams): Promise<PrivateCloudsGetResponse>;
    /**
     * Create or update a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param privateCloud The private cloud
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, privateCloudName: string, privateCloud: PrivateCloud, options?: PrivateCloudsCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<PrivateCloudsCreateOrUpdateResponse>, PrivateCloudsCreateOrUpdateResponse>>;
    /**
     * Create or update a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param privateCloud The private cloud
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, privateCloudName: string, privateCloud: PrivateCloud, options?: PrivateCloudsCreateOrUpdateOptionalParams): Promise<PrivateCloudsCreateOrUpdateResponse>;
    /**
     * Update a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param privateCloudUpdate The private cloud properties to be updated
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, privateCloudName: string, privateCloudUpdate: PrivateCloudUpdate, options?: PrivateCloudsUpdateOptionalParams): Promise<SimplePollerLike<OperationState<PrivateCloudsUpdateResponse>, PrivateCloudsUpdateResponse>>;
    /**
     * Update a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param privateCloudUpdate The private cloud properties to be updated
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, privateCloudName: string, privateCloudUpdate: PrivateCloudUpdate, options?: PrivateCloudsUpdateOptionalParams): Promise<PrivateCloudsUpdateResponse>;
    /**
     * Delete a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, privateCloudName: string, options?: PrivateCloudsDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Delete a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, privateCloudName: string, options?: PrivateCloudsDeleteOptionalParams): Promise<void>;
    /**
     * Rotate the vCenter password
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param options The options parameters.
     */
    beginRotateVcenterPassword(resourceGroupName: string, privateCloudName: string, options?: PrivateCloudsRotateVcenterPasswordOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Rotate the vCenter password
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param options The options parameters.
     */
    beginRotateVcenterPasswordAndWait(resourceGroupName: string, privateCloudName: string, options?: PrivateCloudsRotateVcenterPasswordOptionalParams): Promise<void>;
    /**
     * Rotate the NSX-T Manager password
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param options The options parameters.
     */
    beginRotateNsxtPassword(resourceGroupName: string, privateCloudName: string, options?: PrivateCloudsRotateNsxtPasswordOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Rotate the NSX-T Manager password
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param options The options parameters.
     */
    beginRotateNsxtPasswordAndWait(resourceGroupName: string, privateCloudName: string, options?: PrivateCloudsRotateNsxtPasswordOptionalParams): Promise<void>;
    /**
     * List the admin credentials for the private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param options The options parameters.
     */
    listAdminCredentials(resourceGroupName: string, privateCloudName: string, options?: PrivateCloudsListAdminCredentialsOptionalParams): Promise<PrivateCloudsListAdminCredentialsResponse>;
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
    /**
     * ListInSubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the ListInSubscription method.
     * @param options The options parameters.
     */
    private _listInSubscriptionNext;
}
//# sourceMappingURL=privateClouds.d.ts.map