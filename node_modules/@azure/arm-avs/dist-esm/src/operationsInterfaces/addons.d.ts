import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import { Addon, AddonsListOptionalParams, AddonsGetOptionalParams, AddonsGetResponse, AddonsCreateOrUpdateOptionalParams, AddonsCreateOrUpdateResponse, AddonsDeleteOptionalParams } from "../models";
/** Interface representing a Addons. */
export interface Addons {
    /**
     * List addons in a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param options The options parameters.
     */
    list(resourceGroupName: string, privateCloudName: string, options?: AddonsListOptionalParams): PagedAsyncIterableIterator<Addon>;
    /**
     * Get an addon by name in a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param addonName Name of the addon for the private cloud
     * @param options The options parameters.
     */
    get(resourceGroupName: string, privateCloudName: string, addonName: string, options?: AddonsGetOptionalParams): Promise<AddonsGetResponse>;
    /**
     * Create or update a addon in a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName The name of the private cloud.
     * @param addonName Name of the addon for the private cloud
     * @param addon A addon in the private cloud
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, privateCloudName: string, addonName: string, addon: Addon, options?: AddonsCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<AddonsCreateOrUpdateResponse>, AddonsCreateOrUpdateResponse>>;
    /**
     * Create or update a addon in a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName The name of the private cloud.
     * @param addonName Name of the addon for the private cloud
     * @param addon A addon in the private cloud
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, privateCloudName: string, addonName: string, addon: Addon, options?: AddonsCreateOrUpdateOptionalParams): Promise<AddonsCreateOrUpdateResponse>;
    /**
     * Delete a addon in a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param addonName Name of the addon for the private cloud
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, privateCloudName: string, addonName: string, options?: AddonsDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Delete a addon in a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param addonName Name of the addon for the private cloud
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, privateCloudName: string, addonName: string, options?: AddonsDeleteOptionalParams): Promise<void>;
}
//# sourceMappingURL=addons.d.ts.map