import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import { ExpressRouteAuthorization, AuthorizationsListOptionalParams, AuthorizationsGetOptionalParams, AuthorizationsGetResponse, AuthorizationsCreateOrUpdateOptionalParams, AuthorizationsCreateOrUpdateResponse, AuthorizationsDeleteOptionalParams } from "../models";
/** Interface representing a Authorizations. */
export interface Authorizations {
    /**
     * List ExpressRoute Circuit Authorizations in a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param options The options parameters.
     */
    list(resourceGroupName: string, privateCloudName: string, options?: AuthorizationsListOptionalParams): PagedAsyncIterableIterator<ExpressRouteAuthorization>;
    /**
     * Get an ExpressRoute Circuit Authorization by name in a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param authorizationName Name of the ExpressRoute Circuit Authorization in the private cloud
     * @param options The options parameters.
     */
    get(resourceGroupName: string, privateCloudName: string, authorizationName: string, options?: AuthorizationsGetOptionalParams): Promise<AuthorizationsGetResponse>;
    /**
     * Create or update an ExpressRoute Circuit Authorization in a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName The name of the private cloud.
     * @param authorizationName Name of the ExpressRoute Circuit Authorization in the private cloud
     * @param authorization An ExpressRoute Circuit Authorization
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, privateCloudName: string, authorizationName: string, authorization: ExpressRouteAuthorization, options?: AuthorizationsCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<AuthorizationsCreateOrUpdateResponse>, AuthorizationsCreateOrUpdateResponse>>;
    /**
     * Create or update an ExpressRoute Circuit Authorization in a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName The name of the private cloud.
     * @param authorizationName Name of the ExpressRoute Circuit Authorization in the private cloud
     * @param authorization An ExpressRoute Circuit Authorization
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, privateCloudName: string, authorizationName: string, authorization: ExpressRouteAuthorization, options?: AuthorizationsCreateOrUpdateOptionalParams): Promise<AuthorizationsCreateOrUpdateResponse>;
    /**
     * Delete an ExpressRoute Circuit Authorization in a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param authorizationName Name of the ExpressRoute Circuit Authorization in the private cloud
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, privateCloudName: string, authorizationName: string, options?: AuthorizationsDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Delete an ExpressRoute Circuit Authorization in a private cloud
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param authorizationName Name of the ExpressRoute Circuit Authorization in the private cloud
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, privateCloudName: string, authorizationName: string, options?: AuthorizationsDeleteOptionalParams): Promise<void>;
}
//# sourceMappingURL=authorizations.d.ts.map