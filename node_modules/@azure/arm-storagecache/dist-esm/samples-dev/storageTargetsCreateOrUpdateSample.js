/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { StorageCacheManagementClient } from "@azure/arm-storagecache";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to Create or update a Storage Target. This operation is allowed at any time, but if the cache is down or unhealthy, the actual creation/modification of the Storage Target may be delayed until the cache is healthy again.
 *
 * @summary Create or update a Storage Target. This operation is allowed at any time, but if the cache is down or unhealthy, the actual creation/modification of the Storage Target may be delayed until the cache is healthy again.
 * x-ms-original-file: specification/storagecache/resource-manager/Microsoft.StorageCache/stable/2023-05-01/examples/StorageTargets_CreateOrUpdate.json
 */
function storageTargetsCreateOrUpdate() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["STORAGECACHE_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = process.env["STORAGECACHE_RESOURCE_GROUP"] || "scgroup";
        const cacheName = "sc1";
        const storageTargetName = "st1";
        const storagetarget = {
            junctions: [
                {
                    namespacePath: "/path/on/cache",
                    nfsAccessPolicy: "default",
                    nfsExport: "exp1",
                    targetPath: "/path/on/exp1"
                },
                {
                    namespacePath: "/path2/on/cache",
                    nfsAccessPolicy: "rootSquash",
                    nfsExport: "exp2",
                    targetPath: "/path2/on/exp2"
                }
            ],
            nfs3: {
                target: "10.0.44.44",
                usageModel: "READ_ONLY",
                verificationTimer: 30
            },
            targetType: "nfs3"
        };
        const credential = new DefaultAzureCredential();
        const client = new StorageCacheManagementClient(credential, subscriptionId);
        const result = yield client.storageTargets.beginCreateOrUpdateAndWait(resourceGroupName, cacheName, storageTargetName, storagetarget);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Create or update a Storage Target. This operation is allowed at any time, but if the cache is down or unhealthy, the actual creation/modification of the Storage Target may be delayed until the cache is healthy again.
 *
 * @summary Create or update a Storage Target. This operation is allowed at any time, but if the cache is down or unhealthy, the actual creation/modification of the Storage Target may be delayed until the cache is healthy again.
 * x-ms-original-file: specification/storagecache/resource-manager/Microsoft.StorageCache/stable/2023-05-01/examples/StorageTargets_CreateOrUpdate_BlobNfs.json
 */
function storageTargetsCreateOrUpdateBlobNfs() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["STORAGECACHE_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = process.env["STORAGECACHE_RESOURCE_GROUP"] || "scgroup";
        const cacheName = "sc1";
        const storageTargetName = "st1";
        const storagetarget = {
            blobNfs: {
                target: "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/scgroup/providers/Microsoft.Storage/storageAccounts/blofnfs/blobServices/default/containers/blobnfs",
                usageModel: "READ_WRITE",
                verificationTimer: 28800,
                writeBackTimer: 3600
            },
            junctions: [{ namespacePath: "/blobnfs" }],
            targetType: "blobNfs"
        };
        const credential = new DefaultAzureCredential();
        const client = new StorageCacheManagementClient(credential, subscriptionId);
        const result = yield client.storageTargets.beginCreateOrUpdateAndWait(resourceGroupName, cacheName, storageTargetName, storagetarget);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Create or update a Storage Target. This operation is allowed at any time, but if the cache is down or unhealthy, the actual creation/modification of the Storage Target may be delayed until the cache is healthy again.
 *
 * @summary Create or update a Storage Target. This operation is allowed at any time, but if the cache is down or unhealthy, the actual creation/modification of the Storage Target may be delayed until the cache is healthy again.
 * x-ms-original-file: specification/storagecache/resource-manager/Microsoft.StorageCache/stable/2023-05-01/examples/StorageTargets_CreateOrUpdate_NoJunctions.json
 */
function storageTargetsCreateOrUpdateNoJunctions() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["STORAGECACHE_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = process.env["STORAGECACHE_RESOURCE_GROUP"] || "scgroup";
        const cacheName = "sc1";
        const storageTargetName = "st1";
        const storagetarget = {
            nfs3: {
                target: "10.0.44.44",
                usageModel: "READ_ONLY",
                verificationTimer: 30
            },
            targetType: "nfs3"
        };
        const credential = new DefaultAzureCredential();
        const client = new StorageCacheManagementClient(credential, subscriptionId);
        const result = yield client.storageTargets.beginCreateOrUpdateAndWait(resourceGroupName, cacheName, storageTargetName, storagetarget);
        console.log(result);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        storageTargetsCreateOrUpdate();
        storageTargetsCreateOrUpdateBlobNfs();
        storageTargetsCreateOrUpdateNoJunctions();
    });
}
main().catch(console.error);
//# sourceMappingURL=storageTargetsCreateOrUpdateSample.js.map