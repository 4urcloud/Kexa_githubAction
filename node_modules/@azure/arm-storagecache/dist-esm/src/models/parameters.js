/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { AmlFilesystem as AmlFilesystemMapper, AmlFilesystemUpdate as AmlFilesystemUpdateMapper, AmlFilesystemArchiveInfo as AmlFilesystemArchiveInfoMapper, AmlFilesystemSubnetInfo as AmlFilesystemSubnetInfoMapper, RequiredAmlFilesystemSubnetsSizeInfo as RequiredAmlFilesystemSubnetsSizeInfoMapper, Cache as CacheMapper, PrimingJob as PrimingJobMapper, PrimingJobIdParameter as PrimingJobIdParameterMapper, StorageTarget as StorageTargetMapper } from "../models/mappers";
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2023-05-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const amlFilesystemName = {
    parameterPath: "amlFilesystemName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[0-9a-zA-Z][-0-9a-zA-Z_]{0,78}[0-9a-zA-Z]$"),
            MaxLength: 80,
            MinLength: 2
        },
        serializedName: "amlFilesystemName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export const amlFilesystem = {
    parameterPath: "amlFilesystem",
    mapper: AmlFilesystemMapper
};
export const amlFilesystem1 = {
    parameterPath: "amlFilesystem",
    mapper: AmlFilesystemUpdateMapper
};
export const archiveInfo = {
    parameterPath: ["options", "archiveInfo"],
    mapper: AmlFilesystemArchiveInfoMapper
};
export const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const amlFilesystemSubnetInfo = {
    parameterPath: ["options", "amlFilesystemSubnetInfo"],
    mapper: AmlFilesystemSubnetInfoMapper
};
export const requiredAMLFilesystemSubnetsSizeInfo = {
    parameterPath: ["options", "requiredAMLFilesystemSubnetsSizeInfo"],
    mapper: RequiredAmlFilesystemSubnetsSizeInfoMapper
};
export const location = {
    parameterPath: "location",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "location",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const operationId = {
    parameterPath: "operationId",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "operationId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const location1 = {
    parameterPath: "location",
    mapper: {
        serializedName: "location",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const cacheName = {
    parameterPath: "cacheName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[-0-9a-zA-Z_]{1,80}$")
        },
        serializedName: "cacheName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const cache = {
    parameterPath: "cache",
    mapper: CacheMapper
};
export const cache1 = {
    parameterPath: ["options", "cache"],
    mapper: CacheMapper
};
export const primingjob = {
    parameterPath: ["options", "primingjob"],
    mapper: PrimingJobMapper
};
export const primingJobId = {
    parameterPath: ["options", "primingJobId"],
    mapper: PrimingJobIdParameterMapper
};
export const spaceAllocation = {
    parameterPath: ["options", "spaceAllocation"],
    mapper: {
        serializedName: "spaceAllocation",
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "Composite",
                    className: "StorageTargetSpaceAllocation"
                }
            }
        }
    }
};
export const storageTargetName = {
    parameterPath: "storageTargetName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[-0-9a-zA-Z_]{1,80}$")
        },
        serializedName: "storageTargetName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const force = {
    parameterPath: ["options", "force"],
    mapper: {
        serializedName: "force",
        type: {
            name: "String"
        }
    }
};
export const storagetarget = {
    parameterPath: "storagetarget",
    mapper: StorageTargetMapper
};
//# sourceMappingURL=parameters.js.map