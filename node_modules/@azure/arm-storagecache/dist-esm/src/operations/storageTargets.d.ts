import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { StorageTargets } from "../operationsInterfaces";
import { StorageCacheManagementClient } from "../storageCacheManagementClient";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import { StorageTarget, StorageTargetsListByCacheOptionalParams, StorageTargetsDnsRefreshOptionalParams, StorageTargetsDeleteOptionalParams, StorageTargetsGetOptionalParams, StorageTargetsGetResponse, StorageTargetsCreateOrUpdateOptionalParams, StorageTargetsCreateOrUpdateResponse, StorageTargetsRestoreDefaultsOptionalParams } from "../models";
/** Class containing StorageTargets operations. */
export declare class StorageTargetsImpl implements StorageTargets {
    private readonly client;
    /**
     * Initialize a new instance of the class StorageTargets class.
     * @param client Reference to the service client
     */
    constructor(client: StorageCacheManagementClient);
    /**
     * Returns a list of Storage Targets for the specified cache.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param options The options parameters.
     */
    listByCache(resourceGroupName: string, cacheName: string, options?: StorageTargetsListByCacheOptionalParams): PagedAsyncIterableIterator<StorageTarget>;
    private listByCachePagingPage;
    private listByCachePagingAll;
    /**
     * Tells a storage target to refresh its DNS information.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param storageTargetName Name of Storage Target.
     * @param options The options parameters.
     */
    beginDnsRefresh(resourceGroupName: string, cacheName: string, storageTargetName: string, options?: StorageTargetsDnsRefreshOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Tells a storage target to refresh its DNS information.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param storageTargetName Name of Storage Target.
     * @param options The options parameters.
     */
    beginDnsRefreshAndWait(resourceGroupName: string, cacheName: string, storageTargetName: string, options?: StorageTargetsDnsRefreshOptionalParams): Promise<void>;
    /**
     * Returns a list of Storage Targets for the specified cache.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param options The options parameters.
     */
    private _listByCache;
    /**
     * Removes a Storage Target from a cache. This operation is allowed at any time, but if the cache is
     * down or unhealthy, the actual removal of the Storage Target may be delayed until the cache is
     * healthy again. Note that if the cache has data to flush to the Storage Target, the data will be
     * flushed before the Storage Target will be deleted.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param storageTargetName Name of Storage Target.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, cacheName: string, storageTargetName: string, options?: StorageTargetsDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Removes a Storage Target from a cache. This operation is allowed at any time, but if the cache is
     * down or unhealthy, the actual removal of the Storage Target may be delayed until the cache is
     * healthy again. Note that if the cache has data to flush to the Storage Target, the data will be
     * flushed before the Storage Target will be deleted.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param storageTargetName Name of Storage Target.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, cacheName: string, storageTargetName: string, options?: StorageTargetsDeleteOptionalParams): Promise<void>;
    /**
     * Returns a Storage Target from a cache.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param storageTargetName Name of Storage Target.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, cacheName: string, storageTargetName: string, options?: StorageTargetsGetOptionalParams): Promise<StorageTargetsGetResponse>;
    /**
     * Create or update a Storage Target. This operation is allowed at any time, but if the cache is down
     * or unhealthy, the actual creation/modification of the Storage Target may be delayed until the cache
     * is healthy again.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param storageTargetName Name of Storage Target.
     * @param storagetarget Object containing the definition of a Storage Target.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, cacheName: string, storageTargetName: string, storagetarget: StorageTarget, options?: StorageTargetsCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<StorageTargetsCreateOrUpdateResponse>, StorageTargetsCreateOrUpdateResponse>>;
    /**
     * Create or update a Storage Target. This operation is allowed at any time, but if the cache is down
     * or unhealthy, the actual creation/modification of the Storage Target may be delayed until the cache
     * is healthy again.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param storageTargetName Name of Storage Target.
     * @param storagetarget Object containing the definition of a Storage Target.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, cacheName: string, storageTargetName: string, storagetarget: StorageTarget, options?: StorageTargetsCreateOrUpdateOptionalParams): Promise<StorageTargetsCreateOrUpdateResponse>;
    /**
     * Tells a storage target to restore its settings to their default values.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param storageTargetName Name of Storage Target.
     * @param options The options parameters.
     */
    beginRestoreDefaults(resourceGroupName: string, cacheName: string, storageTargetName: string, options?: StorageTargetsRestoreDefaultsOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Tells a storage target to restore its settings to their default values.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param storageTargetName Name of Storage Target.
     * @param options The options parameters.
     */
    beginRestoreDefaultsAndWait(resourceGroupName: string, cacheName: string, storageTargetName: string, options?: StorageTargetsRestoreDefaultsOptionalParams): Promise<void>;
    /**
     * ListByCacheNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param nextLink The nextLink from the previous successful call to the ListByCache method.
     * @param options The options parameters.
     */
    private _listByCacheNext;
}
//# sourceMappingURL=storageTargets.d.ts.map