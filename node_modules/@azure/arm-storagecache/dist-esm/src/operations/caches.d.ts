import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Caches } from "../operationsInterfaces";
import { StorageCacheManagementClient } from "../storageCacheManagementClient";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import { Cache, CachesListOptionalParams, CachesListByResourceGroupOptionalParams, CachesDeleteOptionalParams, CachesGetOptionalParams, CachesGetResponse, CachesCreateOrUpdateOptionalParams, CachesCreateOrUpdateResponse, CachesUpdateOptionalParams, CachesUpdateResponse, CachesDebugInfoOptionalParams, CachesFlushOptionalParams, CachesStartOptionalParams, CachesStopOptionalParams, CachesStartPrimingJobOptionalParams, CachesStartPrimingJobResponse, CachesStopPrimingJobOptionalParams, CachesStopPrimingJobResponse, CachesPausePrimingJobOptionalParams, CachesPausePrimingJobResponse, CachesResumePrimingJobOptionalParams, CachesResumePrimingJobResponse, CachesUpgradeFirmwareOptionalParams, CachesSpaceAllocationOptionalParams, CachesSpaceAllocationResponse } from "../models";
/** Class containing Caches operations. */
export declare class CachesImpl implements Caches {
    private readonly client;
    /**
     * Initialize a new instance of the class Caches class.
     * @param client Reference to the service client
     */
    constructor(client: StorageCacheManagementClient);
    /**
     * Returns all caches the user has access to under a subscription.
     * @param options The options parameters.
     */
    list(options?: CachesListOptionalParams): PagedAsyncIterableIterator<Cache>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Returns all caches the user has access to under a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: CachesListByResourceGroupOptionalParams): PagedAsyncIterableIterator<Cache>;
    private listByResourceGroupPagingPage;
    private listByResourceGroupPagingAll;
    /**
     * Returns all caches the user has access to under a subscription.
     * @param options The options parameters.
     */
    private _list;
    /**
     * Returns all caches the user has access to under a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    private _listByResourceGroup;
    /**
     * Schedules a cache for deletion.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, cacheName: string, options?: CachesDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Schedules a cache for deletion.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, cacheName: string, options?: CachesDeleteOptionalParams): Promise<void>;
    /**
     * Returns a cache.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, cacheName: string, options?: CachesGetOptionalParams): Promise<CachesGetResponse>;
    /**
     * Create or update a cache.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param cache Object containing the user-selectable properties of the new cache. If read-only
     *              properties are included, they must match the existing values of those properties.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, cacheName: string, cache: Cache, options?: CachesCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<CachesCreateOrUpdateResponse>, CachesCreateOrUpdateResponse>>;
    /**
     * Create or update a cache.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param cache Object containing the user-selectable properties of the new cache. If read-only
     *              properties are included, they must match the existing values of those properties.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, cacheName: string, cache: Cache, options?: CachesCreateOrUpdateOptionalParams): Promise<CachesCreateOrUpdateResponse>;
    /**
     * Update a cache instance.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, cacheName: string, options?: CachesUpdateOptionalParams): Promise<SimplePollerLike<OperationState<CachesUpdateResponse>, CachesUpdateResponse>>;
    /**
     * Update a cache instance.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, cacheName: string, options?: CachesUpdateOptionalParams): Promise<CachesUpdateResponse>;
    /**
     * Tells a cache to write generate debug info for support to process.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param options The options parameters.
     */
    beginDebugInfo(resourceGroupName: string, cacheName: string, options?: CachesDebugInfoOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Tells a cache to write generate debug info for support to process.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param options The options parameters.
     */
    beginDebugInfoAndWait(resourceGroupName: string, cacheName: string, options?: CachesDebugInfoOptionalParams): Promise<void>;
    /**
     * Tells a cache to write all dirty data to the Storage Target(s). During the flush, clients will see
     * errors returned until the flush is complete.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param options The options parameters.
     */
    beginFlush(resourceGroupName: string, cacheName: string, options?: CachesFlushOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Tells a cache to write all dirty data to the Storage Target(s). During the flush, clients will see
     * errors returned until the flush is complete.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param options The options parameters.
     */
    beginFlushAndWait(resourceGroupName: string, cacheName: string, options?: CachesFlushOptionalParams): Promise<void>;
    /**
     * Tells a Stopped state cache to transition to Active state.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param options The options parameters.
     */
    beginStart(resourceGroupName: string, cacheName: string, options?: CachesStartOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Tells a Stopped state cache to transition to Active state.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param options The options parameters.
     */
    beginStartAndWait(resourceGroupName: string, cacheName: string, options?: CachesStartOptionalParams): Promise<void>;
    /**
     * Tells an Active cache to transition to Stopped state.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param options The options parameters.
     */
    beginStop(resourceGroupName: string, cacheName: string, options?: CachesStopOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Tells an Active cache to transition to Stopped state.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param options The options parameters.
     */
    beginStopAndWait(resourceGroupName: string, cacheName: string, options?: CachesStopOptionalParams): Promise<void>;
    /**
     * Create a priming job. This operation is only allowed when the cache is healthy.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param options The options parameters.
     */
    beginStartPrimingJob(resourceGroupName: string, cacheName: string, options?: CachesStartPrimingJobOptionalParams): Promise<SimplePollerLike<OperationState<CachesStartPrimingJobResponse>, CachesStartPrimingJobResponse>>;
    /**
     * Create a priming job. This operation is only allowed when the cache is healthy.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param options The options parameters.
     */
    beginStartPrimingJobAndWait(resourceGroupName: string, cacheName: string, options?: CachesStartPrimingJobOptionalParams): Promise<CachesStartPrimingJobResponse>;
    /**
     * Schedule a priming job for deletion.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param options The options parameters.
     */
    beginStopPrimingJob(resourceGroupName: string, cacheName: string, options?: CachesStopPrimingJobOptionalParams): Promise<SimplePollerLike<OperationState<CachesStopPrimingJobResponse>, CachesStopPrimingJobResponse>>;
    /**
     * Schedule a priming job for deletion.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param options The options parameters.
     */
    beginStopPrimingJobAndWait(resourceGroupName: string, cacheName: string, options?: CachesStopPrimingJobOptionalParams): Promise<CachesStopPrimingJobResponse>;
    /**
     * Schedule a priming job to be paused.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param options The options parameters.
     */
    beginPausePrimingJob(resourceGroupName: string, cacheName: string, options?: CachesPausePrimingJobOptionalParams): Promise<SimplePollerLike<OperationState<CachesPausePrimingJobResponse>, CachesPausePrimingJobResponse>>;
    /**
     * Schedule a priming job to be paused.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param options The options parameters.
     */
    beginPausePrimingJobAndWait(resourceGroupName: string, cacheName: string, options?: CachesPausePrimingJobOptionalParams): Promise<CachesPausePrimingJobResponse>;
    /**
     * Resumes a paused priming job.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param options The options parameters.
     */
    beginResumePrimingJob(resourceGroupName: string, cacheName: string, options?: CachesResumePrimingJobOptionalParams): Promise<SimplePollerLike<OperationState<CachesResumePrimingJobResponse>, CachesResumePrimingJobResponse>>;
    /**
     * Resumes a paused priming job.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param options The options parameters.
     */
    beginResumePrimingJobAndWait(resourceGroupName: string, cacheName: string, options?: CachesResumePrimingJobOptionalParams): Promise<CachesResumePrimingJobResponse>;
    /**
     * Upgrade a cache's firmware if a new version is available. Otherwise, this operation has no effect.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param options The options parameters.
     */
    beginUpgradeFirmware(resourceGroupName: string, cacheName: string, options?: CachesUpgradeFirmwareOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Upgrade a cache's firmware if a new version is available. Otherwise, this operation has no effect.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param options The options parameters.
     */
    beginUpgradeFirmwareAndWait(resourceGroupName: string, cacheName: string, options?: CachesUpgradeFirmwareOptionalParams): Promise<void>;
    /**
     * Update cache space allocation.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param options The options parameters.
     */
    beginSpaceAllocation(resourceGroupName: string, cacheName: string, options?: CachesSpaceAllocationOptionalParams): Promise<SimplePollerLike<OperationState<CachesSpaceAllocationResponse>, CachesSpaceAllocationResponse>>;
    /**
     * Update cache space allocation.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param options The options parameters.
     */
    beginSpaceAllocationAndWait(resourceGroupName: string, cacheName: string, options?: CachesSpaceAllocationOptionalParams): Promise<CachesSpaceAllocationResponse>;
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    private _listByResourceGroupNext;
}
//# sourceMappingURL=caches.d.ts.map