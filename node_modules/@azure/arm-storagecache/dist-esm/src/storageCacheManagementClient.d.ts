import * as coreClient from "@azure/core-client";
import * as coreAuth from "@azure/core-auth";
import { AmlFilesystems, Operations, Skus, UsageModels, AscOperations, AscUsages, Caches, StorageTargets, StorageTargetOperations } from "./operationsInterfaces";
import { StorageCacheManagementClientOptionalParams, CheckAmlFSSubnetsOptionalParams, GetRequiredAmlFSSubnetsSizeOptionalParams, GetRequiredAmlFSSubnetsSizeResponse } from "./models";
export declare class StorageCacheManagementClient extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the StorageCacheManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: StorageCacheManagementClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    /**
     * Check that subnets will be valid for AML file system create calls.
     * @param options The options parameters.
     */
    checkAmlFSSubnets(options?: CheckAmlFSSubnetsOptionalParams): Promise<void>;
    /**
     * Get the number of available IP addresses needed for the AML file system information provided.
     * @param options The options parameters.
     */
    getRequiredAmlFSSubnetsSize(options?: GetRequiredAmlFSSubnetsSizeOptionalParams): Promise<GetRequiredAmlFSSubnetsSizeResponse>;
    amlFilesystems: AmlFilesystems;
    operations: Operations;
    skus: Skus;
    usageModels: UsageModels;
    ascOperations: AscOperations;
    ascUsages: AscUsages;
    caches: Caches;
    storageTargets: StorageTargets;
    storageTargetOperations: StorageTargetOperations;
}
//# sourceMappingURL=storageCacheManagementClient.d.ts.map