import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { OperationState } from '@azure/core-lro';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { SimplePollerLike } from '@azure/core-lro';

/** An AML file system instance. Follows Azure Resource Manager standards: https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/resource-api-reference.md */
export declare interface AmlFilesystem extends TrackedResource {
    /** The managed identity used by the AML file system, if configured. */
    identity?: AmlFilesystemIdentity;
    /** SKU for the resource. */
    sku?: SkuName;
    /** Availability zones for resources. This field should only contain a single element in the array. */
    zones?: string[];
    /** The size of the AML file system, in TiB. This might be rounded up. */
    storageCapacityTiB?: number;
    /**
     * Health of the AML file system.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly health?: AmlFilesystemHealth;
    /**
     * ARM provisioning state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: AmlFilesystemProvisioningStateType;
    /** Subnet used for managing the AML file system and for client-facing operations. This subnet should have at least a /24 subnet mask within the VNET's address space. */
    filesystemSubnet?: string;
    /**
     * Client information for the AML file system.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly clientInfo?: AmlFilesystemClientInfo;
    /**
     * Throughput provisioned in MB per sec, calculated as storageCapacityTiB * per-unit storage throughput
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly throughputProvisionedMBps?: number;
    /** Specifies encryption settings of the AML file system. */
    encryptionSettings?: AmlFilesystemEncryptionSettings;
    /** Start time of a 30-minute weekly maintenance window. */
    maintenanceWindow?: AmlFilesystemPropertiesMaintenanceWindow;
    /** Hydration and archive settings and status */
    hsm?: AmlFilesystemPropertiesHsm;
}

/** Information about the AML file system archive */
export declare interface AmlFilesystemArchive {
    /**
     * Lustre file system path to archive relative to the file system root.  Specify '/' to archive all modified data.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly filesystemPath?: string;
    /**
     * The status of the archive
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: AmlFilesystemArchiveStatus;
}

/** Information required to execute the archive operation */
export declare interface AmlFilesystemArchiveInfo {
    /** Lustre file system path to archive relative to the file system root.  Specify '/' to archive all modified data. */
    filesystemPath?: string;
}

/** The status of the archive */
export declare interface AmlFilesystemArchiveStatus {
    /**
     * The state of the archive operation
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly state?: ArchiveStatusType;
    /**
     * The time of the last completed archive operation
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastCompletionTime?: Date;
    /**
     * The time the latest archive operation started
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastStartedTime?: Date;
    /**
     * The completion percentage of the archive operation
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly percentComplete?: number;
    /**
     * Server-defined error code for the archive operation
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly errorCode?: string;
    /**
     * Server-defined error message for the archive operation
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly errorMessage?: string;
}

/** The error details provided when the checkAmlFSSubnets call fails. */
export declare interface AmlFilesystemCheckSubnetError {
    /** The error details for the AML file system's subnet. */
    filesystemSubnet?: AmlFilesystemCheckSubnetErrorFilesystemSubnet;
}

/** The error details for the AML file system's subnet. */
export declare interface AmlFilesystemCheckSubnetErrorFilesystemSubnet {
    /** The status of the AML file system subnet check. */
    status?: FilesystemSubnetStatusType;
    /** The details of the AML file system subnet check. */
    message?: string;
}

/** AML file system client information */
export declare interface AmlFilesystemClientInfo {
    /**
     * The IPv4 address used by clients to mount the AML file system's Lustre Management Service (MGS).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly mgsAddress?: string;
    /**
     * Recommended command to mount the AML file system
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly mountCommand?: string;
    /**
     * The version of Lustre running in the AML file system
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lustreVersion?: string;
    /**
     * Container Storage Interface information for the AML file system.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly containerStorageInterface?: AmlFilesystemContainerStorageInterface;
}

/** AML file system container storage interface information */
export declare interface AmlFilesystemContainerStorageInterface {
    /**
     * Recommended AKS Persistent Volume Claim for the CSI driver, in Base64 encoded YAML
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly persistentVolumeClaim?: string;
    /**
     * Recommended AKS Persistent Volume for the CSI driver, in Base64 encoded YAML
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly persistentVolume?: string;
    /**
     * Recommended AKS Storage Class for the CSI driver, in Base64 encoded YAML
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly storageClass?: string;
}

/** AML file system encryption settings. */
export declare interface AmlFilesystemEncryptionSettings {
    /** Specifies the location of the encryption key in Key Vault. */
    keyEncryptionKey?: KeyVaultKeyReference;
}

/** An indication of AML file system health. Gives more information about health than just that related to provisioning. */
export declare interface AmlFilesystemHealth {
    /** List of AML file system health states. */
    state?: AmlFilesystemHealthStateType;
    /** Server-defined error code for the AML file system health */
    statusCode?: string;
    /** Describes the health state. */
    statusDescription?: string;
}

/**
 * Defines values for AmlFilesystemHealthStateType. \
 * {@link KnownAmlFilesystemHealthStateType} can be used interchangeably with AmlFilesystemHealthStateType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unavailable** \
 * **Available** \
 * **Degraded** \
 * **Transitioning** \
 * **Maintenance**
 */
export declare type AmlFilesystemHealthStateType = string;

/** AML file system HSM settings. */
export declare interface AmlFilesystemHsmSettings {
    /** Resource ID of storage container used for hydrating the namespace and archiving from the namespace. The resource provider must have permission to create SAS tokens on the storage account. */
    container: string;
    /** Resource ID of storage container used for logging events and errors.  Must be a separate container in the same storage account as the hydration and archive container. The resource provider must have permission to create SAS tokens on the storage account. */
    loggingContainer: string;
    /** Only blobs in the non-logging container that start with this path/prefix get hydrated into the cluster namespace. */
    importPrefix?: string;
}

/** Managed Identity properties. */
export declare interface AmlFilesystemIdentity {
    /**
     * The principal ID for the user-assigned identity of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
    /**
     * The tenant ID associated with the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
    /** The type of identity used for the resource. */
    type?: AmlFilesystemIdentityType;
    /** A dictionary where each key is a user assigned identity resource ID, and each key's value is an empty dictionary. */
    userAssignedIdentities?: {
        [propertyName: string]: UserAssignedIdentitiesValue;
    };
}

/** Defines values for AmlFilesystemIdentityType. */
export declare type AmlFilesystemIdentityType = "UserAssigned" | "None";

/** Hydration and archive settings and status */
export declare interface AmlFilesystemPropertiesHsm {
    /** Specifies HSM settings of the AML file system. */
    settings?: AmlFilesystemHsmSettings;
    /**
     * Archive status
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly archiveStatus?: AmlFilesystemArchive[];
}

/** Start time of a 30-minute weekly maintenance window. */
export declare interface AmlFilesystemPropertiesMaintenanceWindow {
    /** Day of the week on which the maintenance window will occur. */
    dayOfWeek?: MaintenanceDayOfWeekType;
    /** The time of day (in UTC) to start the maintenance window. */
    timeOfDayUTC?: string;
}

/**
 * Defines values for AmlFilesystemProvisioningStateType. \
 * {@link KnownAmlFilesystemProvisioningStateType} can be used interchangeably with AmlFilesystemProvisioningStateType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Creating** \
 * **Deleting** \
 * **Updating** \
 * **Canceled**
 */
export declare type AmlFilesystemProvisioningStateType = string;

/** Interface representing a AmlFilesystems. */
export declare interface AmlFilesystems {
    /**
     * Returns all AML file systems the user has access to under a subscription.
     * @param options The options parameters.
     */
    list(options?: AmlFilesystemsListOptionalParams): PagedAsyncIterableIterator<AmlFilesystem>;
    /**
     * Returns all AML file systems the user has access to under a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: AmlFilesystemsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<AmlFilesystem>;
    /**
     * Schedules an AML file system for deletion.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and
     *                          hyphens. Start and end with alphanumeric.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, amlFilesystemName: string, options?: AmlFilesystemsDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Schedules an AML file system for deletion.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and
     *                          hyphens. Start and end with alphanumeric.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, amlFilesystemName: string, options?: AmlFilesystemsDeleteOptionalParams): Promise<void>;
    /**
     * Returns an AML file system.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and
     *                          hyphens. Start and end with alphanumeric.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, amlFilesystemName: string, options?: AmlFilesystemsGetOptionalParams): Promise<AmlFilesystemsGetResponse>;
    /**
     * Create or update an AML file system.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and
     *                          hyphens. Start and end with alphanumeric.
     * @param amlFilesystem Object containing the user-selectable properties of the AML file system. If
     *                      read-only properties are included, they must match the existing values of those properties.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, amlFilesystemName: string, amlFilesystem: AmlFilesystem, options?: AmlFilesystemsCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<AmlFilesystemsCreateOrUpdateResponse>, AmlFilesystemsCreateOrUpdateResponse>>;
    /**
     * Create or update an AML file system.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and
     *                          hyphens. Start and end with alphanumeric.
     * @param amlFilesystem Object containing the user-selectable properties of the AML file system. If
     *                      read-only properties are included, they must match the existing values of those properties.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, amlFilesystemName: string, amlFilesystem: AmlFilesystem, options?: AmlFilesystemsCreateOrUpdateOptionalParams): Promise<AmlFilesystemsCreateOrUpdateResponse>;
    /**
     * Update an AML file system instance.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and
     *                          hyphens. Start and end with alphanumeric.
     * @param amlFilesystem Object containing the user-selectable properties of the AML file system. If
     *                      read-only properties are included, they must match the existing values of those properties.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, amlFilesystemName: string, amlFilesystem: AmlFilesystemUpdate, options?: AmlFilesystemsUpdateOptionalParams): Promise<SimplePollerLike<OperationState<AmlFilesystemsUpdateResponse>, AmlFilesystemsUpdateResponse>>;
    /**
     * Update an AML file system instance.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and
     *                          hyphens. Start and end with alphanumeric.
     * @param amlFilesystem Object containing the user-selectable properties of the AML file system. If
     *                      read-only properties are included, they must match the existing values of those properties.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, amlFilesystemName: string, amlFilesystem: AmlFilesystemUpdate, options?: AmlFilesystemsUpdateOptionalParams): Promise<AmlFilesystemsUpdateResponse>;
    /**
     * Archive data from the AML file system.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and
     *                          hyphens. Start and end with alphanumeric.
     * @param options The options parameters.
     */
    archive(resourceGroupName: string, amlFilesystemName: string, options?: AmlFilesystemsArchiveOptionalParams): Promise<void>;
    /**
     * Cancel archiving data from the AML file system.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and
     *                          hyphens. Start and end with alphanumeric.
     * @param options The options parameters.
     */
    cancelArchive(resourceGroupName: string, amlFilesystemName: string, options?: AmlFilesystemsCancelArchiveOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface AmlFilesystemsArchiveOptionalParams extends coreClient.OperationOptions {
    /** Information about the archive operation */
    archiveInfo?: AmlFilesystemArchiveInfo;
}

/** Optional parameters. */
export declare interface AmlFilesystemsCancelArchiveOptionalParams extends coreClient.OperationOptions {
}

/** Defines headers for AmlFilesystems_createOrUpdate operation. */
export declare interface AmlFilesystemsCreateOrUpdateHeaders {
    /** URI to poll for the operation status */
    azureAsyncOperation?: string;
}

/** Optional parameters. */
export declare interface AmlFilesystemsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type AmlFilesystemsCreateOrUpdateResponse = AmlFilesystem;

/** Defines headers for AmlFilesystems_delete operation. */
export declare interface AmlFilesystemsDeleteHeaders {
    /** Location URI to poll for result */
    location?: string;
    /** URI to poll for the operation status */
    azureAsyncOperation?: string;
}

/** Optional parameters. */
export declare interface AmlFilesystemsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface AmlFilesystemsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type AmlFilesystemsGetResponse = AmlFilesystem;

/** Optional parameters. */
export declare interface AmlFilesystemsListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type AmlFilesystemsListByResourceGroupNextResponse = AmlFilesystemsListResult;

/** Optional parameters. */
export declare interface AmlFilesystemsListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type AmlFilesystemsListByResourceGroupResponse = AmlFilesystemsListResult;

/** Optional parameters. */
export declare interface AmlFilesystemsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type AmlFilesystemsListNextResponse = AmlFilesystemsListResult;

/** Optional parameters. */
export declare interface AmlFilesystemsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type AmlFilesystemsListResponse = AmlFilesystemsListResult;

/** Result of the request to list AML file systems. It contains a list of AML file systems and a URL link to get the next set of results. */
export declare interface AmlFilesystemsListResult {
    /** URL to get the next set of AML file system list results, if there are any. */
    nextLink?: string;
    /** List of AML file systems. */
    value?: AmlFilesystem[];
}

/** Information required to validate the subnet that will be used in AML file system create */
export declare interface AmlFilesystemSubnetInfo {
    /** Subnet used for managing the AML file system and for client-facing operations. This subnet should have at least a /24 subnet mask within the VNET's address space. */
    filesystemSubnet?: string;
    /** The size of the AML file system, in TiB. */
    storageCapacityTiB?: number;
    /** SKU for the resource. */
    sku?: SkuName;
    /** Region that the AML file system will be created in. */
    location?: string;
}

/** Defines headers for AmlFilesystems_update operation. */
export declare interface AmlFilesystemsUpdateHeaders {
    /** URI to poll for the operation status */
    location?: string;
    /** URI to poll for the operation status */
    azureAsyncOperation?: string;
}

/** Optional parameters. */
export declare interface AmlFilesystemsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type AmlFilesystemsUpdateResponse = AmlFilesystem;

/** An AML file system update instance. */
export declare interface AmlFilesystemUpdate {
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** Specifies encryption settings of the AML file system. */
    encryptionSettings?: AmlFilesystemEncryptionSettings;
    /** Start time of a 30-minute weekly maintenance window. */
    maintenanceWindow?: AmlFilesystemUpdatePropertiesMaintenanceWindow;
}

/** Start time of a 30-minute weekly maintenance window. */
export declare interface AmlFilesystemUpdatePropertiesMaintenanceWindow {
    /** Day of the week on which the maintenance window will occur. */
    dayOfWeek?: MaintenanceDayOfWeekType;
    /** The time of day (in UTC) to start the maintenance window. */
    timeOfDayUTC?: string;
}

/** REST API operation description: see https://github.com/Azure/azure-rest-api-specs/blob/master/documentation/openapi-authoring-automated-guidelines.md#r3023-operationsapiimplementation */
export declare interface ApiOperation {
    /** The object that represents the operation. */
    display?: ApiOperationDisplay;
    /** Origin of the operation. */
    origin?: string;
    /** The flag that indicates whether the operation applies to data plane. */
    isDataAction?: boolean;
    /** Operation name: {provider}/{resource}/{operation} */
    name?: string;
    /** Specification of the all the metrics provided for a resource type. */
    serviceSpecification?: ApiOperationPropertiesServiceSpecification;
}

/** The object that represents the operation. */
export declare interface ApiOperationDisplay {
    /** Operation type: Read, write, delete, etc. */
    operation?: string;
    /** Service provider: Microsoft.StorageCache */
    provider?: string;
    /** Resource on which the operation is performed: Cache, etc. */
    resource?: string;
    /** The description of the operation */
    description?: string;
}

/** Result of the request to list Resource Provider operations. It contains a list of operations and a URL link to get the next set of results. */
export declare interface ApiOperationListResult {
    /** URL to get the next set of operation list results if there are any. */
    nextLink?: string;
    /** List of Resource Provider operations supported by the Microsoft.StorageCache resource provider. */
    value?: ApiOperation[];
}

/** Specification of the all the metrics provided for a resource type. */
export declare interface ApiOperationPropertiesServiceSpecification {
    /** Details about operations related to metrics. */
    metricSpecifications?: MetricSpecification[];
    /** Details about operations related to logs. */
    logSpecifications?: LogSpecification[];
}

/**
 * Defines values for ArchiveStatusType. \
 * {@link KnownArchiveStatusType} can be used interchangeably with ArchiveStatusType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotConfigured** \
 * **Idle** \
 * **InProgress** \
 * **Canceled** \
 * **Completed** \
 * **Failed** \
 * **Cancelling** \
 * **FSScanInProgress**
 */
export declare type ArchiveStatusType = string;

/** The status of operation. */
export declare interface AscOperation {
    /** The operation Id. */
    id?: string;
    /** The operation name. */
    name?: string;
    /** The start time of the operation. */
    startTime?: string;
    /** The end time of the operation. */
    endTime?: string;
    /** The status of the operation. */
    status?: string;
    /** The error detail of the operation if any. */
    error?: ErrorResponse;
    /** Additional operation-specific output. */
    output?: {
        [propertyName: string]: Record<string, unknown>;
    };
}

/** Interface representing a AscOperations. */
export declare interface AscOperations {
    /**
     * Gets the status of an asynchronous operation for the Azure HPC Cache
     * @param location The name of Azure region.
     * @param operationId The ID of an ongoing async operation.
     * @param options The options parameters.
     */
    get(location: string, operationId: string, options?: AscOperationsGetOptionalParams): Promise<AscOperationsGetResponse>;
}

/** Optional parameters. */
export declare interface AscOperationsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type AscOperationsGetResponse = AscOperation;

/** Interface representing a AscUsages. */
export declare interface AscUsages {
    /**
     * Gets the quantity used and quota limit for resources
     * @param location The name of the region to query for usage information.
     * @param options The options parameters.
     */
    list(location: string, options?: AscUsagesListOptionalParams): PagedAsyncIterableIterator<ResourceUsage>;
}

/** Optional parameters. */
export declare interface AscUsagesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type AscUsagesListNextResponse = ResourceUsagesListResult;

/** Optional parameters. */
export declare interface AscUsagesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type AscUsagesListResponse = ResourceUsagesListResult;

/** Properties pertaining to the BlobNfsTarget. */
export declare interface BlobNfsTarget {
    /** Resource ID of the storage container. */
    target?: string;
    /** Identifies the StorageCache usage model to be used for this storage target. */
    usageModel?: string;
    /** Amount of time (in seconds) the cache waits before it checks the back-end storage for file updates. */
    verificationTimer?: number;
    /** Amount of time (in seconds) the cache waits after the last file change before it copies the changed file to back-end storage. */
    writeBackTimer?: number;
}

/** A cache instance. Follows Azure Resource Manager standards: https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/resource-api-reference.md */
declare interface Cache_2 {
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /**
     * Resource ID of the cache.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /** Region name string. */
    location?: string;
    /**
     * Name of cache.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Type of the cache; Microsoft.StorageCache/Cache
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** The identity of the cache, if configured. */
    identity?: CacheIdentity;
    /**
     * The system meta data relating to this resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** SKU for the cache. */
    sku?: CacheSku;
    /** The size of this Cache, in GB. */
    cacheSizeGB?: number;
    /**
     * Health of the cache.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly health?: CacheHealth;
    /**
     * Array of IPv4 addresses that can be used by clients mounting this cache.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly mountAddresses?: string[];
    /**
     * ARM provisioning state, see https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#provisioningstate-property
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningStateType;
    /** Subnet used for the cache. */
    subnet?: string;
    /**
     * Upgrade status of the cache.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly upgradeStatus?: CacheUpgradeStatus;
    /** Upgrade settings of the cache. */
    upgradeSettings?: CacheUpgradeSettings;
    /** Specifies network settings of the cache. */
    networkSettings?: CacheNetworkSettings;
    /** Specifies encryption settings of the cache. */
    encryptionSettings?: CacheEncryptionSettings;
    /** Specifies security settings of the cache. */
    securitySettings?: CacheSecuritySettings;
    /** Specifies Directory Services settings of the cache. */
    directoryServicesSettings?: CacheDirectorySettings;
    /** Availability zones for resources. This field should only contain a single element in the array. */
    zones?: string[];
    /**
     * Specifies the priming jobs defined in the cache.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly primingJobs?: PrimingJob[];
    /**
     * Specifies the space allocation percentage for each storage target in the cache.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly spaceAllocation?: StorageTargetSpaceAllocation[];
}
export { Cache_2 as Cache }

/** Active Directory settings used to join a cache to a domain. */
export declare interface CacheActiveDirectorySettings {
    /** Primary DNS IP address used to resolve the Active Directory domain controller's fully qualified domain name. */
    primaryDnsIpAddress: string;
    /** Secondary DNS IP address used to resolve the Active Directory domain controller's fully qualified domain name. */
    secondaryDnsIpAddress?: string;
    /** The fully qualified domain name of the Active Directory domain controller. */
    domainName: string;
    /** The Active Directory domain's NetBIOS name. */
    domainNetBiosName: string;
    /** The NetBIOS name to assign to the HPC Cache when it joins the Active Directory domain as a server. Length must 1-15 characters from the class [-0-9a-zA-Z]. */
    cacheNetBiosName: string;
    /**
     * True if the HPC Cache is joined to the Active Directory domain.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly domainJoined?: DomainJoinedType;
    /** Active Directory admin credentials used to join the HPC Cache to a domain. */
    credentials?: CacheActiveDirectorySettingsCredentials;
}

/** Active Directory admin credentials used to join the HPC Cache to a domain. */
export declare interface CacheActiveDirectorySettingsCredentials {
    /** Username of the Active Directory domain administrator. This value is stored encrypted and not returned on response. */
    username: string;
    /** Plain text password of the Active Directory domain administrator. This value is stored encrypted and not returned on response. */
    password?: string;
}

/** Cache Directory Services settings. */
export declare interface CacheDirectorySettings {
    /** Specifies settings for joining the HPC Cache to an Active Directory domain. */
    activeDirectory?: CacheActiveDirectorySettings;
    /** Specifies settings for Extended Groups. Extended Groups allows users to be members of more than 16 groups. */
    usernameDownload?: CacheUsernameDownloadSettings;
}

/** Cache encryption settings. */
export declare interface CacheEncryptionSettings {
    /** Specifies the location of the key encryption key in key vault. */
    keyEncryptionKey?: KeyVaultKeyReference;
    /** Specifies whether the service will automatically rotate to the newest version of the key in the key vault. */
    rotationToLatestKeyVersionEnabled?: boolean;
}

/** An indication of cache health. Gives more information about health than just that related to provisioning. */
export declare interface CacheHealth {
    /** List of cache health states. Down is when the cluster is not responding.  Degraded is when its functioning but has some alerts. Transitioning when it is creating or deleting. Unknown will be returned in old api versions when a new value is added in future versions. WaitingForKey is when the create is waiting for the system assigned identity to be given access to the encryption key in the encryption settings. */
    state?: HealthStateType;
    /** Describes explanation of state. */
    statusDescription?: string;
    /**
     * Outstanding conditions that need to be investigated and resolved.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly conditions?: Condition[];
}

/** Cache identity properties. */
export declare interface CacheIdentity {
    /**
     * The principal ID for the system-assigned identity of the cache.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
    /**
     * The tenant ID associated with the cache.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
    /** The type of identity used for the cache */
    type?: CacheIdentityType;
    /** A dictionary where each key is a user assigned identity resource ID, and each key's value is an empty dictionary. */
    userAssignedIdentities?: {
        [propertyName: string]: UserAssignedIdentitiesValue;
    };
}

/** Defines values for CacheIdentityType. */
export declare type CacheIdentityType = "SystemAssigned" | "UserAssigned" | "SystemAssigned, UserAssigned" | "None";

/** Cache network settings. */
export declare interface CacheNetworkSettings {
    /** The IPv4 maximum transmission unit configured for the subnet. */
    mtu?: number;
    /**
     * Array of additional IP addresses used by this cache.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly utilityAddresses?: string[];
    /** DNS servers for the cache to use.  It will be set from the network configuration if no value is provided. */
    dnsServers?: string[];
    /** DNS search domain */
    dnsSearchDomain?: string;
    /** NTP server IP Address or FQDN for the cache to use. The default is time.windows.com. */
    ntpServer?: string;
}

/** Interface representing a Caches. */
export declare interface Caches {
    /**
     * Returns all caches the user has access to under a subscription.
     * @param options The options parameters.
     */
    list(options?: CachesListOptionalParams): PagedAsyncIterableIterator<Cache_2>;
    /**
     * Returns all caches the user has access to under a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: CachesListByResourceGroupOptionalParams): PagedAsyncIterableIterator<Cache_2>;
    /**
     * Schedules a cache for deletion.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, cacheName: string, options?: CachesDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Schedules a cache for deletion.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, cacheName: string, options?: CachesDeleteOptionalParams): Promise<void>;
    /**
     * Returns a cache.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, cacheName: string, options?: CachesGetOptionalParams): Promise<CachesGetResponse>;
    /**
     * Create or update a cache.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param cache Object containing the user-selectable properties of the new cache. If read-only
     *              properties are included, they must match the existing values of those properties.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, cacheName: string, cache: Cache_2, options?: CachesCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<CachesCreateOrUpdateResponse>, CachesCreateOrUpdateResponse>>;
    /**
     * Create or update a cache.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param cache Object containing the user-selectable properties of the new cache. If read-only
     *              properties are included, they must match the existing values of those properties.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, cacheName: string, cache: Cache_2, options?: CachesCreateOrUpdateOptionalParams): Promise<CachesCreateOrUpdateResponse>;
    /**
     * Update a cache instance.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, cacheName: string, options?: CachesUpdateOptionalParams): Promise<SimplePollerLike<OperationState<CachesUpdateResponse>, CachesUpdateResponse>>;
    /**
     * Update a cache instance.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, cacheName: string, options?: CachesUpdateOptionalParams): Promise<CachesUpdateResponse>;
    /**
     * Tells a cache to write generate debug info for support to process.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param options The options parameters.
     */
    beginDebugInfo(resourceGroupName: string, cacheName: string, options?: CachesDebugInfoOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Tells a cache to write generate debug info for support to process.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param options The options parameters.
     */
    beginDebugInfoAndWait(resourceGroupName: string, cacheName: string, options?: CachesDebugInfoOptionalParams): Promise<void>;
    /**
     * Tells a cache to write all dirty data to the Storage Target(s). During the flush, clients will see
     * errors returned until the flush is complete.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param options The options parameters.
     */
    beginFlush(resourceGroupName: string, cacheName: string, options?: CachesFlushOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Tells a cache to write all dirty data to the Storage Target(s). During the flush, clients will see
     * errors returned until the flush is complete.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param options The options parameters.
     */
    beginFlushAndWait(resourceGroupName: string, cacheName: string, options?: CachesFlushOptionalParams): Promise<void>;
    /**
     * Tells a Stopped state cache to transition to Active state.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param options The options parameters.
     */
    beginStart(resourceGroupName: string, cacheName: string, options?: CachesStartOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Tells a Stopped state cache to transition to Active state.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param options The options parameters.
     */
    beginStartAndWait(resourceGroupName: string, cacheName: string, options?: CachesStartOptionalParams): Promise<void>;
    /**
     * Tells an Active cache to transition to Stopped state.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param options The options parameters.
     */
    beginStop(resourceGroupName: string, cacheName: string, options?: CachesStopOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Tells an Active cache to transition to Stopped state.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param options The options parameters.
     */
    beginStopAndWait(resourceGroupName: string, cacheName: string, options?: CachesStopOptionalParams): Promise<void>;
    /**
     * Create a priming job. This operation is only allowed when the cache is healthy.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param options The options parameters.
     */
    beginStartPrimingJob(resourceGroupName: string, cacheName: string, options?: CachesStartPrimingJobOptionalParams): Promise<SimplePollerLike<OperationState<CachesStartPrimingJobResponse>, CachesStartPrimingJobResponse>>;
    /**
     * Create a priming job. This operation is only allowed when the cache is healthy.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param options The options parameters.
     */
    beginStartPrimingJobAndWait(resourceGroupName: string, cacheName: string, options?: CachesStartPrimingJobOptionalParams): Promise<CachesStartPrimingJobResponse>;
    /**
     * Schedule a priming job for deletion.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param options The options parameters.
     */
    beginStopPrimingJob(resourceGroupName: string, cacheName: string, options?: CachesStopPrimingJobOptionalParams): Promise<SimplePollerLike<OperationState<CachesStopPrimingJobResponse>, CachesStopPrimingJobResponse>>;
    /**
     * Schedule a priming job for deletion.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param options The options parameters.
     */
    beginStopPrimingJobAndWait(resourceGroupName: string, cacheName: string, options?: CachesStopPrimingJobOptionalParams): Promise<CachesStopPrimingJobResponse>;
    /**
     * Schedule a priming job to be paused.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param options The options parameters.
     */
    beginPausePrimingJob(resourceGroupName: string, cacheName: string, options?: CachesPausePrimingJobOptionalParams): Promise<SimplePollerLike<OperationState<CachesPausePrimingJobResponse>, CachesPausePrimingJobResponse>>;
    /**
     * Schedule a priming job to be paused.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param options The options parameters.
     */
    beginPausePrimingJobAndWait(resourceGroupName: string, cacheName: string, options?: CachesPausePrimingJobOptionalParams): Promise<CachesPausePrimingJobResponse>;
    /**
     * Resumes a paused priming job.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param options The options parameters.
     */
    beginResumePrimingJob(resourceGroupName: string, cacheName: string, options?: CachesResumePrimingJobOptionalParams): Promise<SimplePollerLike<OperationState<CachesResumePrimingJobResponse>, CachesResumePrimingJobResponse>>;
    /**
     * Resumes a paused priming job.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param options The options parameters.
     */
    beginResumePrimingJobAndWait(resourceGroupName: string, cacheName: string, options?: CachesResumePrimingJobOptionalParams): Promise<CachesResumePrimingJobResponse>;
    /**
     * Upgrade a cache's firmware if a new version is available. Otherwise, this operation has no effect.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param options The options parameters.
     */
    beginUpgradeFirmware(resourceGroupName: string, cacheName: string, options?: CachesUpgradeFirmwareOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Upgrade a cache's firmware if a new version is available. Otherwise, this operation has no effect.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param options The options parameters.
     */
    beginUpgradeFirmwareAndWait(resourceGroupName: string, cacheName: string, options?: CachesUpgradeFirmwareOptionalParams): Promise<void>;
    /**
     * Update cache space allocation.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param options The options parameters.
     */
    beginSpaceAllocation(resourceGroupName: string, cacheName: string, options?: CachesSpaceAllocationOptionalParams): Promise<SimplePollerLike<OperationState<CachesSpaceAllocationResponse>, CachesSpaceAllocationResponse>>;
    /**
     * Update cache space allocation.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param options The options parameters.
     */
    beginSpaceAllocationAndWait(resourceGroupName: string, cacheName: string, options?: CachesSpaceAllocationOptionalParams): Promise<CachesSpaceAllocationResponse>;
}

/** Optional parameters. */
export declare interface CachesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type CachesCreateOrUpdateResponse = Cache_2;

/** Defines headers for Caches_debugInfo operation. */
export declare interface CachesDebugInfoHeaders {
    /** Location URI to poll for result */
    location?: string;
    /** URI to poll for the operation status */
    azureAsyncOperation?: string;
}

/** Optional parameters. */
export declare interface CachesDebugInfoOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Defines headers for Caches_delete operation. */
export declare interface CachesDeleteHeaders {
    /** Location URI to poll for result */
    location?: string;
    /** URI to poll for the operation status */
    azureAsyncOperation?: string;
}

/** Optional parameters. */
export declare interface CachesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Cache security settings. */
export declare interface CacheSecuritySettings {
    /** NFS access policies defined for this cache. */
    accessPolicies?: NfsAccessPolicy[];
}

/** Defines headers for Caches_flush operation. */
export declare interface CachesFlushHeaders {
    /** Location URI to poll for result */
    location?: string;
    /** URI to poll for the operation status */
    azureAsyncOperation?: string;
}

/** Optional parameters. */
export declare interface CachesFlushOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface CachesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type CachesGetResponse = Cache_2;

/** SKU for the cache. */
export declare interface CacheSku {
    /** SKU name for this cache. */
    name?: string;
}

/** Optional parameters. */
export declare interface CachesListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type CachesListByResourceGroupNextResponse = CachesListResult;

/** Optional parameters. */
export declare interface CachesListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type CachesListByResourceGroupResponse = CachesListResult;

/** Optional parameters. */
export declare interface CachesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type CachesListNextResponse = CachesListResult;

/** Optional parameters. */
export declare interface CachesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type CachesListResponse = CachesListResult;

/** Result of the request to list caches. It contains a list of caches and a URL link to get the next set of results. */
export declare interface CachesListResult {
    /** URL to get the next set of cache list results, if there are any. */
    nextLink?: string;
    /** List of Caches. */
    value?: Cache_2[];
}

/** Defines headers for Caches_pausePrimingJob operation. */
export declare interface CachesPausePrimingJobHeaders {
    /** Location URI to poll for result */
    location?: string;
    /** URI to poll for the operation status */
    azureAsyncOperation?: string;
}

/** Optional parameters. */
export declare interface CachesPausePrimingJobOptionalParams extends coreClient.OperationOptions {
    /** Object containing the priming job ID. */
    primingJobId?: PrimingJobIdParameter;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the pausePrimingJob operation. */
export declare type CachesPausePrimingJobResponse = CachesPausePrimingJobHeaders;

/** Defines headers for Caches_resumePrimingJob operation. */
export declare interface CachesResumePrimingJobHeaders {
    /** Location URI to poll for result */
    location?: string;
    /** URI to poll for the operation status */
    azureAsyncOperation?: string;
}

/** Optional parameters. */
export declare interface CachesResumePrimingJobOptionalParams extends coreClient.OperationOptions {
    /** Object containing the priming job ID. */
    primingJobId?: PrimingJobIdParameter;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the resumePrimingJob operation. */
export declare type CachesResumePrimingJobResponse = CachesResumePrimingJobHeaders;

/** Defines headers for Caches_spaceAllocation operation. */
export declare interface CachesSpaceAllocationHeaders {
    /** Location URI to poll for result */
    location?: string;
    /** URI to poll for the operation status */
    azureAsyncOperation?: string;
}

/** Optional parameters. */
export declare interface CachesSpaceAllocationOptionalParams extends coreClient.OperationOptions {
    /** List containing storage target cache space percentage allocations. */
    spaceAllocation?: StorageTargetSpaceAllocation[];
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the spaceAllocation operation. */
export declare type CachesSpaceAllocationResponse = CachesSpaceAllocationHeaders;

/** Defines headers for Caches_start operation. */
export declare interface CachesStartHeaders {
    /** Location URI to poll for result */
    location?: string;
    /** URI to poll for the operation status */
    azureAsyncOperation?: string;
}

/** Optional parameters. */
export declare interface CachesStartOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Defines headers for Caches_startPrimingJob operation. */
export declare interface CachesStartPrimingJobHeaders {
    /** Location URI to poll for result */
    location?: string;
    /** URI to poll for the operation status */
    azureAsyncOperation?: string;
}

/** Optional parameters. */
export declare interface CachesStartPrimingJobOptionalParams extends coreClient.OperationOptions {
    /** Object containing the definition of a priming job. */
    primingjob?: PrimingJob;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the startPrimingJob operation. */
export declare type CachesStartPrimingJobResponse = CachesStartPrimingJobHeaders;

/** Defines headers for Caches_stop operation. */
export declare interface CachesStopHeaders {
    /** Location URI to poll for result */
    location?: string;
    /** URI to poll for the operation status */
    azureAsyncOperation?: string;
}

/** Optional parameters. */
export declare interface CachesStopOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Defines headers for Caches_stopPrimingJob operation. */
export declare interface CachesStopPrimingJobHeaders {
    /** Location URI to poll for result */
    location?: string;
    /** URI to poll for the operation status */
    azureAsyncOperation?: string;
}

/** Optional parameters. */
export declare interface CachesStopPrimingJobOptionalParams extends coreClient.OperationOptions {
    /** Object containing the priming job ID. */
    primingJobId?: PrimingJobIdParameter;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the stopPrimingJob operation. */
export declare type CachesStopPrimingJobResponse = CachesStopPrimingJobHeaders;

/** Defines headers for Caches_update operation. */
export declare interface CachesUpdateHeaders {
    /** Location URI to poll for result */
    location?: string;
    /** URI to poll for the operation status */
    azureAsyncOperation?: string;
}

/** Optional parameters. */
export declare interface CachesUpdateOptionalParams extends coreClient.OperationOptions {
    /** Object containing the user-selectable properties of the cache. If read-only properties are included, they must match the existing values of those properties. */
    cache?: Cache_2;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type CachesUpdateResponse = Cache_2;

/** Defines headers for Caches_upgradeFirmware operation. */
export declare interface CachesUpgradeFirmwareHeaders {
    /** Location URI to poll for result */
    location?: string;
    /** URI to poll for the operation status */
    azureAsyncOperation?: string;
}

/** Optional parameters. */
export declare interface CachesUpgradeFirmwareOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Cache Upgrade Settings. */
export declare interface CacheUpgradeSettings {
    /** True if the user chooses to select an installation time between now and firmwareUpdateDeadline. Else the firmware will automatically be installed after firmwareUpdateDeadline if not triggered earlier via the upgrade operation. */
    upgradeScheduleEnabled?: boolean;
    /** When upgradeScheduleEnabled is true, this field holds the user-chosen upgrade time. At the user-chosen time, the firmware update will automatically be installed on the cache. */
    scheduledTime?: Date;
}

/** Properties describing the software upgrade state of the cache. */
export declare interface CacheUpgradeStatus {
    /**
     * Version string of the firmware currently installed on this cache.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly currentFirmwareVersion?: string;
    /**
     * True if there is a firmware update ready to install on this cache. The firmware will automatically be installed after firmwareUpdateDeadline if not triggered earlier via the upgrade operation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly firmwareUpdateStatus?: FirmwareStatusType;
    /**
     * Time at which the pending firmware update will automatically be installed on the cache.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly firmwareUpdateDeadline?: Date;
    /**
     * Time of the last successful firmware update.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastFirmwareUpdate?: Date;
    /**
     * When firmwareUpdateAvailable is true, this field holds the version string for the update.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly pendingFirmwareVersion?: string;
}

/** Settings for Extended Groups username and group download. */
export declare interface CacheUsernameDownloadSettings {
    /** Whether or not Extended Groups is enabled. */
    extendedGroups?: boolean;
    /** This setting determines how the cache gets username and group names for clients. */
    usernameSource?: UsernameSource;
    /** The URI of the file containing group information (in /etc/group file format). This field must be populated when 'usernameSource' is set to 'File'. */
    groupFileURI?: string;
    /** The URI of the file containing user information (in /etc/passwd file format). This field must be populated when 'usernameSource' is set to 'File'. */
    userFileURI?: string;
    /** The fully qualified domain name or IP address of the LDAP server to use. */
    ldapServer?: string;
    /** The base distinguished name for the LDAP domain. */
    ldapBaseDN?: string;
    /** Whether or not the LDAP connection should be encrypted. */
    encryptLdapConnection?: boolean;
    /** Determines if the certificates must be validated by a certificate authority. When true, caCertificateURI must be provided. */
    requireValidCertificate?: boolean;
    /** Determines if the certificate should be automatically downloaded. This applies to 'caCertificateURI' only if 'requireValidCertificate' is true. */
    autoDownloadCertificate?: boolean;
    /** The URI of the CA certificate to validate the LDAP secure connection. This field must be populated when 'requireValidCertificate' is set to true. */
    caCertificateURI?: string;
    /**
     * Indicates whether or not the HPC Cache has performed the username download successfully.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly usernameDownloaded?: UsernameDownloadedType;
    /** When present, these are the credentials for the secure LDAP connection. */
    credentials?: CacheUsernameDownloadSettingsCredentials;
}

/** When present, these are the credentials for the secure LDAP connection. */
export declare interface CacheUsernameDownloadSettingsCredentials {
    /** The Bind Distinguished Name identity to be used in the secure LDAP connection. This value is stored encrypted and not returned on response. */
    bindDn?: string;
    /** The Bind password to be used in the secure LDAP connection. This value is stored encrypted and not returned on response. */
    bindPassword?: string;
}

/** Optional parameters. */
export declare interface CheckAmlFSSubnetsOptionalParams extends coreClient.OperationOptions {
    /** Information about the subnets to validate. */
    amlFilesystemSubnetInfo?: AmlFilesystemSubnetInfo;
}

/** Properties pertaining to the ClfsTarget */
export declare interface ClfsTarget {
    /** Resource ID of storage container. */
    target?: string;
}

/** An error response. */
export declare interface CloudError {
    /** The body of the error. */
    error?: CloudErrorBody;
}

/** An error response. */
export declare interface CloudErrorBody {
    /** An identifier for the error. Codes are invariant and are intended to be consumed programmatically. */
    code?: string;
    /** A list of additional details about the error. */
    details?: CloudErrorBody[];
    /** A message describing the error, intended to be suitable for display in a user interface. */
    message?: string;
    /** The target of the particular error. For example, the name of the property in error. */
    target?: string;
}

/** Outstanding conditions that will need to be resolved. */
export declare interface Condition {
    /**
     * The time when the condition was raised.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly timestamp?: Date;
    /**
     * The issue requiring attention.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export declare type CreatedByType = string;

/**
 * Defines values for DomainJoinedType. \
 * {@link KnownDomainJoinedType} can be used interchangeably with DomainJoinedType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Yes** \
 * **No** \
 * **Error**
 */
export declare type DomainJoinedType = string;

/** Describes the format of Error response. */
export declare interface ErrorResponse {
    /** Error code */
    code?: string;
    /** Error message indicating why the operation failed. */
    message?: string;
}

/**
 * Defines values for FilesystemSubnetStatusType. \
 * {@link KnownFilesystemSubnetStatusType} can be used interchangeably with FilesystemSubnetStatusType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Ok** \
 * **Invalid**
 */
export declare type FilesystemSubnetStatusType = string;

/**
 * Defines values for FirmwareStatusType. \
 * {@link KnownFirmwareStatusType} can be used interchangeably with FirmwareStatusType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **available** \
 * **unavailable**
 */
export declare type FirmwareStatusType = string;

/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/** Optional parameters. */
export declare interface GetRequiredAmlFSSubnetsSizeOptionalParams extends coreClient.OperationOptions {
    /** Information to determine the number of available IPs a subnet will need to host the AML file system. */
    requiredAMLFilesystemSubnetsSizeInfo?: RequiredAmlFilesystemSubnetsSizeInfo;
}

/** Contains response data for the getRequiredAmlFSSubnetsSize operation. */
export declare type GetRequiredAmlFSSubnetsSizeResponse = RequiredAmlFilesystemSubnetsSize;

/**
 * Defines values for HealthStateType. \
 * {@link KnownHealthStateType} can be used interchangeably with HealthStateType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **Healthy** \
 * **Degraded** \
 * **Down** \
 * **Transitioning** \
 * **Stopping** \
 * **Stopped** \
 * **Upgrading** \
 * **Flushing** \
 * **WaitingForKey** \
 * **StartFailed** \
 * **UpgradeFailed**
 */
export declare type HealthStateType = string;

/** Describes a reference to key vault key. */
export declare interface KeyVaultKeyReference {
    /** The URL referencing a key encryption key in key vault. */
    keyUrl: string;
    /** Describes a resource Id to source key vault. */
    sourceVault: KeyVaultKeyReferenceSourceVault;
}

/** Describes a resource Id to source key vault. */
export declare interface KeyVaultKeyReferenceSourceVault {
    /** Resource Id. */
    id?: string;
}

/** Known values of {@link AmlFilesystemHealthStateType} that the service accepts. */
export declare enum KnownAmlFilesystemHealthStateType {
    /** Unavailable */
    Unavailable = "Unavailable",
    /** Available */
    Available = "Available",
    /** Degraded */
    Degraded = "Degraded",
    /** Transitioning */
    Transitioning = "Transitioning",
    /** Maintenance */
    Maintenance = "Maintenance"
}

/** Known values of {@link AmlFilesystemProvisioningStateType} that the service accepts. */
export declare enum KnownAmlFilesystemProvisioningStateType {
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Creating */
    Creating = "Creating",
    /** Deleting */
    Deleting = "Deleting",
    /** Updating */
    Updating = "Updating",
    /** Canceled */
    Canceled = "Canceled"
}

/** Known values of {@link ArchiveStatusType} that the service accepts. */
export declare enum KnownArchiveStatusType {
    /** NotConfigured */
    NotConfigured = "NotConfigured",
    /** Idle */
    Idle = "Idle",
    /** InProgress */
    InProgress = "InProgress",
    /** Canceled */
    Canceled = "Canceled",
    /** Completed */
    Completed = "Completed",
    /** Failed */
    Failed = "Failed",
    /** Cancelling */
    Cancelling = "Cancelling",
    /** FSScanInProgress */
    FSScanInProgress = "FSScanInProgress"
}

/** Known values of {@link CreatedByType} that the service accepts. */
export declare enum KnownCreatedByType {
    /** User */
    User = "User",
    /** Application */
    Application = "Application",
    /** ManagedIdentity */
    ManagedIdentity = "ManagedIdentity",
    /** Key */
    Key = "Key"
}

/** Known values of {@link DomainJoinedType} that the service accepts. */
export declare enum KnownDomainJoinedType {
    /** Yes */
    Yes = "Yes",
    /** No */
    No = "No",
    /** Error */
    Error = "Error"
}

/** Known values of {@link FilesystemSubnetStatusType} that the service accepts. */
export declare enum KnownFilesystemSubnetStatusType {
    /** Ok */
    Ok = "Ok",
    /** Invalid */
    Invalid = "Invalid"
}

/** Known values of {@link FirmwareStatusType} that the service accepts. */
export declare enum KnownFirmwareStatusType {
    /** Available */
    Available = "available",
    /** Unavailable */
    Unavailable = "unavailable"
}

/** Known values of {@link HealthStateType} that the service accepts. */
export declare enum KnownHealthStateType {
    /** Unknown */
    Unknown = "Unknown",
    /** Healthy */
    Healthy = "Healthy",
    /** Degraded */
    Degraded = "Degraded",
    /** Down */
    Down = "Down",
    /** Transitioning */
    Transitioning = "Transitioning",
    /** Stopping */
    Stopping = "Stopping",
    /** Stopped */
    Stopped = "Stopped",
    /** Upgrading */
    Upgrading = "Upgrading",
    /** Flushing */
    Flushing = "Flushing",
    /** WaitingForKey */
    WaitingForKey = "WaitingForKey",
    /** StartFailed */
    StartFailed = "StartFailed",
    /** UpgradeFailed */
    UpgradeFailed = "UpgradeFailed"
}

/** Known values of {@link MetricAggregationType} that the service accepts. */
export declare enum KnownMetricAggregationType {
    /** NotSpecified */
    NotSpecified = "NotSpecified",
    /** None */
    None = "None",
    /** Average */
    Average = "Average",
    /** Minimum */
    Minimum = "Minimum",
    /** Maximum */
    Maximum = "Maximum",
    /** Total */
    Total = "Total",
    /** Count */
    Count = "Count"
}

/** Known values of {@link NfsAccessRuleAccess} that the service accepts. */
export declare enum KnownNfsAccessRuleAccess {
    /** No */
    No = "no",
    /** Ro */
    Ro = "ro",
    /** Rw */
    Rw = "rw"
}

/** Known values of {@link NfsAccessRuleScope} that the service accepts. */
export declare enum KnownNfsAccessRuleScope {
    /** Default */
    Default = "default",
    /** Network */
    Network = "network",
    /** Host */
    Host = "host"
}

/** Known values of {@link OperationalStateType} that the service accepts. */
export declare enum KnownOperationalStateType {
    /** Ready */
    Ready = "Ready",
    /** Busy */
    Busy = "Busy",
    /** Suspended */
    Suspended = "Suspended",
    /** Flushing */
    Flushing = "Flushing"
}

/** Known values of {@link PrimingJobState} that the service accepts. */
export declare enum KnownPrimingJobState {
    /** Queued */
    Queued = "Queued",
    /** Running */
    Running = "Running",
    /** Paused */
    Paused = "Paused",
    /** Complete */
    Complete = "Complete"
}

/** Known values of {@link ProvisioningStateType} that the service accepts. */
export declare enum KnownProvisioningStateType {
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Canceled */
    Canceled = "Canceled",
    /** Creating */
    Creating = "Creating",
    /** Deleting */
    Deleting = "Deleting",
    /** Updating */
    Updating = "Updating"
}

/** Known values of {@link ReasonCode} that the service accepts. */
export declare enum KnownReasonCode {
    /** QuotaId */
    QuotaId = "QuotaId",
    /** NotAvailableForSubscription */
    NotAvailableForSubscription = "NotAvailableForSubscription"
}

/** Known values of {@link StorageTargetType} that the service accepts. */
export declare enum KnownStorageTargetType {
    /** Nfs3 */
    Nfs3 = "nfs3",
    /** Clfs */
    Clfs = "clfs",
    /** Unknown */
    Unknown = "unknown",
    /** BlobNfs */
    BlobNfs = "blobNfs"
}

/** Known values of {@link UsernameDownloadedType} that the service accepts. */
export declare enum KnownUsernameDownloadedType {
    /** Yes */
    Yes = "Yes",
    /** No */
    No = "No",
    /** Error */
    Error = "Error"
}

/** Known values of {@link UsernameSource} that the service accepts. */
export declare enum KnownUsernameSource {
    /** AD */
    AD = "AD",
    /** Ldap */
    Ldap = "LDAP",
    /** File */
    File = "File",
    /** None */
    None = "None"
}

/** Details about operation related to logs. */
export declare interface LogSpecification {
    /** The name of the log. */
    name?: string;
    /** Localized display name of the log. */
    displayName?: string;
}

/** Defines values for MaintenanceDayOfWeekType. */
export declare type MaintenanceDayOfWeekType = "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday";

/**
 * Defines values for MetricAggregationType. \
 * {@link KnownMetricAggregationType} can be used interchangeably with MetricAggregationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **None** \
 * **Average** \
 * **Minimum** \
 * **Maximum** \
 * **Total** \
 * **Count**
 */
export declare type MetricAggregationType = string;

/** Specifications of the Dimension of metrics. */
export declare interface MetricDimension {
    /** Name of the dimension */
    name?: string;
    /** Localized friendly display name of the dimension */
    displayName?: string;
    /** Internal name of the dimension. */
    internalName?: string;
    /** To be exported to shoe box. */
    toBeExportedForShoebox?: boolean;
}

/** Details about operation related to metrics. */
export declare interface MetricSpecification {
    /** The name of the metric. */
    name?: string;
    /** Localized display name of the metric. */
    displayName?: string;
    /** The description of the metric. */
    displayDescription?: string;
    /** The unit that the metric is measured in. */
    unit?: string;
    /** The type of metric aggregation. */
    aggregationType?: string;
    /** Support metric aggregation type. */
    supportedAggregationTypes?: MetricAggregationType[];
    /** Type of metrics. */
    metricClass?: string;
    /** Dimensions of the metric */
    dimensions?: MetricDimension[];
}

/** A namespace junction. */
export declare interface NamespaceJunction {
    /** Namespace path on a cache for a Storage Target. */
    namespacePath?: string;
    /** Path in Storage Target to which namespacePath points. */
    targetPath?: string;
    /** NFS export where targetPath exists. */
    nfsExport?: string;
    /** Name of the access policy applied to this junction. */
    nfsAccessPolicy?: string;
}

/** Properties pertaining to the Nfs3Target */
export declare interface Nfs3Target {
    /** IP address or host name of an NFSv3 host (e.g., 10.0.44.44). */
    target?: string;
    /** Identifies the StorageCache usage model to be used for this storage target. */
    usageModel?: string;
    /** Amount of time (in seconds) the cache waits before it checks the back-end storage for file updates. */
    verificationTimer?: number;
    /** Amount of time (in seconds) the cache waits after the last file change before it copies the changed file to back-end storage. */
    writeBackTimer?: number;
}

/** A set of rules describing access policies applied to NFSv3 clients of the cache. */
export declare interface NfsAccessPolicy {
    /** Name identifying this policy. Access Policy names are not case sensitive. */
    name: string;
    /** The set of rules describing client accesses allowed under this policy. */
    accessRules: NfsAccessRule[];
}

/** Rule to place restrictions on portions of the cache namespace being presented to clients. */
export declare interface NfsAccessRule {
    /** Scope for this rule. The scope and filter determine which clients match the rule. */
    scope: NfsAccessRuleScope;
    /** Filter applied to the scope for this rule. The filter's format depends on its scope. 'default' scope matches all clients and has no filter value. 'network' scope takes a filter in CIDR format (for example, 10.99.1.0/24). 'host' takes an IP address or fully qualified domain name as filter. If a client does not match any filter rule and there is no default rule, access is denied. */
    filter?: string;
    /** Access allowed by this rule. */
    access: NfsAccessRuleAccess;
    /** Allow SUID semantics. */
    suid?: boolean;
    /** For the default policy, allow access to subdirectories under the root export. If this is set to no, clients can only mount the path '/'. If set to yes, clients can mount a deeper path, like '/a/b'. */
    submountAccess?: boolean;
    /** Map root accesses to anonymousUID and anonymousGID. */
    rootSquash?: boolean;
    /** UID value that replaces 0 when rootSquash is true. 65534 will be used if not provided. */
    anonymousUID?: string;
    /** GID value that replaces 0 when rootSquash is true. This will use the value of anonymousUID if not provided. */
    anonymousGID?: string;
}

/**
 * Defines values for NfsAccessRuleAccess. \
 * {@link KnownNfsAccessRuleAccess} can be used interchangeably with NfsAccessRuleAccess,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **no** \
 * **ro** \
 * **rw**
 */
export declare type NfsAccessRuleAccess = string;

/**
 * Defines values for NfsAccessRuleScope. \
 * {@link KnownNfsAccessRuleScope} can be used interchangeably with NfsAccessRuleScope,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **default** \
 * **network** \
 * **host**
 */
export declare type NfsAccessRuleScope = string;

/**
 * Defines values for OperationalStateType. \
 * {@link KnownOperationalStateType} can be used interchangeably with OperationalStateType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Ready** \
 * **Busy** \
 * **Suspended** \
 * **Flushing**
 */
export declare type OperationalStateType = string;

/** Interface representing a Operations. */
export declare interface Operations {
    /**
     * Lists all of the available Resource Provider operations.
     * @param options The options parameters.
     */
    list(options?: OperationsListOptionalParams): PagedAsyncIterableIterator<ApiOperation>;
}

/** Optional parameters. */
export declare interface OperationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type OperationsListNextResponse = ApiOperationListResult;

/** Optional parameters. */
export declare interface OperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OperationsListResponse = ApiOperationListResult;

/** A priming job instance. */
export declare interface PrimingJob {
    /** The priming job name. */
    primingJobName: string;
    /** The URL for the priming manifest file to download. This file must be readable from the HPC Cache. When the file is in Azure blob storage the URL should include a Shared Access Signature (SAS) granting read permissions on the blob. */
    primingManifestUrl: string;
    /**
     * The unique identifier of the priming job.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly primingJobId?: string;
    /**
     * The state of the priming operation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly primingJobState?: PrimingJobState;
    /**
     * The status code of the priming job.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly primingJobStatus?: string;
    /**
     * The job details or error information if any.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly primingJobDetails?: string;
    /**
     * The current progress of the priming job, as a percentage.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly primingJobPercentComplete?: number;
}

/** Object containing the priming job ID. */
export declare interface PrimingJobIdParameter {
    /** The unique identifier of the priming job. */
    primingJobId: string;
}

/**
 * Defines values for PrimingJobState. \
 * {@link KnownPrimingJobState} can be used interchangeably with PrimingJobState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Queued** \
 * **Running** \
 * **Paused** \
 * **Complete**
 */
export declare type PrimingJobState = string;

/**
 * Defines values for ProvisioningStateType. \
 * {@link KnownProvisioningStateType} can be used interchangeably with ProvisioningStateType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **Creating** \
 * **Deleting** \
 * **Updating**
 */
export declare type ProvisioningStateType = string;

/**
 * Defines values for ReasonCode. \
 * {@link KnownReasonCode} can be used interchangeably with ReasonCode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **QuotaId** \
 * **NotAvailableForSubscription**
 */
export declare type ReasonCode = string;

/** Information about the number of available IP addresses that are required for the AML file system. */
export declare interface RequiredAmlFilesystemSubnetsSize {
    /** The number of available IP addresses that are required for the AML file system. */
    filesystemSubnetSize?: number;
}

/** Information required to get the number of available IP addresses a subnet should have that will be used in AML file system create */
export declare interface RequiredAmlFilesystemSubnetsSizeInfo {
    /** The size of the AML file system, in TiB. */
    storageCapacityTiB?: number;
    /** SKU for the resource. */
    sku?: SkuName;
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export declare interface Resource {
    /**
     * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
}

/** A resource SKU. */
export declare interface ResourceSku {
    /**
     * The type of resource the SKU applies to.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resourceType?: string;
    /** A list of capabilities of this SKU, such as throughput or ops/sec. */
    capabilities?: ResourceSkuCapabilities[];
    /**
     * The set of locations where the SKU is available. This is the supported and registered Azure Geo Regions (e.g., West US, East US, Southeast Asia, etc.).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly locations?: string[];
    /** The set of locations where the SKU is available. */
    locationInfo?: ResourceSkuLocationInfo[];
    /** The name of this SKU. */
    name?: string;
    /** The restrictions preventing this SKU from being used. This is empty if there are no restrictions. */
    restrictions?: Restriction[];
}

/** A resource SKU capability. */
export declare interface ResourceSkuCapabilities {
    /** Name of a capability, such as ops/sec. */
    name?: string;
    /** Quantity, if the capability is measured by quantity. */
    value?: string;
}

/** Resource SKU location information. */
export declare interface ResourceSkuLocationInfo {
    /** Location where this SKU is available. */
    location?: string;
    /** Zones if any. */
    zones?: string[];
}

/** The response from the List Cache SKUs operation. */
export declare interface ResourceSkusResult {
    /** The URI to fetch the next page of cache SKUs. */
    nextLink?: string;
    /**
     * The list of SKUs available for the subscription.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: ResourceSku[];
}

/** The usage and limit (quota) for a resource. */
export declare interface ResourceUsage {
    /**
     * The limit (quota) for this resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly limit?: number;
    /**
     * Unit that the limit and usages are expressed in, such as 'Count'.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly unit?: string;
    /**
     * The current usage of this resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly currentValue?: number;
    /**
     * Naming information for this resource type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: ResourceUsageName;
}

/** Naming information for this resource type. */
export declare interface ResourceUsageName {
    /** Canonical name for this resource type. */
    value?: string;
    /** Localized name for this resource type. */
    localizedValue?: string;
}

/** Result of the request to list resource usages. It contains a list of resource usages & limits and a URL link to get the next set of results. */
export declare interface ResourceUsagesListResult {
    /**
     * URL to get the next set of resource usage list results if there are any.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
    /**
     * List of usages and limits for resources controlled by the Microsoft.StorageCache resource provider.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: ResourceUsage[];
}

/** The restrictions preventing this SKU from being used. */
export declare interface Restriction {
    /**
     * The type of restrictions. In this version, the only possible value for this is location.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The value of restrictions. If the restriction type is set to location, then this would be the different locations where the SKU is restricted.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly values?: string[];
    /** The reason for the restriction. As of now this can be "QuotaId" or "NotAvailableForSubscription". "QuotaId" is set when the SKU has requiredQuotas parameter as the subscription does not belong to that quota. "NotAvailableForSubscription" is related to capacity at the datacenter. */
    reasonCode?: ReasonCode;
}

/** SKU for the resource. */
export declare interface SkuName {
    /** SKU name for this resource. */
    name?: string;
}

/** Interface representing a Skus. */
export declare interface Skus {
    /**
     * Get the list of StorageCache.Cache SKUs available to this subscription.
     * @param options The options parameters.
     */
    list(options?: SkusListOptionalParams): PagedAsyncIterableIterator<ResourceSku>;
}

/** Optional parameters. */
export declare interface SkusListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type SkusListNextResponse = ResourceSkusResult;

/** Optional parameters. */
export declare interface SkusListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type SkusListResponse = ResourceSkusResult;

export declare class StorageCacheManagementClient extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the StorageCacheManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: StorageCacheManagementClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    /**
     * Check that subnets will be valid for AML file system create calls.
     * @param options The options parameters.
     */
    checkAmlFSSubnets(options?: CheckAmlFSSubnetsOptionalParams): Promise<void>;
    /**
     * Get the number of available IP addresses needed for the AML file system information provided.
     * @param options The options parameters.
     */
    getRequiredAmlFSSubnetsSize(options?: GetRequiredAmlFSSubnetsSizeOptionalParams): Promise<GetRequiredAmlFSSubnetsSizeResponse>;
    amlFilesystems: AmlFilesystems;
    operations: Operations;
    skus: Skus;
    usageModels: UsageModels;
    ascOperations: AscOperations;
    ascUsages: AscUsages;
    caches: Caches;
    storageTargets: StorageTargets;
    storageTargetOperations: StorageTargetOperations;
}

/** Optional parameters. */
export declare interface StorageCacheManagementClientOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** Type of the Storage Target. */
export declare interface StorageTarget extends StorageTargetResource {
    /** List of cache namespace junctions to target for namespace associations. */
    junctions?: NamespaceJunction[];
    /** Type of the Storage Target. */
    targetType?: StorageTargetType;
    /**
     * ARM provisioning state, see https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#provisioningstate-property
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningStateType;
    /** Storage target operational state. */
    state?: OperationalStateType;
    /** Properties when targetType is nfs3. */
    nfs3?: Nfs3Target;
    /** Properties when targetType is clfs. */
    clfs?: ClfsTarget;
    /** Properties when targetType is unknown. */
    unknown?: UnknownTarget;
    /** Properties when targetType is blobNfs. */
    blobNfs?: BlobNfsTarget;
    /**
     * The percentage of cache space allocated for this storage target
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly allocationPercentage?: number;
}

/** Defines headers for StorageTarget_flush operation. */
export declare interface StorageTargetFlushHeaders {
    /** Location URI to poll for result */
    location?: string;
    /** URI to poll for the operation status */
    azureAsyncOperation?: string;
}

/** Optional parameters. */
export declare interface StorageTargetFlushOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Defines headers for StorageTarget_invalidate operation. */
export declare interface StorageTargetInvalidateHeaders {
    /** Location URI to poll for result */
    location?: string;
    /** URI to poll for the operation status */
    azureAsyncOperation?: string;
}

/** Optional parameters. */
export declare interface StorageTargetInvalidateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Interface representing a StorageTargetOperations. */
export declare interface StorageTargetOperations {
    /**
     * Tells the cache to write all dirty data to the Storage Target's backend storage. Client requests to
     * this storage target's namespace will return errors until the flush operation completes.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param storageTargetName Name of Storage Target.
     * @param options The options parameters.
     */
    beginFlush(resourceGroupName: string, cacheName: string, storageTargetName: string, options?: StorageTargetFlushOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Tells the cache to write all dirty data to the Storage Target's backend storage. Client requests to
     * this storage target's namespace will return errors until the flush operation completes.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param storageTargetName Name of Storage Target.
     * @param options The options parameters.
     */
    beginFlushAndWait(resourceGroupName: string, cacheName: string, storageTargetName: string, options?: StorageTargetFlushOptionalParams): Promise<void>;
    /**
     * Suspends client access to a storage target.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param storageTargetName Name of Storage Target.
     * @param options The options parameters.
     */
    beginSuspend(resourceGroupName: string, cacheName: string, storageTargetName: string, options?: StorageTargetSuspendOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Suspends client access to a storage target.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param storageTargetName Name of Storage Target.
     * @param options The options parameters.
     */
    beginSuspendAndWait(resourceGroupName: string, cacheName: string, storageTargetName: string, options?: StorageTargetSuspendOptionalParams): Promise<void>;
    /**
     * Resumes client access to a previously suspended storage target.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param storageTargetName Name of Storage Target.
     * @param options The options parameters.
     */
    beginResume(resourceGroupName: string, cacheName: string, storageTargetName: string, options?: StorageTargetResumeOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Resumes client access to a previously suspended storage target.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param storageTargetName Name of Storage Target.
     * @param options The options parameters.
     */
    beginResumeAndWait(resourceGroupName: string, cacheName: string, storageTargetName: string, options?: StorageTargetResumeOptionalParams): Promise<void>;
    /**
     * Invalidate all cached data for a storage target. Cached files are discarded and fetched from the
     * back end on the next request.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param storageTargetName Name of Storage Target.
     * @param options The options parameters.
     */
    beginInvalidate(resourceGroupName: string, cacheName: string, storageTargetName: string, options?: StorageTargetInvalidateOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Invalidate all cached data for a storage target. Cached files are discarded and fetched from the
     * back end on the next request.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param storageTargetName Name of Storage Target.
     * @param options The options parameters.
     */
    beginInvalidateAndWait(resourceGroupName: string, cacheName: string, storageTargetName: string, options?: StorageTargetInvalidateOptionalParams): Promise<void>;
}

/** Resource used by a cache. */
export declare interface StorageTargetResource {
    /**
     * Name of the Storage Target.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Resource ID of the Storage Target.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Type of the Storage Target; Microsoft.StorageCache/Cache/StorageTarget
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * Region name string.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly location?: string;
    /**
     * The system meta data relating to this resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
}

/** Defines headers for StorageTarget_resume operation. */
export declare interface StorageTargetResumeHeaders {
    /** Location URI to poll for result */
    location?: string;
    /** URI to poll for the operation status */
    azureAsyncOperation?: string;
}

/** Optional parameters. */
export declare interface StorageTargetResumeOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Interface representing a StorageTargets. */
export declare interface StorageTargets {
    /**
     * Returns a list of Storage Targets for the specified cache.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param options The options parameters.
     */
    listByCache(resourceGroupName: string, cacheName: string, options?: StorageTargetsListByCacheOptionalParams): PagedAsyncIterableIterator<StorageTarget>;
    /**
     * Tells a storage target to refresh its DNS information.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param storageTargetName Name of Storage Target.
     * @param options The options parameters.
     */
    beginDnsRefresh(resourceGroupName: string, cacheName: string, storageTargetName: string, options?: StorageTargetsDnsRefreshOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Tells a storage target to refresh its DNS information.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param storageTargetName Name of Storage Target.
     * @param options The options parameters.
     */
    beginDnsRefreshAndWait(resourceGroupName: string, cacheName: string, storageTargetName: string, options?: StorageTargetsDnsRefreshOptionalParams): Promise<void>;
    /**
     * Removes a Storage Target from a cache. This operation is allowed at any time, but if the cache is
     * down or unhealthy, the actual removal of the Storage Target may be delayed until the cache is
     * healthy again. Note that if the cache has data to flush to the Storage Target, the data will be
     * flushed before the Storage Target will be deleted.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param storageTargetName Name of Storage Target.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, cacheName: string, storageTargetName: string, options?: StorageTargetsDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Removes a Storage Target from a cache. This operation is allowed at any time, but if the cache is
     * down or unhealthy, the actual removal of the Storage Target may be delayed until the cache is
     * healthy again. Note that if the cache has data to flush to the Storage Target, the data will be
     * flushed before the Storage Target will be deleted.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param storageTargetName Name of Storage Target.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, cacheName: string, storageTargetName: string, options?: StorageTargetsDeleteOptionalParams): Promise<void>;
    /**
     * Returns a Storage Target from a cache.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param storageTargetName Name of Storage Target.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, cacheName: string, storageTargetName: string, options?: StorageTargetsGetOptionalParams): Promise<StorageTargetsGetResponse>;
    /**
     * Create or update a Storage Target. This operation is allowed at any time, but if the cache is down
     * or unhealthy, the actual creation/modification of the Storage Target may be delayed until the cache
     * is healthy again.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param storageTargetName Name of Storage Target.
     * @param storagetarget Object containing the definition of a Storage Target.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, cacheName: string, storageTargetName: string, storagetarget: StorageTarget, options?: StorageTargetsCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<StorageTargetsCreateOrUpdateResponse>, StorageTargetsCreateOrUpdateResponse>>;
    /**
     * Create or update a Storage Target. This operation is allowed at any time, but if the cache is down
     * or unhealthy, the actual creation/modification of the Storage Target may be delayed until the cache
     * is healthy again.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param storageTargetName Name of Storage Target.
     * @param storagetarget Object containing the definition of a Storage Target.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, cacheName: string, storageTargetName: string, storagetarget: StorageTarget, options?: StorageTargetsCreateOrUpdateOptionalParams): Promise<StorageTargetsCreateOrUpdateResponse>;
    /**
     * Tells a storage target to restore its settings to their default values.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param storageTargetName Name of Storage Target.
     * @param options The options parameters.
     */
    beginRestoreDefaults(resourceGroupName: string, cacheName: string, storageTargetName: string, options?: StorageTargetsRestoreDefaultsOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Tells a storage target to restore its settings to their default values.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
     *                  the [-0-9a-zA-Z_] char class.
     * @param storageTargetName Name of Storage Target.
     * @param options The options parameters.
     */
    beginRestoreDefaultsAndWait(resourceGroupName: string, cacheName: string, storageTargetName: string, options?: StorageTargetsRestoreDefaultsOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface StorageTargetsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type StorageTargetsCreateOrUpdateResponse = StorageTarget;

/** Defines headers for StorageTargets_delete operation. */
export declare interface StorageTargetsDeleteHeaders {
    /** Location URI to poll for result */
    location?: string;
    /** URI to poll for the operation status */
    azureAsyncOperation?: string;
}

/** Optional parameters. */
export declare interface StorageTargetsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Boolean value requesting the force delete operation for a storage target. Force delete discards unwritten-data in the cache instead of flushing it to back-end storage. */
    force?: string;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Defines headers for StorageTargets_dnsRefresh operation. */
export declare interface StorageTargetsDnsRefreshHeaders {
    /** Location URI to poll for result */
    location?: string;
    /** URI to poll for the operation status */
    azureAsyncOperation?: string;
}

/** Optional parameters. */
export declare interface StorageTargetsDnsRefreshOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface StorageTargetsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type StorageTargetsGetResponse = StorageTarget;

/** Optional parameters. */
export declare interface StorageTargetsListByCacheNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByCacheNext operation. */
export declare type StorageTargetsListByCacheNextResponse = StorageTargetsResult;

/** Optional parameters. */
export declare interface StorageTargetsListByCacheOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByCache operation. */
export declare type StorageTargetsListByCacheResponse = StorageTargetsResult;

/** Storage Target space allocation properties. */
export declare interface StorageTargetSpaceAllocation {
    /** Name of the storage target. */
    name?: string;
    /** The percentage of cache space allocated for this storage target */
    allocationPercentage?: number;
}

/** Defines headers for StorageTargets_restoreDefaults operation. */
export declare interface StorageTargetsRestoreDefaultsHeaders {
    /** Location URI to poll for result */
    location?: string;
    /** URI to poll for the operation status */
    azureAsyncOperation?: string;
}

/** Optional parameters. */
export declare interface StorageTargetsRestoreDefaultsOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** A list of Storage Targets. */
export declare interface StorageTargetsResult {
    /** The URI to fetch the next page of Storage Targets. */
    nextLink?: string;
    /** The list of Storage Targets defined for the cache. */
    value?: StorageTarget[];
}

/** Defines headers for StorageTarget_suspend operation. */
export declare interface StorageTargetSuspendHeaders {
    /** Location URI to poll for result */
    location?: string;
    /** URI to poll for the operation status */
    azureAsyncOperation?: string;
}

/** Optional parameters. */
export declare interface StorageTargetSuspendOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/**
 * Defines values for StorageTargetType. \
 * {@link KnownStorageTargetType} can be used interchangeably with StorageTargetType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **nfs3** \
 * **clfs** \
 * **unknown** \
 * **blobNfs**
 */
export declare type StorageTargetType = string;

/** Metadata pertaining to creation and last modification of the resource. */
export declare interface SystemData {
    /** The identity that created the resource. */
    createdBy?: string;
    /** The type of identity that created the resource. */
    createdByType?: CreatedByType;
    /** The timestamp of resource creation (UTC). */
    createdAt?: Date;
    /** The identity that last modified the resource. */
    lastModifiedBy?: string;
    /** The type of identity that last modified the resource. */
    lastModifiedByType?: CreatedByType;
    /** The timestamp of resource last modification (UTC) */
    lastModifiedAt?: Date;
}

/** The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location' */
export declare interface TrackedResource extends Resource {
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** The geo-location where the resource lives */
    location: string;
}

/** Properties pertaining to the UnknownTarget */
export declare interface UnknownTarget {
    /** Dictionary of string->string pairs containing information about the Storage Target. */
    attributes?: {
        [propertyName: string]: string;
    };
}

/** A usage model. */
export declare interface UsageModel {
    /** Localized information describing this usage model. */
    display?: UsageModelDisplay;
    /** Non-localized keyword name for this usage model. */
    modelName?: string;
    /** The type of Storage Target to which this model is applicable (only nfs3 as of this version). */
    targetType?: string;
}

/** Localized information describing this usage model. */
export declare interface UsageModelDisplay {
    /** String to display for this usage model. */
    description?: string;
}

/** Interface representing a UsageModels. */
export declare interface UsageModels {
    /**
     * Get the list of cache usage models available to this subscription.
     * @param options The options parameters.
     */
    list(options?: UsageModelsListOptionalParams): PagedAsyncIterableIterator<UsageModel>;
}

/** Optional parameters. */
export declare interface UsageModelsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type UsageModelsListNextResponse = UsageModelsResult;

/** Optional parameters. */
export declare interface UsageModelsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type UsageModelsListResponse = UsageModelsResult;

/** A list of cache usage models. */
export declare interface UsageModelsResult {
    /** The URI to fetch the next page of cache usage models. */
    nextLink?: string;
    /** The list of usage models available for the subscription. */
    value?: UsageModel[];
}

export declare interface UserAssignedIdentitiesValue {
    /**
     * The principal ID of the user-assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
    /**
     * The client ID of the user-assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly clientId?: string;
}

/**
 * Defines values for UsernameDownloadedType. \
 * {@link KnownUsernameDownloadedType} can be used interchangeably with UsernameDownloadedType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Yes** \
 * **No** \
 * **Error**
 */
export declare type UsernameDownloadedType = string;

/**
 * Defines values for UsernameSource. \
 * {@link KnownUsernameSource} can be used interchangeably with UsernameSource,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AD** \
 * **LDAP** \
 * **File** \
 * **None**
 */
export declare type UsernameSource = string;

export { }
