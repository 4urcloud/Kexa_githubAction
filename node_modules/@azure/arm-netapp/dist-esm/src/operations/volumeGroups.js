/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await, __awaiter } from "tslib";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { createHttpPoller } from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
/// <reference lib="esnext.asynciterable" />
/** Class containing VolumeGroups operations. */
export class VolumeGroupsImpl {
    /**
     * Initialize a new instance of the class VolumeGroups class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List all volume groups for given account
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the NetApp account
     * @param options The options parameters.
     */
    listByNetAppAccount(resourceGroupName, accountName, options) {
        const iter = this.listByNetAppAccountPagingAll(resourceGroupName, accountName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByNetAppAccountPagingPage(resourceGroupName, accountName, options, settings);
            }
        };
    }
    listByNetAppAccountPagingPage(resourceGroupName, accountName, options, _settings) {
        return __asyncGenerator(this, arguments, function* listByNetAppAccountPagingPage_1() {
            let result;
            result = yield __await(this._listByNetAppAccount(resourceGroupName, accountName, options));
            yield yield __await(result.value || []);
        });
    }
    listByNetAppAccountPagingAll(resourceGroupName, accountName, options) {
        return __asyncGenerator(this, arguments, function* listByNetAppAccountPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.listByNetAppAccountPagingPage(resourceGroupName, accountName, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List all volume groups for given account
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the NetApp account
     * @param options The options parameters.
     */
    _listByNetAppAccount(resourceGroupName, accountName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, options }, listByNetAppAccountOperationSpec);
    }
    /**
     * Get details of the specified volume group
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the NetApp account
     * @param volumeGroupName The name of the volumeGroup
     * @param options The options parameters.
     */
    get(resourceGroupName, accountName, volumeGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, volumeGroupName, options }, getOperationSpec);
    }
    /**
     * Create a volume group along with specified volumes
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the NetApp account
     * @param volumeGroupName The name of the volumeGroup
     * @param body Volume Group object supplied in the body of the operation.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName, accountName, volumeGroupName, body, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, accountName, volumeGroupName, body, options },
                spec: createOperationSpec
            });
            const poller = yield createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create a volume group along with specified volumes
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the NetApp account
     * @param volumeGroupName The name of the volumeGroup
     * @param body Volume Group object supplied in the body of the operation.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName, accountName, volumeGroupName, body, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreate(resourceGroupName, accountName, volumeGroupName, body, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Delete the specified volume group only if there are no volumes under volume group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the NetApp account
     * @param volumeGroupName The name of the volumeGroup
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, accountName, volumeGroupName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, accountName, volumeGroupName, options },
                spec: deleteOperationSpec
            });
            const poller = yield createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Delete the specified volume group only if there are no volumes under volume group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the NetApp account
     * @param volumeGroupName The name of the volumeGroup
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, accountName, volumeGroupName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, accountName, volumeGroupName, options);
            return poller.pollUntilDone();
        });
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listByNetAppAccountOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/volumeGroups",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.VolumeGroupList
        },
        default: {}
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.accountName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/volumeGroups/{volumeGroupName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.VolumeGroupDetails
        },
        default: {}
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.volumeGroupName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const createOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/volumeGroups/{volumeGroupName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.VolumeGroupDetails
        },
        201: {
            bodyMapper: Mappers.VolumeGroupDetails
        },
        202: {
            bodyMapper: Mappers.VolumeGroupDetails
        },
        204: {
            bodyMapper: Mappers.VolumeGroupDetails
        },
        default: {}
    },
    requestBody: Parameters.body28,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.volumeGroupName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/volumeGroups/{volumeGroupName}",
    httpMethod: "DELETE",
    responses: { 200: {}, 201: {}, 202: {}, 204: {}, default: {} },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.volumeGroupName
    ],
    serializer
};
//# sourceMappingURL=volumeGroups.js.map