import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { VolumeQuotaRules } from "../operationsInterfaces";
import { NetAppManagementClient } from "../netAppManagementClient";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import { VolumeQuotaRule, VolumeQuotaRulesListByVolumeOptionalParams, VolumeQuotaRulesGetOptionalParams, VolumeQuotaRulesGetResponse, VolumeQuotaRulesCreateOptionalParams, VolumeQuotaRulesCreateResponse, VolumeQuotaRulePatch, VolumeQuotaRulesUpdateOptionalParams, VolumeQuotaRulesUpdateResponse, VolumeQuotaRulesDeleteOptionalParams } from "../models";
/** Class containing VolumeQuotaRules operations. */
export declare class VolumeQuotaRulesImpl implements VolumeQuotaRules {
    private readonly client;
    /**
     * Initialize a new instance of the class VolumeQuotaRules class.
     * @param client Reference to the service client
     */
    constructor(client: NetAppManagementClient);
    /**
     * List all quota rules associated with the volume
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param options The options parameters.
     */
    listByVolume(resourceGroupName: string, accountName: string, poolName: string, volumeName: string, options?: VolumeQuotaRulesListByVolumeOptionalParams): PagedAsyncIterableIterator<VolumeQuotaRule>;
    private listByVolumePagingPage;
    private listByVolumePagingAll;
    /**
     * List all quota rules associated with the volume
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param options The options parameters.
     */
    private _listByVolume;
    /**
     * Get details of the specified quota rule
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param volumeQuotaRuleName The name of volume quota rule
     * @param options The options parameters.
     */
    get(resourceGroupName: string, accountName: string, poolName: string, volumeName: string, volumeQuotaRuleName: string, options?: VolumeQuotaRulesGetOptionalParams): Promise<VolumeQuotaRulesGetResponse>;
    /**
     * Create the specified quota rule within the given volume
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param volumeQuotaRuleName The name of volume quota rule
     * @param body Quota rule object supplied in the body of the operation.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName: string, accountName: string, poolName: string, volumeName: string, volumeQuotaRuleName: string, body: VolumeQuotaRule, options?: VolumeQuotaRulesCreateOptionalParams): Promise<SimplePollerLike<OperationState<VolumeQuotaRulesCreateResponse>, VolumeQuotaRulesCreateResponse>>;
    /**
     * Create the specified quota rule within the given volume
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param volumeQuotaRuleName The name of volume quota rule
     * @param body Quota rule object supplied in the body of the operation.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName: string, accountName: string, poolName: string, volumeName: string, volumeQuotaRuleName: string, body: VolumeQuotaRule, options?: VolumeQuotaRulesCreateOptionalParams): Promise<VolumeQuotaRulesCreateResponse>;
    /**
     * Patch a quota rule
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param volumeQuotaRuleName The name of volume quota rule
     * @param body Quota rule object supplied in the body of the operation.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, accountName: string, poolName: string, volumeName: string, volumeQuotaRuleName: string, body: VolumeQuotaRulePatch, options?: VolumeQuotaRulesUpdateOptionalParams): Promise<SimplePollerLike<OperationState<VolumeQuotaRulesUpdateResponse>, VolumeQuotaRulesUpdateResponse>>;
    /**
     * Patch a quota rule
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param volumeQuotaRuleName The name of volume quota rule
     * @param body Quota rule object supplied in the body of the operation.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, accountName: string, poolName: string, volumeName: string, volumeQuotaRuleName: string, body: VolumeQuotaRulePatch, options?: VolumeQuotaRulesUpdateOptionalParams): Promise<VolumeQuotaRulesUpdateResponse>;
    /**
     * Delete quota rule
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param volumeQuotaRuleName The name of volume quota rule
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, accountName: string, poolName: string, volumeName: string, volumeQuotaRuleName: string, options?: VolumeQuotaRulesDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Delete quota rule
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param volumeQuotaRuleName The name of volume quota rule
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, accountName: string, poolName: string, volumeName: string, volumeQuotaRuleName: string, options?: VolumeQuotaRulesDeleteOptionalParams): Promise<void>;
}
//# sourceMappingURL=volumeQuotaRules.d.ts.map