/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { createHttpPoller } from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
/** Class containing NetAppResource operations. */
export class NetAppResourceImpl {
    /**
     * Initialize a new instance of the class NetAppResource class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Check if a resource name is available.
     * @param location The name of Azure region.
     * @param name Resource name to verify.
     * @param typeParam Resource type used for verification.
     * @param resourceGroup Resource group name.
     * @param options The options parameters.
     */
    checkNameAvailability(location, name, typeParam, resourceGroup, options) {
        return this.client.sendOperationRequest({ location, name, typeParam, resourceGroup, options }, checkNameAvailabilityOperationSpec);
    }
    /**
     * Check if a file path is available.
     * @param location The name of Azure region.
     * @param name File path to verify.
     * @param subnetId The Azure Resource URI for a delegated subnet. Must have the delegation
     *                 Microsoft.NetApp/volumes
     * @param options The options parameters.
     */
    checkFilePathAvailability(location, name, subnetId, options) {
        return this.client.sendOperationRequest({ location, name, subnetId, options }, checkFilePathAvailabilityOperationSpec);
    }
    /**
     * Check if a quota is available.
     * @param location The name of Azure region.
     * @param name Name of the resource to verify.
     * @param typeParam Resource type used for verification.
     * @param resourceGroup Resource group name.
     * @param options The options parameters.
     */
    checkQuotaAvailability(location, name, typeParam, resourceGroup, options) {
        return this.client.sendOperationRequest({ location, name, typeParam, resourceGroup, options }, checkQuotaAvailabilityOperationSpec);
    }
    /**
     * Provides storage to network proximity and logical zone mapping information.
     * @param location The name of Azure region.
     * @param options The options parameters.
     */
    queryRegionInfo(location, options) {
        return this.client.sendOperationRequest({ location, options }, queryRegionInfoOperationSpec);
    }
    /**
     * Get details of the specified network sibling set.
     * @param location The name of Azure region.
     * @param networkSiblingSetId Network Sibling Set ID for a group of volumes sharing networking
     *                            resources in a subnet.
     * @param subnetId The Azure Resource URI for a delegated subnet. Must have the delegation
     *                 Microsoft.NetApp/volumes. Example
     *                 /subscriptions/subscriptionId/resourceGroups/resourceGroup/providers/Microsoft.Network/virtualNetworks/testVnet/subnets/{mySubnet}
     * @param options The options parameters.
     */
    queryNetworkSiblingSet(location, networkSiblingSetId, subnetId, options) {
        return this.client.sendOperationRequest({ location, networkSiblingSetId, subnetId, options }, queryNetworkSiblingSetOperationSpec);
    }
    /**
     * Update the network features of the specified network sibling set.
     * @param location The name of Azure region.
     * @param networkSiblingSetId Network Sibling Set ID for a group of volumes sharing networking
     *                            resources in a subnet.
     * @param subnetId The Azure Resource URI for a delegated subnet. Must have the delegation
     *                 Microsoft.NetApp/volumes. Example
     *                 /subscriptions/subscriptionId/resourceGroups/resourceGroup/providers/Microsoft.Network/virtualNetworks/testVnet/subnets/{mySubnet}
     * @param networkSiblingSetStateId Network sibling set state Id identifying the current state of the
     *                                 sibling set.
     * @param networkFeatures Network features available to the volume, some such
     * @param options The options parameters.
     */
    beginUpdateNetworkSiblingSet(location, networkSiblingSetId, subnetId, networkSiblingSetStateId, networkFeatures, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    location,
                    networkSiblingSetId,
                    subnetId,
                    networkSiblingSetStateId,
                    networkFeatures,
                    options
                },
                spec: updateNetworkSiblingSetOperationSpec
            });
            const poller = yield createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Update the network features of the specified network sibling set.
     * @param location The name of Azure region.
     * @param networkSiblingSetId Network Sibling Set ID for a group of volumes sharing networking
     *                            resources in a subnet.
     * @param subnetId The Azure Resource URI for a delegated subnet. Must have the delegation
     *                 Microsoft.NetApp/volumes. Example
     *                 /subscriptions/subscriptionId/resourceGroups/resourceGroup/providers/Microsoft.Network/virtualNetworks/testVnet/subnets/{mySubnet}
     * @param networkSiblingSetStateId Network sibling set state Id identifying the current state of the
     *                                 sibling set.
     * @param networkFeatures Network features available to the volume, some such
     * @param options The options parameters.
     */
    beginUpdateNetworkSiblingSetAndWait(location, networkSiblingSetId, subnetId, networkSiblingSetStateId, networkFeatures, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdateNetworkSiblingSet(location, networkSiblingSetId, subnetId, networkSiblingSetStateId, networkFeatures, options);
            return poller.pollUntilDone();
        });
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const checkNameAvailabilityOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.NetApp/locations/{location}/checkNameAvailability",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.CheckAvailabilityResponse
        },
        default: {}
    },
    requestBody: {
        parameterPath: {
            name: ["name"],
            typeParam: ["typeParam"],
            resourceGroup: ["resourceGroup"]
        },
        mapper: Object.assign(Object.assign({}, Mappers.ResourceNameAvailabilityRequest), { required: true })
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.location
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const checkFilePathAvailabilityOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.NetApp/locations/{location}/checkFilePathAvailability",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.CheckAvailabilityResponse
        },
        default: {}
    },
    requestBody: {
        parameterPath: { name: ["name"], subnetId: ["subnetId"] },
        mapper: Object.assign(Object.assign({}, Mappers.FilePathAvailabilityRequest), { required: true })
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.location
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const checkQuotaAvailabilityOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.NetApp/locations/{location}/checkQuotaAvailability",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.CheckAvailabilityResponse
        },
        default: {}
    },
    requestBody: {
        parameterPath: {
            name: ["name"],
            typeParam: ["typeParam"],
            resourceGroup: ["resourceGroup"]
        },
        mapper: Object.assign(Object.assign({}, Mappers.QuotaAvailabilityRequest), { required: true })
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.location
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const queryRegionInfoOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.NetApp/locations/{location}/regionInfo",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.RegionInfo
        },
        default: {}
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.location
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const queryNetworkSiblingSetOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.NetApp/locations/{location}/queryNetworkSiblingSet",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.NetworkSiblingSet
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: {
        parameterPath: {
            networkSiblingSetId: ["networkSiblingSetId"],
            subnetId: ["subnetId"]
        },
        mapper: Object.assign(Object.assign({}, Mappers.QueryNetworkSiblingSetRequest), { required: true })
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.location
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const updateNetworkSiblingSetOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.NetApp/locations/{location}/updateNetworkSiblingSet",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.NetworkSiblingSet
        },
        201: {
            bodyMapper: Mappers.NetworkSiblingSet
        },
        202: {
            bodyMapper: Mappers.NetworkSiblingSet
        },
        204: {
            bodyMapper: Mappers.NetworkSiblingSet
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: {
        parameterPath: {
            networkSiblingSetId: ["networkSiblingSetId"],
            subnetId: ["subnetId"],
            networkSiblingSetStateId: ["networkSiblingSetStateId"],
            networkFeatures: ["networkFeatures"]
        },
        mapper: Object.assign(Object.assign({}, Mappers.UpdateNetworkSiblingSetRequest), { required: true })
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.location
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
//# sourceMappingURL=netAppResource.js.map