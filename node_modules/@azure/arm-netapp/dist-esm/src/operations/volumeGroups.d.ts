import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { VolumeGroups } from "../operationsInterfaces";
import { NetAppManagementClient } from "../netAppManagementClient";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import { VolumeGroup, VolumeGroupsListByNetAppAccountOptionalParams, VolumeGroupsGetOptionalParams, VolumeGroupsGetResponse, VolumeGroupDetails, VolumeGroupsCreateOptionalParams, VolumeGroupsCreateResponse, VolumeGroupsDeleteOptionalParams } from "../models";
/** Class containing VolumeGroups operations. */
export declare class VolumeGroupsImpl implements VolumeGroups {
    private readonly client;
    /**
     * Initialize a new instance of the class VolumeGroups class.
     * @param client Reference to the service client
     */
    constructor(client: NetAppManagementClient);
    /**
     * List all volume groups for given account
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the NetApp account
     * @param options The options parameters.
     */
    listByNetAppAccount(resourceGroupName: string, accountName: string, options?: VolumeGroupsListByNetAppAccountOptionalParams): PagedAsyncIterableIterator<VolumeGroup>;
    private listByNetAppAccountPagingPage;
    private listByNetAppAccountPagingAll;
    /**
     * List all volume groups for given account
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the NetApp account
     * @param options The options parameters.
     */
    private _listByNetAppAccount;
    /**
     * Get details of the specified volume group
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the NetApp account
     * @param volumeGroupName The name of the volumeGroup
     * @param options The options parameters.
     */
    get(resourceGroupName: string, accountName: string, volumeGroupName: string, options?: VolumeGroupsGetOptionalParams): Promise<VolumeGroupsGetResponse>;
    /**
     * Create a volume group along with specified volumes
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the NetApp account
     * @param volumeGroupName The name of the volumeGroup
     * @param body Volume Group object supplied in the body of the operation.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName: string, accountName: string, volumeGroupName: string, body: VolumeGroupDetails, options?: VolumeGroupsCreateOptionalParams): Promise<SimplePollerLike<OperationState<VolumeGroupsCreateResponse>, VolumeGroupsCreateResponse>>;
    /**
     * Create a volume group along with specified volumes
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the NetApp account
     * @param volumeGroupName The name of the volumeGroup
     * @param body Volume Group object supplied in the body of the operation.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName: string, accountName: string, volumeGroupName: string, body: VolumeGroupDetails, options?: VolumeGroupsCreateOptionalParams): Promise<VolumeGroupsCreateResponse>;
    /**
     * Delete the specified volume group only if there are no volumes under volume group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the NetApp account
     * @param volumeGroupName The name of the volumeGroup
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, accountName: string, volumeGroupName: string, options?: VolumeGroupsDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Delete the specified volume group only if there are no volumes under volume group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the NetApp account
     * @param volumeGroupName The name of the volumeGroup
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, accountName: string, volumeGroupName: string, options?: VolumeGroupsDeleteOptionalParams): Promise<void>;
}
//# sourceMappingURL=volumeGroups.d.ts.map