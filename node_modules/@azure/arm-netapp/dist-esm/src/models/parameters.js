/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { ResourceNameAvailabilityRequest as ResourceNameAvailabilityRequestMapper, FilePathAvailabilityRequest as FilePathAvailabilityRequestMapper, QuotaAvailabilityRequest as QuotaAvailabilityRequestMapper, QueryNetworkSiblingSetRequest as QueryNetworkSiblingSetRequestMapper, UpdateNetworkSiblingSetRequest as UpdateNetworkSiblingSetRequestMapper, NetAppAccount as NetAppAccountMapper, NetAppAccountPatch as NetAppAccountPatchMapper, CapacityPool as CapacityPoolMapper, CapacityPoolPatch as CapacityPoolPatchMapper, Volume as VolumeMapper, VolumePatch as VolumePatchMapper, VolumeRevert as VolumeRevertMapper, BreakFileLocksRequest as BreakFileLocksRequestMapper, GetGroupIdListForLdapUserRequest as GetGroupIdListForLdapUserRequestMapper, BreakReplicationRequest as BreakReplicationRequestMapper, ReestablishReplicationRequest as ReestablishReplicationRequestMapper, AuthorizeRequest as AuthorizeRequestMapper, PoolChangeRequest as PoolChangeRequestMapper, RelocateVolumeRequest as RelocateVolumeRequestMapper, Snapshot as SnapshotMapper, SnapshotRestoreFiles as SnapshotRestoreFilesMapper, SnapshotPolicy as SnapshotPolicyMapper, SnapshotPolicyPatch as SnapshotPolicyPatchMapper, BackupPolicy as BackupPolicyMapper, BackupPolicyPatch as BackupPolicyPatchMapper, VolumeQuotaRule as VolumeQuotaRuleMapper, VolumeQuotaRulePatch as VolumeQuotaRulePatchMapper, VolumeGroupDetails as VolumeGroupDetailsMapper, SubvolumeInfo as SubvolumeInfoMapper, SubvolumePatchRequest as SubvolumePatchRequestMapper } from "../models/mappers";
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2023-05-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export const name = {
    parameterPath: "name",
    mapper: ResourceNameAvailabilityRequestMapper
};
export const typeParam = {
    parameterPath: "typeParam",
    mapper: ResourceNameAvailabilityRequestMapper
};
export const resourceGroup = {
    parameterPath: "resourceGroup",
    mapper: ResourceNameAvailabilityRequestMapper
};
export const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const location = {
    parameterPath: "location",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "location",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const name1 = {
    parameterPath: "name",
    mapper: FilePathAvailabilityRequestMapper
};
export const subnetId = {
    parameterPath: "subnetId",
    mapper: FilePathAvailabilityRequestMapper
};
export const name2 = {
    parameterPath: "name",
    mapper: QuotaAvailabilityRequestMapper
};
export const typeParam1 = {
    parameterPath: "typeParam",
    mapper: QuotaAvailabilityRequestMapper
};
export const resourceGroup1 = {
    parameterPath: "resourceGroup",
    mapper: QuotaAvailabilityRequestMapper
};
export const networkSiblingSetId = {
    parameterPath: "networkSiblingSetId",
    mapper: QueryNetworkSiblingSetRequestMapper
};
export const subnetId1 = {
    parameterPath: "subnetId",
    mapper: QueryNetworkSiblingSetRequestMapper
};
export const networkSiblingSetId1 = {
    parameterPath: "networkSiblingSetId",
    mapper: UpdateNetworkSiblingSetRequestMapper
};
export const subnetId2 = {
    parameterPath: "subnetId",
    mapper: UpdateNetworkSiblingSetRequestMapper
};
export const networkSiblingSetStateId = {
    parameterPath: "networkSiblingSetStateId",
    mapper: UpdateNetworkSiblingSetRequestMapper
};
export const networkFeatures = {
    parameterPath: "networkFeatures",
    mapper: UpdateNetworkSiblingSetRequestMapper
};
export const quotaLimitName = {
    parameterPath: "quotaLimitName",
    mapper: {
        serializedName: "quotaLimitName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const accountName = {
    parameterPath: "accountName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9\\-_]{0,127}$")
        },
        serializedName: "accountName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const body5 = {
    parameterPath: "body",
    mapper: NetAppAccountMapper
};
export const body6 = {
    parameterPath: "body",
    mapper: NetAppAccountPatchMapper
};
export const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const poolName = {
    parameterPath: "poolName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9\\-_]{0,63}$"),
            MaxLength: 64,
            MinLength: 1
        },
        serializedName: "poolName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const body7 = {
    parameterPath: "body",
    mapper: CapacityPoolMapper
};
export const body8 = {
    parameterPath: "body",
    mapper: CapacityPoolPatchMapper
};
export const volumeName = {
    parameterPath: "volumeName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z][a-zA-Z0-9\\-_]{0,63}$"),
            MaxLength: 64,
            MinLength: 1
        },
        serializedName: "volumeName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const body9 = {
    parameterPath: "body",
    mapper: VolumeMapper
};
export const body10 = {
    parameterPath: "body",
    mapper: VolumePatchMapper
};
export const forceDelete = {
    parameterPath: ["options", "forceDelete"],
    mapper: {
        serializedName: "forceDelete",
        type: {
            name: "Boolean"
        }
    }
};
export const body11 = {
    parameterPath: "body",
    mapper: VolumeRevertMapper
};
export const body12 = {
    parameterPath: ["options", "body"],
    mapper: BreakFileLocksRequestMapper
};
export const body13 = {
    parameterPath: "body",
    mapper: GetGroupIdListForLdapUserRequestMapper
};
export const body14 = {
    parameterPath: ["options", "body"],
    mapper: BreakReplicationRequestMapper
};
export const body15 = {
    parameterPath: "body",
    mapper: ReestablishReplicationRequestMapper
};
export const body16 = {
    parameterPath: "body",
    mapper: AuthorizeRequestMapper
};
export const body17 = {
    parameterPath: "body",
    mapper: PoolChangeRequestMapper
};
export const body18 = {
    parameterPath: ["options", "body"],
    mapper: RelocateVolumeRequestMapper
};
export const snapshotName = {
    parameterPath: "snapshotName",
    mapper: {
        serializedName: "snapshotName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const body19 = {
    parameterPath: "body",
    mapper: SnapshotMapper
};
export const body20 = {
    parameterPath: "body",
    mapper: {
        serializedName: "body",
        required: true,
        type: {
            name: "Dictionary",
            value: { type: { name: "any" } }
        }
    }
};
export const body21 = {
    parameterPath: "body",
    mapper: SnapshotRestoreFilesMapper
};
export const snapshotPolicyName = {
    parameterPath: "snapshotPolicyName",
    mapper: {
        serializedName: "snapshotPolicyName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const body22 = {
    parameterPath: "body",
    mapper: SnapshotPolicyMapper
};
export const body23 = {
    parameterPath: "body",
    mapper: SnapshotPolicyPatchMapper
};
export const backupPolicyName = {
    parameterPath: "backupPolicyName",
    mapper: {
        serializedName: "backupPolicyName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const body24 = {
    parameterPath: "body",
    mapper: BackupPolicyMapper
};
export const body25 = {
    parameterPath: "body",
    mapper: BackupPolicyPatchMapper
};
export const volumeQuotaRuleName = {
    parameterPath: "volumeQuotaRuleName",
    mapper: {
        serializedName: "volumeQuotaRuleName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const body26 = {
    parameterPath: "body",
    mapper: VolumeQuotaRuleMapper
};
export const body27 = {
    parameterPath: "body",
    mapper: VolumeQuotaRulePatchMapper
};
export const volumeGroupName = {
    parameterPath: "volumeGroupName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9\\-_]{0,63}$"),
            MaxLength: 64,
            MinLength: 1
        },
        serializedName: "volumeGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const body28 = {
    parameterPath: "body",
    mapper: VolumeGroupDetailsMapper
};
export const subvolumeName = {
    parameterPath: "subvolumeName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z][a-zA-Z0-9\\-_]{0,63}$"),
            MaxLength: 64,
            MinLength: 1
        },
        serializedName: "subvolumeName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const body29 = {
    parameterPath: "body",
    mapper: SubvolumeInfoMapper
};
export const body30 = {
    parameterPath: "body",
    mapper: SubvolumePatchRequestMapper
};
//# sourceMappingURL=parameters.js.map