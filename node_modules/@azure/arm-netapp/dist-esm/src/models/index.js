/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link MetricAggregationType} that the service accepts. */
export var KnownMetricAggregationType;
(function (KnownMetricAggregationType) {
    /** Average */
    KnownMetricAggregationType["Average"] = "Average";
})(KnownMetricAggregationType || (KnownMetricAggregationType = {}));
/** Known values of {@link CheckNameResourceTypes} that the service accepts. */
export var KnownCheckNameResourceTypes;
(function (KnownCheckNameResourceTypes) {
    /** MicrosoftNetAppNetAppAccounts */
    KnownCheckNameResourceTypes["MicrosoftNetAppNetAppAccounts"] = "Microsoft.NetApp/netAppAccounts";
    /** MicrosoftNetAppNetAppAccountsCapacityPools */
    KnownCheckNameResourceTypes["MicrosoftNetAppNetAppAccountsCapacityPools"] = "Microsoft.NetApp/netAppAccounts/capacityPools";
    /** MicrosoftNetAppNetAppAccountsCapacityPoolsVolumes */
    KnownCheckNameResourceTypes["MicrosoftNetAppNetAppAccountsCapacityPoolsVolumes"] = "Microsoft.NetApp/netAppAccounts/capacityPools/volumes";
    /** MicrosoftNetAppNetAppAccountsCapacityPoolsVolumesSnapshots */
    KnownCheckNameResourceTypes["MicrosoftNetAppNetAppAccountsCapacityPoolsVolumesSnapshots"] = "Microsoft.NetApp/netAppAccounts/capacityPools/volumes/snapshots";
})(KnownCheckNameResourceTypes || (KnownCheckNameResourceTypes = {}));
/** Known values of {@link InAvailabilityReasonType} that the service accepts. */
export var KnownInAvailabilityReasonType;
(function (KnownInAvailabilityReasonType) {
    /** Invalid */
    KnownInAvailabilityReasonType["Invalid"] = "Invalid";
    /** AlreadyExists */
    KnownInAvailabilityReasonType["AlreadyExists"] = "AlreadyExists";
})(KnownInAvailabilityReasonType || (KnownInAvailabilityReasonType = {}));
/** Known values of {@link CheckQuotaNameResourceTypes} that the service accepts. */
export var KnownCheckQuotaNameResourceTypes;
(function (KnownCheckQuotaNameResourceTypes) {
    /** MicrosoftNetAppNetAppAccounts */
    KnownCheckQuotaNameResourceTypes["MicrosoftNetAppNetAppAccounts"] = "Microsoft.NetApp/netAppAccounts";
    /** MicrosoftNetAppNetAppAccountsCapacityPools */
    KnownCheckQuotaNameResourceTypes["MicrosoftNetAppNetAppAccountsCapacityPools"] = "Microsoft.NetApp/netAppAccounts/capacityPools";
    /** MicrosoftNetAppNetAppAccountsCapacityPoolsVolumes */
    KnownCheckQuotaNameResourceTypes["MicrosoftNetAppNetAppAccountsCapacityPoolsVolumes"] = "Microsoft.NetApp/netAppAccounts/capacityPools/volumes";
    /** MicrosoftNetAppNetAppAccountsCapacityPoolsVolumesSnapshots */
    KnownCheckQuotaNameResourceTypes["MicrosoftNetAppNetAppAccountsCapacityPoolsVolumesSnapshots"] = "Microsoft.NetApp/netAppAccounts/capacityPools/volumes/snapshots";
})(KnownCheckQuotaNameResourceTypes || (KnownCheckQuotaNameResourceTypes = {}));
/** Known values of {@link CreatedByType} that the service accepts. */
export var KnownCreatedByType;
(function (KnownCreatedByType) {
    /** User */
    KnownCreatedByType["User"] = "User";
    /** Application */
    KnownCreatedByType["Application"] = "Application";
    /** ManagedIdentity */
    KnownCreatedByType["ManagedIdentity"] = "ManagedIdentity";
    /** Key */
    KnownCreatedByType["Key"] = "Key";
})(KnownCreatedByType || (KnownCreatedByType = {}));
/** Known values of {@link RegionStorageToNetworkProximity} that the service accepts. */
export var KnownRegionStorageToNetworkProximity;
(function (KnownRegionStorageToNetworkProximity) {
    /** Basic network connectivity. */
    KnownRegionStorageToNetworkProximity["Default"] = "Default";
    /** Standard T1 network connectivity. */
    KnownRegionStorageToNetworkProximity["T1"] = "T1";
    /** Standard T2 network connectivity. */
    KnownRegionStorageToNetworkProximity["T2"] = "T2";
    /** Standard AcrossT2 network connectivity. */
    KnownRegionStorageToNetworkProximity["AcrossT2"] = "AcrossT2";
    /** Standard T1 and T2 network connectivity. */
    KnownRegionStorageToNetworkProximity["T1AndT2"] = "T1AndT2";
    /** Standard T1 and AcrossT2 network connectivity. */
    KnownRegionStorageToNetworkProximity["T1AndAcrossT2"] = "T1AndAcrossT2";
    /** Standard T2 and AcrossT2 network connectivity. */
    KnownRegionStorageToNetworkProximity["T2AndAcrossT2"] = "T2AndAcrossT2";
    /** Standard T1, T2 and AcrossT2 network connectivity. */
    KnownRegionStorageToNetworkProximity["T1AndT2AndAcrossT2"] = "T1AndT2AndAcrossT2";
})(KnownRegionStorageToNetworkProximity || (KnownRegionStorageToNetworkProximity = {}));
/** Known values of {@link NetworkFeatures} that the service accepts. */
export var KnownNetworkFeatures;
(function (KnownNetworkFeatures) {
    /** Basic network features. */
    KnownNetworkFeatures["Basic"] = "Basic";
    /** Standard network features. */
    KnownNetworkFeatures["Standard"] = "Standard";
    /** Updating from Basic to Standard network features. */
    KnownNetworkFeatures["BasicStandard"] = "Basic_Standard";
    /** Updating from Standard to Basic network features. */
    KnownNetworkFeatures["StandardBasic"] = "Standard_Basic";
})(KnownNetworkFeatures || (KnownNetworkFeatures = {}));
/** Known values of {@link NetworkSiblingSetProvisioningState} that the service accepts. */
export var KnownNetworkSiblingSetProvisioningState;
(function (KnownNetworkSiblingSetProvisioningState) {
    /** Succeeded */
    KnownNetworkSiblingSetProvisioningState["Succeeded"] = "Succeeded";
    /** Failed */
    KnownNetworkSiblingSetProvisioningState["Failed"] = "Failed";
    /** Canceled */
    KnownNetworkSiblingSetProvisioningState["Canceled"] = "Canceled";
    /** Updating */
    KnownNetworkSiblingSetProvisioningState["Updating"] = "Updating";
})(KnownNetworkSiblingSetProvisioningState || (KnownNetworkSiblingSetProvisioningState = {}));
/** Known values of {@link ActiveDirectoryStatus} that the service accepts. */
export var KnownActiveDirectoryStatus;
(function (KnownActiveDirectoryStatus) {
    /** Active Directory created but not in use */
    KnownActiveDirectoryStatus["Created"] = "Created";
    /** Active Directory in use by SMB Volume */
    KnownActiveDirectoryStatus["InUse"] = "InUse";
    /** Active Directory Deleted */
    KnownActiveDirectoryStatus["Deleted"] = "Deleted";
    /** Error with the Active Directory */
    KnownActiveDirectoryStatus["Error"] = "Error";
    /** Active Directory Updating */
    KnownActiveDirectoryStatus["Updating"] = "Updating";
})(KnownActiveDirectoryStatus || (KnownActiveDirectoryStatus = {}));
/** Known values of {@link KeySource} that the service accepts. */
export var KnownKeySource;
(function (KnownKeySource) {
    /** Microsoft-managed key encryption */
    KnownKeySource["MicrosoftNetApp"] = "Microsoft.NetApp";
    /** Customer-managed key encryption */
    KnownKeySource["MicrosoftKeyVault"] = "Microsoft.KeyVault";
})(KnownKeySource || (KnownKeySource = {}));
/** Known values of {@link KeyVaultStatus} that the service accepts. */
export var KnownKeyVaultStatus;
(function (KnownKeyVaultStatus) {
    /** KeyVault connection created but not in use */
    KnownKeyVaultStatus["Created"] = "Created";
    /** KeyVault connection in use by SMB Volume */
    KnownKeyVaultStatus["InUse"] = "InUse";
    /** KeyVault connection Deleted */
    KnownKeyVaultStatus["Deleted"] = "Deleted";
    /** Error with the KeyVault connection */
    KnownKeyVaultStatus["Error"] = "Error";
    /** KeyVault connection Updating */
    KnownKeyVaultStatus["Updating"] = "Updating";
})(KnownKeyVaultStatus || (KnownKeyVaultStatus = {}));
/** Known values of {@link ManagedServiceIdentityType} that the service accepts. */
export var KnownManagedServiceIdentityType;
(function (KnownManagedServiceIdentityType) {
    /** None */
    KnownManagedServiceIdentityType["None"] = "None";
    /** SystemAssigned */
    KnownManagedServiceIdentityType["SystemAssigned"] = "SystemAssigned";
    /** UserAssigned */
    KnownManagedServiceIdentityType["UserAssigned"] = "UserAssigned";
    /** SystemAssignedUserAssigned */
    KnownManagedServiceIdentityType["SystemAssignedUserAssigned"] = "SystemAssigned,UserAssigned";
})(KnownManagedServiceIdentityType || (KnownManagedServiceIdentityType = {}));
/** Known values of {@link ServiceLevel} that the service accepts. */
export var KnownServiceLevel;
(function (KnownServiceLevel) {
    /** Standard service level */
    KnownServiceLevel["Standard"] = "Standard";
    /** Premium service level */
    KnownServiceLevel["Premium"] = "Premium";
    /** Ultra service level */
    KnownServiceLevel["Ultra"] = "Ultra";
    /** Zone redundant storage service level */
    KnownServiceLevel["StandardZRS"] = "StandardZRS";
})(KnownServiceLevel || (KnownServiceLevel = {}));
/** Known values of {@link QosType} that the service accepts. */
export var KnownQosType;
(function (KnownQosType) {
    /** qos type Auto */
    KnownQosType["Auto"] = "Auto";
    /** qos type Manual */
    KnownQosType["Manual"] = "Manual";
})(KnownQosType || (KnownQosType = {}));
/** Known values of {@link EncryptionType} that the service accepts. */
export var KnownEncryptionType;
(function (KnownEncryptionType) {
    /** EncryptionType Single, volumes will use single encryption at rest */
    KnownEncryptionType["Single"] = "Single";
    /** EncryptionType Double, volumes will use double encryption at rest */
    KnownEncryptionType["Double"] = "Double";
})(KnownEncryptionType || (KnownEncryptionType = {}));
/** Known values of {@link ChownMode} that the service accepts. */
export var KnownChownMode;
(function (KnownChownMode) {
    /** Restricted */
    KnownChownMode["Restricted"] = "Restricted";
    /** Unrestricted */
    KnownChownMode["Unrestricted"] = "Unrestricted";
})(KnownChownMode || (KnownChownMode = {}));
/** Known values of {@link VolumeStorageToNetworkProximity} that the service accepts. */
export var KnownVolumeStorageToNetworkProximity;
(function (KnownVolumeStorageToNetworkProximity) {
    /** Basic storage to network connectivity. */
    KnownVolumeStorageToNetworkProximity["Default"] = "Default";
    /** Standard T1 storage to network connectivity. */
    KnownVolumeStorageToNetworkProximity["T1"] = "T1";
    /** Standard T2 storage to network connectivity. */
    KnownVolumeStorageToNetworkProximity["T2"] = "T2";
    /** Standard AcrossT2 storage to network connectivity. */
    KnownVolumeStorageToNetworkProximity["AcrossT2"] = "AcrossT2";
})(KnownVolumeStorageToNetworkProximity || (KnownVolumeStorageToNetworkProximity = {}));
/** Known values of {@link EndpointType} that the service accepts. */
export var KnownEndpointType;
(function (KnownEndpointType) {
    /** Src */
    KnownEndpointType["Src"] = "src";
    /** Dst */
    KnownEndpointType["Dst"] = "dst";
})(KnownEndpointType || (KnownEndpointType = {}));
/** Known values of {@link ReplicationSchedule} that the service accepts. */
export var KnownReplicationSchedule;
(function (KnownReplicationSchedule) {
    /** 10Minutely */
    KnownReplicationSchedule["10Minutely"] = "_10minutely";
    /** Hourly */
    KnownReplicationSchedule["Hourly"] = "hourly";
    /** Daily */
    KnownReplicationSchedule["Daily"] = "daily";
})(KnownReplicationSchedule || (KnownReplicationSchedule = {}));
/** Known values of {@link SecurityStyle} that the service accepts. */
export var KnownSecurityStyle;
(function (KnownSecurityStyle) {
    /** Ntfs */
    KnownSecurityStyle["Ntfs"] = "ntfs";
    /** Unix */
    KnownSecurityStyle["Unix"] = "unix";
})(KnownSecurityStyle || (KnownSecurityStyle = {}));
/** Known values of {@link SmbAccessBasedEnumeration} that the service accepts. */
export var KnownSmbAccessBasedEnumeration;
(function (KnownSmbAccessBasedEnumeration) {
    /** smbAccessBasedEnumeration share setting is disabled */
    KnownSmbAccessBasedEnumeration["Disabled"] = "Disabled";
    /** smbAccessBasedEnumeration share setting is enabled */
    KnownSmbAccessBasedEnumeration["Enabled"] = "Enabled";
})(KnownSmbAccessBasedEnumeration || (KnownSmbAccessBasedEnumeration = {}));
/** Known values of {@link SmbNonBrowsable} that the service accepts. */
export var KnownSmbNonBrowsable;
(function (KnownSmbNonBrowsable) {
    /** smbNonBrowsable share setting is disabled */
    KnownSmbNonBrowsable["Disabled"] = "Disabled";
    /** smbNonBrowsable share setting is enabled */
    KnownSmbNonBrowsable["Enabled"] = "Enabled";
})(KnownSmbNonBrowsable || (KnownSmbNonBrowsable = {}));
/** Known values of {@link EncryptionKeySource} that the service accepts. */
export var KnownEncryptionKeySource;
(function (KnownEncryptionKeySource) {
    /** Microsoft-managed key encryption */
    KnownEncryptionKeySource["MicrosoftNetApp"] = "Microsoft.NetApp";
    /** Customer-managed key encryption */
    KnownEncryptionKeySource["MicrosoftKeyVault"] = "Microsoft.KeyVault";
})(KnownEncryptionKeySource || (KnownEncryptionKeySource = {}));
/** Known values of {@link CoolAccessRetrievalPolicy} that the service accepts. */
export var KnownCoolAccessRetrievalPolicy;
(function (KnownCoolAccessRetrievalPolicy) {
    /** Default */
    KnownCoolAccessRetrievalPolicy["Default"] = "Default";
    /** OnRead */
    KnownCoolAccessRetrievalPolicy["OnRead"] = "OnRead";
    /** Never */
    KnownCoolAccessRetrievalPolicy["Never"] = "Never";
})(KnownCoolAccessRetrievalPolicy || (KnownCoolAccessRetrievalPolicy = {}));
/** Known values of {@link FileAccessLogs} that the service accepts. */
export var KnownFileAccessLogs;
(function (KnownFileAccessLogs) {
    /** fileAccessLogs are enabled */
    KnownFileAccessLogs["Enabled"] = "Enabled";
    /** fileAccessLogs are not enabled */
    KnownFileAccessLogs["Disabled"] = "Disabled";
})(KnownFileAccessLogs || (KnownFileAccessLogs = {}));
/** Known values of {@link AvsDataStore} that the service accepts. */
export var KnownAvsDataStore;
(function (KnownAvsDataStore) {
    /** avsDataStore is enabled */
    KnownAvsDataStore["Enabled"] = "Enabled";
    /** avsDataStore is disabled */
    KnownAvsDataStore["Disabled"] = "Disabled";
})(KnownAvsDataStore || (KnownAvsDataStore = {}));
/** Known values of {@link EnableSubvolumes} that the service accepts. */
export var KnownEnableSubvolumes;
(function (KnownEnableSubvolumes) {
    /** subvolumes are enabled */
    KnownEnableSubvolumes["Enabled"] = "Enabled";
    /** subvolumes are not enabled */
    KnownEnableSubvolumes["Disabled"] = "Disabled";
})(KnownEnableSubvolumes || (KnownEnableSubvolumes = {}));
/** Known values of {@link RelationshipStatus} that the service accepts. */
export var KnownRelationshipStatus;
(function (KnownRelationshipStatus) {
    /** Idle */
    KnownRelationshipStatus["Idle"] = "Idle";
    /** Transferring */
    KnownRelationshipStatus["Transferring"] = "Transferring";
})(KnownRelationshipStatus || (KnownRelationshipStatus = {}));
/** Known values of {@link MirrorState} that the service accepts. */
export var KnownMirrorState;
(function (KnownMirrorState) {
    /** Uninitialized */
    KnownMirrorState["Uninitialized"] = "Uninitialized";
    /** Mirrored */
    KnownMirrorState["Mirrored"] = "Mirrored";
    /** Broken */
    KnownMirrorState["Broken"] = "Broken";
})(KnownMirrorState || (KnownMirrorState = {}));
/** Known values of {@link Type} that the service accepts. */
export var KnownType;
(function (KnownType) {
    /** Default user quota */
    KnownType["DefaultUserQuota"] = "DefaultUserQuota";
    /** Default group quota */
    KnownType["DefaultGroupQuota"] = "DefaultGroupQuota";
    /** Individual user quota */
    KnownType["IndividualUserQuota"] = "IndividualUserQuota";
    /** Individual group quota */
    KnownType["IndividualGroupQuota"] = "IndividualGroupQuota";
})(KnownType || (KnownType = {}));
/** Known values of {@link ApplicationType} that the service accepts. */
export var KnownApplicationType;
(function (KnownApplicationType) {
    /** SAPHana */
    KnownApplicationType["SAPHana"] = "SAP-HANA";
    /** Oracle */
    KnownApplicationType["Oracle"] = "ORACLE";
})(KnownApplicationType || (KnownApplicationType = {}));
//# sourceMappingURL=index.js.map