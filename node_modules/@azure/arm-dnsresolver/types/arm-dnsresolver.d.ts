import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { PollerLike } from '@azure/core-lro';
import { PollOperationState } from '@azure/core-lro';

/** An error message */
export declare interface CloudError {
    /** The error message body */
    error?: CloudErrorBody;
}

/** The body of an error message */
export declare interface CloudErrorBody {
    /** The error code */
    code?: string;
    /** A description of what caused the error */
    message?: string;
    /** The target resource of the error message */
    target?: string;
    /** Extra error information */
    details?: CloudErrorBody[];
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export declare type CreatedByType = string;

/** Describes a DNS forwarding ruleset. */
export declare interface DnsForwardingRuleset extends TrackedResource {
    /**
     * ETag of the DNS forwarding ruleset.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly etag?: string;
    /**
     * Metadata pertaining to creation and last modification of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** The reference to the DNS resolver outbound endpoints that are used to route DNS queries matching the forwarding rules in the ruleset to the target DNS servers. */
    dnsResolverOutboundEndpoints: SubResource[];
    /**
     * The current provisioning state of the DNS forwarding ruleset. This is a read-only property and any attempt to set this value will be ignored.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /**
     * The resourceGuid for the DNS forwarding ruleset.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resourceGuid?: string;
}

/** The response to an enumeration operation on DNS forwarding rulesets. */
export declare interface DnsForwardingRulesetListResult {
    /** Enumeration of the DNS forwarding rulesets. */
    value?: DnsForwardingRuleset[];
    /**
     * The continuation token for the next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Describes a DNS forwarding ruleset PATCH operation. */
export declare interface DnsForwardingRulesetPatch {
    /** The reference to the DNS resolver outbound endpoints that are used to route DNS queries matching the forwarding rules in the ruleset to the target DNS servers. */
    dnsResolverOutboundEndpoints?: SubResource[];
    /** Tags for DNS Resolver. */
    tags?: {
        [propertyName: string]: string;
    };
}

/** Interface representing a DnsForwardingRulesets. */
export declare interface DnsForwardingRulesets {
    /**
     * Lists DNS forwarding rulesets within a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: DnsForwardingRulesetsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<DnsForwardingRuleset>;
    /**
     * Lists DNS forwarding rulesets in all resource groups of a subscription.
     * @param options The options parameters.
     */
    list(options?: DnsForwardingRulesetsListOptionalParams): PagedAsyncIterableIterator<DnsForwardingRuleset>;
    /**
     * Lists DNS forwarding ruleset resource IDs attached to a virtual network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualNetworkName The name of the virtual network.
     * @param options The options parameters.
     */
    listByVirtualNetwork(resourceGroupName: string, virtualNetworkName: string, options?: DnsForwardingRulesetsListByVirtualNetworkOptionalParams): PagedAsyncIterableIterator<VirtualNetworkDnsForwardingRuleset>;
    /**
     * Creates or updates a DNS forwarding ruleset.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, dnsForwardingRulesetName: string, parameters: DnsForwardingRuleset, options?: DnsForwardingRulesetsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<DnsForwardingRulesetsCreateOrUpdateResponse>, DnsForwardingRulesetsCreateOrUpdateResponse>>;
    /**
     * Creates or updates a DNS forwarding ruleset.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, dnsForwardingRulesetName: string, parameters: DnsForwardingRuleset, options?: DnsForwardingRulesetsCreateOrUpdateOptionalParams): Promise<DnsForwardingRulesetsCreateOrUpdateResponse>;
    /**
     * Updates a DNS forwarding ruleset.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param parameters Parameters supplied to the Update operation.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, dnsForwardingRulesetName: string, parameters: DnsForwardingRulesetPatch, options?: DnsForwardingRulesetsUpdateOptionalParams): Promise<PollerLike<PollOperationState<DnsForwardingRulesetsUpdateResponse>, DnsForwardingRulesetsUpdateResponse>>;
    /**
     * Updates a DNS forwarding ruleset.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param parameters Parameters supplied to the Update operation.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, dnsForwardingRulesetName: string, parameters: DnsForwardingRulesetPatch, options?: DnsForwardingRulesetsUpdateOptionalParams): Promise<DnsForwardingRulesetsUpdateResponse>;
    /**
     * Deletes a DNS forwarding ruleset. WARNING: This operation cannot be undone. All forwarding rules
     * within the ruleset will be deleted.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, dnsForwardingRulesetName: string, options?: DnsForwardingRulesetsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes a DNS forwarding ruleset. WARNING: This operation cannot be undone. All forwarding rules
     * within the ruleset will be deleted.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, dnsForwardingRulesetName: string, options?: DnsForwardingRulesetsDeleteOptionalParams): Promise<void>;
    /**
     * Gets a DNS forwarding ruleset properties.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, dnsForwardingRulesetName: string, options?: DnsForwardingRulesetsGetOptionalParams): Promise<DnsForwardingRulesetsGetResponse>;
}

/** Optional parameters. */
export declare interface DnsForwardingRulesetsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** ETag of the resource. Omit this value to always overwrite the current resource. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent changes. */
    ifMatch?: string;
    /** Set to '*' to allow a new resource to be created, but to prevent updating an existing resource. Other values will be ignored. */
    ifNoneMatch?: string;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type DnsForwardingRulesetsCreateOrUpdateResponse = DnsForwardingRuleset;

/** Optional parameters. */
export declare interface DnsForwardingRulesetsDeleteOptionalParams extends coreClient.OperationOptions {
    /** ETag of the resource. Omit this value to always overwrite the current resource. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent changes. */
    ifMatch?: string;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface DnsForwardingRulesetsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type DnsForwardingRulesetsGetResponse = DnsForwardingRuleset;

/** Optional parameters. */
export declare interface DnsForwardingRulesetsListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type DnsForwardingRulesetsListByResourceGroupNextResponse = DnsForwardingRulesetListResult;

/** Optional parameters. */
export declare interface DnsForwardingRulesetsListByResourceGroupOptionalParams extends coreClient.OperationOptions {
    /** The maximum number of results to return. If not specified, returns up to 100 results. */
    top?: number;
}

/** Contains response data for the listByResourceGroup operation. */
export declare type DnsForwardingRulesetsListByResourceGroupResponse = DnsForwardingRulesetListResult;

/** Optional parameters. */
export declare interface DnsForwardingRulesetsListByVirtualNetworkNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByVirtualNetworkNext operation. */
export declare type DnsForwardingRulesetsListByVirtualNetworkNextResponse = VirtualNetworkDnsForwardingRulesetListResult;

/** Optional parameters. */
export declare interface DnsForwardingRulesetsListByVirtualNetworkOptionalParams extends coreClient.OperationOptions {
    /** The maximum number of results to return. If not specified, returns up to 100 results. */
    top?: number;
}

/** Contains response data for the listByVirtualNetwork operation. */
export declare type DnsForwardingRulesetsListByVirtualNetworkResponse = VirtualNetworkDnsForwardingRulesetListResult;

/** Optional parameters. */
export declare interface DnsForwardingRulesetsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type DnsForwardingRulesetsListNextResponse = DnsForwardingRulesetListResult;

/** Optional parameters. */
export declare interface DnsForwardingRulesetsListOptionalParams extends coreClient.OperationOptions {
    /** The maximum number of results to return. If not specified, returns up to 100 results. */
    top?: number;
}

/** Contains response data for the list operation. */
export declare type DnsForwardingRulesetsListResponse = DnsForwardingRulesetListResult;

/** Optional parameters. */
export declare interface DnsForwardingRulesetsUpdateOptionalParams extends coreClient.OperationOptions {
    /** ETag of the resource. Omit this value to always overwrite the current resource. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent changes. */
    ifMatch?: string;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type DnsForwardingRulesetsUpdateResponse = DnsForwardingRuleset;

/** Describes a DNS resolver. */
export declare interface DnsResolver extends TrackedResource {
    /**
     * ETag of the DNS resolver.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly etag?: string;
    /**
     * Metadata pertaining to creation and last modification of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** The reference to the virtual network. This cannot be changed after creation. */
    virtualNetwork: SubResource;
    /**
     * The current status of the DNS resolver. This is a read-only property and any attempt to set this value will be ignored.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dnsResolverState?: DnsResolverState;
    /**
     * The current provisioning state of the DNS resolver. This is a read-only property and any attempt to set this value will be ignored.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /**
     * The resourceGuid property of the DNS resolver resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resourceGuid?: string;
}

/** The response to an enumeration operation on DNS resolvers. */
export declare interface DnsResolverListResult {
    /** Enumeration of the DNS resolvers. */
    value?: DnsResolver[];
    /**
     * The continuation token for the next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

export declare class DnsResolverManagementClient extends coreClient.ServiceClient {
    $host: string;
    subscriptionId: string;
    apiVersion: string;
    /**
     * Initializes a new instance of the DnsResolverManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: DnsResolverManagementClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    dnsResolvers: DnsResolvers;
    inboundEndpoints: InboundEndpoints;
    outboundEndpoints: OutboundEndpoints;
    dnsForwardingRulesets: DnsForwardingRulesets;
    forwardingRules: ForwardingRules;
    virtualNetworkLinks: VirtualNetworkLinks;
}

/** Optional parameters. */
export declare interface DnsResolverManagementClientOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** Describes a DNS resolver for PATCH operation. */
export declare interface DnsResolverPatch {
    /** Tags for DNS Resolver. */
    tags?: {
        [propertyName: string]: string;
    };
}

/** Interface representing a DnsResolvers. */
export declare interface DnsResolvers {
    /**
     * Lists DNS resolvers within a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: DnsResolversListByResourceGroupOptionalParams): PagedAsyncIterableIterator<DnsResolver>;
    /**
     * Lists DNS resolvers in all resource groups of a subscription.
     * @param options The options parameters.
     */
    list(options?: DnsResolversListOptionalParams): PagedAsyncIterableIterator<DnsResolver>;
    /**
     * Lists DNS resolver resource IDs linked to a virtual network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualNetworkName The name of the virtual network.
     * @param options The options parameters.
     */
    listByVirtualNetwork(resourceGroupName: string, virtualNetworkName: string, options?: DnsResolversListByVirtualNetworkOptionalParams): PagedAsyncIterableIterator<SubResource>;
    /**
     * Creates or updates a DNS resolver.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverName The name of the DNS resolver.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, dnsResolverName: string, parameters: DnsResolver, options?: DnsResolversCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<DnsResolversCreateOrUpdateResponse>, DnsResolversCreateOrUpdateResponse>>;
    /**
     * Creates or updates a DNS resolver.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverName The name of the DNS resolver.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, dnsResolverName: string, parameters: DnsResolver, options?: DnsResolversCreateOrUpdateOptionalParams): Promise<DnsResolversCreateOrUpdateResponse>;
    /**
     * Updates a DNS resolver.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverName The name of the DNS resolver.
     * @param parameters Parameters supplied to the Update operation.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, dnsResolverName: string, parameters: DnsResolverPatch, options?: DnsResolversUpdateOptionalParams): Promise<PollerLike<PollOperationState<DnsResolversUpdateResponse>, DnsResolversUpdateResponse>>;
    /**
     * Updates a DNS resolver.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverName The name of the DNS resolver.
     * @param parameters Parameters supplied to the Update operation.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, dnsResolverName: string, parameters: DnsResolverPatch, options?: DnsResolversUpdateOptionalParams): Promise<DnsResolversUpdateResponse>;
    /**
     * Deletes a DNS resolver. WARNING: This operation cannot be undone.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverName The name of the DNS resolver.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, dnsResolverName: string, options?: DnsResolversDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes a DNS resolver. WARNING: This operation cannot be undone.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverName The name of the DNS resolver.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, dnsResolverName: string, options?: DnsResolversDeleteOptionalParams): Promise<void>;
    /**
     * Gets properties of a DNS resolver.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverName The name of the DNS resolver.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, dnsResolverName: string, options?: DnsResolversGetOptionalParams): Promise<DnsResolversGetResponse>;
}

/** Optional parameters. */
export declare interface DnsResolversCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** ETag of the resource. Omit this value to always overwrite the current resource. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent changes. */
    ifMatch?: string;
    /** Set to '*' to allow a new resource to be created, but to prevent updating an existing resource. Other values will be ignored. */
    ifNoneMatch?: string;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type DnsResolversCreateOrUpdateResponse = DnsResolver;

/** Optional parameters. */
export declare interface DnsResolversDeleteOptionalParams extends coreClient.OperationOptions {
    /** ETag of the resource. Omit this value to always overwrite the current resource. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent changes. */
    ifMatch?: string;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface DnsResolversGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type DnsResolversGetResponse = DnsResolver;

/** Optional parameters. */
export declare interface DnsResolversListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type DnsResolversListByResourceGroupNextResponse = DnsResolverListResult;

/** Optional parameters. */
export declare interface DnsResolversListByResourceGroupOptionalParams extends coreClient.OperationOptions {
    /** The maximum number of results to return. If not specified, returns up to 100 results. */
    top?: number;
}

/** Contains response data for the listByResourceGroup operation. */
export declare type DnsResolversListByResourceGroupResponse = DnsResolverListResult;

/** Optional parameters. */
export declare interface DnsResolversListByVirtualNetworkNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByVirtualNetworkNext operation. */
export declare type DnsResolversListByVirtualNetworkNextResponse = SubResourceListResult;

/** Optional parameters. */
export declare interface DnsResolversListByVirtualNetworkOptionalParams extends coreClient.OperationOptions {
    /** The maximum number of results to return. If not specified, returns up to 100 results. */
    top?: number;
}

/** Contains response data for the listByVirtualNetwork operation. */
export declare type DnsResolversListByVirtualNetworkResponse = SubResourceListResult;

/** Optional parameters. */
export declare interface DnsResolversListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type DnsResolversListNextResponse = DnsResolverListResult;

/** Optional parameters. */
export declare interface DnsResolversListOptionalParams extends coreClient.OperationOptions {
    /** The maximum number of results to return. If not specified, returns up to 100 results. */
    top?: number;
}

/** Contains response data for the list operation. */
export declare type DnsResolversListResponse = DnsResolverListResult;

/**
 * Defines values for DnsResolverState. \
 * {@link KnownDnsResolverState} can be used interchangeably with DnsResolverState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Connected** \
 * **Disconnected**
 */
export declare type DnsResolverState = string;

/** Optional parameters. */
export declare interface DnsResolversUpdateOptionalParams extends coreClient.OperationOptions {
    /** ETag of the resource. Omit this value to always overwrite the current resource. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent changes. */
    ifMatch?: string;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type DnsResolversUpdateResponse = DnsResolver;

/** Describes a forwarding rule within a DNS forwarding ruleset. */
export declare interface ForwardingRule extends ProxyResource {
    /**
     * ETag of the forwarding rule.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly etag?: string;
    /**
     * Metadata pertaining to creation and last modification of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** The domain name for the forwarding rule. */
    domainName: string;
    /** DNS servers to forward the DNS query to. */
    targetDnsServers: TargetDnsServer[];
    /** Metadata attached to the forwarding rule. */
    metadata?: {
        [propertyName: string]: string;
    };
    /** The state of forwarding rule. */
    forwardingRuleState?: ForwardingRuleState;
    /**
     * The current provisioning state of the forwarding rule. This is a read-only property and any attempt to set this value will be ignored.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
}

/** The response to an enumeration operation on forwarding rules within a DNS forwarding ruleset. */
export declare interface ForwardingRuleListResult {
    /** Enumeration of the forwarding rules. */
    value?: ForwardingRule[];
    /**
     * The continuation token for the next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Describes a forwarding rule for PATCH operation. */
export declare interface ForwardingRulePatch {
    /** DNS servers to forward the DNS query to. */
    targetDnsServers?: TargetDnsServer[];
    /** Metadata attached to the forwarding rule. */
    metadata?: {
        [propertyName: string]: string;
    };
    /** The state of forwarding rule. */
    forwardingRuleState?: ForwardingRuleState;
}

/** Interface representing a ForwardingRules. */
export declare interface ForwardingRules {
    /**
     * Lists forwarding rules in a DNS forwarding ruleset.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, dnsForwardingRulesetName: string, options?: ForwardingRulesListOptionalParams): PagedAsyncIterableIterator<ForwardingRule>;
    /**
     * Creates or updates a forwarding rule in a DNS forwarding ruleset.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param forwardingRuleName The name of the forwarding rule.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, dnsForwardingRulesetName: string, forwardingRuleName: string, parameters: ForwardingRule, options?: ForwardingRulesCreateOrUpdateOptionalParams): Promise<ForwardingRulesCreateOrUpdateResponse>;
    /**
     * Updates a forwarding rule in a DNS forwarding ruleset.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param forwardingRuleName The name of the forwarding rule.
     * @param parameters Parameters supplied to the Update operation.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, dnsForwardingRulesetName: string, forwardingRuleName: string, parameters: ForwardingRulePatch, options?: ForwardingRulesUpdateOptionalParams): Promise<ForwardingRulesUpdateResponse>;
    /**
     * Deletes a forwarding rule in a DNS forwarding ruleset. WARNING: This operation cannot be undone.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param forwardingRuleName The name of the forwarding rule.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, dnsForwardingRulesetName: string, forwardingRuleName: string, options?: ForwardingRulesDeleteOptionalParams): Promise<void>;
    /**
     * Gets properties of a forwarding rule in a DNS forwarding ruleset.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param forwardingRuleName The name of the forwarding rule.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, dnsForwardingRulesetName: string, forwardingRuleName: string, options?: ForwardingRulesGetOptionalParams): Promise<ForwardingRulesGetResponse>;
}

/** Optional parameters. */
export declare interface ForwardingRulesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** ETag of the resource. Omit this value to always overwrite the current resource. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent changes. */
    ifMatch?: string;
    /** Set to '*' to allow a new resource to be created, but to prevent updating an existing resource. Other values will be ignored. */
    ifNoneMatch?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type ForwardingRulesCreateOrUpdateResponse = ForwardingRule;

/** Optional parameters. */
export declare interface ForwardingRulesDeleteOptionalParams extends coreClient.OperationOptions {
    /** ETag of the resource. Omit this value to always overwrite the current resource. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent changes. */
    ifMatch?: string;
}

/** Optional parameters. */
export declare interface ForwardingRulesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ForwardingRulesGetResponse = ForwardingRule;

/** Optional parameters. */
export declare interface ForwardingRulesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type ForwardingRulesListNextResponse = ForwardingRuleListResult;

/** Optional parameters. */
export declare interface ForwardingRulesListOptionalParams extends coreClient.OperationOptions {
    /** The maximum number of results to return. If not specified, returns up to 100 results. */
    top?: number;
}

/** Contains response data for the list operation. */
export declare type ForwardingRulesListResponse = ForwardingRuleListResult;

/**
 * Defines values for ForwardingRuleState. \
 * {@link KnownForwardingRuleState} can be used interchangeably with ForwardingRuleState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export declare type ForwardingRuleState = string;

/** Optional parameters. */
export declare interface ForwardingRulesUpdateOptionalParams extends coreClient.OperationOptions {
    /** ETag of the resource. Omit this value to always overwrite the current resource. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent changes. */
    ifMatch?: string;
}

/** Contains response data for the update operation. */
export declare type ForwardingRulesUpdateResponse = ForwardingRule;

/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/** Describes an inbound endpoint for a DNS resolver. */
export declare interface InboundEndpoint extends TrackedResource {
    /**
     * ETag of the inbound endpoint.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly etag?: string;
    /**
     * Metadata pertaining to creation and last modification of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** IP configurations for the inbound endpoint. */
    ipConfigurations: IpConfiguration[];
    /**
     * The current provisioning state of the inbound endpoint. This is a read-only property and any attempt to set this value will be ignored.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /**
     * The resourceGuid property of the inbound endpoint resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resourceGuid?: string;
}

/** The response to an enumeration operation on inbound endpoints for a DNS resolver. */
export declare interface InboundEndpointListResult {
    /** Enumeration of the inbound endpoints for a DNS resolver. */
    value?: InboundEndpoint[];
    /**
     * The continuation token for the next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Describes an inbound endpoint for a DNS resolver for PATCH operation. */
export declare interface InboundEndpointPatch {
    /** Tags for inbound endpoint. */
    tags?: {
        [propertyName: string]: string;
    };
}

/** Interface representing a InboundEndpoints. */
export declare interface InboundEndpoints {
    /**
     * Lists inbound endpoints for a DNS resolver.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverName The name of the DNS resolver.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, dnsResolverName: string, options?: InboundEndpointsListOptionalParams): PagedAsyncIterableIterator<InboundEndpoint>;
    /**
     * Creates or updates an inbound endpoint for a DNS resolver.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverName The name of the DNS resolver.
     * @param inboundEndpointName The name of the inbound endpoint for the DNS resolver.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, dnsResolverName: string, inboundEndpointName: string, parameters: InboundEndpoint, options?: InboundEndpointsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<InboundEndpointsCreateOrUpdateResponse>, InboundEndpointsCreateOrUpdateResponse>>;
    /**
     * Creates or updates an inbound endpoint for a DNS resolver.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverName The name of the DNS resolver.
     * @param inboundEndpointName The name of the inbound endpoint for the DNS resolver.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, dnsResolverName: string, inboundEndpointName: string, parameters: InboundEndpoint, options?: InboundEndpointsCreateOrUpdateOptionalParams): Promise<InboundEndpointsCreateOrUpdateResponse>;
    /**
     * Updates an inbound endpoint for a DNS resolver.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverName The name of the DNS resolver.
     * @param inboundEndpointName The name of the inbound endpoint for the DNS resolver.
     * @param parameters Parameters supplied to the Update operation.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, dnsResolverName: string, inboundEndpointName: string, parameters: InboundEndpointPatch, options?: InboundEndpointsUpdateOptionalParams): Promise<PollerLike<PollOperationState<InboundEndpointsUpdateResponse>, InboundEndpointsUpdateResponse>>;
    /**
     * Updates an inbound endpoint for a DNS resolver.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverName The name of the DNS resolver.
     * @param inboundEndpointName The name of the inbound endpoint for the DNS resolver.
     * @param parameters Parameters supplied to the Update operation.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, dnsResolverName: string, inboundEndpointName: string, parameters: InboundEndpointPatch, options?: InboundEndpointsUpdateOptionalParams): Promise<InboundEndpointsUpdateResponse>;
    /**
     * Deletes an inbound endpoint for a DNS resolver. WARNING: This operation cannot be undone.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverName The name of the DNS resolver.
     * @param inboundEndpointName The name of the inbound endpoint for the DNS resolver.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, dnsResolverName: string, inboundEndpointName: string, options?: InboundEndpointsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes an inbound endpoint for a DNS resolver. WARNING: This operation cannot be undone.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverName The name of the DNS resolver.
     * @param inboundEndpointName The name of the inbound endpoint for the DNS resolver.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, dnsResolverName: string, inboundEndpointName: string, options?: InboundEndpointsDeleteOptionalParams): Promise<void>;
    /**
     * Gets properties of an inbound endpoint for a DNS resolver.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverName The name of the DNS resolver.
     * @param inboundEndpointName The name of the inbound endpoint for the DNS resolver.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, dnsResolverName: string, inboundEndpointName: string, options?: InboundEndpointsGetOptionalParams): Promise<InboundEndpointsGetResponse>;
}

/** Optional parameters. */
export declare interface InboundEndpointsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** ETag of the resource. Omit this value to always overwrite the current resource. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent changes. */
    ifMatch?: string;
    /** Set to '*' to allow a new resource to be created, but to prevent updating an existing resource. Other values will be ignored. */
    ifNoneMatch?: string;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type InboundEndpointsCreateOrUpdateResponse = InboundEndpoint;

/** Optional parameters. */
export declare interface InboundEndpointsDeleteOptionalParams extends coreClient.OperationOptions {
    /** ETag of the resource. Omit this value to always overwrite the current resource. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent changes. */
    ifMatch?: string;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface InboundEndpointsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type InboundEndpointsGetResponse = InboundEndpoint;

/** Optional parameters. */
export declare interface InboundEndpointsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type InboundEndpointsListNextResponse = InboundEndpointListResult;

/** Optional parameters. */
export declare interface InboundEndpointsListOptionalParams extends coreClient.OperationOptions {
    /** The maximum number of results to return. If not specified, returns up to 100 results. */
    top?: number;
}

/** Contains response data for the list operation. */
export declare type InboundEndpointsListResponse = InboundEndpointListResult;

/** Optional parameters. */
export declare interface InboundEndpointsUpdateOptionalParams extends coreClient.OperationOptions {
    /** ETag of the resource. Omit this value to always overwrite the current resource. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent changes. */
    ifMatch?: string;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type InboundEndpointsUpdateResponse = InboundEndpoint;

/**
 * Defines values for IpAllocationMethod. \
 * {@link KnownIpAllocationMethod} can be used interchangeably with IpAllocationMethod,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Static** \
 * **Dynamic**
 */
export declare type IpAllocationMethod = string;

/** IP configuration. */
export declare interface IpConfiguration {
    /** The reference to the subnet bound to the IP configuration. */
    subnet: SubResource;
    /** Private IP address of the IP configuration. */
    privateIpAddress?: string;
    /** Private IP address allocation method. */
    privateIpAllocationMethod?: IpAllocationMethod;
}

/** Known values of {@link CreatedByType} that the service accepts. */
export declare enum KnownCreatedByType {
    /** User */
    User = "User",
    /** Application */
    Application = "Application",
    /** ManagedIdentity */
    ManagedIdentity = "ManagedIdentity",
    /** Key */
    Key = "Key"
}

/** Known values of {@link DnsResolverState} that the service accepts. */
export declare enum KnownDnsResolverState {
    /** Connected */
    Connected = "Connected",
    /** Disconnected */
    Disconnected = "Disconnected"
}

/** Known values of {@link ForwardingRuleState} that the service accepts. */
export declare enum KnownForwardingRuleState {
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled"
}

/** Known values of {@link IpAllocationMethod} that the service accepts. */
export declare enum KnownIpAllocationMethod {
    /** Static */
    Static = "Static",
    /** Dynamic */
    Dynamic = "Dynamic"
}

/** Known values of {@link ProvisioningState} that the service accepts. */
export declare enum KnownProvisioningState {
    /** Creating */
    Creating = "Creating",
    /** Updating */
    Updating = "Updating",
    /** Deleting */
    Deleting = "Deleting",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Canceled */
    Canceled = "Canceled"
}

/** Describes an outbound endpoint for a DNS resolver. */
export declare interface OutboundEndpoint extends TrackedResource {
    /**
     * ETag of the outbound endpoint.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly etag?: string;
    /**
     * Metadata pertaining to creation and last modification of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** The reference to the subnet used for the outbound endpoint. */
    subnet: SubResource;
    /**
     * The current provisioning state of the outbound endpoint. This is a read-only property and any attempt to set this value will be ignored.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /**
     * The resourceGuid property of the outbound endpoint resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resourceGuid?: string;
}

/** The response to an enumeration operation on outbound endpoints for a DNS resolver. */
export declare interface OutboundEndpointListResult {
    /** Enumeration of the outbound endpoints for a DNS resolver. */
    value?: OutboundEndpoint[];
    /**
     * The continuation token for the next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Describes an outbound endpoint for a DNS resolver for PATCH operation. */
export declare interface OutboundEndpointPatch {
    /** Tags for outbound endpoint. */
    tags?: {
        [propertyName: string]: string;
    };
}

/** Interface representing a OutboundEndpoints. */
export declare interface OutboundEndpoints {
    /**
     * Lists outbound endpoints for a DNS resolver.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverName The name of the DNS resolver.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, dnsResolverName: string, options?: OutboundEndpointsListOptionalParams): PagedAsyncIterableIterator<OutboundEndpoint>;
    /**
     * Creates or updates an outbound endpoint for a DNS resolver.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverName The name of the DNS resolver.
     * @param outboundEndpointName The name of the outbound endpoint for the DNS resolver.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, dnsResolverName: string, outboundEndpointName: string, parameters: OutboundEndpoint, options?: OutboundEndpointsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<OutboundEndpointsCreateOrUpdateResponse>, OutboundEndpointsCreateOrUpdateResponse>>;
    /**
     * Creates or updates an outbound endpoint for a DNS resolver.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverName The name of the DNS resolver.
     * @param outboundEndpointName The name of the outbound endpoint for the DNS resolver.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, dnsResolverName: string, outboundEndpointName: string, parameters: OutboundEndpoint, options?: OutboundEndpointsCreateOrUpdateOptionalParams): Promise<OutboundEndpointsCreateOrUpdateResponse>;
    /**
     * Updates an outbound endpoint for a DNS resolver.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverName The name of the DNS resolver.
     * @param outboundEndpointName The name of the outbound endpoint for the DNS resolver.
     * @param parameters Parameters supplied to the Update operation.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, dnsResolverName: string, outboundEndpointName: string, parameters: OutboundEndpointPatch, options?: OutboundEndpointsUpdateOptionalParams): Promise<PollerLike<PollOperationState<OutboundEndpointsUpdateResponse>, OutboundEndpointsUpdateResponse>>;
    /**
     * Updates an outbound endpoint for a DNS resolver.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverName The name of the DNS resolver.
     * @param outboundEndpointName The name of the outbound endpoint for the DNS resolver.
     * @param parameters Parameters supplied to the Update operation.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, dnsResolverName: string, outboundEndpointName: string, parameters: OutboundEndpointPatch, options?: OutboundEndpointsUpdateOptionalParams): Promise<OutboundEndpointsUpdateResponse>;
    /**
     * Deletes an outbound endpoint for a DNS resolver. WARNING: This operation cannot be undone.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverName The name of the DNS resolver.
     * @param outboundEndpointName The name of the outbound endpoint for the DNS resolver.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, dnsResolverName: string, outboundEndpointName: string, options?: OutboundEndpointsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes an outbound endpoint for a DNS resolver. WARNING: This operation cannot be undone.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverName The name of the DNS resolver.
     * @param outboundEndpointName The name of the outbound endpoint for the DNS resolver.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, dnsResolverName: string, outboundEndpointName: string, options?: OutboundEndpointsDeleteOptionalParams): Promise<void>;
    /**
     * Gets properties of an outbound endpoint for a DNS resolver.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverName The name of the DNS resolver.
     * @param outboundEndpointName The name of the outbound endpoint for the DNS resolver.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, dnsResolverName: string, outboundEndpointName: string, options?: OutboundEndpointsGetOptionalParams): Promise<OutboundEndpointsGetResponse>;
}

/** Optional parameters. */
export declare interface OutboundEndpointsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** ETag of the resource. Omit this value to always overwrite the current resource. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent changes. */
    ifMatch?: string;
    /** Set to '*' to allow a new resource to be created, but to prevent updating an existing resource. Other values will be ignored. */
    ifNoneMatch?: string;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type OutboundEndpointsCreateOrUpdateResponse = OutboundEndpoint;

/** Optional parameters. */
export declare interface OutboundEndpointsDeleteOptionalParams extends coreClient.OperationOptions {
    /** ETag of the resource. Omit this value to always overwrite the current resource. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent changes. */
    ifMatch?: string;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface OutboundEndpointsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type OutboundEndpointsGetResponse = OutboundEndpoint;

/** Optional parameters. */
export declare interface OutboundEndpointsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type OutboundEndpointsListNextResponse = OutboundEndpointListResult;

/** Optional parameters. */
export declare interface OutboundEndpointsListOptionalParams extends coreClient.OperationOptions {
    /** The maximum number of results to return. If not specified, returns up to 100 results. */
    top?: number;
}

/** Contains response data for the list operation. */
export declare type OutboundEndpointsListResponse = OutboundEndpointListResult;

/** Optional parameters. */
export declare interface OutboundEndpointsUpdateOptionalParams extends coreClient.OperationOptions {
    /** ETag of the resource. Omit this value to always overwrite the current resource. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent changes. */
    ifMatch?: string;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type OutboundEndpointsUpdateResponse = OutboundEndpoint;

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Deleting** \
 * **Succeeded** \
 * **Failed** \
 * **Canceled**
 */
export declare type ProvisioningState = string;

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export declare interface ProxyResource extends Resource {
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export declare interface Resource {
    /**
     * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
}

/** Reference to another ARM resource. */
export declare interface SubResource {
    /** Resource ID. */
    id: string;
}

/** The response to an enumeration operation on sub-resources. */
export declare interface SubResourceListResult {
    /** Enumeration of the sub-resources. */
    value?: SubResource[];
    /**
     * The continuation token for the next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Metadata pertaining to creation and last modification of the resource. */
export declare interface SystemData {
    /** The identity that created the resource. */
    createdBy?: string;
    /** The type of identity that created the resource. */
    createdByType?: CreatedByType;
    /** The timestamp of resource creation (UTC). */
    createdAt?: Date;
    /** The identity that last modified the resource. */
    lastModifiedBy?: string;
    /** The type of identity that last modified the resource. */
    lastModifiedByType?: CreatedByType;
    /** The timestamp of resource last modification (UTC) */
    lastModifiedAt?: Date;
}

/** Describes a server to forward the DNS queries to. */
export declare interface TargetDnsServer {
    /** DNS server IP address. */
    ipAddress: string;
    /** DNS server port. */
    port?: number;
}

/** The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location' */
export declare interface TrackedResource extends Resource {
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** The geo-location where the resource lives */
    location: string;
}

/** Reference to DNS forwarding ruleset and associated virtual network link. */
export declare interface VirtualNetworkDnsForwardingRuleset {
    /** DNS Forwarding Ruleset Resource ID. */
    id?: string;
    /** The reference to the virtual network link. */
    virtualNetworkLink?: SubResource;
}

/** The response to an enumeration operation on Virtual Network DNS Forwarding Ruleset. */
export declare interface VirtualNetworkDnsForwardingRulesetListResult {
    /** Enumeration of the Virtual Network DNS Forwarding Ruleset. */
    value?: VirtualNetworkDnsForwardingRuleset[];
    /**
     * The continuation token for the next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Describes a virtual network link. */
export declare interface VirtualNetworkLink extends ProxyResource {
    /**
     * ETag of the virtual network link.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly etag?: string;
    /**
     * Metadata pertaining to creation and last modification of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** The reference to the virtual network. This cannot be changed after creation. */
    virtualNetwork: SubResource;
    /** Metadata attached to the virtual network link. */
    metadata?: {
        [propertyName: string]: string;
    };
    /**
     * The current provisioning state of the virtual network link. This is a read-only property and any attempt to set this value will be ignored.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
}

/** The response to an enumeration operation on virtual network links. */
export declare interface VirtualNetworkLinkListResult {
    /** Enumeration of the virtual network links. */
    value?: VirtualNetworkLink[];
    /**
     * The continuation token for the next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Describes a virtual network link for PATCH operation. */
export declare interface VirtualNetworkLinkPatch {
    /** Metadata attached to the virtual network link. */
    metadata?: {
        [propertyName: string]: string;
    };
}

/** Interface representing a VirtualNetworkLinks. */
export declare interface VirtualNetworkLinks {
    /**
     * Lists virtual network links to a DNS forwarding ruleset.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, dnsForwardingRulesetName: string, options?: VirtualNetworkLinksListOptionalParams): PagedAsyncIterableIterator<VirtualNetworkLink>;
    /**
     * Creates or updates a virtual network link to a DNS forwarding ruleset.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param virtualNetworkLinkName The name of the virtual network link.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, dnsForwardingRulesetName: string, virtualNetworkLinkName: string, parameters: VirtualNetworkLink, options?: VirtualNetworkLinksCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<VirtualNetworkLinksCreateOrUpdateResponse>, VirtualNetworkLinksCreateOrUpdateResponse>>;
    /**
     * Creates or updates a virtual network link to a DNS forwarding ruleset.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param virtualNetworkLinkName The name of the virtual network link.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, dnsForwardingRulesetName: string, virtualNetworkLinkName: string, parameters: VirtualNetworkLink, options?: VirtualNetworkLinksCreateOrUpdateOptionalParams): Promise<VirtualNetworkLinksCreateOrUpdateResponse>;
    /**
     * Updates a virtual network link to a DNS forwarding ruleset.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param virtualNetworkLinkName The name of the virtual network link.
     * @param parameters Parameters supplied to the Update operation.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, dnsForwardingRulesetName: string, virtualNetworkLinkName: string, parameters: VirtualNetworkLinkPatch, options?: VirtualNetworkLinksUpdateOptionalParams): Promise<PollerLike<PollOperationState<VirtualNetworkLinksUpdateResponse>, VirtualNetworkLinksUpdateResponse>>;
    /**
     * Updates a virtual network link to a DNS forwarding ruleset.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param virtualNetworkLinkName The name of the virtual network link.
     * @param parameters Parameters supplied to the Update operation.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, dnsForwardingRulesetName: string, virtualNetworkLinkName: string, parameters: VirtualNetworkLinkPatch, options?: VirtualNetworkLinksUpdateOptionalParams): Promise<VirtualNetworkLinksUpdateResponse>;
    /**
     * Deletes a virtual network link to a DNS forwarding ruleset. WARNING: This operation cannot be
     * undone.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param virtualNetworkLinkName The name of the virtual network link.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, dnsForwardingRulesetName: string, virtualNetworkLinkName: string, options?: VirtualNetworkLinksDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes a virtual network link to a DNS forwarding ruleset. WARNING: This operation cannot be
     * undone.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param virtualNetworkLinkName The name of the virtual network link.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, dnsForwardingRulesetName: string, virtualNetworkLinkName: string, options?: VirtualNetworkLinksDeleteOptionalParams): Promise<void>;
    /**
     * Gets properties of a virtual network link to a DNS forwarding ruleset.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param virtualNetworkLinkName The name of the virtual network link.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, dnsForwardingRulesetName: string, virtualNetworkLinkName: string, options?: VirtualNetworkLinksGetOptionalParams): Promise<VirtualNetworkLinksGetResponse>;
}

/** Optional parameters. */
export declare interface VirtualNetworkLinksCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** ETag of the resource. Omit this value to always overwrite the current resource. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent changes. */
    ifMatch?: string;
    /** Set to '*' to allow a new resource to be created, but to prevent updating an existing resource. Other values will be ignored. */
    ifNoneMatch?: string;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type VirtualNetworkLinksCreateOrUpdateResponse = VirtualNetworkLink;

/** Optional parameters. */
export declare interface VirtualNetworkLinksDeleteOptionalParams extends coreClient.OperationOptions {
    /** ETag of the resource. Omit this value to always overwrite the current resource. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent changes. */
    ifMatch?: string;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualNetworkLinksGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type VirtualNetworkLinksGetResponse = VirtualNetworkLink;

/** Optional parameters. */
export declare interface VirtualNetworkLinksListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type VirtualNetworkLinksListNextResponse = VirtualNetworkLinkListResult;

/** Optional parameters. */
export declare interface VirtualNetworkLinksListOptionalParams extends coreClient.OperationOptions {
    /** The maximum number of results to return. If not specified, returns up to 100 results. */
    top?: number;
}

/** Contains response data for the list operation. */
export declare type VirtualNetworkLinksListResponse = VirtualNetworkLinkListResult;

/** Optional parameters. */
export declare interface VirtualNetworkLinksUpdateOptionalParams extends coreClient.OperationOptions {
    /** ETag of the resource. Omit this value to always overwrite the current resource. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent changes. */
    ifMatch?: string;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type VirtualNetworkLinksUpdateResponse = VirtualNetworkLink;

export { }
