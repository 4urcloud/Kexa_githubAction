/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { DnsResolver as DnsResolverMapper, DnsResolverPatch as DnsResolverPatchMapper, InboundEndpoint as InboundEndpointMapper, InboundEndpointPatch as InboundEndpointPatchMapper, OutboundEndpoint as OutboundEndpointMapper, OutboundEndpointPatch as OutboundEndpointPatchMapper, DnsForwardingRuleset as DnsForwardingRulesetMapper, DnsForwardingRulesetPatch as DnsForwardingRulesetPatchMapper, ForwardingRule as ForwardingRuleMapper, ForwardingRulePatch as ForwardingRulePatchMapper, VirtualNetworkLink as VirtualNetworkLinkMapper, VirtualNetworkLinkPatch as VirtualNetworkLinkPatchMapper } from "../models/mappers";
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export const parameters = {
    parameterPath: "parameters",
    mapper: DnsResolverMapper
};
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const dnsResolverName = {
    parameterPath: "dnsResolverName",
    mapper: {
        serializedName: "dnsResolverName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2022-07-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const ifMatch = {
    parameterPath: ["options", "ifMatch"],
    mapper: {
        serializedName: "If-Match",
        type: {
            name: "String"
        }
    }
};
export const ifNoneMatch = {
    parameterPath: ["options", "ifNoneMatch"],
    mapper: {
        serializedName: "If-None-Match",
        type: {
            name: "String"
        }
    }
};
export const parameters1 = {
    parameterPath: "parameters",
    mapper: DnsResolverPatchMapper
};
export const top = {
    parameterPath: ["options", "top"],
    mapper: {
        serializedName: "$top",
        type: {
            name: "Number"
        }
    }
};
export const virtualNetworkName = {
    parameterPath: "virtualNetworkName",
    mapper: {
        serializedName: "virtualNetworkName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const parameters2 = {
    parameterPath: "parameters",
    mapper: InboundEndpointMapper
};
export const inboundEndpointName = {
    parameterPath: "inboundEndpointName",
    mapper: {
        serializedName: "inboundEndpointName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters3 = {
    parameterPath: "parameters",
    mapper: InboundEndpointPatchMapper
};
export const parameters4 = {
    parameterPath: "parameters",
    mapper: OutboundEndpointMapper
};
export const outboundEndpointName = {
    parameterPath: "outboundEndpointName",
    mapper: {
        serializedName: "outboundEndpointName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters5 = {
    parameterPath: "parameters",
    mapper: OutboundEndpointPatchMapper
};
export const parameters6 = {
    parameterPath: "parameters",
    mapper: DnsForwardingRulesetMapper
};
export const dnsForwardingRulesetName = {
    parameterPath: "dnsForwardingRulesetName",
    mapper: {
        serializedName: "dnsForwardingRulesetName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters7 = {
    parameterPath: "parameters",
    mapper: DnsForwardingRulesetPatchMapper
};
export const parameters8 = {
    parameterPath: "parameters",
    mapper: ForwardingRuleMapper
};
export const forwardingRuleName = {
    parameterPath: "forwardingRuleName",
    mapper: {
        serializedName: "forwardingRuleName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters9 = {
    parameterPath: "parameters",
    mapper: ForwardingRulePatchMapper
};
export const parameters10 = {
    parameterPath: "parameters",
    mapper: VirtualNetworkLinkMapper
};
export const virtualNetworkLinkName = {
    parameterPath: "virtualNetworkLinkName",
    mapper: {
        serializedName: "virtualNetworkLinkName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters11 = {
    parameterPath: "parameters",
    mapper: VirtualNetworkLinkPatchMapper
};
//# sourceMappingURL=parameters.js.map