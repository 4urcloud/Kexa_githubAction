import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { DnsForwardingRulesets } from "../operationsInterfaces";
import { DnsResolverManagementClient } from "../dnsResolverManagementClient";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import { DnsForwardingRuleset, DnsForwardingRulesetsListByResourceGroupOptionalParams, DnsForwardingRulesetsListOptionalParams, VirtualNetworkDnsForwardingRuleset, DnsForwardingRulesetsListByVirtualNetworkOptionalParams, DnsForwardingRulesetsCreateOrUpdateOptionalParams, DnsForwardingRulesetsCreateOrUpdateResponse, DnsForwardingRulesetPatch, DnsForwardingRulesetsUpdateOptionalParams, DnsForwardingRulesetsUpdateResponse, DnsForwardingRulesetsDeleteOptionalParams, DnsForwardingRulesetsGetOptionalParams, DnsForwardingRulesetsGetResponse } from "../models";
/** Class containing DnsForwardingRulesets operations. */
export declare class DnsForwardingRulesetsImpl implements DnsForwardingRulesets {
    private readonly client;
    /**
     * Initialize a new instance of the class DnsForwardingRulesets class.
     * @param client Reference to the service client
     */
    constructor(client: DnsResolverManagementClient);
    /**
     * Lists DNS forwarding rulesets within a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: DnsForwardingRulesetsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<DnsForwardingRuleset>;
    private listByResourceGroupPagingPage;
    private listByResourceGroupPagingAll;
    /**
     * Lists DNS forwarding rulesets in all resource groups of a subscription.
     * @param options The options parameters.
     */
    list(options?: DnsForwardingRulesetsListOptionalParams): PagedAsyncIterableIterator<DnsForwardingRuleset>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Lists DNS forwarding ruleset resource IDs attached to a virtual network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualNetworkName The name of the virtual network.
     * @param options The options parameters.
     */
    listByVirtualNetwork(resourceGroupName: string, virtualNetworkName: string, options?: DnsForwardingRulesetsListByVirtualNetworkOptionalParams): PagedAsyncIterableIterator<VirtualNetworkDnsForwardingRuleset>;
    private listByVirtualNetworkPagingPage;
    private listByVirtualNetworkPagingAll;
    /**
     * Creates or updates a DNS forwarding ruleset.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, dnsForwardingRulesetName: string, parameters: DnsForwardingRuleset, options?: DnsForwardingRulesetsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<DnsForwardingRulesetsCreateOrUpdateResponse>, DnsForwardingRulesetsCreateOrUpdateResponse>>;
    /**
     * Creates or updates a DNS forwarding ruleset.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, dnsForwardingRulesetName: string, parameters: DnsForwardingRuleset, options?: DnsForwardingRulesetsCreateOrUpdateOptionalParams): Promise<DnsForwardingRulesetsCreateOrUpdateResponse>;
    /**
     * Updates a DNS forwarding ruleset.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param parameters Parameters supplied to the Update operation.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, dnsForwardingRulesetName: string, parameters: DnsForwardingRulesetPatch, options?: DnsForwardingRulesetsUpdateOptionalParams): Promise<PollerLike<PollOperationState<DnsForwardingRulesetsUpdateResponse>, DnsForwardingRulesetsUpdateResponse>>;
    /**
     * Updates a DNS forwarding ruleset.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param parameters Parameters supplied to the Update operation.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, dnsForwardingRulesetName: string, parameters: DnsForwardingRulesetPatch, options?: DnsForwardingRulesetsUpdateOptionalParams): Promise<DnsForwardingRulesetsUpdateResponse>;
    /**
     * Deletes a DNS forwarding ruleset. WARNING: This operation cannot be undone. All forwarding rules
     * within the ruleset will be deleted.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, dnsForwardingRulesetName: string, options?: DnsForwardingRulesetsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes a DNS forwarding ruleset. WARNING: This operation cannot be undone. All forwarding rules
     * within the ruleset will be deleted.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, dnsForwardingRulesetName: string, options?: DnsForwardingRulesetsDeleteOptionalParams): Promise<void>;
    /**
     * Gets a DNS forwarding ruleset properties.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, dnsForwardingRulesetName: string, options?: DnsForwardingRulesetsGetOptionalParams): Promise<DnsForwardingRulesetsGetResponse>;
    /**
     * Lists DNS forwarding rulesets within a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    private _listByResourceGroup;
    /**
     * Lists DNS forwarding rulesets in all resource groups of a subscription.
     * @param options The options parameters.
     */
    private _list;
    /**
     * Lists DNS forwarding ruleset resource IDs attached to a virtual network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualNetworkName The name of the virtual network.
     * @param options The options parameters.
     */
    private _listByVirtualNetwork;
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    private _listByResourceGroupNext;
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
    /**
     * ListByVirtualNetworkNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualNetworkName The name of the virtual network.
     * @param nextLink The nextLink from the previous successful call to the ListByVirtualNetwork method.
     * @param options The options parameters.
     */
    private _listByVirtualNetworkNext;
}
//# sourceMappingURL=dnsForwardingRulesets.d.ts.map