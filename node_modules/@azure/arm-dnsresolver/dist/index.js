'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var coreClient = require('@azure/core-client');
var coreRestPipeline = require('@azure/core-rest-pipeline');
var coreLro = require('@azure/core-lro');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var coreClient__namespace = /*#__PURE__*/_interopNamespace(coreClient);
var coreRestPipeline__namespace = /*#__PURE__*/_interopNamespace(coreRestPipeline);

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const pageMap = new WeakMap();
/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
function getContinuationToken(page) {
    var _a;
    if (typeof page !== "object" || page === null) {
        return undefined;
    }
    return (_a = pageMap.get(page)) === null || _a === void 0 ? void 0 : _a.continuationToken;
}
function setContinuationToken(page, continuationToken) {
    var _a;
    if (typeof page !== "object" || page === null || !continuationToken) {
        return;
    }
    const pageInfo = (_a = pageMap.get(page)) !== null && _a !== void 0 ? _a : {};
    pageInfo.continuationToken = continuationToken;
    pageMap.set(page, pageInfo);
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link DnsResolverState} that the service accepts. */
exports.KnownDnsResolverState = void 0;
(function (KnownDnsResolverState) {
    /** Connected */
    KnownDnsResolverState["Connected"] = "Connected";
    /** Disconnected */
    KnownDnsResolverState["Disconnected"] = "Disconnected";
})(exports.KnownDnsResolverState || (exports.KnownDnsResolverState = {}));
/** Known values of {@link ProvisioningState} that the service accepts. */
exports.KnownProvisioningState = void 0;
(function (KnownProvisioningState) {
    /** Creating */
    KnownProvisioningState["Creating"] = "Creating";
    /** Updating */
    KnownProvisioningState["Updating"] = "Updating";
    /** Deleting */
    KnownProvisioningState["Deleting"] = "Deleting";
    /** Succeeded */
    KnownProvisioningState["Succeeded"] = "Succeeded";
    /** Failed */
    KnownProvisioningState["Failed"] = "Failed";
    /** Canceled */
    KnownProvisioningState["Canceled"] = "Canceled";
})(exports.KnownProvisioningState || (exports.KnownProvisioningState = {}));
/** Known values of {@link CreatedByType} that the service accepts. */
exports.KnownCreatedByType = void 0;
(function (KnownCreatedByType) {
    /** User */
    KnownCreatedByType["User"] = "User";
    /** Application */
    KnownCreatedByType["Application"] = "Application";
    /** ManagedIdentity */
    KnownCreatedByType["ManagedIdentity"] = "ManagedIdentity";
    /** Key */
    KnownCreatedByType["Key"] = "Key";
})(exports.KnownCreatedByType || (exports.KnownCreatedByType = {}));
/** Known values of {@link IpAllocationMethod} that the service accepts. */
exports.KnownIpAllocationMethod = void 0;
(function (KnownIpAllocationMethod) {
    /** Static */
    KnownIpAllocationMethod["Static"] = "Static";
    /** Dynamic */
    KnownIpAllocationMethod["Dynamic"] = "Dynamic";
})(exports.KnownIpAllocationMethod || (exports.KnownIpAllocationMethod = {}));
/** Known values of {@link ForwardingRuleState} that the service accepts. */
exports.KnownForwardingRuleState = void 0;
(function (KnownForwardingRuleState) {
    /** Enabled */
    KnownForwardingRuleState["Enabled"] = "Enabled";
    /** Disabled */
    KnownForwardingRuleState["Disabled"] = "Disabled";
})(exports.KnownForwardingRuleState || (exports.KnownForwardingRuleState = {}));

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const SubResource = {
    type: {
        name: "Composite",
        className: "SubResource",
        modelProperties: {
            id: {
                serializedName: "id",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SystemData = {
    type: {
        name: "Composite",
        className: "SystemData",
        modelProperties: {
            createdBy: {
                serializedName: "createdBy",
                type: {
                    name: "String"
                }
            },
            createdByType: {
                serializedName: "createdByType",
                type: {
                    name: "String"
                }
            },
            createdAt: {
                serializedName: "createdAt",
                type: {
                    name: "DateTime"
                }
            },
            lastModifiedBy: {
                serializedName: "lastModifiedBy",
                type: {
                    name: "String"
                }
            },
            lastModifiedByType: {
                serializedName: "lastModifiedByType",
                type: {
                    name: "String"
                }
            },
            lastModifiedAt: {
                serializedName: "lastModifiedAt",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const Resource = {
    type: {
        name: "Composite",
        className: "Resource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CloudError = {
    type: {
        name: "Composite",
        className: "CloudError",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "CloudErrorBody"
                }
            }
        }
    }
};
const CloudErrorBody = {
    type: {
        name: "Composite",
        className: "CloudErrorBody",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CloudErrorBody"
                        }
                    }
                }
            }
        }
    }
};
const DnsResolverPatch = {
    type: {
        name: "Composite",
        className: "DnsResolverPatch",
        modelProperties: {
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }
        }
    }
};
const DnsResolverListResult = {
    type: {
        name: "Composite",
        className: "DnsResolverListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DnsResolver"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const IpConfiguration = {
    type: {
        name: "Composite",
        className: "IpConfiguration",
        modelProperties: {
            subnet: {
                serializedName: "subnet",
                type: {
                    name: "Composite",
                    className: "SubResource"
                }
            },
            privateIpAddress: {
                serializedName: "privateIpAddress",
                type: {
                    name: "String"
                }
            },
            privateIpAllocationMethod: {
                defaultValue: "Dynamic",
                serializedName: "privateIpAllocationMethod",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const InboundEndpointPatch = {
    type: {
        name: "Composite",
        className: "InboundEndpointPatch",
        modelProperties: {
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }
        }
    }
};
const InboundEndpointListResult = {
    type: {
        name: "Composite",
        className: "InboundEndpointListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "InboundEndpoint"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OutboundEndpointPatch = {
    type: {
        name: "Composite",
        className: "OutboundEndpointPatch",
        modelProperties: {
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }
        }
    }
};
const OutboundEndpointListResult = {
    type: {
        name: "Composite",
        className: "OutboundEndpointListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "OutboundEndpoint"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DnsForwardingRulesetPatch = {
    type: {
        name: "Composite",
        className: "DnsForwardingRulesetPatch",
        modelProperties: {
            dnsResolverOutboundEndpoints: {
                serializedName: "dnsResolverOutboundEndpoints",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SubResource"
                        }
                    }
                }
            },
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }
        }
    }
};
const DnsForwardingRulesetListResult = {
    type: {
        name: "Composite",
        className: "DnsForwardingRulesetListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DnsForwardingRuleset"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TargetDnsServer = {
    type: {
        name: "Composite",
        className: "TargetDnsServer",
        modelProperties: {
            ipAddress: {
                serializedName: "ipAddress",
                required: true,
                type: {
                    name: "String"
                }
            },
            port: {
                defaultValue: 53,
                serializedName: "port",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const ForwardingRulePatch = {
    type: {
        name: "Composite",
        className: "ForwardingRulePatch",
        modelProperties: {
            targetDnsServers: {
                serializedName: "properties.targetDnsServers",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TargetDnsServer"
                        }
                    }
                }
            },
            metadata: {
                serializedName: "properties.metadata",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            forwardingRuleState: {
                serializedName: "properties.forwardingRuleState",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ForwardingRuleListResult = {
    type: {
        name: "Composite",
        className: "ForwardingRuleListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ForwardingRule"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const VirtualNetworkLinkPatch = {
    type: {
        name: "Composite",
        className: "VirtualNetworkLinkPatch",
        modelProperties: {
            metadata: {
                serializedName: "properties.metadata",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }
        }
    }
};
const VirtualNetworkLinkListResult = {
    type: {
        name: "Composite",
        className: "VirtualNetworkLinkListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "VirtualNetworkLink"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SubResourceListResult = {
    type: {
        name: "Composite",
        className: "SubResourceListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SubResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const VirtualNetworkDnsForwardingRulesetListResult = {
    type: {
        name: "Composite",
        className: "VirtualNetworkDnsForwardingRulesetListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "VirtualNetworkDnsForwardingRuleset"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const VirtualNetworkDnsForwardingRuleset = {
    type: {
        name: "Composite",
        className: "VirtualNetworkDnsForwardingRuleset",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            virtualNetworkLink: {
                serializedName: "properties.virtualNetworkLink",
                type: {
                    name: "Composite",
                    className: "SubResource"
                }
            }
        }
    }
};
const TrackedResource = {
    type: {
        name: "Composite",
        className: "TrackedResource",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }, location: {
                serializedName: "location",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const ProxyResource = {
    type: {
        name: "Composite",
        className: "ProxyResource",
        modelProperties: Object.assign({}, Resource.type.modelProperties)
    }
};
const DnsResolver = {
    type: {
        name: "Composite",
        className: "DnsResolver",
        modelProperties: Object.assign(Object.assign({}, TrackedResource.type.modelProperties), { etag: {
                serializedName: "etag",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, virtualNetwork: {
                serializedName: "properties.virtualNetwork",
                type: {
                    name: "Composite",
                    className: "SubResource"
                }
            }, dnsResolverState: {
                serializedName: "properties.dnsResolverState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, resourceGuid: {
                serializedName: "properties.resourceGuid",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const InboundEndpoint = {
    type: {
        name: "Composite",
        className: "InboundEndpoint",
        modelProperties: Object.assign(Object.assign({}, TrackedResource.type.modelProperties), { etag: {
                serializedName: "etag",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, ipConfigurations: {
                serializedName: "properties.ipConfigurations",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "IpConfiguration"
                        }
                    }
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, resourceGuid: {
                serializedName: "properties.resourceGuid",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const OutboundEndpoint = {
    type: {
        name: "Composite",
        className: "OutboundEndpoint",
        modelProperties: Object.assign(Object.assign({}, TrackedResource.type.modelProperties), { etag: {
                serializedName: "etag",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, subnet: {
                serializedName: "properties.subnet",
                type: {
                    name: "Composite",
                    className: "SubResource"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, resourceGuid: {
                serializedName: "properties.resourceGuid",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const DnsForwardingRuleset = {
    type: {
        name: "Composite",
        className: "DnsForwardingRuleset",
        modelProperties: Object.assign(Object.assign({}, TrackedResource.type.modelProperties), { etag: {
                serializedName: "etag",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, dnsResolverOutboundEndpoints: {
                serializedName: "properties.dnsResolverOutboundEndpoints",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SubResource"
                        }
                    }
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, resourceGuid: {
                serializedName: "properties.resourceGuid",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const ForwardingRule = {
    type: {
        name: "Composite",
        className: "ForwardingRule",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { etag: {
                serializedName: "etag",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, domainName: {
                serializedName: "properties.domainName",
                required: true,
                type: {
                    name: "String"
                }
            }, targetDnsServers: {
                serializedName: "properties.targetDnsServers",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TargetDnsServer"
                        }
                    }
                }
            }, metadata: {
                serializedName: "properties.metadata",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }, forwardingRuleState: {
                serializedName: "properties.forwardingRuleState",
                type: {
                    name: "String"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const VirtualNetworkLink = {
    type: {
        name: "Composite",
        className: "VirtualNetworkLink",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { etag: {
                serializedName: "etag",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, virtualNetwork: {
                serializedName: "properties.virtualNetwork",
                type: {
                    name: "Composite",
                    className: "SubResource"
                }
            }, metadata: {
                serializedName: "properties.metadata",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    SubResource: SubResource,
    SystemData: SystemData,
    Resource: Resource,
    CloudError: CloudError,
    CloudErrorBody: CloudErrorBody,
    DnsResolverPatch: DnsResolverPatch,
    DnsResolverListResult: DnsResolverListResult,
    IpConfiguration: IpConfiguration,
    InboundEndpointPatch: InboundEndpointPatch,
    InboundEndpointListResult: InboundEndpointListResult,
    OutboundEndpointPatch: OutboundEndpointPatch,
    OutboundEndpointListResult: OutboundEndpointListResult,
    DnsForwardingRulesetPatch: DnsForwardingRulesetPatch,
    DnsForwardingRulesetListResult: DnsForwardingRulesetListResult,
    TargetDnsServer: TargetDnsServer,
    ForwardingRulePatch: ForwardingRulePatch,
    ForwardingRuleListResult: ForwardingRuleListResult,
    VirtualNetworkLinkPatch: VirtualNetworkLinkPatch,
    VirtualNetworkLinkListResult: VirtualNetworkLinkListResult,
    SubResourceListResult: SubResourceListResult,
    VirtualNetworkDnsForwardingRulesetListResult: VirtualNetworkDnsForwardingRulesetListResult,
    VirtualNetworkDnsForwardingRuleset: VirtualNetworkDnsForwardingRuleset,
    TrackedResource: TrackedResource,
    ProxyResource: ProxyResource,
    DnsResolver: DnsResolver,
    InboundEndpoint: InboundEndpoint,
    OutboundEndpoint: OutboundEndpoint,
    DnsForwardingRuleset: DnsForwardingRuleset,
    ForwardingRule: ForwardingRule,
    VirtualNetworkLink: VirtualNetworkLink
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const parameters = {
    parameterPath: "parameters",
    mapper: DnsResolver
};
const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const dnsResolverName = {
    parameterPath: "dnsResolverName",
    mapper: {
        serializedName: "dnsResolverName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2022-07-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const ifMatch = {
    parameterPath: ["options", "ifMatch"],
    mapper: {
        serializedName: "If-Match",
        type: {
            name: "String"
        }
    }
};
const ifNoneMatch = {
    parameterPath: ["options", "ifNoneMatch"],
    mapper: {
        serializedName: "If-None-Match",
        type: {
            name: "String"
        }
    }
};
const parameters1 = {
    parameterPath: "parameters",
    mapper: DnsResolverPatch
};
const top = {
    parameterPath: ["options", "top"],
    mapper: {
        serializedName: "$top",
        type: {
            name: "Number"
        }
    }
};
const virtualNetworkName = {
    parameterPath: "virtualNetworkName",
    mapper: {
        serializedName: "virtualNetworkName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const parameters2 = {
    parameterPath: "parameters",
    mapper: InboundEndpoint
};
const inboundEndpointName = {
    parameterPath: "inboundEndpointName",
    mapper: {
        serializedName: "inboundEndpointName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters3 = {
    parameterPath: "parameters",
    mapper: InboundEndpointPatch
};
const parameters4 = {
    parameterPath: "parameters",
    mapper: OutboundEndpoint
};
const outboundEndpointName = {
    parameterPath: "outboundEndpointName",
    mapper: {
        serializedName: "outboundEndpointName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters5 = {
    parameterPath: "parameters",
    mapper: OutboundEndpointPatch
};
const parameters6 = {
    parameterPath: "parameters",
    mapper: DnsForwardingRuleset
};
const dnsForwardingRulesetName = {
    parameterPath: "dnsForwardingRulesetName",
    mapper: {
        serializedName: "dnsForwardingRulesetName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters7 = {
    parameterPath: "parameters",
    mapper: DnsForwardingRulesetPatch
};
const parameters8 = {
    parameterPath: "parameters",
    mapper: ForwardingRule
};
const forwardingRuleName = {
    parameterPath: "forwardingRuleName",
    mapper: {
        serializedName: "forwardingRuleName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters9 = {
    parameterPath: "parameters",
    mapper: ForwardingRulePatch
};
const parameters10 = {
    parameterPath: "parameters",
    mapper: VirtualNetworkLink
};
const virtualNetworkLinkName = {
    parameterPath: "virtualNetworkLinkName",
    mapper: {
        serializedName: "virtualNetworkLinkName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters11 = {
    parameterPath: "parameters",
    mapper: VirtualNetworkLinkPatch
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class LroImpl {
    constructor(sendOperationFn, args, spec, requestPath = spec.path, requestMethod = spec.httpMethod) {
        this.sendOperationFn = sendOperationFn;
        this.args = args;
        this.spec = spec;
        this.requestPath = requestPath;
        this.requestMethod = requestMethod;
    }
    sendInitialRequest() {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            return this.sendOperationFn(this.args, this.spec);
        });
    }
    sendPollRequest(path) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const _a = this.spec, restSpec = tslib.__rest(_a, ["requestBody"]);
            return this.sendOperationFn(this.args, Object.assign(Object.assign({}, restSpec), { path, httpMethod: "GET" }));
        });
    }
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing DnsResolvers operations. */
class DnsResolversImpl {
    /**
     * Initialize a new instance of the class DnsResolvers class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists DNS resolvers within a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName, options) {
        const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByResourceGroupPagingPage(resourceGroupName, options, settings);
            }
        };
    }
    listByResourceGroupPagingPage(resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByResourceGroup(resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByResourceGroupNext(resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByResourceGroupPagingAll(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByResourceGroupPagingPage(resourceGroupName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists DNS resolvers in all resource groups of a subscription.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Lists DNS resolver resource IDs linked to a virtual network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualNetworkName The name of the virtual network.
     * @param options The options parameters.
     */
    listByVirtualNetwork(resourceGroupName, virtualNetworkName, options) {
        const iter = this.listByVirtualNetworkPagingAll(resourceGroupName, virtualNetworkName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByVirtualNetworkPagingPage(resourceGroupName, virtualNetworkName, options, settings);
            }
        };
    }
    listByVirtualNetworkPagingPage(resourceGroupName, virtualNetworkName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByVirtualNetworkPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByVirtualNetwork(resourceGroupName, virtualNetworkName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByVirtualNetworkNext(resourceGroupName, virtualNetworkName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByVirtualNetworkPagingAll(resourceGroupName, virtualNetworkName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByVirtualNetworkPagingAll_1() {
            var e_3, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByVirtualNetworkPagingPage(resourceGroupName, virtualNetworkName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * Creates or updates a DNS resolver.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverName The name of the DNS resolver.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, dnsResolverName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, dnsResolverName, parameters, options }, createOrUpdateOperationSpec$5);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Creates or updates a DNS resolver.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverName The name of the DNS resolver.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, dnsResolverName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, dnsResolverName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Updates a DNS resolver.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverName The name of the DNS resolver.
     * @param parameters Parameters supplied to the Update operation.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, dnsResolverName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, dnsResolverName, parameters, options }, updateOperationSpec$5);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Updates a DNS resolver.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverName The name of the DNS resolver.
     * @param parameters Parameters supplied to the Update operation.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, dnsResolverName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, dnsResolverName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Deletes a DNS resolver. WARNING: This operation cannot be undone.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverName The name of the DNS resolver.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, dnsResolverName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, dnsResolverName, options }, deleteOperationSpec$5);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes a DNS resolver. WARNING: This operation cannot be undone.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverName The name of the DNS resolver.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, dnsResolverName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, dnsResolverName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Gets properties of a DNS resolver.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverName The name of the DNS resolver.
     * @param options The options parameters.
     */
    get(resourceGroupName, dnsResolverName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, dnsResolverName, options }, getOperationSpec$5);
    }
    /**
     * Lists DNS resolvers within a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    _listByResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listByResourceGroupOperationSpec$1);
    }
    /**
     * Lists DNS resolvers in all resource groups of a subscription.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$5);
    }
    /**
     * Lists DNS resolver resource IDs linked to a virtual network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualNetworkName The name of the virtual network.
     * @param options The options parameters.
     */
    _listByVirtualNetwork(resourceGroupName, virtualNetworkName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, virtualNetworkName, options }, listByVirtualNetworkOperationSpec$1);
    }
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    _listByResourceGroupNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, listByResourceGroupNextOperationSpec$1);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec$5);
    }
    /**
     * ListByVirtualNetworkNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualNetworkName The name of the virtual network.
     * @param nextLink The nextLink from the previous successful call to the ListByVirtualNetwork method.
     * @param options The options parameters.
     */
    _listByVirtualNetworkNext(resourceGroupName, virtualNetworkName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, virtualNetworkName, nextLink, options }, listByVirtualNetworkNextOperationSpec$1);
    }
}
// Operation Specifications
const serializer$5 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const createOrUpdateOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsResolvers/{dnsResolverName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: DnsResolver
        },
        201: {
            bodyMapper: DnsResolver
        },
        202: {
            bodyMapper: DnsResolver
        },
        204: {
            bodyMapper: DnsResolver
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: parameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        dnsResolverName
    ],
    headerParameters: [
        contentType,
        accept,
        ifMatch,
        ifNoneMatch
    ],
    mediaType: "json",
    serializer: serializer$5
};
const updateOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsResolvers/{dnsResolverName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: DnsResolver
        },
        201: {
            bodyMapper: DnsResolver
        },
        202: {
            bodyMapper: DnsResolver
        },
        204: {
            bodyMapper: DnsResolver
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: parameters1,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        dnsResolverName
    ],
    headerParameters: [
        contentType,
        accept,
        ifMatch
    ],
    mediaType: "json",
    serializer: serializer$5
};
const deleteOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsResolvers/{dnsResolverName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        dnsResolverName
    ],
    headerParameters: [accept, ifMatch],
    serializer: serializer$5
};
const getOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsResolvers/{dnsResolverName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DnsResolver
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        dnsResolverName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const listByResourceGroupOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsResolvers",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DnsResolverListResult
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion, top],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const listOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Network/dnsResolvers",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DnsResolverListResult
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion, top],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$5
};
const listByVirtualNetworkOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/listDnsResolvers",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: SubResourceListResult
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion, top],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        virtualNetworkName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const listByResourceGroupNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DnsResolverListResult
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const listNextOperationSpec$5 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DnsResolverListResult
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const listByVirtualNetworkNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SubResourceListResult
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        virtualNetworkName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$5
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing InboundEndpoints operations. */
class InboundEndpointsImpl {
    /**
     * Initialize a new instance of the class InboundEndpoints class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists inbound endpoints for a DNS resolver.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverName The name of the DNS resolver.
     * @param options The options parameters.
     */
    list(resourceGroupName, dnsResolverName, options) {
        const iter = this.listPagingAll(resourceGroupName, dnsResolverName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, dnsResolverName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, dnsResolverName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, dnsResolverName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, dnsResolverName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, dnsResolverName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, dnsResolverName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Creates or updates an inbound endpoint for a DNS resolver.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverName The name of the DNS resolver.
     * @param inboundEndpointName The name of the inbound endpoint for the DNS resolver.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, dnsResolverName, inboundEndpointName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                dnsResolverName,
                inboundEndpointName,
                parameters,
                options
            }, createOrUpdateOperationSpec$4);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Creates or updates an inbound endpoint for a DNS resolver.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverName The name of the DNS resolver.
     * @param inboundEndpointName The name of the inbound endpoint for the DNS resolver.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, dnsResolverName, inboundEndpointName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, dnsResolverName, inboundEndpointName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Updates an inbound endpoint for a DNS resolver.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverName The name of the DNS resolver.
     * @param inboundEndpointName The name of the inbound endpoint for the DNS resolver.
     * @param parameters Parameters supplied to the Update operation.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, dnsResolverName, inboundEndpointName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                dnsResolverName,
                inboundEndpointName,
                parameters,
                options
            }, updateOperationSpec$4);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Updates an inbound endpoint for a DNS resolver.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverName The name of the DNS resolver.
     * @param inboundEndpointName The name of the inbound endpoint for the DNS resolver.
     * @param parameters Parameters supplied to the Update operation.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, dnsResolverName, inboundEndpointName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, dnsResolverName, inboundEndpointName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Deletes an inbound endpoint for a DNS resolver. WARNING: This operation cannot be undone.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverName The name of the DNS resolver.
     * @param inboundEndpointName The name of the inbound endpoint for the DNS resolver.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, dnsResolverName, inboundEndpointName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, dnsResolverName, inboundEndpointName, options }, deleteOperationSpec$4);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes an inbound endpoint for a DNS resolver. WARNING: This operation cannot be undone.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverName The name of the DNS resolver.
     * @param inboundEndpointName The name of the inbound endpoint for the DNS resolver.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, dnsResolverName, inboundEndpointName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, dnsResolverName, inboundEndpointName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Gets properties of an inbound endpoint for a DNS resolver.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverName The name of the DNS resolver.
     * @param inboundEndpointName The name of the inbound endpoint for the DNS resolver.
     * @param options The options parameters.
     */
    get(resourceGroupName, dnsResolverName, inboundEndpointName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, dnsResolverName, inboundEndpointName, options }, getOperationSpec$4);
    }
    /**
     * Lists inbound endpoints for a DNS resolver.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverName The name of the DNS resolver.
     * @param options The options parameters.
     */
    _list(resourceGroupName, dnsResolverName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, dnsResolverName, options }, listOperationSpec$4);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverName The name of the DNS resolver.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, dnsResolverName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, dnsResolverName, nextLink, options }, listNextOperationSpec$4);
    }
}
// Operation Specifications
const serializer$4 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const createOrUpdateOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsResolvers/{dnsResolverName}/inboundEndpoints/{inboundEndpointName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: InboundEndpoint
        },
        201: {
            bodyMapper: InboundEndpoint
        },
        202: {
            bodyMapper: InboundEndpoint
        },
        204: {
            bodyMapper: InboundEndpoint
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: parameters2,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        dnsResolverName,
        inboundEndpointName
    ],
    headerParameters: [
        contentType,
        accept,
        ifMatch,
        ifNoneMatch
    ],
    mediaType: "json",
    serializer: serializer$4
};
const updateOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsResolvers/{dnsResolverName}/inboundEndpoints/{inboundEndpointName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: InboundEndpoint
        },
        201: {
            bodyMapper: InboundEndpoint
        },
        202: {
            bodyMapper: InboundEndpoint
        },
        204: {
            bodyMapper: InboundEndpoint
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: parameters3,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        dnsResolverName,
        inboundEndpointName
    ],
    headerParameters: [
        contentType,
        accept,
        ifMatch
    ],
    mediaType: "json",
    serializer: serializer$4
};
const deleteOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsResolvers/{dnsResolverName}/inboundEndpoints/{inboundEndpointName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        dnsResolverName,
        inboundEndpointName
    ],
    headerParameters: [accept, ifMatch],
    serializer: serializer$4
};
const getOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsResolvers/{dnsResolverName}/inboundEndpoints/{inboundEndpointName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: InboundEndpoint
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        dnsResolverName,
        inboundEndpointName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const listOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsResolvers/{dnsResolverName}/inboundEndpoints",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: InboundEndpointListResult
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion, top],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        dnsResolverName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const listNextOperationSpec$4 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: InboundEndpointListResult
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        dnsResolverName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$4
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing OutboundEndpoints operations. */
class OutboundEndpointsImpl {
    /**
     * Initialize a new instance of the class OutboundEndpoints class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists outbound endpoints for a DNS resolver.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverName The name of the DNS resolver.
     * @param options The options parameters.
     */
    list(resourceGroupName, dnsResolverName, options) {
        const iter = this.listPagingAll(resourceGroupName, dnsResolverName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, dnsResolverName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, dnsResolverName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, dnsResolverName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, dnsResolverName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, dnsResolverName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, dnsResolverName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Creates or updates an outbound endpoint for a DNS resolver.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverName The name of the DNS resolver.
     * @param outboundEndpointName The name of the outbound endpoint for the DNS resolver.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, dnsResolverName, outboundEndpointName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                dnsResolverName,
                outboundEndpointName,
                parameters,
                options
            }, createOrUpdateOperationSpec$3);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Creates or updates an outbound endpoint for a DNS resolver.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverName The name of the DNS resolver.
     * @param outboundEndpointName The name of the outbound endpoint for the DNS resolver.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, dnsResolverName, outboundEndpointName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, dnsResolverName, outboundEndpointName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Updates an outbound endpoint for a DNS resolver.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverName The name of the DNS resolver.
     * @param outboundEndpointName The name of the outbound endpoint for the DNS resolver.
     * @param parameters Parameters supplied to the Update operation.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, dnsResolverName, outboundEndpointName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                dnsResolverName,
                outboundEndpointName,
                parameters,
                options
            }, updateOperationSpec$3);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Updates an outbound endpoint for a DNS resolver.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverName The name of the DNS resolver.
     * @param outboundEndpointName The name of the outbound endpoint for the DNS resolver.
     * @param parameters Parameters supplied to the Update operation.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, dnsResolverName, outboundEndpointName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, dnsResolverName, outboundEndpointName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Deletes an outbound endpoint for a DNS resolver. WARNING: This operation cannot be undone.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverName The name of the DNS resolver.
     * @param outboundEndpointName The name of the outbound endpoint for the DNS resolver.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, dnsResolverName, outboundEndpointName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, dnsResolverName, outboundEndpointName, options }, deleteOperationSpec$3);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes an outbound endpoint for a DNS resolver. WARNING: This operation cannot be undone.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverName The name of the DNS resolver.
     * @param outboundEndpointName The name of the outbound endpoint for the DNS resolver.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, dnsResolverName, outboundEndpointName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, dnsResolverName, outboundEndpointName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Gets properties of an outbound endpoint for a DNS resolver.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverName The name of the DNS resolver.
     * @param outboundEndpointName The name of the outbound endpoint for the DNS resolver.
     * @param options The options parameters.
     */
    get(resourceGroupName, dnsResolverName, outboundEndpointName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, dnsResolverName, outboundEndpointName, options }, getOperationSpec$3);
    }
    /**
     * Lists outbound endpoints for a DNS resolver.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverName The name of the DNS resolver.
     * @param options The options parameters.
     */
    _list(resourceGroupName, dnsResolverName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, dnsResolverName, options }, listOperationSpec$3);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverName The name of the DNS resolver.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, dnsResolverName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, dnsResolverName, nextLink, options }, listNextOperationSpec$3);
    }
}
// Operation Specifications
const serializer$3 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const createOrUpdateOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsResolvers/{dnsResolverName}/outboundEndpoints/{outboundEndpointName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: OutboundEndpoint
        },
        201: {
            bodyMapper: OutboundEndpoint
        },
        202: {
            bodyMapper: OutboundEndpoint
        },
        204: {
            bodyMapper: OutboundEndpoint
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: parameters4,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        dnsResolverName,
        outboundEndpointName
    ],
    headerParameters: [
        contentType,
        accept,
        ifMatch,
        ifNoneMatch
    ],
    mediaType: "json",
    serializer: serializer$3
};
const updateOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsResolvers/{dnsResolverName}/outboundEndpoints/{outboundEndpointName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: OutboundEndpoint
        },
        201: {
            bodyMapper: OutboundEndpoint
        },
        202: {
            bodyMapper: OutboundEndpoint
        },
        204: {
            bodyMapper: OutboundEndpoint
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: parameters5,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        dnsResolverName,
        outboundEndpointName
    ],
    headerParameters: [
        contentType,
        accept,
        ifMatch
    ],
    mediaType: "json",
    serializer: serializer$3
};
const deleteOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsResolvers/{dnsResolverName}/outboundEndpoints/{outboundEndpointName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        dnsResolverName,
        outboundEndpointName
    ],
    headerParameters: [accept, ifMatch],
    serializer: serializer$3
};
const getOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsResolvers/{dnsResolverName}/outboundEndpoints/{outboundEndpointName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OutboundEndpoint
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        dnsResolverName,
        outboundEndpointName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const listOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsResolvers/{dnsResolverName}/outboundEndpoints",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OutboundEndpointListResult
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion, top],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        dnsResolverName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const listNextOperationSpec$3 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OutboundEndpointListResult
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        dnsResolverName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$3
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing DnsForwardingRulesets operations. */
class DnsForwardingRulesetsImpl {
    /**
     * Initialize a new instance of the class DnsForwardingRulesets class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists DNS forwarding rulesets within a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName, options) {
        const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByResourceGroupPagingPage(resourceGroupName, options, settings);
            }
        };
    }
    listByResourceGroupPagingPage(resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByResourceGroup(resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByResourceGroupNext(resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByResourceGroupPagingAll(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByResourceGroupPagingPage(resourceGroupName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists DNS forwarding rulesets in all resource groups of a subscription.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Lists DNS forwarding ruleset resource IDs attached to a virtual network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualNetworkName The name of the virtual network.
     * @param options The options parameters.
     */
    listByVirtualNetwork(resourceGroupName, virtualNetworkName, options) {
        const iter = this.listByVirtualNetworkPagingAll(resourceGroupName, virtualNetworkName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByVirtualNetworkPagingPage(resourceGroupName, virtualNetworkName, options, settings);
            }
        };
    }
    listByVirtualNetworkPagingPage(resourceGroupName, virtualNetworkName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByVirtualNetworkPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByVirtualNetwork(resourceGroupName, virtualNetworkName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByVirtualNetworkNext(resourceGroupName, virtualNetworkName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByVirtualNetworkPagingAll(resourceGroupName, virtualNetworkName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByVirtualNetworkPagingAll_1() {
            var e_3, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByVirtualNetworkPagingPage(resourceGroupName, virtualNetworkName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * Creates or updates a DNS forwarding ruleset.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, dnsForwardingRulesetName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, dnsForwardingRulesetName, parameters, options }, createOrUpdateOperationSpec$2);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Creates or updates a DNS forwarding ruleset.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, dnsForwardingRulesetName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, dnsForwardingRulesetName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Updates a DNS forwarding ruleset.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param parameters Parameters supplied to the Update operation.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, dnsForwardingRulesetName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, dnsForwardingRulesetName, parameters, options }, updateOperationSpec$2);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Updates a DNS forwarding ruleset.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param parameters Parameters supplied to the Update operation.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, dnsForwardingRulesetName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, dnsForwardingRulesetName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Deletes a DNS forwarding ruleset. WARNING: This operation cannot be undone. All forwarding rules
     * within the ruleset will be deleted.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, dnsForwardingRulesetName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, dnsForwardingRulesetName, options }, deleteOperationSpec$2);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes a DNS forwarding ruleset. WARNING: This operation cannot be undone. All forwarding rules
     * within the ruleset will be deleted.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, dnsForwardingRulesetName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, dnsForwardingRulesetName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Gets a DNS forwarding ruleset properties.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param options The options parameters.
     */
    get(resourceGroupName, dnsForwardingRulesetName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, dnsForwardingRulesetName, options }, getOperationSpec$2);
    }
    /**
     * Lists DNS forwarding rulesets within a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    _listByResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listByResourceGroupOperationSpec);
    }
    /**
     * Lists DNS forwarding rulesets in all resource groups of a subscription.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$2);
    }
    /**
     * Lists DNS forwarding ruleset resource IDs attached to a virtual network.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualNetworkName The name of the virtual network.
     * @param options The options parameters.
     */
    _listByVirtualNetwork(resourceGroupName, virtualNetworkName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, virtualNetworkName, options }, listByVirtualNetworkOperationSpec);
    }
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    _listByResourceGroupNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, listByResourceGroupNextOperationSpec);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec$2);
    }
    /**
     * ListByVirtualNetworkNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualNetworkName The name of the virtual network.
     * @param nextLink The nextLink from the previous successful call to the ListByVirtualNetwork method.
     * @param options The options parameters.
     */
    _listByVirtualNetworkNext(resourceGroupName, virtualNetworkName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, virtualNetworkName, nextLink, options }, listByVirtualNetworkNextOperationSpec);
    }
}
// Operation Specifications
const serializer$2 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const createOrUpdateOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsForwardingRulesets/{dnsForwardingRulesetName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: DnsForwardingRuleset
        },
        201: {
            bodyMapper: DnsForwardingRuleset
        },
        202: {
            bodyMapper: DnsForwardingRuleset
        },
        204: {
            bodyMapper: DnsForwardingRuleset
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: parameters6,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        dnsForwardingRulesetName
    ],
    headerParameters: [
        contentType,
        accept,
        ifMatch,
        ifNoneMatch
    ],
    mediaType: "json",
    serializer: serializer$2
};
const updateOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsForwardingRulesets/{dnsForwardingRulesetName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: DnsForwardingRuleset
        },
        201: {
            bodyMapper: DnsForwardingRuleset
        },
        202: {
            bodyMapper: DnsForwardingRuleset
        },
        204: {
            bodyMapper: DnsForwardingRuleset
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: parameters7,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        dnsForwardingRulesetName
    ],
    headerParameters: [
        contentType,
        accept,
        ifMatch
    ],
    mediaType: "json",
    serializer: serializer$2
};
const deleteOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsForwardingRulesets/{dnsForwardingRulesetName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        dnsForwardingRulesetName
    ],
    headerParameters: [accept, ifMatch],
    serializer: serializer$2
};
const getOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsForwardingRulesets/{dnsForwardingRulesetName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DnsForwardingRuleset
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        dnsForwardingRulesetName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listByResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsForwardingRulesets",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DnsForwardingRulesetListResult
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion, top],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Network/dnsForwardingRulesets",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DnsForwardingRulesetListResult
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion, top],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$2
};
const listByVirtualNetworkOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/listDnsForwardingRulesets",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: VirtualNetworkDnsForwardingRulesetListResult
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion, top],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        virtualNetworkName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listByResourceGroupNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DnsForwardingRulesetListResult
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listNextOperationSpec$2 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DnsForwardingRulesetListResult
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listByVirtualNetworkNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: VirtualNetworkDnsForwardingRulesetListResult
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        virtualNetworkName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$2
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ForwardingRules operations. */
class ForwardingRulesImpl {
    /**
     * Initialize a new instance of the class ForwardingRules class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists forwarding rules in a DNS forwarding ruleset.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param options The options parameters.
     */
    list(resourceGroupName, dnsForwardingRulesetName, options) {
        const iter = this.listPagingAll(resourceGroupName, dnsForwardingRulesetName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, dnsForwardingRulesetName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, dnsForwardingRulesetName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, dnsForwardingRulesetName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, dnsForwardingRulesetName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, dnsForwardingRulesetName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, dnsForwardingRulesetName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Creates or updates a forwarding rule in a DNS forwarding ruleset.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param forwardingRuleName The name of the forwarding rule.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, dnsForwardingRulesetName, forwardingRuleName, parameters, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            dnsForwardingRulesetName,
            forwardingRuleName,
            parameters,
            options
        }, createOrUpdateOperationSpec$1);
    }
    /**
     * Updates a forwarding rule in a DNS forwarding ruleset.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param forwardingRuleName The name of the forwarding rule.
     * @param parameters Parameters supplied to the Update operation.
     * @param options The options parameters.
     */
    update(resourceGroupName, dnsForwardingRulesetName, forwardingRuleName, parameters, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            dnsForwardingRulesetName,
            forwardingRuleName,
            parameters,
            options
        }, updateOperationSpec$1);
    }
    /**
     * Deletes a forwarding rule in a DNS forwarding ruleset. WARNING: This operation cannot be undone.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param forwardingRuleName The name of the forwarding rule.
     * @param options The options parameters.
     */
    delete(resourceGroupName, dnsForwardingRulesetName, forwardingRuleName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            dnsForwardingRulesetName,
            forwardingRuleName,
            options
        }, deleteOperationSpec$1);
    }
    /**
     * Gets properties of a forwarding rule in a DNS forwarding ruleset.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param forwardingRuleName The name of the forwarding rule.
     * @param options The options parameters.
     */
    get(resourceGroupName, dnsForwardingRulesetName, forwardingRuleName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            dnsForwardingRulesetName,
            forwardingRuleName,
            options
        }, getOperationSpec$1);
    }
    /**
     * Lists forwarding rules in a DNS forwarding ruleset.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param options The options parameters.
     */
    _list(resourceGroupName, dnsForwardingRulesetName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, dnsForwardingRulesetName, options }, listOperationSpec$1);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, dnsForwardingRulesetName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, dnsForwardingRulesetName, nextLink, options }, listNextOperationSpec$1);
    }
}
// Operation Specifications
const serializer$1 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const createOrUpdateOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsForwardingRulesets/{dnsForwardingRulesetName}/forwardingRules/{forwardingRuleName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ForwardingRule
        },
        201: {
            bodyMapper: ForwardingRule
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: parameters8,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        dnsForwardingRulesetName,
        forwardingRuleName
    ],
    headerParameters: [
        contentType,
        accept,
        ifMatch,
        ifNoneMatch
    ],
    mediaType: "json",
    serializer: serializer$1
};
const updateOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsForwardingRulesets/{dnsForwardingRulesetName}/forwardingRules/{forwardingRuleName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: ForwardingRule
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: parameters9,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        dnsForwardingRulesetName,
        forwardingRuleName
    ],
    headerParameters: [
        contentType,
        accept,
        ifMatch
    ],
    mediaType: "json",
    serializer: serializer$1
};
const deleteOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsForwardingRulesets/{dnsForwardingRulesetName}/forwardingRules/{forwardingRuleName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        dnsForwardingRulesetName,
        forwardingRuleName
    ],
    headerParameters: [accept, ifMatch],
    serializer: serializer$1
};
const getOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsForwardingRulesets/{dnsForwardingRulesetName}/forwardingRules/{forwardingRuleName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ForwardingRule
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        dnsForwardingRulesetName,
        forwardingRuleName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsForwardingRulesets/{dnsForwardingRulesetName}/forwardingRules",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ForwardingRuleListResult
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion, top],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        dnsForwardingRulesetName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ForwardingRuleListResult
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        nextLink,
        dnsForwardingRulesetName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing VirtualNetworkLinks operations. */
class VirtualNetworkLinksImpl {
    /**
     * Initialize a new instance of the class VirtualNetworkLinks class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists virtual network links to a DNS forwarding ruleset.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param options The options parameters.
     */
    list(resourceGroupName, dnsForwardingRulesetName, options) {
        const iter = this.listPagingAll(resourceGroupName, dnsForwardingRulesetName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, dnsForwardingRulesetName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, dnsForwardingRulesetName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, dnsForwardingRulesetName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, dnsForwardingRulesetName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, dnsForwardingRulesetName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, dnsForwardingRulesetName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Creates or updates a virtual network link to a DNS forwarding ruleset.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param virtualNetworkLinkName The name of the virtual network link.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, dnsForwardingRulesetName, virtualNetworkLinkName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                dnsForwardingRulesetName,
                virtualNetworkLinkName,
                parameters,
                options
            }, createOrUpdateOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Creates or updates a virtual network link to a DNS forwarding ruleset.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param virtualNetworkLinkName The name of the virtual network link.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, dnsForwardingRulesetName, virtualNetworkLinkName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, dnsForwardingRulesetName, virtualNetworkLinkName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Updates a virtual network link to a DNS forwarding ruleset.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param virtualNetworkLinkName The name of the virtual network link.
     * @param parameters Parameters supplied to the Update operation.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, dnsForwardingRulesetName, virtualNetworkLinkName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                dnsForwardingRulesetName,
                virtualNetworkLinkName,
                parameters,
                options
            }, updateOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Updates a virtual network link to a DNS forwarding ruleset.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param virtualNetworkLinkName The name of the virtual network link.
     * @param parameters Parameters supplied to the Update operation.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, dnsForwardingRulesetName, virtualNetworkLinkName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, dnsForwardingRulesetName, virtualNetworkLinkName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Deletes a virtual network link to a DNS forwarding ruleset. WARNING: This operation cannot be
     * undone.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param virtualNetworkLinkName The name of the virtual network link.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, dnsForwardingRulesetName, virtualNetworkLinkName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                dnsForwardingRulesetName,
                virtualNetworkLinkName,
                options
            }, deleteOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes a virtual network link to a DNS forwarding ruleset. WARNING: This operation cannot be
     * undone.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param virtualNetworkLinkName The name of the virtual network link.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, dnsForwardingRulesetName, virtualNetworkLinkName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, dnsForwardingRulesetName, virtualNetworkLinkName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Gets properties of a virtual network link to a DNS forwarding ruleset.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param virtualNetworkLinkName The name of the virtual network link.
     * @param options The options parameters.
     */
    get(resourceGroupName, dnsForwardingRulesetName, virtualNetworkLinkName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            dnsForwardingRulesetName,
            virtualNetworkLinkName,
            options
        }, getOperationSpec);
    }
    /**
     * Lists virtual network links to a DNS forwarding ruleset.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param options The options parameters.
     */
    _list(resourceGroupName, dnsForwardingRulesetName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, dnsForwardingRulesetName, options }, listOperationSpec);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, dnsForwardingRulesetName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, dnsForwardingRulesetName, nextLink, options }, listNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsForwardingRulesets/{dnsForwardingRulesetName}/virtualNetworkLinks/{virtualNetworkLinkName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: VirtualNetworkLink
        },
        201: {
            bodyMapper: VirtualNetworkLink
        },
        202: {
            bodyMapper: VirtualNetworkLink
        },
        204: {
            bodyMapper: VirtualNetworkLink
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: parameters10,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        dnsForwardingRulesetName,
        virtualNetworkLinkName
    ],
    headerParameters: [
        contentType,
        accept,
        ifMatch,
        ifNoneMatch
    ],
    mediaType: "json",
    serializer
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsForwardingRulesets/{dnsForwardingRulesetName}/virtualNetworkLinks/{virtualNetworkLinkName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: VirtualNetworkLink
        },
        201: {
            bodyMapper: VirtualNetworkLink
        },
        202: {
            bodyMapper: VirtualNetworkLink
        },
        204: {
            bodyMapper: VirtualNetworkLink
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: parameters11,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        dnsForwardingRulesetName,
        virtualNetworkLinkName
    ],
    headerParameters: [
        contentType,
        accept,
        ifMatch
    ],
    mediaType: "json",
    serializer
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsForwardingRulesets/{dnsForwardingRulesetName}/virtualNetworkLinks/{virtualNetworkLinkName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        dnsForwardingRulesetName,
        virtualNetworkLinkName
    ],
    headerParameters: [accept, ifMatch],
    serializer
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsForwardingRulesets/{dnsForwardingRulesetName}/virtualNetworkLinks/{virtualNetworkLinkName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: VirtualNetworkLink
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        dnsForwardingRulesetName,
        virtualNetworkLinkName
    ],
    headerParameters: [accept],
    serializer
};
const listOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsForwardingRulesets/{dnsForwardingRulesetName}/virtualNetworkLinks",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: VirtualNetworkLinkListResult
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion, top],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        dnsForwardingRulesetName
    ],
    headerParameters: [accept],
    serializer
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: VirtualNetworkLinkListResult
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        nextLink,
        dnsForwardingRulesetName
    ],
    headerParameters: [accept],
    serializer
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class DnsResolverManagementClient extends coreClient__namespace.ServiceClient {
    /**
     * Initializes a new instance of the DnsResolverManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials, subscriptionId, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        if (subscriptionId === undefined) {
            throw new Error("'subscriptionId' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-dnsresolver/1.1.0`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName
            });
            this.pipeline.addPolicy(coreRestPipeline__namespace.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient__namespace.authorizeRequestOnClaimChallenge
                }
            }));
        }
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.apiVersion = options.apiVersion || "2022-07-01";
        this.dnsResolvers = new DnsResolversImpl(this);
        this.inboundEndpoints = new InboundEndpointsImpl(this);
        this.outboundEndpoints = new OutboundEndpointsImpl(this);
        this.dnsForwardingRulesets = new DnsForwardingRulesetsImpl(this);
        this.forwardingRules = new ForwardingRulesImpl(this);
        this.virtualNetworkLinks = new VirtualNetworkLinksImpl(this);
        this.addCustomApiVersionPolicy(options.apiVersion);
    }
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    addCustomApiVersionPolicy(apiVersion) {
        if (!apiVersion) {
            return;
        }
        const apiVersionPolicy = {
            name: "CustomApiVersionPolicy",
            sendRequest(request, next) {
                return tslib.__awaiter(this, void 0, void 0, function* () {
                    const param = request.url.split("?");
                    if (param.length > 1) {
                        const newParams = param[1].split("&").map((item) => {
                            if (item.indexOf("api-version") > -1) {
                                return "api-version=" + apiVersion;
                            }
                            else {
                                return item;
                            }
                        });
                        request.url = param[0] + "?" + newParams.join("&");
                    }
                    return next(request);
                });
            }
        };
        this.pipeline.addPolicy(apiVersionPolicy);
    }
}

exports.DnsResolverManagementClient = DnsResolverManagementClient;
exports.getContinuationToken = getContinuationToken;
//# sourceMappingURL=index.js.map
