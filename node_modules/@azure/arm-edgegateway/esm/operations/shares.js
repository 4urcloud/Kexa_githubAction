/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/sharesMappers";
import * as Parameters from "../models/parameters";
/** Class representing a Shares. */
var Shares = /** @class */ (function () {
    /**
     * Create a Shares.
     * @param {DataBoxEdgeManagementClientContext} client Reference to the service client.
     */
    function Shares(client) {
        this.client = client;
    }
    Shares.prototype.listByDataBoxEdgeDevice = function (deviceName, resourceGroupName, options, callback) {
        return this.client.sendOperationRequest({
            deviceName: deviceName,
            resourceGroupName: resourceGroupName,
            options: options
        }, listByDataBoxEdgeDeviceOperationSpec, callback);
    };
    Shares.prototype.get = function (deviceName, name, resourceGroupName, options, callback) {
        return this.client.sendOperationRequest({
            deviceName: deviceName,
            name: name,
            resourceGroupName: resourceGroupName,
            options: options
        }, getOperationSpec, callback);
    };
    /**
     * @summary Creates a new share or updates an existing share on the device.
     * @param deviceName The device name.
     * @param name The share name.
     * @param share The share properties.
     * @param resourceGroupName The resource group name.
     * @param [options] The optional parameters
     * @returns Promise<Models.SharesCreateOrUpdateResponse>
     */
    Shares.prototype.createOrUpdate = function (deviceName, name, share, resourceGroupName, options) {
        return this.beginCreateOrUpdate(deviceName, name, share, resourceGroupName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Deletes the share on the data box edge/gateway device.
     * @param deviceName The device name.
     * @param name The share name.
     * @param resourceGroupName The resource group name.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    Shares.prototype.deleteMethod = function (deviceName, name, resourceGroupName, options) {
        return this.beginDeleteMethod(deviceName, name, resourceGroupName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * @summary Refreshes the share metadata with the data from the cloud.
     * @param deviceName The device name.
     * @param name The share name.
     * @param resourceGroupName The resource group name.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    Shares.prototype.refresh = function (deviceName, name, resourceGroupName, options) {
        return this.beginRefresh(deviceName, name, resourceGroupName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * @summary Creates a new share or updates an existing share on the device.
     * @param deviceName The device name.
     * @param name The share name.
     * @param share The share properties.
     * @param resourceGroupName The resource group name.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Shares.prototype.beginCreateOrUpdate = function (deviceName, name, share, resourceGroupName, options) {
        return this.client.sendLRORequest({
            deviceName: deviceName,
            name: name,
            share: share,
            resourceGroupName: resourceGroupName,
            options: options
        }, beginCreateOrUpdateOperationSpec, options);
    };
    /**
     * Deletes the share on the data box edge/gateway device.
     * @param deviceName The device name.
     * @param name The share name.
     * @param resourceGroupName The resource group name.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Shares.prototype.beginDeleteMethod = function (deviceName, name, resourceGroupName, options) {
        return this.client.sendLRORequest({
            deviceName: deviceName,
            name: name,
            resourceGroupName: resourceGroupName,
            options: options
        }, beginDeleteMethodOperationSpec, options);
    };
    /**
     * @summary Refreshes the share metadata with the data from the cloud.
     * @param deviceName The device name.
     * @param name The share name.
     * @param resourceGroupName The resource group name.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Shares.prototype.beginRefresh = function (deviceName, name, resourceGroupName, options) {
        return this.client.sendLRORequest({
            deviceName: deviceName,
            name: name,
            resourceGroupName: resourceGroupName,
            options: options
        }, beginRefreshOperationSpec, options);
    };
    Shares.prototype.listByDataBoxEdgeDeviceNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listByDataBoxEdgeDeviceNextOperationSpec, callback);
    };
    return Shares;
}());
export { Shares };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var listByDataBoxEdgeDeviceOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/shares",
    urlParameters: [
        Parameters.deviceName,
        Parameters.subscriptionId,
        Parameters.resourceGroupName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ShareList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/shares/{name}",
    urlParameters: [
        Parameters.deviceName,
        Parameters.name,
        Parameters.subscriptionId,
        Parameters.resourceGroupName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.Share
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginCreateOrUpdateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/shares/{name}",
    urlParameters: [
        Parameters.deviceName,
        Parameters.name,
        Parameters.subscriptionId,
        Parameters.resourceGroupName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "share",
        mapper: __assign(__assign({}, Mappers.Share), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.Share
        },
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginDeleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/shares/{name}",
    urlParameters: [
        Parameters.deviceName,
        Parameters.name,
        Parameters.subscriptionId,
        Parameters.resourceGroupName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginRefreshOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/shares/{name}/refresh",
    urlParameters: [
        Parameters.deviceName,
        Parameters.name,
        Parameters.subscriptionId,
        Parameters.resourceGroupName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listByDataBoxEdgeDeviceNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ShareList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=shares.js.map