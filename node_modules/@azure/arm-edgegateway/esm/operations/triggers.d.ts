import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import { DataBoxEdgeManagementClientContext } from "../dataBoxEdgeManagementClientContext";
/** Class representing a Triggers. */
export declare class Triggers {
    private readonly client;
    /**
     * Create a Triggers.
     * @param {DataBoxEdgeManagementClientContext} client Reference to the service client.
     */
    constructor(client: DataBoxEdgeManagementClientContext);
    /**
     * Lists all the triggers configured in the device.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param [options] The optional parameters
     * @returns Promise<Models.TriggersListByDataBoxEdgeDeviceResponse>
     */
    listByDataBoxEdgeDevice(deviceName: string, resourceGroupName: string, options?: Models.TriggersListByDataBoxEdgeDeviceOptionalParams): Promise<Models.TriggersListByDataBoxEdgeDeviceResponse>;
    /**
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param callback The callback
     */
    listByDataBoxEdgeDevice(deviceName: string, resourceGroupName: string, callback: msRest.ServiceCallback<Models.TriggerList>): void;
    /**
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param options The optional parameters
     * @param callback The callback
     */
    listByDataBoxEdgeDevice(deviceName: string, resourceGroupName: string, options: Models.TriggersListByDataBoxEdgeDeviceOptionalParams, callback: msRest.ServiceCallback<Models.TriggerList>): void;
    /**
     * Get a specific trigger by name.
     * @param deviceName The device name.
     * @param name The trigger name.
     * @param resourceGroupName The resource group name.
     * @param [options] The optional parameters
     * @returns Promise<Models.TriggersGetResponse>
     */
    get(deviceName: string, name: string, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.TriggersGetResponse>;
    /**
     * @param deviceName The device name.
     * @param name The trigger name.
     * @param resourceGroupName The resource group name.
     * @param callback The callback
     */
    get(deviceName: string, name: string, resourceGroupName: string, callback: msRest.ServiceCallback<Models.TriggerUnion>): void;
    /**
     * @param deviceName The device name.
     * @param name The trigger name.
     * @param resourceGroupName The resource group name.
     * @param options The optional parameters
     * @param callback The callback
     */
    get(deviceName: string, name: string, resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TriggerUnion>): void;
    /**
     * Creates or updates a trigger.
     * @param deviceName Creates or updates a trigger
     * @param name The trigger name.
     * @param trigger The trigger.
     * @param resourceGroupName The resource group name.
     * @param [options] The optional parameters
     * @returns Promise<Models.TriggersCreateOrUpdateResponse>
     */
    createOrUpdate(deviceName: string, name: string, trigger: Models.TriggerUnion, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.TriggersCreateOrUpdateResponse>;
    /**
     * Deletes the trigger on the gateway device.
     * @param deviceName The device name.
     * @param name The trigger name.
     * @param resourceGroupName The resource group name.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteMethod(deviceName: string, name: string, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * Creates or updates a trigger.
     * @param deviceName Creates or updates a trigger
     * @param name The trigger name.
     * @param trigger The trigger.
     * @param resourceGroupName The resource group name.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginCreateOrUpdate(deviceName: string, name: string, trigger: Models.TriggerUnion, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Deletes the trigger on the gateway device.
     * @param deviceName The device name.
     * @param name The trigger name.
     * @param resourceGroupName The resource group name.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginDeleteMethod(deviceName: string, name: string, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Lists all the triggers configured in the device.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.TriggersListByDataBoxEdgeDeviceNextResponse>
     */
    listByDataBoxEdgeDeviceNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.TriggersListByDataBoxEdgeDeviceNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listByDataBoxEdgeDeviceNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.TriggerList>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listByDataBoxEdgeDeviceNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TriggerList>): void;
}
//# sourceMappingURL=triggers.d.ts.map