/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/devicesMappers";
import * as Parameters from "../models/parameters";
/** Class representing a Devices. */
var Devices = /** @class */ (function () {
    /**
     * Create a Devices.
     * @param {DataBoxEdgeManagementClientContext} client Reference to the service client.
     */
    function Devices(client) {
        this.client = client;
    }
    Devices.prototype.listBySubscription = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, listBySubscriptionOperationSpec, callback);
    };
    Devices.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            options: options
        }, listByResourceGroupOperationSpec, callback);
    };
    Devices.prototype.get = function (deviceName, resourceGroupName, options, callback) {
        return this.client.sendOperationRequest({
            deviceName: deviceName,
            resourceGroupName: resourceGroupName,
            options: options
        }, getOperationSpec, callback);
    };
    /**
     * Creates or updates a Data Box Edge/Gateway resource.
     * @param deviceName The device name.
     * @param dataBoxEdgeDevice The resource object.
     * @param resourceGroupName The resource group name.
     * @param [options] The optional parameters
     * @returns Promise<Models.DevicesCreateOrUpdateResponse>
     */
    Devices.prototype.createOrUpdate = function (deviceName, dataBoxEdgeDevice, resourceGroupName, options) {
        return this.beginCreateOrUpdate(deviceName, dataBoxEdgeDevice, resourceGroupName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Deletes the data box edge/gateway device.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    Devices.prototype.deleteMethod = function (deviceName, resourceGroupName, options) {
        return this.beginDeleteMethod(deviceName, resourceGroupName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    Devices.prototype.update = function (deviceName, resourceGroupName, options, callback) {
        return this.client.sendOperationRequest({
            deviceName: deviceName,
            resourceGroupName: resourceGroupName,
            options: options
        }, updateOperationSpec, callback);
    };
    /**
     * @summary Downloads the updates on a data box edge/gateway device.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    Devices.prototype.downloadUpdates = function (deviceName, resourceGroupName, options) {
        return this.beginDownloadUpdates(deviceName, resourceGroupName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    Devices.prototype.getExtendedInformation = function (deviceName, resourceGroupName, options, callback) {
        return this.client.sendOperationRequest({
            deviceName: deviceName,
            resourceGroupName: resourceGroupName,
            options: options
        }, getExtendedInformationOperationSpec, callback);
    };
    /**
     * @summary Installs the updates on the data box edge/gateway device.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    Devices.prototype.installUpdates = function (deviceName, resourceGroupName, options) {
        return this.beginInstallUpdates(deviceName, resourceGroupName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    Devices.prototype.getNetworkSettings = function (deviceName, resourceGroupName, options, callback) {
        return this.client.sendOperationRequest({
            deviceName: deviceName,
            resourceGroupName: resourceGroupName,
            options: options
        }, getNetworkSettingsOperationSpec, callback);
    };
    /**
     * @summary Scans for updates on a data box edge/gateway device.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    Devices.prototype.scanForUpdates = function (deviceName, resourceGroupName, options) {
        return this.beginScanForUpdates(deviceName, resourceGroupName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Updates the security settings on a data box edge/gateway device.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param deviceAdminPassword Device administrator password as an encrypted string (encrypted using
     * RSA PKCS #1) is used to sign into the  local web UI of the device. The Actual password should
     * have at least 8 characters that are a combination of  uppercase, lowercase, numeric, and special
     * characters.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    Devices.prototype.createOrUpdateSecuritySettings = function (deviceName, resourceGroupName, deviceAdminPassword, options) {
        return this.beginCreateOrUpdateSecuritySettings(deviceName, resourceGroupName, deviceAdminPassword, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    Devices.prototype.getUpdateSummary = function (deviceName, resourceGroupName, options, callback) {
        return this.client.sendOperationRequest({
            deviceName: deviceName,
            resourceGroupName: resourceGroupName,
            options: options
        }, getUpdateSummaryOperationSpec, callback);
    };
    Devices.prototype.uploadCertificate = function (deviceName, resourceGroupName, certificate, options, callback) {
        return this.client.sendOperationRequest({
            deviceName: deviceName,
            resourceGroupName: resourceGroupName,
            certificate: certificate,
            options: options
        }, uploadCertificateOperationSpec, callback);
    };
    /**
     * Creates or updates a Data Box Edge/Gateway resource.
     * @param deviceName The device name.
     * @param dataBoxEdgeDevice The resource object.
     * @param resourceGroupName The resource group name.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Devices.prototype.beginCreateOrUpdate = function (deviceName, dataBoxEdgeDevice, resourceGroupName, options) {
        return this.client.sendLRORequest({
            deviceName: deviceName,
            dataBoxEdgeDevice: dataBoxEdgeDevice,
            resourceGroupName: resourceGroupName,
            options: options
        }, beginCreateOrUpdateOperationSpec, options);
    };
    /**
     * Deletes the data box edge/gateway device.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Devices.prototype.beginDeleteMethod = function (deviceName, resourceGroupName, options) {
        return this.client.sendLRORequest({
            deviceName: deviceName,
            resourceGroupName: resourceGroupName,
            options: options
        }, beginDeleteMethodOperationSpec, options);
    };
    /**
     * @summary Downloads the updates on a data box edge/gateway device.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Devices.prototype.beginDownloadUpdates = function (deviceName, resourceGroupName, options) {
        return this.client.sendLRORequest({
            deviceName: deviceName,
            resourceGroupName: resourceGroupName,
            options: options
        }, beginDownloadUpdatesOperationSpec, options);
    };
    /**
     * @summary Installs the updates on the data box edge/gateway device.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Devices.prototype.beginInstallUpdates = function (deviceName, resourceGroupName, options) {
        return this.client.sendLRORequest({
            deviceName: deviceName,
            resourceGroupName: resourceGroupName,
            options: options
        }, beginInstallUpdatesOperationSpec, options);
    };
    /**
     * @summary Scans for updates on a data box edge/gateway device.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Devices.prototype.beginScanForUpdates = function (deviceName, resourceGroupName, options) {
        return this.client.sendLRORequest({
            deviceName: deviceName,
            resourceGroupName: resourceGroupName,
            options: options
        }, beginScanForUpdatesOperationSpec, options);
    };
    /**
     * Updates the security settings on a data box edge/gateway device.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param deviceAdminPassword Device administrator password as an encrypted string (encrypted using
     * RSA PKCS #1) is used to sign into the  local web UI of the device. The Actual password should
     * have at least 8 characters that are a combination of  uppercase, lowercase, numeric, and special
     * characters.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Devices.prototype.beginCreateOrUpdateSecuritySettings = function (deviceName, resourceGroupName, deviceAdminPassword, options) {
        return this.client.sendLRORequest({
            deviceName: deviceName,
            resourceGroupName: resourceGroupName,
            deviceAdminPassword: deviceAdminPassword,
            options: options
        }, beginCreateOrUpdateSecuritySettingsOperationSpec, options);
    };
    Devices.prototype.listBySubscriptionNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listBySubscriptionNextOperationSpec, callback);
    };
    Devices.prototype.listByResourceGroupNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listByResourceGroupNextOperationSpec, callback);
    };
    return Devices;
}());
export { Devices };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var listBySubscriptionOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices",
    urlParameters: [
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion,
        Parameters.expand
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DataBoxEdgeDeviceList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listByResourceGroupOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName
    ],
    queryParameters: [
        Parameters.apiVersion,
        Parameters.expand
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DataBoxEdgeDeviceList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}",
    urlParameters: [
        Parameters.deviceName,
        Parameters.subscriptionId,
        Parameters.resourceGroupName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DataBoxEdgeDevice
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var updateOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}",
    urlParameters: [
        Parameters.deviceName,
        Parameters.subscriptionId,
        Parameters.resourceGroupName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: {
            tags: [
                "options",
                "tags"
            ]
        },
        mapper: __assign(__assign({}, Mappers.DataBoxEdgeDevicePatch), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.DataBoxEdgeDevice
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getExtendedInformationOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/getExtendedInformation",
    urlParameters: [
        Parameters.deviceName,
        Parameters.subscriptionId,
        Parameters.resourceGroupName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DataBoxEdgeDeviceExtendedInfo
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getNetworkSettingsOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/networkSettings/default",
    urlParameters: [
        Parameters.deviceName,
        Parameters.subscriptionId,
        Parameters.resourceGroupName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.NetworkSettings
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getUpdateSummaryOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/updateSummary/default",
    urlParameters: [
        Parameters.deviceName,
        Parameters.subscriptionId,
        Parameters.resourceGroupName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.UpdateSummary
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var uploadCertificateOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/uploadCertificate",
    urlParameters: [
        Parameters.deviceName,
        Parameters.subscriptionId,
        Parameters.resourceGroupName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: {
            authenticationType: [
                "options",
                "authenticationType"
            ],
            certificate: "certificate"
        },
        mapper: __assign(__assign({}, Mappers.UploadCertificateRequest), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.UploadCertificateResponse
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginCreateOrUpdateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}",
    urlParameters: [
        Parameters.deviceName,
        Parameters.subscriptionId,
        Parameters.resourceGroupName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "dataBoxEdgeDevice",
        mapper: __assign(__assign({}, Mappers.DataBoxEdgeDevice), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.DataBoxEdgeDevice
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginDeleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}",
    urlParameters: [
        Parameters.deviceName,
        Parameters.subscriptionId,
        Parameters.resourceGroupName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginDownloadUpdatesOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/downloadUpdates",
    urlParameters: [
        Parameters.deviceName,
        Parameters.subscriptionId,
        Parameters.resourceGroupName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginInstallUpdatesOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/installUpdates",
    urlParameters: [
        Parameters.deviceName,
        Parameters.subscriptionId,
        Parameters.resourceGroupName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginScanForUpdatesOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/scanForUpdates",
    urlParameters: [
        Parameters.deviceName,
        Parameters.subscriptionId,
        Parameters.resourceGroupName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginCreateOrUpdateSecuritySettingsOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/securitySettings/default/update",
    urlParameters: [
        Parameters.deviceName,
        Parameters.subscriptionId,
        Parameters.resourceGroupName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: {
            deviceAdminPassword: "deviceAdminPassword"
        },
        mapper: __assign(__assign({}, Mappers.SecuritySettings), { required: true })
    },
    responses: {
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listBySubscriptionNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DataBoxEdgeDeviceList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listByResourceGroupNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DataBoxEdgeDeviceList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=devices.js.map