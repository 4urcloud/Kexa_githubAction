import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import { DataBoxEdgeManagementClientContext } from "../dataBoxEdgeManagementClientContext";
/** Class representing a Devices. */
export declare class Devices {
    private readonly client;
    /**
     * Create a Devices.
     * @param {DataBoxEdgeManagementClientContext} client Reference to the service client.
     */
    constructor(client: DataBoxEdgeManagementClientContext);
    /**
     * Gets all the data box edge/gateway devices in a subscription.
     * @param [options] The optional parameters
     * @returns Promise<Models.DevicesListBySubscriptionResponse>
     */
    listBySubscription(options?: Models.DevicesListBySubscriptionOptionalParams): Promise<Models.DevicesListBySubscriptionResponse>;
    /**
     * @param callback The callback
     */
    listBySubscription(callback: msRest.ServiceCallback<Models.DataBoxEdgeDeviceList>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    listBySubscription(options: Models.DevicesListBySubscriptionOptionalParams, callback: msRest.ServiceCallback<Models.DataBoxEdgeDeviceList>): void;
    /**
     * Gets all the data box edge/gateway devices in a resource group.
     * @param resourceGroupName The resource group name.
     * @param [options] The optional parameters
     * @returns Promise<Models.DevicesListByResourceGroupResponse>
     */
    listByResourceGroup(resourceGroupName: string, options?: Models.DevicesListByResourceGroupOptionalParams): Promise<Models.DevicesListByResourceGroupResponse>;
    /**
     * @param resourceGroupName The resource group name.
     * @param callback The callback
     */
    listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.DataBoxEdgeDeviceList>): void;
    /**
     * @param resourceGroupName The resource group name.
     * @param options The optional parameters
     * @param callback The callback
     */
    listByResourceGroup(resourceGroupName: string, options: Models.DevicesListByResourceGroupOptionalParams, callback: msRest.ServiceCallback<Models.DataBoxEdgeDeviceList>): void;
    /**
     * Gets the properties of the data box edge/gateway device.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param [options] The optional parameters
     * @returns Promise<Models.DevicesGetResponse>
     */
    get(deviceName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.DevicesGetResponse>;
    /**
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param callback The callback
     */
    get(deviceName: string, resourceGroupName: string, callback: msRest.ServiceCallback<Models.DataBoxEdgeDevice>): void;
    /**
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param options The optional parameters
     * @param callback The callback
     */
    get(deviceName: string, resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DataBoxEdgeDevice>): void;
    /**
     * Creates or updates a Data Box Edge/Gateway resource.
     * @param deviceName The device name.
     * @param dataBoxEdgeDevice The resource object.
     * @param resourceGroupName The resource group name.
     * @param [options] The optional parameters
     * @returns Promise<Models.DevicesCreateOrUpdateResponse>
     */
    createOrUpdate(deviceName: string, dataBoxEdgeDevice: Models.DataBoxEdgeDevice, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.DevicesCreateOrUpdateResponse>;
    /**
     * Deletes the data box edge/gateway device.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteMethod(deviceName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * Modifies a Data Box Edge/Gateway resource.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param [options] The optional parameters
     * @returns Promise<Models.DevicesUpdateResponse>
     */
    update(deviceName: string, resourceGroupName: string, options?: Models.DevicesUpdateOptionalParams): Promise<Models.DevicesUpdateResponse>;
    /**
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param callback The callback
     */
    update(deviceName: string, resourceGroupName: string, callback: msRest.ServiceCallback<Models.DataBoxEdgeDevice>): void;
    /**
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param options The optional parameters
     * @param callback The callback
     */
    update(deviceName: string, resourceGroupName: string, options: Models.DevicesUpdateOptionalParams, callback: msRest.ServiceCallback<Models.DataBoxEdgeDevice>): void;
    /**
     * @summary Downloads the updates on a data box edge/gateway device.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    downloadUpdates(deviceName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * Gets additional information for the specified data box edge/gateway device.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param [options] The optional parameters
     * @returns Promise<Models.DevicesGetExtendedInformationResponse>
     */
    getExtendedInformation(deviceName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.DevicesGetExtendedInformationResponse>;
    /**
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param callback The callback
     */
    getExtendedInformation(deviceName: string, resourceGroupName: string, callback: msRest.ServiceCallback<Models.DataBoxEdgeDeviceExtendedInfo>): void;
    /**
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param options The optional parameters
     * @param callback The callback
     */
    getExtendedInformation(deviceName: string, resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DataBoxEdgeDeviceExtendedInfo>): void;
    /**
     * @summary Installs the updates on the data box edge/gateway device.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    installUpdates(deviceName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * Gets the network settings of the specified data box edge/gateway device.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param [options] The optional parameters
     * @returns Promise<Models.DevicesGetNetworkSettingsResponse>
     */
    getNetworkSettings(deviceName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.DevicesGetNetworkSettingsResponse>;
    /**
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param callback The callback
     */
    getNetworkSettings(deviceName: string, resourceGroupName: string, callback: msRest.ServiceCallback<Models.NetworkSettings>): void;
    /**
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param options The optional parameters
     * @param callback The callback
     */
    getNetworkSettings(deviceName: string, resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NetworkSettings>): void;
    /**
     * @summary Scans for updates on a data box edge/gateway device.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    scanForUpdates(deviceName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * Updates the security settings on a data box edge/gateway device.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param deviceAdminPassword Device administrator password as an encrypted string (encrypted using
     * RSA PKCS #1) is used to sign into the  local web UI of the device. The Actual password should
     * have at least 8 characters that are a combination of  uppercase, lowercase, numeric, and special
     * characters.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    createOrUpdateSecuritySettings(deviceName: string, resourceGroupName: string, deviceAdminPassword: Models.AsymmetricEncryptedSecret, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @summary Gets information about the availability of updates based on the last scan of the
     * device. It also gets information about any ongoing download or install jobs on the device.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param [options] The optional parameters
     * @returns Promise<Models.DevicesGetUpdateSummaryResponse>
     */
    getUpdateSummary(deviceName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.DevicesGetUpdateSummaryResponse>;
    /**
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param callback The callback
     */
    getUpdateSummary(deviceName: string, resourceGroupName: string, callback: msRest.ServiceCallback<Models.UpdateSummary>): void;
    /**
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param options The optional parameters
     * @param callback The callback
     */
    getUpdateSummary(deviceName: string, resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.UpdateSummary>): void;
    /**
     * Uploads registration certificate for the device.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param certificate The base64 encoded certificate raw data.
     * @param [options] The optional parameters
     * @returns Promise<Models.DevicesUploadCertificateResponse>
     */
    uploadCertificate(deviceName: string, resourceGroupName: string, certificate: string, options?: Models.DevicesUploadCertificateOptionalParams): Promise<Models.DevicesUploadCertificateResponse>;
    /**
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param certificate The base64 encoded certificate raw data.
     * @param callback The callback
     */
    uploadCertificate(deviceName: string, resourceGroupName: string, certificate: string, callback: msRest.ServiceCallback<Models.UploadCertificateResponse>): void;
    /**
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param certificate The base64 encoded certificate raw data.
     * @param options The optional parameters
     * @param callback The callback
     */
    uploadCertificate(deviceName: string, resourceGroupName: string, certificate: string, options: Models.DevicesUploadCertificateOptionalParams, callback: msRest.ServiceCallback<Models.UploadCertificateResponse>): void;
    /**
     * Creates or updates a Data Box Edge/Gateway resource.
     * @param deviceName The device name.
     * @param dataBoxEdgeDevice The resource object.
     * @param resourceGroupName The resource group name.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginCreateOrUpdate(deviceName: string, dataBoxEdgeDevice: Models.DataBoxEdgeDevice, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Deletes the data box edge/gateway device.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginDeleteMethod(deviceName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * @summary Downloads the updates on a data box edge/gateway device.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginDownloadUpdates(deviceName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * @summary Installs the updates on the data box edge/gateway device.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginInstallUpdates(deviceName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * @summary Scans for updates on a data box edge/gateway device.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginScanForUpdates(deviceName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Updates the security settings on a data box edge/gateway device.
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param deviceAdminPassword Device administrator password as an encrypted string (encrypted using
     * RSA PKCS #1) is used to sign into the  local web UI of the device. The Actual password should
     * have at least 8 characters that are a combination of  uppercase, lowercase, numeric, and special
     * characters.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginCreateOrUpdateSecuritySettings(deviceName: string, resourceGroupName: string, deviceAdminPassword: Models.AsymmetricEncryptedSecret, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Gets all the data box edge/gateway devices in a subscription.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.DevicesListBySubscriptionNextResponse>
     */
    listBySubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.DevicesListBySubscriptionNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listBySubscriptionNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DataBoxEdgeDeviceList>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listBySubscriptionNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DataBoxEdgeDeviceList>): void;
    /**
     * Gets all the data box edge/gateway devices in a resource group.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.DevicesListByResourceGroupNextResponse>
     */
    listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.DevicesListByResourceGroupNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DataBoxEdgeDeviceList>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DataBoxEdgeDeviceList>): void;
}
//# sourceMappingURL=devices.d.ts.map